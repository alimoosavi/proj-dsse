post_link,title,body_question,body_answer,answer_id,viewcount,tags,score,score_answer,answercount,LastActivityDate,AcceptedAnswerId,CommentCount,FavoriteCount,LastEditorUserId,LastEditorDisplayName,LastEditDate,CreationDate,ClosedDate,answer_LastEditDate,answer_CreationDate
"7124735","HMAC-SHA256 Algorithm for signature calculation","<p>I am trying to create a signature using the HMAC-SHA256 algorithm and this is my code.
I am using US ASCII encoding.</p>

<pre><code>final Charset asciiCs = Charset.forName(""US-ASCII"");
final Mac sha256_HMAC = Mac.getInstance(""HmacSHA256"");
final SecretKeySpec secret_key = new javax.crypto.spec.SecretKeySpec(asciiCs.encode(""key"").array(), ""HmacSHA256"");
final byte[] mac_data = sha256_HMAC.doFinal(asciiCs.encode(""The quick brown fox jumps over the lazy dog"").array());
String result = """";
for (final byte element : mac_data)
{
    result += Integer.toString((element &amp; 0xff) + 0x100, 16).substring(1);
}
System.out.println(""Result:["" + result + ""]"");
</code></pre>

<p>The result that I am getting from the above code is:</p>

<pre><code>f7bc83f430538424b13298e6aa6fb143ef4d59a14946175997479dbc2d1a3cd8
</code></pre>

<p>This is same as to that of shown in the wiki</p>

<pre><code>HMAC_SHA256(""key"", ""The quick brown fox jumps over the lazy dog"") = 0x f7bc83f430538424b13298e6aa6fb143ef4d59a14946175997479dbc2d1a3cd8
</code></pre>

<p><em>except</em> for the <code>0x</code>.</p>

<p>I am looking for ideas/comments if I am doing everything right or may be I can improve my code.</p>
","<p>The 0x just denotes that the characters after it represent a hex string.</p>

<pre><code>0x1A == 1Ah == 26 == 1A
</code></pre>

<p>So the 0x is just to clarify what format the output is in, no need to worry about it. </p>
","7124789","126427","<java><character-encoding><digital-signature><hmac>","58","36","9","2019-06-19 05:13:03","7124789","2","17","608639","","2018-08-17 06:06:38","2011-08-19 16:41:52","","","2011-08-19 16:46:31"
"7124735","HMAC-SHA256 Algorithm for signature calculation","<p>I am trying to create a signature using the HMAC-SHA256 algorithm and this is my code.
I am using US ASCII encoding.</p>

<pre><code>final Charset asciiCs = Charset.forName(""US-ASCII"");
final Mac sha256_HMAC = Mac.getInstance(""HmacSHA256"");
final SecretKeySpec secret_key = new javax.crypto.spec.SecretKeySpec(asciiCs.encode(""key"").array(), ""HmacSHA256"");
final byte[] mac_data = sha256_HMAC.doFinal(asciiCs.encode(""The quick brown fox jumps over the lazy dog"").array());
String result = """";
for (final byte element : mac_data)
{
    result += Integer.toString((element &amp; 0xff) + 0x100, 16).substring(1);
}
System.out.println(""Result:["" + result + ""]"");
</code></pre>

<p>The result that I am getting from the above code is:</p>

<pre><code>f7bc83f430538424b13298e6aa6fb143ef4d59a14946175997479dbc2d1a3cd8
</code></pre>

<p>This is same as to that of shown in the wiki</p>

<pre><code>HMAC_SHA256(""key"", ""The quick brown fox jumps over the lazy dog"") = 0x f7bc83f430538424b13298e6aa6fb143ef4d59a14946175997479dbc2d1a3cd8
</code></pre>

<p><em>except</em> for the <code>0x</code>.</p>

<p>I am looking for ideas/comments if I am doing everything right or may be I can improve my code.</p>
","<p>The answer that you got there is correct. One minor thing in the code above, you need to init(key) before you can call doFinal()</p>

<pre><code>    final Charset charSet = Charset.forName(""US-ASCII"");
    final Mac sha256_HMAC = Mac.getInstance(""HmacSHA256"");

    final SecretKeySpec secret_key = new javax.crypto.spec.SecretKeySpec(charSet.encode(""key"").array(), ""HmacSHA256"");
    try {
        sha256_HMAC.init(secret_key);
    } catch (InvalidKeyException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
    }
    ...
</code></pre>
","9168323","126427","<java><character-encoding><digital-signature><hmac>","58","14","9","2019-06-19 05:13:03","7124789","2","17","608639","","2018-08-17 06:06:38","2011-08-19 16:41:52","","","2012-02-06 22:31:20"
"7124735","HMAC-SHA256 Algorithm for signature calculation","<p>I am trying to create a signature using the HMAC-SHA256 algorithm and this is my code.
I am using US ASCII encoding.</p>

<pre><code>final Charset asciiCs = Charset.forName(""US-ASCII"");
final Mac sha256_HMAC = Mac.getInstance(""HmacSHA256"");
final SecretKeySpec secret_key = new javax.crypto.spec.SecretKeySpec(asciiCs.encode(""key"").array(), ""HmacSHA256"");
final byte[] mac_data = sha256_HMAC.doFinal(asciiCs.encode(""The quick brown fox jumps over the lazy dog"").array());
String result = """";
for (final byte element : mac_data)
{
    result += Integer.toString((element &amp; 0xff) + 0x100, 16).substring(1);
}
System.out.println(""Result:["" + result + ""]"");
</code></pre>

<p>The result that I am getting from the above code is:</p>

<pre><code>f7bc83f430538424b13298e6aa6fb143ef4d59a14946175997479dbc2d1a3cd8
</code></pre>

<p>This is same as to that of shown in the wiki</p>

<pre><code>HMAC_SHA256(""key"", ""The quick brown fox jumps over the lazy dog"") = 0x f7bc83f430538424b13298e6aa6fb143ef4d59a14946175997479dbc2d1a3cd8
</code></pre>

<p><em>except</em> for the <code>0x</code>.</p>

<p>I am looking for ideas/comments if I am doing everything right or may be I can improve my code.</p>
","<p>Here is my solution:</p>

<pre><code>public static String encode(String key, String data) throws Exception {
  Mac sha256_HMAC = Mac.getInstance(""HmacSHA256"");
  SecretKeySpec secret_key = new SecretKeySpec(key.getBytes(""UTF-8""), ""HmacSHA256"");
  sha256_HMAC.init(secret_key);

  return Hex.encodeHexString(sha256_HMAC.doFinal(data.getBytes(""UTF-8"")));
}

public static void main(String [] args) throws Exception {
  System.out.println(encode(""key"", ""The quick brown fox jumps over the lazy dog""));
}
</code></pre>

<p>Or you can return the hash encoded in Base64:</p>

<pre><code>Base64.encodeBase64String(sha256_HMAC.doFinal(data.getBytes(""UTF-8"")));
</code></pre>

<p>The output in hex is as expected:</p>

<pre><code>f7bc83f430538424b13298e6aa6fb143ef4d59a14946175997479dbc2d1a3cd8
</code></pre>
","11804805","126427","<java><character-encoding><digital-signature><hmac>","58","66","9","2019-06-19 05:13:03","7124789","2","17","608639","","2018-08-17 06:06:38","2011-08-19 16:41:52","","2015-06-09 02:10:16","2012-08-04 00:09:35"
"7124735","HMAC-SHA256 Algorithm for signature calculation","<p>I am trying to create a signature using the HMAC-SHA256 algorithm and this is my code.
I am using US ASCII encoding.</p>

<pre><code>final Charset asciiCs = Charset.forName(""US-ASCII"");
final Mac sha256_HMAC = Mac.getInstance(""HmacSHA256"");
final SecretKeySpec secret_key = new javax.crypto.spec.SecretKeySpec(asciiCs.encode(""key"").array(), ""HmacSHA256"");
final byte[] mac_data = sha256_HMAC.doFinal(asciiCs.encode(""The quick brown fox jumps over the lazy dog"").array());
String result = """";
for (final byte element : mac_data)
{
    result += Integer.toString((element &amp; 0xff) + 0x100, 16).substring(1);
}
System.out.println(""Result:["" + result + ""]"");
</code></pre>

<p>The result that I am getting from the above code is:</p>

<pre><code>f7bc83f430538424b13298e6aa6fb143ef4d59a14946175997479dbc2d1a3cd8
</code></pre>

<p>This is same as to that of shown in the wiki</p>

<pre><code>HMAC_SHA256(""key"", ""The quick brown fox jumps over the lazy dog"") = 0x f7bc83f430538424b13298e6aa6fb143ef4d59a14946175997479dbc2d1a3cd8
</code></pre>

<p><em>except</em> for the <code>0x</code>.</p>

<p>I am looking for ideas/comments if I am doing everything right or may be I can improve my code.</p>
","<p>Here is my solution:</p>

<pre><code>public String HMAC_SHA256(String secret, String message)
{
    String hash="""";
    try{
        Mac sha256_HMAC = Mac.getInstance(""HmacSHA256"");
        SecretKeySpec secret_key = new SecretKeySpec(secret.getBytes(), ""HmacSHA256"");
        sha256_HMAC.init(secret_key);

        hash = Base64.encodeToString(sha256_HMAC.doFinal(message.getBytes()), Base64.DEFAULT);
    }catch (Exception e)
    {

    }
    return hash.trim();
}
</code></pre>
","35252367","126427","<java><character-encoding><digital-signature><hmac>","58","0","9","2019-06-19 05:13:03","7124789","2","17","608639","","2018-08-17 06:06:38","2011-08-19 16:41:52","","","2016-02-07 10:36:25"
"7124735","HMAC-SHA256 Algorithm for signature calculation","<p>I am trying to create a signature using the HMAC-SHA256 algorithm and this is my code.
I am using US ASCII encoding.</p>

<pre><code>final Charset asciiCs = Charset.forName(""US-ASCII"");
final Mac sha256_HMAC = Mac.getInstance(""HmacSHA256"");
final SecretKeySpec secret_key = new javax.crypto.spec.SecretKeySpec(asciiCs.encode(""key"").array(), ""HmacSHA256"");
final byte[] mac_data = sha256_HMAC.doFinal(asciiCs.encode(""The quick brown fox jumps over the lazy dog"").array());
String result = """";
for (final byte element : mac_data)
{
    result += Integer.toString((element &amp; 0xff) + 0x100, 16).substring(1);
}
System.out.println(""Result:["" + result + ""]"");
</code></pre>

<p>The result that I am getting from the above code is:</p>

<pre><code>f7bc83f430538424b13298e6aa6fb143ef4d59a14946175997479dbc2d1a3cd8
</code></pre>

<p>This is same as to that of shown in the wiki</p>

<pre><code>HMAC_SHA256(""key"", ""The quick brown fox jumps over the lazy dog"") = 0x f7bc83f430538424b13298e6aa6fb143ef4d59a14946175997479dbc2d1a3cd8
</code></pre>

<p><em>except</em> for the <code>0x</code>.</p>

<p>I am looking for ideas/comments if I am doing everything right or may be I can improve my code.</p>
","<p>This is working fine for me</p>

<p>I have add dependency</p>

<pre><code>compile 'commons-codec:commons-codec:1.9'
</code></pre>

<p>ref: <a href=""http://mvnrepository.com/artifact/commons-codec/commons-codec/1.9"" rel=""noreferrer"">http://mvnrepository.com/artifact/commons-codec/commons-codec/1.9</a></p>

<p>my function </p>

<pre><code>public String encode(String key, String data) {
    try {

        Mac sha256_HMAC = Mac.getInstance(""HmacSHA256"");
        SecretKeySpec secret_key = new SecretKeySpec(key.getBytes(""UTF-8""), ""HmacSHA256"");
        sha256_HMAC.init(secret_key);

        return new String(Hex.encodeHex(sha256_HMAC.doFinal(data.getBytes(""UTF-8""))));

    } catch (NoSuchAlgorithmException e) {
        e.printStackTrace();
    } catch (InvalidKeyException e) {
        e.printStackTrace();
    } catch (UnsupportedEncodingException e) {
        e.printStackTrace();
    }

    return null;
}
</code></pre>
","35982128","126427","<java><character-encoding><digital-signature><hmac>","58","7","9","2019-06-19 05:13:03","7124789","2","17","608639","","2018-08-17 06:06:38","2011-08-19 16:41:52","","","2016-03-14 07:54:07"
"7124735","HMAC-SHA256 Algorithm for signature calculation","<p>I am trying to create a signature using the HMAC-SHA256 algorithm and this is my code.
I am using US ASCII encoding.</p>

<pre><code>final Charset asciiCs = Charset.forName(""US-ASCII"");
final Mac sha256_HMAC = Mac.getInstance(""HmacSHA256"");
final SecretKeySpec secret_key = new javax.crypto.spec.SecretKeySpec(asciiCs.encode(""key"").array(), ""HmacSHA256"");
final byte[] mac_data = sha256_HMAC.doFinal(asciiCs.encode(""The quick brown fox jumps over the lazy dog"").array());
String result = """";
for (final byte element : mac_data)
{
    result += Integer.toString((element &amp; 0xff) + 0x100, 16).substring(1);
}
System.out.println(""Result:["" + result + ""]"");
</code></pre>

<p>The result that I am getting from the above code is:</p>

<pre><code>f7bc83f430538424b13298e6aa6fb143ef4d59a14946175997479dbc2d1a3cd8
</code></pre>

<p>This is same as to that of shown in the wiki</p>

<pre><code>HMAC_SHA256(""key"", ""The quick brown fox jumps over the lazy dog"") = 0x f7bc83f430538424b13298e6aa6fb143ef4d59a14946175997479dbc2d1a3cd8
</code></pre>

<p><em>except</em> for the <code>0x</code>.</p>

<p>I am looking for ideas/comments if I am doing everything right or may be I can improve my code.</p>
","<p>If but any chance you found a solution how to calculate HMAC-SHA256 here, but you're getting an exception like this one:</p>

<blockquote>
  <p>java.lang.NoSuchMethodError: No static method
  encodeHexString([B)Ljava/lang/String; in class
  Lorg/apache/commons/codec/binary/Hex; or its super classes
  (declaration of 'org.apache.commons.codec.binary.Hex' appears in
  /system/framework/org.apache.http.legacy.boot.jar)</p>
</blockquote>

<p>Then use:</p>

<pre><code>public static String encode(String key, String data) {
    try {
        Mac hmac = Mac.getInstance(""HmacSHA256"");
        SecretKeySpec secret_key = new SecretKeySpec(key.getBytes(""UTF-8""), ""HmacSHA256"");
        hmac.init(secret_key);
        return new String(Hex.encodeHex(hmac.doFinal(data.getBytes(""UTF-8""))));
    } catch (Exception e) {
        throw new RuntimeException(e);
    }
}
</code></pre>
","40878298","126427","<java><character-encoding><digital-signature><hmac>","58","0","9","2019-06-19 05:13:03","7124789","2","17","608639","","2018-08-17 06:06:38","2011-08-19 16:41:52","","","2016-11-30 00:33:24"
"7124735","HMAC-SHA256 Algorithm for signature calculation","<p>I am trying to create a signature using the HMAC-SHA256 algorithm and this is my code.
I am using US ASCII encoding.</p>

<pre><code>final Charset asciiCs = Charset.forName(""US-ASCII"");
final Mac sha256_HMAC = Mac.getInstance(""HmacSHA256"");
final SecretKeySpec secret_key = new javax.crypto.spec.SecretKeySpec(asciiCs.encode(""key"").array(), ""HmacSHA256"");
final byte[] mac_data = sha256_HMAC.doFinal(asciiCs.encode(""The quick brown fox jumps over the lazy dog"").array());
String result = """";
for (final byte element : mac_data)
{
    result += Integer.toString((element &amp; 0xff) + 0x100, 16).substring(1);
}
System.out.println(""Result:["" + result + ""]"");
</code></pre>

<p>The result that I am getting from the above code is:</p>

<pre><code>f7bc83f430538424b13298e6aa6fb143ef4d59a14946175997479dbc2d1a3cd8
</code></pre>

<p>This is same as to that of shown in the wiki</p>

<pre><code>HMAC_SHA256(""key"", ""The quick brown fox jumps over the lazy dog"") = 0x f7bc83f430538424b13298e6aa6fb143ef4d59a14946175997479dbc2d1a3cd8
</code></pre>

<p><em>except</em> for the <code>0x</code>.</p>

<p>I am looking for ideas/comments if I am doing everything right or may be I can improve my code.</p>
","<p>If you're using Guava, its latest release now lets you use </p>

<pre><code> Hashing.hmacSha256()
</code></pre>

<p>Further documentation here:  <a href=""https://guava.dev/releases/23.0/api/docs/com/google/common/hash/Hashing.html#hmacSha256-byte:A-"" rel=""nofollow noreferrer"">https://guava.dev/releases/23.0/api/docs/com/google/common/hash/Hashing.html#hmacSha256-byte:A-</a></p>
","41625076","126427","<java><character-encoding><digital-signature><hmac>","58","12","9","2019-06-19 05:13:03","7124789","2","17","608639","","2018-08-17 06:06:38","2011-08-19 16:41:52","","2019-06-19 05:13:03","2017-01-12 23:44:47"
"7124735","HMAC-SHA256 Algorithm for signature calculation","<p>I am trying to create a signature using the HMAC-SHA256 algorithm and this is my code.
I am using US ASCII encoding.</p>

<pre><code>final Charset asciiCs = Charset.forName(""US-ASCII"");
final Mac sha256_HMAC = Mac.getInstance(""HmacSHA256"");
final SecretKeySpec secret_key = new javax.crypto.spec.SecretKeySpec(asciiCs.encode(""key"").array(), ""HmacSHA256"");
final byte[] mac_data = sha256_HMAC.doFinal(asciiCs.encode(""The quick brown fox jumps over the lazy dog"").array());
String result = """";
for (final byte element : mac_data)
{
    result += Integer.toString((element &amp; 0xff) + 0x100, 16).substring(1);
}
System.out.println(""Result:["" + result + ""]"");
</code></pre>

<p>The result that I am getting from the above code is:</p>

<pre><code>f7bc83f430538424b13298e6aa6fb143ef4d59a14946175997479dbc2d1a3cd8
</code></pre>

<p>This is same as to that of shown in the wiki</p>

<pre><code>HMAC_SHA256(""key"", ""The quick brown fox jumps over the lazy dog"") = 0x f7bc83f430538424b13298e6aa6fb143ef4d59a14946175997479dbc2d1a3cd8
</code></pre>

<p><em>except</em> for the <code>0x</code>.</p>

<p>I am looking for ideas/comments if I am doing everything right or may be I can improve my code.</p>
","<p><strong>Java simple code to generate encoded(HMAC-x) signatures.</strong> <em>(Tried using Java-8 and Eclipse)</em></p>

<pre><code>import java.io.UnsupportedEncodingException;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;

import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;

import com.sun.org.apache.xml.internal.security.utils.Base64;

/**
 * Encryption class to show how to generate encoded(HMAC-x) signatures.
 * 
 */
public class Encryption {

    public static void main(String args[]) {

        String message = ""This is my message."";
        String key = ""your_key"";
        String algorithm = ""HmacMD5"";  // OPTIONS= HmacSHA512, HmacSHA256, HmacSHA1, HmacMD5

        try {

            // 1. Get an algorithm instance.
            Mac sha256_hmac = Mac.getInstance(algorithm);

            // 2. Create secret key.
            SecretKeySpec secret_key = new SecretKeySpec(key.getBytes(""UTF-8""), algorithm);

            // 3. Assign secret key algorithm.
            sha256_hmac.init(secret_key);

            // 4. Generate Base64 encoded cipher string.
            String hash = Base64.encode(sha256_hmac.doFinal(message.getBytes(""UTF-8"")));

            // You can use any other encoding format to get hash text in that encoding.
            System.out.println(hash);

            /**
             * Here are the outputs for given algorithms:-
             * 
             * HmacMD5 = hpytHW6XebJ/hNyJeX/A2w==
             * HmacSHA1 = CZbtauhnzKs+UkBmdC1ssoEqdOw=
             * HmacSHA256 =gCZJBUrp45o+Z5REzMwyJrdbRj8Rvfoy33ULZ1bySXM=
             * HmacSHA512 = OAqi5yEbt2lkwDuFlO6/4UU6XmU2JEDuZn6+1pY4xLAq/JJGSNfSy1if499coG1K2Nqz/yyAMKPIx9C91uLj+w==
             */

        } catch (NoSuchAlgorithmException e) {

            e.printStackTrace();

        } catch (UnsupportedEncodingException e) {

            e.printStackTrace();

        } catch (InvalidKeyException e) {

            e.printStackTrace();

        }

    }

}
</code></pre>

<blockquote>
  <p>NOTE: You can use any other Algorithms and can try generating <code>HmacMD5</code>, <code>HmacSHA1</code>, <code>HmacSHA256</code>, <code>HmacSHA512</code> signatures.</p>
</blockquote>
","48295017","126427","<java><character-encoding><digital-signature><hmac>","58","3","9","2019-06-19 05:13:03","7124789","2","17","608639","","2018-08-17 06:06:38","2011-08-19 16:41:52","","2019-04-30 05:07:19","2018-01-17 06:40:21"
"7124735","HMAC-SHA256 Algorithm for signature calculation","<p>I am trying to create a signature using the HMAC-SHA256 algorithm and this is my code.
I am using US ASCII encoding.</p>

<pre><code>final Charset asciiCs = Charset.forName(""US-ASCII"");
final Mac sha256_HMAC = Mac.getInstance(""HmacSHA256"");
final SecretKeySpec secret_key = new javax.crypto.spec.SecretKeySpec(asciiCs.encode(""key"").array(), ""HmacSHA256"");
final byte[] mac_data = sha256_HMAC.doFinal(asciiCs.encode(""The quick brown fox jumps over the lazy dog"").array());
String result = """";
for (final byte element : mac_data)
{
    result += Integer.toString((element &amp; 0xff) + 0x100, 16).substring(1);
}
System.out.println(""Result:["" + result + ""]"");
</code></pre>

<p>The result that I am getting from the above code is:</p>

<pre><code>f7bc83f430538424b13298e6aa6fb143ef4d59a14946175997479dbc2d1a3cd8
</code></pre>

<p>This is same as to that of shown in the wiki</p>

<pre><code>HMAC_SHA256(""key"", ""The quick brown fox jumps over the lazy dog"") = 0x f7bc83f430538424b13298e6aa6fb143ef4d59a14946175997479dbc2d1a3cd8
</code></pre>

<p><em>except</em> for the <code>0x</code>.</p>

<p>I am looking for ideas/comments if I am doing everything right or may be I can improve my code.</p>
","<h1>Try this</h1>

<p>Sorry for being late, I have tried all above answers but none of them is giving me correct value, After doing the lot of R&amp;D I have found a simple way that gives me exact value.</p>

<ol>
<li><p>Declare this method in your class</p>

<pre><code>private String hmacSha(String KEY, String VALUE, String SHA_TYPE) {
try {
    SecretKeySpec signingKey = new SecretKeySpec(KEY.getBytes(""UTF-8""), SHA_TYPE);
    Mac mac = Mac.getInstance(SHA_TYPE);
    mac.init(signingKey);
    byte[] rawHmac = mac.doFinal(VALUE.getBytes(""UTF-8""));
    byte[] hexArray = {(byte)'0', (byte)'1', (byte)'2', (byte)'3', (byte)'4', (byte)'5', (byte)'6', (byte)'7', (byte)'8', (byte)'9', (byte)'a', (byte)'b', (byte)'c', (byte)'d', (byte)'e', (byte)'f'};
    byte[] hexChars = new byte[rawHmac.length * 2];
    for ( int j = 0; j &lt; rawHmac.length; j++ ) {
        int v = rawHmac[j] &amp; 0xFF;
        hexChars[j * 2] = hexArray[v &gt;&gt;&gt; 4];
        hexChars[j * 2 + 1] = hexArray[v &amp; 0x0F];
    }
    return new String(hexChars);
}
catch (Exception ex) {
    throw new RuntimeException(ex);
}
</code></pre>

<p>}</p></li>
<li><p>Use this like </p>

<pre><code>Log.e(""TAG"", ""onCreate: ""+hmacSha(""key"",""text"",""HmacSHA256""));
</code></pre></li>
</ol>

<p><strong>Verification</strong></p>

<p>1.Android studio output
<a href=""https://i.stack.imgur.com/mxoEt.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/mxoEt.png"" alt=""Android studio output""></a>
2. Online HMAC generator Output(Visit <a href=""https://codebeautify.org/hmac-generator"" rel=""nofollow noreferrer"">here</a> for Online Genrator)
<a href=""https://i.stack.imgur.com/N6mSz.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/N6mSz.png"" alt=""enter image description here""></a></p>
","49167920","126427","<java><character-encoding><digital-signature><hmac>","58","2","9","2019-06-19 05:13:03","7124789","2","17","608639","","2018-08-17 06:06:38","2011-08-19 16:41:52","","","2018-03-08 07:46:07"
"7285059","HMAC-SHA1 in bash","<p>Is there a bash script to generate a <code>HMAC-SHA1</code> hash?</p>

<p>I'm looking for something equivalent to the following PHP code:</p>

<pre><code>hash_hmac(""sha1"", ""value"", ""key"");
</code></pre>
","<p>I realise this isn't exactly what you're asking for, but there's no point in reinventing the wheel and writing a bash version.</p>

<p>You can simply use the <a href=""https://www.openssl.org/docs/man1.1.0/apps/dgst.html"" rel=""noreferrer""><code>openssl</code></a> command to generate the hash within your script.</p>

<pre><code>[me@home] echo -n ""value"" | openssl dgst -sha1 -hmac ""key""
57443a4c052350a44638835d64fd66822f813319
</code></pre>

<p>Or simply:</p>

<pre><code>[me@home] echo -n ""value"" | openssl sha1 -hmac ""key""
57443a4c052350a44638835d64fd66822f813319
</code></pre>

<p>Remember to use <code>-n</code> with <code>echo</code> or else a line break character is appended to the string and that changes your data and the hash.</p>

<p>That command comes from the OpenSSL package which should already be installed (or easily installed) in your choice of Linux/Unix, Cygwin and the likes.</p>

<p>Do note that older versions of <code>openssl</code> (such as that shipped with RHEL4) may not provide the <code>-hmac</code> option.</p>

<hr>

<p>As an alternative solution, but mainly to prove that the results are the same, we can also call PHP's <code>hmac_sha1()</code> from the command line:</p>

<pre><code>[me@home]$ echo '&lt;?= hash_hmac(""sha1"", ""value"", ""key"") ?&gt;' | php
57443a4c052350a44638835d64fd66822f813319
</code></pre>
","7285256","79230","<bash><sha1><hmac>","87","171","4","2017-02-14 19:38:07","7285256","0","40","411022","","2013-11-03 14:56:28","2011-09-02 14:36:52","","2017-02-14 19:38:07","2011-09-02 14:52:23"
"7285059","HMAC-SHA1 in bash","<p>Is there a bash script to generate a <code>HMAC-SHA1</code> hash?</p>

<p>I'm looking for something equivalent to the following PHP code:</p>

<pre><code>hash_hmac(""sha1"", ""value"", ""key"");
</code></pre>
","<p>Here is a bash function that works like <code>hash_hmac</code> from PHP:</p>

<pre><code>#!/bin/bash

function hash_hmac {
  digest=""$1""
  data=""$2""
  key=""$3""
  shift 3
  echo -n ""$data"" | openssl dgst ""-$digest"" -hmac ""$key"" ""$@""
}

# hex output by default
hash_hmac ""sha1"" ""value"" ""key""

# raw output by adding the ""-binary"" flag
hash_hmac ""sha1"" ""value"" ""key"" -binary | base64

# other algos also work
hash_hmac ""md5""  ""value"" ""key""
</code></pre>
","7385197","79230","<bash><sha1><hmac>","87","39","4","2017-02-14 19:38:07","7285256","0","40","411022","","2013-11-03 14:56:28","2011-09-02 14:36:52","","","2011-09-12 08:36:19"
"7285059","HMAC-SHA1 in bash","<p>Is there a bash script to generate a <code>HMAC-SHA1</code> hash?</p>

<p>I'm looking for something equivalent to the following PHP code:</p>

<pre><code>hash_hmac(""sha1"", ""value"", ""key"");
</code></pre>
","<p>Thanks for the hash_hmac function! But it was not enough for my application. In case anyone wondered, I had to re-hash stuff several times using a key that was the result of the previous hashing, and therefore is a binary input. (The Amazon AWS authentication signature is created like this.)</p>

<p>So what I needed was a way to supply the binary key in some way that would not break the algorithm. Then I found this: <a href=""http://openssl.6102.n7.nabble.com/command-line-hmac-with-key-in-hex-td6754.html"" rel=""noreferrer"">http://openssl.6102.n7.nabble.com/command-line-hmac-with-key-in-hex-td6754.html</a></p>

<p>Stephen Henson's reply requires the hash_hmac function to return the value in hex format. So it needs to echo the following:</p>

<pre><code>$ echo -n ""$data"" | openssl dgst ""-$digest"" -hmac ""$key"" | sed -e 's/^.* //'
</code></pre>

<p>Then the next call would need to provide the key as an hexit:</p>

<pre><code>$ echo -n ""$data"" | openssl dgst ""-$digest"" -mac HMAC -macopt ""hexkey:$key"" | sed -e 's/^.* //'
</code></pre>

<p>Hopefully this helps anyone, probably someone who is trying to create bash scripts to invalidate CloudFront entries on AWS (like me!) (I haven't tested it yet, but I think this is the thing that is the cause of why my bash script does not work, and my PHP one does...)</p>
","22369607","79230","<bash><sha1><hmac>","87","9","4","2017-02-14 19:38:07","7285256","0","40","411022","","2013-11-03 14:56:28","2011-09-02 14:36:52","","","2014-03-13 05:13:58"
"7285059","HMAC-SHA1 in bash","<p>Is there a bash script to generate a <code>HMAC-SHA1</code> hash?</p>

<p>I'm looking for something equivalent to the following PHP code:</p>

<pre><code>hash_hmac(""sha1"", ""value"", ""key"");
</code></pre>
","<p>To those who like to explore more JWT on the command line:
<a href=""http://willhaley.com/blog/generate-jwt-with-bash/"" rel=""nofollow noreferrer"">cool jwt bash script</a></p>
","42101678","79230","<bash><sha1><hmac>","87","-1","4","2017-02-14 19:38:07","7285256","0","40","411022","","2013-11-03 14:56:28","2011-09-02 14:36:52","","","2017-02-07 23:04:51"
"6312544","HMAC-SHA1: How to do it properly in Java?","<p>I'm hashing some values using HMAC-SHA1, using the following code in Java:</p>

<pre><code>public static String hmacSha1(String value, String key) {
    try {
        // Get an hmac_sha1 key from the raw key bytes
        byte[] keyBytes = key.getBytes();           
        SecretKeySpec signingKey = new SecretKeySpec(keyBytes, ""HmacSHA1"");

        // Get an hmac_sha1 Mac instance and initialize with the signing key
        Mac mac = Mac.getInstance(""HmacSHA1"");
        mac.init(signingKey);

        // Compute the hmac on input data bytes
        byte[] rawHmac = mac.doFinal(value.getBytes());

        // Convert raw bytes to Hex
        byte[] hexBytes = new Hex().encode(rawHmac);

        //  Covert array of Hex bytes to a String
        return new String(hexBytes, ""UTF-8"");
    } catch (Exception e) {
        throw new RuntimeException(e);
    }
}
</code></pre>

<p><code>Hex()</code> belongs to <code>org.apache.commons.codec</code></p>

<p>In PHP there's a similar function <code>hash_hmac(algorithm, data, key)</code> that I use to compare the values returned by my Java implementation.</p>

<p>So the first try is:</p>

<pre><code>hash_hmac(""sha1"", ""helloworld"", ""mykey"") // PHP
</code></pre>

<p>that returns: <code>74ae5a4a3d9996d5918defc2c3d475471bbf59ac</code></p>

<p>My Java function returns <code>74ae5a4a3d9996d5918defc2c3d475471bbf59ac</code> as well.</p>

<p>Ok, it seems working. Then I try to use a more complex key:</p>

<pre><code>hash_hmac(""sha1"", ""helloworld"", ""PRIE7$oG2uS-Yf17kEnUEpi5hvW/#AFo"") // PHP
</code></pre>

<p>that returns: <code>e98bcc5c5be6f11dc582ae55f520d1ec4ae29f7a</code></p>

<p>While this time my Java impl returns: <code>c19fccf57c613f1868dd22d586f9571cf6412cd0</code></p>

<p>The hash returned by my PHP code is not equal to the value returned by my Java function, and I can't find out why.</p>

<p>Any tips?</p>
","<p>On your PHP side, use single-quotes around the key so that the <code>$</code> character is not treated as a variable reference. i.e.,</p>

<pre><code>hash_hmac(""sha1"", ""helloworld"", 'PRIE7$oG2uS-Yf17kEnUEpi5hvW/#AFo')
</code></pre>

<p>Otherwise, the key you really get is <code>PRIE7-Yf17kEnUEpi5hvW/#AFo</code> (assuming the variable <code>$oG2uS</code> is not defined).</p>
","6312647","57281","<java><hash><sha1><hmac>","52","52","5","2019-03-01 21:13:36","6312647","2","18","5091346","","2017-10-05 09:11:33","2011-06-10 22:07:19","","","2011-06-10 22:21:31"
"6312544","HMAC-SHA1: How to do it properly in Java?","<p>I'm hashing some values using HMAC-SHA1, using the following code in Java:</p>

<pre><code>public static String hmacSha1(String value, String key) {
    try {
        // Get an hmac_sha1 key from the raw key bytes
        byte[] keyBytes = key.getBytes();           
        SecretKeySpec signingKey = new SecretKeySpec(keyBytes, ""HmacSHA1"");

        // Get an hmac_sha1 Mac instance and initialize with the signing key
        Mac mac = Mac.getInstance(""HmacSHA1"");
        mac.init(signingKey);

        // Compute the hmac on input data bytes
        byte[] rawHmac = mac.doFinal(value.getBytes());

        // Convert raw bytes to Hex
        byte[] hexBytes = new Hex().encode(rawHmac);

        //  Covert array of Hex bytes to a String
        return new String(hexBytes, ""UTF-8"");
    } catch (Exception e) {
        throw new RuntimeException(e);
    }
}
</code></pre>

<p><code>Hex()</code> belongs to <code>org.apache.commons.codec</code></p>

<p>In PHP there's a similar function <code>hash_hmac(algorithm, data, key)</code> that I use to compare the values returned by my Java implementation.</p>

<p>So the first try is:</p>

<pre><code>hash_hmac(""sha1"", ""helloworld"", ""mykey"") // PHP
</code></pre>

<p>that returns: <code>74ae5a4a3d9996d5918defc2c3d475471bbf59ac</code></p>

<p>My Java function returns <code>74ae5a4a3d9996d5918defc2c3d475471bbf59ac</code> as well.</p>

<p>Ok, it seems working. Then I try to use a more complex key:</p>

<pre><code>hash_hmac(""sha1"", ""helloworld"", ""PRIE7$oG2uS-Yf17kEnUEpi5hvW/#AFo"") // PHP
</code></pre>

<p>that returns: <code>e98bcc5c5be6f11dc582ae55f520d1ec4ae29f7a</code></p>

<p>While this time my Java impl returns: <code>c19fccf57c613f1868dd22d586f9571cf6412cd0</code></p>

<p>The hash returned by my PHP code is not equal to the value returned by my Java function, and I can't find out why.</p>

<p>Any tips?</p>
","<p>Any $ symbol in double quotes ("""") is regarded as a a variable in PHP. You can avoid the error by using either single quotes as pointed out by the previous commenter or you can escape the dollar sign as below</p>

<pre><code>hash_hmac(""sha1"", ""helloworld"", ""PRIE7\$oG2uS-Yf17kEnUEpi5hvW/#AFo"")
</code></pre>

<p>Notice $ is now \$</p>
","16254317","57281","<java><hash><sha1><hmac>","52","7","5","2019-03-01 21:13:36","6312647","2","18","5091346","","2017-10-05 09:11:33","2011-06-10 22:07:19","","","2013-04-27 16:17:32"
"6312544","HMAC-SHA1: How to do it properly in Java?","<p>I'm hashing some values using HMAC-SHA1, using the following code in Java:</p>

<pre><code>public static String hmacSha1(String value, String key) {
    try {
        // Get an hmac_sha1 key from the raw key bytes
        byte[] keyBytes = key.getBytes();           
        SecretKeySpec signingKey = new SecretKeySpec(keyBytes, ""HmacSHA1"");

        // Get an hmac_sha1 Mac instance and initialize with the signing key
        Mac mac = Mac.getInstance(""HmacSHA1"");
        mac.init(signingKey);

        // Compute the hmac on input data bytes
        byte[] rawHmac = mac.doFinal(value.getBytes());

        // Convert raw bytes to Hex
        byte[] hexBytes = new Hex().encode(rawHmac);

        //  Covert array of Hex bytes to a String
        return new String(hexBytes, ""UTF-8"");
    } catch (Exception e) {
        throw new RuntimeException(e);
    }
}
</code></pre>

<p><code>Hex()</code> belongs to <code>org.apache.commons.codec</code></p>

<p>In PHP there's a similar function <code>hash_hmac(algorithm, data, key)</code> that I use to compare the values returned by my Java implementation.</p>

<p>So the first try is:</p>

<pre><code>hash_hmac(""sha1"", ""helloworld"", ""mykey"") // PHP
</code></pre>

<p>that returns: <code>74ae5a4a3d9996d5918defc2c3d475471bbf59ac</code></p>

<p>My Java function returns <code>74ae5a4a3d9996d5918defc2c3d475471bbf59ac</code> as well.</p>

<p>Ok, it seems working. Then I try to use a more complex key:</p>

<pre><code>hash_hmac(""sha1"", ""helloworld"", ""PRIE7$oG2uS-Yf17kEnUEpi5hvW/#AFo"") // PHP
</code></pre>

<p>that returns: <code>e98bcc5c5be6f11dc582ae55f520d1ec4ae29f7a</code></p>

<p>While this time my Java impl returns: <code>c19fccf57c613f1868dd22d586f9571cf6412cd0</code></p>

<p>The hash returned by my PHP code is not equal to the value returned by my Java function, and I can't find out why.</p>

<p>Any tips?</p>
","<p>Recommend <a href=""https://commons.apache.org/proper/commons-codec/apidocs/org/apache/commons/codec/digest/HmacUtils.html"" rel=""noreferrer"">Apache Common Codec Library</a>, quite simple and easy to use.
<code>HmacUtils.hmacSha1Hex(key, string_to_sign);</code></p>
","34759723","57281","<java><hash><sha1><hmac>","52","16","5","2019-03-01 21:13:36","6312647","2","18","5091346","","2017-10-05 09:11:33","2011-06-10 22:07:19","","","2016-01-13 06:21:41"
"6312544","HMAC-SHA1: How to do it properly in Java?","<p>I'm hashing some values using HMAC-SHA1, using the following code in Java:</p>

<pre><code>public static String hmacSha1(String value, String key) {
    try {
        // Get an hmac_sha1 key from the raw key bytes
        byte[] keyBytes = key.getBytes();           
        SecretKeySpec signingKey = new SecretKeySpec(keyBytes, ""HmacSHA1"");

        // Get an hmac_sha1 Mac instance and initialize with the signing key
        Mac mac = Mac.getInstance(""HmacSHA1"");
        mac.init(signingKey);

        // Compute the hmac on input data bytes
        byte[] rawHmac = mac.doFinal(value.getBytes());

        // Convert raw bytes to Hex
        byte[] hexBytes = new Hex().encode(rawHmac);

        //  Covert array of Hex bytes to a String
        return new String(hexBytes, ""UTF-8"");
    } catch (Exception e) {
        throw new RuntimeException(e);
    }
}
</code></pre>

<p><code>Hex()</code> belongs to <code>org.apache.commons.codec</code></p>

<p>In PHP there's a similar function <code>hash_hmac(algorithm, data, key)</code> that I use to compare the values returned by my Java implementation.</p>

<p>So the first try is:</p>

<pre><code>hash_hmac(""sha1"", ""helloworld"", ""mykey"") // PHP
</code></pre>

<p>that returns: <code>74ae5a4a3d9996d5918defc2c3d475471bbf59ac</code></p>

<p>My Java function returns <code>74ae5a4a3d9996d5918defc2c3d475471bbf59ac</code> as well.</p>

<p>Ok, it seems working. Then I try to use a more complex key:</p>

<pre><code>hash_hmac(""sha1"", ""helloworld"", ""PRIE7$oG2uS-Yf17kEnUEpi5hvW/#AFo"") // PHP
</code></pre>

<p>that returns: <code>e98bcc5c5be6f11dc582ae55f520d1ec4ae29f7a</code></p>

<p>While this time my Java impl returns: <code>c19fccf57c613f1868dd22d586f9571cf6412cd0</code></p>

<p>The hash returned by my PHP code is not equal to the value returned by my Java function, and I can't find out why.</p>

<p>Any tips?</p>
","<p>In <strong>Java</strong>, and using <strong>maven</strong>:</p>

<p>Add the below dependency into the <code>pom.xml</code>:</p>

<pre><code> &lt;!-- https://mvnrepository.com/artifact/commons-codec/commons-codec --&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;commons-codec&lt;/groupId&gt;
        &lt;artifactId&gt;commons-codec&lt;/artifactId&gt;
        &lt;version&gt;1.4&lt;/version&gt;
    &lt;/dependency&gt;
</code></pre>

<p>and then try to sign it using this</p>

<pre><code>HmacUtils.hmacSha1Hex(key, string_to_sign);
</code></pre>
","47019111","57281","<java><hash><sha1><hmac>","52","1","5","2019-03-01 21:13:36","6312647","2","18","5091346","","2017-10-05 09:11:33","2011-06-10 22:07:19","","","2017-10-30 15:38:08"
"6312544","HMAC-SHA1: How to do it properly in Java?","<p>I'm hashing some values using HMAC-SHA1, using the following code in Java:</p>

<pre><code>public static String hmacSha1(String value, String key) {
    try {
        // Get an hmac_sha1 key from the raw key bytes
        byte[] keyBytes = key.getBytes();           
        SecretKeySpec signingKey = new SecretKeySpec(keyBytes, ""HmacSHA1"");

        // Get an hmac_sha1 Mac instance and initialize with the signing key
        Mac mac = Mac.getInstance(""HmacSHA1"");
        mac.init(signingKey);

        // Compute the hmac on input data bytes
        byte[] rawHmac = mac.doFinal(value.getBytes());

        // Convert raw bytes to Hex
        byte[] hexBytes = new Hex().encode(rawHmac);

        //  Covert array of Hex bytes to a String
        return new String(hexBytes, ""UTF-8"");
    } catch (Exception e) {
        throw new RuntimeException(e);
    }
}
</code></pre>

<p><code>Hex()</code> belongs to <code>org.apache.commons.codec</code></p>

<p>In PHP there's a similar function <code>hash_hmac(algorithm, data, key)</code> that I use to compare the values returned by my Java implementation.</p>

<p>So the first try is:</p>

<pre><code>hash_hmac(""sha1"", ""helloworld"", ""mykey"") // PHP
</code></pre>

<p>that returns: <code>74ae5a4a3d9996d5918defc2c3d475471bbf59ac</code></p>

<p>My Java function returns <code>74ae5a4a3d9996d5918defc2c3d475471bbf59ac</code> as well.</p>

<p>Ok, it seems working. Then I try to use a more complex key:</p>

<pre><code>hash_hmac(""sha1"", ""helloworld"", ""PRIE7$oG2uS-Yf17kEnUEpi5hvW/#AFo"") // PHP
</code></pre>

<p>that returns: <code>e98bcc5c5be6f11dc582ae55f520d1ec4ae29f7a</code></p>

<p>While this time my Java impl returns: <code>c19fccf57c613f1868dd22d586f9571cf6412cd0</code></p>

<p>The hash returned by my PHP code is not equal to the value returned by my Java function, and I can't find out why.</p>

<p>Any tips?</p>
","<p>The other answers pointing out HmacUtils from Apache commons have been deprecated by now. Apache commons now recommends using:</p>

<p><code>new HmacUtils(HmacAlgorithms.HMAC_SHA_1, key).hmacHex(string_to_sign)</code></p>
","54952394","57281","<java><hash><sha1><hmac>","52","1","5","2019-03-01 21:13:36","6312647","2","18","5091346","","2017-10-05 09:11:33","2011-06-10 22:07:19","","","2019-03-01 21:13:36"
"756492","Objective-C sample code for HMAC-SHA1","<p>I need to generate HMAC-SHA1 in Objective C. But i didnt find anything that works. I tried with CommonCrypto, using CCHMAC, but didnt works. I need to generate a hmac and after generate HOTP number.</p>

<p>Somebody have any example code in Objective C or C?</p>
","<p>Here's how you generate an HMAC using SHA-256:</p>

<pre><code>NSString *key;
NSString *data;

const char *cKey  = [key cStringUsingEncoding:NSASCIIStringEncoding];
const char *cData = [data cStringUsingEncoding:NSASCIIStringEncoding];

unsigned char cHMAC[CC_SHA256_DIGEST_LENGTH];

CCHmac(kCCHmacAlgSHA256, cKey, strlen(cKey), cData, strlen(cData), cHMAC);

NSData *HMAC = [[NSData alloc] initWithBytes:cHMAC
                                      length:sizeof(cHMAC)];

NSString *hash = [HMAC base64Encoding];
</code></pre>

<p>I'm not aware of an HOTP library, but the algorithm was quite simple, if I recall correctly.</p>
","756538","56485","<c><objective-c><sha1><hmac>","63","73","8","2014-09-25 07:38:01","","2","52","2119","","2009-04-16 16:05:23","2009-04-16 14:50:48","2015-01-20 19:54:59","","2009-04-16 14:59:46"
"756492","Objective-C sample code for HMAC-SHA1","<p>I need to generate HMAC-SHA1 in Objective C. But i didnt find anything that works. I tried with CommonCrypto, using CCHMAC, but didnt works. I need to generate a hmac and after generate HOTP number.</p>

<p>Somebody have any example code in Objective C or C?</p>
","<p>Have you seen Jens Alfke's new <a href=""http://mooseyard.com/projects/MYCrypto/"" rel=""nofollow noreferrer"">MyCrypto</a> classes?</p>

<p>He has some <a href=""http://mooseyard.com/Jens/2009/04/mycrypto-library-now-alpha-testing/"" rel=""nofollow noreferrer"">sample code on his blog</a>.</p>
","756657","56485","<c><objective-c><sha1><hmac>","63","0","8","2014-09-25 07:38:01","","2","52","2119","","2009-04-16 16:05:23","2009-04-16 14:50:48","2015-01-20 19:54:59","","2009-04-16 15:23:20"
"756492","Objective-C sample code for HMAC-SHA1","<p>I need to generate HMAC-SHA1 in Objective C. But i didnt find anything that works. I tried with CommonCrypto, using CCHMAC, but didnt works. I need to generate a hmac and after generate HOTP number.</p>

<p>Somebody have any example code in Objective C or C?</p>
","<p>I spend a whole day, trying to convert the generated hash (bytes) into readable data. I used the base64 encoded solution from the answer above and it didn´t work at all for me (b.t.w. you need and an external .h to be able to use the base64 encoding, which I had).</p>

<p>So what I did was this (which works perfectly without an external .h):</p>

<pre><code>CCHmac(kCCHmacAlgSHA256, cKey, strlen(cKey), cData, strlen(cData), cHMAC);

// Now convert to NSData structure to make it usable again
NSData *out = [NSData dataWithBytes:cHMAC length:CC_SHA256_DIGEST_LENGTH];

// description converts to hex but puts &lt;&gt; around it and spaces every 4 bytes
NSString *hash = [out description];
hash = [hash stringByReplacingOccurrencesOfString:@"" "" withString:@""""];
hash = [hash stringByReplacingOccurrencesOfString:@""&lt;"" withString:@""""];
hash = [hash stringByReplacingOccurrencesOfString:@""&gt;"" withString:@""""];
// hash is now a string with just the 40char hash value in it
NSLog(@""%@"",hash);
</code></pre>
","7738078","56485","<c><objective-c><sha1><hmac>","63","2","8","2014-09-25 07:38:01","","2","52","2119","","2009-04-16 16:05:23","2009-04-16 14:50:48","2015-01-20 19:54:59","2012-05-14 12:37:16","2011-10-12 09:40:33"
"756492","Objective-C sample code for HMAC-SHA1","<p>I need to generate HMAC-SHA1 in Objective C. But i didnt find anything that works. I tried with CommonCrypto, using CCHMAC, but didnt works. I need to generate a hmac and after generate HOTP number.</p>

<p>Somebody have any example code in Objective C or C?</p>
","<p>This works without using custom protocols, using some code from
<a href=""http://cocoawithlove.com/2009/07/hashvalue-object-for-holding-md5-and.html"" rel=""noreferrer"">http://cocoawithlove.com/2009/07/hashvalue-object-for-holding-md5-and.html</a> </p>

<p>HashSHA256.h</p>

<pre><code>#import &lt;Foundation/Foundation.h&gt;
#import &lt;CommonCrypto/CommonDigest.h&gt;

@interface HashSHA256 : NSObject {


}

 - (NSString *) hashedValue :(NSString *) key andData: (NSString *) data ; 

@end
</code></pre>

<p>HashSHA256.m</p>

<pre><code>#import ""HashSHA256.h""

#import &lt;CommonCrypto/CommonHMAC.h&gt;


@implementation HashSHA256


- (NSString *) hashedValue :(NSString *) key andData: (NSString *) data {


    const char *cKey  = [key cStringUsingEncoding:NSUTF8StringEncoding];
    const char *cData = [data cStringUsingEncoding:NSUTF8StringEncoding];
    unsigned char cHMAC[CC_SHA256_DIGEST_LENGTH];
    CCHmac(kCCHmacAlgSHA256, cKey, strlen(cKey), cData, strlen(cData), cHMAC);

    NSString *hash;

    NSMutableString* output = [NSMutableString   stringWithCapacity:CC_SHA256_DIGEST_LENGTH * 2];

    for(int i = 0; i &lt; CC_SHA256_DIGEST_LENGTH; i++)
        [output appendFormat:@""%02x"", cHMAC[i]];
    hash = output;
    return hash;

}

@end
</code></pre>

<p>Usage: </p>

<pre><code>- (NSString *) encodePassword: (NSString *) myPassword {
    HashSHA256 * hashSHA256 = [[HashSHA256 alloc] init];   
    NSString * result = [hashSHA256 hashedValue:mySecretSalt andData:myPassword];       
    return result;       
}
</code></pre>
","8288245","56485","<c><objective-c><sha1><hmac>","63","8","8","2014-09-25 07:38:01","","2","52","2119","","2009-04-16 16:05:23","2009-04-16 14:50:48","2015-01-20 19:54:59","2011-11-27 19:20:29","2011-11-27 19:12:52"
"756492","Objective-C sample code for HMAC-SHA1","<p>I need to generate HMAC-SHA1 in Objective C. But i didnt find anything that works. I tried with CommonCrypto, using CCHMAC, but didnt works. I need to generate a hmac and after generate HOTP number.</p>

<p>Somebody have any example code in Objective C or C?</p>
","<p>here is how you can generate <strong>HMAC-SHA1 base64</strong>.</p>

<p>You need to add Base64.h and Base64.m to your project. You can get it from <a href=""http://www.koders.com/objectivec/fid5B401E9524F8DD92E9D88BE860B1683BB02CE1C1.aspx?s=md5"">here</a>.</p>

<p>If you use ARC, it will show some errors in Base64.m. Find the lines who are similar like this</p>

<pre><code>return [[[self alloc] initWithBase64String:base64String] autorelease];
</code></pre>

<p>what you need is to delete the autorelease section. The final result should look like:</p>

<pre><code>return [[self alloc] initWithBase64String:base64String];
</code></pre>

<p>Now in your general project import ""Base64.h""
and the following code</p>

<pre><code>#import ""Base64.h""
#include &lt;CommonCrypto/CommonDigest.h&gt;
#include &lt;CommonCrypto/CommonHMAC.h&gt;

- (NSString *)hmacsha1:(NSString *)data secret:(NSString *)key {

    const char *cKey  = [key cStringUsingEncoding:NSASCIIStringEncoding];
    const char *cData = [data cStringUsingEncoding:NSASCIIStringEncoding];

    unsigned char cHMAC[CC_SHA1_DIGEST_LENGTH];

    CCHmac(kCCHmacAlgSHA1, cKey, strlen(cKey), cData, strlen(cData), cHMAC);

    NSData *HMAC = [[NSData alloc] initWithBytes:cHMAC length:sizeof(cHMAC)];

    NSString *hash = [HMAC base64String];

    return hash;
}
</code></pre>

<p>With </p>

<pre><code>NSLog(@""Hash: %@"", hash);  
</code></pre>

<p>you will get something similar to this:</p>

<pre><code>ghVEjPvxwLN1lBi0Jh46VpIchOc=
</code></pre>

<p>  </p>
","12157913","56485","<c><objective-c><sha1><hmac>","63","38","8","2014-09-25 07:38:01","","2","52","2119","","2009-04-16 16:05:23","2009-04-16 14:50:48","2015-01-20 19:54:59","2012-08-28 11:09:08","2012-08-28 11:04:01"
"756492","Objective-C sample code for HMAC-SHA1","<p>I need to generate HMAC-SHA1 in Objective C. But i didnt find anything that works. I tried with CommonCrypto, using CCHMAC, but didnt works. I need to generate a hmac and after generate HOTP number.</p>

<p>Somebody have any example code in Objective C or C?</p>
","<p>This is the complete solution which works without any extra libraries or hacks:</p>

<pre><code>+(NSString *)hmac:(NSString *)plainText withKey:(NSString *)key
{
    const char *cKey  = [key cStringUsingEncoding:NSASCIIStringEncoding];
    const char *cData = [plainText cStringUsingEncoding:NSASCIIStringEncoding];

    unsigned char cHMAC[CC_SHA256_DIGEST_LENGTH];

    CCHmac(kCCHmacAlgSHA256, cKey, strlen(cKey), cData, strlen(cData), cHMAC);

    NSData *HMACData = [[NSData alloc] initWithBytes:cHMAC length:sizeof(cHMAC)];

    const unsigned char *buffer = (const unsigned char *)[HMACData bytes];
    NSString *HMAC = [NSMutableString stringWithCapacity:HMACData.length * 2];

    for (int i = 0; i &lt; HMACData.length; ++i)
        HMAC = [HMAC stringByAppendingFormat:@""%02lx"", (unsigned long)buffer[i]];

    return HMAC;
}
</code></pre>

<p>You don't have to include any third-party base64 library as it is already encoded.</p>
","16458798","56485","<c><objective-c><sha1><hmac>","63","22","8","2014-09-25 07:38:01","","2","52","2119","","2009-04-16 16:05:23","2009-04-16 14:50:48","2015-01-20 19:54:59","2014-09-25 07:38:01","2013-05-09 09:41:56"
"756492","Objective-C sample code for HMAC-SHA1","<p>I need to generate HMAC-SHA1 in Objective C. But i didnt find anything that works. I tried with CommonCrypto, using CCHMAC, but didnt works. I need to generate a hmac and after generate HOTP number.</p>

<p>Somebody have any example code in Objective C or C?</p>
","<p>This is how yo do it without external files returning an hex string:</p>

<pre><code>-(NSString *)hmac:(NSString *)plaintext withKey:(NSString *)key
{
    const char *cKey  = [key cStringUsingEncoding:NSASCIIStringEncoding];
    const char *cData = [plaintext cStringUsingEncoding:NSASCIIStringEncoding];
    unsigned char cHMAC[CC_SHA1_DIGEST_LENGTH];
    CCHmac(kCCHmacAlgSHA1, cKey, strlen(cKey), cData, strlen(cData), cHMAC);
    NSData *HMACData = [NSData dataWithBytes:cHMAC length:sizeof(cHMAC)];
    const unsigned char *buffer = (const unsigned char *)[HMACData bytes];
    NSMutableString *HMAC = [NSMutableString stringWithCapacity:HMACData.length * 2];
    for (int i = 0; i &lt; HMACData.length; ++i){
        [HMAC appendFormat:@""%02x"", buffer[i]];
     }
   return HMAC;
}
</code></pre>

<p>It was tested in xCode 5 with iOS 7 and works fine!</p>
","19302562","56485","<c><objective-c><sha1><hmac>","63","2","8","2014-09-25 07:38:01","","2","52","2119","","2009-04-16 16:05:23","2009-04-16 14:50:48","2015-01-20 19:54:59","","2013-10-10 17:40:14"
"756492","Objective-C sample code for HMAC-SHA1","<p>I need to generate HMAC-SHA1 in Objective C. But i didnt find anything that works. I tried with CommonCrypto, using CCHMAC, but didnt works. I need to generate a hmac and after generate HOTP number.</p>

<p>Somebody have any example code in Objective C or C?</p>
","<p>Out of interest, why do you create (unsigned char cHMAC) and then convert into (NSData) and then convert it into (NSMutableString) and then convert finally into (HexString)?</p>

<p>You could do this in a quicker way by cutting the middleman (i.e. without NSData and NSMutableString altogether, quicker and better performance), also changing (unsigned char) into (uint8_t []), after all they are all hex-arrays anyway!, below:</p>

<pre><code>-(NSString *)hmac:(NSString *)plaintext withKey:(NSString *)key
{
const char *cKey  = [key cStringUsingEncoding:NSASCIIStringEncoding];
const char *cData = [plaintext cStringUsingEncoding:NSASCIIStringEncoding];

uint8_t cHMAC[CC_SHA1_DIGEST_LENGTH];

CCHmac(kCCHmacAlgSHA1, cKey, strlen(cKey), cData, strlen(cData), cHMAC);

NSString *Hash1 = @"""";
for (int i=0; i&lt; CC_SHA1_DIGEST_LENGTH; i++)
{
    Hash1 = [Hash1 stringByAppendingString:[NSString stringWithFormat:@""%02X"", cHMAC[i]]];
}
return Hash1;
}
</code></pre>

<p>I hope this helps,</p>

<p>Regards</p>

<p>Heider Sati</p>
","19851710","56485","<c><objective-c><sha1><hmac>","63","1","8","2014-09-25 07:38:01","","2","52","2119","","2009-04-16 16:05:23","2009-04-16 14:50:48","2015-01-20 19:54:59","","2013-11-08 04:39:30"
"6067751","How to generate HMAC-SHA1 in C#?","<p>I am trying to make use of a REST API using C#. The API creator has provided sample libraries in PHP, Ruby and Java. I am getting hung up on one part of it where I need to generate an <a href=""http://en.wikipedia.org/wiki/HMAC"" rel=""noreferrer""><code>HMAC</code></a>.</p>

<p>Here's how it is done in the sample libraries they have provided.</p>

<p><strong>PHP</strong>   </p>

<pre><code>hash_hmac('sha1', $signatureString, $secretKey, false);
</code></pre>

<p><strong>Ruby</strong>  </p>

<pre><code>digest = OpenSSL::Digest::Digest.new('sha1')
return OpenSSL::HMAC.hexdigest(digest, secretKey, signatureString)
</code></pre>

<p><strong>Java</strong></p>

<pre><code>SecretKeySpec signingKey = new SecretKeySpec(secretKey.getBytes(), HMAC_SHA1_ALGORITHM);

Mac mac = null;
mac = Mac.getInstance(HMAC_SHA1_ALGORITHM);
mac.init(signingKey);

byte[] bytes = mac.doFinal(signatureString.getBytes());

String form = """";
for (int i = 0; i &lt; bytes.length; i++)
{
    String str = Integer.toHexString(((int)bytes[i]) &amp; 0xff);
    if (str.length() == 1)
    {
        str = ""0"" + str;
    }

    form = form + str;
}
return form;
</code></pre>

<p><strong>Here's my attempt in C#. <strike>It is not working.</strike> UPDATE:</strong> The C# example below works just fine. I found out that the real problem was due to some cross-platform differences in newline characters in my <code>signatureString</code>.</p>

<pre><code>var enc = Encoding.ASCII;
HMACSHA1 hmac = new HMACSHA1(enc.GetBytes(secretKey));
hmac.Initialize();

byte[] buffer = enc.GetBytes(signatureString);
return BitConverter.ToString(hmac.ComputeHash(buffer)).Replace(""-"", """").ToLower();
</code></pre>
","<p>Try this:</p>

<p><a href=""http://msdn.microsoft.com/en-us/library/system.security.cryptography.hmacsha1.aspx"" rel=""noreferrer"">http://msdn.microsoft.com/en-us/library/system.security.cryptography.hmacsha1.aspx</a></p>

<p>quick and dirty code:</p>

<pre><code>public string Encode(string input, byte [] key)
{
        HMACSHA1 myhmacsha1 = new HMACSHA1(key);
        byte[] byteArray = Encoding.ASCII.GetBytes( input );
        MemoryStream stream = new MemoryStream( byteArray ); 
        byte[] hashValue = myhmacsha1.ComputeHash(stream);
        return hashValue.ToString();
}
</code></pre>
","6067882","54832","<c#><java><php><ruby><hmac>","44","5","3","2016-11-01 22:19:22","","3","24","5651","","2016-11-01 22:19:22","2011-05-20 05:16:02","","","2011-05-20 05:40:30"
"6067751","How to generate HMAC-SHA1 in C#?","<p>I am trying to make use of a REST API using C#. The API creator has provided sample libraries in PHP, Ruby and Java. I am getting hung up on one part of it where I need to generate an <a href=""http://en.wikipedia.org/wiki/HMAC"" rel=""noreferrer""><code>HMAC</code></a>.</p>

<p>Here's how it is done in the sample libraries they have provided.</p>

<p><strong>PHP</strong>   </p>

<pre><code>hash_hmac('sha1', $signatureString, $secretKey, false);
</code></pre>

<p><strong>Ruby</strong>  </p>

<pre><code>digest = OpenSSL::Digest::Digest.new('sha1')
return OpenSSL::HMAC.hexdigest(digest, secretKey, signatureString)
</code></pre>

<p><strong>Java</strong></p>

<pre><code>SecretKeySpec signingKey = new SecretKeySpec(secretKey.getBytes(), HMAC_SHA1_ALGORITHM);

Mac mac = null;
mac = Mac.getInstance(HMAC_SHA1_ALGORITHM);
mac.init(signingKey);

byte[] bytes = mac.doFinal(signatureString.getBytes());

String form = """";
for (int i = 0; i &lt; bytes.length; i++)
{
    String str = Integer.toHexString(((int)bytes[i]) &amp; 0xff);
    if (str.length() == 1)
    {
        str = ""0"" + str;
    }

    form = form + str;
}
return form;
</code></pre>

<p><strong>Here's my attempt in C#. <strike>It is not working.</strike> UPDATE:</strong> The C# example below works just fine. I found out that the real problem was due to some cross-platform differences in newline characters in my <code>signatureString</code>.</p>

<pre><code>var enc = Encoding.ASCII;
HMACSHA1 hmac = new HMACSHA1(enc.GetBytes(secretKey));
hmac.Initialize();

byte[] buffer = enc.GetBytes(signatureString);
return BitConverter.ToString(hmac.ComputeHash(buffer)).Replace(""-"", """").ToLower();
</code></pre>
","<p>an extension to <a href=""https://stackoverflow.com/questions/6067751/how-to-generate-hmac-sha1-in-c/6067882#6067882"">Vimvq1987's answer</a>:</p>

<p><code>return hashValue.ToString();</code> doesn't produce the output you want/need. You have to convert the bytes in the array <code>hashValue</code> to their hex-string representation.<br>
Can be as simple as <code>return BitConverter.toString(hashValue);</code> (prints upper-case letters A-F) or if you like it a bit more complex:</p>

<pre><code>using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Security.Cryptography;
using System.IO;

namespace ConsoleApplication1
{
    class Program
    {
        public static string Encode(string input, byte[] key)
        {
            HMACSHA1 myhmacsha1 = new HMACSHA1(key);
            byte[] byteArray = Encoding.ASCII.GetBytes(input);
            MemoryStream stream = new MemoryStream(byteArray);
            return myhmacsha1.ComputeHash(stream).Aggregate("""", (s, e) =&gt; s + String.Format(""{0:x2}"",e), s =&gt; s );
        }


        static void Main(string[] args)
        {
            byte[] key = Encoding.ASCII.GetBytes(""abcdefghijklmnopqrstuvwxyz"");
            string input = """";
            foreach (string s in new string[] { ""Marry"", "" had"", "" a"", "" little"", "" lamb"" })
            {
                input += s;
                System.Console.WriteLine( Encode(input, key) );
            }
            return;
        }
    }
}
</code></pre>

<p>which prints</p>

<pre><code>3545e064fb59bc4bfc02b6e1c3d4925c898aa504
3249f4c8468d4d67f465937da05b809eaff22fdb
87baaadf5d096677f944015e53d283834eb1e943
6325376820c29a09e3ab30db000033aa71d6927d
54579b0146e2476595381d837ee38863be358213
</code></pre>

<p>and I get the exact same result for</p>

<pre><code>&lt;?php
$secretKey = 'abcdefghijklmnopqrstuvwxyz';

$signatureString = '';
foreach( array('Marry',' had',' a',' little',' lamb') as $s ) {
    $signatureString .= $s;
    echo hash_hmac('sha1', $signatureString, $secretKey, false), ""\n"";
}
</code></pre>

<hr>

<p>edit: <a href=""https://stackoverflow.com/users/4172723/dmitriy-nemykin"">Dmitriy Nemykin</a> suggested the following edit</p>

<pre><code>public static string Encode(string input, byte[] key)
{
    byte[] byteArray = Encoding.ASCII.GetBytes(input);
    using(var myhmacsha1 = new HMACSHA1(key))
    {
        var hashArray = myhmacsha1.ComputeHash(byteArray);
        return hashArray.Aggregate("""", (s, e) =&gt; s + String.Format(""{0:x2}"",e), s =&gt; s );
    }
}
</code></pre>

<p>which was rejected. But as James already pointed out in a comment to this answer at the very least the <a href=""https://msdn.microsoft.com/en-us/library/yh598w02.aspx"" rel=""noreferrer"">using statement</a> <em>is</em> a good point.</p>
","6533030","54832","<c#><java><php><ruby><hmac>","44","31","3","2016-11-01 22:19:22","","3","24","5651","","2016-11-01 22:19:22","2011-05-20 05:16:02","","2017-05-23 12:34:12","2011-06-30 09:56:45"
"6067751","How to generate HMAC-SHA1 in C#?","<p>I am trying to make use of a REST API using C#. The API creator has provided sample libraries in PHP, Ruby and Java. I am getting hung up on one part of it where I need to generate an <a href=""http://en.wikipedia.org/wiki/HMAC"" rel=""noreferrer""><code>HMAC</code></a>.</p>

<p>Here's how it is done in the sample libraries they have provided.</p>

<p><strong>PHP</strong>   </p>

<pre><code>hash_hmac('sha1', $signatureString, $secretKey, false);
</code></pre>

<p><strong>Ruby</strong>  </p>

<pre><code>digest = OpenSSL::Digest::Digest.new('sha1')
return OpenSSL::HMAC.hexdigest(digest, secretKey, signatureString)
</code></pre>

<p><strong>Java</strong></p>

<pre><code>SecretKeySpec signingKey = new SecretKeySpec(secretKey.getBytes(), HMAC_SHA1_ALGORITHM);

Mac mac = null;
mac = Mac.getInstance(HMAC_SHA1_ALGORITHM);
mac.init(signingKey);

byte[] bytes = mac.doFinal(signatureString.getBytes());

String form = """";
for (int i = 0; i &lt; bytes.length; i++)
{
    String str = Integer.toHexString(((int)bytes[i]) &amp; 0xff);
    if (str.length() == 1)
    {
        str = ""0"" + str;
    }

    form = form + str;
}
return form;
</code></pre>

<p><strong>Here's my attempt in C#. <strike>It is not working.</strike> UPDATE:</strong> The C# example below works just fine. I found out that the real problem was due to some cross-platform differences in newline characters in my <code>signatureString</code>.</p>

<pre><code>var enc = Encoding.ASCII;
HMACSHA1 hmac = new HMACSHA1(enc.GetBytes(secretKey));
hmac.Initialize();

byte[] buffer = enc.GetBytes(signatureString);
return BitConverter.ToString(hmac.ComputeHash(buffer)).Replace(""-"", """").ToLower();
</code></pre>
","<p>This site has some pretty good examples across languages: <a href=""http://jokecamp.wordpress.com/2012/10/21/examples-of-creating-base64-hashes-using-hmac-sha256-in-different-languages/"">http://jokecamp.wordpress.com/2012/10/21/examples-of-creating-base64-hashes-using-hmac-sha256-in-different-languages/</a></p>

<p>The c# implementation at the time of writing is:</p>

<pre><code>private string CreateToken(string message, string secret)
{
 secret = secret ?? """";
 var encoding = new System.Text.ASCIIEncoding();
 byte[] keyByte = encoding.GetBytes(secret);
 byte[] messageBytes = encoding.GetBytes(message);
 using (var hmacsha256 = new HMACSHA256(keyByte))
 {
 byte[] hashmessage = hmacsha256.ComputeHash(messageBytes);
 return Convert.ToBase64String(hashmessage);
 }
}
</code></pre>
","19831937","54832","<c#><java><php><ruby><hmac>","44","17","3","2016-11-01 22:19:22","","3","24","5651","","2016-11-01 22:19:22","2011-05-20 05:16:02","","","2013-11-07 09:16:31"
"2707967","PHP: How can I generate a HmacSHA256 signature of a string","<p>Is there any way to create a HmacSHA256 signature of a string in php?</p>
","<p>The <a href=""http://php.net/manual/en/function.hash-hmac.php"" rel=""nofollow noreferrer""><strong><code>hash_hmac()</code></strong></a> function could help, here :</p>

<blockquote>
  <p>Generate a keyed hash value using the
  HMAC method</p>
</blockquote>

<p><br>
For example, the following portion of code :</p>

<pre><code>$hash = hash_hmac('sha256', 'hello, world!', 'mykey');
var_dump($hash);
</code></pre>

<p>Gives the following output :</p>

<pre><code>string '07a932dd17adc59b49561f33980ec5254688a41f133b8a26e76c611073ade89b' (length=64)
</code></pre>

<p><br>
And, to get the list of hashing algorithms that can be used, see <a href=""http://php.net/manual/en/function.hash-algos.php"" rel=""nofollow noreferrer""><strong><code>hash_algos()</code></strong></a>.</p>
","2708000","52751","<php><hmac>","38","13","3","2019-02-27 13:06:28","2708001","0","8","2009750","","2014-04-26 12:34:05","2010-04-25 11:13:43","","2019-02-27 13:06:28","2010-04-25 11:20:24"
"2707967","PHP: How can I generate a HmacSHA256 signature of a string","<p>Is there any way to create a HmacSHA256 signature of a string in php?</p>
","<p>Use <a href=""http://dk2.php.net/manual/en/function.hash-hmac.php"" rel=""noreferrer""><code>hash_hmac</code></a>:</p>

<pre><code>$sig = hash_hmac('sha256', $string, $secret)
</code></pre>

<p>Where <code>$secret</code> is your key.</p>
","2708001","52751","<php><hmac>","38","77","3","2019-02-27 13:06:28","2708001","0","8","2009750","","2014-04-26 12:34:05","2010-04-25 11:13:43","","","2010-04-25 11:20:24"
"2707967","PHP: How can I generate a HmacSHA256 signature of a string","<p>Is there any way to create a HmacSHA256 signature of a string in php?</p>
","<p>Here is an example of <strong>datatrans transaction signing</strong> (swiss e-payment solution) before call PSP with <strong>HMAC-SHA-256</strong>.</p>

<p>Hope it could help some developers.</p>

<pre><code>$hmacKey    = 30911337928580013;

$merchantId = 1100004624;
$amount     = $total * 100;
$currency   = 'EUR';
$refno      = $orderId;

// HMAC Hex to byte
$secret     = hex2bin(""$hmacKey"");

// Concat infos
$string     = $merchantId . $amount. $currency . $refno;

// generate SIGN
$sign       = bin2hex(hash_hmac('sha256', $string, $secret)); 
</code></pre>

<p><em>Note: the merchant ID and HMAC key are both from Datatrans documentation available here : <a href=""https://admin.sandbox.datatrans.com/showcase/doc/Technical_Implementation_Guide.pdf"" rel=""noreferrer"">https://admin.sandbox.datatrans.com/showcase/doc/Technical_Implementation_Guide.pdf</a></em></p>
","47676885","52751","<php><hmac>","38","8","3","2019-02-27 13:06:28","2708001","0","8","2009750","","2014-04-26 12:34:05","2010-04-25 11:13:43","","","2017-12-06 14:38:52"
"3208160","How to generate an HMAC in Java equivalent to a Python example?","<p>I'm looking at implementing an app getting <a href=""http://apiwiki.twitter.com/Authentication"" rel=""noreferrer"">Twitter authorization via Oauth</a> in Java. The first step is <a href=""http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-oauth-request_token"" rel=""noreferrer"">getting a request token</a>. Here is a <a href=""http://github.com/tav/tweetapp/blob/master/standalone/twitter_oauth_handler.py"" rel=""noreferrer"">Python example</a> for app engine. </p>

<p>To test my code, I am running Python and checking output with Java. Here is an example of Python generating a Hash-Based Message Authentication Code (HMAC):</p>

<pre><code>#!/usr/bin/python

from hashlib import sha1
from hmac import new as hmac

key = ""qnscAdgRlkIhAUPY44oiexBKtQbGY0orf7OV1I50""
message = ""foo""

print ""%s"" % hmac(key, message, sha1).digest().encode('base64')[:-1]
</code></pre>

<p>Output:</p>

<pre><code>$ ./foo.py
+3h2gpjf4xcynjCGU5lbdMBwGOc=
</code></pre>

<p>How does one replicate this example in Java?</p>

<p>I've seen an <a href=""http://exampledepot.8waytrips.com/egs/javax.crypto/GenMac.html"" rel=""noreferrer"">example of HMAC</a> in Java:</p>

<pre><code>try {
    // Generate a key for the HMAC-MD5 keyed-hashing algorithm; see RFC 2104
    // In practice, you would save this key.
    KeyGenerator keyGen = KeyGenerator.getInstance(""HmacMD5"");
    SecretKey key = keyGen.generateKey();

    // Create a MAC object using HMAC-MD5 and initialize with key
    Mac mac = Mac.getInstance(key.getAlgorithm());
    mac.init(key);

    String str = ""This message will be digested"";

    // Encode the string into bytes using utf-8 and digest it
    byte[] utf8 = str.getBytes(""UTF8"");
    byte[] digest = mac.doFinal(utf8);

    // If desired, convert the digest into a string
    String digestB64 = new sun.misc.BASE64Encoder().encode(digest);
} catch (InvalidKeyException e) {
} catch (NoSuchAlgorithmException e) {
} catch (UnsupportedEncodingException e) {
}
</code></pre>

<p>It uses <a href=""http://download.oracle.com/docs/cd/E17409_01/javase/6/docs/api/javax/crypto/Mac.html"" rel=""noreferrer"">javax.crypto.Mac</a>, all good. However, the <a href=""http://download.oracle.com/docs/cd/E17409_01/javase/6/docs/api/javax/crypto/SecretKey.html"" rel=""noreferrer"">SecretKey</a> constructors take bytes and an algorithm. </p>

<p>What's the algorithm in the Python example? How can one create a Java secret key without an algorithm?</p>
","<p>HmacSHA1 seems to be the algorithm name you need:</p>

<pre><code>SecretKeySpec keySpec = new SecretKeySpec(
        ""qnscAdgRlkIhAUPY44oiexBKtQbGY0orf7OV1I50"".getBytes(),
        ""HmacSHA1"");

Mac mac = Mac.getInstance(""HmacSHA1"");
mac.init(keySpec);
byte[] result = mac.doFinal(""foo"".getBytes());

BASE64Encoder encoder = new BASE64Encoder();
System.out.println(encoder.encode(result));
</code></pre>

<p>produces:</p>

<pre><code>+3h2gpjf4xcynjCGU5lbdMBwGOc=
</code></pre>

<p>Note that I've used <code>sun.misc.BASE64Encoder</code> for a quick implementation here, but you should probably use something that doesn't depend on the Sun JRE. <a href=""http://commons.apache.org/codec/apidocs/org/apache/commons/codec/binary/Base64.html"" rel=""noreferrer"">The base64-encoder in Commons Codec</a> would be a better choice, for example.</p>
","3208472","52242","<java><oauth><sha1><hmac><cryptoapi>","50","68","2","2015-11-12 08:45:51","3208472","0","19","5299236","","2015-11-12 08:45:51","2010-07-08 21:31:20","","2012-02-22 12:44:05","2010-07-08 22:27:59"
"3208160","How to generate an HMAC in Java equivalent to a Python example?","<p>I'm looking at implementing an app getting <a href=""http://apiwiki.twitter.com/Authentication"" rel=""noreferrer"">Twitter authorization via Oauth</a> in Java. The first step is <a href=""http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-oauth-request_token"" rel=""noreferrer"">getting a request token</a>. Here is a <a href=""http://github.com/tav/tweetapp/blob/master/standalone/twitter_oauth_handler.py"" rel=""noreferrer"">Python example</a> for app engine. </p>

<p>To test my code, I am running Python and checking output with Java. Here is an example of Python generating a Hash-Based Message Authentication Code (HMAC):</p>

<pre><code>#!/usr/bin/python

from hashlib import sha1
from hmac import new as hmac

key = ""qnscAdgRlkIhAUPY44oiexBKtQbGY0orf7OV1I50""
message = ""foo""

print ""%s"" % hmac(key, message, sha1).digest().encode('base64')[:-1]
</code></pre>

<p>Output:</p>

<pre><code>$ ./foo.py
+3h2gpjf4xcynjCGU5lbdMBwGOc=
</code></pre>

<p>How does one replicate this example in Java?</p>

<p>I've seen an <a href=""http://exampledepot.8waytrips.com/egs/javax.crypto/GenMac.html"" rel=""noreferrer"">example of HMAC</a> in Java:</p>

<pre><code>try {
    // Generate a key for the HMAC-MD5 keyed-hashing algorithm; see RFC 2104
    // In practice, you would save this key.
    KeyGenerator keyGen = KeyGenerator.getInstance(""HmacMD5"");
    SecretKey key = keyGen.generateKey();

    // Create a MAC object using HMAC-MD5 and initialize with key
    Mac mac = Mac.getInstance(key.getAlgorithm());
    mac.init(key);

    String str = ""This message will be digested"";

    // Encode the string into bytes using utf-8 and digest it
    byte[] utf8 = str.getBytes(""UTF8"");
    byte[] digest = mac.doFinal(utf8);

    // If desired, convert the digest into a string
    String digestB64 = new sun.misc.BASE64Encoder().encode(digest);
} catch (InvalidKeyException e) {
} catch (NoSuchAlgorithmException e) {
} catch (UnsupportedEncodingException e) {
}
</code></pre>

<p>It uses <a href=""http://download.oracle.com/docs/cd/E17409_01/javase/6/docs/api/javax/crypto/Mac.html"" rel=""noreferrer"">javax.crypto.Mac</a>, all good. However, the <a href=""http://download.oracle.com/docs/cd/E17409_01/javase/6/docs/api/javax/crypto/SecretKey.html"" rel=""noreferrer"">SecretKey</a> constructors take bytes and an algorithm. </p>

<p>What's the algorithm in the Python example? How can one create a Java secret key without an algorithm?</p>
","<p>A minor thing but if you are looking for an equivalent to hmac(key,message) then by default the python library will use the MD5 algorithm, so you need to use the HmacMD5 algorithm in Java.</p>

<p>I mention this because I had this exact problem and found this answer which was helpful, but I missed the part where a digest method was passed in to hmac() and thus went down a rabbit hole. Hopefully this answer will prevent others doing the same in the future.</p>

<p>e.g. in Python REPL</p>

<pre><code>&gt;&gt;&gt; import hmac
&gt;&gt;&gt; hmac.new(""keyValueGoesHere"", ""secretMessageToHash"").hexdigest()
'1a7bb3687962c9e26b2d4c2b833b2bf2'
</code></pre>

<p>This is equivalent to the Java method:</p>

<pre><code>import org.apache.commons.codec.binary.Hex;
import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;

public class HashingUtility {
    public static String HMAC_MD5_encode(String key, String message) throws Exception {

        SecretKeySpec keySpec = new SecretKeySpec(
                key.getBytes(),
                ""HmacMD5"");

        Mac mac = Mac.getInstance(""HmacMD5"");
        mac.init(keySpec);
        byte[] rawHmac = mac.doFinal(message.getBytes());

        return Hex.encodeHexString(rawHmac);
    }
}
</code></pre>

<p>Note that in my example I'm doing the equivalent of .hexdigest()</p>
","11102291","52242","<java><oauth><sha1><hmac><cryptoapi>","50","22","2","2015-11-12 08:45:51","3208472","0","19","5299236","","2015-11-12 08:45:51","2010-07-08 21:31:20","","","2012-06-19 13:43:34"
"2003262","How to send password securely via HTTP using Javascript in absence of HTTPS?","<p>The very basic issue all developers face: Whenever user submits the form, the password is sent via network and it must be protected. The site I develop for doesn't have HTTPS. Neither does the owner want to buy a SSL certificate, nor is he interested in a self-signed one. So I want to protect the password sent via HTTP using Javascript when submitting form.</p>

<p>To eager downvoters: <a href=""https://stackoverflow.com/questions/1582894/how-to-send-password-securely-over-http"">How to send password securely over HTTP?</a> DOES NOT give any sensible solution and I am in another situation.</p>

<p>If I use MD5, one can reverse that password string. What about nonce/HMAC? Any available Javascript library for that? Or do you have any suggestion/hint to tackle? Thanks in advance!</p>
","<p>Unfortunately there will be no way to ensure security of a non-encrypted request. Anyone with access to your javascript will simply be able to reverse engineer it/tamper with it and anyone with a packet sniffer will be able to watch the unencrypted traffic. These two facts together mean:</p>

<p><strong>No SSL? No security.</strong></p>
","2003283","51543","<security><http><hash><password-protection><hmac>","58","4","11","2016-10-14 03:46:35","2003335","0","27","-1","","2017-05-23 12:09:34","2010-01-05 00:07:29","","2010-01-05 12:42:31","2010-01-05 00:13:10"
"2003262","How to send password securely via HTTP using Javascript in absence of HTTPS?","<p>The very basic issue all developers face: Whenever user submits the form, the password is sent via network and it must be protected. The site I develop for doesn't have HTTPS. Neither does the owner want to buy a SSL certificate, nor is he interested in a self-signed one. So I want to protect the password sent via HTTP using Javascript when submitting form.</p>

<p>To eager downvoters: <a href=""https://stackoverflow.com/questions/1582894/how-to-send-password-securely-over-http"">How to send password securely over HTTP?</a> DOES NOT give any sensible solution and I am in another situation.</p>

<p>If I use MD5, one can reverse that password string. What about nonce/HMAC? Any available Javascript library for that? Or do you have any suggestion/hint to tackle? Thanks in advance!</p>
","<p>Any transmission that you have will be in the clear; that is, without SSL your critical information will be exposed.  It is worth discussing that point with the site Owner.  In other words, it's best to take necessary measure to fortify your data transmission, and SSL is one the basic, cheap steps you can take.</p>
","2003292","51543","<security><http><hash><password-protection><hmac>","58","1","11","2016-10-14 03:46:35","2003335","0","27","-1","","2017-05-23 12:09:34","2010-01-05 00:07:29","","","2010-01-05 00:14:16"
"2003262","How to send password securely via HTTP using Javascript in absence of HTTPS?","<p>The very basic issue all developers face: Whenever user submits the form, the password is sent via network and it must be protected. The site I develop for doesn't have HTTPS. Neither does the owner want to buy a SSL certificate, nor is he interested in a self-signed one. So I want to protect the password sent via HTTP using Javascript when submitting form.</p>

<p>To eager downvoters: <a href=""https://stackoverflow.com/questions/1582894/how-to-send-password-securely-over-http"">How to send password securely over HTTP?</a> DOES NOT give any sensible solution and I am in another situation.</p>

<p>If I use MD5, one can reverse that password string. What about nonce/HMAC? Any available Javascript library for that? Or do you have any suggestion/hint to tackle? Thanks in advance!</p>
","<p>i don't think the issue here is the technology, but how you explain the importance of SSL. Provide them with reliable reading materials, i'm sure there are plenty over the web.</p>
","2003296","51543","<security><http><hash><password-protection><hmac>","58","1","11","2016-10-14 03:46:35","2003335","0","27","-1","","2017-05-23 12:09:34","2010-01-05 00:07:29","","","2010-01-05 00:15:04"
"2003262","How to send password securely via HTTP using Javascript in absence of HTTPS?","<p>The very basic issue all developers face: Whenever user submits the form, the password is sent via network and it must be protected. The site I develop for doesn't have HTTPS. Neither does the owner want to buy a SSL certificate, nor is he interested in a self-signed one. So I want to protect the password sent via HTTP using Javascript when submitting form.</p>

<p>To eager downvoters: <a href=""https://stackoverflow.com/questions/1582894/how-to-send-password-securely-over-http"">How to send password securely over HTTP?</a> DOES NOT give any sensible solution and I am in another situation.</p>

<p>If I use MD5, one can reverse that password string. What about nonce/HMAC? Any available Javascript library for that? Or do you have any suggestion/hint to tackle? Thanks in advance!</p>
","<p>If you REALLY want to deep-dive into this, look at the <a href=""http://en.wikipedia.org/wiki/Diffie%E2%80%93Hellman_key_exchange"" rel=""noreferrer"">Diffie-Hellman key exchange</a> which was created to ""allow two parties that have no prior knowledge of each other to jointly establish a shared secret key over an insecure communications channel""</p>

<p>I'm not a cryptography expert though, so I don't fully know if it's really secure if an attacker has both the Client (JavaScript source code) and the transport mechanism (Packet sniffer)</p>
","2003304","51543","<security><http><hash><password-protection><hmac>","58","12","11","2016-10-14 03:46:35","2003335","0","27","-1","","2017-05-23 12:09:34","2010-01-05 00:07:29","","","2010-01-05 00:16:54"
"2003262","How to send password securely via HTTP using Javascript in absence of HTTPS?","<p>The very basic issue all developers face: Whenever user submits the form, the password is sent via network and it must be protected. The site I develop for doesn't have HTTPS. Neither does the owner want to buy a SSL certificate, nor is he interested in a self-signed one. So I want to protect the password sent via HTTP using Javascript when submitting form.</p>

<p>To eager downvoters: <a href=""https://stackoverflow.com/questions/1582894/how-to-send-password-securely-over-http"">How to send password securely over HTTP?</a> DOES NOT give any sensible solution and I am in another situation.</p>

<p>If I use MD5, one can reverse that password string. What about nonce/HMAC? Any available Javascript library for that? Or do you have any suggestion/hint to tackle? Thanks in advance!</p>
","<p>There is no way to send a password securely <strong>that the user can verify</strong> without SSL.</p>

<p>Sure, you can write some JavaScript that will make a password secure for over-the-wire transmission through hashing or public-key-encryption. But how can the user be sure that the JavaScript itself has not been tampered with by a man-in-the-middle before it reached them, to send the password to an attacker instead of the site, or even just compromise the security of the algorithm? The only way would be for them to be expert programmers and have them inspect every line of your page and script to ensure it was kosher before typing the password. That is not a realistic scenario.</p>

<p>If you want passwords to be safe from man-in-the-middle attacks, you must buy an SSL cert. There is no other way. Get used to it.</p>

<blockquote>
  <p>If I use MD5, one can reverse that password string.</p>
</blockquote>

<p>No... not trivially at least. Whilst MD5 has attacks against it, it's a hashing algorithm and thus unreversable. You would have to brute-force it.</p>

<p>But again, a man-in-the-middle attacker doesn't need to look at your MD5s. He can simply sabotage the JavaScript you send the user to make the MD5s.</p>
","2003335","51543","<security><http><hash><password-protection><hmac>","58","78","11","2016-10-14 03:46:35","2003335","0","27","-1","","2017-05-23 12:09:34","2010-01-05 00:07:29","","","2010-01-05 00:22:04"
"2003262","How to send password securely via HTTP using Javascript in absence of HTTPS?","<p>The very basic issue all developers face: Whenever user submits the form, the password is sent via network and it must be protected. The site I develop for doesn't have HTTPS. Neither does the owner want to buy a SSL certificate, nor is he interested in a self-signed one. So I want to protect the password sent via HTTP using Javascript when submitting form.</p>

<p>To eager downvoters: <a href=""https://stackoverflow.com/questions/1582894/how-to-send-password-securely-over-http"">How to send password securely over HTTP?</a> DOES NOT give any sensible solution and I am in another situation.</p>

<p>If I use MD5, one can reverse that password string. What about nonce/HMAC? Any available Javascript library for that? Or do you have any suggestion/hint to tackle? Thanks in advance!</p>
","<p>The solution requires the client to be able to encrypt the password using a secret encryption key known <em>only</em> to the client <em>and</em> the server.</p>

<p>SSL accomplishes this by requiring both the server and the client web browser to have their own asymmetric public/private keypair, which they use to encrypt and transmit a random session key between them. The rest of the conversation then uses that secure session key.</p>

<p>So you're asking how to solve the same problem as SSL without the benefit of having a secret key that is known <em>only</em> to the client and server. I'm no expert, but it looks like this can't be done, or at least not easily.</p>
","2003378","51543","<security><http><hash><password-protection><hmac>","58","1","11","2016-10-14 03:46:35","2003335","0","27","-1","","2017-05-23 12:09:34","2010-01-05 00:07:29","","","2010-01-05 00:32:21"
"2003262","How to send password securely via HTTP using Javascript in absence of HTTPS?","<p>The very basic issue all developers face: Whenever user submits the form, the password is sent via network and it must be protected. The site I develop for doesn't have HTTPS. Neither does the owner want to buy a SSL certificate, nor is he interested in a self-signed one. So I want to protect the password sent via HTTP using Javascript when submitting form.</p>

<p>To eager downvoters: <a href=""https://stackoverflow.com/questions/1582894/how-to-send-password-securely-over-http"">How to send password securely over HTTP?</a> DOES NOT give any sensible solution and I am in another situation.</p>

<p>If I use MD5, one can reverse that password string. What about nonce/HMAC? Any available Javascript library for that? Or do you have any suggestion/hint to tackle? Thanks in advance!</p>
","<p>You can use a javascript RSA implementation to encrypt the password before sending. (Here is an example of <a href=""http://ohdave.com/rsa/"" rel=""noreferrer"">RSA In Javascript</a>.)</p>

<p>But I believe both this one and using a hash function will be vulnerable to <a href=""http://en.wikipedia.org/wiki/Replay_attack"" rel=""noreferrer"">replay attacks</a>. So, be careful.</p>
","2003429","51543","<security><http><hash><password-protection><hmac>","58","5","11","2016-10-14 03:46:35","2003335","0","27","-1","","2017-05-23 12:09:34","2010-01-05 00:07:29","","","2010-01-05 00:47:51"
"2003262","How to send password securely via HTTP using Javascript in absence of HTTPS?","<p>The very basic issue all developers face: Whenever user submits the form, the password is sent via network and it must be protected. The site I develop for doesn't have HTTPS. Neither does the owner want to buy a SSL certificate, nor is he interested in a self-signed one. So I want to protect the password sent via HTTP using Javascript when submitting form.</p>

<p>To eager downvoters: <a href=""https://stackoverflow.com/questions/1582894/how-to-send-password-securely-over-http"">How to send password securely over HTTP?</a> DOES NOT give any sensible solution and I am in another situation.</p>

<p>If I use MD5, one can reverse that password string. What about nonce/HMAC? Any available Javascript library for that? Or do you have any suggestion/hint to tackle? Thanks in advance!</p>
","<p>If you don't have access to SSL, MD5 should be adequate to prevent accidental discovery of passwords (such as in a network log file or something). Anything else would be a waste of time. Just make sure the app doesn't give access to sensitive information (ie, credit card numbers, medical history, etc).</p>

<p>Like others commenters have suggested, a serious attacker will be able to break any type of security on the page. Even SSL is a small barrier since most users use easy-to-guess passwords, re-use the same passwords everywhere, will give their password to anybody that asks, or can be tricked into giving up their password by a copied page or ""tech support"" phone call.</p>
","2003714","51543","<security><http><hash><password-protection><hmac>","58","1","11","2016-10-14 03:46:35","2003335","0","27","-1","","2017-05-23 12:09:34","2010-01-05 00:07:29","","","2010-01-05 02:01:27"
"2003262","How to send password securely via HTTP using Javascript in absence of HTTPS?","<p>The very basic issue all developers face: Whenever user submits the form, the password is sent via network and it must be protected. The site I develop for doesn't have HTTPS. Neither does the owner want to buy a SSL certificate, nor is he interested in a self-signed one. So I want to protect the password sent via HTTP using Javascript when submitting form.</p>

<p>To eager downvoters: <a href=""https://stackoverflow.com/questions/1582894/how-to-send-password-securely-over-http"">How to send password securely over HTTP?</a> DOES NOT give any sensible solution and I am in another situation.</p>

<p>If I use MD5, one can reverse that password string. What about nonce/HMAC? Any available Javascript library for that? Or do you have any suggestion/hint to tackle? Thanks in advance!</p>
","<p>The solution here is to not send the password at all.  Use challenge/response. </p>

<p>In the original form include a large block of random text along with a key.  Store the original random text in the session based on key on the server.  When the client submits the form, use JS to hash the random text and password together.  Then send the username, key, and hashed random text to the server. DO NOT send the password.  On the server, use the key to lookup the original random text, perform the same hashing operation with the stored password. If the server-hashed value matches the client hashed value, then you know the client entered the right password without ever sending the password to the server.</p>

<p>Whether the password is right or not, expire the key and random text so each are one-time-use. </p>
","2003958","51543","<security><http><hash><password-protection><hmac>","58","24","11","2016-10-14 03:46:35","2003335","0","27","-1","","2017-05-23 12:09:34","2010-01-05 00:07:29","","2016-10-14 03:46:35","2010-01-05 03:20:03"
"2003262","How to send password securely via HTTP using Javascript in absence of HTTPS?","<p>The very basic issue all developers face: Whenever user submits the form, the password is sent via network and it must be protected. The site I develop for doesn't have HTTPS. Neither does the owner want to buy a SSL certificate, nor is he interested in a self-signed one. So I want to protect the password sent via HTTP using Javascript when submitting form.</p>

<p>To eager downvoters: <a href=""https://stackoverflow.com/questions/1582894/how-to-send-password-securely-over-http"">How to send password securely over HTTP?</a> DOES NOT give any sensible solution and I am in another situation.</p>

<p>If I use MD5, one can reverse that password string. What about nonce/HMAC? Any available Javascript library for that? Or do you have any suggestion/hint to tackle? Thanks in advance!</p>
","<p>-- English --
i think in something, but i don't know if it could be really secure. If you can put your form in a php file, then you can create an algoritm for create a string based in time or in something else, and then put this string in your html.</p>

<p>When the user type a password in a password input field, when you debug it you canot see the value typed by user, so before send the information via post or get, you can use the password user as a hint to encrypt the encrypted string previosly generated, and then, just sent it insted of the password typed by user.</p>

<p>In this way, the attackers dont have all inside the js code, so they will need discover the algoritm that you create to decrypt it.</p>

<p>This is just an idea, so if you can tell me how this can not be safe, I would appreciate it.</p>

<p>-- Spanish --
Se me acaba de ocurrir algo que puede servir, pero no se si realmente sea algo seguro. Por medio de php puedes generar un algoritmo que cree un string en base al timestamp o algo más, y después colocar esta cadena en el html.</p>

<p>Note que cuando alguien escribe una contraseña en un campo input tipo password, con un debug no se puede ver el valor que tecleo el usuario (no se si exista manera pero no quise investigar más), asi que podemos utilizar la contraseña que el usuario escribió como palabra clave para encriptar la cadena de texto que previamente habiamos generado con php, por medio de un algoritmo en JS. Sería algo así como encriptar lo encriptado. Posteriormente lo que estariamos enviado no sería la contraseña tecleada, si no esta última cadena resultante.</p>

<p>Buscando un contra, lo único que se me ocurra es que el atacante tendrá que dedicarle mucho tiempo para tratar de encontrar el agoritmo que creamos por medio de php y poder decriptar la cadena final, o tendrá que hackear el servidor para acceder al php y obtener el algoritmo.</p>

<p>Esto es solo una idea, por lo que si pueden decirme como esto puede no ser seguro, se los agradecería.</p>
","17394377","51543","<security><http><hash><password-protection><hmac>","58","0","11","2016-10-14 03:46:35","2003335","0","27","-1","","2017-05-23 12:09:34","2010-01-05 00:07:29","","","2013-06-30 20:07:07"
"2003262","How to send password securely via HTTP using Javascript in absence of HTTPS?","<p>The very basic issue all developers face: Whenever user submits the form, the password is sent via network and it must be protected. The site I develop for doesn't have HTTPS. Neither does the owner want to buy a SSL certificate, nor is he interested in a self-signed one. So I want to protect the password sent via HTTP using Javascript when submitting form.</p>

<p>To eager downvoters: <a href=""https://stackoverflow.com/questions/1582894/how-to-send-password-securely-over-http"">How to send password securely over HTTP?</a> DOES NOT give any sensible solution and I am in another situation.</p>

<p>If I use MD5, one can reverse that password string. What about nonce/HMAC? Any available Javascript library for that? Or do you have any suggestion/hint to tackle? Thanks in advance!</p>
","<p>As mentioned, none of this is secure against <em>server</em> spoofing, as that requires an ability to trust the client-side Javascript. But if we're sure that the server can't be spoofed (signed cert, hash signing immune to length-extension, etc.) but <em>not</em> that the connection is immune to eavesdroppers, here's how I'd implement it.</p>

<p>I think the most secure way is, instead of storing H(<em>password</em>), where H is your hash function of choice, store g^H(<i>password</i>) i.e. use the password as the private key for Diffie-Hellman key exchange. (You should also probably use a random g for different users, too--it becomes your salt.) Then to verify, you generate a nonce b, send the user g^b, and compute (g^H(<i>password</i>))^b. The user does not need to know g--they need only compute (g^b)^H(<em>password</em>) = (g^H(<em>password</em>))^b. Now you have a number that both parties know <em>iff</em> the user entered the right password, and constructing a challenge-response zero-knowledge proof based on knowing the correct number is trivial, while the random number used as the server's ""private key"" makes the approach immune to replay attacks.</p>
","34168728","51543","<security><http><hash><password-protection><hmac>","58","0","11","2016-10-14 03:46:35","2003335","0","27","-1","","2017-05-23 12:09:34","2010-01-05 00:07:29","","2015-12-09 20:16:16","2015-12-09 00:30:26"
"8338661","Implementation HMAC-SHA1 in python","<p>I am trying to use the OAuth of a website, which requires the signature method to be 'HMAC-SHA1' only.</p>

<p>I am wondering how to implement this in Python?</p>
","<p>There are multiple python libraries available at <a href=""http://oauth.net/code/"" rel=""nofollow"">the oauth website</a>, but if you're just interested in a specific implementation you could have a look at <a href=""http://oauth.googlecode.com/svn/code/python/oauth/oauth.py"" rel=""nofollow"">one of them</a>.</p>
","8338763","47637","<python><oauth><sha1><hmac>","41","1","7","2020-01-03 05:40:41","8339781","0","21","1033581","","2018-03-18 04:54:36","2011-12-01 08:55:56","","","2011-12-01 09:05:10"
"8338661","Implementation HMAC-SHA1 in python","<p>I am trying to use the OAuth of a website, which requires the signature method to be 'HMAC-SHA1' only.</p>

<p>I am wondering how to implement this in Python?</p>
","<p>It's already there <a href=""https://docs.python.org/3/library/hmac.html#module-hmac"" rel=""nofollow noreferrer"">Keyed-Hashing for Message Authentication</a></p>
","8338804","47637","<python><oauth><sha1><hmac>","41","7","7","2020-01-03 05:40:41","8339781","0","21","1033581","","2018-03-18 04:54:36","2011-12-01 08:55:56","","2015-08-05 06:59:59","2011-12-01 09:08:17"
"8338661","Implementation HMAC-SHA1 in python","<p>I am trying to use the OAuth of a website, which requires the signature method to be 'HMAC-SHA1' only.</p>

<p>I am wondering how to implement this in Python?</p>
","<p>Pseudocodish:</p>

<pre><code>def sign_request():
    from hashlib import sha1
    import hmac

    # key = b""CONSUMER_SECRET&amp;"" #If you dont have a token yet
    key = b""CONSUMER_SECRET&amp;TOKEN_SECRET"" 


    # The Base String as specified here: 
    raw = b""BASE_STRING"" # as specified by OAuth

    hashed = hmac.new(key, raw, sha1)

    # The signature
    return hashed.digest().encode(""base64"").rstrip('\n')
</code></pre>

<p>Signature errors usually reside in the base-string, make sure you understand this (as stated by the OAuth1.0 spec here: <a href=""http://tools.ietf.org/html/draft-hammer-oauth-10#section-3.4.1"" rel=""noreferrer"">http://tools.ietf.org/html/draft-hammer-oauth-10#section-3.4.1</a>).</p>

<p>The following inputs are used to generate the Signature Base String:</p>

<ol>
<li>HTTP Method (for example GET)</li>
<li>Path (for example <a href=""http://photos.example.net/photos"" rel=""noreferrer"">http://photos.example.net/photos</a>)</li>
<li><p>Parameters, alphabetically, such as (line breaks for readability): </p>

<pre><code>file=vacation.jpg
&amp;oauth_consumer_key=dpf43f3p2l4k3l03
&amp;oauth_nonce=kllo9940pd9333jh
&amp;oauth_signature_method=HMAC-SHA1
&amp;oauth_timestamp=1191242096
&amp;oauth_token=nnch734d00sl2jdk
&amp;oauth_version=1.0
&amp;size=original
</code></pre></li>
</ol>

<p>Concatenate and URL encode each part and it ends up as:</p>

<p><code>GET&amp;http%3A%2F%2Fphotos.example.net%2Fphotos&amp;file%3Dvacation.jpg%26
oauth_consumer_key%3Ddpf43f3p2l4k3l03%26oauth_nonce%3Dkllo9940pd9333jh%26
oauth_signature_method%3DHMAC-SHA1%26oauth_timestamp%3D1191242096%26
oauth_token%3Dnnch734d00sl2jdk%26oauth_version%3D1.0%26size%3Doriginal</code></p>
","8339781","47637","<python><oauth><sha1><hmac>","41","74","7","2020-01-03 05:40:41","8339781","0","21","1033581","","2018-03-18 04:54:36","2011-12-01 08:55:56","","2018-12-20 07:01:58","2011-12-01 10:25:15"
"8338661","Implementation HMAC-SHA1 in python","<p>I am trying to use the OAuth of a website, which requires the signature method to be 'HMAC-SHA1' only.</p>

<p>I am wondering how to implement this in Python?</p>
","<p>For the love of God, if you do ANYTHING with oauth, use the <code>requests</code> library for Python! I tried to implement HMAC-SHA1 using the <code>hmac</code> library in Python and it's a lot of headaches, trying to create the correct oauth base string and such. Just use requests and it's as simple as:</p>

<pre><code>&gt;&gt;&gt; import requests
&gt;&gt;&gt; from requests_oauthlib import OAuth1

&gt;&gt;&gt; url = 'https://api.twitter.com/1.1/account/verify_credentials.json'
&gt;&gt;&gt; auth = OAuth1('YOUR_APP_KEY', 'YOUR_APP_SECRET', 'USER_OAUTH_TOKEN', 'USER_OAUTH_TOKEN_SECRET')

&gt;&gt;&gt; requests.get(url, auth=auth)
</code></pre>

<p><a href=""http://docs.python-requests.org/en/latest/user/authentication/"" rel=""noreferrer"">Requests Authentication</a></p>

<p><a href=""https://pypi.python.org/pypi/requests-oauthlib/0.5.0"" rel=""noreferrer"">Requests Oauth Library</a></p>
","32060758","47637","<python><oauth><sha1><hmac>","41","17","7","2020-01-03 05:40:41","8339781","0","21","1033581","","2018-03-18 04:54:36","2011-12-01 08:55:56","","2015-08-18 05:52:51","2015-08-17 22:32:09"
"8338661","Implementation HMAC-SHA1 in python","<p>I am trying to use the OAuth of a website, which requires the signature method to be 'HMAC-SHA1' only.</p>

<p>I am wondering how to implement this in Python?</p>
","<p>Finally here's an actually working solution (tested with Python 3) utilizing <a href=""https://github.com/idan/oauthlib"" rel=""nofollow"">oauthlib</a>.</p>

<p>I use the first OAuth step given as an example in the official RTF <a href=""https://tools.ietf.org/html/rfc5849"" rel=""nofollow"">1</a>:</p>

<pre><code>Client Identifier: dpf43f3p2l4k3l03
Client Shared-Secret: kd94hf93k423kf44

POST /initiate HTTP/1.1
Host: photos.example.net
Authorization: OAuth realm=""Photos"",
    oauth_consumer_key=""dpf43f3p2l4k3l03"",
    oauth_signature_method=""HMAC-SHA1"",
    oauth_timestamp=""137131200"",
    oauth_nonce=""wIjqoS"",
    oauth_callback=""http%3A%2F%2Fprinter.example.com%2Fready"",
    oauth_signature=""74KNZJeDHnMBp0EMJ9ZHt%2FXKycU%3D""
</code></pre>

<p>The value for <code>oauth_signature</code> is what we would like to calculate.</p>

<p>The following defines what we want to sign:</p>

<pre><code># There is no query string present.
# In case of http://example.org/api?a=1&amp;b=2 - the value
# would be ""a=1&amp;b=2"".
uri_query=""""

# The oauthlib function 'collect_parameters' automatically
# ignores irrelevant header items like 'Content-Type' or
# 'oauth_signature' in the 'Authorization' section.
headers={
    ""Authorization"": (
        'OAuth realm=""Photos"", '
        'oauth_nonce=""wIjqoS"", '
        'oauth_timestamp=""137131200"", '
        'oauth_consumer_key=""dpf43f3p2l4k3l03"", '
        'oauth_signature_method=""HMAC-SHA1"", '
        'oauth_callback=""http://printer.example.com/ready""'
    )
}

# There's no POST data here - in case it was: x=1 and y=2,
# then the value would be '[(""x"",""1""),(""y"",""2"")]'.
data=[]

# This is the above specified client secret which we need
# for calculating the signature.
client_secret=""kd94hf93k423kf44""
</code></pre>

<p>And here we go:</p>

<pre><code>import oauthlib.oauth1.rfc5849.signature as oauth

params = oauth.collect_parameters(
    uri_query="""",
    body=data, 
    headers=headers,
    exclude_oauth_signature=True, 
    with_realm=False
)

norm_params = oauth.normalize_parameters(params)

base_string = oauth.construct_base_string(
    ""POST"", 
    ""https://photos.example.net/initiate"", 
    norm_params
)

sig = oauth.sign_hmac_sha1(
    base_string, 
    client_secret, 
    '' # resource_owner_secret - not used
)
</code></pre>

<hr>

<pre><code>from urllib.parse import quote_plus

print(sig)
# 74KNZJeDHnMBp0EMJ9ZHt/XKycU=

print(quote_plus(sig))
# 74KNZJeDHnMBp0EMJ9ZHt%2FXKycU%3D
</code></pre>
","39494701","47637","<python><oauth><sha1><hmac>","41","4","7","2020-01-03 05:40:41","8339781","0","21","1033581","","2018-03-18 04:54:36","2011-12-01 08:55:56","","","2016-09-14 15:46:18"
"8338661","Implementation HMAC-SHA1 in python","<p>I am trying to use the OAuth of a website, which requires the signature method to be 'HMAC-SHA1' only.</p>

<p>I am wondering how to implement this in Python?</p>
","<p>You can try following method.</p>

<pre><code>def _hmac_sha1(input_str):
        raw = input_str.encode(""utf-8"")
        key = 'your_key'.encode('utf-8')
        hashed = hmac.new(key, raw, hashlib.sha1)
        return base64.encodebytes(hashed.digest()).decode('utf-8')
</code></pre>
","44818110","47637","<python><oauth><sha1><hmac>","41","2","7","2020-01-03 05:40:41","8339781","0","21","1033581","","2018-03-18 04:54:36","2011-12-01 08:55:56","","2017-06-29 09:51:03","2017-06-29 06:45:01"
"8338661","Implementation HMAC-SHA1 in python","<p>I am trying to use the OAuth of a website, which requires the signature method to be 'HMAC-SHA1' only.</p>

<p>I am wondering how to implement this in Python?</p>
","<p>In Python 3.7 there is an optimized way to do this. HMAC(key, msg, digest).digest() uses an optimized C or inline implementation, which is faster for messages that fit into memory.</p>

<blockquote>
  <p>Return digest of msg for given secret key and digest. The function is
  equivalent to HMAC(key, msg, digest).digest(), but uses an optimized C
  or inline implementation, which is faster for messages that fit into
  memory. The parameters key, msg, and digest have the same meaning as
  in new().</p>
  
  <p>CPython implementation detail, the optimized C implementation is only
  used when digest is a string and name of a digest algorithm, which is
  supported by OpenSSL.</p>
</blockquote>

<p><a href=""https://docs.python.org/3/library/hmac.html#hmac.digest"" rel=""nofollow noreferrer"">https://docs.python.org/3/library/hmac.html#hmac.digest</a></p>
","53468245","47637","<python><oauth><sha1><hmac>","41","0","7","2020-01-03 05:40:41","8339781","0","21","1033581","","2018-03-18 04:54:36","2011-12-01 08:55:56","","","2018-11-25 14:01:10"
"3696857","What's the difference between Message Digest, Message Authentication Code, and HMAC?","<p>My understanding of a message digest is that it's an encrypted hash of some data sent along with the encrypted data so you may verify that the data has not been tampered with. What is the difference then between this and message authentication codes (MAC) and hash MACs (HMAC)?</p>
","<ul>
<li>A <strong>Message Digest</strong> is simply a hash of a message. It's the output of a cryptographic hash function applied to input data, which is referred to as a <em>message</em>.</li>
<li>A <strong>Message Authentication Code</strong> (MAC) is a piece of information that proves the integrity of a message and cannot be counterfeited easily. </li>
<li>A <strong>HMAC</strong> is a specific kind of MAC defined by <a href=""http://www.ietf.org/rfc/rfc2104.txt"" rel=""noreferrer"">RFC 2104</a>.</li>
</ul>

<p>Wikipedia has good articles covering all these terms: see <a href=""http://en.wikipedia.org/wiki/Message_digest"" rel=""noreferrer"">Message Digest</a>, <a href=""http://en.wikipedia.org/wiki/Message_authentication_code"" rel=""noreferrer"">Message Authentication Code</a>, and <a href=""http://en.wikipedia.org/wiki/HMAC"" rel=""noreferrer"">HMAC</a>.</p>
","3696888","34899","<security><hmac><message-digest>","57","19","2","2013-04-19 09:54:58","3696947","0","30","443265","","2011-05-27 08:10:12","2010-09-12 22:05:32","","2013-04-19 09:54:58","2010-09-12 22:15:08"
"3696857","What's the difference between Message Digest, Message Authentication Code, and HMAC?","<p>My understanding of a message digest is that it's an encrypted hash of some data sent along with the encrypted data so you may verify that the data has not been tampered with. What is the difference then between this and message authentication codes (MAC) and hash MACs (HMAC)?</p>
","<ul>
<li>A message digest algorithm takes a single input -- a message -- and produces a ""message digest"" (aka hash) which allows you to verify the integrity of the message: Any change to the message will (ideally) result in a different hash being generated. An attacker that can replace the message and digest is fully capable of replacing the message and digest with a new valid pair.</li>
<li>A MAC algorithm takes two inputs -- a message and a secret key -- and produces a MAC which allows you to verify the integrity <em>and</em> the authenticity of the message: Any change to the message <em>or</em> the secret key will (ideally) result in a different MAC being generated. Nobody without access to the secret should be able to generate a MAC calculation that verifies; in other words a MAC can be used to check that the MAC was generated by a party that has access to the secret key.</li>
<li>A HMAC algorithm is simply a specific type of MAC algorithm that uses a hash algorithm internally (rather than, for example, an encryption algorithm) to generate the MAC.</li>
</ul>
","3696947","34899","<security><hmac><message-digest>","57","94","2","2013-04-19 09:54:58","3696947","0","30","443265","","2011-05-27 08:10:12","2010-09-12 22:05:32","","2012-08-11 13:42:15","2010-09-12 22:38:52"
"39355241","Compute HMAC-SHA512 with secret key in java","<p>i want to build excatly a function which produces a HMAC with a secret key like this site provides:</p>

<p><a href=""http://www.freeformatter.com/hmac-generator.html"" rel=""noreferrer"">http://www.freeformatter.com/hmac-generator.html</a></p>

<p>The java 8 lib only provides MessageDigest and KeyGenerator which both only supports up to SH256.</p>

<p>Also google doesnt give me any result to an implementation to generate a HMAC.</p>

<p>Does someone know a implementation?</p>

<p>I have this code to generate an ordinary SH256 but i guess this doesnt help me much:</p>

<pre><code>   public static String get_SHA_512_SecurePassword(String passwordToHash) throws Exception {
    String generatedPassword = null;

    MessageDigest md = MessageDigest.getInstance(""SHA-512"");
    byte[] bytes = md.digest(passwordToHash.getBytes(""UTF-8""));
    StringBuilder sb = new StringBuilder();
    for (int i = 0; i &lt; bytes.length; i++) {
        sb.append(Integer.toString((bytes[i] &amp; 0xff) + 0x100, 16).substring(1));
    }
    generatedPassword = sb.toString();
    System.out.println(generatedPassword);
    return generatedPassword;
}
</code></pre>
","<p>Hope this helps:</p>

<pre><code>import java.io.UnsupportedEncodingException;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;

public class Test1 {
    public static void main(String[] args) {
        Mac sha512_HMAC = null;
        String result = null;
        String key =  ""Welcome1"";

        try{
            byte [] byteKey = key.getBytes(""UTF-8"");
            final String HMAC_SHA512 = ""HmacSHA512"";
            sha512_HMAC = Mac.getInstance(HMAC_SHA512);      
            SecretKeySpec keySpec = new SecretKeySpec(byteKey, HMAC_SHA512);
            sha512_HMAC.init(keySpec);
            byte [] mac_data = sha512_HMAC.
             doFinal(""My message"".getBytes(""UTF-8""));
            //result = Base64.encode(mac_data);
            result = bytesToHex(mac_data);
            System.out.println(result);
        } catch (UnsupportedEncodingException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        } catch (NoSuchAlgorithmException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        } catch (InvalidKeyException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }finally{
            System.out.println(""Done"");
        }
    }

    public static String bytesToHex(byte[] bytes) {
        final  char[] hexArray = ""0123456789ABCDEF"".toCharArray();
        char[] hexChars = new char[bytes.length * 2];
        for ( int j = 0; j &lt; bytes.length; j++ ) {
            int v = bytes[j] &amp; 0xFF;
            hexChars[j * 2] = hexArray[v &gt;&gt;&gt; 4];
            hexChars[j * 2 + 1] = hexArray[v &amp; 0x0F];
        }
        return new String(hexChars);
    }
}
</code></pre>

<p>For converting from byte array to hex refer this stackoverflow answer : <a href=""https://stackoverflow.com/questions/9655181/how-to-convert-a-byte-array-to-a-hex-string-in-java"">here</a></p>
","39356436","30778","<java><hmac>","17","18","2","2019-02-19 12:35:17","39356436","0","6","4945303","","2016-09-06 18:18:20","2016-09-06 18:05:48","","2019-02-19 12:35:17","2016-09-06 19:26:37"
"39355241","Compute HMAC-SHA512 with secret key in java","<p>i want to build excatly a function which produces a HMAC with a secret key like this site provides:</p>

<p><a href=""http://www.freeformatter.com/hmac-generator.html"" rel=""noreferrer"">http://www.freeformatter.com/hmac-generator.html</a></p>

<p>The java 8 lib only provides MessageDigest and KeyGenerator which both only supports up to SH256.</p>

<p>Also google doesnt give me any result to an implementation to generate a HMAC.</p>

<p>Does someone know a implementation?</p>

<p>I have this code to generate an ordinary SH256 but i guess this doesnt help me much:</p>

<pre><code>   public static String get_SHA_512_SecurePassword(String passwordToHash) throws Exception {
    String generatedPassword = null;

    MessageDigest md = MessageDigest.getInstance(""SHA-512"");
    byte[] bytes = md.digest(passwordToHash.getBytes(""UTF-8""));
    StringBuilder sb = new StringBuilder();
    for (int i = 0; i &lt; bytes.length; i++) {
        sb.append(Integer.toString((bytes[i] &amp; 0xff) + 0x100, 16).substring(1));
    }
    generatedPassword = sb.toString();
    System.out.println(generatedPassword);
    return generatedPassword;
}
</code></pre>
","<p>The simplest way can be -</p>

<pre><code>private static final String HMAC_SHA512 = ""HmacSHA512"";

private static String toHexString(byte[] bytes) {
    Formatter formatter = new Formatter();
    for (byte b : bytes) {
        formatter.format(""%02x"", b);
    }
    return formatter.toString();
}

public static String calculateHMAC(String data, String key)
    throws SignatureException, NoSuchAlgorithmException, InvalidKeyException
{
    SecretKeySpec secretKeySpec = new SecretKeySpec(key.getBytes(), HMAC_SHA512);
    Mac mac = Mac.getInstance(HMAC_SHA512);
    mac.init(secretKeySpec);
    return toHexString(mac.doFinal(data.getBytes()));
}

public static void main(String[] args) throws Exception {
    String hmac = calculateHMAC(""data"", ""key"");
    System.out.println(hmac);
}
</code></pre>

<p>You can change the HMAC_SHA512 variable to any of the Mac algorithm and the code will work the same way.</p>
","44110982","30778","<java><hmac>","17","17","2","2019-02-19 12:35:17","39356436","0","6","4945303","","2016-09-06 18:18:20","2016-09-06 18:05:48","","","2017-05-22 10:50:16"
"31848293","Python3 and hmac . How to handle string not being binary","<p>I had a script in Python2 that was working great. </p>

<pre><code>def _generate_signature(data):
   return hmac.new('key', data, hashlib.sha256).hexdigest()
</code></pre>

<p>Where data was the output of <code>json.dumps</code>. </p>

<p>Now, if I try to run the same kind of code in Python 3, I get the following:</p>

<pre><code>Traceback (most recent call last):
  File ""&lt;stdin&gt;"", line 1, in &lt;module&gt;
  File ""/usr/lib/python3.4/hmac.py"", line 144, in new
    return HMAC(key, msg, digestmod)
  File ""/usr/lib/python3.4/hmac.py"", line 42, in __init__
    raise TypeError(""key: expected bytes or bytearray, but got %r"" %type(key).__name__)
TypeError: key: expected bytes or bytearray, but got 'str'
</code></pre>

<p>If I try something like transforming the key to bytes like so:</p>

<pre><code>bytes('key')
</code></pre>

<p>I get</p>

<pre><code>Traceback (most recent call last):
  File ""&lt;stdin&gt;"", line 1, in &lt;module&gt;
TypeError: string argument without an encoding
</code></pre>

<p>I'm still struggling to understand the encodings in Python 3.</p>
","<p>You can use bytes literal: <code>b'key'</code></p>

<pre><code>def _generate_signature(data):
    return hmac.new(b'key', data, hashlib.sha256).hexdigest()
</code></pre>

<p>In addition to that, make sure <code>data</code> is also bytes. For example, if it is read from file, you need to use <code>binary</code> mode (<code>rb</code>) when opening the file.</p>
","31848403","26934","<python><string><python-3.x><encoding><hmac>","37","37","3","2019-09-23 10:07:39","31848403","1","7","1245190","","2017-09-02 14:24:15","2015-08-06 06:28:48","","","2015-08-06 06:35:35"
"31848293","Python3 and hmac . How to handle string not being binary","<p>I had a script in Python2 that was working great. </p>

<pre><code>def _generate_signature(data):
   return hmac.new('key', data, hashlib.sha256).hexdigest()
</code></pre>

<p>Where data was the output of <code>json.dumps</code>. </p>

<p>Now, if I try to run the same kind of code in Python 3, I get the following:</p>

<pre><code>Traceback (most recent call last):
  File ""&lt;stdin&gt;"", line 1, in &lt;module&gt;
  File ""/usr/lib/python3.4/hmac.py"", line 144, in new
    return HMAC(key, msg, digestmod)
  File ""/usr/lib/python3.4/hmac.py"", line 42, in __init__
    raise TypeError(""key: expected bytes or bytearray, but got %r"" %type(key).__name__)
TypeError: key: expected bytes or bytearray, but got 'str'
</code></pre>

<p>If I try something like transforming the key to bytes like so:</p>

<pre><code>bytes('key')
</code></pre>

<p>I get</p>

<pre><code>Traceback (most recent call last):
  File ""&lt;stdin&gt;"", line 1, in &lt;module&gt;
TypeError: string argument without an encoding
</code></pre>

<p>I'm still struggling to understand the encodings in Python 3.</p>
","<p>Not to resurrect an old question but I did want to add something I feel is missing from this answer, to which I had trouble finding an appropriate explanation/example of anywhere else:</p>

<p>OP Aquiles Carattino was pretty close with his attempt at converting the string to bytes, but was missing the second argument, the encoding of the string to be converted to bytes.</p>

<p>If someone would like to convert a string to bytes through some other means than static assignment (such as reading from a config file or a DB), the following should work:</p>

<pre><code>import hmac, hashlib

def _generate_signature(data):
  key = 'key' # Defined as a simple string.
  key_bytes= bytes(key , 'latin-1')
  data_bytes = bytes(data, 'latin-1') # Assumes `data` is also a string.
  return hmac.new(key_bytes, data_bytes , hashlib.sha256).hexdigest()

print(
  _generate_signature('this is my string of data')
)
</code></pre>
","43882903","26934","<python><string><python-3.x><encoding><hmac>","37","26","3","2019-09-23 10:07:39","31848403","1","7","1245190","","2017-09-02 14:24:15","2015-08-06 06:28:48","","","2017-05-10 02:59:43"
"31848293","Python3 and hmac . How to handle string not being binary","<p>I had a script in Python2 that was working great. </p>

<pre><code>def _generate_signature(data):
   return hmac.new('key', data, hashlib.sha256).hexdigest()
</code></pre>

<p>Where data was the output of <code>json.dumps</code>. </p>

<p>Now, if I try to run the same kind of code in Python 3, I get the following:</p>

<pre><code>Traceback (most recent call last):
  File ""&lt;stdin&gt;"", line 1, in &lt;module&gt;
  File ""/usr/lib/python3.4/hmac.py"", line 144, in new
    return HMAC(key, msg, digestmod)
  File ""/usr/lib/python3.4/hmac.py"", line 42, in __init__
    raise TypeError(""key: expected bytes or bytearray, but got %r"" %type(key).__name__)
TypeError: key: expected bytes or bytearray, but got 'str'
</code></pre>

<p>If I try something like transforming the key to bytes like so:</p>

<pre><code>bytes('key')
</code></pre>

<p>I get</p>

<pre><code>Traceback (most recent call last):
  File ""&lt;stdin&gt;"", line 1, in &lt;module&gt;
TypeError: string argument without an encoding
</code></pre>

<p>I'm still struggling to understand the encodings in Python 3.</p>
","<p>try </p>

<blockquote>
  <p>codecs.encode()</p>
</blockquote>

<p>which can be used both in python2.7.12 and 3.5.2</p>

<pre><code>import hashlib
import codecs
import hmac

a = ""aaaaaaa""
b = ""bbbbbbb""
hmac.new(codecs.encode(a), msg=codecs.encode(b), digestmod=hashlib.sha256).hexdigest()
</code></pre>

<p><a href=""https://i.stack.imgur.com/jURPF.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/jURPF.png"" alt=""enter image description here""></a>
<a href=""https://i.stack.imgur.com/nIVFz.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/nIVFz.png"" alt=""enter image description here""></a></p>
","58060052","26934","<python><string><python-3.x><encoding><hmac>","37","1","3","2019-09-23 10:07:39","31848403","1","7","1245190","","2017-09-02 14:24:15","2015-08-06 06:28:48","","","2019-09-23 10:07:39"
"5051529","HMAC vs simple MD5 Hash","<p>Can anyone point out what the advantage of using <code>HMАC</code> is?</p>

<p>For example, if I have a text <code>T</code> and a key <code>K</code>, I can use either <code>HMAC-MD5</code> algorithm or <code>Md5(T + K)</code> to get a signature. </p>
","<p>The <a href=""http://en.wikipedia.org/wiki/HMAC#Design_principles"" rel=""noreferrer"">Wikipedia article on HMAC</a> gives a good explanation of this.</p>

<p>In the <a href=""http://en.wikipedia.org/wiki/HMAC#Security"" rel=""noreferrer"">Security</a> section of the same article it goes on to say:</p>

<blockquote>
  <p>HMACs are substantially less affected by collisions than their underlying hashing algorithms alone.</p>
</blockquote>

<p>So adding an HMAC to an MD5 hash would make it substantially more difficult to break via a rainbow table.</p>
","5051589","25804","<security><md5><hmac>","46","28","3","2015-09-05 16:55:25","5051589","2","10","4132844","","2015-09-05 16:55:25","2011-02-19 15:05:49","","2011-03-06 23:47:33","2011-02-19 15:17:30"
"5051529","HMAC vs simple MD5 Hash","<p>Can anyone point out what the advantage of using <code>HMАC</code> is?</p>

<p>For example, if I have a text <code>T</code> and a key <code>K</code>, I can use either <code>HMAC-MD5</code> algorithm or <code>Md5(T + K)</code> to get a signature. </p>
","<p>I would recommend reading <a href=""http://cseweb.ucsd.edu/~mihir/papers/hmac.html"">the HMAC papers</a> by Bellare, Canetti, and Krawczyk.</p>
","5052538","25804","<security><md5><hmac>","46","5","3","2015-09-05 16:55:25","5051589","2","10","4132844","","2015-09-05 16:55:25","2011-02-19 15:05:49","","","2011-02-19 18:03:38"
"5051529","HMAC vs simple MD5 Hash","<p>Can anyone point out what the advantage of using <code>HMАC</code> is?</p>

<p>For example, if I have a text <code>T</code> and a key <code>K</code>, I can use either <code>HMAC-MD5</code> algorithm or <code>Md5(T + K)</code> to get a signature. </p>
","<p>HMAC is not susceptible to length extension attacks.</p>

<p>md5(T + K) should be fine for most uses unless your adversary is motivated to tamper with your message and has very good computing power. As long as you control T, birthday attacks are not applicable and you only have brute-force attacks. But it is good to be aware of the limitations. If you want to go with this approach you may want use SHA1(T + K) instead of MD5.</p>

<p>md5(T+K) is certainly better than md5(K+T) where an attacker may append text to your message and generate another valid MAC.</p>

<p>With md5(T+K), the issue is that if an attacker can find a collision with T2 such that md5(T) = md5(T2), then md5(T+K) = md5(T2+K). But this requires a brute-force attack.</p>

<p><strong>Note:</strong> I say ""<strong>as long as you control T</strong>"", because if changes can be made to T (in such a way that it is not obvious) one can try to generate 2 messages T1 and T2 where T1 can pass for T and md5(T1) = md5(T2). Now this is relatively lot easier to do (we are talking 2^64 instead of 2^128) and the reason is the so-called Birthday paradox or Birthday attack.</p>

<p><strong>Note:</strong> The design of HMAC was motivated to avoid these kinds of extension attacks. There are no known attacks against HMAC. </p>
","5550544","25804","<security><md5><hmac>","46","38","3","2015-09-05 16:55:25","5051589","2","10","4132844","","2015-09-05 16:55:25","2011-02-19 15:05:49","","2012-08-08 18:23:02","2011-04-05 10:41:50"
"12804231","C# equivalent to hash_hmac in PHP","<p>using .NET and C# i need to provide an integrity string using HMAC SHA512 to a PHP server .
Using in C#  :</p>

<pre><code>Encoding encoding = Encoding.UTF8;
byte[] keyByte = encoding.GetBytes(key);
HMACSHA512 hmacsha512 = new HMACSHA512(keyByte);
byte[] messageBytes = encoding.GetBytes(message);
byte[]  hashmessage = hmacsha512.ComputeHash(messageBytes);
return(ByteToString(hashmessage).toUpper());
</code></pre>

<p>But it doesn't match with PHP hash_hmac()
PHP code :</p>

<pre><code>$hmac = strtoupper(hash_hmac($pbx_hash, $msg, $binKey));
</code></pre>

<p>I try to change encoding in C# (utf8, ASCII,Unicode) Without success.</p>

<p>I've tried many solution found on the net but nothing give the same string :(</p>

<p>I can't change the PHP code,  and doesn't see what's wrong in C#</p>

<p><strong>Edit</strong> This is <code>ByteToString</code> (copied from the comment):</p>

<pre><code>static string ByteToString(byte[] buff)
{
    string sbinary = """";
    for (int i = 0; i &lt; buff.Length; i++)
    {
        sbinary += buff[i].ToString(""X2""); /* hex format */
    }
    return (sbinary);
}    
</code></pre>

<p>After many tets, in found that i get the same results if PHP hash_hmac key is a string, not a byte Array . Seems that the problem is with the PHP convert function $binKey = pack(""H*"", $keyTest); </p>
","<p>The problem must be the actual representation of the key/message data.</p>

<p>See the following tests:</p>

<h2><code>PHP</code></h2>

<pre class=""lang-php prettyprint-override""><code>#!/usr/bin/php
&lt;?php
print strtoupper(hash_hmac(""sha256"", ""message"", ""key""));
?&gt;
</code></pre>

<p>Output (live via <a href=""http://writecodeonline.com/php/"">http://writecodeonline.com/php/</a>):</p>

<pre><code>6E9EF29B75FFFC5B7ABAE527D58FDADB2FE42E7219011976917343065F58ED4A
</code></pre>

<h2><code>C#</code></h2>

<pre class=""lang-cs prettyprint-override""><code>using System;
using System.Text;
using System.Security.Cryptography;

public class Program
{
    private const string key = ""key"";
    private const string message = ""message"";
    private static readonly Encoding encoding = Encoding.UTF8; 

    static void Main(string[] args)
    {
        var keyByte = encoding.GetBytes(key);
        using (var hmacsha256 = new HMACSHA256(keyByte))
        {
            hmacsha256.ComputeHash(encoding.GetBytes(message));

            Console.WriteLine(""Result: {0}"", ByteToString(hmacsha256.Hash));
        }
    }
    static string ByteToString(byte[] buff)
    {
        string sbinary = """";
        for (int i = 0; i &lt; buff.Length; i++)
            sbinary += buff[i].ToString(""X2""); /* hex format */
        return sbinary;
    }    
}
</code></pre>

<p>Output (live via <a href=""http://ideone.com/JdpeL"">http://ideone.com/JdpeL</a>):</p>

<pre><code>Result: 6E9EF29B75FFFC5B7ABAE527D58FDADB2FE42E7219011976917343065F58ED4A
</code></pre>

<p>So, check the character set/encoding of the PHP input data. Also check the actual algorithm (in <code>$pbx_hash</code>).</p>
","12804391","22182","<c#><hmac><sha512>","25","33","3","2017-08-23 00:35:32","","3","9","1732327","","2012-10-09 21:43:50","2012-10-09 16:17:25","","2014-01-29 23:04:44","2012-10-09 16:26:39"
"12804231","C# equivalent to hash_hmac in PHP","<p>using .NET and C# i need to provide an integrity string using HMAC SHA512 to a PHP server .
Using in C#  :</p>

<pre><code>Encoding encoding = Encoding.UTF8;
byte[] keyByte = encoding.GetBytes(key);
HMACSHA512 hmacsha512 = new HMACSHA512(keyByte);
byte[] messageBytes = encoding.GetBytes(message);
byte[]  hashmessage = hmacsha512.ComputeHash(messageBytes);
return(ByteToString(hashmessage).toUpper());
</code></pre>

<p>But it doesn't match with PHP hash_hmac()
PHP code :</p>

<pre><code>$hmac = strtoupper(hash_hmac($pbx_hash, $msg, $binKey));
</code></pre>

<p>I try to change encoding in C# (utf8, ASCII,Unicode) Without success.</p>

<p>I've tried many solution found on the net but nothing give the same string :(</p>

<p>I can't change the PHP code,  and doesn't see what's wrong in C#</p>

<p><strong>Edit</strong> This is <code>ByteToString</code> (copied from the comment):</p>

<pre><code>static string ByteToString(byte[] buff)
{
    string sbinary = """";
    for (int i = 0; i &lt; buff.Length; i++)
    {
        sbinary += buff[i].ToString(""X2""); /* hex format */
    }
    return (sbinary);
}    
</code></pre>

<p>After many tets, in found that i get the same results if PHP hash_hmac key is a string, not a byte Array . Seems that the problem is with the PHP convert function $binKey = pack(""H*"", $keyTest); </p>
","<p>As said upper, the problem was with PHP Pack(H* function used to convert key to byte array.
C# Getbytes doesn't give the same result (utf8, asci, unicode...).
The solution found here : <a href=""http://www.nuronconsulting.com/c-pack-h.aspx"" rel=""nofollow"">http://www.nuronconsulting.com/c-pack-h.aspx</a> was ok for me.
now HMAC from C# match with PHP !</p>

<pre><code>public static byte[] PackH(string hex)
{
       if ((hex.Length % 2) == 1) hex += '0';
       byte[] bytes = new byte[hex.Length / 2];
       for (int i = 0; i &lt; hex.Length; i += 2)
       {
             bytes[i / 2] = Convert.ToByte(hex.Substring(i, 2), 16);
       }
 return bytes;
}
</code></pre>

<p>Manu thanks to all for your help.</p>
","12818807","22182","<c#><hmac><sha512>","25","3","3","2017-08-23 00:35:32","","3","9","1732327","","2012-10-09 21:43:50","2012-10-09 16:17:25","","","2012-10-10 12:00:42"
"12804231","C# equivalent to hash_hmac in PHP","<p>using .NET and C# i need to provide an integrity string using HMAC SHA512 to a PHP server .
Using in C#  :</p>

<pre><code>Encoding encoding = Encoding.UTF8;
byte[] keyByte = encoding.GetBytes(key);
HMACSHA512 hmacsha512 = new HMACSHA512(keyByte);
byte[] messageBytes = encoding.GetBytes(message);
byte[]  hashmessage = hmacsha512.ComputeHash(messageBytes);
return(ByteToString(hashmessage).toUpper());
</code></pre>

<p>But it doesn't match with PHP hash_hmac()
PHP code :</p>

<pre><code>$hmac = strtoupper(hash_hmac($pbx_hash, $msg, $binKey));
</code></pre>

<p>I try to change encoding in C# (utf8, ASCII,Unicode) Without success.</p>

<p>I've tried many solution found on the net but nothing give the same string :(</p>

<p>I can't change the PHP code,  and doesn't see what's wrong in C#</p>

<p><strong>Edit</strong> This is <code>ByteToString</code> (copied from the comment):</p>

<pre><code>static string ByteToString(byte[] buff)
{
    string sbinary = """";
    for (int i = 0; i &lt; buff.Length; i++)
    {
        sbinary += buff[i].ToString(""X2""); /* hex format */
    }
    return (sbinary);
}    
</code></pre>

<p>After many tets, in found that i get the same results if PHP hash_hmac key is a string, not a byte Array . Seems that the problem is with the PHP convert function $binKey = pack(""H*"", $keyTest); </p>
","<pre><code>    private static string HashHmac(string message, string secret)
    {
        Encoding encoding = Encoding.UTF8;
        using (HMACSHA512 hmac = new HMACSHA512(encoding.GetBytes(secret)))
        {
            var msg = encoding.GetBytes(message);
            var hash = hmac.ComputeHash(msg);
            return BitConverter.ToString(hash).ToLower().Replace(""-"", string.Empty);
        }
    }
</code></pre>
","45828880","22182","<c#><hmac><sha512>","25","14","3","2017-08-23 00:35:32","","3","9","1732327","","2012-10-09 21:43:50","2012-10-09 16:17:25","","","2017-08-23 00:35:32"
"11415055","How to use HMAC SHA256?","<p>As per the various docs that I have read for using HMAC SHA256, I have understood that:</p>

<p>H (K XOR opad, H (K XOR ipad, text)) where H in my case is SHA256.</p>

<p>But, SHA256 input has only one parameter i.e a Message.
Whereas H(K,text) has two inputs.
So how to calculate H(k,text)?</p>

<p>Should I first encode text with k and then use H(encoded_text), where encoded_text will be used as a message?</p>

<p>Thank You</p>
","<ul>
<li>H() is your cryptographic hash function, in this case SHA256() but
could also be MD5 or whatever; </li>
<li>K is your predifined key</li>
<li>Text is the message to be authenticated</li>
<li>opad be the outer padding (0x5c5c5c…5c5c, one-block-long hexadecimal
constant)</li>
<li>ipad be the inner padding  (0x363636…3636, one-block-long hexadecimal
constant)</li>
<li>Then HMAC(K,m)  is mathematically defined by </li>
</ul>

<p>HMAC(K,m) = H((K ⊕ opad)    ∥ H((K ⊕ ipad)    ∥ m)).</p>

<ul>
<li>blocksized is determined by your hash function (MD5 would be 64
bytes)</li>
<li>o_key_pad = [opad * blocksize] ⊕ key</li>
<li>i_key_pad = [ipad * blocksize] ⊕ key</li>
</ul>

<p>Your result would be:</p>

<pre><code>H(o_key_pad || H(i_key_pad || TEXT))
</code></pre>

<p>You can find a good read here:
<a href=""http://timdinh.nl/index.php/hmac/"" rel=""nofollow noreferrer"">http://timdinh.nl/index.php/hmac/</a></p>

<p>With also the following pseudocode which almost looks like mine :</p>

<pre><code>function hmac (key, message)
    opad = [0x5c * blocksize] // Where blocksize is that of the underlying hash function
    ipad = [0x36 * blocksize]

    if (length(key) &gt; blocksize) then
        key = hash(key) // Where 'hash' is the underlying hash function
    end if

    for i from 0 to length(key) - 1 step 1
        ipad[i] = ipad[i] XOR key[i]
        opad[i] = opad[i] XOR key[i]
    end for

    return hash(opad || hash(ipad || message)) // Where || is concatenation
end function
</code></pre>
","11415686","21827","<sha256><hmac>","9","14","1","2016-11-03 15:27:46","11415686","2","4","","","","2012-07-10 14:03:50","","2016-11-03 15:27:46","2012-07-10 14:35:30"
"8363315","How to implement HMAC Authentication in a RESTful WCF API","<p>We are building a RESTful API using WCF (currently .Net 3.5, but will be moving to .Net 4 soon).  We have a functional framework in place, but it is currently unsecured.  It will need to be accessible from .Net applications as well as iOS, Android, and web applications.</p>

<p>We would like to use an HMAC Authentication scheme as described <a href=""http://msdn.microsoft.com/en-us/library/dd203052.aspx"">here</a> and <a href=""http://blogs.microsoft.co.il/blogs/itai/archive/2009/02/22/how-to-implement-hmac-authentication-on-a-restful-wcf-service.aspx"">here</a>, but both examples seem to fall apart when describing how to validate the hash.  The first example fails to describe the <strong>UserKeys</strong> object (hashtable?) and the second example is missing the <strong>GetUserKey</strong> methods on the client- and server-side.</p>

<p>Can anyone provide an explanation of how the ""User Key""/token is generated/stored/retrieved/used in those examples or provide a better example (with source code, if possible) of how to use HMAC Authorization in a RESTful WCF service?</p>

<p><strong>Edit:</strong>
After more research, we determined that we needed more of an ""<a href=""http://en.wikipedia.org/wiki/Authorization"">Authorization</a>"" technique rather than an ""<a href=""http://en.wikipedia.org/wiki/Authentication"">Authentication</a>"" technique (semantics?).  We implemented Basic <em>Authorization</em> and secured the API behind SSL.  The Basic <em>Authorization</em> uses the same ""Authorization"" header from the web Request as the HMAC <em>Authentication</em> scheme, but passes a username:password string encoded in Base64 instead of a token.  This allowed us to custom-validate a user against our database to determine if the user is licensed for and has appropriate security rights to access the desired API method.</p>

<p>We're certainly open to hearing other options on how to accomplish custom username/password validation and other methods for securing the API.</p>
","<p>Retrieving the user key is just an implementation detail you can do any way you like but on the server it is often stored in a database along with the user name.</p>

<p>The basic approach is real simple.</p>

<ol>
<li>Somehow the server and the client exchange a shared key for the user to use. This can be done any way you like, including sending an old fashioned dead tree style letter. Quite often this is just the password the user entered. </li>
<li>When the client wants to send a request he builds the complete request and then using the secret key computes a hash over the complete message body (and optionally some of the message headers if required)</li>
<li>Next the client add the computed hash and his username to the message in one of the headers and sends it to the service.</li>
<li>The service retrieves the username from the message header and searches the private keu for that user in its own database.</li>
<li>Next he computes the hash over the message body (and selected headers) using the key to generate its hash.</li>
<li>If the hash the client sends matches the hash the server computes the server knows the message was send by the real client and was not altered in any way.</li>
</ol>

<p>Really the only tricky part is sharing a secret key with the user and keeping that secure. That is why some services allow for generation of shared keys with a limited life time so you can give the key to a third party to temporarily work on your behalf.</p>
","8366526","20361","<c#><wcf><authentication><hmac>","11","16","2","2016-07-19 04:33:28","8366526","1","11","13663","","2011-12-07 21:43:19","2011-12-02 22:09:23","","","2011-12-03 08:32:14"
"8363315","How to implement HMAC Authentication in a RESTful WCF API","<p>We are building a RESTful API using WCF (currently .Net 3.5, but will be moving to .Net 4 soon).  We have a functional framework in place, but it is currently unsecured.  It will need to be accessible from .Net applications as well as iOS, Android, and web applications.</p>

<p>We would like to use an HMAC Authentication scheme as described <a href=""http://msdn.microsoft.com/en-us/library/dd203052.aspx"">here</a> and <a href=""http://blogs.microsoft.co.il/blogs/itai/archive/2009/02/22/how-to-implement-hmac-authentication-on-a-restful-wcf-service.aspx"">here</a>, but both examples seem to fall apart when describing how to validate the hash.  The first example fails to describe the <strong>UserKeys</strong> object (hashtable?) and the second example is missing the <strong>GetUserKey</strong> methods on the client- and server-side.</p>

<p>Can anyone provide an explanation of how the ""User Key""/token is generated/stored/retrieved/used in those examples or provide a better example (with source code, if possible) of how to use HMAC Authorization in a RESTful WCF service?</p>

<p><strong>Edit:</strong>
After more research, we determined that we needed more of an ""<a href=""http://en.wikipedia.org/wiki/Authorization"">Authorization</a>"" technique rather than an ""<a href=""http://en.wikipedia.org/wiki/Authentication"">Authentication</a>"" technique (semantics?).  We implemented Basic <em>Authorization</em> and secured the API behind SSL.  The Basic <em>Authorization</em> uses the same ""Authorization"" header from the web Request as the HMAC <em>Authentication</em> scheme, but passes a username:password string encoded in Base64 instead of a token.  This allowed us to custom-validate a user against our database to determine if the user is licensed for and has appropriate security rights to access the desired API method.</p>

<p>We're certainly open to hearing other options on how to accomplish custom username/password validation and other methods for securing the API.</p>
","<p>Implementation for HMAC we can find at</p>

<p><a href=""https://github.com/cuongle/WebAPI.Hmac"" rel=""nofollow"">https://github.com/cuongle/WebAPI.Hmac</a></p>
","11905780","20361","<c#><wcf><authentication><hmac>","11","3","2","2016-07-19 04:33:28","8366526","1","11","13663","","2011-12-07 21:43:19","2011-12-02 22:09:23","","","2012-08-10 16:34:07"
"4522581","How to get PHP to create HMAC-SHA1 strings like Objective-C?","<p>I am trying to implement an authentication solution with PHP and Objective-C. Both languages create their own HMAC-SHA1 encoded strings with the same key and the same secret.</p>

<p>Apparently they seem to differ in their way how they do it.</p>

<p>On Objective-C side I am using OAuthCustomer as signing class which produces the correct looking encoded string:</p>

<pre><code>/3n/d4sKN6k3I7nBm1qau59UukU=
</code></pre>

<p>On PHP side I am using the built-in function hash_hmac('sha1',...) with base64 encoding which produces this:</p>

<pre><code>ZmY3OWZmNzc4YjBhMzdhOTM3MjNiOWMxOWI1YTlhYmI5ZjU0YmE0NQ==
</code></pre>

<p>Then I have tried to use another function (mentioned <a href=""http://www.php.net/manual/en/function.sha1.php#39492"" rel=""noreferrer"">here</a>) and this produces with base64 encoding this:</p>

<pre><code>NWY1ODUwOWE3NGI4NWU5ZTIxMDYzMTNmNzk3NTYxMDQ4OWE1MmUzNQ==
</code></pre>

<p>I have absolutely no idea how I can fix this issue and I don't even know why this happens.</p>

<p>Thanks a bunch for help,</p>

<p>Paul</p>
","<p>Okay, I'll add a faux answer. (On Stackoverflow every question should be decorated by an answer.)</p>

<p>The hash functions in PHP mostly return hex-strings, not the real data. (For whatever reason). There is usually a function parameter to make it compatible to what other implementations expect:</p>

<pre><code> hash_hmac(""sha1"", $data, $key, $raw_output=TRUE);

 md5($str, $raw_output=TRUE);

 hash(""sha1"", $data, $raw_output=TRUE);
</code></pre>
","4530466","17979","<php><objective-c><sha1><hmac>","8","23","1","2011-01-28 11:38:56","4530466","6","2","503783","","2010-12-26 14:05:46","2010-12-23 21:23:17","","","2010-12-25 14:03:38"
"8458917","Need to generate HMAC SHA256 hash in Objective C as in Java","<p>I need to generate a hash using HMAC SHA256. I am using the following code in Java. I need an equivalent code in Objective-C.</p>

<pre><code>javax.crypto.Mac mac = javax.crypto.Mac.getInstance(type);
javax.crypto.spec.SecretKeySpec secret = new javax.crypto.spec.SecretKeySpec(key.getBytes(), type);
mac.init(secret);
byte[] digest = mac.doFinal(value.getBytes());      
StringBuilder sb = new StringBuilder(digest.length * 2);
String s="""";
for (byte b: digest) {
    s = Integer.toHexString(b);
    if (s.length() == 1) {
        sb.append('0');
    }
    sb.append(s);
}
return sb.toString();
</code></pre>

<p>Key = <code>YARJSuwP5Oo6/r47LczzWjUx/T8ioAJpUK2YfdI/ZshlTUP8q4ujEVjC0seEUAAtS6YEE1Veghz+IDbNQb+2KQ==</code></p>

<p>Value =</p>

<p><code>id=456|time=19:10|nonce=8</code></p>

<p>Output = </p>

<pre><code>4effffffd8ffffffce7cffffffc4ffffffc71b2f72ffffffdc21ffffffa1ffffffe0ffffffe62d32550b0771296bffffff9c1159ffffffdeffffff8675ffffff9928654c
</code></pre>

<p>I have this Objective-C function:</p>

<pre><code>  //Hash method Definition
    - (NSString *)getHashEncription:(NSString *)key andData:(NSString *)data{

        NSLog(@""Secret Key %@ And Data %@"", key, data);

        const char *cKey  = [key cStringUsingEncoding:NSASCIIStringEncoding];
        const char *cData = [data cStringUsingEncoding:NSASCIIStringEncoding];



        unsigned char cHMAC[CC_SHA256_DIGEST_LENGTH];

        //HmacSHA256

        CCHmac(kCCHmacAlgSHA256, cKey, strlen(cKey), cData, strlen(cData), cHMAC);

        NSData *HMAC = [[NSData alloc] initWithBytes:cHMAC
                                              length:sizeof(cHMAC)];

        [Base64 initialize];
        NSString *b64EncStr = [Base64 encode:HMAC];     
        NSLog(@""Base 64 encoded = %@"",b64EncStr);   
        NSLog(@""NSData Value %@"", HMAC);      

    //    unsigned char hashedChars[32];
    //    NSString *inputString;
    //    inputString = [NSString stringWithFormat:@""hello""];
    //    NSData * inputData = [inputString dataUsingEncoding:NSUTF8StringEncoding];
    //    CC_SHA256(inputData.bytes, inputData.length, hashedChars);


        return [[NSString alloc] initWithData:HMAC encoding:NSASCIIStringEncoding];

    }//End of getHashEncription
</code></pre>

<p>The output that I am getting is this:</p>

<pre><code>8736bc4aa7fc3aa071f2b4262b6972a89d2861559a20afa765e46ff17cb181a9
</code></pre>

<p>I tried removing the base64 encoding, but it didn't work.</p>

<p>Any suggestions are most welcome.</p>
","<p>You need to fix your Java hmac printer, because <code>4effffffd8ffffffce7cffffffc4ffffffc71b2f72ffffffdc21ffffffa1ffffffe0ffffffe62d32550b0771296bffffff9c1159ffffffdeffffff8675ffffff9928654c</code> isn't valid.  All those <code>ffffff</code> in there are a giveaway that you are sign-extending the bytes to 32-bit signed integers before converting them to hex.  Presumably the correct hmac is <code>4ed8ce7cc4c71b2f72dc21a1e0e62d32550b0771296b9c1159de86759928654c</code>.</p>

<p>Anyway, I suspect you are calling your method incorrectly.  I copied your code into a test program which gives me this output for your key and data:</p>

<pre><code>2011-12-10 13:03:38.231 hmactest[8251:707] test hmac = &lt;4ed8ce7c c4c71b2f 72dc21a1 e0e62d32 550b0771 296b9c11 59de8675 9928654c&gt;
</code></pre>

<p>That matches your desired output (except for the sign-extension errors).</p>

<p>Here's my test program:</p>

<pre><code>#import &lt;Foundation/Foundation.h&gt;
#import &lt;CommonCrypto/CommonHMAC.h&gt;

NSData *hmacForKeyAndData(NSString *key, NSString *data)
{
    const char *cKey  = [key cStringUsingEncoding:NSASCIIStringEncoding];
    const char *cData = [data cStringUsingEncoding:NSASCIIStringEncoding];
    unsigned char cHMAC[CC_SHA256_DIGEST_LENGTH];
    CCHmac(kCCHmacAlgSHA256, cKey, strlen(cKey), cData, strlen(cData), cHMAC);
    return [[NSData alloc] initWithBytes:cHMAC length:sizeof(cHMAC)];
}

int main (int argc, const char * argv[])
{
    @autoreleasepool {
        // Compare to http://en.wikipedia.org/wiki/HMAC#Examples_of_HMAC_.28MD5.2C_SHA1.2C_SHA256_.29
        NSLog(@""empty hmac = %@"", hmacForKeyAndData(@"""", @""""));
        NSLog(@""test hmac = %@"", hmacForKeyAndData(@""YARJSuwP5Oo6/r47LczzWjUx/T8ioAJpUK2YfdI/ZshlTUP8q4ujEVjC0seEUAAtS6YEE1Veghz+IDbNQb+2KQ=="", @""id=456|time=19:10|nonce=8""));
    }
    return 0;
}
</code></pre>
","8459123","17459","<java><objective-c><hash><hmac>","13","33","2","2016-06-14 18:05:28","8459123","3","12","2227834","","2015-06-26 13:22:35","2011-12-10 18:39:57","","","2011-12-10 19:13:27"
"8458917","Need to generate HMAC SHA256 hash in Objective C as in Java","<p>I need to generate a hash using HMAC SHA256. I am using the following code in Java. I need an equivalent code in Objective-C.</p>

<pre><code>javax.crypto.Mac mac = javax.crypto.Mac.getInstance(type);
javax.crypto.spec.SecretKeySpec secret = new javax.crypto.spec.SecretKeySpec(key.getBytes(), type);
mac.init(secret);
byte[] digest = mac.doFinal(value.getBytes());      
StringBuilder sb = new StringBuilder(digest.length * 2);
String s="""";
for (byte b: digest) {
    s = Integer.toHexString(b);
    if (s.length() == 1) {
        sb.append('0');
    }
    sb.append(s);
}
return sb.toString();
</code></pre>

<p>Key = <code>YARJSuwP5Oo6/r47LczzWjUx/T8ioAJpUK2YfdI/ZshlTUP8q4ujEVjC0seEUAAtS6YEE1Veghz+IDbNQb+2KQ==</code></p>

<p>Value =</p>

<p><code>id=456|time=19:10|nonce=8</code></p>

<p>Output = </p>

<pre><code>4effffffd8ffffffce7cffffffc4ffffffc71b2f72ffffffdc21ffffffa1ffffffe0ffffffe62d32550b0771296bffffff9c1159ffffffdeffffff8675ffffff9928654c
</code></pre>

<p>I have this Objective-C function:</p>

<pre><code>  //Hash method Definition
    - (NSString *)getHashEncription:(NSString *)key andData:(NSString *)data{

        NSLog(@""Secret Key %@ And Data %@"", key, data);

        const char *cKey  = [key cStringUsingEncoding:NSASCIIStringEncoding];
        const char *cData = [data cStringUsingEncoding:NSASCIIStringEncoding];



        unsigned char cHMAC[CC_SHA256_DIGEST_LENGTH];

        //HmacSHA256

        CCHmac(kCCHmacAlgSHA256, cKey, strlen(cKey), cData, strlen(cData), cHMAC);

        NSData *HMAC = [[NSData alloc] initWithBytes:cHMAC
                                              length:sizeof(cHMAC)];

        [Base64 initialize];
        NSString *b64EncStr = [Base64 encode:HMAC];     
        NSLog(@""Base 64 encoded = %@"",b64EncStr);   
        NSLog(@""NSData Value %@"", HMAC);      

    //    unsigned char hashedChars[32];
    //    NSString *inputString;
    //    inputString = [NSString stringWithFormat:@""hello""];
    //    NSData * inputData = [inputString dataUsingEncoding:NSUTF8StringEncoding];
    //    CC_SHA256(inputData.bytes, inputData.length, hashedChars);


        return [[NSString alloc] initWithData:HMAC encoding:NSASCIIStringEncoding];

    }//End of getHashEncription
</code></pre>

<p>The output that I am getting is this:</p>

<pre><code>8736bc4aa7fc3aa071f2b4262b6972a89d2861559a20afa765e46ff17cb181a9
</code></pre>

<p>I tried removing the base64 encoding, but it didn't work.</p>

<p>Any suggestions are most welcome.</p>
","<p>Line </p>

<pre><code>CCHmac(kCCHmacAlgSHA256, cKey, strlen(cKey), cData, strlen(cData), cHMAC);
</code></pre>

<p>has a bug</p>

<p>If in your key would be 0x00 byte <code>strlen(cKey)</code> would give wrong length and hmac generation process will produce some rubbish.</p>

<p>In my implementation I have changed that to:</p>

<pre><code>CCHmac(kCCHmacAlgSHA256, cKey, [key length], cData, [data length], cHMAC);
</code></pre>
","37818505","17459","<java><objective-c><hash><hmac>","13","2","2","2016-06-14 18:05:28","8459123","3","12","2227834","","2015-06-26 13:22:35","2011-12-10 18:39:57","","2016-06-14 18:05:28","2016-06-14 17:27:35"
"34826388","How to resolve this: invalid conversion from 'const char*' to 'const uint8_t*","<p>I installed this SHA library: <a href=""https://github.com/Cathedrow/Cryptosuite"" rel=""nofollow"">https://github.com/Cathedrow/Cryptosuite</a>. I want to implement HMAC256 using Arduino IDE 1.6.7 installed on Win. 10 and the controller is ATMEGA328. </p>

<p>I copied the example given in their webpage. I am still new and want to test and try. I wrote this code in Arduino IDE. </p>

<pre><code>#include ""sha256.h""

void setup() {
    // put your setup code here, to run once:
    uint8_t *hash;
    //static const char hash[450]={};
    //const char *hash; hash={};
    Sha256.initHmac(""hash key"",8); // key, and length of key in bytes
    Sha256.print(""This is a message to hash"");
    hash = Sha256.resultHmac();
    //Serial.print(hash,HEX);
}

void loop() {
    // put your main code here, to run repeatedly:
}
</code></pre>

<p>I got this error:</p>

<blockquote>
  <p>invalid conversion from 'const char*' to 'const uint8_t* {aka const
  unsigned char*}' [-fpermissive]</p>
</blockquote>

<p>I do not know why this happens. The example is primitive taken as is from the library site. Can you help?</p>

<p><strong>EDIT:</strong>
I tried to change the line from:</p>

<pre><code>Sha256.initHmac((const uint8_t*)""hash key"",8);
</code></pre>

<p>to:</p>

<pre><code>Sha256.initHmac((const uint8_t*)""hash key"",8);
</code></pre>

<p>But again, the compilation fails. It says:</p>

<blockquote>
  <p>Arduino: 1.6.7 (Windows 10), Board: ""Arduino/Genuino Uno""</p>
  
  <p>In file included from C:\Program Files
  (x86)\Arduino\hardware\arduino\avr\cores\arduino/arduino.h:28:0,</p>

<pre><code>             from C:\Users\e\Documents\Arduino\libraries\Sha\sha1_config.h:13,

             from C:\Users\e\Documents\Arduino\libraries\Sha\sha1.h:4,

             from C:\Users\e\Documents\Arduino\libraries\Sha\sha1.cpp:1:
</code></pre>
  
  <p>C:\Users\e\Documents\Arduino\libraries\Sha\sha1.cpp:8:25: error:
  variable 'sha1InitState' must be const in order to be put into
  read-only section by means of '<strong>attribute</strong>((progmem))'</p>
  
  <p>uint8_t sha1InitState[] PROGMEM = {</p>

<pre><code>                     ^
</code></pre>
  
  <p>exit status 1 Error compiling.</p>
  
  <p>This report would have more information with   ""Show verbose output
  during compilation""   enabled in File > Preferences.</p>
</blockquote>
","<p>The <code>initHmac</code> function signature is: </p>

<pre><code>void initHmac(const uint8_t* secret, int secretLength);
</code></pre>

<p>But you use <code>const char*</code> for secret. </p>

<p><strong>Solution</strong></p>

<p>Try to cast the secret variable to <code>const uint8_t*</code> (or <code>const unsigned char*</code>):</p>

<pre><code>Sha256.initHmac((const uint8_t*)""hash key"",8);
</code></pre>

<p><strong>UPDATE</strong></p>

<p>To solve your new compilation error, just add <code>const</code> in front of all declarations containing <code>PROGMEM</code> in the library sources. For insance:</p>

<p>In <em>Sha/sha1.cpp (line 11)</em></p>

<pre><code>const uint8_t sha1InitState[] PROGMEM = {
</code></pre>

<p>In <em>Sha/sha256.cpp (line 6)</em></p>

<pre><code>const uint32_t sha256K[] PROGMEM = {
</code></pre>

<p>In <em>Sha/sha256.cpp (line 11)</em>:</p>

<pre><code>const uint8_t sha256InitState[] PROGMEM = {
</code></pre>
","34826550","16884","<c++><arduino><sha><hmac><arduino-ide>","3","5","1","2016-01-16 16:25:59","34826550","0","1","2192774","","2016-01-16 13:01:14","2016-01-16 11:26:26","","2016-01-16 16:25:59","2016-01-16 11:43:54"
"9660079","Why base64 a sha1/sha256 hash?","<p>can anybody tell me why amazon want a base64 of the hmac-sha1/sha256 hash?</p>

<p><a href=""http://docs.amazonwebservices.com/AmazonSimpleDB/latest/DeveloperGuide/HMACAuth.html"">http://docs.amazonwebservices.com/AmazonSimpleDB/latest/DeveloperGuide/HMACAuth.html</a></p>

<p>I know that base64 is to represent binary date in ascii but sha1/sha256 is already ascii – I mean its only hex.</p>

<p>Thanks</p>

<p>Timo</p>
","<p>Those hashes are not ASCII–the reason you see hex digits is because the software you use to generate them takes the binary output of the digest and turns it into an ASCII string of hex digits.</p>

<p>For instance, the MD5 digest will fill an array of 16 bytes. You can also represent it as a string of 32 characters, but the most basic form of the digest is still the array of bytes.</p>

<p>When you change an array of bytes into a hex string, you need 8 bits (one full character) to represent every 4 bits of data. Although it's not frequently called that way, you could say that this uses ""base16"" encoding, since you're grabbing 4 bits at a time and mapping them to a 16-character alphabet.</p>

<p>Base64, on the other hand, grabs 6 bits at a time and maps them to a 64-character alphabet. This means that you need 8 bits (again, one full character) to represent every 6 bits of data, which has half the wasted bits of base16. A base16-encoded string will always be twice as big as the original; a base64-encoded string will only be four thirds as big. For a SHA256 hash, base16 does 64 bytes, but base64 does approximately 43.</p>
","9660100","15338","<amazon-web-services><base64><sha1><sha256><hmac>","8","18","2","2016-09-16 17:20:53","9660100","0","2","","","","2012-03-11 23:45:30","","2016-09-16 17:20:53","2012-03-11 23:48:40"
"9660079","Why base64 a sha1/sha256 hash?","<p>can anybody tell me why amazon want a base64 of the hmac-sha1/sha256 hash?</p>

<p><a href=""http://docs.amazonwebservices.com/AmazonSimpleDB/latest/DeveloperGuide/HMACAuth.html"">http://docs.amazonwebservices.com/AmazonSimpleDB/latest/DeveloperGuide/HMACAuth.html</a></p>

<p>I know that base64 is to represent binary date in ascii but sha1/sha256 is already ascii – I mean its only hex.</p>

<p>Thanks</p>

<p>Timo</p>
","<p>For example, the bytes, hex, and base64 samples below encode the same bytes:</p>

<ul>
<li>bytes: <code>243 48 133 140 73 157 28 136 11 29 189 101 194 101 116 64 172 227 220 78</code></li>
<li>hex: <code>f330858c499d1c880b1dbd65c2657440ace3dc4e</code></li>
<li>base64: <code>8zCFjEmdHIgLHb1lwmV0QKzj3E4=</code>.</li>
</ul>

<p>It's only that AWS requires its values to be base64 encoded.</p>
","9660182","15338","<amazon-web-services><base64><sha1><sha256><hmac>","8","5","2","2016-09-16 17:20:53","9660100","0","2","","","","2012-03-11 23:45:30","","","2012-03-12 00:01:44"
"34957002","HMAC-SHA-256 in PHP","<p>I have to build an autorisation hash from this string:</p>

<pre><code>kki98hkl-u5d0-w96i-62dp-xpmr6xlvfnjz:20151110171858:b2c13532-3416-47d9-8592-a541c208f755:hKSeRD98BHngrNa51Q2IgAXtoZ8oYebgY4vQHEYjlmzN9KSbAVTRvQkUPsjOGu4F
</code></pre>

<p>This secret is used for a HMAC hash function:</p>

<pre><code>LRH9CAkNs-zoU3hxHbrtY0CUUcmqzibPeN7x6-vwNWQ=
</code></pre>

<p>The autorisation hash I have to generate is this:</p>

<pre><code>P-WgZ8CqV51aI-3TncZj5CpSZh98PjZTYxrvxkmQYmI=
</code></pre>

<p>There are some things to take care of:</p>

<ol>
<li>The signature have to be built with HMAC-SHA-256 as specified in <a href=""https://tools.ietf.org/html/rfc2104"" rel=""noreferrer"">RFC 2104</a>.</li>
<li>The signature have to be encoded with Base64 URL-compatible as specified in <a href=""https://tools.ietf.org/html/rfc4648"" rel=""noreferrer"">RFC 4648 Section 5</a> (Safe alphabet).</li>
</ol>

<p>There is also some pseudo-code given for the generation:</p>

<pre><code>Signatur(Request) = new String(encodeBase64URLCompatible(HMAC-SHA-256(getBytes(Z, ""UTF-8""), decodeBase64URLCompatible(getBytes(S, ""UTF-8"")))), ""UTF-8"")
</code></pre>

<p>I tried various things in PHP but have not found the correct algorithm yet. This is the code I have now:</p>

<pre><code>if(!function_exists('base64url_encode')){
    function base64url_encode($data) {
        $data = str_replace(array('+', '/'), array('-', '_'), base64_encode($data));
        return $data;
    }
}

$str = ""kki98hkl-u5d0-w96i-62dp-xpmr6xlvfnjz:20151110171858:b2c13532-3416-47d9-8592-a541c208f755:hKSeRD98BHngrNa51Q2IgAXtoZ8oYebgY4vQHEYjlmzN9KSbAVTRvQkUPsjOGu4F"";
$sec = ""LRH9CAkNs-zoU3hxHbrtY0CUUcmqzibPeN7x6-vwNWQ="";
$signature = mhash(MHASH_SHA256, $str, $sec);
$signature = base64url_encode($signature);

if($signature != ""P-WgZ8CqV51aI-3TncZj5CpSZh98PjZTYxrvxkmQYmI="")
    echo ""wrong: $signature"";
else
    echo ""correct"";
</code></pre>

<p>It gives this signature:</p>

<pre><code>K9lw3V-k5gOedmVwmO5vC7cOn82JSEXsNguozCAOU2c=
</code></pre>

<p>As you can see, the length of 44 characters is correct. Please help me with finding the mistake, this simple problem takes me hours yet and there is no solution.</p>
","<p>There's a couple of things to notice:</p>

<ol>
<li>Your key is base64-encoded. You have to decode it before you could use it with php functions. That's the most important thing you have missed.</li>
<li>Mhash is obsoleted by <a href=""http://php.net/hash"" rel=""noreferrer"">Hash</a> extension.</li>
<li>You want output to be encoded in a custom fashion, so it follows that you need raw output from hmac function (php, by default, will hex-encode it).</li>
</ol>

<p>So, using hash extension this becomes:</p>

<pre><code>$key = ""LRH9CAkNs-zoU3hxHbrtY0CUUcmqzibPeN7x6-vwNWQ="";
$str = ""kki98hkl-u5d0-w96i-62dp-xpmr6xlvfnjz:20151110171858:b2c13532-3416-47d9-8592-a541c208f755:hKSeRD98BHngrNa51Q2IgAXtoZ8oYebgY4vQHEYjlmzN9KSbAVTRvQkUPsjOGu4F"";

function encode($data) {
    return str_replace(['+', '/'], ['-', '_'], base64_encode($data));
}

function decode($data) {
    return base64_decode(str_replace(['-', '_'], ['+', '/'], $data));
}

$binaryKey = decode($key);

var_dump(encode(hash_hmac(""sha256"", $str, $binaryKey, true)));
</code></pre>

<p>Outputs:</p>

<pre><code>string(44) ""P-WgZ8CqV51aI-3TncZj5CpSZh98PjZTYxrvxkmQYmI=""
</code></pre>
","34957413","15085","<php><hmac>","5","8","2","2017-12-06 14:44:21","34957413","3","2","","","","2016-01-22 22:27:39","","2017-06-13 00:06:42","2016-01-22 23:05:12"
"34957002","HMAC-SHA-256 in PHP","<p>I have to build an autorisation hash from this string:</p>

<pre><code>kki98hkl-u5d0-w96i-62dp-xpmr6xlvfnjz:20151110171858:b2c13532-3416-47d9-8592-a541c208f755:hKSeRD98BHngrNa51Q2IgAXtoZ8oYebgY4vQHEYjlmzN9KSbAVTRvQkUPsjOGu4F
</code></pre>

<p>This secret is used for a HMAC hash function:</p>

<pre><code>LRH9CAkNs-zoU3hxHbrtY0CUUcmqzibPeN7x6-vwNWQ=
</code></pre>

<p>The autorisation hash I have to generate is this:</p>

<pre><code>P-WgZ8CqV51aI-3TncZj5CpSZh98PjZTYxrvxkmQYmI=
</code></pre>

<p>There are some things to take care of:</p>

<ol>
<li>The signature have to be built with HMAC-SHA-256 as specified in <a href=""https://tools.ietf.org/html/rfc2104"" rel=""noreferrer"">RFC 2104</a>.</li>
<li>The signature have to be encoded with Base64 URL-compatible as specified in <a href=""https://tools.ietf.org/html/rfc4648"" rel=""noreferrer"">RFC 4648 Section 5</a> (Safe alphabet).</li>
</ol>

<p>There is also some pseudo-code given for the generation:</p>

<pre><code>Signatur(Request) = new String(encodeBase64URLCompatible(HMAC-SHA-256(getBytes(Z, ""UTF-8""), decodeBase64URLCompatible(getBytes(S, ""UTF-8"")))), ""UTF-8"")
</code></pre>

<p>I tried various things in PHP but have not found the correct algorithm yet. This is the code I have now:</p>

<pre><code>if(!function_exists('base64url_encode')){
    function base64url_encode($data) {
        $data = str_replace(array('+', '/'), array('-', '_'), base64_encode($data));
        return $data;
    }
}

$str = ""kki98hkl-u5d0-w96i-62dp-xpmr6xlvfnjz:20151110171858:b2c13532-3416-47d9-8592-a541c208f755:hKSeRD98BHngrNa51Q2IgAXtoZ8oYebgY4vQHEYjlmzN9KSbAVTRvQkUPsjOGu4F"";
$sec = ""LRH9CAkNs-zoU3hxHbrtY0CUUcmqzibPeN7x6-vwNWQ="";
$signature = mhash(MHASH_SHA256, $str, $sec);
$signature = base64url_encode($signature);

if($signature != ""P-WgZ8CqV51aI-3TncZj5CpSZh98PjZTYxrvxkmQYmI="")
    echo ""wrong: $signature"";
else
    echo ""correct"";
</code></pre>

<p>It gives this signature:</p>

<pre><code>K9lw3V-k5gOedmVwmO5vC7cOn82JSEXsNguozCAOU2c=
</code></pre>

<p>As you can see, the length of 44 characters is correct. Please help me with finding the mistake, this simple problem takes me hours yet and there is no solution.</p>
","<p>Simply use <strong>hash_hmac()</strong> function available in PHP.</p>

<p>Example : </p>

<pre><code>hash_hmac('sha256', $string, $secret);
</code></pre>

<p>Doc here : <a href=""http://php.net/manual/fr/function.hash-hmac.php"" rel=""nofollow noreferrer"">http://php.net/manual/fr/function.hash-hmac.php</a></p>
","47676990","15085","<php><hmac>","5","0","2","2017-12-06 14:44:21","34957413","3","2","","","","2016-01-22 22:27:39","","","2017-12-06 14:44:21"
"735714","iPhone and HMAC-SHA-1 encoding","<p>im trying to get a call to amazon web service and im stuck on getting the signature, looked at this but i still have a question on it. </p>

<p>using this example what is the </p>

<pre><code>NSData *keyData;
NSData *clearTextData
</code></pre>

<p>? what do i need to pass for these two values? </p>

<pre><code>/*
  inputs:
  NSData *keyData;
  NSData *clearTextData
*/

uint8_t digest[CC_SHA1_DIGEST_LENGTH] = {0};

CCHmacContext hmacContext;
CCHmacInit(&amp;hmacContext, kCCHmacAlgSHA1, keyData.bytes, keyData.length);
CCHmacUpdate(&amp;hmacContext, clearTextData.bytes, clearTextData.length);
CCHmacFinal(&amp;hmacContext, digest);

NSData *out = [NSData dataWithBytes:digest length:CC_SHA1_DIGEST_LENGTH]
</code></pre>
","<p>Take a look at <a href=""http://github.com/ameingast/cocoacryptohashing/tree/master"" rel=""nofollow noreferrer"">CocoaCryptoHashing</a> for the SHA1 encoding</p>
","735809","14622","<iphone><sha1><hmac>","6","0","7","2014-03-11 08:03:24","","0","15","91299","","2010-03-02 15:16:55","2009-04-09 19:55:51","","","2009-04-09 20:24:51"
"735714","iPhone and HMAC-SHA-1 encoding","<p>im trying to get a call to amazon web service and im stuck on getting the signature, looked at this but i still have a question on it. </p>

<p>using this example what is the </p>

<pre><code>NSData *keyData;
NSData *clearTextData
</code></pre>

<p>? what do i need to pass for these two values? </p>

<pre><code>/*
  inputs:
  NSData *keyData;
  NSData *clearTextData
*/

uint8_t digest[CC_SHA1_DIGEST_LENGTH] = {0};

CCHmacContext hmacContext;
CCHmacInit(&amp;hmacContext, kCCHmacAlgSHA1, keyData.bytes, keyData.length);
CCHmacUpdate(&amp;hmacContext, clearTextData.bytes, clearTextData.length);
CCHmacFinal(&amp;hmacContext, digest);

NSData *out = [NSData dataWithBytes:digest length:CC_SHA1_DIGEST_LENGTH]
</code></pre>
","<p>If you are calling the Amazon web service too look up prices or product details, your Amazon  web service key will be disabled and your app will stop working.</p>

<p>Look at the terms of service of the Amazon Web Services, use by mobile clients is strictly disallowed:</p>

<p><a href=""https://affiliate-program.amazon.com/gp/advertising/api/detail/agreement.html"" rel=""noreferrer"">https://affiliate-program.amazon.com/gp/advertising/api/detail/agreement.html</a></p>

<p>I found this out the hard way when my own application had my AWS key disabled in a production app.  I had read the TOS, but it was not really there as you can see by the link above to some other obscure detail of use.  You wouldn't think the affiliate program would have anything to do with the API, but it does.</p>

<p>You can find details of other apps blocked at this TechCrunch article:</p>

<p><a href=""http://www.techcrunch.com/2009/07/07/amazon-killing-mobile-apps-that-use-its-data/"" rel=""noreferrer"">http://www.techcrunch.com/2009/07/07/amazon-killing-mobile-apps-that-use-its-data/</a></p>

<p>Just giving you a heads up and hopefully saving you a lot of work.</p>
","736741","14622","<iphone><sha1><hmac>","6","5","7","2014-03-11 08:03:24","","0","15","91299","","2010-03-02 15:16:55","2009-04-09 19:55:51","","2009-11-09 01:34:25","2009-04-10 04:51:28"
"735714","iPhone and HMAC-SHA-1 encoding","<p>im trying to get a call to amazon web service and im stuck on getting the signature, looked at this but i still have a question on it. </p>

<p>using this example what is the </p>

<pre><code>NSData *keyData;
NSData *clearTextData
</code></pre>

<p>? what do i need to pass for these two values? </p>

<pre><code>/*
  inputs:
  NSData *keyData;
  NSData *clearTextData
*/

uint8_t digest[CC_SHA1_DIGEST_LENGTH] = {0};

CCHmacContext hmacContext;
CCHmacInit(&amp;hmacContext, kCCHmacAlgSHA1, keyData.bytes, keyData.length);
CCHmacUpdate(&amp;hmacContext, clearTextData.bytes, clearTextData.length);
CCHmacFinal(&amp;hmacContext, digest);

NSData *out = [NSData dataWithBytes:digest length:CC_SHA1_DIGEST_LENGTH]
</code></pre>
","<p>I posted one solution to this <a href=""https://stackoverflow.com/questions/788569/rsa-encryption-decryption-in-iphone/788627#788627"">here</a>, that returns the Base64 encoded data that AWS requests.</p>
","952173","14622","<iphone><sha1><hmac>","6","0","7","2014-03-11 08:03:24","","0","15","91299","","2010-03-02 15:16:55","2009-04-09 19:55:51","","2017-05-23 10:29:01","2009-06-04 18:04:01"
"735714","iPhone and HMAC-SHA-1 encoding","<p>im trying to get a call to amazon web service and im stuck on getting the signature, looked at this but i still have a question on it. </p>

<p>using this example what is the </p>

<pre><code>NSData *keyData;
NSData *clearTextData
</code></pre>

<p>? what do i need to pass for these two values? </p>

<pre><code>/*
  inputs:
  NSData *keyData;
  NSData *clearTextData
*/

uint8_t digest[CC_SHA1_DIGEST_LENGTH] = {0};

CCHmacContext hmacContext;
CCHmacInit(&amp;hmacContext, kCCHmacAlgSHA1, keyData.bytes, keyData.length);
CCHmacUpdate(&amp;hmacContext, clearTextData.bytes, clearTextData.length);
CCHmacFinal(&amp;hmacContext, digest);

NSData *out = [NSData dataWithBytes:digest length:CC_SHA1_DIGEST_LENGTH]
</code></pre>
","<p>I just spent like 4 hours Googling and looking for ways to calculate an unkeyed SHA1 on the iPhone that would match the results of the sha1() function in php.  Here was the result:</p>

<pre><code>    #import &lt;CommonCrypto/CommonDigest.h&gt;

    NSString *hashkey = &lt;your data here&gt;;
// PHP uses ASCII encoding, not UTF
const char *s = [hashkey cStringUsingEncoding:NSASCIIStringEncoding];
NSData *keyData = [NSData dataWithBytes:s length:strlen(s)];

// This is the destination
uint8_t digest[CC_SHA1_DIGEST_LENGTH] = {0};
// This one function does an unkeyed SHA1 hash of your hash data
CC_SHA1(keyData.bytes, keyData.length, digest);

// Now convert to NSData structure to make it usable again
NSData *out = [NSData dataWithBytes:digest length:CC_SHA1_DIGEST_LENGTH];
// description converts to hex but puts &lt;&gt; around it and spaces every 4 bytes
NSString *hash = [out description];
hash = [hash stringByReplacingOccurrencesOfString:@"" "" withString:@""""];
hash = [hash stringByReplacingOccurrencesOfString:@""&lt;"" withString:@""""];
hash = [hash stringByReplacingOccurrencesOfString:@""&gt;"" withString:@""""];
// hash is now a string with just the 40char hash value in it
</code></pre>

<p>Hopefully this will help others who are struggling with SHA1 on the iPhone</p>
","1084497","14622","<iphone><sha1><hmac>","6","33","7","2014-03-11 08:03:24","","0","15","91299","","2010-03-02 15:16:55","2009-04-09 19:55:51","","2011-06-29 20:33:38","2009-07-05 17:41:34"
"735714","iPhone and HMAC-SHA-1 encoding","<p>im trying to get a call to amazon web service and im stuck on getting the signature, looked at this but i still have a question on it. </p>

<p>using this example what is the </p>

<pre><code>NSData *keyData;
NSData *clearTextData
</code></pre>

<p>? what do i need to pass for these two values? </p>

<pre><code>/*
  inputs:
  NSData *keyData;
  NSData *clearTextData
*/

uint8_t digest[CC_SHA1_DIGEST_LENGTH] = {0};

CCHmacContext hmacContext;
CCHmacInit(&amp;hmacContext, kCCHmacAlgSHA1, keyData.bytes, keyData.length);
CCHmacUpdate(&amp;hmacContext, clearTextData.bytes, clearTextData.length);
CCHmacFinal(&amp;hmacContext, digest);

NSData *out = [NSData dataWithBytes:digest length:CC_SHA1_DIGEST_LENGTH]
</code></pre>
","<pre><code>// This is my code used in my Twitter connection, and working well for me.
// KeithF's code was a big help!
//
// This is a category added to NSData.

@implementation NSData (EOUtil)
- (NSData*)dataByHmacSHA1EncryptingWithKey:(NSData*)key
{   
    void* buffer = malloc(CC_SHA1_DIGEST_LENGTH);
    CCHmac(kCCHmacAlgSHA1, [key bytes], [key length], [self bytes], [self length], buffer);
    return [NSData dataWithBytesNoCopy:buffer length:CC_SHA1_DIGEST_LENGTH freeWhenDone:YES];
}
@end
</code></pre>
","2778608","14622","<iphone><sha1><hmac>","6","2","7","2014-03-11 08:03:24","","0","15","91299","","2010-03-02 15:16:55","2009-04-09 19:55:51","","","2010-05-06 05:17:43"
"735714","iPhone and HMAC-SHA-1 encoding","<p>im trying to get a call to amazon web service and im stuck on getting the signature, looked at this but i still have a question on it. </p>

<p>using this example what is the </p>

<pre><code>NSData *keyData;
NSData *clearTextData
</code></pre>

<p>? what do i need to pass for these two values? </p>

<pre><code>/*
  inputs:
  NSData *keyData;
  NSData *clearTextData
*/

uint8_t digest[CC_SHA1_DIGEST_LENGTH] = {0};

CCHmacContext hmacContext;
CCHmacInit(&amp;hmacContext, kCCHmacAlgSHA1, keyData.bytes, keyData.length);
CCHmacUpdate(&amp;hmacContext, clearTextData.bytes, clearTextData.length);
CCHmacFinal(&amp;hmacContext, digest);

NSData *out = [NSData dataWithBytes:digest length:CC_SHA1_DIGEST_LENGTH]
</code></pre>
","<p>Apple's iOS developer library has provided an excellent sample titled <em>CryptoExercise</em> which includes a simple function:</p>

<pre><code>- (NSData *)getHashBytes:(NSData *)plainText"" to get a SHA-1 hash.
</code></pre>
","10415406","14622","<iphone><sha1><hmac>","6","0","7","2014-03-11 08:03:24","","0","15","91299","","2010-03-02 15:16:55","2009-04-09 19:55:51","","2012-10-20 15:30:37","2012-05-02 14:05:33"
"735714","iPhone and HMAC-SHA-1 encoding","<p>im trying to get a call to amazon web service and im stuck on getting the signature, looked at this but i still have a question on it. </p>

<p>using this example what is the </p>

<pre><code>NSData *keyData;
NSData *clearTextData
</code></pre>

<p>? what do i need to pass for these two values? </p>

<pre><code>/*
  inputs:
  NSData *keyData;
  NSData *clearTextData
*/

uint8_t digest[CC_SHA1_DIGEST_LENGTH] = {0};

CCHmacContext hmacContext;
CCHmacInit(&amp;hmacContext, kCCHmacAlgSHA1, keyData.bytes, keyData.length);
CCHmacUpdate(&amp;hmacContext, clearTextData.bytes, clearTextData.length);
CCHmacFinal(&amp;hmacContext, digest);

NSData *out = [NSData dataWithBytes:digest length:CC_SHA1_DIGEST_LENGTH]
</code></pre>
","<p>You can see <a href=""http://oauth.googlecode.com/svn/code/obj-c/OAuthConsumer/"" rel=""nofollow"">this</a>
maybe it helps you.</p>
","22319292","14622","<iphone><sha1><hmac>","6","-1","7","2014-03-11 08:03:24","","0","15","91299","","2010-03-02 15:16:55","2009-04-09 19:55:51","","2014-03-11 08:03:24","2014-03-11 07:42:32"
"6938675","Why the hashlib and hmac are generating different hash values?","<p>In Python 2.7,</p>

<pre><code>my = ""my""
key = ""key""
print(hashlib.sha256(my + key).hexdigest())
print(hmac.new(my, key, hashlib.sha256).hexdigest())
</code></pre>

<p>output,</p>

<pre><code>5e50f405ace6cbdf17379f4b9f2b0c9f4144c5e380ea0b9298cb02ebd8ffe511
15a55993a27e0de7a4c4daa67a7c219199a464ca283797f545b783cce07b38a5
</code></pre>

<p>or have I misunderstood?</p>
","<p>This is because <code>hmac</code> uses the provided <code>key</code> to generate a <a href=""http://en.wikipedia.org/wiki/Salt_%28cryptography%29"" rel=""noreferrer"">salt</a> and make the hash more strong, while <code>hashlib</code> only hashes the provided message.</p>

<p>By looking at the <code>hmac</code> module <a href=""http://hg.python.org/cpython/file/65c412586901/Lib/hmac.py"" rel=""noreferrer"">source code</a>, you will find how to achieve the same behaviour as <code>hmac</code> using the <code>hashlib</code> module, here the used algorithm (it's not the original one, i stripped some checkings to have just the interesting part):</p>

<pre><code>import hashlib

MESSAGE = ""msg""
KEY = ""key""

trans_5C = """".join ([chr (x ^ 0x5C) for x in xrange(256)])
trans_36 = """".join ([chr (x ^ 0x36) for x in xrange(256)])

outer = hashlib.sha256()
inner = hashlib.sha256()

KEY = KEY + chr(0) * (inner.block_size - len(KEY))

outer.update(KEY.translate(trans_5C))
inner.update(KEY.translate(trans_36))
inner.update(MESSAGE)
outer.update(inner.digest())

result = outer.hexdigest()
print result # prints 2d93cbc1be167bcb1637a4a23cbff01a7878f0c50ee833954ea5221bb1b8c628
</code></pre>

<p>The same directly using <code>hmac</code>:</p>

<pre><code>import hashlib
import hmac

result = hmac.new(KEY, MESSAGE, hashlib.sha256).hexdigest()
print result # prints 2d93cbc1be167bcb1637a4a23cbff01a7878f0c50ee833954ea5221bb1b8c628
</code></pre>

<p>So when using <code>hmac</code>, it doesn't only hashes the given message using the specified hashing algorithm, it also uses the key to complexify the hash.</p>
","6939124","13379","<python><hmac><hashlib>","9","24","1","2011-08-04 09:36:31","","1","5","","","","2011-08-04 09:01:10","","","2011-08-04 09:36:31"
"2465690","PBKDF2-HMAC-SHA1","<p>To generate a valid pairwise master key for a WPA2 network a router uses the PBKDF2-HMAC-SHA1 algorithm.  I understand that the sha1 function is performed 4096 times to derive the PMK, however I have two questions about the process.</p>

<p>Excuse the pseudo code.</p>

<p>1) How is the input to the first instance of the SHA1 function formatted?
SHA1(""network_name""+""network_name_length""+""network_password"")</p>

<p>Is it formatted in that order, is it the hex value of the network name, length and password or straight ASCII?</p>

<p>Then from what I gather the 160 bit digest received is fed straight into another round of hashing without any additional salting.  Like this: SHA1(""160bit digest from last round of hashing"") Rise and repeat.</p>

<p>2) Once this occurs 4096 times 256 bits of the output is used as the pairwise master key.  What I don't understand is that if SHA1 produces 160bit output, how does the algorithm arrive at the 256bits required for a key?</p>

<p>Thanks for the help.</p>
","<p>yeah thats right, the algorithm to generate a binary key for a WPA network is:</p>

<p>key = PBKDF2(passphrase, ssid, 4096, 256)</p>

<p>PBKDF2 is described in <a href=""http://www.ietf.org/rfc/rfc2898.txt"" rel=""noreferrer"">http://www.ietf.org/rfc/rfc2898.txt</a></p>

<p>It uses the HMAC algorithm to create a digest of the input. HMAC can use any hash function, here the spec calls for SHA1 as you mentioned. The hash is done on an intermediate state within the HMAC algorithm:</p>

<pre><code>H(K XOR opad, H(K XOR ipad, text))
</code></pre>

<p>(H=the chosen hash function, K is the passphrase, text would be ssid)</p>

<p>This HMAC process is repeated 4096 times by PBKDF2.</p>

<p>HMAC algorithm: <a href=""http://www.ietf.org/rfc/rfc2104"" rel=""noreferrer"">http://www.ietf.org/rfc/rfc2104</a></p>

<p>There's a source example here of deriving a key:</p>

<p><a href=""https://www.codeblog.org/viewsrc/openssl-engine-0.9.6a/crypto/evp/p5_crpt2.c"" rel=""noreferrer"">https://www.codeblog.org/viewsrc/openssl-engine-0.9.6a/crypto/evp/p5_crpt2.c</a></p>

<pre><code>int PKCS5_PBKDF2_HMAC_SHA1(const char *pass, int passlen,
   80:                            unsigned char *salt, int saltlen, int iter,
   81:                            int keylen, unsigned char *out)
</code></pre>

<p>salt is the SSID, pass is the password.</p>
","2465884","13187","<sha1><hmac><pbkdf2>","9","8","1","2010-03-17 21:09:24","","0","4","","","","2010-03-17 20:35:56","","2010-03-17 21:09:24","2010-03-17 21:01:52"
"17576007","Generate a strong HMACSHA256 key in C#","<p>I'm looking to implement HMACSHA256 request signing in an API I'm building. From what I understood from <a href=""https://tools.ietf.org/html/rfc4868"" rel=""noreferrer"">https://tools.ietf.org/html/rfc4868</a>, it's best that the secret key be the same number of bits as the hashing algorithm (i.e. SHA256 secret keys should be 256 bits/32 bytes).</p>

<p>Can I use one of the many different random number generators out there for C# or is there a specific way that these keys need to be generated.</p>

<p>Lastly, Amazon Web Services uses HMACSHA256, but they secret keys they provide (at least to me) is 320 bits/40 bytes (when the key is converted to bytes using UTF-8, see <a href=""https://github.com/aws/aws-sdk-net/blob/master/AWSSDK/Amazon.Runtime/Internal/Auth/AWS4Signer.cs#L205-L232"" rel=""noreferrer"">https://github.com/aws/aws-sdk-net/blob/master/AWSSDK/Amazon.Runtime/Internal/Auth/AWS4Signer.cs#L205-L232</a>). Is there a reason to use more than needed by the hashing algorithm since it's truncated?</p>
","<p>One way to generate a (presumably secure) key is:</p>

<pre><code>var hmac = new HMACSHA256();
var key = Convert.ToBase64String(hmac.Key);
</code></pre>
","17576032","12891","<c#><hmac>","9","24","2","2016-05-24 18:08:21","17576186","0","2","168868","","2013-07-10 16:50:32","2013-07-10 16:26:44","","2016-05-24 18:08:21","2013-07-10 16:28:01"
"17576007","Generate a strong HMACSHA256 key in C#","<p>I'm looking to implement HMACSHA256 request signing in an API I'm building. From what I understood from <a href=""https://tools.ietf.org/html/rfc4868"" rel=""noreferrer"">https://tools.ietf.org/html/rfc4868</a>, it's best that the secret key be the same number of bits as the hashing algorithm (i.e. SHA256 secret keys should be 256 bits/32 bytes).</p>

<p>Can I use one of the many different random number generators out there for C# or is there a specific way that these keys need to be generated.</p>

<p>Lastly, Amazon Web Services uses HMACSHA256, but they secret keys they provide (at least to me) is 320 bits/40 bytes (when the key is converted to bytes using UTF-8, see <a href=""https://github.com/aws/aws-sdk-net/blob/master/AWSSDK/Amazon.Runtime/Internal/Auth/AWS4Signer.cs#L205-L232"" rel=""noreferrer"">https://github.com/aws/aws-sdk-net/blob/master/AWSSDK/Amazon.Runtime/Internal/Auth/AWS4Signer.cs#L205-L232</a>). Is there a reason to use more than needed by the hashing algorithm since it's truncated?</p>
","<p>If a key is longer than the HMAC supports, it'll usually be hashed to the proper size. This is mainly to support human-readable keys of arbitrary length. If you're generating a key programatically and don't need it to be human-readable, I'd recommend using <code>RandomNumberGenerator</code>. This is basically what it was made for.</p>

<pre><code>using System.Security.Cryptography;

RandomNumberGenerator rng = RandomNumberGenerator.Create();

byte[] data = new byte[32];
rng.GetBytes(data);
</code></pre>
","17576186","12891","<c#><hmac>","9","8","2","2016-05-24 18:08:21","17576186","0","2","168868","","2013-07-10 16:50:32","2013-07-10 16:26:44","","","2013-07-10 16:37:10"
"5487757","Using HMAC-SHA1 for API authentication - how to store the client password securely?","<p>In a RESTful API that uses <a href=""http://docs.amazonwebservices.com/AmazonS3/latest/dev/index.html?S3_Authentication.html"">S3-style</a> authentication, the API client signs the request with his secret key using HMAC-SHA1, so the secret key is never transmitted over the wire.
The server then authenticates the client by using that client's secret key to repeat the signature process itself and compare the result to the signature transmitted by the client.</p>

<p>This is all nice and good but it means the the server requires access to the plaintext of the client's shared secret. That flies in the face of all the advice out there against storing user passwords in the clear inside your database. Storing only the salted hash of the password is not an option as far as I can tell - because then I can't verify the client's signature.</p>

<p>I should stress that my API is RESTful and thus should be stateless: I'd rather avoid a login step prior to other API calls.</p>

<p>One optional solution is to encrypt all user passwords using some symmetric key algorithm. However, the server would have to store the key to that encryption somewhere <em>easily accessible</em>, e.g. inside the source code. This is better than nothing but not an optimal solution (as @Rook mentioned in his answer, it violates CWE-257).</p>

<p>Another direction for a solution could be something around asymmetric signatures, but I can't figure out how to apply that to the HMAC, and can't find any articles on the subject.</p>

<p>Am I missing something obvious here? Many respectable providers have implemented this kind of authentication scheme - they can't all be violating common security principles, can they?
If not, are there any best practices that you can share?</p>
","<p>Ideally after the user logs in you give them a Cryptographic Nonce which is used as the HMAC secret key K for the life of that session.   This is a secure approach,  but its not RESTful,  because REST is stateless.   This idea of an message authentication code issued per login is technically a form of state.</p>

<p>Encrypting passwords and storing them in the database is a violation of <a href=""http://cwe.mitre.org/data/definitions/257.html"" rel=""noreferrer"">CWE-257</a>.</p>
","5489356","12864","<security><encryption><password-protection><hmac>","31","11","3","2013-04-05 09:01:16","5496353","0","15","570156","","2011-03-30 19:38:41","2011-03-30 14:33:11","","","2011-03-30 16:43:46"
"5487757","Using HMAC-SHA1 for API authentication - how to store the client password securely?","<p>In a RESTful API that uses <a href=""http://docs.amazonwebservices.com/AmazonS3/latest/dev/index.html?S3_Authentication.html"">S3-style</a> authentication, the API client signs the request with his secret key using HMAC-SHA1, so the secret key is never transmitted over the wire.
The server then authenticates the client by using that client's secret key to repeat the signature process itself and compare the result to the signature transmitted by the client.</p>

<p>This is all nice and good but it means the the server requires access to the plaintext of the client's shared secret. That flies in the face of all the advice out there against storing user passwords in the clear inside your database. Storing only the salted hash of the password is not an option as far as I can tell - because then I can't verify the client's signature.</p>

<p>I should stress that my API is RESTful and thus should be stateless: I'd rather avoid a login step prior to other API calls.</p>

<p>One optional solution is to encrypt all user passwords using some symmetric key algorithm. However, the server would have to store the key to that encryption somewhere <em>easily accessible</em>, e.g. inside the source code. This is better than nothing but not an optimal solution (as @Rook mentioned in his answer, it violates CWE-257).</p>

<p>Another direction for a solution could be something around asymmetric signatures, but I can't figure out how to apply that to the HMAC, and can't find any articles on the subject.</p>

<p>Am I missing something obvious here? Many respectable providers have implemented this kind of authentication scheme - they can't all be violating common security principles, can they?
If not, are there any best practices that you can share?</p>
","<p>This is the downside of symmetric-key challenge-response style authentication - you don't put the secret on the wire, but you have to store the secret at both ends.  (HMACs are symmetric key systems).</p>

<p>Note though that it's not a <em>password</em> - it's a <em>shared secret</em>.  There's a fundamental difference here - a password is generally chosen by the user, whereas a shared secret is generated randomly and provided to the user (they're often called ""API keys"", in this context).</p>

<p>Storing passwords in a reversible format is bad, because if your database is compromised, then the attackers have obtained passwords that might (and probably have been) used elsewhere.  Storing a shared secret, on the other hand, is not such a problem - the secret it's specific to your service, so all the attackers have gained is the ability to log in to your service.</p>

<p>On the other hand, it <em>is</em> possible to have an asymmetric system that doesn't have to store a secret at the server side.  The basic idea is that the server knows the client's public key and current message sequence number.  When sending an API request, the client increments the message sequence number and calculates a signature over the sequence number and the API request parameters, which the server can verify using the public key.  The server rejects a message if it contains an old message sequence number, to prevent replay attacks.</p>
","5496353","12864","<security><encryption><password-protection><hmac>","31","35","3","2013-04-05 09:01:16","5496353","0","15","570156","","2011-03-30 19:38:41","2011-03-30 14:33:11","","2011-03-31 07:13:38","2011-03-31 07:08:30"
"5487757","Using HMAC-SHA1 for API authentication - how to store the client password securely?","<p>In a RESTful API that uses <a href=""http://docs.amazonwebservices.com/AmazonS3/latest/dev/index.html?S3_Authentication.html"">S3-style</a> authentication, the API client signs the request with his secret key using HMAC-SHA1, so the secret key is never transmitted over the wire.
The server then authenticates the client by using that client's secret key to repeat the signature process itself and compare the result to the signature transmitted by the client.</p>

<p>This is all nice and good but it means the the server requires access to the plaintext of the client's shared secret. That flies in the face of all the advice out there against storing user passwords in the clear inside your database. Storing only the salted hash of the password is not an option as far as I can tell - because then I can't verify the client's signature.</p>

<p>I should stress that my API is RESTful and thus should be stateless: I'd rather avoid a login step prior to other API calls.</p>

<p>One optional solution is to encrypt all user passwords using some symmetric key algorithm. However, the server would have to store the key to that encryption somewhere <em>easily accessible</em>, e.g. inside the source code. This is better than nothing but not an optimal solution (as @Rook mentioned in his answer, it violates CWE-257).</p>

<p>Another direction for a solution could be something around asymmetric signatures, but I can't figure out how to apply that to the HMAC, and can't find any articles on the subject.</p>

<p>Am I missing something obvious here? Many respectable providers have implemented this kind of authentication scheme - they can't all be violating common security principles, can they?
If not, are there any best practices that you can share?</p>
","<p>I am not sure if i am missing something here but one option is to use  hashed password as symmetric key.</p>
","15829808","12864","<security><encryption><password-protection><hmac>","31","2","3","2013-04-05 09:01:16","5496353","0","15","570156","","2011-03-30 19:38:41","2011-03-30 14:33:11","","","2013-04-05 09:01:16"
"39784955","HmacSHA256 Hashing in JAVA","<p>I have been given a set of steps to obtain a hash of data. I have trying to comprehend the steps for quite long now, but the hash that I am getting doesn't seem to match expected hash.</p>

<p>The steps that was mentioned is as follows:</p>

<ol>
<li>Use the FIN message input as a binary value (unsigned char in C language, byte in Java). The FIN message input must be coded in the ASCII character set.</li>
<li>Combine the left LAU key and the right LAU key as one string. The merged LAU key must be used as a binary value (unsigned char in C language, byte in Java). The merged LAU key must be coded in the ASCII character set.</li>
<li>Call a HMAC256 routine to compute the hash value. The hash value must also be treated as a binary value (unsigned char in C language, byte in Java). The hmac size is 32 bytes.</li>
<li>Convert the hmac binary values to uppercase hexadecimal printable characters (for example, a onebyte binary value of 0000 1010 has a hexadecimal value of 0x0A and will be translated to the twobyte characters “0A”).</li>
</ol>

<p>This is what I have tried. </p>

<pre><code>import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;
import javax.xml.bind.DatatypeConverter;

import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import org.apache.commons.codec.binary.Hex;

import java.io.File;
import java.io.FileInputStream;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.nio.charset.StandardCharsets;


public class ABCHash{
        public static void main(String[] args) throws Exception        
        {
                try{
                        int character;
                        StringBuffer buffer = new StringBuffer("""");
                        FileInputStream inputStream = new FileInputStream(new File(""C:/EncPDF.txt""));

                        while( (character = inputStream.read()) != -1)
                                buffer.append((char) character);

                        inputStream.close();
                        System.out.println(""Fetching data from the file""+buffer);

                        StringBuffer sbuf = new StringBuffer(buffer);

                        String str=sbuf.toString();

                        System.out.println( ""Data = ""+ str);
                        if(str!=null)
                        {
                                String key = ""0123456789ABCDEF0123456789ABCDEF""; // Assuming the key as 0123456789ABCDEF

                                byte[] hexvalue= stringToHexByte(str);
                                byte[] hexkey=stringToHexByte(key);
                                byte[] byHMAC = encode(hexkey, hexvalue);
                                String stEncryptedData = Hex.encodeHexString(byHMAC).toUpperCase();

                                System.out.println(""Encrypted data =\n ""+stEncryptedData);
                        }
                }
                catch(Exception e)
                {
                        System.out.println(""Exception in the file reading""+e);
                }

        }

        private static byte[] encode(byte[] hexkey, byte[] hexvalue) {
                try {
                        Mac sha256_HMAC = Mac.getInstance(""HmacSHA256"");
                        SecretKeySpec secret_key = new SecretKeySpec(hexkey, ""HmacSHA256"");
                        sha256_HMAC.init(secret_key);

                        return sha256_HMAC.doFinal(hexvalue);

                } catch (NoSuchAlgorithmException e) {
                        e.printStackTrace();
                } catch (InvalidKeyException e) {
                        e.printStackTrace();
                }

                return null;
        }

        public static String stringToHex(String base) throws UnsupportedEncodingException
        {
                return String.format(""%040x"", new BigInteger(1, base.getBytes(StandardCharsets.US_ASCII)));
        }

        public static byte[] stringToHexByte(String base) throws UnsupportedEncodingException
        {
                System.out.println(stringToHex(base).toUpperCase());
                return DatatypeConverter.parseHexBinary(stringToHex(base).toUpperCase());
        }

}
</code></pre>

<p>It will be really helpful if someone can point whats wrong with the implementation.</p>
","","","12260","<java><encryption><hash><sha><hmac>","1","","0","2019-08-18 21:00:59","","4","3","","","","2016-09-30 06:23:13","","",""
"41629464","Best way to secure ASP.NET Web API 2 where multiple client use it","<p>What is the best way to secure a Web API when you have multiple different clients to use? Each client should have its own API key to connect with.
Now I have read different things but I still have some questions.</p>

<p>I have found this one: <a href=""http://bitoftech.net/2014/06/01/token-based-authentication-asp-net-web-api-2-owin-asp-net-identity/#comments"" rel=""nofollow noreferrer"">http://bitoftech.net/2014/06/01/token-based-authentication-asp-net-web-api-2-owin-asp-net-identity/#comments</a> but is it sufficient?</p>

<p>So basically:</p>

<ol>
<li>client connects with given username/password</li>
<li>client gets a bearer token back</li>
<li>client uses this token in each post to the api until the timestamp is over</li>
</ol>

<p>I also have read about giving a API Secret key to each client which he can uses: <a href=""http://bitoftech.net/2014/12/15/secure-asp-net-web-api-using-api-key-authentication-hmac-authentication/"" rel=""nofollow noreferrer"">http://bitoftech.net/2014/12/15/secure-asp-net-web-api-using-api-key-authentication-hmac-authentication/</a></p>

<p>What is the best approach?</p>
","<p>Yes, OAuth2 is a pretty standard protocol for securing resources and I would recommend it instead of rolling custom implementations. The idea is that each client will receive a client_id/client_secret pair (not username, password) and use those to get Bearer tokens from an OAuth Issuer. Then those tokens can be used to access the protected resources of the Web API.</p>
","41629517","12169","<c#><asp.net-mvc><api><token><hmac>","9","0","3","2019-11-01 13:35:12","41629774","0","4","133","","2019-11-01 13:35:12","2017-01-13 07:31:55","","","2017-01-13 07:35:34"
"41629464","Best way to secure ASP.NET Web API 2 where multiple client use it","<p>What is the best way to secure a Web API when you have multiple different clients to use? Each client should have its own API key to connect with.
Now I have read different things but I still have some questions.</p>

<p>I have found this one: <a href=""http://bitoftech.net/2014/06/01/token-based-authentication-asp-net-web-api-2-owin-asp-net-identity/#comments"" rel=""nofollow noreferrer"">http://bitoftech.net/2014/06/01/token-based-authentication-asp-net-web-api-2-owin-asp-net-identity/#comments</a> but is it sufficient?</p>

<p>So basically:</p>

<ol>
<li>client connects with given username/password</li>
<li>client gets a bearer token back</li>
<li>client uses this token in each post to the api until the timestamp is over</li>
</ol>

<p>I also have read about giving a API Secret key to each client which he can uses: <a href=""http://bitoftech.net/2014/12/15/secure-asp-net-web-api-using-api-key-authentication-hmac-authentication/"" rel=""nofollow noreferrer"">http://bitoftech.net/2014/12/15/secure-asp-net-web-api-using-api-key-authentication-hmac-authentication/</a></p>

<p>What is the best approach?</p>
","<p>The token based approach used in OAuth2 and OpenIdentity is very wide spread and enables a wide range of scenarios (Web Apps, Mobile, Deskop Apps, microservices).</p>

<p>There are some good libraries out there for providing and consuming tokens. They should be preferred over implementing your own protocols. Later approach is more error prone and is more difficult to be consumed by other clients (if there is the need in the future). I recommend to have a look in the IdentityServer (it is OpenSource). A introduction can be found <a href=""https://vimeo.com/154172925"" rel=""nofollow noreferrer"">here</a>.</p>

<p>Generally I recommend to dig deeper into the blogs about token based authentication - it is a huge topic, but it is worth it.</p>
","41629619","12169","<c#><asp.net-mvc><api><token><hmac>","9","1","3","2019-11-01 13:35:12","41629774","0","4","133","","2019-11-01 13:35:12","2017-01-13 07:31:55","","","2017-01-13 07:42:57"
"41629464","Best way to secure ASP.NET Web API 2 where multiple client use it","<p>What is the best way to secure a Web API when you have multiple different clients to use? Each client should have its own API key to connect with.
Now I have read different things but I still have some questions.</p>

<p>I have found this one: <a href=""http://bitoftech.net/2014/06/01/token-based-authentication-asp-net-web-api-2-owin-asp-net-identity/#comments"" rel=""nofollow noreferrer"">http://bitoftech.net/2014/06/01/token-based-authentication-asp-net-web-api-2-owin-asp-net-identity/#comments</a> but is it sufficient?</p>

<p>So basically:</p>

<ol>
<li>client connects with given username/password</li>
<li>client gets a bearer token back</li>
<li>client uses this token in each post to the api until the timestamp is over</li>
</ol>

<p>I also have read about giving a API Secret key to each client which he can uses: <a href=""http://bitoftech.net/2014/12/15/secure-asp-net-web-api-using-api-key-authentication-hmac-authentication/"" rel=""nofollow noreferrer"">http://bitoftech.net/2014/12/15/secure-asp-net-web-api-using-api-key-authentication-hmac-authentication/</a></p>

<p>What is the best approach?</p>
","<p>You are on the right track by using Token based authentication. Here is a link which shows the implementation details-</p>

<p><a href=""https://stackoverflow.com/questions/38661090/token-based-authentication-in-web-api-without-any-user-interface"">Token based authentication in Web API without any user interface</a></p>

<p>Additionally, I think you can secure the channel using SSL-</p>

<p><a href=""http://www.c-sharpcorner.com/UploadFile/55d2ea/creating-and-using-C-Sharp-web-application-over-https-ssl/"" rel=""nofollow noreferrer"">http://www.c-sharpcorner.com/UploadFile/55d2ea/creating-and-using-C-Sharp-web-application-over-https-ssl/</a></p>
","41629774","12169","<c#><asp.net-mvc><api><token><hmac>","9","4","3","2019-11-01 13:35:12","41629774","0","4","133","","2019-11-01 13:35:12","2017-01-13 07:31:55","","2017-05-23 12:01:57","2017-01-13 07:52:42"
"46570389","JWT Token Invalid Signature","<p>I am using JWT in my application for login authentication process. 
To generate the token I am using: </p>

<pre><code>Jwts.builder().setSubject(username).signWith(SignatureAlgorithm.HS512, MacProvider.generateKey()).compact();
</code></pre>

<p>Generated Token:</p>

<blockquote>
  <p>eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJlaG91c2VAZGV2ZXJldXgub3JnIn0.5SX-aU-p_RlfC3CZa-YXnQu_YR7RsG2Xfim3LOmlqxjAZrIyZiz0fYZwViHr113ms8TNvngcJcV07U4hK-RBZQ</p>
</blockquote>

<p>When I decode this token in jwt.io debugger it tells me an invalid Signature. I am not able to find the reason of this failure as I can see the username in the payload which i am using to authenticate. Could anybody point me the issue? Do I need to change anything in the code? </p>
","<p><code>MacProvider.generateKey()</code> is generating a new random signing you key each time you use it. You need to generate it once and store it. The key is used to sign and verify the token. </p>

<p>If you do not store the key you wil not be able to verify the token, which is exactly the problem with jwt.io. <strong>You must provide the signing key</strong>. In your case, using a random key that can contain non representble characters (it is possible to use a passphrase too, but not recommended), encode it to base64. Then mark the check in jwt.io to verify the token</p>

<pre><code>Key key =MacProvider.generateKey();
String keyB64 = javax.xml.DataTypeConverter.printBase64Binary(key.getEncoded());
</code></pre>
","46578955","11846","<jwt><digital-signature><hmac><jjwt>","6","5","1","2017-10-05 06:16:24","46578955","1","1","6371459","","2017-10-05 06:16:24","2017-10-04 17:03:25","2017-10-05 13:23:49","","2017-10-05 06:12:15"
"5997955","Library for generating HMAC-SHA1 OAuth signature on Android?","<p>Using the <a href=""http://code.google.com/apis/accounts/docs/OAuth_ref.html#SigningOAuth"" rel=""noreferrer"">specifications</a> below I need to create an oauth_signature on Android.  I'm looking for a library that handles the boiler plate code in creating a signature for accessing resources via OAuth.</p>

<blockquote>
  <ol>
  <li><p>Construct a signature ""base string"", which consists of a concatenation of three request elements:</p>
  
  <ul>
  <li>The HTTP request method.</li>
  <li>The base URL the request is being sent to. This URL should not include any query parameters. When signing calls to Google services, refer to the OAuth specification, Section 9.1.2, for relevant instructions.</li>
  <li>A normalized string of the parameters in the request (excluding the oauth_signature parameter). This includes parameters sent in the request header or body, as well as query parameters added to the request URL. To normalize the string, sort the parameters using lexicographical byte value ordering. For more details on normalizing this string, see Section 9.1.1 of the OAuth specification.</li>
  </ul></li>
  <li><p>Generate an oauth_signature using one of the following sequences:</p>
  
  <ul>
  <li>If your application is registered and you're using HMAC-SHA1, use the OAuth ""consumer secret"" value generated during registration; this value is displayed on your domain's registration page.</li>
  </ul></li>
  </ol>
</blockquote>
","<p>I don't know anything about OAuth, but you can use <a href=""http://developer.android.com/reference/javax/crypto/Mac.html"" rel=""nofollow""><code>javax.crypto.Mac</code></a> to generate HMAC-SHA1 value (use <code>HmacSHA1</code> as the algorithm name):</p>

<pre><code>Mac hmac = Mac.getInstance(""HmacSHA1"");
</code></pre>
","5998003","11642","<java><android><oauth><sha1><hmac>","11","1","4","2015-09-06 08:58:14","5998044","0","7","411022","","2013-11-03 15:20:50","2011-05-13 21:27:40","","","2011-05-13 21:32:19"
"5997955","Library for generating HMAC-SHA1 OAuth signature on Android?","<p>Using the <a href=""http://code.google.com/apis/accounts/docs/OAuth_ref.html#SigningOAuth"" rel=""noreferrer"">specifications</a> below I need to create an oauth_signature on Android.  I'm looking for a library that handles the boiler plate code in creating a signature for accessing resources via OAuth.</p>

<blockquote>
  <ol>
  <li><p>Construct a signature ""base string"", which consists of a concatenation of three request elements:</p>
  
  <ul>
  <li>The HTTP request method.</li>
  <li>The base URL the request is being sent to. This URL should not include any query parameters. When signing calls to Google services, refer to the OAuth specification, Section 9.1.2, for relevant instructions.</li>
  <li>A normalized string of the parameters in the request (excluding the oauth_signature parameter). This includes parameters sent in the request header or body, as well as query parameters added to the request URL. To normalize the string, sort the parameters using lexicographical byte value ordering. For more details on normalizing this string, see Section 9.1.1 of the OAuth specification.</li>
  </ul></li>
  <li><p>Generate an oauth_signature using one of the following sequences:</p>
  
  <ul>
  <li>If your application is registered and you're using HMAC-SHA1, use the OAuth ""consumer secret"" value generated during registration; this value is displayed on your domain's registration page.</li>
  </ul></li>
  </ol>
</blockquote>
","<p>I've used this library for an Android OAuth Client: <a href=""http://code.google.com/p/oauth-signpost/"" rel=""nofollow"">http://code.google.com/p/oauth-signpost/</a> </p>
","5998044","11642","<java><android><oauth><sha1><hmac>","11","0","4","2015-09-06 08:58:14","5998044","0","7","411022","","2013-11-03 15:20:50","2011-05-13 21:27:40","","","2011-05-13 21:37:15"
"5997955","Library for generating HMAC-SHA1 OAuth signature on Android?","<p>Using the <a href=""http://code.google.com/apis/accounts/docs/OAuth_ref.html#SigningOAuth"" rel=""noreferrer"">specifications</a> below I need to create an oauth_signature on Android.  I'm looking for a library that handles the boiler plate code in creating a signature for accessing resources via OAuth.</p>

<blockquote>
  <ol>
  <li><p>Construct a signature ""base string"", which consists of a concatenation of three request elements:</p>
  
  <ul>
  <li>The HTTP request method.</li>
  <li>The base URL the request is being sent to. This URL should not include any query parameters. When signing calls to Google services, refer to the OAuth specification, Section 9.1.2, for relevant instructions.</li>
  <li>A normalized string of the parameters in the request (excluding the oauth_signature parameter). This includes parameters sent in the request header or body, as well as query parameters added to the request URL. To normalize the string, sort the parameters using lexicographical byte value ordering. For more details on normalizing this string, see Section 9.1.1 of the OAuth specification.</li>
  </ul></li>
  <li><p>Generate an oauth_signature using one of the following sequences:</p>
  
  <ul>
  <li>If your application is registered and you're using HMAC-SHA1, use the OAuth ""consumer secret"" value generated during registration; this value is displayed on your domain's registration page.</li>
  </ul></li>
  </ol>
</blockquote>
","<p>In answer to Will's question on Chris's answer, you could use the built in android javax.crypto.mac to generate the hmacsha1 signature using following code (standard Java JCE provider apis):</p>

<pre><code>Mac mac = Mac.getInstance(""HmacSHA1"");
SecretKeySpec secret = new SecretKeySpec(key.getBytes(), mac.getAlgorithm());
mac.init(secret);
byte[] digest = mac.doFinal(baseString.getBytes());
byte[] result=Base64.encode(digest, DEFAULT);
</code></pre>

<p>Where 'secret' would be you text you wanted to encode and 'result' above would be your hash encoded signature.</p>
","8691102","11642","<java><android><oauth><sha1><hmac>","11","11","4","2015-09-06 08:58:14","5998044","0","7","411022","","2013-11-03 15:20:50","2011-05-13 21:27:40","","2013-12-16 22:06:07","2011-12-31 23:44:32"
"5997955","Library for generating HMAC-SHA1 OAuth signature on Android?","<p>Using the <a href=""http://code.google.com/apis/accounts/docs/OAuth_ref.html#SigningOAuth"" rel=""noreferrer"">specifications</a> below I need to create an oauth_signature on Android.  I'm looking for a library that handles the boiler plate code in creating a signature for accessing resources via OAuth.</p>

<blockquote>
  <ol>
  <li><p>Construct a signature ""base string"", which consists of a concatenation of three request elements:</p>
  
  <ul>
  <li>The HTTP request method.</li>
  <li>The base URL the request is being sent to. This URL should not include any query parameters. When signing calls to Google services, refer to the OAuth specification, Section 9.1.2, for relevant instructions.</li>
  <li>A normalized string of the parameters in the request (excluding the oauth_signature parameter). This includes parameters sent in the request header or body, as well as query parameters added to the request URL. To normalize the string, sort the parameters using lexicographical byte value ordering. For more details on normalizing this string, see Section 9.1.1 of the OAuth specification.</li>
  </ul></li>
  <li><p>Generate an oauth_signature using one of the following sequences:</p>
  
  <ul>
  <li>If your application is registered and you're using HMAC-SHA1, use the OAuth ""consumer secret"" value generated during registration; this value is displayed on your domain's registration page.</li>
  </ul></li>
  </ol>
</blockquote>
","<p>Here is the code i used,
just pass the value and key to the hmacSha1().. it returns hmacsha1 string;</p>

<pre><code>private static String hmacSha1(String value, String key)
            throws UnsupportedEncodingException, NoSuchAlgorithmException,
            InvalidKeyException {
        String type = ""HmacSHA1"";
        SecretKeySpec secret = new SecretKeySpec(key.getBytes(), type);
        Mac mac = Mac.getInstance(type);
        mac.init(secret);
        byte[] bytes = mac.doFinal(value.getBytes());
        return bytesToHex(bytes);
    }

    private final static char[] hexArray = ""0123456789abcdef"".toCharArray();

    private static String bytesToHex(byte[] bytes) {
        char[] hexChars = new char[bytes.length * 2];
        int v;
        for (int j = 0; j &lt; bytes.length; j++) {
            v = bytes[j] &amp; 0xFF;
            hexChars[j * 2] = hexArray[v &gt;&gt;&gt; 4];
            hexChars[j * 2 + 1] = hexArray[v &amp; 0x0F];
        }
        return new String(hexChars);
    }
</code></pre>
","32421771","11642","<java><android><oauth><sha1><hmac>","11","1","4","2015-09-06 08:58:14","5998044","0","7","411022","","2013-11-03 15:20:50","2011-05-13 21:27:40","","","2015-09-06 08:58:14"
"2003194","HMAC-SHA256 in Delphi","<p>I need to generate HMAC-SHA256 signatures for the Amazon web services API. The old DCPcrypt library has sha256 routines but does not do HMAC signing. Anyone know of a free hashing library I could use? </p>
","<p>Have you looked at the answers to <a href=""https://stackoverflow.com/questions/1402380/encryption-library-for-delphi"">this SO question?</a></p>
","2003377","11619","<delphi><amazon-web-services><hmac>","8","2","6","2018-05-25 14:21:05","2009184","0","2","","","","2010-01-04 23:51:26","","2017-05-23 12:16:38","2010-01-05 00:32:02"
"2003194","HMAC-SHA256 in Delphi","<p>I need to generate HMAC-SHA256 signatures for the Amazon web services API. The old DCPcrypt library has sha256 routines but does not do HMAC signing. Anyone know of a free hashing library I could use? </p>
","<p>HMAC is just a function that uses SHA256 to calculate a hash according to some defined rules.  If you look at <a href=""http://en.wikipedia.org/wiki/HMAC"" rel=""nofollow noreferrer"">Wikipedia</a> it has a <a href=""http://en.wikipedia.org/wiki/HMAC#Implementation"" rel=""nofollow noreferrer"">pseudocode</a> example.</p>

<p>You could also call into .NET's <a href=""http://msdn.microsoft.com/en-us/library/system.security.cryptography.hmac.aspx"" rel=""nofollow noreferrer"">HMAC Class</a> in System.Security.Cryptography via COM interrop.</p>
","2004078","11619","<delphi><amazon-web-services><hmac>","8","2","6","2018-05-25 14:21:05","2009184","0","2","","","","2010-01-04 23:51:26","","2010-01-05 04:05:59","2010-01-05 03:53:09"
"2003194","HMAC-SHA256 in Delphi","<p>I need to generate HMAC-SHA256 signatures for the Amazon web services API. The old DCPcrypt library has sha256 routines but does not do HMAC signing. Anyone know of a free hashing library I could use? </p>
","<p>My favourite answer - I would use the OpenSSL libraries, the HMAC function.
I've successfully used the OpenSSL libraries in Delphi by adopting and adapting work from M Ferrante <a href=""http://www.disi.unige.it/person/FerranteM/delphiopenssl/"" rel=""nofollow noreferrer"">http://www.disi.unige.it/person/FerranteM/delphiopenssl/</a><br />
For other OpenSSL signing etc see <a href=""https://stackoverflow.com/questions/1792541/convert-this-php-digital-signing-to-delphi/1808145#1808145"">this link</a>
<br/>
In D2010 it's something like this (libeay32 is the unit taken from the web site and slightly modified for unicode/D2010):<br/></p>

<pre><code>uses libeay32;

const
  LIBEAY_DLL_NAME = 'libeay32.dll';
  EVP_MAX_MD_SIZE = 64;

function EVP_sha256: pEVP_MD; cdecl; external LIBEAY_DLL_NAME;
function HMAC(evp: pEVP_MD; key: PByte; key_len: integer; 
              data: PByte; data_len: integer; 
              md: PByte; var md_len: integer): PByte; cdecl; external LIBEAY_DLL_NAME;

function GetHMAC(const AKey, AData: string): TBytes;
var
  key, data: TBytes;
  md_len: integer;
  res: PByte;
begin
  OpenSSL_add_all_algorithms;
  // Seed the pseudo-random number generator
  // This should be something a little more ""random""!
  RAND_load_file('c:\windows\paint.exe', 512);

  key := TEncoding.UTF8.GetBytes(AKey);
  data := TEncoding.UTF8.GetBytes(AData);
  md_len := EVP_MAX_MD_SIZE;
  SetLength(result, md_len);
  res := HMAC(EVP_sha256, @key[0], Length(key), @data[0], Length(data), @result[0], md_len);
  if (res &lt;&gt; nil) then
  begin
    SetLength(result, md_len);
  end;
end;
</code></pre>

<p>Then call it with a key phrase and data string. The result is a TBytes which can be converted as required eg to Base64 using something like JclMime or a simple HexToString type function.<br/>
For older version of Delphi you'll have to do a bit of changing of PBytes to PChars or something similar.<br/>
Disclaimer: I've got no reference data to test this on but it seems to work ok!</p>
","2005945","11619","<delphi><amazon-web-services><hmac>","8","3","6","2018-05-25 14:21:05","2009184","0","2","","","","2010-01-04 23:51:26","","2017-05-23 11:48:36","2010-01-05 12:26:50"
"2003194","HMAC-SHA256 in Delphi","<p>I need to generate HMAC-SHA256 signatures for the Amazon web services API. The old DCPcrypt library has sha256 routines but does not do HMAC signing. Anyone know of a free hashing library I could use? </p>
","<p>After a little more searching I found OpenStreamSec - which looks like it was abandoned a few years ago but still compiles in D2007.</p>

<p><a href=""http://sourceforge.net/projects/openstrsecii/"" rel=""nofollow noreferrer"">http://sourceforge.net/projects/openstrsecii/</a></p>

<p>Generating a HMAC-256 for Amazon is really simple:</p>

<pre><code>StrToMime64(HMACString(haSHA256, SecretKey, 32, DataToHash));
</code></pre>
","2009184","11619","<delphi><amazon-web-services><hmac>","8","4","6","2018-05-25 14:21:05","2009184","0","2","","","","2010-01-04 23:51:26","","","2010-01-05 21:23:12"
"2003194","HMAC-SHA256 in Delphi","<p>I need to generate HMAC-SHA256 signatures for the Amazon web services API. The old DCPcrypt library has sha256 routines but does not do HMAC signing. Anyone know of a free hashing library I could use? </p>
","<p>Regarding the answer from Jacob: OpenStrSecII is a branch of StreamSec Tools 2.1, which is sold under a commercial no-nonsense license and today (Feb 8, 2012) has support for Delphi Win32 up to and including Delphi XE2. StreamSec Tools 4.0 has support for Win64 as well.</p>
","9191113","11619","<delphi><amazon-web-services><hmac>","8","0","6","2018-05-25 14:21:05","2009184","0","2","","","","2010-01-04 23:51:26","","","2012-02-08 10:02:53"
"2003194","HMAC-SHA256 in Delphi","<p>I need to generate HMAC-SHA256 signatures for the Amazon web services API. The old DCPcrypt library has sha256 routines but does not do HMAC signing. Anyone know of a free hashing library I could use? </p>
","<p>Delphi ships with Indy installed, and Indy has a <code>TIdHMACSHA256</code> class:</p>

<pre><code>uses
  IdGlobal, IdHashSHA, IdHMAC, IdHMACSHA1, IdSSLOpenSSL;

function CalculateHMACSHA256(const value, salt: String): String;
var
  hmac: TIdHMACSHA256;
  hash: TIdBytes;
begin
  LoadOpenSSLLibrary;
  if not TIdHashSHA256.IsAvailable then
    raise Exception.Create('SHA256 hashing is not available!');
  hmac := TIdHMACSHA256.Create;
  try
    hmac.Key := IndyTextEncoding_UTF8.GetBytes(salt);
    hash := hmac.HashValue(IndyTextEncoding_UTF8.GetBytes(value));
    Result := ToHex(hash);
  finally
    hmac.Free;
  end;
end;
</code></pre>
","40182566","11619","<delphi><amazon-web-services><hmac>","8","4","6","2018-05-25 14:21:05","2009184","0","2","","","","2010-01-04 23:51:26","","2018-05-25 14:21:05","2016-10-21 17:43:24"
"13555962","MD5 HMAC With OpenSSL","<p>I was trying to generate MD5 HMAC with OpenSSL &amp; most of the code is borrowed.  The hmac being generate is incorrect:</p>

<pre><code>#include &lt;openssl/hmac.h&gt;
#include &lt;openssl/evp.h&gt;
#include &lt;syslog.h&gt;
#include &lt;string.h&gt;

#include &lt;openssl/engine.h&gt;
#include &lt;openssl/hmac.h&gt;
#include &lt;openssl/evp.h&gt;
#include &lt;stdio.h&gt;
#include &lt;string.h&gt;
#include &lt;stdlib.h&gt;

int main() 
{
  unsigned char* key = (unsigned char*) ""2012121220121212201212122012121220121212201212122012121220121212"";
  unsigned char* data = (unsigned char*) ""johndoejohndoejohndoejohndoejohndoejohndoejohndoejohndoejohndoejohndoejohndoejohndoe"";
  unsigned char* expected = (unsigned char*) ""abcd1d87dca34f334786307d0da4fcbd"";
  unsigned char* result;
  // unsigned int result_len = 16;
  unsigned int result_len = 16;
  int i;
  static char res_hexstring[32];

  // result = HMAC(EVP_sha256(), key, 4, data, 28, NULL, NULL);
  result = HMAC(EVP_md5(), key, 32, data, 28, NULL, NULL);
  for (i = 0; i &lt; result_len; i++) {
    sprintf(&amp;(res_hexstring[i * 2]), ""%02x"", result[i]);
  }

  if (strcmp((char*) res_hexstring, (char*) expected) == 0) {
    printf(""Test ok, result length %d\n"", result_len);
  } else {
    printf(""Got %s instead of %s\n"", res_hexstring, expected);
  }
}
</code></pre>

<p>The hash being produced is incorrect. I would appreciate some feedback or someone pointing me in the right direction.</p>
","<p>The third and fifth parameters to HMAC are just wrong. You have to pass the length of the key and the length of data. In your example, this is respectively 64 and 84, not 32 and 28.</p>

<p>So :</p>

<pre><code>-    result = HMAC(EVP_md5(), key, 32, data, 28, NULL, NULL);                                                                                                                                                                         
+    result = HMAC(EVP_md5(), key, 64, data, 84, NULL, NULL); 
</code></pre>

<p>With this modification, it seems to be working fine.</p>
","13586418","11203","<c><openssl><md5><hmac>","5","7","3","2018-12-27 10:35:04","","0","1","1066031","","2012-11-25 22:17:57","2012-11-25 21:59:09","","","2012-11-27 14:29:31"
"13555962","MD5 HMAC With OpenSSL","<p>I was trying to generate MD5 HMAC with OpenSSL &amp; most of the code is borrowed.  The hmac being generate is incorrect:</p>

<pre><code>#include &lt;openssl/hmac.h&gt;
#include &lt;openssl/evp.h&gt;
#include &lt;syslog.h&gt;
#include &lt;string.h&gt;

#include &lt;openssl/engine.h&gt;
#include &lt;openssl/hmac.h&gt;
#include &lt;openssl/evp.h&gt;
#include &lt;stdio.h&gt;
#include &lt;string.h&gt;
#include &lt;stdlib.h&gt;

int main() 
{
  unsigned char* key = (unsigned char*) ""2012121220121212201212122012121220121212201212122012121220121212"";
  unsigned char* data = (unsigned char*) ""johndoejohndoejohndoejohndoejohndoejohndoejohndoejohndoejohndoejohndoejohndoejohndoe"";
  unsigned char* expected = (unsigned char*) ""abcd1d87dca34f334786307d0da4fcbd"";
  unsigned char* result;
  // unsigned int result_len = 16;
  unsigned int result_len = 16;
  int i;
  static char res_hexstring[32];

  // result = HMAC(EVP_sha256(), key, 4, data, 28, NULL, NULL);
  result = HMAC(EVP_md5(), key, 32, data, 28, NULL, NULL);
  for (i = 0; i &lt; result_len; i++) {
    sprintf(&amp;(res_hexstring[i * 2]), ""%02x"", result[i]);
  }

  if (strcmp((char*) res_hexstring, (char*) expected) == 0) {
    printf(""Test ok, result length %d\n"", result_len);
  } else {
    printf(""Got %s instead of %s\n"", res_hexstring, expected);
  }
}
</code></pre>

<p>The hash being produced is incorrect. I would appreciate some feedback or someone pointing me in the right direction.</p>
","<p>You can make the all-in-one OpenSSL HMAC command tidier, if you write:</p>

<p><code>result = HMAC(EVP_md5(), key, sizeof(key)-1, data, sizeof(data)-1, NULL, NULL);</code></p>

<p>Because <code>key</code> and <code>data</code> are initialized with string literals, the last char of both is <code>\0</code>. This termination character should not be hashed. We skip this character by specifing the size of the array minus the last char.</p>

<p>You can get other Test Vectors for HMAC-MD5 from <a href=""https://tools.ietf.org/html/rfc2202"" rel=""nofollow noreferrer"">https://tools.ietf.org/html/rfc2202</a>.</p>
","41418916","11203","<c><openssl><md5><hmac>","5","0","3","2018-12-27 10:35:04","","0","1","1066031","","2012-11-25 22:17:57","2012-11-25 21:59:09","","2018-05-30 13:48:40","2017-01-01 20:50:53"
"13555962","MD5 HMAC With OpenSSL","<p>I was trying to generate MD5 HMAC with OpenSSL &amp; most of the code is borrowed.  The hmac being generate is incorrect:</p>

<pre><code>#include &lt;openssl/hmac.h&gt;
#include &lt;openssl/evp.h&gt;
#include &lt;syslog.h&gt;
#include &lt;string.h&gt;

#include &lt;openssl/engine.h&gt;
#include &lt;openssl/hmac.h&gt;
#include &lt;openssl/evp.h&gt;
#include &lt;stdio.h&gt;
#include &lt;string.h&gt;
#include &lt;stdlib.h&gt;

int main() 
{
  unsigned char* key = (unsigned char*) ""2012121220121212201212122012121220121212201212122012121220121212"";
  unsigned char* data = (unsigned char*) ""johndoejohndoejohndoejohndoejohndoejohndoejohndoejohndoejohndoejohndoejohndoejohndoe"";
  unsigned char* expected = (unsigned char*) ""abcd1d87dca34f334786307d0da4fcbd"";
  unsigned char* result;
  // unsigned int result_len = 16;
  unsigned int result_len = 16;
  int i;
  static char res_hexstring[32];

  // result = HMAC(EVP_sha256(), key, 4, data, 28, NULL, NULL);
  result = HMAC(EVP_md5(), key, 32, data, 28, NULL, NULL);
  for (i = 0; i &lt; result_len; i++) {
    sprintf(&amp;(res_hexstring[i * 2]), ""%02x"", result[i]);
  }

  if (strcmp((char*) res_hexstring, (char*) expected) == 0) {
    printf(""Test ok, result length %d\n"", result_len);
  } else {
    printf(""Got %s instead of %s\n"", res_hexstring, expected);
  }
}
</code></pre>

<p>The hash being produced is incorrect. I would appreciate some feedback or someone pointing me in the right direction.</p>
","<p>Use</p>

<pre><code>result = HMAC(EVP_md5(), key, strlen(key), data, strlen(data), NULL, NULL);
</code></pre>

<p>Instead of</p>

<pre><code>result = HMAC(EVP_md5(), key, 32, data, 28, NULL, NULL);
</code></pre>

<p>It generally work for any <strong>data</strong> &amp; <strong>key</strong></p>
","53940580","11203","<c><openssl><md5><hmac>","5","-2","3","2018-12-27 10:35:04","","0","1","1066031","","2012-11-25 22:17:57","2012-11-25 21:59:09","","2018-12-27 10:35:04","2018-12-27 06:18:19"
"8396297","Android : How to create HMAC MD5 string?","<p>I am trying to create an android MD5 hash string to equal the C# code bellow:</p>

<pre><code>private string CalculateHMACMd5(string message, string key)
{
     System.Text.ASCIIEncoding encoding = new System.Text.ASCIIEncoding();
     byte[] keyByte = encoding.GetBytes(key);
     HMACMD5 hmacmd5 = new HMACMD5(keyByte);
     byte[] messageBytes = encoding.GetBytes(message);
     byte[] hashmessage = hmacmd5.ComputeHash(messageBytes);
     string HMACMd5Value = ByteToString(hashmessage);
     return HMACMd5Value;
}

private static string ByteToString(byte[] buff)
{
    string sbinary = """";
    for (int i = 0; i &lt; buff.Length; i++)
    {
        sbinary += buff[i].ToString(""X2""); 
    }
    return (sbinary);
}
</code></pre>

<p><hr>
Android code that I currently use [<strong><em>not generating the same C# code</em></strong>]:</p>

<pre><code>        public static String sStringToHMACMD5(String sData, String sKey) 
        {
            SecretKeySpec key;
            byte[] bytes;
            String sEncodedString = null;
            try 
            {       
                key = new SecretKeySpec((sKey).getBytes(), ""ASCII"");
                Mac mac = Mac.getInstance(""HMACMD5"");
                mac.init(key);
                mac.update(sData.getBytes());

                bytes = mac.doFinal(sData.getBytes());
                StringBuffer hash = new StringBuffer();

                for (int i=0; i&lt;bytes.length; i++) {
                    String hex = Integer.toHexString(0xFF &amp;  bytes[i]);
                    if (hex.length() == 1) {
                        hash.append('0');
                    }
                    hash.append(hex);
                }
            sEncodedString = hash.      
            return sEncodedString;
        }
</code></pre>

<p>Thanks in advance.</p>
","<pre><code>public static String sStringToHMACMD5(String s, String keyString)
    {
        String sEncodedString = null;
        try
        {
            SecretKeySpec key = new SecretKeySpec((keyString).getBytes(""UTF-8""), ""HmacMD5"");
            Mac mac = Mac.getInstance(""HmacMD5"");
            mac.init(key);

            byte[] bytes = mac.doFinal(s.getBytes(""ASCII""));

            StringBuffer hash = new StringBuffer();

            for (int i=0; i&lt;bytes.length; i++) {
                String hex = Integer.toHexString(0xFF &amp;  bytes[i]);
                if (hex.length() == 1) {
                    hash.append('0');
                }
                hash.append(hex);
            }
            sEncodedString = hash.toString();
        }
        catch (UnsupportedEncodingException e) {}
        catch(InvalidKeyException e){}
        catch (NoSuchAlgorithmException e) {}
        return sEncodedString ;
    }
</code></pre>
","8396600","11186","<java><android><hash><md5><hmac>","5","21","2","2011-12-06 07:36:31","8396604","3","2","488434","","2011-12-06 07:34:24","2011-12-06 06:51:00","2011-12-16 03:23:03","","2011-12-06 07:31:05"
"8396297","Android : How to create HMAC MD5 string?","<p>I am trying to create an android MD5 hash string to equal the C# code bellow:</p>

<pre><code>private string CalculateHMACMd5(string message, string key)
{
     System.Text.ASCIIEncoding encoding = new System.Text.ASCIIEncoding();
     byte[] keyByte = encoding.GetBytes(key);
     HMACMD5 hmacmd5 = new HMACMD5(keyByte);
     byte[] messageBytes = encoding.GetBytes(message);
     byte[] hashmessage = hmacmd5.ComputeHash(messageBytes);
     string HMACMd5Value = ByteToString(hashmessage);
     return HMACMd5Value;
}

private static string ByteToString(byte[] buff)
{
    string sbinary = """";
    for (int i = 0; i &lt; buff.Length; i++)
    {
        sbinary += buff[i].ToString(""X2""); 
    }
    return (sbinary);
}
</code></pre>

<p><hr>
Android code that I currently use [<strong><em>not generating the same C# code</em></strong>]:</p>

<pre><code>        public static String sStringToHMACMD5(String sData, String sKey) 
        {
            SecretKeySpec key;
            byte[] bytes;
            String sEncodedString = null;
            try 
            {       
                key = new SecretKeySpec((sKey).getBytes(), ""ASCII"");
                Mac mac = Mac.getInstance(""HMACMD5"");
                mac.init(key);
                mac.update(sData.getBytes());

                bytes = mac.doFinal(sData.getBytes());
                StringBuffer hash = new StringBuffer();

                for (int i=0; i&lt;bytes.length; i++) {
                    String hex = Integer.toHexString(0xFF &amp;  bytes[i]);
                    if (hex.length() == 1) {
                        hash.append('0');
                    }
                    hash.append(hex);
                }
            sEncodedString = hash.      
            return sEncodedString;
        }
</code></pre>

<p>Thanks in advance.</p>
","<p>Define 'not working'. Exception? Output not as expected?, etc.</p>

<p>One obvious thing is that you are processing the same data twice:</p>

<pre><code>mac.update(sData.getBytes());
bytes = mac.doFinal(sData.getBytes());
</code></pre>

<p>To process all data in one pass, just use <code>doFinal()</code> (assuming it's not too big).
Another thing that can be wrong is the format of the key: what is the format of <code>String sKey</code>. Ideally you should be using a BASE64 encoded string, not calls to <code>getString()</code>.</p>
","8396604","11186","<java><android><hash><md5><hmac>","5","6","2","2011-12-06 07:36:31","8396604","3","2","488434","","2011-12-06 07:34:24","2011-12-06 06:51:00","2011-12-16 03:23:03","2011-12-06 07:36:31","2011-12-06 07:31:28"
"4308003","HMAC-based one time password in C# (RFC 4226 - HOTP)","<p>I am attempting to wrap my brain around generating a 6 digit/character non case sensitive expiring one-time password.</p>

<p>My source is <a href=""http://tools.ietf.org/html/rfc4226#section-5"" rel=""noreferrer"">http://tools.ietf.org/html/rfc4226#section-5</a></p>

<p>First the definition of the parameters</p>

<pre><code>C       8-byte counter value, the moving factor.  This counter
       MUST be synchronized between the HOTP generator (client)
       and the HOTP validator (server).

K       shared secret between client and server; each HOTP
       generator has a different and unique secret K.

T       throttling parameter: the server will refuse connections
       from a user after T unsuccessful authentication attempts.
</code></pre>

<p>Then we have the algorithm to generate the HOTP</p>

<pre><code>As the output of the HMAC-SHA-1 calculation is 160 bits, we must
   truncate this value to something that can be easily entered by a
   user.

                   HOTP(K,C) = Truncate(HMAC-SHA-1(K,C))
</code></pre>

<p>Then, we have Truncate defined as</p>

<pre><code>String = String[0]...String[19]
 Let OffsetBits be the low-order 4 bits of String[19]
 Offset = StToNum(OffsetBits) // 0 &lt;= OffSet &lt;= 15
 Let P = String[OffSet]...String[OffSet+3]
 Return the Last 31 bits of P
</code></pre>

<p>And then an example is offered for a 6 digit HOTP</p>

<pre><code>The following code example describes the extraction of a dynamic
binary code given that hmac_result is a byte array with the HMAC-
SHA-1 result:

    int offset   =  hmac_result[19] &amp; 0xf ;
    int bin_code = (hmac_result[offset]  &amp; 0x7f) &lt;&lt; 24
       | (hmac_result[offset+1] &amp; 0xff) &lt;&lt; 16
       | (hmac_result[offset+2] &amp; 0xff) &lt;&lt;  8
       | (hmac_result[offset+3] &amp; 0xff) ;
</code></pre>

<p>I am rather at a loss in attempting to convert this into useful C# code for generating one time passwords.  I already have code for creating an expiring HMAC as follows:</p>

<pre><code>byte[] hashBytes = alg.ComputeHash(Encoding.UTF8.GetBytes(input));
byte[] result = new byte[8 + hashBytes.Length];

hashBytes.CopyTo(result, 8);
BitConverter.GetBytes(expireDate.Ticks).CopyTo(result, 0);
</code></pre>

<p>I'm just not sure how to go from that, to 6 digits as proposed in the above algorithms.</p>
","<p>You have two issues here:</p>

<ol>
<li><p>If you are generating alpha-numeric, you are not conforming to the RFC - at this point, you can simply take any N bytes and turn them to a hex string and get alpha-numeric.  Or, <a href=""https://stackoverflow.com/questions/95105/is-there-any-built-in-way-to-convert-an-integer-to-a-string-of-any-base-in-c"">convert them to base 36</a> if you want a-z and 0-9.  Section 5.4 of the RFC is giving you the standard HOTP calc for a set <code>Digit</code> parameter (notice that <code>Digit</code> is a parameter along with <code>C</code>, <code>K</code>, and <code>T</code>).   If you are choosing to ignore this section, then you don't need to convert the code - just use what you want.</p></li>
<li><p>Your ""result"" byte array has the expiration time simply stuffed in the first 8 bytes after hashing.  If your truncation to 6-digit alphanumeric does not collect these along with parts of the hash, it may as well not be calculated at all.  It is also very easy to ""fake"" or replay - hash the secret once, then put whatever ticks you want in front of it - not really a one time password.  Note that parameter <code>C</code> in the RFC is meant to fulfill the expiring window and should be added to the input <em>prior to</em> computing the hash code.</p></li>
</ol>
","4308991","11094","<c#><hmac><one-time-password>","6","3","3","2012-01-01 18:07:47","4308991","3","9","","","","2010-11-29 20:53:22","","2017-05-23 12:30:32","2010-11-29 23:03:34"
"4308003","HMAC-based one time password in C# (RFC 4226 - HOTP)","<p>I am attempting to wrap my brain around generating a 6 digit/character non case sensitive expiring one-time password.</p>

<p>My source is <a href=""http://tools.ietf.org/html/rfc4226#section-5"" rel=""noreferrer"">http://tools.ietf.org/html/rfc4226#section-5</a></p>

<p>First the definition of the parameters</p>

<pre><code>C       8-byte counter value, the moving factor.  This counter
       MUST be synchronized between the HOTP generator (client)
       and the HOTP validator (server).

K       shared secret between client and server; each HOTP
       generator has a different and unique secret K.

T       throttling parameter: the server will refuse connections
       from a user after T unsuccessful authentication attempts.
</code></pre>

<p>Then we have the algorithm to generate the HOTP</p>

<pre><code>As the output of the HMAC-SHA-1 calculation is 160 bits, we must
   truncate this value to something that can be easily entered by a
   user.

                   HOTP(K,C) = Truncate(HMAC-SHA-1(K,C))
</code></pre>

<p>Then, we have Truncate defined as</p>

<pre><code>String = String[0]...String[19]
 Let OffsetBits be the low-order 4 bits of String[19]
 Offset = StToNum(OffsetBits) // 0 &lt;= OffSet &lt;= 15
 Let P = String[OffSet]...String[OffSet+3]
 Return the Last 31 bits of P
</code></pre>

<p>And then an example is offered for a 6 digit HOTP</p>

<pre><code>The following code example describes the extraction of a dynamic
binary code given that hmac_result is a byte array with the HMAC-
SHA-1 result:

    int offset   =  hmac_result[19] &amp; 0xf ;
    int bin_code = (hmac_result[offset]  &amp; 0x7f) &lt;&lt; 24
       | (hmac_result[offset+1] &amp; 0xff) &lt;&lt; 16
       | (hmac_result[offset+2] &amp; 0xff) &lt;&lt;  8
       | (hmac_result[offset+3] &amp; 0xff) ;
</code></pre>

<p>I am rather at a loss in attempting to convert this into useful C# code for generating one time passwords.  I already have code for creating an expiring HMAC as follows:</p>

<pre><code>byte[] hashBytes = alg.ComputeHash(Encoding.UTF8.GetBytes(input));
byte[] result = new byte[8 + hashBytes.Length];

hashBytes.CopyTo(result, 8);
BitConverter.GetBytes(expireDate.Ticks).CopyTo(result, 0);
</code></pre>

<p>I'm just not sure how to go from that, to 6 digits as proposed in the above algorithms.</p>
","<p>For anyone interested, I did figure out a way to build expiration into my one time password.  The approach is to use the created time down to the minute (ignoring seconds, milliseconds, etc).  Once you have that value, use the ticks of the DateTime as your counter, or variable C.</p>

<p><code>otpLifespan</code> is my HOTP lifespan in minutes.</p>

<pre><code>DateTime current = new DateTime(DateTime.Now.Year, DateTime.Now.Month, 
    DateTime.Now.Day, DateTime.Now.Hour, DateTime.Now.Minute, 0);

for (int x = 0; x &lt;= otpLifespan; x++)
{
    var result = NumericHOTP.Validate(hotp, key, 
        current.AddMinutes(-1 * x).Ticks);

    //return valid state if validation succeeded

    //return invalid state if the passed in value is invalid 
    //  (length, non-numeric, checksum invalid)
}

//return expired state
</code></pre>

<p>My expiring HOTP extends from my numeric HOTP which has a static validation method that checks the length, ensures it is numeric, validates the checksum if it is used, and finally compares the hotp passed in with a generated one.</p>

<p>The only downside to this is that each time you validate an expiring hotp, your worse case scenario is to check n + 1 HOTP values where n is the lifespan in minutes.</p>

<p>The java code example in the document outlining RFC 4226 was a very straightforward move into C#.  The only piece I really had to put any effort into rewriting was the hashing method.</p>

<pre><code>private static byte[] HashHMACSHA1(byte[] keyBytes, byte[] text)
{
    HMAC alg = new HMACSHA1(keyBytes);

    return alg.ComputeHash(text);
}
</code></pre>

<p>I hope this helps anyone else attempting to generate one time passwords.</p>
","4319403","11094","<c#><hmac><one-time-password>","6","2","3","2012-01-01 18:07:47","4308991","3","9","","","","2010-11-29 20:53:22","","","2010-11-30 22:33:16"
"4308003","HMAC-based one time password in C# (RFC 4226 - HOTP)","<p>I am attempting to wrap my brain around generating a 6 digit/character non case sensitive expiring one-time password.</p>

<p>My source is <a href=""http://tools.ietf.org/html/rfc4226#section-5"" rel=""noreferrer"">http://tools.ietf.org/html/rfc4226#section-5</a></p>

<p>First the definition of the parameters</p>

<pre><code>C       8-byte counter value, the moving factor.  This counter
       MUST be synchronized between the HOTP generator (client)
       and the HOTP validator (server).

K       shared secret between client and server; each HOTP
       generator has a different and unique secret K.

T       throttling parameter: the server will refuse connections
       from a user after T unsuccessful authentication attempts.
</code></pre>

<p>Then we have the algorithm to generate the HOTP</p>

<pre><code>As the output of the HMAC-SHA-1 calculation is 160 bits, we must
   truncate this value to something that can be easily entered by a
   user.

                   HOTP(K,C) = Truncate(HMAC-SHA-1(K,C))
</code></pre>

<p>Then, we have Truncate defined as</p>

<pre><code>String = String[0]...String[19]
 Let OffsetBits be the low-order 4 bits of String[19]
 Offset = StToNum(OffsetBits) // 0 &lt;= OffSet &lt;= 15
 Let P = String[OffSet]...String[OffSet+3]
 Return the Last 31 bits of P
</code></pre>

<p>And then an example is offered for a 6 digit HOTP</p>

<pre><code>The following code example describes the extraction of a dynamic
binary code given that hmac_result is a byte array with the HMAC-
SHA-1 result:

    int offset   =  hmac_result[19] &amp; 0xf ;
    int bin_code = (hmac_result[offset]  &amp; 0x7f) &lt;&lt; 24
       | (hmac_result[offset+1] &amp; 0xff) &lt;&lt; 16
       | (hmac_result[offset+2] &amp; 0xff) &lt;&lt;  8
       | (hmac_result[offset+3] &amp; 0xff) ;
</code></pre>

<p>I am rather at a loss in attempting to convert this into useful C# code for generating one time passwords.  I already have code for creating an expiring HMAC as follows:</p>

<pre><code>byte[] hashBytes = alg.ComputeHash(Encoding.UTF8.GetBytes(input));
byte[] result = new byte[8 + hashBytes.Length];

hashBytes.CopyTo(result, 8);
BitConverter.GetBytes(expireDate.Ticks).CopyTo(result, 0);
</code></pre>

<p>I'm just not sure how to go from that, to 6 digits as proposed in the above algorithms.</p>
","<p>This snippet should do what you are asking for:</p>

<pre><code>  public class UniqueId
{
    public static string GetUniqueKey()
    {
        int maxSize = 6; // whatever length you want
        char[] chars = new char[62];
        string a;
        a = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890"";
           char[] chars = new char[a.Length];
        chars = a.ToCharArray();
        int size = maxSize;
        byte[] data = new byte[1];
        RNGCryptoServiceProvider crypto = new RNGCryptoServiceProvider();
        crypto.GetNonZeroBytes(data);
        size = maxSize;
        data = new byte[size];
        crypto.GetNonZeroBytes(data);
        StringBuilder result = new StringBuilder(size);
        foreach (byte b in data)
        { result.Append(chars[b % (chars.Length - 1)]); }
        return result.ToString();
    }
}
</code></pre>
","8694601","11094","<c#><hmac><one-time-password>","6","2","3","2012-01-01 18:07:47","4308991","3","9","","","","2010-11-29 20:53:22","","","2012-01-01 18:07:47"
"18687926","Verifying hmac sha1 signature in Java","<p>I'd like to know how I could verify the signature I created. My code to create a signature  looks similar to this one: <a href=""https://stackoverflow.com/questions/6312544/hmac-sha1-how-to-do-it-properly-in-java"">HMAC-SHA1: How to do it properly in Java?</a></p>

<p>I send the message, the signature and the public key to verify the signature. Public and private key are generated using KeyPairGenerator. How can I use the public key I have to verify my signature? Or maybe can you suggest any good libraries for Java for signing and verifying signature that use HMAC SHA1?</p>
","<p>First to clarify, the <a href=""http://en.wikipedia.org/wiki/Hash-based_message_authentication_code"" rel=""noreferrer"">HMAC</a> code does not generate a signature.  It is a type of <a href=""http://en.wikipedia.org/wiki/Message_authentication_code"" rel=""noreferrer"">Message Authentication Code (MAC)</a>.</p>

<p>The latter link explains the difference between a signature and a MAC this way:</p>

<blockquote>
  <p>MACs differ from digital signatures as MAC values are both generated
  and verified using the same secret key. This implies that the sender
  and receiver of a message must agree on the same key before initiating
  communications, as is the case with symmetric encryption. For the same
  reason, MACs do not provide the property of non-repudiation offered by
  signatures specifically in the case of a network-wide shared secret
  key: any user who can verify a MAC is also capable of generating MACs
  for other messages. In contrast, a digital signature is generated
  using the private key of a key pair, which is asymmetric encryption.
  Since this private key is only accessible to its holder, a digital
  signature proves that a document was signed by none other than that
  holder. Thus, digital signatures do offer non-repudiation. However,
  non-repudiation can be provided by systems that securely bind key
  usage information to the MAC key; the same key is in possession of two
  people, but one has a copy of the key that can be used for MAC
  generation while the other has a copy of the key in a hardware
  security module that only permits MAC verification. This is commonly
  done in the finance industry.</p>
</blockquote>

<p>So in order to verify an HMAC, you need to share the key that was used to generate it.  You would send the message, the HMAC, and the receiver would have the same key you used to generate the HMAC.  They could then use the same algorithm to generate an HMAC from your message, and it should match the HMAC you sent.  Public/private keys (assymetric) are not used for this.  You need to generate a symmetric key (like AES) and securely share that with the people that will be generating/verifying the HMAC.</p>

<p>This limits the HMAC to having <code>integrity</code> and <code>authenticity</code> properties only, and not <code>non-repudiation</code>.  </p>

<p>The quote above mentioned that hardware security modules could be used to enforce the key use, and then you could get non-repudiation as long as only one person could use the key for generating the HMAC.</p>

<p>Alternatively, you could use a hybrid approach.  Use a shared symmetric key to generate the HMAC.  The HMAC in the end is a hash.  You could then sign this hash with your private key (different than the key used in the HMAC).  A third party with the symmetric key and your public key could verify you signed the HMAC, and could generate their own HMAC with the message and the shared key to make sure it matched.  This would also give you non-repudiation.</p>

<p>If you want to go this route, use the Java <a href=""http://docs.oracle.com/javase/7/docs/api/java/security/Signature.html"" rel=""noreferrer"">Signature</a> class.  The HMAC algorithm is SHA-1, and assuming your keypair is RSA, you could use the <code>NONEwithRSA</code> Signature algorithm since the input is already a SHA-1 hash.  Or you could hash it again with the <code>SHA1withRSA</code> algorithm.  As long as you generate the signature and verify with the same algorithm, it should be OK.</p>

<pre><code>    byte[] data = hmac.getBytes(""UTF-8"");

    Signature mySig = Signature.getInstance(""NONEwithRSA"");

    mySig.initSign(myPrivateKey);

    mySig.update(data);

    byte[] sigBytes = mySig.sign();

    // And to verify.

    Signature mySig2 = Signature.getInstance(""NONEwithRSA"");

    mySig2.initVerify(myPublicKey);

    boolean isSigValid = mySig2.verify(sigBytes);
</code></pre>
","18693622","10275","<java><digital-signature><hmac><hmacsha1>","3","9","1","2016-12-30 10:23:30","","0","","-1","","2017-05-23 12:08:47","2013-09-08 19:44:45","","","2013-09-09 07:46:13"
"2611251","openssl hmac using aes-256-cbc","<p>I am trying to take an AES HMAC of a file using the <code>openssl</code> command line program on Linux.  I have been looking at the man pages but can't quite figure out how successfully make a HMAC.  I can encrypt a file using the <code>enc</code> command  with <code>openssl</code> however I can't seem to create a HMAC.  The encryption looks like the following:</p>

<pre><code>openssl enc -aes-256-cbc -in plaintext -out ciphertext
</code></pre>

<p>Any advice or tutorials would be wonderful</p>
","<p>You may be asking about <a href=""http://en.wikipedia.org/wiki/CBC-MAC"" rel=""nofollow noreferrer"">CBC-MAC</a>.  For that, I think you just encrypt your message or file with an IV of 0 and then take the last block (16 bytes for AES256-cbc).  <a href=""http://www.clinicallyawesome.com/2009/07/cbc-mac-on-command-line.html"" rel=""nofollow noreferrer"">I found a blog post</a> that describes how to do this with OpenSSL:</p>

<pre><code>openssl enc -e -aes-256-cbc -K 0123456789ABCDEF -iv 0000000000000000 &lt; file | tail -c 16 | od -A n
</code></pre>

<ul>
<li><code>-K</code> is where you provide your key, which the wiki page says should be different than what you're using to encrypt the file, if you're encrypting it at all.</li>
<li><code>-iv</code> obviously provides an all-zero IV, which is the key for CBC-MAC.</li>
<li>The <code>tail -c 16</code> is to get the last AES256-cbc block, which is 16-bytes long.</li>
<li><code>od</code> is to convert it to hex, which that web site says is common.  Otherwise instead of <code>od -A n</code> you could do <code>base64</code> if that's more applicable, or leave it off completely to have just the raw bytes.</li>
</ul>

<hr>

<p>You can't take an AES HMAC of a file because AES256-cbc is a block cipher, not a hashing algorithm.  AES256-cbc is for encrypting and decrypting a file.  HMAC is for verifying a file's integrity and requires a hash algorithm at its core such as SHA-1 or MD5.</p>

<p>Are you trying to sign or verify a file, or encrypt it?  To sign, check out the <a href=""http://www.openssl.org/docs/apps/dgst.html"" rel=""nofollow noreferrer"">OpenSSL dgst</a> command and use simple HMACs like MD5 or SHA-1, or go all out and digitally sign it with DSS/DSA.</p>

<p>Also, I believe using a block cipher as a MAC is called an <a href=""http://search.cpan.org/~jcduque/Digest-EMAC-1.2/EMAC.pm"" rel=""nofollow noreferrer"">EMAC</a>, but OpenSSL doesn't do EMAC as far as I know.  EMAC just takes the last block of an encrypted file and encrypts it to create a MAC.</p>
","2611453","9556","<openssl><aes><hmac>","5","9","2","2016-12-29 23:16:04","2611453","0","2","","","","2010-04-09 22:06:13","","2016-12-29 23:16:04","2010-04-09 22:47:08"
"2611251","openssl hmac using aes-256-cbc","<p>I am trying to take an AES HMAC of a file using the <code>openssl</code> command line program on Linux.  I have been looking at the man pages but can't quite figure out how successfully make a HMAC.  I can encrypt a file using the <code>enc</code> command  with <code>openssl</code> however I can't seem to create a HMAC.  The encryption looks like the following:</p>

<pre><code>openssl enc -aes-256-cbc -in plaintext -out ciphertext
</code></pre>

<p>Any advice or tutorials would be wonderful</p>
","<p>You can perform an HMAC of a file using an AES key as input to the HMAC.</p>

<p>Encrypt the file using any AES algorithm you want (in this example -aes-256-cbc); generate an AES key based on a password (change ""password"" to your password) and use the -p switch to dump the salt, key, and iv used to encrypt.</p>

<pre><code>openssl enc -e -k password -p -aes-256-cbc -in plaintext -out ciphertext
salt=A2402067B9BFD4A1
key=EB3A88115C30F26C3987F1AB2577DF5B58C80EBEEA623506517FAD843C64E1FC
iv =B382453BCBF579CE14C0726D343F40E2
</code></pre>

<p>Create an HMAC of any object/file using a hash algorithm of your choice and the AES key that was used to encrypt the file:</p>

<pre><code>openssl dgst -hmac EB3A88115C30F26C3987F1AB2577DF5B58C80EBEEA623506517FAD843C64E1FC -sha256 ciphertext
HMAC-SHA256(ciphertext)= fa3fb9c9c743f35ba81793e2704c3fc9737cd2675011110cb1655ea7ceed2914
</code></pre>

<p>Remember the AES key for use later if you need to verify the HMAC. Note that I do not know what you are trying to accomplish and I cannot claim the above meets your cryptographic requirements, but it does show how to encrypt a file, obtain the encryption key, and use that encryption key in an HMAC computation.</p>
","21768672","9556","<openssl><aes><hmac>","5","2","2","2016-12-29 23:16:04","2611453","0","2","","","","2010-04-09 22:06:13","","2014-02-14 00:43:59","2014-02-14 00:38:24"
"39767297","How to use SHA256-HMAC in python code?","<p><a href=""https://doc.periscopedata.com/doc/embed-api"" rel=""nofollow"">I am taking message and key from this URL</a></p>

<pre><code>import hmac
import hashlib
import base64
my = ""/api/embedded_dashboard?data=%7B%22dashboard%22%3A7863%2C%22embed%22%3A%22v2%22%2C%22filters%22%3A%5B%7B%22name%22%3A%22Filter1%22%2C%22value%22%3A%22value1%22%7D%2C%7B%22name%22%3A%22Filter2%22%2C%22value%22%3A%221234%22%7D%5D%7D""
key = ""e179017a-62b0-4996-8a38-e91aa9f1""
print(hashlib.sha256(my + key).hexdigest())
</code></pre>

<p>I am getting this result:</p>

<pre><code>2df1d58a56198b2a9267a9955c31291cd454bdb3089a7c42f5d439bbacfb3b88
</code></pre>

<p>Expecting result:</p>

<pre><code>adcb671e8e24572464c31e8f9ffc5f638ab302a0b673f72554d3cff96a692740
</code></pre>
","<p>You are not making use of <code>hmac</code> at all in your code. </p>

<p>Typical way to use <code>hmac</code>, construct an HMAC object from your key, message and identify the hashing algorithm by passing in its constructor:</p>

<pre><code>h = hmac.new( key, my, hashlib.sha256 )
print( h.hexdigest() )
</code></pre>

<p>That should output </p>

<pre><code>adcb671e8e24572464c31e8f9ffc5f638ab302a0b673f72554d3cff96a692740
</code></pre>

<p>for your example data.</p>
","39767589","9415","<python><oauth><sha256><hmac>","4","11","2","2018-08-15 15:09:37","39767589","0","2","","","","2016-09-29 10:04:04","","2016-09-29 10:30:07","2016-09-29 10:18:31"
"39767297","How to use SHA256-HMAC in python code?","<p><a href=""https://doc.periscopedata.com/doc/embed-api"" rel=""nofollow"">I am taking message and key from this URL</a></p>

<pre><code>import hmac
import hashlib
import base64
my = ""/api/embedded_dashboard?data=%7B%22dashboard%22%3A7863%2C%22embed%22%3A%22v2%22%2C%22filters%22%3A%5B%7B%22name%22%3A%22Filter1%22%2C%22value%22%3A%22value1%22%7D%2C%7B%22name%22%3A%22Filter2%22%2C%22value%22%3A%221234%22%7D%5D%7D""
key = ""e179017a-62b0-4996-8a38-e91aa9f1""
print(hashlib.sha256(my + key).hexdigest())
</code></pre>

<p>I am getting this result:</p>

<pre><code>2df1d58a56198b2a9267a9955c31291cd454bdb3089a7c42f5d439bbacfb3b88
</code></pre>

<p>Expecting result:</p>

<pre><code>adcb671e8e24572464c31e8f9ffc5f638ab302a0b673f72554d3cff96a692740
</code></pre>
","<p>Some code for you, easy to use:</p>

<pre><code>import hmac
import hashlib
import binascii

def create_sha256_signature(key, message):
    byte_key = binascii.unhexlify(key)
    message = message.encode()
    return hmac.new(byte_key, message, hashlib.sha256).hexdigest().upper()

create_sha256_signature(""E49756B4C8FAB4E48222A3E7F3B97CC3"", ""TEST STRING"")
</code></pre>
","51861438","9415","<python><oauth><sha256><hmac>","4","1","2","2018-08-15 15:09:37","39767589","0","2","","","","2016-09-29 10:04:04","","","2018-08-15 15:09:37"
"47686677","How to generate HMAC-SHA256 in .Net Core?","<p>I am using this page to generate some test HMAC-SHA256 hashes for some texts: </p>

<p><a href=""https://www.liavaag.org/English/SHA-Generator/HMAC/"" rel=""noreferrer"">https://www.liavaag.org/English/SHA-Generator/HMAC/</a></p>

<p>However, when I try to use the approach in <a href=""https://docs.microsoft.com/en-us/aspnet/core/security/data-protection/consumer-apis/password-hashing"" rel=""noreferrer"">this MSDN guide</a> in my .Net Core project, I do not get the same results. Could some one explain to me how to get identical results to those I get from the previous web page in my C# code?</p>

<p>Here is my code:</p>

<pre><code>// My own GetHash method usage:
var hashed = PasswordHelper.GetHash(""Test"", Encoding.UTF8.GetBytes(""123""));

public static string GetHash(string password, byte[] salt)
{
    // derive a 256-bit subkey (use HMACSHA1 with 10,000 iterations)
    string hashed = Convert.ToBase64String(KeyDerivation.Pbkdf2(
        password: password,
        salt: salt,
        prf: KeyDerivationPrf.HMACSHA256,
        iterationCount: 10000,
        numBytesRequested: 256 / 8));
    return hashed;
}
</code></pre>
","<p>Using the following approach:</p>

<pre><code>public static String GetHash(String text, String key)
{
    // change according to your needs, an UTF8Encoding
    // could be more suitable in certain situations
    ASCIIEncoding encoding = new ASCIIEncoding();

    Byte[] textBytes = encoding.GetBytes(text);
    Byte[] keyBytes = encoding.GetBytes(key);

    Byte[] hashBytes;

    using (HMACSHA256 hash = new HMACSHA256(keyBytes))
        hashBytes = hash.ComputeHash(textBytes);

    return BitConverter.ToString(hashBytes).Replace(""-"", """").ToLower();
}
</code></pre>

<p>you will get the same result as the site you provided:</p>

<pre><code>Console.WriteLine(GetHash(""qwerty"",""123456""));
// 3364ad93c083dc76d7976b875912442615cc6f7e3ce727b2316173800ca32b3a
</code></pre>

<p>Proof:</p>

<p><a href=""https://i.stack.imgur.com/DZRux.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/DZRux.png"" alt=""Proof""></a></p>

<p>Actually, the code you are using, which is based on <a href=""https://docs.microsoft.com/en-us/aspnet/core/security/data-protection/consumer-apis/password-hashing"" rel=""noreferrer"">this tutorial</a> and on <code>KeyDerivation.Pbkdf2</code>, is producing different results because it uses a much more complex parametrization and another encoding. But despite the results being different, you should <strong>REALLY</strong> use the approach provided by the example, and stick on the <code>UTF8</code> encoding.</p>
","47686794","9018","<c#><hash><asp.net-core><.net-core><hmac>","9","24","1","2018-09-28 18:40:15","47686794","0","2","","","","2017-12-07 02:36:29","","2018-09-28 18:40:15","2017-12-07 02:50:12"
"37737857","Generate HMAC SHA256 hash using key in C++","<p>I am looking for some function or a way that would return HMAC SHA256 hash in C++ using secret key. I have seen documentation of Crypto++ and OpenSSL but it does not accept an extra parameter of secret key for computation. Can someone help me by providing some info, code snippets or links.</p>
","<p>The specifications for the SHA256 hash algorithm, and for HMAC algorithms are open specifications that anyone can read, and implement themselves.</p>

<p>A simple Google search will easily find the public open specifications for these algorithms.</p>

<p>In fact, there's even a public reference implementation of SHA256 and HMAC in <a href=""https://tools.ietf.org/html/rfc6234"" rel=""nofollow"">RFC 6234</a>.</p>
","37737959","9016","<c++><sha256><hmac>","4","0","3","2018-10-18 09:02:03","37738133","2","","608639","","2016-06-10 02:44:48","2016-06-09 23:40:13","","","2016-06-09 23:52:10"
"37737857","Generate HMAC SHA256 hash using key in C++","<p>I am looking for some function or a way that would return HMAC SHA256 hash in C++ using secret key. I have seen documentation of Crypto++ and OpenSSL but it does not accept an extra parameter of secret key for computation. Can someone help me by providing some info, code snippets or links.</p>
","<p>OpenSSL docs for <a href=""https://www.openssl.org/docs/man1.0.2/crypto/HMAC_CTX_init.html"" rel=""nofollow"">HMAC</a>, clearly state the requirement of a 'key' as part of context initialization.</p>

<pre><code>int HMAC_Init_ex(HMAC_CTX *ctx, const void *key, int key_len,
               const EVP_MD *md, ENGINE *impl);
</code></pre>

<blockquote>
  <p>HMAC() computes the message authentication code of the n bytes at d
  using the hash function evp_md and the key <strong>key</strong> which is key_len bytes
  long.</p>
</blockquote>
","37738133","9016","<c++><sha256><hmac>","4","1","3","2018-10-18 09:02:03","37738133","2","","608639","","2016-06-10 02:44:48","2016-06-09 23:40:13","","","2016-06-10 00:17:30"
"37737857","Generate HMAC SHA256 hash using key in C++","<p>I am looking for some function or a way that would return HMAC SHA256 hash in C++ using secret key. I have seen documentation of Crypto++ and OpenSSL but it does not accept an extra parameter of secret key for computation. Can someone help me by providing some info, code snippets or links.</p>
","<p>You can use <a href=""https://pocoproject.org/"" rel=""nofollow noreferrer"">POCO library</a></p>

<p>Sample code:</p>

<pre><code>class SHA256Engine : public Poco::Crypto::DigestEngine
{
public:
    enum
    {
        BLOCK_SIZE = 64,
        DIGEST_SIZE = 32
    };

    SHA256Engine()
            : DigestEngine(""SHA256"")
    {
    }

};


Poco::HMACEngine&lt;SHA256Engine&gt; hmac{secretKey};
hmac.update(string);

std::cout &lt;&lt; ""HMACE hex:"" &lt;&lt; Poco::DigestEngine::digestToHex(hmac.digest()) &lt;&lt; std::endl;// lookout difest() calls reset ;)
</code></pre>

<h1>Sample integration with POCO using cmake install:</h1>

<pre><code>mkdir build_poco/
cd build_poco/ &amp;&amp; cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=./install ../poco/
</code></pre>

<h2>CMakeLists.txt</h2>

<pre><code>CMAKE_MINIMUM_REQUIRED(VERSION 3.8)
PROJECT(SamplePoco)

SET(CMAKE_CXX_STANDARD 14)

SET(SOURCE_FILES
        src/main.cpp
        )

SET(_IMPORT_PREFIX lib/build_poco/install)

INCLUDE(lib/build_poco/install/lib/cmake/Poco/PocoFoundationTargets.cmake)
INCLUDE(lib/build_poco/install/lib/cmake/Poco/PocoNetTargets.cmake)
INCLUDE(lib/build_poco/install/lib/cmake/Poco/PocoJSONTargets.cmake)
INCLUDE(lib/build_poco/install/lib/cmake/Poco/PocoXMLTargets.cmake)
INCLUDE(lib/build_poco/install/lib/cmake/Poco/PocoCryptoTargets.cmake)
INCLUDE(lib/build_poco/install/lib/cmake/Poco/PocoUtilTargets.cmake)
INCLUDE(lib/build_poco/install/lib/cmake/Poco/PocoNetSSLTargets.cmake)


ADD_EXECUTABLE(SamplePoco ${SOURCE_FILES})
TARGET_LINK_LIBRARIES(SamplePoco
        Poco::Foundation
        Poco::Crypto
        Poco::Util
        Poco::JSON
        Poco::NetSSL
        )
TARGET_INCLUDE_DIRECTORIES(SamplePoco PUBLIC src/)
</code></pre>

<p>Sample implementation used here: <a href=""https://github.com/gelldur/abucoins-api-cpp"" rel=""nofollow noreferrer"">https://github.com/gelldur/abucoins-api-cpp</a></p>
","46624408","9016","<c++><sha256><hmac>","4","3","3","2018-10-18 09:02:03","37738133","2","","608639","","2016-06-10 02:44:48","2016-06-09 23:40:13","","2018-10-18 09:02:03","2017-10-07 19:43:20"
"34855049","Using HMAC SHA256 in Ruby","<p>I'm trying to apply HMAC-SHA256 for generate a key for an Rest API.</p>

<p>I'm doing something like this:</p>

<pre><code>def generateTransactionHash(stringToHash)
  key = '123'
  data = 'stringToHash'
  digest = OpenSSL::Digest.new('sha256')

  hmac = OpenSSL::HMAC.digest(digest, key, data)
  puts hmac
end
</code></pre>

<p>The output of this is always this: (if I put '12345' as parameter or 'HUSYED815X', I do get the same)</p>

<pre><code>ۯw/{o���p�T����:��a�h��E|q
</code></pre>

<p>The API is not working because of this... Can some one help me with that?</p>
","<p>According to the documentation <a href=""https://ruby-doc.org/stdlib-2.5.1/libdoc/openssl/rdoc/OpenSSL/HMAC.html#method-i-digest"" rel=""noreferrer""><code>OpenSSL::HMAC.digest</code></a></p>

<blockquote>
  <p>Returns the authentication code an instance represents as a binary string.</p>
</blockquote>

<p>If you have a problem using that maybe you need a hex encoded form provided by <code>OpenSSL::HMAC.hexdigest</code></p>

<p>Example</p>

<pre><code>key = 'key'
data = 'The quick brown fox jumps over the lazy dog'
digest = OpenSSL::Digest.new('sha256')

OpenSSL::HMAC.digest(digest, key, data)
#=&gt; ""\xF7\xBC\x83\xF40S\x84$\xB12\x98\xE6\xAAo\xB1C\xEFMY\xA1IF\x17Y\x97G\x9D\xBC-\x1A&lt;\xD8""

OpenSSL::HMAC.hexdigest(digest, key, data)
#=&gt; ""f7bc83f430538424b13298e6aa6fb143ef4d59a14946175997479dbc2d1a3cd8""
</code></pre>
","34877237","8923","<ruby-on-rails><ruby><sha256><hmac>","14","17","3","2019-07-30 16:01:32","34877237","5","6","","","","2016-01-18 12:41:03","","2019-07-30 16:01:32","2016-01-19 12:47:59"
"34855049","Using HMAC SHA256 in Ruby","<p>I'm trying to apply HMAC-SHA256 for generate a key for an Rest API.</p>

<p>I'm doing something like this:</p>

<pre><code>def generateTransactionHash(stringToHash)
  key = '123'
  data = 'stringToHash'
  digest = OpenSSL::Digest.new('sha256')

  hmac = OpenSSL::HMAC.digest(digest, key, data)
  puts hmac
end
</code></pre>

<p>The output of this is always this: (if I put '12345' as parameter or 'HUSYED815X', I do get the same)</p>

<pre><code>ۯw/{o���p�T����:��a�h��E|q
</code></pre>

<p>The API is not working because of this... Can some one help me with that?</p>
","<p>Try This:</p>

<pre><code>hmac = OpenSSL::HMAC.hexdigest(OpenSSL::Digest.new('sha256'), key, data)
</code></pre>
","42832500","8923","<ruby-on-rails><ruby><sha256><hmac>","14","13","3","2019-07-30 16:01:32","34877237","5","6","","","","2016-01-18 12:41:03","","2017-11-05 14:43:32","2017-03-16 11:14:24"
"34855049","Using HMAC SHA256 in Ruby","<p>I'm trying to apply HMAC-SHA256 for generate a key for an Rest API.</p>

<p>I'm doing something like this:</p>

<pre><code>def generateTransactionHash(stringToHash)
  key = '123'
  data = 'stringToHash'
  digest = OpenSSL::Digest.new('sha256')

  hmac = OpenSSL::HMAC.digest(digest, key, data)
  puts hmac
end
</code></pre>

<p>The output of this is always this: (if I put '12345' as parameter or 'HUSYED815X', I do get the same)</p>

<pre><code>ۯw/{o���p�T����:��a�h��E|q
</code></pre>

<p>The API is not working because of this... Can some one help me with that?</p>
","<p>In my case (Ticketmatic) I had to create the HMAC like above and add an Authorization header to the request with the HMAC in it. </p>

<pre><code>hmac = OpenSSL::HMAC.hexdigest(OpenSSL::Digest.new('sha256'), secret_key, access_key + name + time)
req = Net::HTTP::Get.new(uri)
req['Authorization'] = ""TM-HMAC-SHA256 key=#{access_key} ts=#{time} sign=#{hmac}""
res = Net::HTTP.start(uri.hostname, uri.port, use_ssl: true) { |http| http.request(req) }
</code></pre>

<p>You can find a full gist <a href=""https://gist.github.com/AikedeJongste/38e7e5059afd2352a7cc66fb6b691247"" rel=""nofollow noreferrer"">here</a></p>

<p>And a blogpost with more explantion <a href=""https://www.runrails.com/programming/how-to-use-hmac-sha256-to-connect-to-a-rest-api-like-ticketmatic/"" rel=""nofollow noreferrer"">here</a></p>
","53009418","8923","<ruby-on-rails><ruby><sha256><hmac>","14","-1","3","2019-07-30 16:01:32","34877237","5","6","","","","2016-01-18 12:41:03","","","2018-10-26 13:05:50"
"7047487","Android HMAC-SHA1 Different than Standard Java HMAC-SHA1","<p>I'm having issues with some HMAC on android.  I am using the SHA1 algorithm with the following code which shows up all over the web when searching for android hmac-sha1.</p>

<pre><code>        String base_string = ""This is a test string"";
        String key = ""testKey"";
        try {
            Mac mac = Mac.getInstance(""HmacSHA1"");
            SecretKeySpec secret = new SecretKeySpec(key.getBytes(""UTF-8""), mac.getAlgorithm());
            mac.init(secret);
            byte[] digest = mac.doFinal(base_string.getBytes());

            String enc = new String(digest);

            // Base 64 Encode the results
            String retVal = Base64.encodeBase64String(enc.getBytes());
            Log.v(TAG, ""String: "" + base_string);
            Log.v(TAG, ""key: "" + key);
            Log.v(TAG, ""result: "" + retVal);
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
</code></pre>

<p>To test this code I created a simple standard Java program with it (replacing the Log.v calls with System.out.println calls of course) so I can compare vs. the android version. In both instances I'm using the same test values for the base_string and key.</p>

<p>In addition I have verified the encoded results from the standard Java with some PHP functions and a validation server (using some OAuth tokens). The code works fine in the standard Java program however it does not work in the Android program.  I have done a lot of searching and cant figure out what is wrong.  Anyone ever experience this?</p>

<p>Here are the results from standard java and android...</p>

<ul>
<li>Java (and PHP): <code>fH/+pz0J5XcPZH/d608zGSn7FKA=</code></li>
<li>Android Program: <code>fH/vv73vv709Ce+/vXcPZH/vv73vv71PMxkp77+9FO+/vQ==</code></li>
</ul>

<p>Looking into it a bit more I am sure it is the hmac function and not the Base64 encode where it gets messed up as comparing those hmac values the Android version has all sorts of extra spaces and other unknown character symbols vs. the Java program.</p>

<p>Any help is appreciated!</p>
","<p>I suppose this is a String encoding problem.</p>

<p>What are you doing here?</p>

<pre><code>        String enc = new String(digest);

        // Base 64 Encode the results
        String retVal = Base64.encodeBase64String(enc.getBytes());
</code></pre>

<p>You turn the bytes in a string, and then back to a byte array again (which you then base-64 encode).</p>

<p>Instead, do this:</p>

<pre><code>        String retVal = Base64.encodeBase64String(digest);
</code></pre>

<p>In general, never ever user <code>String.getBytes()</code> or <code>new String(byte[])</code> if you want a portable program. And never try to convert an arbitrary byte arrays (which was not a string before) to a string (other than something like Base64).</p>
","7047999","8869","<java><android><sha1><hmac>","6","13","1","2013-11-03 15:20:21","7047999","1","7","411022","","2013-11-03 15:20:21","2011-08-12 23:48:27","","","2011-08-13 01:40:33"
"29862306","Encoding a string in HMAC SHA256","<p>How can I encode a string using HMAC SHA256 algorithm? I went through OpenSSL library but didn't find anything valuable. Your suggestions?</p>
","<p><a href=""https://web.archive.org/web/20150907084840/http://www.openssl.org/docs/manmaster/crypto/hmac.html"" rel=""noreferrer"">HMAC</a> and <a href=""https://web.archive.org/web/20150423055034/http://openssl.org/docs/crypto/EVP_sha256.html"" rel=""noreferrer"">SHA256</a> are separate components in OpenSSL, you'll need to glue them together yourself.  (Note that this uses the shorthand methods for doing everything in one shot with monolithic buffers; incremental processing is more complex.)</p>

<pre><code>#include &lt;openssl/evp.h&gt;
#include &lt;openssl/hmac.h&gt;

unsigned char* hmac_sha256(const void *key, int keylen,
                           const unsigned char *data, int datalen,
                           unsigned char *result, unsigned int* resultlen)
{
    return HMAC(EVP_sha256(), key, keylen, data, datalen, result, resultlen);
}
</code></pre>

<p>Even if your input is a string, the result is an arbitrary byte array; if that too needs to be a string then you'll have to apply some other transformation like hexadecimal expansion, Base64 or whatever suits your application.</p>
","29862424","8833","<c><encryption><hmac>","3","11","1","2018-03-01 15:44:30","","5","2","","","","2015-04-25 07:23:17","2015-04-25 08:53:07","2018-03-01 15:44:30","2015-04-25 07:39:52"
"38133665","Python encoded message with HMAC-SHA256","<p>I try to encoded message with HMAC-SHA256 in python according to <a href=""https://www.bitstamp.net/api/#account-balance"" rel=""noreferrer"">instructions</a></p>

<pre><code>import hmac
import hashlib

nonce = 1234
customer_id = 123232
api_key = 2342342348273482374343434
API_SECRET = 892374928347928347283473

message = nonce + customer_id + api_key
signature = hmac.new(
    API_SECRET,
    msg=message,
    digestmod=hashlib.sha256
).hexdigest().upper()
</code></pre>

<p>but I get this</p>

<blockquote>
  <p>Traceback (most recent call last):   File ""gen.py"", line 13, in
  
      digestmod=hashlib.sha256   File ""/usr/lib/python2.7/hmac.py"", line 136, in new
      return HMAC(key, msg, digestmod)   File ""/usr/lib/python2.7/hmac.py"", line 71, in <strong>init</strong>
      if len(key) > blocksize: TypeError: object of type 'long' has no len()</p>
</blockquote>

<p>Does anyone have any idea why crashes?</p>
","<p>You're using numbers where the api expects a string/bytes.</p>

<pre><code># python 2
import hmac
import hashlib

nonce = 1234
customer_id = 123232
api_key = 2342342348273482374343434
API_SECRET = 892374928347928347283473

message = '{} {} {}'.format(nonce, customer_id, api_key)
signature = hmac.new(
    str(API_SECRET),
    msg=message,
    digestmod=hashlib.sha256
).hexdigest().upper()

print signature
</code></pre>
","38133770","8782","<python><api><encode><hmac>","6","7","2","2017-10-26 13:45:31","38133770","0","","","","","2016-06-30 21:34:33","","","2016-06-30 21:45:13"
"38133665","Python encoded message with HMAC-SHA256","<p>I try to encoded message with HMAC-SHA256 in python according to <a href=""https://www.bitstamp.net/api/#account-balance"" rel=""noreferrer"">instructions</a></p>

<pre><code>import hmac
import hashlib

nonce = 1234
customer_id = 123232
api_key = 2342342348273482374343434
API_SECRET = 892374928347928347283473

message = nonce + customer_id + api_key
signature = hmac.new(
    API_SECRET,
    msg=message,
    digestmod=hashlib.sha256
).hexdigest().upper()
</code></pre>

<p>but I get this</p>

<blockquote>
  <p>Traceback (most recent call last):   File ""gen.py"", line 13, in
  
      digestmod=hashlib.sha256   File ""/usr/lib/python2.7/hmac.py"", line 136, in new
      return HMAC(key, msg, digestmod)   File ""/usr/lib/python2.7/hmac.py"", line 71, in <strong>init</strong>
      if len(key) > blocksize: TypeError: object of type 'long' has no len()</p>
</blockquote>

<p>Does anyone have any idea why crashes?</p>
","<p>If you want to execute in python3 you should do the following:</p>

<pre><code>#python 3
import hmac
import hashlib

nonce = 1
customer_id = 123456
API_SECRET = 'thekey'
api_key = 'thapikey'

message = '{} {} {}'.format(nonce, customer_id, api_key)

signature = hmac.new(bytes(API_SECRET , 'latin-1'), msg = bytes(message , 'latin-1'), digestmod = hashlib.sha256).hexdigest().upper()
print(signature)
</code></pre>
","46956070","8782","<python><api><encode><hmac>","6","7","2","2017-10-26 13:45:31","38133770","0","","","","","2016-06-30 21:34:33","","","2017-10-26 13:45:31"
"7010786","URL Signing with HMAC or OpenSSL","<p>I'm interested in url signing (e.g. <a href=""http://.../?somearg=value&amp;anotherarg=anothervalue&amp;sig=aSKS9F3KL5xc"" rel=""noreferrer"">http://.../?somearg=value&amp;anotherarg=anothervalue&amp;sig=aSKS9F3KL5xc</a>), but I have a few requirements which have left me without a solution yet.</p>

<ul>
<li>I'll be using either <code>PHP</code> or <code>Python</code> for pages, so I'll need to be able to sign and verify a signature using one of the two.</li>
<li>My plan was to use a priv/pub key scheme to sign some data, and be able to verify that the signature is valid, but here's where it gets complicated:</li>
<li>The data is not known when the verification is happening (it is not just <code>somearg=value&amp;anotherarg=anothervalue</code>)</li>
</ul>

<p>My first instinct was to use OpenSSL, e.g. with a RSA keypair, to do something along the lines of signing by: <code>openssl rsautl -sign -inkey private.pem -in sensitive -out privsigned</code>   and verifying based on the <code>privsigned</code> data and key ONLY: <code>openssl rsautl -verify -inkey public.pem -in privsigned -pubin</code>.</p>

<p>Using PHP's <code>openssl_get_privatekey()</code> and <code>openssl_sign()</code> signs the data just fine, but I need to know the (decrypted!) data in order to verify (which I will not have): <code>openssl_get_publickey()</code> and <code>openssl_verify($data, $signature, $pubkeyid);</code> from <a href=""http://php.net/openssl_verify"" rel=""noreferrer"">http://php.net/openssl_verify</a>.</p>

<p>Or am I missing something here?</p>

<hr>

<p>So I looked into HMAC, but although many hash function are available in both <code>Python</code> and <code>PHP</code>, I'm baffled as to how I'd go about <strong><em>verifying</em></strong> the hash.
<code>PHP</code>'s <code>hash_hmac()</code> allows me to create a hash using a ""key"" (or in this case a string-key). But how do I go about verifying that a hash is valid (i.e. <code>&amp;sig=</code> hasn't just been manually put in by the end user <code>&amp;sig=abcdefg1234</code>.</p>

<p>So to sum up (sorry for the long question): How can I verify that a signature/hash has been made by my server's (cert/string)key (given I can not verify by redoing the hash of said data)? And do you have any preferences as to which route I should chose, Priv/pub-key or HMAC?</p>

<p>Any pointers big or small is greatly appreciated!
Thanks in advance,</p>

<ul>
<li>Josh</li>
</ul>
","<p>HMAC is a symmetric algorithm, so there is no separate creation and checking algorithm. To check, you simply compute the hash as it should have been computed originally, and check that the result equals what you actually got from the client. The security rests on the HMAC key only existing on your server.</p>

<p>Unless you need the signatures to be verifiable by someone who <em>doesn't</em> know the secret key, HMAC is probably a better choice than public-key systems, for reasons of efficiency. It can take several milliseconds to create or verify a public-key signature (some years ago I timed one implementation at 15 ms per operation), whereas HMAC is quite fast.</p>

<p>(Oh, and you cannot verify any kind of signature without knowing the data it's supposed to sign. That wouldn't make any sense, as far as I can see).</p>
","7010918","8684","<url><verification><signing><private-key><hmac>","8","6","3","2013-09-02 22:41:27","7010918","0","2","","","","2011-08-10 12:30:31","","","2011-08-10 12:39:24"
"7010786","URL Signing with HMAC or OpenSSL","<p>I'm interested in url signing (e.g. <a href=""http://.../?somearg=value&amp;anotherarg=anothervalue&amp;sig=aSKS9F3KL5xc"" rel=""noreferrer"">http://.../?somearg=value&amp;anotherarg=anothervalue&amp;sig=aSKS9F3KL5xc</a>), but I have a few requirements which have left me without a solution yet.</p>

<ul>
<li>I'll be using either <code>PHP</code> or <code>Python</code> for pages, so I'll need to be able to sign and verify a signature using one of the two.</li>
<li>My plan was to use a priv/pub key scheme to sign some data, and be able to verify that the signature is valid, but here's where it gets complicated:</li>
<li>The data is not known when the verification is happening (it is not just <code>somearg=value&amp;anotherarg=anothervalue</code>)</li>
</ul>

<p>My first instinct was to use OpenSSL, e.g. with a RSA keypair, to do something along the lines of signing by: <code>openssl rsautl -sign -inkey private.pem -in sensitive -out privsigned</code>   and verifying based on the <code>privsigned</code> data and key ONLY: <code>openssl rsautl -verify -inkey public.pem -in privsigned -pubin</code>.</p>

<p>Using PHP's <code>openssl_get_privatekey()</code> and <code>openssl_sign()</code> signs the data just fine, but I need to know the (decrypted!) data in order to verify (which I will not have): <code>openssl_get_publickey()</code> and <code>openssl_verify($data, $signature, $pubkeyid);</code> from <a href=""http://php.net/openssl_verify"" rel=""noreferrer"">http://php.net/openssl_verify</a>.</p>

<p>Or am I missing something here?</p>

<hr>

<p>So I looked into HMAC, but although many hash function are available in both <code>Python</code> and <code>PHP</code>, I'm baffled as to how I'd go about <strong><em>verifying</em></strong> the hash.
<code>PHP</code>'s <code>hash_hmac()</code> allows me to create a hash using a ""key"" (or in this case a string-key). But how do I go about verifying that a hash is valid (i.e. <code>&amp;sig=</code> hasn't just been manually put in by the end user <code>&amp;sig=abcdefg1234</code>.</p>

<p>So to sum up (sorry for the long question): How can I verify that a signature/hash has been made by my server's (cert/string)key (given I can not verify by redoing the hash of said data)? And do you have any preferences as to which route I should chose, Priv/pub-key or HMAC?</p>

<p>Any pointers big or small is greatly appreciated!
Thanks in advance,</p>

<ul>
<li>Josh</li>
</ul>
","<p>As Henning Makholm pointed out, HMAC is a better choice than public key.  There are some best practices you should consider for your particular scenario that will impact your choices:</p>

<ul>
<li>Do you want to consider the hostname and scheme (http/https) in the signature? Maybe.</li>
<li>Do you want to consider the path in the signature? Probably.</li>
<li>Do you want to consider the query string in the signature? Probably.</li>
<li>Do you want to normalize the argument order and escaping prior to signing? Usually not.</li>
<li>Do you want to embed signature time etc (to create time-limited URLs)?</li>
<li>Do you want to tie the signed URL to some other user state, such as cookie?</li>
<li>Are you using user-generated or user-visible content directly in the HMAC? If so, you should ""salt"" the key using a value that is randomized for each request.</li>
</ul>

<p>When computing the signature, you'll need to encode it in a URL-friendly way (base64 and base32 are popular choices) and choose an HMAC algorithm (such as SHA-256), and decide how many bits of the signature you want to keep (truncating the HMAC value in half is usually safe).  If you choose base64, beware of the different alphabets used by url-safe vs non-url-safe implementations.</p>

<p>Here is a pseudocode implementation (w/o error checking or salting etc) for signing path + query string:</p>

<pre><code>const secret = ...;

def sign(path, querystring):
  return path + ""?"" + querystring + ""&amp;sig="" + url_encode(base64_encode(hmacsha256(secret, path + ""?"" + querystring).truncate(16)))

def verify(path, querystring):
  querystring_without_sig = remove_query_parameter(querystring, ""sig"")
  sig = base64_decode(url_decode(get_query_parameter(querystring, ""sig"")))
  if hmacsha256(secret, path + ""?"" + querystring_without_sig)[:16] != sig:
    raise ""invalid sig""
</code></pre>

<p>HMAC SHA256 is recommended and is available in all common languages.</p>

<p>Java:</p>

<pre><code>Mac mac = Mac.getInstance(""HmacSHA256"");
mac.init(secret);
return mac.doFinal(value.getBytes());
</code></pre>

<p>Python:</p>

<pre><code>hmac.new(secret, input, hashlib.sha256).digest()
</code></pre>

<p>PHP:</p>

<pre><code>hash_hmac(""sha256"", value, secret);
</code></pre>
","8382608","8684","<url><verification><signing><private-key><hmac>","8","10","3","2013-09-02 22:41:27","7010918","0","2","","","","2011-08-10 12:30:31","","2011-12-05 08:28:34","2011-12-05 08:22:43"
"7010786","URL Signing with HMAC or OpenSSL","<p>I'm interested in url signing (e.g. <a href=""http://.../?somearg=value&amp;anotherarg=anothervalue&amp;sig=aSKS9F3KL5xc"" rel=""noreferrer"">http://.../?somearg=value&amp;anotherarg=anothervalue&amp;sig=aSKS9F3KL5xc</a>), but I have a few requirements which have left me without a solution yet.</p>

<ul>
<li>I'll be using either <code>PHP</code> or <code>Python</code> for pages, so I'll need to be able to sign and verify a signature using one of the two.</li>
<li>My plan was to use a priv/pub key scheme to sign some data, and be able to verify that the signature is valid, but here's where it gets complicated:</li>
<li>The data is not known when the verification is happening (it is not just <code>somearg=value&amp;anotherarg=anothervalue</code>)</li>
</ul>

<p>My first instinct was to use OpenSSL, e.g. with a RSA keypair, to do something along the lines of signing by: <code>openssl rsautl -sign -inkey private.pem -in sensitive -out privsigned</code>   and verifying based on the <code>privsigned</code> data and key ONLY: <code>openssl rsautl -verify -inkey public.pem -in privsigned -pubin</code>.</p>

<p>Using PHP's <code>openssl_get_privatekey()</code> and <code>openssl_sign()</code> signs the data just fine, but I need to know the (decrypted!) data in order to verify (which I will not have): <code>openssl_get_publickey()</code> and <code>openssl_verify($data, $signature, $pubkeyid);</code> from <a href=""http://php.net/openssl_verify"" rel=""noreferrer"">http://php.net/openssl_verify</a>.</p>

<p>Or am I missing something here?</p>

<hr>

<p>So I looked into HMAC, but although many hash function are available in both <code>Python</code> and <code>PHP</code>, I'm baffled as to how I'd go about <strong><em>verifying</em></strong> the hash.
<code>PHP</code>'s <code>hash_hmac()</code> allows me to create a hash using a ""key"" (or in this case a string-key). But how do I go about verifying that a hash is valid (i.e. <code>&amp;sig=</code> hasn't just been manually put in by the end user <code>&amp;sig=abcdefg1234</code>.</p>

<p>So to sum up (sorry for the long question): How can I verify that a signature/hash has been made by my server's (cert/string)key (given I can not verify by redoing the hash of said data)? And do you have any preferences as to which route I should chose, Priv/pub-key or HMAC?</p>

<p>Any pointers big or small is greatly appreciated!
Thanks in advance,</p>

<ul>
<li>Josh</li>
</ul>
","<p>If you want to use HMAC and Python, then:</p>

<p>$ pip install ska</p>

<h2>On the client side</h2>

<pre><code>from ska import sign_url

signed_url = sign_url(
    auth_user='user', 
    secret_key='your-secret_key', 
    url='http://e.com/api/'
)
</code></pre>

<p>Produced URL looks like as follows.</p>

<p><a href=""http://e.com/api/?valid_until=1378045287.0&amp;auth_user=user&amp;signature=YlZpLFsjUKBalL4x5trhkeEgqE8%3D"">http://e.com/api/?valid_until=1378045287.0&amp;auth_user=user&amp;signature=YlZpLFsjUKBalL4x5trhkeEgqE8%3D</a></p>

<h2>On the server side</h2>

<p>Note, that in example below <code>request.GET</code> is given as example. It will most likely vary from what's used in your framework (unless you use Django).</p>

<pre><code>from ska import validate_signed_request_data

validation_result = validate_signed_request_data(
    data = request.GET, # Note, that ``request.GET`` is given as example.
    secret_key = 'your-secret_key'
)
</code></pre>

<p>The validate_signed_request_data produces a SignatureValidationResult object, which basically holds two properties:</p>

<ul>
<li>result (bool): True if data is valid. False otherwise.</li>
<li>reason (list): List of strings, indicating validation errors.</li>
</ul>
","18581681","8684","<url><verification><signing><private-key><hmac>","8","0","3","2013-09-02 22:41:27","7010918","0","2","","","","2011-08-10 12:30:31","","","2013-09-02 22:41:27"
"30706133","Create OAuth Signature with HMAC-SHA1 Encryption returns HTTP 401","<p><strong>The Question</strong><br />
Hello, I need to authenticate to an API wich needs OAuth encryption.<br />
I'm in the right direction but I am sure something is wrong with my signature base string. Since the HMACSHA1 Hash is based on a Key and BaseString, I get a wrong oauth_signature.<br />
<a href=""http://oauth.net/core/1.0a/#signing_process"" rel=""noreferrer"">OAuth Signing Process</a></p>

<p><strong>So far</strong><br /> I have been able to collect all the required pieces of data, which includes:</p>

<blockquote>
  <ul>
  <li>Consumer Key </li>
  <li>Consumer Secret </li>
  <li>Acces Token </li>
  <li>Acces Secret </li>
  <li>Sha1Hased Value (Based on Key and Message, where Message is the signature Base string) </li>
  <li>Signature Base String</li>
  </ul>
</blockquote>

<p><strong>The Problem</strong><br />
I get a HTTP(401 Bad Request) returned because of a invalid signature.<br />
<strong>note:</strong> I'm pretty sure it is how I build my <strong>Signature Base String</strong>. For info about the API Docs I used, please check bottom page.<br /></p>

<blockquote>
  <p><strong>The Code</strong> <br /></p>
</blockquote>

<p><strong>GetOAuthToken</strong> (Doing the actual request)</p>

<pre><code>public static string GetAuthorizationToken()
{
    string TimeInSecondsSince1970 = ((int)(DateTime.UtcNow - new DateTime(1970, 1, 1)).TotalSeconds).ToString();
    string Nonce = System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(TimeInSecondsSince1970
    + TimeInSecondsSince1970 + TimeInSecondsSince1970));
    HttpWebRequest httpWebRequest = (HttpWebRequest)WebRequest.Create(GetAppleApiUrl.GetUrl(AppleApiUrl.SESSION_TOKEN));
    httpWebRequest.Method = ""GET"";

    string consumer_secret = Uri.EscapeDataString(Settings.SettingsManager.consumer_secret);
    string token_secret = Uri.EscapeDataString(Settings.SettingsManager.access_secret);

    string signature_base_string = GetSignatureBaseString(TimeInSecondsSince1970, Nonce);
    string SHA1HASH = GetSha1Hash(consumer_secret + ""&amp;"" + token_secret, signature_base_string);

    string Header =
       ""OAuth realm="" + '""' + ""ADM"" + '""' + "","" +
       ""oauth_consumer_key="" + '""' + Settings.SettingsManager.consumer_key + '""' + "","" +
       ""oauth_token="" + '""' + Settings.SettingsManager.access_token + '""' + "","" +
       ""oauth_signature_method="" + '""' + ""HMAC-SHA1"" + '""' + "","" +
       ""oauth_signature= "" + '""' + SHA1HASH + '""' + "","" + 
       ""oauth_timestamp="" + '""' + TimeInSecondsSince1970 + '""' + "","" +
       ""oauth_nonce="" + '""' + Nonce + '""' + "","" +
       ""oauth_version="" + '""' + ""1.0"" + '""' + "","";

    httpWebRequest.Headers.Add(HttpRequestHeader.Authorization, Header);
    var Result = httpWebRequest.GetResponse();

    return Result.ToString();
}
</code></pre>

<p><strong>GetSha1Hash</strong></p>

<pre><code>public static string GetSha1Hash(string key, string message)
{
    var encoding = new System.Text.ASCIIEncoding();

    byte[] keyBytes = encoding.GetBytes(key);
    byte[] messageBytes = encoding.GetBytes(message);

    string Sha1Result = string.Empty;

    using (HMACSHA1 SHA1 = new HMACSHA1(keyBytes))
    {
        var Hashed = SHA1.ComputeHash(messageBytes);
        Sha1Result = Convert.ToBase64String(Hashed);
    }

    return Sha1Result;
}
</code></pre>

<p><strong>GetSignatureBaseString</strong></p>

<pre><code>public static string GetSignatureBaseString(string TimeStamp, string Nonce)
{
    //1.Convert the HTTP Method to uppercase and set the output string equal to this value.
    string Signature_Base_String = ""Get"";
    Signature_Base_String = Signature_Base_String.ToUpper();

    //2.Append the ‘&amp;’ character to the output string.
    Signature_Base_String = Signature_Base_String + ""&amp;"";

    //3.Percent encode the URL and append it to the output string.
    string PercentEncodedURL = Uri.EscapeDataString(GetAppleApiUrl.GetUrl(AppleApiUrl.SESSION_TOKEN));
    Signature_Base_String = Signature_Base_String + PercentEncodedURL;

    //4.Append the ‘&amp;’ character to the output string.
    Signature_Base_String = Signature_Base_String + ""&amp;"";

    //5.append parameter string to the output string.
    Signature_Base_String = Signature_Base_String + Uri.EscapeDataString(""oauth_consumer_key="" + Settings.SettingsManager.consumer_key);
    Signature_Base_String = Signature_Base_String + Uri.EscapeDataString(""&amp;oauth_token="" + Settings.SettingsManager.access_token);
    Signature_Base_String = Signature_Base_String + Uri.EscapeDataString(""&amp;oauth_signature_method="" +""HMAC-SHA1"");
    Signature_Base_String = Signature_Base_String + Uri.EscapeDataString(""&amp;oauth_timestamp="" + TimeStamp);
    Signature_Base_String = Signature_Base_String + Uri.EscapeDataString(""&amp;oauth_nonce="" + Nonce);
    Signature_Base_String = Signature_Base_String + Uri.EscapeDataString(""&amp;oauth_version="" + ""1.0"");

    return Signature_Base_String;
}
</code></pre>

<blockquote>
  <p><strong><em>Result (Fiddler)</em></strong>
  <img src=""https://i.stack.imgur.com/RopzT.png"" alt=""Fiddler Result"">
  <br />
  <strong><em>API Doc</em></strong>
  <img src=""https://i.stack.imgur.com/RaZkj.png"" alt=""enter image description here""></p>
</blockquote>
","<p>It looks like you should sort parameters alphabetically in <code>Header</code> string and within <code>GetSignatureBaseString</code> method as described in <a href=""https://stackoverflow.com/questions/4789036/problem-with-oauth-post-with-parameters#comment14485789_4789210"">this comment</a> and <a href=""http://dev.twitter.com/oauth/overview/creating-signatures"" rel=""nofollow noreferrer"">Twitter OAuth documentation</a> </p>
","30754420","8613","<c#><.net><http><oauth><hmac>","12","6","1","2017-03-22 12:34:33","30754420","7","4","13995","","2017-03-22 12:34:33","2015-06-08 09:56:54","","2017-05-23 12:25:31","2015-06-10 11:03:46"
"29147654","How should I implement 'Token Based Authentication' to a set of web APIs in a secure way using PHP and MySQL (without using OAuth)?","<p>I've developed few web APIs in PHP using Slim framework which are used by mobile apps(iOS and Android) to process their requests and get the required data.</p>

<p>Eventually, in every API I'm sending the requests received from mobile app to the respective function present in a code base of my website. Then the respective function accepts the request and request parameters, process the request and returns the required data. Then the API returns the data to the mobile app in JSON format. This is the current work flow.</p>

<p>Now, I want to make the availability of website resources (i.e. functions from website's code base and data) subject to user authentication. In short, I want to implement 'Token Based Authentication' scheme in this scenario. </p>

<p>Following should be the flow after I implement 'Token Based Authentication':</p>

<ol>
<li><p>When user first time logs in to the system by sending user name and password in an request to the login API, one security token will get generate upon successful verification of the user name and password combination for that particular user. This security token will also get stored into some MySQL database table along with the user name/password/some hashed value to identify the user in further processing. If the verification fails the security token should not get generate and the user should also not log in.</p></li>
<li><p>Upon successful login, the generated security token will be sent back to the user in success response of login API. Now until the user is logged in with each subsequent request this token will be sent to the concerned API and ultimately it will be sent to the authentication function for the authentication of it's validity.</p></li>
<li><p>If with any request an invalid token is sent then the ""Please login first "" message should be sent in response and the website resource should not get access.</p></li>
<li><p>Once user logs out this security token entry should be deleted from the database or whatever appropriate action should be taken on it.</p></li>
</ol>

<p>Since, I'm working on 'Token Based Authentication' for the first time in my career I might be wrong with my above approach. If I'm doing anything wrong please correct my mistake/s.</p>

<p>I found following links but those I didn't find much useful since they are lacking working code example with step-by-step description :</p>

<p><a href=""https://github.com/jeteokeeffe/php-hmac-rest-api"" rel=""nofollow"">PHP HMAC Restful API that uses Phalcon Micro framework</a></p>

<p><a href=""https://github.com/firebase/php-jwt"" rel=""nofollow"">PEAR package for JWT</a></p>

<p>If you could provide me the entire code which consists the database table creation, connectivity between PHP and MySQL, then creation of security token, checking the validity of security token for the current logged in user, etc. it would be really great for me.</p>

<p>Also, if you could give the working code example for any of the above two (or both) options as your answer to this question that would also be very great. If you have any other option apart from the two I provided with complete working code example you are welcome with your answer. </p>

<p>N.B.:- Please don't suggest me to use OAuth authentication process.</p>

<p>Following is the code I tried on my own but I don't know whether it's right or wrong. Is my approach correct or wrong?</p>

<p>To create a token I use this function which takes as parameters, the user's data</p>

<pre><code>define('SECRET_KEY', ""fakesecretkey"");

function createToken($data)
{
    /* Create a part of token using secretKey and other stuff */
    $tokenGeneric = SECRET_KEY.$_SERVER[""SERVER_NAME""]; // It can be 'stronger' of course

    /* Encoding token */
    $token = hash('sha256', $tokenGeneric.$data);

    return array('token' =&gt; $token, 'userData' =&gt; $data);
}
</code></pre>

<p>So a user can authentified himself and receive an array which contains a token (genericPart + his data, encoded), and hisData not encoded :</p>

<pre><code>function auth($login, $password)
{
    // we check user. For instance, it's ok, and we get his ID and his role.
    $userID = 1;
    $userRole = ""admin"";

    // Concatenating data with TIME
    $data = time().""_"".$userID.""-"".$userRole;
    $token = createToken($data);
    echo json_encode($token);
}
</code></pre>

<p>Then the user can send me his token + his un-encoded data in order to check :</p>

<pre><code>define('VALIDITY_TIME', 3600);

function checkToken($receivedToken, $receivedData)
{
    /* Recreate the generic part of token using secretKey and other stuff */
    $tokenGeneric = SECRET_KEY.$_SERVER[""SERVER_NAME""];

    // We create a token which should match
    $token = hash('sha256', $tokenGeneric.$receivedData);   

    // We check if token is ok !
    if ($receivedToken != $token)
    {
        echo 'wrong Token !';
        return false;
    }

    list($tokenDate, $userData) = explode(""_"", $receivedData);
    // here we compare tokenDate with current time using VALIDITY_TIME to check if the token is expired
    // if token expired we return false

    // otherwise it's ok and we return a new token
    return createToken(time().""#"".$userData);   
}

$check = checkToken($_GET['token'], $_GET['data']);
if ($check !== false)
    echo json_encode(array(""secureData"" =&gt; ""Oo"")); // And we add the new token for the next request
</code></pre>

<p>Am I right?</p>
","<p>You could do it this way.</p>

<p>Each user has a private key (a random alpha-numeric <em>x</em> long string) - which is unique to each user.</p>

<p>On every request, you can <code>hash_hmac</code> the request with their private key which will generate a unique request key for each user. For example:</p>

<pre><code> Request:
 GET /v1/products/coffee

 Private key: 
 ww9k6fcysu30sbuzu7ez57z2kzvefyxwosrjcnwo
</code></pre>

<p>I would then generate a request key like;</p>

<pre><code>hash_hmac(""sha1"", ""GET /v1/products/coffee"", ""ww9k6fcysu30sbuzu7ez57z2kzvefyxwosrjcnwo"");
</code></pre>

<p>This would give me a request key of: <code>45751dce6ef93655a71e7b82a6179591c346c2c1</code> for this <code>GET</code> request only. It will also ensure the client intended for this endpoint and hasn't been tampered with.</p>

<p>On the receiving end you would perform the same <code>hash_hmac</code> routine with the users private key (they would need to pass in their username in the request - for example - to perform a lookup to fetch the private key) and compare the two results.</p>

<pre><code>hash_hmac(""sha1"", $_SERVER['REQUEST_METHOD'] . "" "" . $_SERVER['REDIRECT_URL'], $user_private_key);
</code></pre>

<p>For added bonus, you would get a hash for POST/PUT body content and append that in the request query string and authenticate that on the receiving end. For example;</p>

<pre><code>$bodyhash = md5(implode("","", $_POST));
</code></pre>

<p>When a user logs out, deactivate the private key and assign them a new one on next login.</p>
","29148078","8452","<php><authentication><token><hmac><jwt>","5","0","2","2016-01-05 00:43:41","","0","2","472495","","2016-01-05 00:43:41","2015-03-19 14:46:02","","","2015-03-19 15:03:22"
"29147654","How should I implement 'Token Based Authentication' to a set of web APIs in a secure way using PHP and MySQL (without using OAuth)?","<p>I've developed few web APIs in PHP using Slim framework which are used by mobile apps(iOS and Android) to process their requests and get the required data.</p>

<p>Eventually, in every API I'm sending the requests received from mobile app to the respective function present in a code base of my website. Then the respective function accepts the request and request parameters, process the request and returns the required data. Then the API returns the data to the mobile app in JSON format. This is the current work flow.</p>

<p>Now, I want to make the availability of website resources (i.e. functions from website's code base and data) subject to user authentication. In short, I want to implement 'Token Based Authentication' scheme in this scenario. </p>

<p>Following should be the flow after I implement 'Token Based Authentication':</p>

<ol>
<li><p>When user first time logs in to the system by sending user name and password in an request to the login API, one security token will get generate upon successful verification of the user name and password combination for that particular user. This security token will also get stored into some MySQL database table along with the user name/password/some hashed value to identify the user in further processing. If the verification fails the security token should not get generate and the user should also not log in.</p></li>
<li><p>Upon successful login, the generated security token will be sent back to the user in success response of login API. Now until the user is logged in with each subsequent request this token will be sent to the concerned API and ultimately it will be sent to the authentication function for the authentication of it's validity.</p></li>
<li><p>If with any request an invalid token is sent then the ""Please login first "" message should be sent in response and the website resource should not get access.</p></li>
<li><p>Once user logs out this security token entry should be deleted from the database or whatever appropriate action should be taken on it.</p></li>
</ol>

<p>Since, I'm working on 'Token Based Authentication' for the first time in my career I might be wrong with my above approach. If I'm doing anything wrong please correct my mistake/s.</p>

<p>I found following links but those I didn't find much useful since they are lacking working code example with step-by-step description :</p>

<p><a href=""https://github.com/jeteokeeffe/php-hmac-rest-api"" rel=""nofollow"">PHP HMAC Restful API that uses Phalcon Micro framework</a></p>

<p><a href=""https://github.com/firebase/php-jwt"" rel=""nofollow"">PEAR package for JWT</a></p>

<p>If you could provide me the entire code which consists the database table creation, connectivity between PHP and MySQL, then creation of security token, checking the validity of security token for the current logged in user, etc. it would be really great for me.</p>

<p>Also, if you could give the working code example for any of the above two (or both) options as your answer to this question that would also be very great. If you have any other option apart from the two I provided with complete working code example you are welcome with your answer. </p>

<p>N.B.:- Please don't suggest me to use OAuth authentication process.</p>

<p>Following is the code I tried on my own but I don't know whether it's right or wrong. Is my approach correct or wrong?</p>

<p>To create a token I use this function which takes as parameters, the user's data</p>

<pre><code>define('SECRET_KEY', ""fakesecretkey"");

function createToken($data)
{
    /* Create a part of token using secretKey and other stuff */
    $tokenGeneric = SECRET_KEY.$_SERVER[""SERVER_NAME""]; // It can be 'stronger' of course

    /* Encoding token */
    $token = hash('sha256', $tokenGeneric.$data);

    return array('token' =&gt; $token, 'userData' =&gt; $data);
}
</code></pre>

<p>So a user can authentified himself and receive an array which contains a token (genericPart + his data, encoded), and hisData not encoded :</p>

<pre><code>function auth($login, $password)
{
    // we check user. For instance, it's ok, and we get his ID and his role.
    $userID = 1;
    $userRole = ""admin"";

    // Concatenating data with TIME
    $data = time().""_"".$userID.""-"".$userRole;
    $token = createToken($data);
    echo json_encode($token);
}
</code></pre>

<p>Then the user can send me his token + his un-encoded data in order to check :</p>

<pre><code>define('VALIDITY_TIME', 3600);

function checkToken($receivedToken, $receivedData)
{
    /* Recreate the generic part of token using secretKey and other stuff */
    $tokenGeneric = SECRET_KEY.$_SERVER[""SERVER_NAME""];

    // We create a token which should match
    $token = hash('sha256', $tokenGeneric.$receivedData);   

    // We check if token is ok !
    if ($receivedToken != $token)
    {
        echo 'wrong Token !';
        return false;
    }

    list($tokenDate, $userData) = explode(""_"", $receivedData);
    // here we compare tokenDate with current time using VALIDITY_TIME to check if the token is expired
    // if token expired we return false

    // otherwise it's ok and we return a new token
    return createToken(time().""#"".$userData);   
}

$check = checkToken($_GET['token'], $_GET['data']);
if ($check !== false)
    echo json_encode(array(""secureData"" =&gt; ""Oo"")); // And we add the new token for the next request
</code></pre>

<p>Am I right?</p>
","<p>Based on our discussion, you could do something akin to OAuth2.0. I would recommend implementing the full spec, but since it is your application, you could make changes.</p>

<p>Here is a graph from <a href=""https://tools.ietf.org/html/rfc6750"" rel=""nofollow"">RFC 6750</a></p>

<pre><code>+--------+                               +---------------+
 |        |--(A)- Authorization Request -&gt;|   Resource    |
 |        |                               |     Owner     |
 |        |&lt;-(B)-- Authorization Grant ---|               |
 |        |                               +---------------+
 |        |
 |        |                               +---------------+
 |        |--(C)-- Authorization Grant --&gt;| Authorization |
 | Client |                               |     Server    |
 |        |&lt;-(D)----- Access Token -------|  (Slim API)   |
 |        |                               +---------------+
 |        |
 |        |                               +---------------+
 |        |--(E)----- Access Token ------&gt;|    Resource   |
 |        |                               |     Server    |
 |        |&lt;-(F)--- Protected Resource ---|               |
 +--------+                               +---------------+
</code></pre>

<p>In slim, you could have as few as three endpoints:</p>

<p>POST username/password:</p>

<p><strong>/oauth/v1/authenticate/</strong></p>

<p>returns <code>{ token: foo }</code></p>

<p>GET where {token} is your unique token</p>

<p><strong>/oauth/v1/token/{token}</strong></p>

<p>returns <code>{ username: joe, permissions['page:admin','users:full'], expires: 123456}</code></p>

<p>DELETE pass the {token}</p>

<p><strong>/oauth/v1/token/revoke</strong></p>

<p>replies with <code>200 OK</code> and an empty body.</p>

<p>Now, how it works:</p>

<ul>
<li>When they auth, just return a JSON object with your <code>token</code>, which the client stores in something like a cookie.</li>
<li>The client passes this to your resource server in a header as identified in the RFC <em><a href=""https://tools.ietf.org/html/rfc6750#section-2.1"" rel=""nofollow"">section 2.1</a></em> (which looks up the user permissions in a database/nosql/whatever):</li>
</ul>

<blockquote>
  <p>GET /resource HTTP/1.1</p>

<pre><code> Host: server.example.com

 Authorization: Bearer mF_9.B5f-4.1JqM
</code></pre>
</blockquote>

<p>Your resource server contacts the Slim API on the back-end to determine your permissions. The server then decides what you're allowed to see.</p>

<p>If you don't like sending it as a header, see <a href=""https://tools.ietf.org/html/rfc6750#section-2.2"" rel=""nofollow"">section 2.2</a>, which describes how to send it in the body, or <a href=""https://tools.ietf.org/html/rfc6750#section-2.3"" rel=""nofollow"">section 2.3</a> which sends it as a URI query.</p>

<p>These obviously do not need to be different servers. You can implement it how you wish. </p>
","29158331","8452","<php><authentication><token><hmac><jwt>","5","2","2","2016-01-05 00:43:41","","0","2","472495","","2016-01-05 00:43:41","2015-03-19 14:46:02","","","2015-03-20 02:22:49"
"32029595","HMAC Algorithm (SHA256) in Classic ASP VBScript","<p>I'm trying to write an HMAC function in Classic ASP using SHA256 as the hash. I thought I got it right, but the results aren't the same for the examples listed on the <a href=""https://en.wikipedia.org/wiki/Hash-based_message_authentication_code"" rel=""nofollow noreferrer"">Wikipedia page</a>. I've seen several examples of people using HMAC SHA256 in Classic ASP by including a WSC. This is not what I want to do. </p>

<p>Here's the function:</p>

<pre class=""lang-vb prettyprint-override""><code>Public Function HMAC_SHA256(prmKey, prmData)
    Dim theKey : theKey = prmKey
    Dim Block_Size, O_Pad, I_Pad
    Block_Size = 64
    O_Pad = 92 'HEX: 5c'
    I_Pad = 54 'HEX: 36'

    Dim iter, iter2
    If Len(theKey) &lt; Block_Size Then
        For iter = 1 to Block_Size - Len(theKey)
            theKey = theKey &amp; chr(0)
        Next
    ElseIf Len(theKey) &gt; Block_Size Then
        theKey = SHA256(theKey)
    End If

    Dim o_key_pad : o_key_pad = """"
    Dim i_key_pad : i_key_pad = """"
    For iter = 1 to Block_Size
        o_key_pad = o_key_pad &amp; Chr(Asc(Mid(theKey,iter,1)) xor O_Pad)
        i_key_pad = i_key_pad &amp; Chr(Asc(Mid(theKey,iter,1)) xor I_Pad)
    Next

    HMAC_SHA256 = SHA256(o_key_pad &amp; SHA256(i_key_pad &amp; prmData))
End Function
</code></pre>

<p>And here's the pseudocode from Wikipedia's HMAC:</p>

<pre><code>function hmac (key, message)
    if (length(key) &gt; blocksize) then
        key = hash(key) // keys longer than blocksize are shortened
    end if
    if (length(key) &lt; blocksize) then
        key = key ∥ [0x00 * (blocksize - length(key))] // keys shorter than blocksize are zero-padded (where ∥ is concatenation)
    end if

    o_key_pad = [0x5c * blocksize] ⊕ key // Where blocksize is that of the underlying hash function
    i_key_pad = [0x36 * blocksize] ⊕ key // Where ⊕ is exclusive or (XOR)

    return hash(o_key_pad ∥ hash(i_key_pad ∥ message)) // Where ∥ is concatenation
end function
</code></pre>

<p>I can't for the life of me determine what's wrong here. I imagine someone's going to tell me it's impossible in ASP and that's why there are so many suggestions to use the WSC. If this is the case, can someone explain why it's impossible? I don't see anything that should make this impossible.</p>

<p>Thanks!</p>

<p>EDIT: I've made sure the SHA256 function I use is giving the correct hashes, so it's nothing to do with that. I've also tried UCase'ing the results of the SHA256 function, and no dice.</p>

<p>EDIT2: Added example from wiki page.</p>
","<p>Well, I once implemented TEA (tiny encryption algorithm) in classic ASP and had similar problems. In my case, the root cause was, that ASP saves the strings you are concatenating (&amp; char) again as UTF-16 and so the offsets did not always match up where I expected them. </p>

<p>I don't know if this applies to your use case, since I had to work with UTF-8 special characters.</p>

<p>My solution was to work with an array of longs, that I could target properly with my binary functions. Here are the functions to work with this array, hoping they are helpful for you.  </p>

<pre class=""lang-vb prettyprint-override""><code>    '*******************************************************************************
    ' getArrayFromInputString (FUNCTION)
    '
    ' PARAMETERS:
    ' (In) - s_source - Source string (format is defined by n_options)
    ' (In) - n_blocksize - Blocksize, which is corrected by padding
    ' (In) - n_options - Options using follobing bits:
    '        1: string is in HEX format (e.g. DFD14DAFD9C555C07FEB8F3DA90DEA27)

    ' RETURN VALUE:
    ' long array
    '
    ' DESCRIPTION:
    ' allows to import strings in various formats for all input functions
    '*******************************************************************************
    private function getArrayFromInputString(s_source, n_blocksize, n_options)
        ' n_options:

        dim a_out, s_padded_string

        if (n_options AND 1) = 1 then
            s_padded_string = padString(s_source, n_blocksize * 2, ""0"")
            a_out = convertHexStringToArray(s_padded_string)
        else
            if b_unicode_ then
                s_padded_string = padString(s_source, int(n_blocksize / 2), "" "")
                a_out = convertStringToArray_Unicode(s_padded_string)
            else    
                s_padded_string = padString(s_source, n_blocksize, "" "")
                a_out = convertStringToArray(s_padded_string)
            end if
        end if

        getArrayFromInputString = a_out
    end function


    '*******************************************************************************
    ' convertStringToArray (FUNCTION)
    '
    ' PARAMETERS:
    ' (In) - s_source - Source string to build the array from
    '                   length MUST be in multiples of 4!
    '
    ' RETURN VALUE:
    ' Array of type Long - Length is 4 times smaller than the string length
    '
    ' DESCRIPTION:
    ' Blocks of four characters are calculated into one Long entry of the result array
    '*******************************************************************************
    private function convertStringToArray(s_source) ' returns long array
        dim a_out, n_index, n_length, n_temp
        dim n_array_index, n_nibble

        n_length = len(s_source)
        redim a_out(int(n_length / 4))

        for n_index=0 to n_length - 1
            n_temp = asc(mid(s_source, n_index + 1, 1))
            n_array_index = int(n_index / 4)
            n_nibble = n_index MOD 4

            a_out(n_array_index) = AddUnsigned(a_out(n_array_index), LShift(n_temp, (3 - n_nibble) * 8))
        next
        convertStringToArray = a_out
    end function

    '*******************************************************************************
    ' convertHexStringToArray (unicode version)
    private function convertStringToArray_Unicode(s_source) ' returns long array
        dim a_out, n_index, n_length, n_temp
        dim n_array_index, n_nibble

        n_length = len(s_source)
        redim a_out(int(n_length / 2))

        for n_index=0 to n_length - 1
            n_temp = ascw(mid(s_source, n_index + 1, 1))

            n_array_index = int(n_index / 2)
            n_nibble = (n_index MOD 2)

            a_out(n_array_index) = AddUnsigned(a_out(n_array_index), LShift(n_temp, (1 - n_nibble) * 16))
        next
        convertStringToArray_Unicode = a_out
    end function

    '*******************************************************************************
    ' convertHexStringToArray (FUNCTION)
    '
    ' PARAMETERS:
    ' (In) - s_source - Source string in hex format, e.g. ""EFCE016503CDDB53""
    '                   length MUST be in multiples of 8!
    '
    ' RETURN VALUE:
    ' Array of type Long - Length is 8 times smaller than the string length
    '
    ' DESCRIPTION:
    ' Blocks of eight characters are calculated into one Long entry of the result array
    '*******************************************************************************
    private function convertHexStringToArray(s_source) ' returns long array
        dim a_out, n_index, n_length, n_temp
        dim n_array_index, n_nibble

        n_length = len(s_source)
        redim a_out(int(n_length / 8))

        for n_index=0 to n_length - 1 step 2
            n_temp = CInt(""&amp;H"" &amp; mid(s_source, n_index + 1, 2))
            n_array_index = int(n_index / 8)
            n_nibble = int((n_index MOD 8) / 2)

            a_out(n_array_index) = AddUnsigned(a_out(n_array_index), LShift(n_temp, (3 - n_nibble) * 8))
        next
        convertHexStringToArray = a_out
    end function


    '*******************************************************************************
    ' padString (FUNCTION)
    '
    ' PARAMETERS:
    ' (In) - s_source
    ' (In) - n_blocksize
    ' (In) - s_padding_char
    '
    ' RETURN VALUE:
    ' String - padded source string
    '
    ' DESCRIPTION:
    ' ensure, that the plaintext is multiples of n_blocksize bytes long, the needed amount of s_padding_char is applied
    '*******************************************************************************
    private function padString(s_source, n_blocksize, s_padding_char)
        dim s_out, n_length, n_padding, n_index

        s_out = s_source
        n_length = len(s_source)
        if n_length MOD n_blocksize&gt;0 then
            n_padding = n_blocksize - n_length MOD n_blocksize
            for n_index=1 to n_padding
                s_out = s_out &amp; left(s_padding_char, 1)
            next
        end if

        padString = s_out
    end function

    '*******************************************************************************
    ' printArray (FUNCTION)
    '
    ' PARAMETERS:
    ' (In) - s_prefix - just a string to be written in front for distinction of multiple arrays
    ' (In) - a_data - long array to print out
    '
    ' RETURN VALUE:
    ' none
    '
    ' DESCRIPTION:
    ' debug output function
    '*******************************************************************************
    private function printArray(s_prefix, a_data)
        dim n_index
        for n_index=0 to UBound(a_data) - 1
            Response.Write ""&lt;p&gt;"" &amp; s_prefix &amp; a_data(n_index) &amp; "" - "" &amp; getHex(a_data(n_index)) &amp; ""&lt;/p&gt;"" &amp; vbNewline
        next
    end function

    '*******************************************************************************
    ' Some more little helper functions
    '*******************************************************************************
    private function getHex(n_value)
        getHex = Right(""00000000"" &amp; Hex(n_value), 8)
    end function

    private function getStringFromLong(n_value)
        getStringFromLong = _
            Chr(RShift(n_value, 24) AND &amp;HFF) &amp; _
            Chr(RShift(n_value, 16) AND &amp;HFF) &amp; _
            Chr(RShift(n_value, 8) AND &amp;HFF) &amp; _
            Chr(n_value AND &amp;HFF)
    end function

    private function getStringFromLong_Unicode(n_value)
        dim s_temp

        s_temp = getHex(n_value)
        getStringFromLong_Unicode = _
            ChrW(int(""&amp;H"" &amp; mid(s_temp, 1, 4))) &amp; _
            ChrW(int(""&amp;H"" &amp; mid(s_temp, 5, 4)))
    end function
</code></pre>
","32052144","8447","<asp-classic><hmac>","3","3","3","2019-01-16 15:20:59","","1","0","297408","","2018-02-12 13:44:43","2015-08-15 21:34:58","","2018-02-13 14:07:03","2015-08-17 13:48:58"
"32029595","HMAC Algorithm (SHA256) in Classic ASP VBScript","<p>I'm trying to write an HMAC function in Classic ASP using SHA256 as the hash. I thought I got it right, but the results aren't the same for the examples listed on the <a href=""https://en.wikipedia.org/wiki/Hash-based_message_authentication_code"" rel=""nofollow noreferrer"">Wikipedia page</a>. I've seen several examples of people using HMAC SHA256 in Classic ASP by including a WSC. This is not what I want to do. </p>

<p>Here's the function:</p>

<pre class=""lang-vb prettyprint-override""><code>Public Function HMAC_SHA256(prmKey, prmData)
    Dim theKey : theKey = prmKey
    Dim Block_Size, O_Pad, I_Pad
    Block_Size = 64
    O_Pad = 92 'HEX: 5c'
    I_Pad = 54 'HEX: 36'

    Dim iter, iter2
    If Len(theKey) &lt; Block_Size Then
        For iter = 1 to Block_Size - Len(theKey)
            theKey = theKey &amp; chr(0)
        Next
    ElseIf Len(theKey) &gt; Block_Size Then
        theKey = SHA256(theKey)
    End If

    Dim o_key_pad : o_key_pad = """"
    Dim i_key_pad : i_key_pad = """"
    For iter = 1 to Block_Size
        o_key_pad = o_key_pad &amp; Chr(Asc(Mid(theKey,iter,1)) xor O_Pad)
        i_key_pad = i_key_pad &amp; Chr(Asc(Mid(theKey,iter,1)) xor I_Pad)
    Next

    HMAC_SHA256 = SHA256(o_key_pad &amp; SHA256(i_key_pad &amp; prmData))
End Function
</code></pre>

<p>And here's the pseudocode from Wikipedia's HMAC:</p>

<pre><code>function hmac (key, message)
    if (length(key) &gt; blocksize) then
        key = hash(key) // keys longer than blocksize are shortened
    end if
    if (length(key) &lt; blocksize) then
        key = key ∥ [0x00 * (blocksize - length(key))] // keys shorter than blocksize are zero-padded (where ∥ is concatenation)
    end if

    o_key_pad = [0x5c * blocksize] ⊕ key // Where blocksize is that of the underlying hash function
    i_key_pad = [0x36 * blocksize] ⊕ key // Where ⊕ is exclusive or (XOR)

    return hash(o_key_pad ∥ hash(i_key_pad ∥ message)) // Where ∥ is concatenation
end function
</code></pre>

<p>I can't for the life of me determine what's wrong here. I imagine someone's going to tell me it's impossible in ASP and that's why there are so many suggestions to use the WSC. If this is the case, can someone explain why it's impossible? I don't see anything that should make this impossible.</p>

<p>Thanks!</p>

<p>EDIT: I've made sure the SHA256 function I use is giving the correct hashes, so it's nothing to do with that. I've also tried UCase'ing the results of the SHA256 function, and no dice.</p>

<p>EDIT2: Added example from wiki page.</p>
","<p>The issue is because VBScript String is not a bytearray, so when you concat chr(0) you are adding 2 0 bytes to string.</p>

<p>Anyway VBScript is a nighmare for managing bytes and words, so I suggest you use a crypt javascript API that we have wrapped for ASP VBScript use.</p>

<p>You could get more details, and our contact info in this repository: <a href=""https://github.com/ictmanagement/redsysHMAC256_API_ASP"" rel=""nofollow"">https://github.com/ictmanagement/redsysHMAC256_API_ASP</a></p>

<p>A complete example:</p>

<pre><code>&lt;!-- #include file=""./dvim_brix_crypto-js-master_VB.asp"" --&gt;

'/******  MAC Function ******/
'Input String|WordArray , Returns WordArray
Function mac256(ent, key) 
    Dim encWA
    Set encWA = ConvertUtf8StrToWordArray(ent)
    Dim keyWA
    Set keyWA = ConvertUtf8StrToWordArray(key)
    Dim resWA
    Set resWA = CryptoJS.HmacSHA256(encWA, keyWA)
    Set mac256 = resWA
End Function

'Input (Utf8)String|WordArray Returns WordArray
Function ConvertUtf8StrToWordArray(data)
    If (typename(data) = ""String"") Then
        Set ConvertUtf8StrToWordArray = CryptoJS.enc.Utf8.parse(data)
    Elseif (typename(data) = ""JScriptTypeInfo"") Then
        On error resume next
        'Set ConvertUtf8StrToWordArray = CryptoJS.enc.Utf8.parse(data.toString(CryptoJS.enc.Utf8)) 
        Set ConvertUtf8StrToWordArray = CryptoJS.lib.WordArray.create().concat(data) 'Just assert that data is WordArray
        If Err.number&gt;0 Then
            Set ConvertUtf8StrToWordArray = Nothing
        End if
        On error goto 0
    Else
        Set ConvertUtf8StrToWordArray = Nothing
    End if
End Function

Dim test
test = ""Hi guys""
key = ""guyb u oisd qiu dqid qew"" 'You could create a WordArray from Hex String, Utf8 String, etc.
Dim res
res = mac256(test,key) 'Result is a WordArray, so
Response.Write res.toString(CryptoJS.enc.Hex)
</code></pre>
","35511504","8447","<asp-classic><hmac>","3","0","3","2019-01-16 15:20:59","","1","0","297408","","2018-02-12 13:44:43","2015-08-15 21:34:58","","2016-02-20 17:36:55","2016-02-19 17:42:46"
"32029595","HMAC Algorithm (SHA256) in Classic ASP VBScript","<p>I'm trying to write an HMAC function in Classic ASP using SHA256 as the hash. I thought I got it right, but the results aren't the same for the examples listed on the <a href=""https://en.wikipedia.org/wiki/Hash-based_message_authentication_code"" rel=""nofollow noreferrer"">Wikipedia page</a>. I've seen several examples of people using HMAC SHA256 in Classic ASP by including a WSC. This is not what I want to do. </p>

<p>Here's the function:</p>

<pre class=""lang-vb prettyprint-override""><code>Public Function HMAC_SHA256(prmKey, prmData)
    Dim theKey : theKey = prmKey
    Dim Block_Size, O_Pad, I_Pad
    Block_Size = 64
    O_Pad = 92 'HEX: 5c'
    I_Pad = 54 'HEX: 36'

    Dim iter, iter2
    If Len(theKey) &lt; Block_Size Then
        For iter = 1 to Block_Size - Len(theKey)
            theKey = theKey &amp; chr(0)
        Next
    ElseIf Len(theKey) &gt; Block_Size Then
        theKey = SHA256(theKey)
    End If

    Dim o_key_pad : o_key_pad = """"
    Dim i_key_pad : i_key_pad = """"
    For iter = 1 to Block_Size
        o_key_pad = o_key_pad &amp; Chr(Asc(Mid(theKey,iter,1)) xor O_Pad)
        i_key_pad = i_key_pad &amp; Chr(Asc(Mid(theKey,iter,1)) xor I_Pad)
    Next

    HMAC_SHA256 = SHA256(o_key_pad &amp; SHA256(i_key_pad &amp; prmData))
End Function
</code></pre>

<p>And here's the pseudocode from Wikipedia's HMAC:</p>

<pre><code>function hmac (key, message)
    if (length(key) &gt; blocksize) then
        key = hash(key) // keys longer than blocksize are shortened
    end if
    if (length(key) &lt; blocksize) then
        key = key ∥ [0x00 * (blocksize - length(key))] // keys shorter than blocksize are zero-padded (where ∥ is concatenation)
    end if

    o_key_pad = [0x5c * blocksize] ⊕ key // Where blocksize is that of the underlying hash function
    i_key_pad = [0x36 * blocksize] ⊕ key // Where ⊕ is exclusive or (XOR)

    return hash(o_key_pad ∥ hash(i_key_pad ∥ message)) // Where ∥ is concatenation
end function
</code></pre>

<p>I can't for the life of me determine what's wrong here. I imagine someone's going to tell me it's impossible in ASP and that's why there are so many suggestions to use the WSC. If this is the case, can someone explain why it's impossible? I don't see anything that should make this impossible.</p>

<p>Thanks!</p>

<p>EDIT: I've made sure the SHA256 function I use is giving the correct hashes, so it's nothing to do with that. I've also tried UCase'ing the results of the SHA256 function, and no dice.</p>

<p>EDIT2: Added example from wiki page.</p>
","<p>A long time ago I used this SHA256 construction. I think you can still use it in your classic asp pages, save code as asp file and do a virtual include in your page. You can use SHA256(string) to encrypt given string to a 64 char length like this: 6eea044931e914308aab890967338b2fe7e88de181a27e704c284d2b39580284.</p>

<p>To make it more robust you could add the rowid or timestamp plus password when you insert it into the database. This way it also needs to compare RowID+PASS or RowID+TimeStamp+PASS to the hash. </p>

<p>I have used this for many years without any problem. It is not the fastest and best written script but it works.</p>

<pre><code>Private m_lOnBits(30)
Private m_l2Power(30)
Private K(63)

Private Const BITS_TO_A_BYTE = 8
Private Const BYTES_TO_A_WORD = 4
Private Const BITS_TO_A_WORD = 32

m_lOnBits(0) = CLng(1)
m_lOnBits(1) = CLng(3)
m_lOnBits(2) = CLng(7)
m_lOnBits(3) = CLng(15)
m_lOnBits(4) = CLng(31)
m_lOnBits(5) = CLng(63)
m_lOnBits(6) = CLng(127)
m_lOnBits(7) = CLng(255)
m_lOnBits(8) = CLng(511)
m_lOnBits(9) = CLng(1023)
m_lOnBits(10) = CLng(2047)
m_lOnBits(11) = CLng(4095)
m_lOnBits(12) = CLng(8191)
m_lOnBits(13) = CLng(16383)
m_lOnBits(14) = CLng(32767)
m_lOnBits(15) = CLng(65535)
m_lOnBits(16) = CLng(131071)
m_lOnBits(17) = CLng(262143)
m_lOnBits(18) = CLng(524287)
m_lOnBits(19) = CLng(1048575)
m_lOnBits(20) = CLng(2097151)
m_lOnBits(21) = CLng(4194303)
m_lOnBits(22) = CLng(8388607)
m_lOnBits(23) = CLng(16777215)
m_lOnBits(24) = CLng(33554431)
m_lOnBits(25) = CLng(67108863)
m_lOnBits(26) = CLng(134217727)
m_lOnBits(27) = CLng(268435455)
m_lOnBits(28) = CLng(536870911)
m_lOnBits(29) = CLng(1073741823)
m_lOnBits(30) = CLng(2147483647)

m_l2Power(0) = CLng(1)
m_l2Power(1) = CLng(2)
m_l2Power(2) = CLng(4)
m_l2Power(3) = CLng(8)
m_l2Power(4) = CLng(16)
m_l2Power(5) = CLng(32)
m_l2Power(6) = CLng(64)
m_l2Power(7) = CLng(128)
m_l2Power(8) = CLng(256)
m_l2Power(9) = CLng(512)
m_l2Power(10) = CLng(1024)
m_l2Power(11) = CLng(2048)
m_l2Power(12) = CLng(4096)
m_l2Power(13) = CLng(8192)
m_l2Power(14) = CLng(16384)
m_l2Power(15) = CLng(32768)
m_l2Power(16) = CLng(65536)
m_l2Power(17) = CLng(131072)
m_l2Power(18) = CLng(262144)
m_l2Power(19) = CLng(524288)
m_l2Power(20) = CLng(1048576)
m_l2Power(21) = CLng(2097152)
m_l2Power(22) = CLng(4194304)
m_l2Power(23) = CLng(8388608)
m_l2Power(24) = CLng(16777216)
m_l2Power(25) = CLng(33554432)
m_l2Power(26) = CLng(67108864)
m_l2Power(27) = CLng(134217728)
m_l2Power(28) = CLng(268435456)
m_l2Power(29) = CLng(536870912)
m_l2Power(30) = CLng(1073741824)

K(0) = &amp;H428A2F98
K(1) = &amp;H71374491
K(2) = &amp;HB5C0FBCF
K(3) = &amp;HE9B5DBA5
K(4) = &amp;H3956C25B
K(5) = &amp;H59F111F1
K(6) = &amp;H923F82A4
K(7) = &amp;HAB1C5ED5
K(8) = &amp;HD807AA98
K(9) = &amp;H12835B01
K(10) = &amp;H243185BE
K(11) = &amp;H550C7DC3
K(12) = &amp;H72BE5D74
K(13) = &amp;H80DEB1FE
K(14) = &amp;H9BDC06A7
K(15) = &amp;HC19BF174
K(16) = &amp;HE49B69C1
K(17) = &amp;HEFBE4786
K(18) = &amp;HFC19DC6
K(19) = &amp;H240CA1CC
K(20) = &amp;H2DE92C6F
K(21) = &amp;H4A7484AA
K(22) = &amp;H5CB0A9DC
K(23) = &amp;H76F988DA
K(24) = &amp;H983E5152
K(25) = &amp;HA831C66D
K(26) = &amp;HB00327C8
K(27) = &amp;HBF597FC7
K(28) = &amp;HC6E00BF3
K(29) = &amp;HD5A79147
K(30) = &amp;H6CA6351
K(31) = &amp;H14292967
K(32) = &amp;H27B70A85
K(33) = &amp;H2E1B2138
K(34) = &amp;H4D2C6DFC
K(35) = &amp;H53380D13
K(36) = &amp;H650A7354
K(37) = &amp;H766A0ABB
K(38) = &amp;H81C2C92E
K(39) = &amp;H92722C85
K(40) = &amp;HA2BFE8A1
K(41) = &amp;HA81A664B
K(42) = &amp;HC24B8B70
K(43) = &amp;HC76C51A3
K(44) = &amp;HD192E819
K(45) = &amp;HD6990624
K(46) = &amp;HF40E3585
K(47) = &amp;H106AA070
K(48) = &amp;H19A4C116
K(49) = &amp;H1E376C08
K(50) = &amp;H2748774C
K(51) = &amp;H34B0BCB5
K(52) = &amp;H391C0CB3
K(53) = &amp;H4ED8AA4A
K(54) = &amp;H5B9CCA4F
K(55) = &amp;H682E6FF3
K(56) = &amp;H748F82EE
K(57) = &amp;H78A5636F
K(58) = &amp;H84C87814
K(59) = &amp;H8CC70208
K(60) = &amp;H90BEFFFA
K(61) = &amp;HA4506CEB
K(62) = &amp;HBEF9A3F7
K(63) = &amp;HC67178F2

Private Function LShift(lValue, iShiftBits)
    If iShiftBits = 0 Then
       LShift = lValue
       Exit Function
    ElseIf iShiftBits = 31 Then
        If lValue And 1 Then
            LShift = &amp;H80000000
        Else
            LShift = 0
        End If
        Exit Function
    ElseIf iShiftBits &lt; 0 Or iShiftBits &gt; 31 Then
        Err.Raise 6
    End If

    If (lValue And m_l2Power(31 - iShiftBits)) Then
        LShift = ((lValue And m_lOnBits(31 - (iShiftBits + 1))) *    m_l2Power(iShiftBits)) Or &amp;H80000000
    Else
        LShift = ((lValue And m_lOnBits(31 - iShiftBits)) * m_l2Power(iShiftBits))
    End If
End Function

Private Function RShift(lValue, iShiftBits)
    If iShiftBits = 0 Then
        RShift = lValue
        Exit Function
    ElseIf iShiftBits = 31 Then
        If lValue And &amp;H80000000 Then
            RShift = 1
        Else
            RShift = 0
        End If
        Exit Function
    ElseIf iShiftBits &lt; 0 Or iShiftBits &gt; 31 Then
        Err.Raise 6
    End If

    RShift = (lValue And &amp;H7FFFFFFE) \ m_l2Power(iShiftBits)

    If (lValue And &amp;H80000000) Then
        RShift = (RShift Or (&amp;H40000000 \ m_l2Power(iShiftBits - 1)))
    End If
End Function

Private Function AddUnsigned(lX, lY)
    Dim lX4, lY4, lX8, lY8, lResult

    lX8 = lX And &amp;H80000000
    lY8 = lY And &amp;H80000000
    lX4 = lX And &amp;H40000000
    lY4 = lY And &amp;H40000000

    lResult = (lX And &amp;H3FFFFFFF) + (lY And &amp;H3FFFFFFF)

    If lX4 And lY4 Then
        lResult = lResult Xor &amp;H80000000 Xor lX8 Xor lY8
    ElseIf lX4 Or lY4 Then
        If lResult And &amp;H40000000 Then
            lResult = lResult Xor &amp;HC0000000 Xor lX8 Xor lY8
        Else
            lResult = lResult Xor &amp;H40000000 Xor lX8 Xor lY8
        End If
    Else
        lResult = lResult Xor lX8 Xor lY8
    End If

    AddUnsigned = lResult
End Function

Private Function Ch(x, y, z)
    Ch = ((x And y) Xor ((Not x) And z))
End Function

Private Function Maj(x, y, z)
    Maj = ((x And y) Xor (x And z) Xor (y And z))
End Function

Private Function S(x, n)
    S = (RShift(x, (n And m_lOnBits(4))) Or LShift(x, (32 - (n And   m_lOnBits(4)))))
End Function

Private Function R(x, n)
    R = RShift(x, cLng(n And m_lOnBits(4)))
End Function

Private Function Sigma0(x)
    Sigma0 = (S(x, 2) Xor S(x, 13) Xor S(x, 22))
End Function

Private Function Sigma1(x)
    Sigma1 = (S(x, 6) Xor S(x, 11) Xor S(x, 25))
End Function

Private Function Gamma0(x)
    Gamma0 = (S(x, 7) Xor S(x, 18) Xor R(x, 3))
End Function

Private Function Gamma1(x)
    Gamma1 = (S(x, 17) Xor S(x, 19) Xor R(x, 10))
End Function

Private Function ConvertToWordArray(sMessage)
    Dim lMessageLength, lNumberOfWords, lWordArray(), lBytePosition, lByteCount, lWordCount, lByte

    Const MODULUS_BITS = 512
    Const CONGRUENT_BITS = 448

    lMessageLength = Len(sMessage)

    lNumberOfWords = (((lMessageLength + ((MODULUS_BITS - CONGRUENT_BITS) \ BITS_TO_A_BYTE)) \ (MODULUS_BITS \ BITS_TO_A_BYTE)) + 1) * (MODULUS_BITS \ BITS_TO_A_WORD)
    ReDim lWordArray(lNumberOfWords - 1)

    lBytePosition = 0
    lByteCount = 0
    Do Until lByteCount &gt;= lMessageLength
        lWordCount = lByteCount \ BYTES_TO_A_WORD

        lBytePosition = (3 - (lByteCount Mod BYTES_TO_A_WORD)) * BITS_TO_A_BYTE

        lByte = AscB(Mid(sMessage, lByteCount + 1, 1))

        lWordArray(lWordCount) = lWordArray(lWordCount) Or LShift(lByte, lBytePosition)
        lByteCount = lByteCount + 1
    Loop

    lWordCount = lByteCount \ BYTES_TO_A_WORD
lBytePosition = (3 - (lByteCount Mod BYTES_TO_A_WORD)) * BITS_TO_A_BYTE

    lWordArray(lWordCount) = lWordArray(lWordCount) Or LShift(&amp;H80, lBytePosition)

    lWordArray(lNumberOfWords - 1) = LShift(lMessageLength, 3)
    lWordArray(lNumberOfWords - 2) = RShift(lMessageLength, 29)

    ConvertToWordArray = lWordArray
End Function

Public Function SHA256(sMessage)
    Dim HASH(7), M, W(63), a, b, c, d, e, f, g, h, i, j, T1, T2

    HASH(0) = &amp;H6A09E667
    HASH(1) = &amp;HBB67AE85
    HASH(2) = &amp;H3C6EF372
    HASH(3) = &amp;HA54FF53A
    HASH(4) = &amp;H510E527F
    HASH(5) = &amp;H9B05688C
    HASH(6) = &amp;H1F83D9AB
    HASH(7) = &amp;H5BE0CD19

    M = ConvertToWordArray(sMessage)

    For i = 0 To UBound(M) Step 16
        a = HASH(0)
        b = HASH(1)
        c = HASH(2)
        d = HASH(3)
        e = HASH(4)
        f = HASH(5)
        g = HASH(6)
        h = HASH(7)

        For j = 0 To 63
           If j &lt; 16 Then
              W(j) = M(j + i)
           Else
               W(j) = AddUnsigned(AddUnsigned(AddUnsigned(Gamma1(W(j - 2)), W(j - 7)), Gamma0(W(j - 15))), W(j - 16))
           End If

           T1 = AddUnsigned(AddUnsigned(AddUnsigned(AddUnsigned(h, Sigma1(e)), Ch(e, f, g)), K(j)), W(j))
           T2 = AddUnsigned(Sigma0(a), Maj(a, b, c))

           h = g
           g = f
           f = e
           e = AddUnsigned(d, T1)
           d = c
           c = b
           b = a
           a = AddUnsigned(T1, T2)
        Next

        HASH(0) = AddUnsigned(a, HASH(0))
        HASH(1) = AddUnsigned(b, HASH(1))
        HASH(2) = AddUnsigned(c, HASH(2))
        HASH(3) = AddUnsigned(d, HASH(3))
        HASH(4) = AddUnsigned(e, HASH(4))
        HASH(5) = AddUnsigned(f, HASH(5))
        HASH(6) = AddUnsigned(g, HASH(6))
        HASH(7) = AddUnsigned(h, HASH(7))
     Next

     SHA256 = LCase(Right(""00000000"" &amp; Hex(HASH(0)), 8) &amp; Right(""00000000"" &amp; Hex(HASH(1)), 8) &amp; Right(""00000000"" &amp; Hex(HASH(2)), 8) &amp; Right(""00000000"" &amp; Hex(HASH(3)), 8) &amp; Right(""00000000"" &amp; Hex(HASH(4)), 8) &amp; Right(""00000000"" &amp; Hex(HASH(5)), 8) &amp; Right(""00000000"" &amp; Hex(HASH(6)), 8) &amp; Right(""00000000"" &amp; Hex(HASH(7)), 8))
End Function
</code></pre>
","37721116","8447","<asp-classic><hmac>","3","1","3","2019-01-16 15:20:59","","1","0","297408","","2018-02-12 13:44:43","2015-08-15 21:34:58","","","2016-06-09 08:50:18"
"42100488","How do I sign a POST request using HMAC-SHA512 and the Python requests library?","<p>I'm trying to use Python to access the trading API at poloniex.com, a cryptocurrency exchange. To do this I must follow this prescription:</p>

<blockquote>
  <p>All calls to the trading API are sent via HTTP POST to <a href=""https://poloniex.com/tradingApi"" rel=""noreferrer"">https://poloniex.com/tradingApi</a> and must contain the following headers:</p>
  
  <p>Key - Your API key.<br>
  Sign - The query's POST data signed by your key's ""secret"" according to the HMAC-SHA512 method.  </p>
  
  <p>Additionally, all queries must include a ""nonce"" POST parameter. The nonce parameter is an integer which must always be greater than the previous nonce used.</p>
</blockquote>

<p>Here is what I have so far. My current issue is that I do not know how to compile the POST url so that it can be signed without sending the incomplete request first. This obviously doesn't work.</p>

<pre><code>import requests
import hmac
import hashlib
import time

headers = { 'nonce': '',
            'Key' : 'myKey',
            'Sign': '',}
payload = { 'command': 'returnCompleteBalances',
            'account': 'all'}
secret = 'mySecret'

headers['nonce'] = int(time.time())
response = requests.post( 'https://poloniex.com/tradingApi', params= payload, headers= headers )
headers['Sign'] = hmac.new( secret, response.url, hashlib.sha512)
</code></pre>
","<p>Create a <a href=""http://docs.python-requests.org/en/master/user/advanced/#prepared-requests"" rel=""noreferrer""><em>prepared</em> request</a>; you can add headers to that after the body has been created:</p>

<pre><code>import requests
import hmac
import hashlib


request = requests.Request(
    'POST', 'https://poloniex.com/tradingApi',
    data=payload, headers=headers)
prepped = request.prepare()
signature = hmac.new(secret, prepped.body, digestmod=hashlib.sha512)
prepped.headers['Sign'] = signature.hexdigest()

with requests.Session() as session:
    response = session.send(prepped)
</code></pre>

<p>I changed your <code>params</code> argument to <code>data</code>; for a POST request it is customary to send the parameters in the body, not the URL.</p>

<p>For the nonce, I'd use a <a href=""https://docs.python.org/3/library/itertools.html#itertools.count"" rel=""noreferrer""><code>itertools.count()</code> object</a>, seeded from the current time so restarts don't affect it. According to the <a href=""https://poloniex.com/support/api/"" rel=""noreferrer"">Poloniex API documentation</a> (which you quoted in your question), the nonce is part of the POST body, not the headers, so put it in the <code>payload</code> dictionary:</p>

<pre><code>from itertools import count
import time

# store as a global variable
NONCE_COUNTER = count(int(time.time() * 1000))

# then every time you create a request
payload['nonce'] = next(NONCE_COUNTER)
</code></pre>

<p>Using <code>int(time.time())</code> would re-use the same number if you created more than one request per second. The <a href=""http://pastebin.com/fbkheaRb"" rel=""noreferrer"">example code provided by Poloniex</a> uses <code>int(time.time()*1000)</code> to make it possible to create a request every microsecond instead, but using your own monotonically increasing counter (seeded from <code>time.time()</code>) is far more robust.</p>

<p>You can also encapsulate the digest signing process in a <a href=""http://docs.python-requests.org/en/master/user/advanced/#custom-authentication"" rel=""noreferrer"">custom authentication object</a>; such an object is passed in the prepared request as the last step in preparation:</p>

<pre><code>import hmac
import hashlib

class BodyDigestSignature(object):
    def __init__(self, secret, header='Sign', algorithm=hashlib.sha512):
        self.secret = secret
        self.header = header
        self.algorithm = algorithm

    def __call__(self, request):
        body = request.body
        if not isinstance(body, bytes):   # Python 3
            body = body.encode('latin1')  # standard encoding for HTTP
        signature = hmac.new(self.secret, body, digestmod=self.algorithm)
        request.headers[self.header] = signature.hexdigest()
        return request
</code></pre>

<p>Use this with your <code>requests</code> calls:</p>

<pre><code>response = requests.post(
    'https://poloniex.com/tradingApi',
    data=payload, headers=headers, auth=BodyDigestSignature(secret))
</code></pre>

<p>The argument passed in is the secret used in the HMAC digest; you can also pass in  a different header name.</p>
","42100642","8359","<python><python-requests><hmac>","11","21","1","2018-02-06 15:12:40","42100642","0","3","100297","","2017-02-07 21:55:01","2017-02-07 21:38:25","","2018-02-06 15:12:40","2017-02-07 21:47:07"
"839280","The correct way to encrypt a string using HmacSHA256 in VB.NET","<p>I need to create a keyed hash for a string of XML to send to a 3rd party. This is the code I am using but it is producing a different hash than the example that the 3rd party has sent me. I have been through all the tutorials I can find and re-read MSDN again and again. What am I doing wrong? Or should I suspect a problem at the other end?</p>

<pre><code>Public Shared Function HashString(ByVal StringToHash As String) As String
    Dim myEncoder As New System.Text.UTF32Encoding
    Dim Key() As Byte = myEncoder.GetBytes(My.Settings.PortalHASH)
    Dim XML() As Byte = myEncoder.GetBytes(StringToHash)
    Dim myHMACSHA256 As New System.Security.Cryptography.HMACSHA256(Key)
    Dim HashCode As Byte() = myHMACSHA256.ComputeHash(XML)
    Return Convert.ToBase64String(HashCode)
End Function
</code></pre>

<p>It needs to be base-64 encoded, which is why I have the last line.</p>

<p>Thanks</p>
","<p>I can't comment on the correctness of the VB, but from the obviousness of the naming, I can say it looks correct.</p>

<p>So there's not enough information here to say whats wrong; and you've likely said everything you know.  Therefore, the people to verify this for you would be your third party.  They'd be able to say what was wrong.</p>

<p>PS: strange that there is no nonce sent by the other party as a challenge?</p>
","839298","8170","<vb.net><hash><encryption><hmac><sha256>","0","0","2","2015-02-26 14:54:34","839638","5","","3911632","","2015-02-26 14:54:34","2009-05-08 10:49:34","","","2009-05-08 10:54:27"
"839280","The correct way to encrypt a string using HmacSHA256 in VB.NET","<p>I need to create a keyed hash for a string of XML to send to a 3rd party. This is the code I am using but it is producing a different hash than the example that the 3rd party has sent me. I have been through all the tutorials I can find and re-read MSDN again and again. What am I doing wrong? Or should I suspect a problem at the other end?</p>

<pre><code>Public Shared Function HashString(ByVal StringToHash As String) As String
    Dim myEncoder As New System.Text.UTF32Encoding
    Dim Key() As Byte = myEncoder.GetBytes(My.Settings.PortalHASH)
    Dim XML() As Byte = myEncoder.GetBytes(StringToHash)
    Dim myHMACSHA256 As New System.Security.Cryptography.HMACSHA256(Key)
    Dim HashCode As Byte() = myHMACSHA256.ComputeHash(XML)
    Return Convert.ToBase64String(HashCode)
End Function
</code></pre>

<p>It needs to be base-64 encoded, which is why I have the last line.</p>

<p>Thanks</p>
","<p>(Read my comments)<br>
If My.Settings.PortalHASH is the Base64 encoded key you need to do this:</p>

<pre><code>Dim Key() As Byte = Convert.FromBase64String(My.Settings.PortalHASH)
</code></pre>
","839638","8170","<vb.net><hash><encryption><hmac><sha256>","0","1","2","2015-02-26 14:54:34","839638","5","","3911632","","2015-02-26 14:54:34","2009-05-08 10:49:34","","","2009-05-08 12:46:38"
"14141066","Getting current MachineKey, or equivilent, for HMAC (in web-farm)","<p>I am using <a href=""http://msdn.microsoft.com/en-us/library/system.security.cryptography.hmacsha256.aspx"" rel=""nofollow"">HMACSHA256</a> for message authentication in a web-farm environment.</p>

<p>Within the web-farm each machine has the same machine key, so the ViewState will work across machines, however, I need to do HMAC message authentication which will work across machines, so I figured that since all machines use the same machine key, there should be a way to derive a key from that to use as the HMAC key.</p>

<p>I notice that as of .NET 4.0 there is the <a href=""http://msdn.microsoft.com/en-us/library/system.web.security.machinekey.aspx"" rel=""nofollow"">MachineKey</a> class, however, I am stuck with using <strong>.NET 3.5</strong>, and this is unavailable to me.</p>

<p>Is there a way to get some sort key that is the same on all machines without generating my own, for use in an <strong>ASP.NET 3.5</strong> environment?</p>

<h1>Edit</h1>

<p>I don't actually need the machine key itself, just the validation key that is derived from the machine key (or equivalent).</p>
","<p>You can read the machine key from the web.config. This link shows how to do so: <a href=""http://aspnetresources.com/blog/how_to_read_auto_generated_machinekey"">http://aspnetresources.com/blog/how_to_read_auto_generated_machinekey</a></p>

<p>Keep in mind, that the author of the article reads the generated machine key - so you have to do some changes in the code.</p>

<p>I just read the article a little bit more and saw, that it uses reflection, which isn't neccessary, if you store the machine key inside the web.config.
Essentially it breaks down to this line:</p>

<pre><code>MachineKeySection section = (MachineKeySection) 
  ConfigurationManager.GetSection (""system.web/machineKey"");
</code></pre>
","14141309","8131","<c#><hmac><web-farm><machinekey>","4","7","1","2013-01-03 14:57:04","14141309","0","1","507793","","2013-01-03 14:56:19","2013-01-03 14:43:25","","","2013-01-03 14:57:04"
"20047418","PBKDF2 with HMAC in Java","<p>I am working on a Java project where I must ensure the confidentiality and integrity of users password saved in a plaintext file. </p>

<p>To do so, I will write only a hash of the password in the file. More specifically, my intention is to write the hash of the password and a random salt, plus the random salt itself, to avoid the use of rainbow and lookup tables. I also want to use key-stretching with PBKDF2, to make the computation of the hash computationally expensive. 
Finally, I would like to use a keyed hash algorithm, HMAC, for a final layer of protection.</p>

<p>I am trying to implement my thoughts in a Java code, and I have found some examples of the operations that I have presented above:</p>

<pre><code>private static byte[] pbkdf2(char[] password, byte[] salt, int iterations, int bytes)
    throws NoSuchAlgorithmException, InvalidKeySpecException
{
    PBEKeySpec spec = new PBEKeySpec(password, salt, iterations, bytes * 8);
    SecretKeyFactory skf = SecretKeyFactory.getInstance(""PBKDF2WithHmacSHA1"");
    return skf.generateSecret(spec).getEncoded();
}
</code></pre>

<p>The thing that I really cannot understand is how to input my secret key as the key used by the HMAC algorithm, as it doesn't seem an input to the function. I have looked through the Java documentation, but I cannot find a solution to my question.</p>

<p>At this point, I am not really sure if I understood correctly how the different part of the encryption mechanism work, so I would accept any help on the topic.</p>
","<p>I think I see the confusion. You're apparently expecting your code to apply PBKDF2 then HMAC-SHA-1. That's not how it works: HMAC-SHA-1 is used inside PBKDF2.</p>

<p>The gist of <a href=""http://en.wikipedia.org/wiki/PBKDF2"" rel=""nofollow noreferrer"">PBKDF2</a> is to apply a function repeatedly which has the following properties:</p>

<ul>
<li>it takes two arguments;</li>
<li>it returns a fixed-size value;</li>
<li>it is practically undistinguishable from a pseudo-random function.</li>
</ul>

<p>HMAC-SHA-1 is such a function, and a common choice. There are other variants of PBKDF2, using HMAC-MD5, HMAC-SHA-256, or other functions (but these variants aren't in the basic Java library).</p>

<p>PBKDF2 takes two data inputs (plus some configuration inputs): the password, and a salt. If you want to include a secret value in the calculation, PBKDF2's input is the place for it: don't tack on a custom scheme on top of that (doing your own crypto is a recipe for doing it wrong). Append the <a href=""https://security.stackexchange.com/questions/41754/what-is-the-purpose-of-a-pepper"">pepper</a> (secret value common to all accounts) to the salt (public value that varies between accounts).</p>

<p>Note that <a href=""https://security.stackexchange.com/questions/3272/password-hashing-add-salt-pepper-or-is-salt-enough"">pepper is of limited usefulness</a>. It's only useful if the hashes and the pepper secret value are stored in different places — for example, if the hashes are in a database and the pepper is in a disk file that is not directly vulnerable to SQL injection attacks.</p>
","20047419","8094","<passwords><java><password-policy><pbkdf2><hmac>","5","12","1","2013-11-18 12:07:13","20047419","1","1","","","","2013-11-08 15:22:43","","2017-03-17 10:45:55","2013-11-18 10:49:13"
"11444072","String array to Hex Array (Java)","<p>I have a String array that actually consists of Hex characters. </p>

<p>Let's say the contents are -></p>

<pre><code>String array[] = {8C,D9,26,1D,69,B7,96,DB};  
</code></pre>

<p>Now I want these to be interpreted as Hex characters of 1 byte each and not as a String where each entry is 2 bytes.</p>

<pre><code>StringBuilder output = new StringBuilder();
for (int j = 0; j &lt; array.length; j++) {
        String temp = ""\u00""+ array[j];
        output.append(temp);
    }
</code></pre>

<p>Tried something like that, but it's not possible because it keeps complaining about ""illegal unicode escape"". I tried using ""\u00"" (i.e. two backslashes before u, but stackoverflow displays only one there) instead of ""\u00"" to get around that error, but then I don't see the real Hex values in the array, instead I see a bunch of strings like -> ""\U008C"" , ""\U00D9"" and so on..</p>

<p>I want the after conversion values to be 0x8C, 0xD9, 0x26...</p>

<p>Thanks.</p>

<p>EDIT: I have updated the question, just to clarify there were no commas in the array itself. And eventually I need to put all those values together, and use that as a HMAC key that is a hex string and NOT a text string.</p>
","<p>Use the String.split method to split on the ,</p>

<p>For each element in the returned array go data[i] = ""0x"" + data[i];</p>

<p>For each element in the array str += data[i]</p>

<p>EZ</p>
","11444142","8092","<java><arrays><string><hex><hmac>","4","0","3","2012-07-12 02:30:07","11444208","3","","1320360","","2012-07-12 02:11:28","2012-07-12 01:58:11","","","2012-07-12 02:09:32"
"11444072","String array to Hex Array (Java)","<p>I have a String array that actually consists of Hex characters. </p>

<p>Let's say the contents are -></p>

<pre><code>String array[] = {8C,D9,26,1D,69,B7,96,DB};  
</code></pre>

<p>Now I want these to be interpreted as Hex characters of 1 byte each and not as a String where each entry is 2 bytes.</p>

<pre><code>StringBuilder output = new StringBuilder();
for (int j = 0; j &lt; array.length; j++) {
        String temp = ""\u00""+ array[j];
        output.append(temp);
    }
</code></pre>

<p>Tried something like that, but it's not possible because it keeps complaining about ""illegal unicode escape"". I tried using ""\u00"" (i.e. two backslashes before u, but stackoverflow displays only one there) instead of ""\u00"" to get around that error, but then I don't see the real Hex values in the array, instead I see a bunch of strings like -> ""\U008C"" , ""\U00D9"" and so on..</p>

<p>I want the after conversion values to be 0x8C, 0xD9, 0x26...</p>

<p>Thanks.</p>

<p>EDIT: I have updated the question, just to clarify there were no commas in the array itself. And eventually I need to put all those values together, and use that as a HMAC key that is a hex string and NOT a text string.</p>
","<p>You can split it as follows: </p>

<pre><code>public static void main(String[] args) {
    String givenString = ""8C,D9,26,1D,69,B7,96,DB"";
    String[] splitString = givenString.split(""[,]"");

    for(int index = 0; index &lt; splitString.length; index++){
        System.out.print(""0x""+ splitString[index]);
        System.out.print((index == splitString.length - 1) ? """":"","");
    }
    System.out.println();

}
</code></pre>

<p>For joining them, well instead of my <code>System.out</code> statements, use StringBuilder or StringBuffer and append to it.</p>
","11444150","8092","<java><arrays><string><hex><hmac>","4","0","3","2012-07-12 02:30:07","11444208","3","","1320360","","2012-07-12 02:11:28","2012-07-12 01:58:11","","","2012-07-12 02:10:15"
"11444072","String array to Hex Array (Java)","<p>I have a String array that actually consists of Hex characters. </p>

<p>Let's say the contents are -></p>

<pre><code>String array[] = {8C,D9,26,1D,69,B7,96,DB};  
</code></pre>

<p>Now I want these to be interpreted as Hex characters of 1 byte each and not as a String where each entry is 2 bytes.</p>

<pre><code>StringBuilder output = new StringBuilder();
for (int j = 0; j &lt; array.length; j++) {
        String temp = ""\u00""+ array[j];
        output.append(temp);
    }
</code></pre>

<p>Tried something like that, but it's not possible because it keeps complaining about ""illegal unicode escape"". I tried using ""\u00"" (i.e. two backslashes before u, but stackoverflow displays only one there) instead of ""\u00"" to get around that error, but then I don't see the real Hex values in the array, instead I see a bunch of strings like -> ""\U008C"" , ""\U00D9"" and so on..</p>

<p>I want the after conversion values to be 0x8C, 0xD9, 0x26...</p>

<p>Thanks.</p>

<p>EDIT: I have updated the question, just to clarify there were no commas in the array itself. And eventually I need to put all those values together, and use that as a HMAC key that is a hex string and NOT a text string.</p>
","<p>Let the JDK do the work for you:</p>

<pre><code>String[] array = {""8C"", ""D9"", ""26"", ""1D"", ""69"", ""B7"", ""96"", ""DB""};

StringBuilder output = new StringBuilder();
for ( String hex : array ) {
    output.append( (char)Integer.parseInt( hex, 16 ) );
}
</code></pre>

<p>Basically just that one line inside the loop is all you need.</p>

<p>If you wanted your input to be just one big String (which would seem more convenient), just do this instead:</p>

<pre><code>String input = ""8CD9261D69B796DB"";

StringBuilder output = new StringBuilder();
for ( String hex : input.replaceAll( ""..(?!$)"", ""$0,"" ).split( "","" ) ) {
    output.append( (char)Integer.parseInt( hex, 16 ) );
}
</code></pre>

<h3>Edited:</h3>

<p>If you want byte[] result, do this:</p>

<pre><code>String[] array = {""8C"", ""D9"", ""26"", ""1D"", ""69"", ""B7"", ""96"", ""DB""};

byte[] bytes = new byte[array.length];
for ( int i = 0; i &lt; array.length; i++ ) {
    bytes[i] = (byte)Integer.parseInt( array[i], 16 );
}
</code></pre>
","11444208","8092","<java><arrays><string><hex><hmac>","4","4","3","2012-07-12 02:30:07","11444208","3","","1320360","","2012-07-12 02:11:28","2012-07-12 01:58:11","","2012-07-12 02:30:07","2012-07-12 02:20:38"
"23655462","Hash value generation using hmac/sha512 in java and c#","<p>in c#</p>

<pre><code>public static string HashToString(string message, byte[] key)

{

  byte[] b=new HMACSHA512(key).ComputeHash(Encoding.UTF8.GetBytes(message));

  return Convert.ToBase64String(b);

}
</code></pre>

<p>client.DefaultRequestHeaders.Add(""X-Hash"", hash);</p>

<p>var encryptedContent = DataMotion.Security.Encrypt(key, Convert.FromBase64String(iv),  serializedModel);</p>

<p>var request = client.PostAsync(ApiUrlTextBox.Text,encryptedContent,new JsonMediaTypeFormatter());</p>

<p>in java:</p>

<pre><code>protected String hashToString(String serializedModel, byte[] key) {

String result = null;

Mac sha512_HMAC;

try {

  sha512_HMAC = Mac.getInstance(""HmacSHA512"");      

  SecretKeySpec secretkey = new SecretKeySpec(key, ""HmacSHA512"");

  sha512_HMAC.init(secretkey);

   byte[] mac_data = sha512_HMAC.doFinal(serializedModel.getBytes(""UTF-8""));        

   result = Base64.encodeBase64String(mac_data);

}catch(Exception e){
}
}
</code></pre>

<p>o/p: ye+AZPqaKrU14pui4U5gBCiAbegNvLVjzVdGK3rwG9QVzqKfIgyWBDTncORkNND3DA8jPba5xmC7B5OUwZEKlQ==</p>

<p>i have written hashtostring method in java based on c# code. is this currect? (output is different because every time process is dynamic in both cases.)</p>
","<p>Both java and C# code are giving same result(same hash code). You should check again.</p>

<p>Replace following line in java code at end</p>

<pre><code>result = Base64.getEncoder().encodeToString(mac_data);
</code></pre>
","29439159","7963","<c#><java><hash><hmac><sha512>","1","0","2","2018-09-25 14:15:30","29439159","4","4","3635271","","2014-05-14 13:33:12","2014-05-14 12:58:59","","","2015-04-03 20:22:47"
"23655462","Hash value generation using hmac/sha512 in java and c#","<p>in c#</p>

<pre><code>public static string HashToString(string message, byte[] key)

{

  byte[] b=new HMACSHA512(key).ComputeHash(Encoding.UTF8.GetBytes(message));

  return Convert.ToBase64String(b);

}
</code></pre>

<p>client.DefaultRequestHeaders.Add(""X-Hash"", hash);</p>

<p>var encryptedContent = DataMotion.Security.Encrypt(key, Convert.FromBase64String(iv),  serializedModel);</p>

<p>var request = client.PostAsync(ApiUrlTextBox.Text,encryptedContent,new JsonMediaTypeFormatter());</p>

<p>in java:</p>

<pre><code>protected String hashToString(String serializedModel, byte[] key) {

String result = null;

Mac sha512_HMAC;

try {

  sha512_HMAC = Mac.getInstance(""HmacSHA512"");      

  SecretKeySpec secretkey = new SecretKeySpec(key, ""HmacSHA512"");

  sha512_HMAC.init(secretkey);

   byte[] mac_data = sha512_HMAC.doFinal(serializedModel.getBytes(""UTF-8""));        

   result = Base64.encodeBase64String(mac_data);

}catch(Exception e){
}
}
</code></pre>

<p>o/p: ye+AZPqaKrU14pui4U5gBCiAbegNvLVjzVdGK3rwG9QVzqKfIgyWBDTncORkNND3DA8jPba5xmC7B5OUwZEKlQ==</p>

<p>i have written hashtostring method in java based on c# code. is this currect? (output is different because every time process is dynamic in both cases.)</p>
","<p>With different C# encoding</p>

<pre><code>public static string SHA512_ComputeHash(string text, string secretKey)
{
    var hash = new StringBuilder(); ;
    byte[] secretkeyBytes = Encoding.UTF8.GetBytes(secretKey);
    byte[] inputBytes = Encoding.UTF8.GetBytes(text);
    using (var hmac = new HMACSHA512(secretkeyBytes))
    {
        byte[] hashValue = hmac.ComputeHash(inputBytes);
        foreach (var theByte in hashValue)
        {
            hash.Append(theByte.ToString(""x2""));
        }
    }

    return hash.ToString();
}
</code></pre>
","52500347","7963","<c#><java><hash><hmac><sha512>","1","0","2","2018-09-25 14:15:30","29439159","4","4","3635271","","2014-05-14 13:33:12","2014-05-14 12:58:59","","","2018-09-25 14:15:30"
"12415438","Signing a string with HMAC-MD5 with C#","<p>I got the following HMAC key (in hexadecimal format):</p>

<p>52320e181a481f5e19507a75b3cae4d74d5cfbc328f7f2b738e9fb06b2e05b55b632c1c3d331dcf3baacae8d3000594f839d770f2080910b52b7b8beb3458c08</p>

<p>I need to sign this string:</p>

<p>1100002842850CHF91827364</p>

<p>The result should be this (in hexadecimal format):</p>

<p>2ad2f79111afd818c1dc0916d824b0a1</p>

<p>I have the following code:</p>

<pre><code>string key = ""52320e181a481f5e19507a75b3cae4d74d5cfbc328f7f2b738e9fb06b2e05b55b632c1c3d331dcf3baacae8d3000594f839d770f2080910b52b7b8beb3458c08"";
string payload = ""1100002842850CHF91827364"";

byte[] keyInBytes = Encoding.UTF8.GetBytes(key);
byte[] payloadInBytes = Encoding.UTF8.GetBytes(payload);

var md5 = new HMACMD5(keyInBytes);
byte[] hash = md5.ComputeHash(payloadInBytes);

var result = BitConverter.ToString(hash).Replace(""-"", string.Empty);
</code></pre>

<p>However, I am not getting the result. What am I doing wrong?</p>
","<p>Instead of doing this:</p>

<pre><code>byte[] keyInBytes = Encoding.UTF8.GetBytes(key);
</code></pre>

<p>you need to convert key from a hex string to array of bytes. Here you can find example:</p>

<p><a href=""https://stackoverflow.com/questions/311165/how-do-you-convert-byte-array-to-hexadecimal-string-and-vice-versa-in-c"">How do you convert Byte Array to Hexadecimal String, and vice versa?</a></p>
","12418109","7761","<security><c#-4.0><hmac>","5","4","2","2016-06-28 04:10:58","12418109","0","2","","","","2012-09-13 22:03:58","","2017-05-23 12:31:59","2012-09-14 04:25:13"
"12415438","Signing a string with HMAC-MD5 with C#","<p>I got the following HMAC key (in hexadecimal format):</p>

<p>52320e181a481f5e19507a75b3cae4d74d5cfbc328f7f2b738e9fb06b2e05b55b632c1c3d331dcf3baacae8d3000594f839d770f2080910b52b7b8beb3458c08</p>

<p>I need to sign this string:</p>

<p>1100002842850CHF91827364</p>

<p>The result should be this (in hexadecimal format):</p>

<p>2ad2f79111afd818c1dc0916d824b0a1</p>

<p>I have the following code:</p>

<pre><code>string key = ""52320e181a481f5e19507a75b3cae4d74d5cfbc328f7f2b738e9fb06b2e05b55b632c1c3d331dcf3baacae8d3000594f839d770f2080910b52b7b8beb3458c08"";
string payload = ""1100002842850CHF91827364"";

byte[] keyInBytes = Encoding.UTF8.GetBytes(key);
byte[] payloadInBytes = Encoding.UTF8.GetBytes(payload);

var md5 = new HMACMD5(keyInBytes);
byte[] hash = md5.ComputeHash(payloadInBytes);

var result = BitConverter.ToString(hash).Replace(""-"", string.Empty);
</code></pre>

<p>However, I am not getting the result. What am I doing wrong?</p>
","<p>when hashing with key HMAC md5</p>

<pre><code>        var data = Encoding.UTF8.GetBytes(plaintext);
        // key
        var key = Encoding.UTF8.GetBytes(transactionKey);

        // Create HMAC-MD5 Algorithm;
        var hmac = new HMACMD5(key);

        // Compute hash.
        var hashBytes = hmac.ComputeHash(data);

        // Convert to HEX string.
        return System.BitConverter.ToString(hashBytes).Replace(""-"", """").ToLower();
</code></pre>
","38066911","7761","<security><c#-4.0><hmac>","5","9","2","2016-06-28 04:10:58","12418109","0","2","","","","2012-09-13 22:03:58","","","2016-06-28 04:10:58"
"13237456","c# and java - difference between hmacsha256 hash","<p>I have the following code in Java:</p>

<pre><code>byte[] secretKey = secretAccessKey.getBytes(""UTF-8"");
SecretKeySpec signingKey = new SecretKeySpec(secretKey, ""HmacSHA256"");
Mac mac = Mac.getInstance(""HmacSHA256"");
mac.init(signingKey);
byte[] bytes = data.getBytes(""UTF-8"");
byte[] rawHmac = mac.doFinal(bytes);
String result = javax.xml.bind.DatatypeConverter.printBase64Binary(rawHmac);
</code></pre>

<p>and the following code in C#:</p>

<pre><code>UTF8Encoding enc = new UTF8Encoding();
byte[] secretKey = enc.GetBytes(secretAccessKey);
HMACSHA256 hmac = new HMACSHA256(secretKey);
hmac.Initialize();
byte[] bytes = enc.GetBytes(data);
byte[] rawHmac = hmac.ComputeHash(bytes);
string result = Convert.ToBase64String(rawHmac);
</code></pre>

<p>The byte arrays ""secretKey"" and ""bytes"" are equivalent but the byte array ""rawHmac"" is different, and the string ""result"" is different. Can anyone see why?</p>
","<p>Don't do this:</p>

<pre><code>byte[] bytes = data.getBytes();
</code></pre>

<p>That will use the platform default encoding to convert a string to a byte array. That can vary between platform, whereas you want something repeatable. I would suggest UTF-8:</p>

<pre><code>byte[] bytes = data.getBytes(""UTF-8"");
</code></pre>

<p>(Do the same for the key, of course.)</p>

<p>You should then use the same encoding in your C# - <em>not</em> ASCII, unless you really want to not handle non-ASCII characters.</p>

<pre><code>byte[] bytes = Encoding.UTF8.GetBytes(data);
</code></pre>

<p>It's also not clear how you're comparing the results afterwards - don't forget that <code>byte</code> is signed in Java, but unsigned in C#. It's probably simplest to convert the hash to hex or base64 for comparison purposes.</p>

<p>EDIT: I strongly suspect the last part was the problem - comparing the results.</p>

<p>Here are two short but complete programs (using the iharder.net base64 converter in Java) which produce the same base64 output:</p>

<p>Java:</p>

<pre><code>import java.util.*;
import javax.crypto.*;
import javax.crypto.spec.*;

public class Test {
    public static void main (String[] args) throws Exception {
        String secretAccessKey = ""mykey"";
        String data = ""my data"";
        byte[] secretKey = secretAccessKey.getBytes();
        SecretKeySpec signingKey = new SecretKeySpec(secretKey, ""HmacSHA256"");
        Mac mac = Mac.getInstance(""HmacSHA256"");
        mac.init(signingKey);
        byte[] bytes = data.getBytes();
        byte[] rawHmac = mac.doFinal(bytes);
        System.out.println(Base64.encodeBytes(rawHmac));
    }
}
</code></pre>

<p>C#:</p>

<pre><code>using System;
using System.Security.Cryptography;
using System.Text;

class Test
{
    static void Main()
    {
        String secretAccessKey = ""mykey"";
        String data = ""my data"";
        byte[] secretKey = Encoding.UTF8.GetBytes(secretAccessKey);
        HMACSHA256 hmac = new HMACSHA256(secretKey);
        hmac.Initialize();
        byte[] bytes = Encoding.UTF8.GetBytes(data);
        byte[] rawHmac = hmac.ComputeHash(bytes);
        Console.WriteLine(Convert.ToBase64String(rawHmac));
    }
}
</code></pre>

<p>Output from both:</p>

<pre><code>ivEyFpkagEoghGnTw/LmfhDOsiNbcnEON50mFGzW9/w=
</code></pre>
","13237486","7750","<c#><java><encryption><hmac><sha256>","8","14","2","2017-12-27 16:47:58","13237486","1","5","940153","","2012-11-05 17:53:53","2012-11-05 17:42:38","","2012-11-05 17:56:18","2012-11-05 17:44:57"
"13237456","c# and java - difference between hmacsha256 hash","<p>I have the following code in Java:</p>

<pre><code>byte[] secretKey = secretAccessKey.getBytes(""UTF-8"");
SecretKeySpec signingKey = new SecretKeySpec(secretKey, ""HmacSHA256"");
Mac mac = Mac.getInstance(""HmacSHA256"");
mac.init(signingKey);
byte[] bytes = data.getBytes(""UTF-8"");
byte[] rawHmac = mac.doFinal(bytes);
String result = javax.xml.bind.DatatypeConverter.printBase64Binary(rawHmac);
</code></pre>

<p>and the following code in C#:</p>

<pre><code>UTF8Encoding enc = new UTF8Encoding();
byte[] secretKey = enc.GetBytes(secretAccessKey);
HMACSHA256 hmac = new HMACSHA256(secretKey);
hmac.Initialize();
byte[] bytes = enc.GetBytes(data);
byte[] rawHmac = hmac.ComputeHash(bytes);
string result = Convert.ToBase64String(rawHmac);
</code></pre>

<p>The byte arrays ""secretKey"" and ""bytes"" are equivalent but the byte array ""rawHmac"" is different, and the string ""result"" is different. Can anyone see why?</p>
","<p>This was a non-question, as demonstrated, the hashes are always the same.</p>

<p>The problem in my case was unrelated, the fact that Java uppercases percent encoding on UrlEncoder but .NET doesn't.</p>

<p>Goes to show how important it is to test in isolation!</p>
","13253968","7750","<c#><java><encryption><hmac><sha256>","8","1","2","2017-12-27 16:47:58","13237486","1","5","940153","","2012-11-05 17:53:53","2012-11-05 17:42:38","","","2012-11-06 15:16:00"
"36004761","Is there any function for creating Hmac256 string in android?","<p>Is there any function for creating Hmac256 string in android ? 
I am using php as my back end for my android application, in php we can create hmac256 string using the php function hash_hmac () [ <a href=""http://php.net/manual/en/function.hash-hmac.php"" rel=""noreferrer"">ref</a> ] is there any function like this in Android </p>

<p>Please help me. </p>
","<p>Try below code</p>

<pre><code>public static String encode(String key, String data) throws Exception {
    Mac sha256_HMAC = Mac.getInstance(""HmacSHA256"");
    SecretKeySpec secret_key = new SecretKeySpec(key.getBytes(""UTF-8""), ""HmacSHA256"");
    sha256_HMAC.init(secret_key);

    return Hex.encodeHexString(sha256_HMAC.doFinal(data.getBytes(""UTF-8"")));
}
</code></pre>

<p>Hex.encodeHexString() to use this method, add below dependency to your app gradle.</p>

<pre><code>compile 'org.apache.directory.studio:org.apache.commons.codec:1.8'
</code></pre>

<p>This will convert resulted string to hex string same as your php hash_hmac() funtion generates.</p>
","36006338","7728","<android><hmac><hmacsha1>","16","9","2","2018-01-04 06:02:51","","6","5","","","","2016-03-15 07:15:13","","","2016-03-15 08:47:17"
"36004761","Is there any function for creating Hmac256 string in android?","<p>Is there any function for creating Hmac256 string in android ? 
I am using php as my back end for my android application, in php we can create hmac256 string using the php function hash_hmac () [ <a href=""http://php.net/manual/en/function.hash-hmac.php"" rel=""noreferrer"">ref</a> ] is there any function like this in Android </p>

<p>Please help me. </p>
","<p>Calculate the message digest with the hashing algorithm <strong>HMAC-SHA256</strong> in the Android platform:</p>

<pre><code>private void generateHashWithHmac256(String message, String key) {
    try {
        final String hashingAlgorithm = ""HmacSHA256""; //or ""HmacSHA1"", ""HmacSHA512""

        byte[] bytes = hmac(hashingAlgorithm, key.getBytes(), message.getBytes());

        final String messageDigest = bytesToHex(bytes);

        Log.i(TAG, ""message digest: "" + messageDigest);

    } catch (Exception e) {
        e.printStackTrace();
    }
}

public static byte[] hmac(String algorithm, byte[] key, byte[] message) throws NoSuchAlgorithmException, InvalidKeyException {
    Mac mac = Mac.getInstance(algorithm);
    mac.init(new SecretKeySpec(key, algorithm));
    return mac.doFinal(message);
}

public static String bytesToHex(byte[] bytes) {
    final char[] hexArray = ""0123456789abcdef"".toCharArray();
    char[] hexChars = new char[bytes.length * 2];
    for (int j = 0, v; j &lt; bytes.length; j++) {
        v = bytes[j] &amp; 0xFF;
        hexChars[j * 2] = hexArray[v &gt;&gt;&gt; 4];
        hexChars[j * 2 + 1] = hexArray[v &amp; 0x0F];
    }
    return new String(hexChars);
}
</code></pre>

<p>This approach does not require any external dependency.</p>
","48089539","7728","<android><hmac><hmacsha1>","16","15","2","2018-01-04 06:02:51","","6","5","","","","2016-03-15 07:15:13","","","2018-01-04 06:02:51"
"3483582","How to create OAuth HMAC-SHA1 signature on GAE/J?","<p>EDIT: <a href=""https://stackoverflow.com/questions/1609899/java-equivalent-to-phps-hmac-sha1"">java equivalent to php&#39;s hmac-SHA1</a><br>
(well hopefully, trying a.t.m.)</p>

<p>My understanding is that to create a signature I need a 'base string' and a 'key'. I guess I know how to create the base string, and I assume I'm supposed to use 'OAuth Consumer Secret' that Google have assigned to my app as the key.</p>

<p>But what am I supposed to do with these two to obtain the signature? Is there any HMAC-class on GAE/Java?</p>

<p>Would it play if I just stored somewhere what <a href=""http://googlecodesamples.com/oauth_playground/"" rel=""nofollow noreferrer"">OAuth Playground</a> generates for me? Is it how you do it? Or does OAuth signature have some expiration date?</p>

<p>(I tried AuthSub before but <a href=""http://groups.google.com/group/google-appengine/msg/58693d1ca41f2dc6"" rel=""nofollow noreferrer"">failed too</a>, even though it looks quite simple. Also OAuth seems like more 'standard' to me, so I'd like to stick with OAuth.)</p>
","<pre><code>public String computeHmac(String baseString, String key)
    throws NoSuchAlgorithmException, InvalidKeyException, IllegalStateException, UnsupportedEncodingException
{
    Mac mac = Mac.getInstance(""HmacSHA1"");
    SecretKeySpec secret = new SecretKeySpec(key.getBytes(), mac.getAlgorithm());
    mac.init(secret);
    byte[] digest = mac.doFinal(baseString.getBytes());
    return Base64.encode(digest);
}
</code></pre>
","3485422","7675","<java><google-app-engine><oauth><hmac>","1","2","2","2011-02-04 10:42:33","3485422","0","5","-1","","2017-05-23 11:48:24","2010-08-14 13:50:06","","","2010-08-14 22:42:53"
"3483582","How to create OAuth HMAC-SHA1 signature on GAE/J?","<p>EDIT: <a href=""https://stackoverflow.com/questions/1609899/java-equivalent-to-phps-hmac-sha1"">java equivalent to php&#39;s hmac-SHA1</a><br>
(well hopefully, trying a.t.m.)</p>

<p>My understanding is that to create a signature I need a 'base string' and a 'key'. I guess I know how to create the base string, and I assume I'm supposed to use 'OAuth Consumer Secret' that Google have assigned to my app as the key.</p>

<p>But what am I supposed to do with these two to obtain the signature? Is there any HMAC-class on GAE/Java?</p>

<p>Would it play if I just stored somewhere what <a href=""http://googlecodesamples.com/oauth_playground/"" rel=""nofollow noreferrer"">OAuth Playground</a> generates for me? Is it how you do it? Or does OAuth signature have some expiration date?</p>

<p>(I tried AuthSub before but <a href=""http://groups.google.com/group/google-appengine/msg/58693d1ca41f2dc6"" rel=""nofollow noreferrer"">failed too</a>, even though it looks quite simple. Also OAuth seems like more 'standard' to me, so I'd like to stick with OAuth.)</p>
","<p>For some reason hmac_init on Quercus and GAE gives errors. One solution is to use above mentioned java method and class, import it to PHP instance and call compute.</p>

<p>1) Add scr/phpgae directory id you dont have yet
2) Add phpgae.HmacSHA256 line to src/WEB-INF/services/com.caucho.QuercusModule
3) Add scr/phpgae/HmacSHA256.java to your GAE application:</p>

<p><code>
    package phpgae;</p>

<pre><code>import java.security.InvalidKeyException;

import java.security.NoSuchAlgorithmException;

import javax.crypto.Mac;

import javax.crypto.spec.SecretKeySpec;

import com.caucho.util.Base64;

import com.caucho.quercus.module.AbstractQuercusModule;

public class HmacSHA256 extends AbstractQuercusModule {

    public String compute(String baseString, String key) throws InvalidKeyException, NoSuchAlgorithmException {
        Mac mac;
        mac = Mac.getInstance(""HmacSHA256"");
        SecretKeySpec secret = new SecretKeySpec(key.getBytes(), mac.getAlgorithm());
        mac.init(secret);
        byte[] digest = mac.doFinal(baseString.getBytes());
        return Base64.encode(digest);
    }
}
</code></pre>

<p></code></p>

<p>Note I'm using SHA256 here. Eclipse compiles everything on fly, otherwise you need to complile class manually.</p>

<p>4) On PHP here is what you do:</p>

<p><code></p>

<pre><code>&lt;?php

import phpgae.HmacSHA256;

$c = new HmacSHA256;

echo $c-&gt;compute( 'your base string' ,  'your key' );

?&gt;
</code></pre>

<p></code></p>

<p>You can find more practical <a href=""http://php-apps.appspot.com/"" rel=""nofollow"">PHP on Google App Engine</a> examples from: <a href=""http://php-apps.appspot.com/"" rel=""nofollow"">http://php-apps.appspot.com/</a></p>
","4897062","7675","<java><google-app-engine><oauth><hmac>","1","0","2","2011-02-04 10:42:33","3485422","0","5","-1","","2017-05-23 11:48:24","2010-08-14 13:50:06","","","2011-02-04 10:42:33"
"11784432","HMAC SHA256 hex digest in javascript","<p>I'm trying to write a javascript lib to push events to Pusher.</p>

<p>In the environment I'm using I can't use nodejs, so no require('crypto') ... or at least I do not know of a way of using it outside node.</p>

<p>I'm following the example guide here: <a href=""http://pusher.com/docs/rest_api"" rel=""nofollow"">http://pusher.com/docs/rest_api</a>; I'm stuck in the part 
where it says I should generate the HMAC SHA256 hex digest.</p>

<p>I am using this library <a href=""http://code.google.com/p/crypto-js/#HMAC"" rel=""nofollow"">http://code.google.com/p/crypto-js/#HMAC</a></p>

<p>So, following the instructions on Pusher i wrote</p>

<pre><code>CryptoJS.HmacSHA256(
  'POST\n/apps/3/channels/project-3/events\nauth_key=278d425bdf160c739803&amp;auth_timestamp=1272044395&amp;auth_version=1.0&amp;body_md5=7b3d404f5cde4a0b9b8fb4789a0098cb&amp;name=foo',
  '7ad3773142a6692b25b8'
);
</code></pre>

<p>But that's giving me <code>20b132baa2aaf44ea1fab814f0788aaa44eed23a2d252c72e4dc2aaea0d6ac24</code> instead of <code>b3152b2bb5a5b0bae66435a498797aa763e9b74f86cc97c9175424f8308b2f80</code>.</p>

<p>What is bothering me is that I didn't do the ""hex digest"" part, so maybe that's what I'm missing, but I couldn't find a suitable lib to do this in javascript.
Do you spot any errors in what I did? Do you have a library to suggest?</p>

<p>Thanks in advance for any help.</p>
","<p>I was struggling with doing the exact same thing. Pusher's documentation should really be clearer about this issue. It turns out it's not the encyption methods. It's the order that you list your parameters. The body of your message has to be exactly formatted like this:</p>

<p>{""data"":""{\""message\"":\""hello world\""}"",""name"":""my_event"",""channel"":""test_channel""}</p>

<p>Data has to be first, then message, followed by name and then finally the channel name.</p>

<p>Then when you create your auth signature you have to list your parameters as so:</p>

<p>POST\n/apps/3/events\nauth_key=278d425bdf160c739803&amp;auth_timestamp=1353088179&amp;auth_version=1.0&amp;body_md5=ec365a775a4cd0599faeb73354201b6f</p>

<p>So auth key is first, then the timestamp, followed by the auth version and finally the body md5.</p>

<p>I got it to work once I followed this exact pattern. Hopefully this helps!</p>
","34248621","7489","<javascript><sha256><hmac>","3","2","1","2015-12-13 06:37:03","","6","","168868","","2012-08-03 01:01:27","2012-08-02 19:26:18","","","2015-12-13 06:37:03"
"7515164","Visual Basic 2010 HMAC SHA1","<p>i got a code to convert a string to a hmac sha1 encyption.
However, i cant get it to work. Here is my code:</p>

<pre><code>Public Shared Function HashString(ByVal StringToHash As String) As String
    Dim myEncoder As New System.Text.UTF32Encoding
    Dim Key() As Byte = myEncoder.GetBytes(""thisismykey"")
    Dim Text() As Byte = myEncoder.GetBytes(StringToHash)
    Dim myHMACSHA1 As New System.Security.Cryptography.HMACSHA1(Key)
    Dim HashCode As Byte() = myHMACSHA1.ComputeHash(Text)
    Return Convert.ToBase64String(HashCode)
End Function
</code></pre>

<p>When i run the function like this:</p>

<pre><code>TextBox1.Text = HashString(""thisismystring"")
</code></pre>

<p>I get <code>04p075DKS2Suw9jGQKC5Q7mYjvI=</code> in the textbox.
What i should get is <code>c2bc9dd26b76d5b61a40ac788220eef0b26cb2bb</code></p>

<p>Anyone has any idea on how to solve this? Please help :)</p>
","<p>Your <code>04p075DKS2Suw9jGQKC5Q7mYjvI=</code> is in Base64.  Your <code>c2bc9dd26b76d5b61a40ac788220eef0b26cb2bb</code> is in hex.  You need to convert one into the other format so you can compare them correctly.</p>

<p>ETA: I checked, the two don't match, your hex gives me <code>wryd0mt21bYaQKx4giDu8LJssrs=</code> in Base64.  I suspect the problem may lie with using UTF32 encoding, this is very unusual.  UTF8 or UTF16 are much more common.  Try UTF8 first.</p>
","7515864","7423","<vb.net><encryption><sha1><hmac>","0","1","3","2014-05-29 08:38:26","7526942","0","","3043","","2012-02-11 00:42:55","2011-09-22 13:02:52","","2011-09-22 14:29:10","2011-09-22 13:51:17"
"7515164","Visual Basic 2010 HMAC SHA1","<p>i got a code to convert a string to a hmac sha1 encyption.
However, i cant get it to work. Here is my code:</p>

<pre><code>Public Shared Function HashString(ByVal StringToHash As String) As String
    Dim myEncoder As New System.Text.UTF32Encoding
    Dim Key() As Byte = myEncoder.GetBytes(""thisismykey"")
    Dim Text() As Byte = myEncoder.GetBytes(StringToHash)
    Dim myHMACSHA1 As New System.Security.Cryptography.HMACSHA1(Key)
    Dim HashCode As Byte() = myHMACSHA1.ComputeHash(Text)
    Return Convert.ToBase64String(HashCode)
End Function
</code></pre>

<p>When i run the function like this:</p>

<pre><code>TextBox1.Text = HashString(""thisismystring"")
</code></pre>

<p>I get <code>04p075DKS2Suw9jGQKC5Q7mYjvI=</code> in the textbox.
What i should get is <code>c2bc9dd26b76d5b61a40ac788220eef0b26cb2bb</code></p>

<p>Anyone has any idea on how to solve this? Please help :)</p>
","<p><strong>I found the solution.</strong>
I just converted the byte to a string, made it to lower and replaced - with nothing.
See my code below :)</p>

<pre><code>    Public Function HashString(ByVal StringToHash As String, ByVal HachKey As String) As String
    Dim myEncoder As New System.Text.UTF8Encoding
    Dim Key() As Byte = myEncoder.GetBytes(HachKey)
    Dim Text() As Byte = myEncoder.GetBytes(StringToHash)
    Dim myHMACSHA1 As New System.Security.Cryptography.HMACSHA1(Key)
    Dim HashCode As Byte() = myHMACSHA1.ComputeHash(Text)
    Dim hash As String = Replace(BitConverter.ToString(HashCode), ""-"", """")
    Return hash.ToLower
End Function
</code></pre>

<p>Example Usage:</p>

<pre><code>TextBox1.Text = HashString(""thisismystring"", ""thisismykey"")
</code></pre>

<p>Thanks for your help :)</p>
","7526942","7423","<vb.net><encryption><sha1><hmac>","0","4","3","2014-05-29 08:38:26","7526942","0","","3043","","2012-02-11 00:42:55","2011-09-22 13:02:52","","2011-09-23 09:47:35","2011-09-23 09:32:38"
"7515164","Visual Basic 2010 HMAC SHA1","<p>i got a code to convert a string to a hmac sha1 encyption.
However, i cant get it to work. Here is my code:</p>

<pre><code>Public Shared Function HashString(ByVal StringToHash As String) As String
    Dim myEncoder As New System.Text.UTF32Encoding
    Dim Key() As Byte = myEncoder.GetBytes(""thisismykey"")
    Dim Text() As Byte = myEncoder.GetBytes(StringToHash)
    Dim myHMACSHA1 As New System.Security.Cryptography.HMACSHA1(Key)
    Dim HashCode As Byte() = myHMACSHA1.ComputeHash(Text)
    Return Convert.ToBase64String(HashCode)
End Function
</code></pre>

<p>When i run the function like this:</p>

<pre><code>TextBox1.Text = HashString(""thisismystring"")
</code></pre>

<p>I get <code>04p075DKS2Suw9jGQKC5Q7mYjvI=</code> in the textbox.
What i should get is <code>c2bc9dd26b76d5b61a40ac788220eef0b26cb2bb</code></p>

<p>Anyone has any idea on how to solve this? Please help :)</p>
","<p>correction depuis maj EXCEL,</p>

<p>pour faire du mD5, il faut copier coller le code ci-dessous</p>

<pre><code>Option Explicit
Private Const HP_HASHVAL = 2
Private Const HP_HASHSIZE = 4
Private Const PROV_RSA_FULL  As Long = 1
Private Const ALG_CLASS_HASH = 32768
Private Const ALG_TYPE_ANY = 0
Private Const ALG_SID_MD2 = 1
Private Const ALG_SID_MD4 = 2
Private Const ALG_SID_MD5 = 3
Private Const ALG_SID_SHA1 = 4
Private Const CRYPT_NEWKEYSET = &amp;H8
Private Const CRYPT_VERIFYCONTEXT As Long = &amp;HF0000000

Enum HashAlgorithm
    MD2 = ALG_CLASS_HASH Or ALG_TYPE_ANY Or ALG_SID_MD2
    MD4 = ALG_CLASS_HASH Or ALG_TYPE_ANY Or ALG_SID_MD4
    MD5 = ALG_CLASS_HASH Or ALG_TYPE_ANY Or ALG_SID_MD5
    SHA1 = ALG_CLASS_HASH Or ALG_TYPE_ANY Or ALG_SID_SHA1
End Enum

Private Declare Function CryptAcquireContext Lib ""Advapi32"" Alias ""CryptAcquireContextA"" (ByRef phProv As Long, ByVal pszContainer As String, ByVal pszProvider As String, ByVal dwProvType As Long, ByVal dwFlags As Long) As Long
Private Declare Function CryptReleaseContext Lib ""Advapi32"" (ByVal hProv As Long, ByVal dwFlags As Long) As Long
Private Declare Function CryptCreateHash Lib ""Advapi32"" (ByVal hProv As Long, ByVal Algid As Long, ByVal hKey As Long, ByVal dwFlags As Long, ByRef phHash As Long) As Long
Private Declare Function CryptDestroyHash Lib ""Advapi32"" (ByVal hHash As Long) As Long
Private Declare Function CryptHashData Lib ""Advapi32"" (ByVal hHash As Long, pbData As Any, ByVal dwDataLen As Long, ByVal dwFlags As Long) As Long
Private Declare Function CryptGetHashParam Lib ""Advapi32"" (ByVal hHash As Long, ByVal dwParam As Long, pbData As Any, pdwDataLen As Long, ByVal dwFlags As Long) As Long

Public Function HashString(ByVal Str As String, Optional ByVal Algorithm As HashAlgorithm = MD5) As String
On Error Resume Next
Dim hCtx As Long
Dim hHash As Long
Dim lRes As Long
Dim lLen As Long
Dim lIdx As Long
Dim abData() As Byte
lRes = CryptAcquireContext(hCtx, vbNullString, vbNullString, PROV_RSA_FULL, CRYPT_VERIFYCONTEXT)
If lRes &lt;&gt; 0 Then
    lRes = CryptCreateHash(hCtx, Algorithm, 0, 0, hHash)
    If lRes &lt;&gt; 0 Then
        lRes = CryptHashData(hHash, ByVal Str, Len(Str), 0)
        If lRes &lt;&gt; 0 Then
            lRes = CryptGetHashParam(hHash, HP_HASHSIZE, lLen, 4, 0)
            If lRes &lt;&gt; 0 Then
                ReDim abData(0 To lLen - 1)
                lRes = CryptGetHashParam(hHash, HP_HASHVAL, abData(0), lLen, 0)
                If lRes &lt;&gt; 0 Then
                    For lIdx = 0 To UBound(abData)
                        HashString = HashString &amp; Right$(""0"" &amp; Hex$(abData(lIdx)), 2)
                    Next
                End If
            End If
        End If
        CryptDestroyHash hHash
    End If

End If
CryptReleaseContext hCtx, 0
If lRes = 0 Then
    MsgBox Err.LastDllError
End If
End Function
</code></pre>
","13450176","7423","<vb.net><encryption><sha1><hmac>","0","0","3","2014-05-29 08:38:26","7526942","0","","3043","","2012-02-11 00:42:55","2011-09-22 13:02:52","","","2012-11-19 08:39:31"
"43559332","Python 3 hash HMAC-SHA512","<p>I'm writing a bot for <a href=""https://poloniex.com/support/api/"" rel=""nofollow noreferrer"">https://poloniex.com/support/api/</a></p>

<p>The public methods all work fine, but the Trading API Methods require some extra tricks:</p>

<blockquote>
  <p>All calls to the trading API are sent via HTTP POST to <a href=""https://poloniex.com/tradingApi"" rel=""nofollow noreferrer"">https://poloniex.com/tradingApi</a> and must contain the following headers:<br>
  Key - Your API key.<br>
  Sign - The query's POST data signed by your key's ""secret"" according to the HMAC-SHA512 method.<br>
  Additionally, all queries must include a ""nonce"" POST parameter. The nonce parameter is an integer which must always be greater than the previous nonce used.<br>
  All responses from the trading API are in JSON format.</p>
</blockquote>

<p>My code for returnBalances looks like this:</p>

<pre><code>import hashlib
import hmac
from time import time

import requests


class Poloniex:
    def __init__(self, APIKey, Secret):
        self.APIKey = APIKey
        self.Secret = Secret

    def returnBalances(self):
        url = 'https://poloniex.com/tradingApi'
        payload = {
            'command': 'returnBalances',
            'nonce': int(time() * 1000),
        }

        headers = {
            'Key': self.APIKey,
            'Sign': hmac.new(self.Secret, payload, hashlib.sha512).hexdigest(),
        }

        r = requests.post(url, headers=headers, data=payload)
        return r.json()
</code></pre>

<p>trading.py:</p>

<pre><code>APIkey = 'AAA-BBB-CCC'
secret = b'123abc'

polo = Poloniex(APIkey, secret)
print(polo.returnBalances())
</code></pre>

<p>And I got the following error:</p>

<pre><code>Traceback (most recent call last):
  File ""C:/Python/Poloniex/trading.py"", line 5, in &lt;module&gt;
    print(polo.returnBalances())
  File ""C:\Python\Poloniex\poloniex.py"", line 22, in returnBalances
    'Sign': hmac.new(self.Secret, payload, hashlib.sha512).hexdigest(),
  File ""C:\Users\Balazs91\AppData\Local\Programs\Python\Python35-32\lib\hmac.py"", line 144, in new
    return HMAC(key, msg, digestmod)
  File ""C:\Users\Balazs91\AppData\Local\Programs\Python\Python35-32\lib\hmac.py"", line 84, in __init__
    self.update(msg)
  File ""C:\Users\Balazs91\AppData\Local\Programs\Python\Python35-32\lib\hmac.py"", line 93, in update
    self.inner.update(msg)
TypeError: object supporting the buffer API required

Process finished with exit code 1
</code></pre>

<p>I've also tried to implement the following, but it didn't help:
<a href=""https://stackoverflow.com/a/25111089/7317891"">https://stackoverflow.com/a/25111089/7317891</a></p>

<p>Any help is highly appreciated!</p>
","<p>The payload you pass to <code>requests.post</code> has to be either a valid query string or a dict corresponding to that query string. Normally, it's more convenient just to pass a dict and get requests to build the query string for you, but in this case we need to construct an HMAC signature from the query string, so we use the standard urlib.parse module to build the query string. </p>

<p>Annoyingly, the <code>urlib.parse.urlencode</code> function returns a text string, so we need to encode it into a bytes string in order to make it acceptable to hashlib. The obvious encoding to use is UTF-8: encoding a text string that only contains plain ASCII as UTF-8 will create a byte sequence that's identical to the equivalent Python 2 string (and of course <code>urlencode</code> will only ever return plain ASCII), so this code will behave identically to the old Python 2 code on the Poloniex API page you linked. </p>

<pre><code>from time import time
import urllib.parse
import hashlib
import hmac

APIkey = b'AAA-BBB-CCC'
secret = b'123abc'

payload = {
    'command': 'returnBalances',
    'nonce': int(time() * 1000),
}

paybytes = urllib.parse.urlencode(payload).encode('utf8')
print(paybytes)

sign = hmac.new(secret, paybytes, hashlib.sha512).hexdigest()
print(sign)
</code></pre>

<p><strong>output</strong></p>

<pre><code>b'command=returnBalances&amp;nonce=1492868800766'
3cd1630522382abc13f24b78138f30983c9b35614ece329a5abf4b8955429afe7d121ffee14b3c8c042fdaa7a0870102f9fb0b753ab793c084b1ad6a3553ea71
</code></pre>

<p>And then you can do something like</p>

<pre><code>headers = {
    'Key': APIKey,
    'Sign': sign,
}

r = requests.post(url, headers=headers, data=paybytes)
</code></pre>
","43560007","7397","<python><python-3.x><hash><hmac><sha512>","4","5","1","2017-04-22 13:55:09","43560007","2","","-1","","2017-05-23 12:34:11","2017-04-22 12:41:04","2017-04-22 16:15:24","2017-04-22 13:55:09","2017-04-22 13:47:54"
"3341167","How to implement HMAC-SHA1 algorithm in Qt","<p>I'm trying to implement HMAC-SHA1 algorithm in my C++/Qt application.
I have a method for Sha1 algorithm available, I just need to understand the HMAC part of it.</p>

<p>This pseudocode is from wikipedia:</p>

<pre><code> 1 function hmac (key, message)
 2     if (length(key) &gt; blocksize) then
 3         // keys longer than blocksize are shortened
 4         key = hash(key)
 5     end if
 6     if (length(key) &lt; blocksize) then
 7         // keys shorter than blocksize are zero-padded
 8         key = key ∥ zeroes(blocksize - length(key))
 9     end if
10
11     // Where blocksize is that of the underlying hash function
12     o_key_pad = [0x5c * blocksize] ⊕ key
13     i_key_pad = [0x36 * blocksize] ⊕ key // Where ⊕ is exclusive or (XOR)
14     // Where ∥ is concatenation
15     return hash(o_key_pad ∥ hash(i_key_pad ∥ message))
16 end function
</code></pre>

<p>What is the blocksize? What does the zeroes-function do on line 8? How do you express lines 12-13 in C++?</p>
","<h2> 1. What is the blocksize ?</h2>

<p>Usually, hash algorithm process data by cutting it into chunks of fixed size data (aka. ""blocks""). For SHA1, I the usual block size is 64 bytes.</p>

<h2>2. What does the zeros function do on line 8 ?</h2>

<p>It (as the comment states) adds ""zeroes"" to the end of key so that its length matches the ""block"" size.</p>

<h2>3. How do you express lines 12-13 in C++ ?</h2>

<p>I think you're looking for the XOR operator: <code>^</code>.</p>

<p><strong>Example:</strong></p>

<pre><code>o_key_pad = (0x5c * blocksize) ^ key; // Actually, it should be 0x5c5c5c... repeated enough so that it matches key size.
</code></pre>

<p><strong>Just a quick note</strong>: this has nothing special to do with <code>Qt</code> and you will probably want to do it in ""raw"" <code>C++</code> so that you can eventually reuse it in a non-<code>Qt</code> project. <code>Qt</code> is great imho, but you clearly don't require it to implement this.</p>
","3341255","7302","<c++><qt><hash><sha1><hmac>","6","6","5","2019-01-15 14:36:52","3594062","0","2","411022","","2013-11-03 15:12:40","2010-07-27 06:20:04","","2010-07-27 07:13:19","2010-07-27 06:44:06"
"3341167","How to implement HMAC-SHA1 algorithm in Qt","<p>I'm trying to implement HMAC-SHA1 algorithm in my C++/Qt application.
I have a method for Sha1 algorithm available, I just need to understand the HMAC part of it.</p>

<p>This pseudocode is from wikipedia:</p>

<pre><code> 1 function hmac (key, message)
 2     if (length(key) &gt; blocksize) then
 3         // keys longer than blocksize are shortened
 4         key = hash(key)
 5     end if
 6     if (length(key) &lt; blocksize) then
 7         // keys shorter than blocksize are zero-padded
 8         key = key ∥ zeroes(blocksize - length(key))
 9     end if
10
11     // Where blocksize is that of the underlying hash function
12     o_key_pad = [0x5c * blocksize] ⊕ key
13     i_key_pad = [0x36 * blocksize] ⊕ key // Where ⊕ is exclusive or (XOR)
14     // Where ∥ is concatenation
15     return hash(o_key_pad ∥ hash(i_key_pad ∥ message))
16 end function
</code></pre>

<p>What is the blocksize? What does the zeroes-function do on line 8? How do you express lines 12-13 in C++?</p>
","<p>Take at look at the <a href=""http://delta.affinix.com/qca/"" rel=""nofollow noreferrer"">QCA</a> library.  It already provides implementations of all major cryptographic algorithms.</p>
","3341497","7302","<c++><qt><hash><sha1><hmac>","6","1","5","2019-01-15 14:36:52","3594062","0","2","411022","","2013-11-03 15:12:40","2010-07-27 06:20:04","","","2010-07-27 07:28:59"
"3341167","How to implement HMAC-SHA1 algorithm in Qt","<p>I'm trying to implement HMAC-SHA1 algorithm in my C++/Qt application.
I have a method for Sha1 algorithm available, I just need to understand the HMAC part of it.</p>

<p>This pseudocode is from wikipedia:</p>

<pre><code> 1 function hmac (key, message)
 2     if (length(key) &gt; blocksize) then
 3         // keys longer than blocksize are shortened
 4         key = hash(key)
 5     end if
 6     if (length(key) &lt; blocksize) then
 7         // keys shorter than blocksize are zero-padded
 8         key = key ∥ zeroes(blocksize - length(key))
 9     end if
10
11     // Where blocksize is that of the underlying hash function
12     o_key_pad = [0x5c * blocksize] ⊕ key
13     i_key_pad = [0x36 * blocksize] ⊕ key // Where ⊕ is exclusive or (XOR)
14     // Where ∥ is concatenation
15     return hash(o_key_pad ∥ hash(i_key_pad ∥ message))
16 end function
</code></pre>

<p>What is the blocksize? What does the zeroes-function do on line 8? How do you express lines 12-13 in C++?</p>
","<p>You should also take a look at <a href=""http://doc.qt.nokia.com/4.6/qcryptographichash.html"" rel=""nofollow noreferrer"">QCryptographicHash</a>, since it can help you with the sha1 part of your problem.</p>
","3342112","7302","<c++><qt><hash><sha1><hmac>","6","1","5","2019-01-15 14:36:52","3594062","0","2","411022","","2013-11-03 15:12:40","2010-07-27 06:20:04","","2011-05-21 09:12:25","2010-07-27 09:05:32"
"3341167","How to implement HMAC-SHA1 algorithm in Qt","<p>I'm trying to implement HMAC-SHA1 algorithm in my C++/Qt application.
I have a method for Sha1 algorithm available, I just need to understand the HMAC part of it.</p>

<p>This pseudocode is from wikipedia:</p>

<pre><code> 1 function hmac (key, message)
 2     if (length(key) &gt; blocksize) then
 3         // keys longer than blocksize are shortened
 4         key = hash(key)
 5     end if
 6     if (length(key) &lt; blocksize) then
 7         // keys shorter than blocksize are zero-padded
 8         key = key ∥ zeroes(blocksize - length(key))
 9     end if
10
11     // Where blocksize is that of the underlying hash function
12     o_key_pad = [0x5c * blocksize] ⊕ key
13     i_key_pad = [0x36 * blocksize] ⊕ key // Where ⊕ is exclusive or (XOR)
14     // Where ∥ is concatenation
15     return hash(o_key_pad ∥ hash(i_key_pad ∥ message))
16 end function
</code></pre>

<p>What is the blocksize? What does the zeroes-function do on line 8? How do you express lines 12-13 in C++?</p>
","<p><a href=""http://mahonen.tumblr.com/post/8637914737/hmac-hash-for-qt"" rel=""nofollow noreferrer"">This post</a> has a working implementation:</p>

<pre><code>/**
 * Hashes the given string using the HMAC-SHA1 algorithm.
 *
 * \param key The string to be hashed
 * \param secret The string that contains secret word
 * \return The hashed string
 */
static QString hmac_sha1(const QString &amp;key, const QString &amp;secret) {
   // Length of the text to be hashed
   int text_length;
   // For secret word
   QByteArray K;
   // Length of secret word
   int K_length;

   K_length = secret.size();
   text_length = key.size();

   // Need to do for XOR operation. Transforms QString to
   // unsigned char

   K = secret.toAscii();

   // Inner padding
   QByteArray ipad;
   // Outer padding
   QByteArray opad;

   // If secret key &gt; 64 bytes use this to obtain sha1 key
   if (K_length &gt; 64) {
      QByteArray tempSecret;

      tempSecret.append(secret);

      K = QCryptographicHash::hash(tempSecret, QCryptographicHash::Sha1);
      K_length = 20;
   }

   // Fills ipad and opad with zeros
   ipad.fill(0, 64);
   opad.fill(0, 64);

   // Copies Secret to ipad and opad
   ipad.replace(0, K_length, K);
   opad.replace(0, K_length, K);

   // XOR operation for inner and outer pad
   for (int i = 0; i &lt; 64; i++) {
      ipad[i] = ipad[i] ^ 0x36;
      opad[i] = opad[i] ^ 0x5c;
   }

   // Stores hashed content
   QByteArray context;

   // Appends XOR:ed ipad to context
   context.append(ipad, 64);
   // Appends key to context
   context.append(key);

   //Hashes inner pad
   QByteArray Sha1 = QCryptographicHash::hash(context, QCryptographicHash::Sha1);

   context.clear();
   //Appends opad to context
   context.append(opad, 64);
   //Appends hashed inner pad to context
   context.append(Sha1);

   Sha1.clear();

   // Hashes outerpad
   Sha1 = QCryptographicHash::hash(context, QCryptographicHash::Sha1);

   // String to return hashed stuff in Base64 format
   QByteArray str(Sha1.toBase64());

   return str;
}
</code></pre>
","3594062","7302","<c++><qt><hash><sha1><hmac>","6","5","5","2019-01-15 14:36:52","3594062","0","2","411022","","2013-11-03 15:12:40","2010-07-27 06:20:04","","2015-11-23 13:13:52","2010-08-29 08:25:10"
"3341167","How to implement HMAC-SHA1 algorithm in Qt","<p>I'm trying to implement HMAC-SHA1 algorithm in my C++/Qt application.
I have a method for Sha1 algorithm available, I just need to understand the HMAC part of it.</p>

<p>This pseudocode is from wikipedia:</p>

<pre><code> 1 function hmac (key, message)
 2     if (length(key) &gt; blocksize) then
 3         // keys longer than blocksize are shortened
 4         key = hash(key)
 5     end if
 6     if (length(key) &lt; blocksize) then
 7         // keys shorter than blocksize are zero-padded
 8         key = key ∥ zeroes(blocksize - length(key))
 9     end if
10
11     // Where blocksize is that of the underlying hash function
12     o_key_pad = [0x5c * blocksize] ⊕ key
13     i_key_pad = [0x36 * blocksize] ⊕ key // Where ⊕ is exclusive or (XOR)
14     // Where ∥ is concatenation
15     return hash(o_key_pad ∥ hash(i_key_pad ∥ message))
16 end function
</code></pre>

<p>What is the blocksize? What does the zeroes-function do on line 8? How do you express lines 12-13 in C++?</p>
","<p>Since Qt 5.1 there is the <a href=""http://doc.qt.io/qt-5/qmessageauthenticationcode.html"" rel=""nofollow noreferrer"">QMessageAuthenticationCode</a> that will generate HMAC with the <a href=""http://doc.qt.io/qt-5/qcryptographichash.html#Algorithm-enum"" rel=""nofollow noreferrer"">QCryptographicHash::Algorithm</a> of your choice.</p>
","54201033","7302","<c++><qt><hash><sha1><hmac>","6","1","5","2019-01-15 14:36:52","3594062","0","2","411022","","2013-11-03 15:12:40","2010-07-27 06:20:04","","","2019-01-15 14:36:52"
"951477","Calculate HMAC-SHA256 digest in ColdFusion using Java","<p>We are trying to calculate a HMAC-SHA256 digest in ColdFusion and we are using the HMAC CFC, but in one case it is producing a different result for the digest compared to ones generated in different languages - have tried the same data using Ruby &amp; PHP and get the expected result. I have also tried the CF_HMAC custom tag it is based on and get the same results.</p>

<p>I understand that from CF8 <code>encrypt()</code> supports HMAC-SHA256, but it's only available in Enterprise (which we don't have) and isn't even available in developer version for me to test.</p>

<p>So my question is can I do this by accessing Java from CF?</p>
","<p>This is what I ended up doing:</p>

<pre><code>secret = createObject('java', 'javax.crypto.spec.SecretKeySpec' ).Init(my_key.GetBytes(), 'HmacSHA256');
mac = createObject('java', ""javax.crypto.Mac"");
mac = mac.getInstance(""HmacSHA256"");
mac.init(secret);
digest = mac.doFinal(my_data.GetBytes());
</code></pre>

<p>This gives you the byte array, which you can then convert to a string.</p>
","951782","7282","<java><encryption><coldfusion><hmac>","5","11","2","2013-09-25 01:00:53","951782","0","1","850882","","2012-01-29 16:56:09","2009-06-04 16:02:40","","2013-01-27 16:24:12","2009-06-04 16:51:40"
"951477","Calculate HMAC-SHA256 digest in ColdFusion using Java","<p>We are trying to calculate a HMAC-SHA256 digest in ColdFusion and we are using the HMAC CFC, but in one case it is producing a different result for the digest compared to ones generated in different languages - have tried the same data using Ruby &amp; PHP and get the expected result. I have also tried the CF_HMAC custom tag it is based on and get the same results.</p>

<p>I understand that from CF8 <code>encrypt()</code> supports HMAC-SHA256, but it's only available in Enterprise (which we don't have) and isn't even available in developer version for me to test.</p>

<p>So my question is can I do this by accessing Java from CF?</p>
","<p>Here's an example of DEfusion's answer with different input/output formats.  My key is hex, my data is lower ascii (so UTF-8 will do), and I need base64 output, so I pass the appropriate format arguments to BinaryDecode and CharsetDecode:</p>

<pre><code>&lt;cfset keybytes = BinaryDecode(SECRET_KEY, ""Hex"")&gt;
&lt;cfset databytes = CharsetDecode(data, ""UTF-8"")&gt;
&lt;cfset secret = createObject(""java"", ""javax.crypto.spec.SecretKeySpec"").Init(keybytes,""HmacSHA256"")&gt;
&lt;cfset mac = createObject(""java"", ""javax.crypto.Mac"")&gt;
&lt;cfset mac = mac.getInstance(""HmacSHA256"")&gt;
&lt;cfset mac.init(secret)&gt;
&lt;cfset digest = mac.doFinal(databytes)&gt;
&lt;cfset result = BinaryEncode(digest, ""Base64"")&gt;
</code></pre>
","18994533","7282","<java><encryption><coldfusion><hmac>","5","0","2","2013-09-25 01:00:53","951782","0","1","850882","","2012-01-29 16:56:09","2009-06-04 16:02:40","","","2013-09-25 01:00:53"
"9744392","How to get Ruby generated HMAC for SHA256 that is url safe to match Java?","<p>I have a tomcat server running some Java code that lets users authenticate using an API key.  The request uses an HMAC created with SHA256.  I have a Ruby client that I am using to make the request and since I'm new to encryption I am having a difficult time getting it to generate a matching HMAC.  I have tried not making it URL safe, and that matches.  So I'm really wondering is how I can get the Ruby client to match with the URL safe version (since I can't change the Java code).  It's just got an extra = character at the end.  Thanks in advance for any help.</p>

<p>For Ruby I am using 1.9.3 and for Java I am using 6u31 along with the commons-codec-1.6.jar library from apache.</p>

<p><strong>Code</strong></p>

<p>Ruby:</p>

<pre><code>require ""openssl""
require ""base64""

json_str = ""{'community':'LG7B734A', 'login_id':'user1', 'time':'1331928899'}""
digest = OpenSSL::Digest::Digest.new(""sha256"")
key = [ ""4cc45e4258121c3fec84147673e1bd88e51b1c177aafcfa2da72bd4655c9f933"" ]
hmac = OpenSSL::HMAC.digest(digest, key.pack(""H*""), json_str)

encoded_url_safe = Base64.urlsafe_encode64(hmac)
encoded = Base64.encode64(hmac)

puts(""Encoded (Url Safe): "" + encoded_url_safe)
puts(""Encoded           : "" + encoded)
</code></pre>

<p>Java:</p>

<pre><code>import org.apache.commons.codec.binary.Base64;
import org.apache.commons.codec.binary.Hex;

import javax.crypto.spec.SecretKeySpec;
import javax.crypto.Mac;

public class ExampleHMAC
{
    public static void main(String[] args) throws Exception
    {
        String key = ""4cc45e4258121c3fec84147673e1bd88e51b1c177aafcfa2da72bd4655c9f933"";
        byte[] keyBytes = Hex.decodeHex(key.toCharArray());

        SecretKeySpec keySpec = new SecretKeySpec(keyBytes, ""HmacSHA256"");
        Mac mac = Mac.getInstance(""HmacSHA256"");
        mac.init(keySpec);

        String jsonStr = ""{'community':'LG7B734A', 'login_id':'user1', 'time':'1331928899'}"";
        byte[] hmacBytes = mac.doFinal(jsonStr.getBytes());

        String encodedUrlSafe = Base64.encodeBase64URLSafeString(hmacBytes);
        String encoded = Base64.encodeBase64String(hmacBytes);

        System.out.println(""Encoded (Url Safe): "" + encodedUrlSafe);
        System.out.println(""Encoded           : "" + encoded);
    }
}
</code></pre>

<p><strong>Output</strong></p>

<p>Ruby:</p>

<pre><code>Encoded (Url Safe): QgYLqGm1M4qozdEjGC_CnJ8CdBm2jQpsU85kSWFcjKM=
Encoded           : QgYLqGm1M4qozdEjGC/CnJ8CdBm2jQpsU85kSWFcjKM=
</code></pre>

<p>Java:</p>

<pre><code>Encoded (Url Safe): QgYLqGm1M4qozdEjGC_CnJ8CdBm2jQpsU85kSWFcjKM
Encoded           : QgYLqGm1M4qozdEjGC/CnJ8CdBm2jQpsU85kSWFcjKM=
</code></pre>
","<p>Ruby does not remove the trailing '=' - it is not an absolute requirement, as you can read in <a href=""http://tools.ietf.org/html/rfc4648#page-7"">RFC 4648</a> it just states that removing them might be desirable in certain applications. But other than that it is guaranteed that Ruby's URL-safe encoding will be exactly the same as Java's.</p>

<p>So the only thing for you to do is strip off the trailing '==', you could for example use a regex:</p>

<pre><code>encoded_url_safe_.gsub!(/=+$/, """")
</code></pre>
","9747091","7159","<java><ruby><sha256><hmac>","11","6","1","2012-03-17 03:51:45","9747091","0","3","","","","2012-03-16 20:55:03","","","2012-03-17 03:51:45"
"36575195","HMAC SHA256 hash computation in C#","<p>I need to calculate the HMAC by using the SHA256 hash function. I have a secret key encoded in base64 format. Also there is an online tool that correctly calculate the HMAC (verified). 
<a href=""http://www.freeformatter.com/hmac-generator.html"" rel=""nofollow"">http://www.freeformatter.com/hmac-generator.html</a>
I wrote the following code snippet:</p>

<pre><code>var signatureHashHexExpected = ""559bd871bfd21ab76ad44513ed5d65774f9954d3232ab68dab1806163f806447"";
var signature = ""123456:some-string:2016-04-12T12:44:16Z"";
var key = ""AgQGCAoMDhASFAIEBggKDA4QEhQCBAYICgwOEBIUAgQ="";

var shaKeyBytes = Convert.FromBase64String(key);
using (var shaAlgorithm = new System.Security.Cryptography.HMACSHA256(shaKeyBytes))
{
    var signatureBytes = System.Text.Encoding.UTF8.GetBytes(signature);
    var signatureHashBytes = shaAlgorithm.ComputeHash(signatureBytes);
    var signatureHashHex = string.Concat(Array.ConvertAll(signatureHashBytes, b =&gt; b.ToString(""X2""))).ToLower();

    System.Diagnostics.Debug.Assert(signatureHashHex == signatureHashHexExpected);
}
</code></pre>

<p>PROBLEM:
My code does not generate the correct HMAC. I verified different steps by using different online tools and alternative C# implementations. Only the conversion from base64 is not confirmed. What am i missing?</p>

<p>UPDATE:
Calculated signatureHashHex by my code is ""a40e0477a02de1d134a5c55e4befa55d6fca8e29e0aa0a0d8acf7a4370208efc""</p>

<p>ANSWER:
The issue was caused by a misleading documentation stating the key is provided in Base64 format. See the accepted answer:</p>

<pre><code>var shaKeyBytes = System.Text.Encoding.UTF8.GetBytes(key);
</code></pre>
","<p>Your result is correct, the difference is because the tool you link to does <strong>not</strong> decode Base64 for the key value and treats it as a series of characters.</p>

<p>E.g. To duplicate its result treat your key as a string:</p>

<pre><code>var shaKeyBytes = System.Text.Encoding.UTF8.GetBytes(""AgQGCAoMDhASFAIEBggKDA4QEhQCBAYICgwOEBIUAgQ="");
</code></pre>

<p>Which yields</p>

<pre><code>559bd871bfd21ab76ad44513ed5d65774f9954d3232ab68dab1806163f806447
</code></pre>

<p>(This is obviously not the right way to do it)</p>
","36575348","7137","<c#><hash><hmac>","4","6","2","2017-09-06 06:33:02","36575348","5","1","3506462","","2016-04-12 14:28:25","2016-04-12 13:45:20","","","2016-04-12 13:51:48"
"36575195","HMAC SHA256 hash computation in C#","<p>I need to calculate the HMAC by using the SHA256 hash function. I have a secret key encoded in base64 format. Also there is an online tool that correctly calculate the HMAC (verified). 
<a href=""http://www.freeformatter.com/hmac-generator.html"" rel=""nofollow"">http://www.freeformatter.com/hmac-generator.html</a>
I wrote the following code snippet:</p>

<pre><code>var signatureHashHexExpected = ""559bd871bfd21ab76ad44513ed5d65774f9954d3232ab68dab1806163f806447"";
var signature = ""123456:some-string:2016-04-12T12:44:16Z"";
var key = ""AgQGCAoMDhASFAIEBggKDA4QEhQCBAYICgwOEBIUAgQ="";

var shaKeyBytes = Convert.FromBase64String(key);
using (var shaAlgorithm = new System.Security.Cryptography.HMACSHA256(shaKeyBytes))
{
    var signatureBytes = System.Text.Encoding.UTF8.GetBytes(signature);
    var signatureHashBytes = shaAlgorithm.ComputeHash(signatureBytes);
    var signatureHashHex = string.Concat(Array.ConvertAll(signatureHashBytes, b =&gt; b.ToString(""X2""))).ToLower();

    System.Diagnostics.Debug.Assert(signatureHashHex == signatureHashHexExpected);
}
</code></pre>

<p>PROBLEM:
My code does not generate the correct HMAC. I verified different steps by using different online tools and alternative C# implementations. Only the conversion from base64 is not confirmed. What am i missing?</p>

<p>UPDATE:
Calculated signatureHashHex by my code is ""a40e0477a02de1d134a5c55e4befa55d6fca8e29e0aa0a0d8acf7a4370208efc""</p>

<p>ANSWER:
The issue was caused by a misleading documentation stating the key is provided in Base64 format. See the accepted answer:</p>

<pre><code>var shaKeyBytes = System.Text.Encoding.UTF8.GetBytes(key);
</code></pre>
","<p><strong>HMAC:</strong>  It is a message authentication code.It is used to verify the sender's data integrity and it is a forward only algorithm.It works on the shared secret key which is known by sender and receiver both.Before generating hash value we have to encode key and message. we can use either one of the encoding <strong>UTF8</strong> or <strong>ASCIIEncoding</strong>.</p>

<p><strong>UTF8 encoding:</strong></p>

<pre><code>var signature = ""123456:some-string:2016-04-12T12:44:16Z"";
var key = ""AgQGCAoMDhASFAIEBggKDA4QEhQCBAYICgwOEBIUAgQ="";


var signatureBytes = System.Text.Encoding.UTF8.GetBytes(signature);
var shaKeyBytes = System.Text.Encoding.UTF8.GetBytes(key);
</code></pre>

<p><strong>ASCIIEncoding Encoding:</strong></p>

<pre><code>var signature = ""123456:some-string:2016-04-12T12:44:16Z"";
var key = ""AgQGCAoMDhASFAIEBggKDA4QEhQCBAYICgwOEBIUAgQ="";

var signatureBytes = System.Text.ASCIIEncoding.GetBytes(signature);
var shaKeyBytes = System.Text.ASCIIEncoding.GetBytes(key);
</code></pre>

<p>Now we can use this encoded message and key in the above code.</p>
","46068328","7137","<c#><hash><hmac>","4","0","2","2017-09-06 06:33:02","36575348","5","1","3506462","","2016-04-12 14:28:25","2016-04-12 13:45:20","","","2017-09-06 06:33:02"
"16209349","First data payment gateway integration soap fault error","<p>Hi I am trying to integrate First data payment gateway integration in soap request method using php. I have downloaded the working sample code from first data but when i am trying to submit a payment with the sample code they gave it is throwing me an error.</p>

<p>The entire php code is</p>

<pre><code>&lt;?php


class SoapClientHMAC extends SoapClient {
  public function __doRequest($request, $location, $action, $version, $one_way = NULL) {
    global $context;
    $hmackey = ""***********************""; // &lt;-- Insert your HMAC key here
    $keyid = ""*****""; // &lt;-- Insert the Key ID here
    $hashtime = date(""c"");
    $hashstr = ""POST\ntext/xml; charset=utf-8\n"" . sha1($request) . ""\n"" . $hashtime . ""\n"" . parse_url($location,PHP_URL_PATH);
    $authstr = base64_encode(hash_hmac(""sha1"",$hashstr,$hmackey,TRUE));
    if (version_compare(PHP_VERSION, '5.3.11') == -1) {
        ini_set(""user_agent"", ""PHP-SOAP/"" . PHP_VERSION . ""\r\nAuthorization: GGE4_API "" . $keyid . "":"" . $authstr . ""\r\nx-gge4-date: "" . $hashtime . ""\r\nx-gge4-content-sha1: "" . sha1($request));
    } else {
        stream_context_set_option($context,array(""http"" =&gt; array(""header"" =&gt; ""authorization: GGE4_API "" . $keyid . "":"" . $authstr . ""\r\nx-gge4-date: "" . $hashtime . ""\r\nx-gge4-content-sha1: "" . sha1($request))));
    }
    return parent::__doRequest($request, $location, $action, $version, $one_way);
  }

  public function SoapClientHMAC($wsdl, $options = NULL) {
    global $context;
    $context = stream_context_create();
    $options['stream_context'] = $context;
    return parent::SoapClient($wsdl, $options);
  }
}

$trxnProperties = array(
  ""User_Name""=&gt;"""",
  ""Secure_AuthResult""=&gt;"""",
  ""Ecommerce_Flag""=&gt;"""",
  ""XID""=&gt;"""",
  ""ExactID""=&gt;$_POST[""ddlPOS_ExactID""],                  //Payment Gateway
  ""CAVV""=&gt;"""",
  ""Password""=&gt;""********"",                                   //Gateway Password
  ""CAVV_Algorithm""=&gt;"""",
  ""Transaction_Type""=&gt;$_POST[""ddlPOS_Transaction_Type""],//Transaction Code I.E. Purchase=""00"" Pre-Authorization=""01"" etc.
  ""Reference_No""=&gt;$_POST[""tbPOS_Reference_No""],
  ""Customer_Ref""=&gt;$_POST[""tbPOS_Customer_Ref""],
  ""Reference_3""=&gt;$_POST[""tbPOS_Reference_3""],
  ""Client_IP""=&gt;"""",                                      //This value is only used for fraud investigation.
  ""Client_Email""=&gt;$_POST[""tb_Client_Email""],            //This value is only used for fraud investigation.
  ""Language""=&gt;$_POST[""ddlPOS_Language""],                //English=""en"" French=""fr""
  ""Card_Number""=&gt;$_POST[""tbPOS_Card_Number""],           //For Testing, Use Test#s VISA=""4111111111111111"" MasterCard=""5500000000000004"" etc.
  ""Expiry_Date""=&gt;$_POST[""ddlPOS_Expiry_Date_Month""] . $_POST[""ddlPOS_Expiry_Date_Year""],//This value should be in the format MM/YY.
  ""CardHoldersName""=&gt;$_POST[""tbPOS_CardHoldersName""],
  ""Track1""=&gt;"""",
  ""Track2""=&gt;"""",
  ""Authorization_Num""=&gt;$_POST[""tbPOS_Authorization_Num""],
  ""Transaction_Tag""=&gt;$_POST[""tbPOS_Transaction_Tag""],
  ""DollarAmount""=&gt;$_POST[""tbPOS_DollarAmount""],
  ""VerificationStr1""=&gt;$_POST[""tbPOS_VerificationStr1""],
  ""VerificationStr2""=&gt;"""",
  ""CVD_Presence_Ind""=&gt;"""",
  ""Secure_AuthRequired""=&gt;"""",
  ""Currency""=&gt;"""",
  ""PartialRedemption""=&gt;"""",

  // Level 2 fields 
  ""ZipCode""=&gt;$_POST[""tbPOS_ZipCode""],
  ""Tax1Amount""=&gt;$_POST[""tbPOS_Tax1Amount""],
  ""Tax1Number""=&gt;$_POST[""tbPOS_Tax1Number""],
  ""Tax2Amount""=&gt;$_POST[""tbPOS_Tax2Amount""],
  ""Tax2Number""=&gt;$_POST[""tbPOS_Tax2Number""],

  //""SurchargeAmount""=&gt;$_POST[""tbPOS_SurchargeAmount""], //Used for debit transactions only
  //""PAN""=&gt;$_POST[""tbPOS_PAN""]                          //Used for debit transactions only
  );


$client = new SoapClientHMAC(""https://api.demo.globalgatewaye4.firstdata.com/transaction/v12/wsdl"");
$trxnResult = $client-&gt;SendAndCommit($trxnProperties);


if(@$client-&gt;fault){
    // there was a fault, inform
    print ""&lt;B&gt;FAULT:  Code: {$client-&gt;faultcode} &lt;BR /&gt;"";
    print ""String: {$client-&gt;faultstring} &lt;/B&gt;"";
    $trxnResult[""CTR""] = ""There was an error while processing. No TRANSACTION DATA IN CTR!"";
}
//Uncomment the following commented code to display the full results.

echo ""&lt;H3&gt;&lt;U&gt;Transaction Properties BEFORE Processing&lt;/U&gt;&lt;/H3&gt;"";
echo ""&lt;TABLE border='0'&gt;\n"";
echo "" &lt;TR&gt;&lt;TD&gt;&lt;B&gt;Property&lt;/B&gt;&lt;/TD&gt;&lt;TD&gt;&lt;B&gt;Value&lt;/B&gt;&lt;/TD&gt;&lt;/TR&gt;\n"";
foreach($trxnProperties as $key=&gt;$value){
    echo "" &lt;TR&gt;&lt;TD&gt;$key&lt;/TD&gt;&lt;TD&gt;:$value&lt;/TD&gt;&lt;/TR&gt;\n"";
}
echo ""&lt;/TABLE&gt;\n"";

echo ""&lt;H3&gt;&lt;U&gt;Transaction Properties AFTER Processing&lt;/U&gt;&lt;/H3&gt;"";
echo ""&lt;TABLE border='0'&gt;\n"";
echo "" &lt;TR&gt;&lt;TD&gt;&lt;B&gt;Property&lt;/B&gt;&lt;/TD&gt;&lt;TD&gt;&lt;B&gt;Value&lt;/B&gt;&lt;/TD&gt;&lt;/TR&gt;\n"";
foreach($trxnResult as $key=&gt;$value){
    $value = nl2br($value);
    echo "" &lt;TR&gt;&lt;TD valign='top'&gt;$key&lt;/TD&gt;&lt;TD&gt;:$value&lt;/TD&gt;&lt;/TR&gt;\n"";
}
echo ""&lt;/TABLE&gt;\n"";


// kill object
unset($client);
?&gt;
</code></pre>

<p>When i submit the payment my page comes to this particular code and the error it throws is</p>

<pre><code> Fatal error: Uncaught SoapFault exception: [HTTP] in C:\wamp\www\Fd\php\process.php:49 Stack trace: #0 C:\wamp\www\Fd\php\process.php(49): SoapClient-&gt;__doRequest('&lt;?xml version=""...', 'https://api.dem...', 'http://secure2....', 1, 0) #1 [internal function]: SoapClientHMAC-&gt;__doRequest('&lt;?xml version=""...', 'https://api.dem...', 'http://secure2....', 1, 0) #2 C:\wamp\www\Fd\php\process.php(104): SoapClient-&gt;__call('SendAndCommit', Array) #3 C:\wamp\www\Fd\php\process.php(104): SoapClientHMAC-&gt;SendAndCommit(Array) #4 {main} thrown in C:\wamp\www\Fd\php\process.php on line 48.
</code></pre>

<p>And the line 48 is </p>

<pre><code>return parent::__doRequest($request, $location, $action, $version, $one_way);
</code></pre>

<p>I couldn't really figure out what this error is. Googled and tried various solutions but no success.Also I have both the soap and openssl enabled in my php server if that is of any help.</p>

<p>Thanks in advance for any help.</p>
","<pre><code>$client = new SoapClientHMAC(""https://api.demo.globalgatewaye4.firstdata.com/transaction/v12/wsdl"");
</code></pre>

<p>remove "".demo"" => ""<a href=""https://api.globalgatewaye4.firstdata.com/transaction/v12/wsdl"" rel=""nofollow"">https://api.globalgatewaye4.firstdata.com/transaction/v12/wsdl</a>""</p>

<p>You use live access in api first data</p>
","16214331","6907","<php><soap><payment-gateway><hmac><firstdata>","2","1","4","2016-12-22 07:21:52","16556440","0","4","2134530","","2013-04-25 08:11:40","2013-04-25 07:59:10","","","2013-04-25 12:08:47"
"16209349","First data payment gateway integration soap fault error","<p>Hi I am trying to integrate First data payment gateway integration in soap request method using php. I have downloaded the working sample code from first data but when i am trying to submit a payment with the sample code they gave it is throwing me an error.</p>

<p>The entire php code is</p>

<pre><code>&lt;?php


class SoapClientHMAC extends SoapClient {
  public function __doRequest($request, $location, $action, $version, $one_way = NULL) {
    global $context;
    $hmackey = ""***********************""; // &lt;-- Insert your HMAC key here
    $keyid = ""*****""; // &lt;-- Insert the Key ID here
    $hashtime = date(""c"");
    $hashstr = ""POST\ntext/xml; charset=utf-8\n"" . sha1($request) . ""\n"" . $hashtime . ""\n"" . parse_url($location,PHP_URL_PATH);
    $authstr = base64_encode(hash_hmac(""sha1"",$hashstr,$hmackey,TRUE));
    if (version_compare(PHP_VERSION, '5.3.11') == -1) {
        ini_set(""user_agent"", ""PHP-SOAP/"" . PHP_VERSION . ""\r\nAuthorization: GGE4_API "" . $keyid . "":"" . $authstr . ""\r\nx-gge4-date: "" . $hashtime . ""\r\nx-gge4-content-sha1: "" . sha1($request));
    } else {
        stream_context_set_option($context,array(""http"" =&gt; array(""header"" =&gt; ""authorization: GGE4_API "" . $keyid . "":"" . $authstr . ""\r\nx-gge4-date: "" . $hashtime . ""\r\nx-gge4-content-sha1: "" . sha1($request))));
    }
    return parent::__doRequest($request, $location, $action, $version, $one_way);
  }

  public function SoapClientHMAC($wsdl, $options = NULL) {
    global $context;
    $context = stream_context_create();
    $options['stream_context'] = $context;
    return parent::SoapClient($wsdl, $options);
  }
}

$trxnProperties = array(
  ""User_Name""=&gt;"""",
  ""Secure_AuthResult""=&gt;"""",
  ""Ecommerce_Flag""=&gt;"""",
  ""XID""=&gt;"""",
  ""ExactID""=&gt;$_POST[""ddlPOS_ExactID""],                  //Payment Gateway
  ""CAVV""=&gt;"""",
  ""Password""=&gt;""********"",                                   //Gateway Password
  ""CAVV_Algorithm""=&gt;"""",
  ""Transaction_Type""=&gt;$_POST[""ddlPOS_Transaction_Type""],//Transaction Code I.E. Purchase=""00"" Pre-Authorization=""01"" etc.
  ""Reference_No""=&gt;$_POST[""tbPOS_Reference_No""],
  ""Customer_Ref""=&gt;$_POST[""tbPOS_Customer_Ref""],
  ""Reference_3""=&gt;$_POST[""tbPOS_Reference_3""],
  ""Client_IP""=&gt;"""",                                      //This value is only used for fraud investigation.
  ""Client_Email""=&gt;$_POST[""tb_Client_Email""],            //This value is only used for fraud investigation.
  ""Language""=&gt;$_POST[""ddlPOS_Language""],                //English=""en"" French=""fr""
  ""Card_Number""=&gt;$_POST[""tbPOS_Card_Number""],           //For Testing, Use Test#s VISA=""4111111111111111"" MasterCard=""5500000000000004"" etc.
  ""Expiry_Date""=&gt;$_POST[""ddlPOS_Expiry_Date_Month""] . $_POST[""ddlPOS_Expiry_Date_Year""],//This value should be in the format MM/YY.
  ""CardHoldersName""=&gt;$_POST[""tbPOS_CardHoldersName""],
  ""Track1""=&gt;"""",
  ""Track2""=&gt;"""",
  ""Authorization_Num""=&gt;$_POST[""tbPOS_Authorization_Num""],
  ""Transaction_Tag""=&gt;$_POST[""tbPOS_Transaction_Tag""],
  ""DollarAmount""=&gt;$_POST[""tbPOS_DollarAmount""],
  ""VerificationStr1""=&gt;$_POST[""tbPOS_VerificationStr1""],
  ""VerificationStr2""=&gt;"""",
  ""CVD_Presence_Ind""=&gt;"""",
  ""Secure_AuthRequired""=&gt;"""",
  ""Currency""=&gt;"""",
  ""PartialRedemption""=&gt;"""",

  // Level 2 fields 
  ""ZipCode""=&gt;$_POST[""tbPOS_ZipCode""],
  ""Tax1Amount""=&gt;$_POST[""tbPOS_Tax1Amount""],
  ""Tax1Number""=&gt;$_POST[""tbPOS_Tax1Number""],
  ""Tax2Amount""=&gt;$_POST[""tbPOS_Tax2Amount""],
  ""Tax2Number""=&gt;$_POST[""tbPOS_Tax2Number""],

  //""SurchargeAmount""=&gt;$_POST[""tbPOS_SurchargeAmount""], //Used for debit transactions only
  //""PAN""=&gt;$_POST[""tbPOS_PAN""]                          //Used for debit transactions only
  );


$client = new SoapClientHMAC(""https://api.demo.globalgatewaye4.firstdata.com/transaction/v12/wsdl"");
$trxnResult = $client-&gt;SendAndCommit($trxnProperties);


if(@$client-&gt;fault){
    // there was a fault, inform
    print ""&lt;B&gt;FAULT:  Code: {$client-&gt;faultcode} &lt;BR /&gt;"";
    print ""String: {$client-&gt;faultstring} &lt;/B&gt;"";
    $trxnResult[""CTR""] = ""There was an error while processing. No TRANSACTION DATA IN CTR!"";
}
//Uncomment the following commented code to display the full results.

echo ""&lt;H3&gt;&lt;U&gt;Transaction Properties BEFORE Processing&lt;/U&gt;&lt;/H3&gt;"";
echo ""&lt;TABLE border='0'&gt;\n"";
echo "" &lt;TR&gt;&lt;TD&gt;&lt;B&gt;Property&lt;/B&gt;&lt;/TD&gt;&lt;TD&gt;&lt;B&gt;Value&lt;/B&gt;&lt;/TD&gt;&lt;/TR&gt;\n"";
foreach($trxnProperties as $key=&gt;$value){
    echo "" &lt;TR&gt;&lt;TD&gt;$key&lt;/TD&gt;&lt;TD&gt;:$value&lt;/TD&gt;&lt;/TR&gt;\n"";
}
echo ""&lt;/TABLE&gt;\n"";

echo ""&lt;H3&gt;&lt;U&gt;Transaction Properties AFTER Processing&lt;/U&gt;&lt;/H3&gt;"";
echo ""&lt;TABLE border='0'&gt;\n"";
echo "" &lt;TR&gt;&lt;TD&gt;&lt;B&gt;Property&lt;/B&gt;&lt;/TD&gt;&lt;TD&gt;&lt;B&gt;Value&lt;/B&gt;&lt;/TD&gt;&lt;/TR&gt;\n"";
foreach($trxnResult as $key=&gt;$value){
    $value = nl2br($value);
    echo "" &lt;TR&gt;&lt;TD valign='top'&gt;$key&lt;/TD&gt;&lt;TD&gt;:$value&lt;/TD&gt;&lt;/TR&gt;\n"";
}
echo ""&lt;/TABLE&gt;\n"";


// kill object
unset($client);
?&gt;
</code></pre>

<p>When i submit the payment my page comes to this particular code and the error it throws is</p>

<pre><code> Fatal error: Uncaught SoapFault exception: [HTTP] in C:\wamp\www\Fd\php\process.php:49 Stack trace: #0 C:\wamp\www\Fd\php\process.php(49): SoapClient-&gt;__doRequest('&lt;?xml version=""...', 'https://api.dem...', 'http://secure2....', 1, 0) #1 [internal function]: SoapClientHMAC-&gt;__doRequest('&lt;?xml version=""...', 'https://api.dem...', 'http://secure2....', 1, 0) #2 C:\wamp\www\Fd\php\process.php(104): SoapClient-&gt;__call('SendAndCommit', Array) #3 C:\wamp\www\Fd\php\process.php(104): SoapClientHMAC-&gt;SendAndCommit(Array) #4 {main} thrown in C:\wamp\www\Fd\php\process.php on line 48.
</code></pre>

<p>And the line 48 is </p>

<pre><code>return parent::__doRequest($request, $location, $action, $version, $one_way);
</code></pre>

<p>I couldn't really figure out what this error is. Googled and tried various solutions but no success.Also I have both the soap and openssl enabled in my php server if that is of any help.</p>

<p>Thanks in advance for any help.</p>
","<p>A little bit too late but anyways... just dump that garbage SOAP code, heres my early stage JSON and CURL version</p>

<pre><code>&lt;?php

class FirstData
{
        protected $host = ""api.demo.globalgatewaye4.firstdata.com"";
        protected $protocol = ""https://"";
        protected $uri = ""/transaction/v12"";

        /*Modify this acording to your firstdata api stuff*/
        protected $hmackey = ""XXXXXXXXXXXXXXXXXXXXXXX"";
        protected $keyid = ""XXXXX"";
        protected $gatewayid = ""XX000-00"";
        protected $password = ""XXXXXXX"";


        public function request()
        {
                $location = $this-&gt;protocol . $this-&gt;host . $this-&gt;uri;
                $request = array(
                        'transaction_type' =&gt; ""00"",
                        'amount' =&gt; 10.00,
                        'cc_expiry' =&gt; ""0415"",
                        'cc_number' =&gt; '4111111111111111',
                        'cardholder_name' =&gt; 'Test',
                        'reference_no' =&gt; '23',
                        'customer_ref' =&gt; '11',
                        'reference_3' =&gt; '234',
                        'gateway_id' =&gt; $this-&gt;gatewayid,
                        'password' =&gt; $this-&gt;password,
                );

                $content = json_encode($request);

                var_dump($content);

                $gge4Date = strftime(""%Y-%m-%dT%H:%M:%S"", time()) . 'Z';
                $contentType = ""application/json"";
                $contentDigest = sha1($content);
                $contentSize = sizeof($content);
                $method = ""POST"";

                $hashstr = ""$method\n$contentType\n$contentDigest\n$gge4Date\n$this-&gt;uri"";

                $authstr = 'GGE4_API ' . $this-&gt;keyid . ':' . base64_encode(hash_hmac(""sha1"", $hashstr, $this-&gt;hmackey, true));


                $headers = array( 
                        ""Content-Type: $contentType"",
                        ""X-GGe4-Content-SHA1: $contentDigest"",
                        ""X-GGe4-Date: $gge4Date"",
                        ""Authorization: $authstr"",
                        ""Accept: $contentType""
                );

                //Print the headers we area sending
                var_dump($headers);


                //CURL stuff
                $ch = curl_init();
                curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
                curl_setopt($ch, CURLOPT_URL, $location);

                //Warning -&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;
                /*Hardcoded for easier implementation, DO NOT USE THIS ON PRODUCTION!!*/
                curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0);
                curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);
                //Warning -&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;

                curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1); 
                curl_setopt($ch, CURLOPT_VERBOSE, 0);
                curl_setopt($ch, CURLOPT_HEADER, 1);

                curl_setopt($ch, CURLOPT_POST, 1);
                curl_setopt($ch, CURLOPT_POSTFIELDS, $content);

                //This guy does the job
                $output = curl_exec($ch);

                //echo curl_error($ch); 
                $header_size = curl_getinfo($ch, CURLINFO_HEADER_SIZE);
                $header = $this-&gt;parseHeader(substr($output, 0, $header_size));
                $body = substr($output, $header_size);

                curl_close($ch);
                //Print the response header
                var_dump($header);

                /* If we get any of this X-GGe4-Content-SHA1 X-GGe4-Date Authorization
                 * then the API call is valid */
                if (isset($header['authorization']))
                {
                        //Ovbiously before we do anything we should validate the hash
                        var_dump(json_decode($body));
                }
                //Otherwise just debug the error response, which is just plain text
                else
                {
                        echo $body;
                }
        }

        private function parseHeader($rawHeader)
        {
                $header = array();

                //http://blog.motane.lu/2009/02/16/exploding-new-lines-in-php/
                $lines = preg_split('/\r\n|\r|\n/', $rawHeader);

                foreach ($lines as $key =&gt; $line)
                {
                        $keyval = explode(': ', $line, 2);

                        if (isset($keyval[0]) &amp;&amp; isset($keyval[1]))
                        {
                                $header[strtolower($keyval[0])] = $keyval[1];
                        }
                }

                return $header;
        }
}

$firstdata = new FirstData();

$firstdata-&gt;request();
</code></pre>
","16556440","6907","<php><soap><payment-gateway><hmac><firstdata>","2","16","4","2016-12-22 07:21:52","16556440","0","4","2134530","","2013-04-25 08:11:40","2013-04-25 07:59:10","","","2013-05-15 03:40:00"
"16209349","First data payment gateway integration soap fault error","<p>Hi I am trying to integrate First data payment gateway integration in soap request method using php. I have downloaded the working sample code from first data but when i am trying to submit a payment with the sample code they gave it is throwing me an error.</p>

<p>The entire php code is</p>

<pre><code>&lt;?php


class SoapClientHMAC extends SoapClient {
  public function __doRequest($request, $location, $action, $version, $one_way = NULL) {
    global $context;
    $hmackey = ""***********************""; // &lt;-- Insert your HMAC key here
    $keyid = ""*****""; // &lt;-- Insert the Key ID here
    $hashtime = date(""c"");
    $hashstr = ""POST\ntext/xml; charset=utf-8\n"" . sha1($request) . ""\n"" . $hashtime . ""\n"" . parse_url($location,PHP_URL_PATH);
    $authstr = base64_encode(hash_hmac(""sha1"",$hashstr,$hmackey,TRUE));
    if (version_compare(PHP_VERSION, '5.3.11') == -1) {
        ini_set(""user_agent"", ""PHP-SOAP/"" . PHP_VERSION . ""\r\nAuthorization: GGE4_API "" . $keyid . "":"" . $authstr . ""\r\nx-gge4-date: "" . $hashtime . ""\r\nx-gge4-content-sha1: "" . sha1($request));
    } else {
        stream_context_set_option($context,array(""http"" =&gt; array(""header"" =&gt; ""authorization: GGE4_API "" . $keyid . "":"" . $authstr . ""\r\nx-gge4-date: "" . $hashtime . ""\r\nx-gge4-content-sha1: "" . sha1($request))));
    }
    return parent::__doRequest($request, $location, $action, $version, $one_way);
  }

  public function SoapClientHMAC($wsdl, $options = NULL) {
    global $context;
    $context = stream_context_create();
    $options['stream_context'] = $context;
    return parent::SoapClient($wsdl, $options);
  }
}

$trxnProperties = array(
  ""User_Name""=&gt;"""",
  ""Secure_AuthResult""=&gt;"""",
  ""Ecommerce_Flag""=&gt;"""",
  ""XID""=&gt;"""",
  ""ExactID""=&gt;$_POST[""ddlPOS_ExactID""],                  //Payment Gateway
  ""CAVV""=&gt;"""",
  ""Password""=&gt;""********"",                                   //Gateway Password
  ""CAVV_Algorithm""=&gt;"""",
  ""Transaction_Type""=&gt;$_POST[""ddlPOS_Transaction_Type""],//Transaction Code I.E. Purchase=""00"" Pre-Authorization=""01"" etc.
  ""Reference_No""=&gt;$_POST[""tbPOS_Reference_No""],
  ""Customer_Ref""=&gt;$_POST[""tbPOS_Customer_Ref""],
  ""Reference_3""=&gt;$_POST[""tbPOS_Reference_3""],
  ""Client_IP""=&gt;"""",                                      //This value is only used for fraud investigation.
  ""Client_Email""=&gt;$_POST[""tb_Client_Email""],            //This value is only used for fraud investigation.
  ""Language""=&gt;$_POST[""ddlPOS_Language""],                //English=""en"" French=""fr""
  ""Card_Number""=&gt;$_POST[""tbPOS_Card_Number""],           //For Testing, Use Test#s VISA=""4111111111111111"" MasterCard=""5500000000000004"" etc.
  ""Expiry_Date""=&gt;$_POST[""ddlPOS_Expiry_Date_Month""] . $_POST[""ddlPOS_Expiry_Date_Year""],//This value should be in the format MM/YY.
  ""CardHoldersName""=&gt;$_POST[""tbPOS_CardHoldersName""],
  ""Track1""=&gt;"""",
  ""Track2""=&gt;"""",
  ""Authorization_Num""=&gt;$_POST[""tbPOS_Authorization_Num""],
  ""Transaction_Tag""=&gt;$_POST[""tbPOS_Transaction_Tag""],
  ""DollarAmount""=&gt;$_POST[""tbPOS_DollarAmount""],
  ""VerificationStr1""=&gt;$_POST[""tbPOS_VerificationStr1""],
  ""VerificationStr2""=&gt;"""",
  ""CVD_Presence_Ind""=&gt;"""",
  ""Secure_AuthRequired""=&gt;"""",
  ""Currency""=&gt;"""",
  ""PartialRedemption""=&gt;"""",

  // Level 2 fields 
  ""ZipCode""=&gt;$_POST[""tbPOS_ZipCode""],
  ""Tax1Amount""=&gt;$_POST[""tbPOS_Tax1Amount""],
  ""Tax1Number""=&gt;$_POST[""tbPOS_Tax1Number""],
  ""Tax2Amount""=&gt;$_POST[""tbPOS_Tax2Amount""],
  ""Tax2Number""=&gt;$_POST[""tbPOS_Tax2Number""],

  //""SurchargeAmount""=&gt;$_POST[""tbPOS_SurchargeAmount""], //Used for debit transactions only
  //""PAN""=&gt;$_POST[""tbPOS_PAN""]                          //Used for debit transactions only
  );


$client = new SoapClientHMAC(""https://api.demo.globalgatewaye4.firstdata.com/transaction/v12/wsdl"");
$trxnResult = $client-&gt;SendAndCommit($trxnProperties);


if(@$client-&gt;fault){
    // there was a fault, inform
    print ""&lt;B&gt;FAULT:  Code: {$client-&gt;faultcode} &lt;BR /&gt;"";
    print ""String: {$client-&gt;faultstring} &lt;/B&gt;"";
    $trxnResult[""CTR""] = ""There was an error while processing. No TRANSACTION DATA IN CTR!"";
}
//Uncomment the following commented code to display the full results.

echo ""&lt;H3&gt;&lt;U&gt;Transaction Properties BEFORE Processing&lt;/U&gt;&lt;/H3&gt;"";
echo ""&lt;TABLE border='0'&gt;\n"";
echo "" &lt;TR&gt;&lt;TD&gt;&lt;B&gt;Property&lt;/B&gt;&lt;/TD&gt;&lt;TD&gt;&lt;B&gt;Value&lt;/B&gt;&lt;/TD&gt;&lt;/TR&gt;\n"";
foreach($trxnProperties as $key=&gt;$value){
    echo "" &lt;TR&gt;&lt;TD&gt;$key&lt;/TD&gt;&lt;TD&gt;:$value&lt;/TD&gt;&lt;/TR&gt;\n"";
}
echo ""&lt;/TABLE&gt;\n"";

echo ""&lt;H3&gt;&lt;U&gt;Transaction Properties AFTER Processing&lt;/U&gt;&lt;/H3&gt;"";
echo ""&lt;TABLE border='0'&gt;\n"";
echo "" &lt;TR&gt;&lt;TD&gt;&lt;B&gt;Property&lt;/B&gt;&lt;/TD&gt;&lt;TD&gt;&lt;B&gt;Value&lt;/B&gt;&lt;/TD&gt;&lt;/TR&gt;\n"";
foreach($trxnResult as $key=&gt;$value){
    $value = nl2br($value);
    echo "" &lt;TR&gt;&lt;TD valign='top'&gt;$key&lt;/TD&gt;&lt;TD&gt;:$value&lt;/TD&gt;&lt;/TR&gt;\n"";
}
echo ""&lt;/TABLE&gt;\n"";


// kill object
unset($client);
?&gt;
</code></pre>

<p>When i submit the payment my page comes to this particular code and the error it throws is</p>

<pre><code> Fatal error: Uncaught SoapFault exception: [HTTP] in C:\wamp\www\Fd\php\process.php:49 Stack trace: #0 C:\wamp\www\Fd\php\process.php(49): SoapClient-&gt;__doRequest('&lt;?xml version=""...', 'https://api.dem...', 'http://secure2....', 1, 0) #1 [internal function]: SoapClientHMAC-&gt;__doRequest('&lt;?xml version=""...', 'https://api.dem...', 'http://secure2....', 1, 0) #2 C:\wamp\www\Fd\php\process.php(104): SoapClient-&gt;__call('SendAndCommit', Array) #3 C:\wamp\www\Fd\php\process.php(104): SoapClientHMAC-&gt;SendAndCommit(Array) #4 {main} thrown in C:\wamp\www\Fd\php\process.php on line 48.
</code></pre>

<p>And the line 48 is </p>

<pre><code>return parent::__doRequest($request, $location, $action, $version, $one_way);
</code></pre>

<p>I couldn't really figure out what this error is. Googled and tried various solutions but no success.Also I have both the soap and openssl enabled in my php server if that is of any help.</p>

<p>Thanks in advance for any help.</p>
","<p>I tried SOAP with no success, finally had to switch to JSON.
@KukoBit's answer worked for me. Only problem was the date string which is expected in GMT. I solved it by calculating date as follows:</p>

<pre><code>$gge4Date = strftime(""%Y-%m-%dT%H:%M:%S"", time() - (int) substr(date('O'), 0, 3)*60*60) . 'Z';
</code></pre>

<p>Hope this helps.</p>

<p>ps. I know this should be a comment, but due to points restrictions, I cannot.</p>
","17664936","6907","<php><soap><payment-gateway><hmac><firstdata>","2","5","4","2016-12-22 07:21:52","16556440","0","4","2134530","","2013-04-25 08:11:40","2013-04-25 07:59:10","","","2013-07-15 22:22:58"
"16209349","First data payment gateway integration soap fault error","<p>Hi I am trying to integrate First data payment gateway integration in soap request method using php. I have downloaded the working sample code from first data but when i am trying to submit a payment with the sample code they gave it is throwing me an error.</p>

<p>The entire php code is</p>

<pre><code>&lt;?php


class SoapClientHMAC extends SoapClient {
  public function __doRequest($request, $location, $action, $version, $one_way = NULL) {
    global $context;
    $hmackey = ""***********************""; // &lt;-- Insert your HMAC key here
    $keyid = ""*****""; // &lt;-- Insert the Key ID here
    $hashtime = date(""c"");
    $hashstr = ""POST\ntext/xml; charset=utf-8\n"" . sha1($request) . ""\n"" . $hashtime . ""\n"" . parse_url($location,PHP_URL_PATH);
    $authstr = base64_encode(hash_hmac(""sha1"",$hashstr,$hmackey,TRUE));
    if (version_compare(PHP_VERSION, '5.3.11') == -1) {
        ini_set(""user_agent"", ""PHP-SOAP/"" . PHP_VERSION . ""\r\nAuthorization: GGE4_API "" . $keyid . "":"" . $authstr . ""\r\nx-gge4-date: "" . $hashtime . ""\r\nx-gge4-content-sha1: "" . sha1($request));
    } else {
        stream_context_set_option($context,array(""http"" =&gt; array(""header"" =&gt; ""authorization: GGE4_API "" . $keyid . "":"" . $authstr . ""\r\nx-gge4-date: "" . $hashtime . ""\r\nx-gge4-content-sha1: "" . sha1($request))));
    }
    return parent::__doRequest($request, $location, $action, $version, $one_way);
  }

  public function SoapClientHMAC($wsdl, $options = NULL) {
    global $context;
    $context = stream_context_create();
    $options['stream_context'] = $context;
    return parent::SoapClient($wsdl, $options);
  }
}

$trxnProperties = array(
  ""User_Name""=&gt;"""",
  ""Secure_AuthResult""=&gt;"""",
  ""Ecommerce_Flag""=&gt;"""",
  ""XID""=&gt;"""",
  ""ExactID""=&gt;$_POST[""ddlPOS_ExactID""],                  //Payment Gateway
  ""CAVV""=&gt;"""",
  ""Password""=&gt;""********"",                                   //Gateway Password
  ""CAVV_Algorithm""=&gt;"""",
  ""Transaction_Type""=&gt;$_POST[""ddlPOS_Transaction_Type""],//Transaction Code I.E. Purchase=""00"" Pre-Authorization=""01"" etc.
  ""Reference_No""=&gt;$_POST[""tbPOS_Reference_No""],
  ""Customer_Ref""=&gt;$_POST[""tbPOS_Customer_Ref""],
  ""Reference_3""=&gt;$_POST[""tbPOS_Reference_3""],
  ""Client_IP""=&gt;"""",                                      //This value is only used for fraud investigation.
  ""Client_Email""=&gt;$_POST[""tb_Client_Email""],            //This value is only used for fraud investigation.
  ""Language""=&gt;$_POST[""ddlPOS_Language""],                //English=""en"" French=""fr""
  ""Card_Number""=&gt;$_POST[""tbPOS_Card_Number""],           //For Testing, Use Test#s VISA=""4111111111111111"" MasterCard=""5500000000000004"" etc.
  ""Expiry_Date""=&gt;$_POST[""ddlPOS_Expiry_Date_Month""] . $_POST[""ddlPOS_Expiry_Date_Year""],//This value should be in the format MM/YY.
  ""CardHoldersName""=&gt;$_POST[""tbPOS_CardHoldersName""],
  ""Track1""=&gt;"""",
  ""Track2""=&gt;"""",
  ""Authorization_Num""=&gt;$_POST[""tbPOS_Authorization_Num""],
  ""Transaction_Tag""=&gt;$_POST[""tbPOS_Transaction_Tag""],
  ""DollarAmount""=&gt;$_POST[""tbPOS_DollarAmount""],
  ""VerificationStr1""=&gt;$_POST[""tbPOS_VerificationStr1""],
  ""VerificationStr2""=&gt;"""",
  ""CVD_Presence_Ind""=&gt;"""",
  ""Secure_AuthRequired""=&gt;"""",
  ""Currency""=&gt;"""",
  ""PartialRedemption""=&gt;"""",

  // Level 2 fields 
  ""ZipCode""=&gt;$_POST[""tbPOS_ZipCode""],
  ""Tax1Amount""=&gt;$_POST[""tbPOS_Tax1Amount""],
  ""Tax1Number""=&gt;$_POST[""tbPOS_Tax1Number""],
  ""Tax2Amount""=&gt;$_POST[""tbPOS_Tax2Amount""],
  ""Tax2Number""=&gt;$_POST[""tbPOS_Tax2Number""],

  //""SurchargeAmount""=&gt;$_POST[""tbPOS_SurchargeAmount""], //Used for debit transactions only
  //""PAN""=&gt;$_POST[""tbPOS_PAN""]                          //Used for debit transactions only
  );


$client = new SoapClientHMAC(""https://api.demo.globalgatewaye4.firstdata.com/transaction/v12/wsdl"");
$trxnResult = $client-&gt;SendAndCommit($trxnProperties);


if(@$client-&gt;fault){
    // there was a fault, inform
    print ""&lt;B&gt;FAULT:  Code: {$client-&gt;faultcode} &lt;BR /&gt;"";
    print ""String: {$client-&gt;faultstring} &lt;/B&gt;"";
    $trxnResult[""CTR""] = ""There was an error while processing. No TRANSACTION DATA IN CTR!"";
}
//Uncomment the following commented code to display the full results.

echo ""&lt;H3&gt;&lt;U&gt;Transaction Properties BEFORE Processing&lt;/U&gt;&lt;/H3&gt;"";
echo ""&lt;TABLE border='0'&gt;\n"";
echo "" &lt;TR&gt;&lt;TD&gt;&lt;B&gt;Property&lt;/B&gt;&lt;/TD&gt;&lt;TD&gt;&lt;B&gt;Value&lt;/B&gt;&lt;/TD&gt;&lt;/TR&gt;\n"";
foreach($trxnProperties as $key=&gt;$value){
    echo "" &lt;TR&gt;&lt;TD&gt;$key&lt;/TD&gt;&lt;TD&gt;:$value&lt;/TD&gt;&lt;/TR&gt;\n"";
}
echo ""&lt;/TABLE&gt;\n"";

echo ""&lt;H3&gt;&lt;U&gt;Transaction Properties AFTER Processing&lt;/U&gt;&lt;/H3&gt;"";
echo ""&lt;TABLE border='0'&gt;\n"";
echo "" &lt;TR&gt;&lt;TD&gt;&lt;B&gt;Property&lt;/B&gt;&lt;/TD&gt;&lt;TD&gt;&lt;B&gt;Value&lt;/B&gt;&lt;/TD&gt;&lt;/TR&gt;\n"";
foreach($trxnResult as $key=&gt;$value){
    $value = nl2br($value);
    echo "" &lt;TR&gt;&lt;TD valign='top'&gt;$key&lt;/TD&gt;&lt;TD&gt;:$value&lt;/TD&gt;&lt;/TR&gt;\n"";
}
echo ""&lt;/TABLE&gt;\n"";


// kill object
unset($client);
?&gt;
</code></pre>

<p>When i submit the payment my page comes to this particular code and the error it throws is</p>

<pre><code> Fatal error: Uncaught SoapFault exception: [HTTP] in C:\wamp\www\Fd\php\process.php:49 Stack trace: #0 C:\wamp\www\Fd\php\process.php(49): SoapClient-&gt;__doRequest('&lt;?xml version=""...', 'https://api.dem...', 'http://secure2....', 1, 0) #1 [internal function]: SoapClientHMAC-&gt;__doRequest('&lt;?xml version=""...', 'https://api.dem...', 'http://secure2....', 1, 0) #2 C:\wamp\www\Fd\php\process.php(104): SoapClient-&gt;__call('SendAndCommit', Array) #3 C:\wamp\www\Fd\php\process.php(104): SoapClientHMAC-&gt;SendAndCommit(Array) #4 {main} thrown in C:\wamp\www\Fd\php\process.php on line 48.
</code></pre>

<p>And the line 48 is </p>

<pre><code>return parent::__doRequest($request, $location, $action, $version, $one_way);
</code></pre>

<p>I couldn't really figure out what this error is. Googled and tried various solutions but no success.Also I have both the soap and openssl enabled in my php server if that is of any help.</p>

<p>Thanks in advance for any help.</p>
","<p>Just a heads up for those who keep getting 'Unauthorized Request. Bad or missing credentials.' .</p>

<p>MAKE SURE you are NOT using your PRODUCTION credentials for DEMO environment. They will not work. Stop pulling your hair out :)<br>
all you have to do is, goto </p>

<p><a href=""https://firstdata.zendesk.com/entries/21510561-first-data-global-gateway-e4sm-demo-accounts"" rel=""noreferrer"">https://firstdata.zendesk.com/entries/21510561-first-data-global-gateway-e4sm-demo-accounts</a></p>

<p>Signup for a free demo. you will generate your hmac, and get your other data there , just like you do in production. </p>
","28120855","6907","<php><soap><payment-gateway><hmac><firstdata>","2","5","4","2016-12-22 07:21:52","16556440","0","4","2134530","","2013-04-25 08:11:40","2013-04-25 07:59:10","","","2015-01-24 00:16:29"
"11203856","Is HMAC necessary if all API calls are made through https?","<p>If all api calls are sent through https, does HMAC add any extra security?  For example, in oauth 2, the client sends its secret key to the provider without any hashing whatsoever.  Is this considered secure because it's over https?  While not strictly oauth, would using HMAC on this call make oauth 2 more secure?  If so, why isn't that a standard part of oauth 2?</p>
","<p>The OAuth 2 standard requires that the authorization server MUST use HTTPS on all of its endpoints and the client SHOULD use a callback protected with HTTPS. Since message contents (headers, query parameters and fragments considering OAuth) are known only by the server and the client, usage of an HTTPS connection is considered to be safe. Thus there's no gain using a separate signature for authorization request, that's why such signatures are not even mentioned in the standard.</p>

<p>This not necessarily hold for the response though. If the client receives the authorization response to an unprotected callback, then it cannot verify its validity. In such cases, an attacker can send arbitrary authorization results to the client. Adding a signature with the callback parameters, you may avoid this. However, it seems to be a better solution to use mutual client/server authentication with a HTTPS callback instead.</p>

<p>While there's no real gain using signatures during authorization, they may be useful to access protected resources to avoid stealing access tokens. This is why the MAC token type is in the standard, see <a href=""http://tools.ietf.org/html/draft-ietf-oauth-v2-28#section-7.1"" rel=""noreferrer"">section 7.1</a>.</p>
","11222515","6906","<https><oauth-2.0><hmac>","23","15","2","2016-05-24 09:35:25","","0","6","","","","2012-06-26 08:55:16","","2012-06-27 10:42:21","2012-06-27 08:47:47"
"11203856","Is HMAC necessary if all API calls are made through https?","<p>If all api calls are sent through https, does HMAC add any extra security?  For example, in oauth 2, the client sends its secret key to the provider without any hashing whatsoever.  Is this considered secure because it's over https?  While not strictly oauth, would using HMAC on this call make oauth 2 more secure?  If so, why isn't that a standard part of oauth 2?</p>
","<p>HMAC is for authentication that determining who you are, https is for security of transport that ensure on one in the middle can see the content of your transport. </p>

<p>Oauth 2 authorization server use  secret key or password determining who you are. Oauth2 resource server use token from authorization server determining who you are. Using https or not depends on whether you want to protect your secret key and tokens.</p>
","37409674","6906","<https><oauth-2.0><hmac>","23","0","2","2016-05-24 09:35:25","","0","6","","","","2012-06-26 08:55:16","","","2016-05-24 09:35:25"
"13019598","Python HMAC-SHA1 vs Java HMAC-SHA1 different results","<p>I borrowed the HMAC-SHA1 Java code from <a href=""http://tools.ietf.org/html/rfc6238"" rel=""nofollow"">http://tools.ietf.org/html/rfc6238</a> and adapted slightly to hardcode it to use one known key/message pair with known output.</p>

<p>I then tried to write the same code in Python to verify the results, however I'm getting different values in Python and Java.</p>

<p>The Java values are known to be good.</p>

<p>Java code:</p>

<pre><code> import java.lang.reflect.UndeclaredThrowableException;
 import java.security.GeneralSecurityException;
 import java.text.DateFormat;
 import java.text.SimpleDateFormat;
 import java.util.Date;
 import javax.crypto.Mac;
 import javax.crypto.spec.SecretKeySpec;
 import java.math.BigInteger;
 import java.util.TimeZone;
 import java.util.Arrays;


 public class make_hmac {

     private make_hmac() {}


     private static byte[] hmac_sha(String crypto, byte[] keyBytes,
             byte[] text){
         try {
          System.out.println(""Key is..."" + bytesToHex(keyBytes) + ""\n"");
             Mac hmac;
             hmac = Mac.getInstance(crypto);
             SecretKeySpec macKey =
                 new SecretKeySpec(keyBytes, ""RAW"");
             hmac.init(macKey);
             return hmac.doFinal(text);
         } catch (GeneralSecurityException gse) {
             throw new UndeclaredThrowableException(gse);
         }
     }


     private static byte[] hexStr2Bytes(String hex){
         // Adding one byte to get the right conversion
         // Values starting with ""0"" can be converted
         byte[] bArray = new BigInteger(""10"" + hex,16).toByteArray();

         // Copy all the REAL bytes, not the ""first""
         byte[] ret = new byte[bArray.length - 1];
         for (int i = 0; i &lt; ret.length; i++)
             ret[i] = bArray[i+1];
         return ret;
     }

     private static final int[] DIGITS_POWER
     // 0 1  2   3    4     5      6       7        8
     = {1,10,100,1000,10000,100000,1000000,10000000,100000000 };


     public static String generateTOTP(String key,
             String time,
             String returnDigits,
             String crypto){
         int codeDigits = Integer.decode(returnDigits).intValue();
         String result = null;

         // Using the counter
         // First 8 bytes are for the movingFactor
         // Compliant with base RFC 4226 (HOTP)
         while (time.length() &lt; 16 )
             time = ""0"" + time;

         // Get the HEX in a Byte[]
         byte[] msg = hexStr2Bytes(time);
         byte[] k = hexStr2Bytes(key);
         byte[] hash = hmac_sha(crypto, k, msg);
         System.out.println(""I hashed key "" + bytesToHex(k) + "" against message "" + bytesToHex(msg) + "" and got...\n"");
         System.out.println(""HASHED: "" + bytesToHex(hash) + ""\n"");

         // put selected bytes into result int
         int offset = hash[hash.length - 1] &amp; 0xf;

         int binary =
             ((hash[offset] &amp; 0x7f) &lt;&lt; 24) |
             ((hash[offset + 1] &amp; 0xff) &lt;&lt; 16) |
             ((hash[offset + 2] &amp; 0xff) &lt;&lt; 8) |
             (hash[offset + 3] &amp; 0xff);

         int otp = binary % DIGITS_POWER[codeDigits];

         result = Integer.toString(otp);
         while (result.length() &lt; codeDigits) {
             result = ""0"" + result;
         }
         return result;
     }

  public static String bytesToHex(byte[] bytes) {
      final char[] hexArray = {'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'};
      char[] hexChars = new char[bytes.length * 2];
      int v;
      for ( int j = 0; j &lt; bytes.length; j++ ) {
          v = bytes[j] &amp; 0xFF;
          hexChars[j * 2] = hexArray[v &gt;&gt;&gt; 4];
          hexChars[j * 2 + 1] = hexArray[v &amp; 0x0F];
      }
      return new String(hexChars);
  }

     public static void main(String[] args) {
         // Seed for HMAC-SHA1 - 20 bytes
         String seed = ""3132333435363738393031323334353637383930"";
         long T0 = 0;
         long X = 30;
            long testTime = 1111111109L;

         String steps = ""0"";

         long T = (testTime - T0)/X;
         steps = Long.toHexString(T).toUpperCase();
         while (steps.length() &lt; 16) steps = ""0"" + steps;
         System.out.println(generateTOTP(seed, steps, ""8"",
         ""HmacSHA1""));
     }
 }
</code></pre>

<p>Python code:</p>

<pre><code>import hmac
from hashlib import sha1
k = ""3132333435363738393031323334353637383930""
msg = ""00000000023523EC""
print ""I hashed key"", k, ""against msg"", msg, ""and got...\n""
a = hmac.new(k, msg, sha1)
print a.digest().encode('hex')
</code></pre>

<p>Results of running Java:</p>

<pre><code>Key is...3132333435363738393031323334353637383930

I hashed key 3132333435363738393031323334353637383930 against message 00000000023523EC and got...

HASHED: 278C02E53610F84C40BD9135ACD4101012410A14

07081804
</code></pre>

<p>Results of running Python:</p>

<pre><code>I hashed key 3132333435363738393031323334353637383930 against msg 00000000023523EC and got...

fa9362e87c80a1ac61f705b5f9d5095adaec9525
</code></pre>

<p>The ""key"" and ""message"" are the same, but the Java version gets a different HMAC than the Python implementation does.</p>

<p>I suspect there's a subtle error somewhere in the Python code(because the Java version matches the expected results from the RFC) but I'm not sure where. It looks so straightforward.</p>
","<p>I think the problem is that in Java, you're using the raw bytes as the key (only converting them to a hex string for output):</p>

<pre><code>System.out.println(""Key is..."" + bytesToHex(keyBytes) + ""\n"");
// ...
SecretKeySpec macKey = new SecretKeySpec(keyBytes, ""RAW"");
</code></pre>

<p>But in Python, you're using the hex string:</p>

<pre><code>k = ""3132333435363738393031323334353637383930""
</code></pre>

<p>It looks like you can <a href=""https://stackoverflow.com/questions/443967/how-to-create-python-bytes-object-from-long-hex-string"">decode the hex string</a> with:</p>

<pre><code>raw_key = k.decode('hex')
</code></pre>
","13019685","6696","<java><python><sha1><hmac>","5","8","1","2013-11-03 15:20:39","13019685","0","1","411022","","2013-11-03 15:20:39","2012-10-22 20:47:17","","2017-05-23 12:19:25","2012-10-22 20:53:41"
"27082396","How does one generate an HMAC string in Elixir?","<p>I'm attempting to write an Amazon Product Advertising API client in Elixir. The developer guide describes <a href=""http://docs.aws.amazon.com/AWSECommerceService/latest/DG/rest-signature.html"">the process for signing an API request</a> in which the an HMAC-SHA26 hash must be created using the request and the ""Secret Access Key."" This is the function I wrote to handle signing the request:</p>

<pre><code>defp sign_request(url) do
  url_parts = URI.parse(url)
  request = ""GET\n"" &lt;&gt; url_parts.host &lt;&gt; ""\n"" &lt;&gt; url_parts.path &lt;&gt; ""\n"" &lt;&gt; url_parts.query
  url &lt;&gt; ""&amp;Signature="" &lt;&gt; :crypto.hmac(:sha256, 'ThisIsMySecretAccessKey', request)
end
</code></pre>

<p>The url passed into the function looks something like this: <code>http://webservice.amazon.com/onca/xml?AssociateTag=ThisIsMyAssociateTag&amp;AWSAccessKeyId=ThisIsMyAWSAccessKeyId&amp;Keywords=stuff&amp;Operation=ItemSearch&amp;SearchIndex=Apparel&amp;Service=AWSECommerceService&amp;Timestamp=2014-11-22T12%3A00%3A00Z&amp;Validate=True&amp;Version=2013-08-01</code></p>

<p>The issue I'm having is that, while<code>:crypto.hmac/3</code> returns a binary, that binary is not a string; passing the return value to <code>String.valid?/1</code> returns <code>false</code>. So, I am unable to concatenate the return value onto the end of the url string to sign the request.</p>

<p>Am I using <a href=""https://github.com/erlang/otp/blob/maint/lib/crypto/src/crypto.erl#L923""><code>:crypto.hmac/3</code></a> incorrectly? Is there something I'm missing? Is there an alternate way I should be going about this?</p>
","<p>When you using <code>:crypto.hmac/3</code> its return base 16 integer in binary format, your problem could be solved like this:</p>

<pre><code>:crypto.hmac(:sha256, ""key"", ""The quick brown fox jumps over the lazy dog"")
|&gt; Base.encode16
</code></pre>

<p>This is match example from <a href=""https://en.wikipedia.org/wiki/Hash-based_message_authentication_code#Examples_of_HMAC_.28MD5.2C_SHA1.2C_SHA256.29"">https://en.wikipedia.org/wiki/Hash-based_message_authentication_code#Examples_of_HMAC_.28MD5.2C_SHA1.2C_SHA256.29</a></p>
","27085314","6674","<hmac><sha256><otp><elixir><amazon-product-api>","11","26","1","2017-12-29 05:00:17","27085314","1","2","","","","2014-11-22 20:50:23","","2015-06-08 03:08:45","2014-11-23 03:34:49"
"51475814","HMAC authentication via Postman","<p>I'm using an example for setting up HMAC authentication for a Web API project.  The original example source code/project is available here:</p>

<p><a href=""http://bitoftech.net/2014/12/15/secure-asp-net-web-api-using-api-key-authentication-hmac-authentication/"" rel=""nofollow noreferrer"">http://bitoftech.net/2014/12/15/secure-asp-net-web-api-using-api-key-authentication-hmac-authentication/</a></p>

<p>I'm trying to get Postman to construct and send a GET request in it's pre-request script.  However the request always fails with a 401 and I can't figure out why.<br>
Postman pre-request script:</p>

<pre><code>var AppId = ""4d53bce03ec34c0a911182d4c228ee6c"";
var APIKey = ""A93reRTUJHsCuQSHR+L3GxqOJyDmQpCgps102ciuabc="";
var requestURI = ""http%3a%2f%2flocalhost%3a55441%2fapi%2fv1%2fdata"";
var requestMethod = ""GET"";
var requestTimeStamp = ""{{$timestamp}}"";
var nonce = ""1"";
var requestContentBase64String = """";

var signatureRawData  = AppId + requestMethod + requestURI + requestTimeStamp +  nonce + requestContentBase64String; //check
var signature = CryptoJS.enc.Utf8.parse(signatureRawData);
var secretByteArray = CryptoJS.enc.Base64.parse(APIKey);
var signatureBytes = CryptoJS.HmacSHA256(signature,secretByteArray)

var requestSignatureBase64String = CryptoJS.enc.Base64.stringify(signatureBytes);
postman.setGlobalVariable(""key"", ""amx "" + AppId + "":"" + requestSignatureBase64String + "":"" + nonce + "":"" + requestTimeStamp);
</code></pre>
","<p>After a few days of testing I figured out the problem. It was actually to do with the variable placeholders provided by Postman of all things.  In testing the placeholder {{$timestamp}} at face value was passing a valid value.  When I stripped the signature back to start with just a single segment I was getting authenticated successfully.  Until of course I put the timestamp placeholder back in.  </p>

<p>When I swapped out the placeholder for the actual value passed in the header it worked fine.  I can only conclude that there must be some extra character I can't see. Perhaps on the Postman side when it creates the signature.  The problem extends to other placeholders such as {{$guid}}.  </p>
","51619521","6627","<c#><security><postman><hmac>","1","1","2","2019-05-24 08:06:19","","0","1","4924879","","2018-07-31 06:30:37","2018-07-23 09:43:56","","","2018-07-31 18:05:35"
"51475814","HMAC authentication via Postman","<p>I'm using an example for setting up HMAC authentication for a Web API project.  The original example source code/project is available here:</p>

<p><a href=""http://bitoftech.net/2014/12/15/secure-asp-net-web-api-using-api-key-authentication-hmac-authentication/"" rel=""nofollow noreferrer"">http://bitoftech.net/2014/12/15/secure-asp-net-web-api-using-api-key-authentication-hmac-authentication/</a></p>

<p>I'm trying to get Postman to construct and send a GET request in it's pre-request script.  However the request always fails with a 401 and I can't figure out why.<br>
Postman pre-request script:</p>

<pre><code>var AppId = ""4d53bce03ec34c0a911182d4c228ee6c"";
var APIKey = ""A93reRTUJHsCuQSHR+L3GxqOJyDmQpCgps102ciuabc="";
var requestURI = ""http%3a%2f%2flocalhost%3a55441%2fapi%2fv1%2fdata"";
var requestMethod = ""GET"";
var requestTimeStamp = ""{{$timestamp}}"";
var nonce = ""1"";
var requestContentBase64String = """";

var signatureRawData  = AppId + requestMethod + requestURI + requestTimeStamp +  nonce + requestContentBase64String; //check
var signature = CryptoJS.enc.Utf8.parse(signatureRawData);
var secretByteArray = CryptoJS.enc.Base64.parse(APIKey);
var signatureBytes = CryptoJS.HmacSHA256(signature,secretByteArray)

var requestSignatureBase64String = CryptoJS.enc.Base64.stringify(signatureBytes);
postman.setGlobalVariable(""key"", ""amx "" + AppId + "":"" + requestSignatureBase64String + "":"" + nonce + "":"" + requestTimeStamp);
</code></pre>
","<p>This is the code I'm using in my Pre-Script. It works for any query GET, PUT, POST, DELETE.</p>

<p>You need to change the AppId &amp; the APIKey values and on the last line adjust the name of the environment variable ""hmacKey"" with yours.</p>

<pre><code>var uuid = require('uuid');
var moment = require(""moment"")

var AppId = ""4d53bce03ec34c0a911182d4c228ee6c"";
var APIKey = ""A93reRTUJHsCuQSHR+L3GxqOJyDmQpCgps102ciuabc="";
var requestURI = encodeURIComponent(pm.environment.values.substitute(pm.request.url, null, false).getRaw()).toLowerCase();
var requestMethod = pm.request.method;
var requestTimeStamp = moment(new Date().toUTCString()).valueOf() / 1000;
var nonce = uuid.v4();
var requestContentBase64String = """";

if (pm.request.body) {
    var md5 = CryptoJS.MD5(pm.request.body.toString());
    requestContentBase64String = CryptoJS.enc.Base64.stringify(md5);
}

var signatureRawData  = AppId + requestMethod + requestURI + requestTimeStamp +  nonce + requestContentBase64String; //check
var signature = CryptoJS.enc.Utf8.parse(signatureRawData);
var secretByteArray = CryptoJS.enc.Base64.parse(APIKey);
var signatureBytes = CryptoJS.HmacSHA256(signature,secretByteArray);
var requestSignatureBase64String = CryptoJS.enc.Base64.stringify(signatureBytes);

var hmacKey = ""amx "" + AppId + "":"" + requestSignatureBase64String + "":"" + nonce + "":"" + requestTimeStamp;
postman.setEnvironmentVariable(""hmacKey"", hmacKey);
</code></pre>
","56288336","6627","<c#><security><postman><hmac>","1","3","2","2019-05-24 08:06:19","","0","1","4924879","","2018-07-31 06:30:37","2018-07-23 09:43:56","","","2019-05-24 08:06:19"
"4784335","How much can you truncate a SHA1 hash and be reasonably sure of having an unique ID?","<p>I am making an application that stores documents and gives each one a UID based on a SHA1 digest of a few things including the timestamp. The digest has a lot of characters, and I want to allow users to identify the documents by using the first x characters of the full digest. What's a good value for x if the number of documents is maybe around 10K - 100K?</p>
","<p>There really isn't a value for this; part of what makes SHA a good general-purpose hashing algorithm is that similar data does not necessarily produce similar hashed values. Your best bet (without knowing anything else about your system) would just be to search the list of documents whose hashes start with the value supplied by the user, then either present them with a list of documents to select from or go directly to the document if there's only one.</p>
","4784368","6611","<algorithm><probability><sha1><hmac>","17","1","5","2013-11-03 14:59:55","4784437","0","8","411022","","2013-11-03 14:59:55","2011-01-24 16:23:49","","","2011-01-24 16:27:23"
"4784335","How much can you truncate a SHA1 hash and be reasonably sure of having an unique ID?","<p>I am making an application that stores documents and gives each one a UID based on a SHA1 digest of a few things including the timestamp. The digest has a lot of characters, and I want to allow users to identify the documents by using the first x characters of the full digest. What's a good value for x if the number of documents is maybe around 10K - 100K?</p>
","<p>Well, here's a possibly too simplistic of an answer..</p>

<p>If with full sha1 you get about 1 in 2^160 chance of collision, then by truncating one character you increase the chances of collision by 16 (all possible values of the truncated character)... which is 2^4.. So, if you truncate x characters you get 1 in 2^(160 - 4*x) chances of collision.. right?</p>
","4784369","6611","<algorithm><probability><sha1><hmac>","17","0","5","2013-11-03 14:59:55","4784437","0","8","411022","","2013-11-03 14:59:55","2011-01-24 16:23:49","","","2011-01-24 16:27:40"
"4784335","How much can you truncate a SHA1 hash and be reasonably sure of having an unique ID?","<p>I am making an application that stores documents and gives each one a UID based on a SHA1 digest of a few things including the timestamp. The digest has a lot of characters, and I want to allow users to identify the documents by using the first x characters of the full digest. What's a good value for x if the number of documents is maybe around 10K - 100K?</p>
","<p>It's a <a href=""http://en.wikipedia.org/wiki/Birthday_problem#Generalizations"" rel=""nofollow"">generalization</a> of <a href=""http://en.wikipedia.org/wiki/Birthday_problem"" rel=""nofollow"">the birthday problem</a>. In you case <em>n</em> is number of documents, and instead of constant 365 you'd have number of possibilities the cutoff gives you (so for k bits it's 2<sup>k</sup>). </p>

<p>Of course exact calculation is out of the question, but you might use <a href=""http://en.wikipedia.org/wiki/Birthday_problem#Approximations"" rel=""nofollow"">approximation</a>.  </p>
","4784399","6611","<algorithm><probability><sha1><hmac>","17","1","5","2013-11-03 14:59:55","4784437","0","8","411022","","2013-11-03 14:59:55","2011-01-24 16:23:49","","","2011-01-24 16:30:26"
"4784335","How much can you truncate a SHA1 hash and be reasonably sure of having an unique ID?","<p>I am making an application that stores documents and gives each one a UID based on a SHA1 digest of a few things including the timestamp. The digest has a lot of characters, and I want to allow users to identify the documents by using the first x characters of the full digest. What's a good value for x if the number of documents is maybe around 10K - 100K?</p>
","<p>Adapting the formulas on on <a href=""http://en.wikipedia.org/wiki/Birthday_problem#Approximation_of_number_of_people"" rel=""noreferrer"">wikipedia for the Birthday problem</a>, you can approximate the probability of collision as <code>e^(-n^2/(2^(b+1)))</code>, where <code>n</code> is the document count and <code>b</code> is the number of bits. <a href=""http://www.wolframalpha.com/input/?i=Plot%5B1+-+E%5E%28-%28100000%29%5E2/%282*2%5Ex%29%29,+%7Bx,+32,+64%7D%5D"" rel=""noreferrer"">Graphing this formula with n=100,000</a>, it looks like you'll want b > 45 at least. I'd be more inclined to go with 64 to make it a nice and round number. That said, do have a plan to deal with collisions if they occur (maybe alter the timestamp slightly, or add a nonce?)</p>

<p>For that matter, if the sha1 is based on more than just the content of the document, why not simply make it a random ID? In this case collisions are less of a problem, as you can always generate a new random number and try again (the probability of a collision with a single try is the same, however).</p>
","4784437","6611","<algorithm><probability><sha1><hmac>","17","20","5","2013-11-03 14:59:55","4784437","0","8","411022","","2013-11-03 14:59:55","2011-01-24 16:23:49","","2012-05-23 18:47:28","2011-01-24 16:33:03"
"4784335","How much can you truncate a SHA1 hash and be reasonably sure of having an unique ID?","<p>I am making an application that stores documents and gives each one a UID based on a SHA1 digest of a few things including the timestamp. The digest has a lot of characters, and I want to allow users to identify the documents by using the first x characters of the full digest. What's a good value for x if the number of documents is maybe around 10K - 100K?</p>
","<p>Be careful of truncation as there is no reduction in proof that the smaller hash is secure. See Kelsey's <a href=""http://csrc.nist.gov/groups/ST/hash/documents/Kelsey_Truncation.pdf"" rel=""nofollow"">http://csrc.nist.gov/groups/ST/hash/documents/Kelsey_Truncation.pdf</a>. Kelsey gives to heuristic arguments stating the same (""Related Hash Outputs"" and ""Near Collisions""). Biham/Chen offer examples of Near Collisions; and Knudsen demonstrates Truncated Differentials.</p>

<p>In the end, you probably want to feed your data into an HMAC <em>with</em> the truncated size (the size is digested by the HMAC, too) and then use the truncated HMAC.</p>
","13926764","6611","<algorithm><probability><sha1><hmac>","17","2","5","2013-11-03 14:59:55","4784437","0","8","411022","","2013-11-03 14:59:55","2011-01-24 16:23:49","","","2012-12-18 05:20:16"
"4193543","Erlang calculating HMAC-SHA1 example?","<p>Any examples or libraries to caculate HMAC-SHA1 in Erlang?</p>

<p>I tried Crypto Module, but apparently doesn't match exactly. Any examples?</p>
","<p>The sha_mac function in the crypto module is HMAC-SHA1:</p>

<p><a href=""http://www.erlang.org/doc/man/crypto.html#sha_mac-2"" rel=""nofollow"">http://www.erlang.org/doc/man/crypto.html#sha_mac-2</a></p>

<p>The reason it might not match is because you're probably comparing it to a ""hexdigest"", not the raw digest data.</p>
","4193780","6547","<erlang><sha1><hmac>","9","1","3","2014-06-09 18:00:03","4202361","0","3","","","","2010-11-16 11:13:44","2015-09-10 04:14:31","","2010-11-16 11:49:17"
"4193543","Erlang calculating HMAC-SHA1 example?","<p>Any examples or libraries to caculate HMAC-SHA1 in Erlang?</p>

<p>I tried Crypto Module, but apparently doesn't match exactly. Any examples?</p>
","<p>To expand on the previous answer, here is the hmac module in Python using the SHA-1 algorithm with the key 'hello' and the message 'world':</p>

<pre><code>&gt;&gt;&gt; import hashlib
&gt;&gt;&gt; import hmac
&gt;&gt;&gt; hmac.HMAC(key='hello', msg='world', digestmod=hashlib.sha1).hexdigest()
'8a3a84bcd0d0065e97f175d370447c7d02e00973'
</code></pre>

<p>Here's the equivalent in Erlang. I'd use a more efficient method to convert the binary MAC to a hex digest in typical code, but I used this one for brevity:</p>

<pre><code>1&gt; crypto:start().
ok
2&gt; &lt;&lt;Mac:160/integer&gt;&gt; = crypto:hmac(sha, &lt;&lt;""hello""&gt;&gt;, &lt;&lt;""world""&gt;&gt;).
&lt;&lt;138,58,132,188,208,208,6,94,151,241,117,211,112,68,124,
  125,2,224,9,115&gt;&gt;
3&gt; lists:flatten(io_lib:format(""~40.16.0b"", [Mac])). 
""8a3a84bcd0d0065e97f175d370447c7d02e00973""
</code></pre>
","4202361","6547","<erlang><sha1><hmac>","9","20","3","2014-06-09 18:00:03","4202361","0","3","","","","2010-11-16 11:13:44","2015-09-10 04:14:31","2014-06-09 18:00:03","2010-11-17 07:34:54"
"4193543","Erlang calculating HMAC-SHA1 example?","<p>Any examples or libraries to caculate HMAC-SHA1 in Erlang?</p>

<p>I tried Crypto Module, but apparently doesn't match exactly. Any examples?</p>
","<pre><code>string:to_lower(lists:flatten([[integer_to_list(N, 16) || &lt;&lt;N:4&gt;&gt; &lt;= crypto:sha_mac(""hello"", ""world"")]])).
</code></pre>
","21106145","6547","<erlang><sha1><hmac>","9","0","3","2014-06-09 18:00:03","4202361","0","3","","","","2010-11-16 11:13:44","2015-09-10 04:14:31","","2014-01-14 04:32:37"
"11670542","java hmac/sha512 generation","<p>I have this php code which generate a <strong>HMAC</strong> (and not a simple message digest):</p>

<pre><code>&lt;?php 
$key = ""0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF"";
$binkey = pack(""H*"", $key); 
echo strtoupper(hash_hmac('sha512', ""ABC"", $binkey)); 
?&gt;
</code></pre>

<p>And with <code>ABC</code> input its output is:</p>

<pre><code>100A6A016A4B21AE120851D51C93B293D95B7D8A44B16ACBEFC2D1C9DF02B6F54FA3C2D6802E52FED5DF8652DDD244788A204682D2D1CE861FDA4E67F2792643
</code></pre>

<p>And I need to clone it in java.</p>

<p>So here is my current java clone :</p>

<pre><code>private String generateHMAC( String datas )
    {

        //                final Charset asciiCs = Charset.forName( ""utf-8"" );
        Mac mac;
        String result = """";
        try
        {
            byte[] bytesKey = PayboxConstants.KEY.getBytes( );
            final SecretKeySpec secretKey = new SecretKeySpec( bytesKey, ""HmacSHA512"" );
            mac = Mac.getInstance( ""HmacSHA512"" );
            mac.init( secretKey );
            final byte[] macData = mac.doFinal( datas.getBytes( ) );
            byte[] hex = new Hex( ).encode( macData );
            result = new String( hex, ""ISO-8859-1"" );
        }
        catch ( final NoSuchAlgorithmException e )
        {
            AppLogService.error( e );
        }
        catch ( final InvalidKeyException e )
        {
            AppLogService.error( e );
        }
        catch ( UnsupportedEncodingException e )
        {
            AppLogService.error( e );
        }

        return result.toUpperCase( );

    }
</code></pre>

<p>But it does not makes the job because for same input (ABC) its ouput is:</p>

<pre><code>AA6492987D7A7AC81109E877315414806F1973CC47B897ECE713171A25A11B279329B1BFF39EA72A5EFB7EDCD71D1F34D5AAC49999A780BD13F019ED99685B80
</code></pre>

<p>I've tries a lot of other java code but none of them was an exact clone of php version.</p>

<p>What did I do wrong?</p>
","<p>I use this for SHA 512 in Java. It might help:</p>

<pre><code>public static String sha512 ( String str )
    {
        try
        {
            return sha512 ( str.getBytes ( ""UTF-8"" ) );
        }
        catch ( UnsupportedEncodingException e )
        {
            e.printStackTrace ( );
            return """";
        }
    }

public static String sha512 ( byte[] array )
{
    try
    {
        MessageDigest m = MessageDigest.getInstance ( ""SHA-512"" );
        m.update ( array );
        String hash = new BigInteger ( 1, m.digest ( ) ).toString ( 16 );
        while ( hash.length ( ) &lt; 32 )
        {
            hash = ""0"" + hash;
        }
        return hash;
    }
    catch ( NoSuchAlgorithmException e )
    {
        e.printStackTrace ( );
        return """";
    }
}
</code></pre>

<p>I also remember that there is detailed answer about MD-5 in a post in stackoverflow (just the algorythm is different)</p>
","11670648","6448","<java><php><sha256><hmac>","2","-1","3","2012-07-26 14:59:24","11671975","0","7","657524","","2012-07-26 13:46:45","2012-07-26 13:37:57","","","2012-07-26 13:42:59"
"11670542","java hmac/sha512 generation","<p>I have this php code which generate a <strong>HMAC</strong> (and not a simple message digest):</p>

<pre><code>&lt;?php 
$key = ""0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF"";
$binkey = pack(""H*"", $key); 
echo strtoupper(hash_hmac('sha512', ""ABC"", $binkey)); 
?&gt;
</code></pre>

<p>And with <code>ABC</code> input its output is:</p>

<pre><code>100A6A016A4B21AE120851D51C93B293D95B7D8A44B16ACBEFC2D1C9DF02B6F54FA3C2D6802E52FED5DF8652DDD244788A204682D2D1CE861FDA4E67F2792643
</code></pre>

<p>And I need to clone it in java.</p>

<p>So here is my current java clone :</p>

<pre><code>private String generateHMAC( String datas )
    {

        //                final Charset asciiCs = Charset.forName( ""utf-8"" );
        Mac mac;
        String result = """";
        try
        {
            byte[] bytesKey = PayboxConstants.KEY.getBytes( );
            final SecretKeySpec secretKey = new SecretKeySpec( bytesKey, ""HmacSHA512"" );
            mac = Mac.getInstance( ""HmacSHA512"" );
            mac.init( secretKey );
            final byte[] macData = mac.doFinal( datas.getBytes( ) );
            byte[] hex = new Hex( ).encode( macData );
            result = new String( hex, ""ISO-8859-1"" );
        }
        catch ( final NoSuchAlgorithmException e )
        {
            AppLogService.error( e );
        }
        catch ( final InvalidKeyException e )
        {
            AppLogService.error( e );
        }
        catch ( UnsupportedEncodingException e )
        {
            AppLogService.error( e );
        }

        return result.toUpperCase( );

    }
</code></pre>

<p>But it does not makes the job because for same input (ABC) its ouput is:</p>

<pre><code>AA6492987D7A7AC81109E877315414806F1973CC47B897ECE713171A25A11B279329B1BFF39EA72A5EFB7EDCD71D1F34D5AAC49999A780BD13F019ED99685B80
</code></pre>

<p>I've tries a lot of other java code but none of them was an exact clone of php version.</p>

<p>What did I do wrong?</p>
","<p>try that :</p>

<pre><code>private String generateHMAC( String datas )
{
    MessageDigest md = MessageDigest.getInstance(""SHA-512"");

    md.update(datas.getBytes(""UTF-8"")); // Change this to ""UTF-16"" if needed
    byte[] digest = md.digest();

    StringBuffer hexString = new StringBuffer();
    for (int i=0;i&lt;digest.length;i++) {
        hexString.append(Integer.toHexString(0xFF &amp; digest[i]));
    }

    return  hexString.toString();
}
</code></pre>
","11670691","6448","<java><php><sha256><hmac>","2","-1","3","2012-07-26 14:59:24","11671975","0","7","657524","","2012-07-26 13:46:45","2012-07-26 13:37:57","","","2012-07-26 13:44:47"
"11670542","java hmac/sha512 generation","<p>I have this php code which generate a <strong>HMAC</strong> (and not a simple message digest):</p>

<pre><code>&lt;?php 
$key = ""0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF"";
$binkey = pack(""H*"", $key); 
echo strtoupper(hash_hmac('sha512', ""ABC"", $binkey)); 
?&gt;
</code></pre>

<p>And with <code>ABC</code> input its output is:</p>

<pre><code>100A6A016A4B21AE120851D51C93B293D95B7D8A44B16ACBEFC2D1C9DF02B6F54FA3C2D6802E52FED5DF8652DDD244788A204682D2D1CE861FDA4E67F2792643
</code></pre>

<p>And I need to clone it in java.</p>

<p>So here is my current java clone :</p>

<pre><code>private String generateHMAC( String datas )
    {

        //                final Charset asciiCs = Charset.forName( ""utf-8"" );
        Mac mac;
        String result = """";
        try
        {
            byte[] bytesKey = PayboxConstants.KEY.getBytes( );
            final SecretKeySpec secretKey = new SecretKeySpec( bytesKey, ""HmacSHA512"" );
            mac = Mac.getInstance( ""HmacSHA512"" );
            mac.init( secretKey );
            final byte[] macData = mac.doFinal( datas.getBytes( ) );
            byte[] hex = new Hex( ).encode( macData );
            result = new String( hex, ""ISO-8859-1"" );
        }
        catch ( final NoSuchAlgorithmException e )
        {
            AppLogService.error( e );
        }
        catch ( final InvalidKeyException e )
        {
            AppLogService.error( e );
        }
        catch ( UnsupportedEncodingException e )
        {
            AppLogService.error( e );
        }

        return result.toUpperCase( );

    }
</code></pre>

<p>But it does not makes the job because for same input (ABC) its ouput is:</p>

<pre><code>AA6492987D7A7AC81109E877315414806F1973CC47B897ECE713171A25A11B279329B1BFF39EA72A5EFB7EDCD71D1F34D5AAC49999A780BD13F019ED99685B80
</code></pre>

<p>I've tries a lot of other java code but none of them was an exact clone of php version.</p>

<p>What did I do wrong?</p>
","<p>You simply forgot to mimic <code>pack()</code>'s behavior in your Java code (whatever you need that for). </p>

<p>Use</p>

<pre><code>final SecretKeySpec secretKey = new SecretKeySpec( DatatypeConverter.parseHexBinary(PayboxConstants.KEY), ""HmacSHA512"" );
</code></pre>

<p>In your Java Code.</p>

<p>Where <code>DatatypeConverter.parseHexBinary()</code> is from the <a href=""http://docs.oracle.com/javase/6/docs/api/javax/xml/bind/DatatypeConverter.html#parseHexBinary%28java.lang.String%29"" rel=""nofollow noreferrer"">JAXB API</a>.</p>

<p>Alternatively, if you don't want to include JAXB just for the purpose of converting HEX strings to bytes, you might want to use the code posted <a href=""https://stackoverflow.com/questions/140131/convert-a-string-representation-of-a-hex-dump-to-a-byte-array-using-java"">here</a>.</p>
","11671975","6448","<java><php><sha256><hmac>","2","7","3","2012-07-26 14:59:24","11671975","0","7","657524","","2012-07-26 13:46:45","2012-07-26 13:37:57","","2017-05-23 12:26:09","2012-07-26 14:49:38"
"7723469","HmacSHA256 objective-c encryptation","<p>I wanna encpryt a string with a key, using HmacSHA256. The code everyone use is the one below, but there is one thing that doesn´t make sense.
Why would we use base64 at the end if all we want is the HmacSHA256 hash?</p>

<p>I tried seeing the hash generated after the method CCHmac is called with </p>

<pre><code>NSString *str = [[NSString alloc] initWithData:HMAC encoding:NSASCIIStringEncoding];
NSLog(@""%@"", str);
</code></pre>

<p>But i don´t get the hash generated, i get null, or garbage, like this:</p>

<p>2011-10-11 09:38:05.082 Hash_HmacSHA256[368:207] (null)
2011-10-11 09:38:05.085 Hash_HmacSHA256[368:207]    Rwªb7iså{yyþ§Ù(&amp;oá÷ÛËÚ¥M`f</p>

<pre><code>import &lt; CommonCrypto/CommonHMAC.h&gt;

NSString *key;
NSString *data;

const char *cKey  = [key cStringUsingEncoding:NSASCIIStringEncoding];
const char *cData = [data cStringUsingEncoding:NSASCIIStringEncoding];

unsigned char cHMAC[CC_SHA256_DIGEST_LENGTH];

CCHmac(kCCHmacAlgSHA256, cKey, strlen(cKey), cData, strlen(cData), cHMAC);

NSData *HMAC = [[NSData alloc] initWithBytes:cHMAC
                                  length:sizeof(cHMAC)];

NSString *hash = [HMAC base64Encoding]; //This line doesn´t make sense

[key release];
[data release];
</code></pre>
","<p>First of all, for those wondering, this is in reference to my answer to this question: <a href=""https://stackoverflow.com/questions/756492/objective-c-sample-code-for-hmac-sha1"">Objective-C sample code for HMAC-SHA1</a></p>

<hr>

<p>The HMAC you generate is a 256-bit binary value that may or may not start with a 0 byte.</p>

<p>To be able to print it, you need a string representation (binary, hex, decimal, base64, etc.). Base64 is one of the most efficient among these, that's why I used a Base64 encoding there.</p>

<p>The reason you get garbage is that most (if not all) of the octets in the HMAC value are outside the range of printable ASCII characters. If the first octet is 0 (0x00), you get nil. This is why you need an encoding that supports arbitrary values. ASCII doesn't.</p>

<p>Of course, if you don't want to print the HMAC value, then may not need such an encoding, and can keep the HMAC as is (binary NSData).</p>
","7724837","6376","<iphone><objective-c><encryption><sha256><hmac>","4","8","3","2013-02-08 16:24:50","7724837","0","4","516765","","2011-10-11 09:05:26","2011-10-11 08:49:06","","2017-05-23 11:59:05","2011-10-11 10:50:25"
"7723469","HmacSHA256 objective-c encryptation","<p>I wanna encpryt a string with a key, using HmacSHA256. The code everyone use is the one below, but there is one thing that doesn´t make sense.
Why would we use base64 at the end if all we want is the HmacSHA256 hash?</p>

<p>I tried seeing the hash generated after the method CCHmac is called with </p>

<pre><code>NSString *str = [[NSString alloc] initWithData:HMAC encoding:NSASCIIStringEncoding];
NSLog(@""%@"", str);
</code></pre>

<p>But i don´t get the hash generated, i get null, or garbage, like this:</p>

<p>2011-10-11 09:38:05.082 Hash_HmacSHA256[368:207] (null)
2011-10-11 09:38:05.085 Hash_HmacSHA256[368:207]    Rwªb7iså{yyþ§Ù(&amp;oá÷ÛËÚ¥M`f</p>

<pre><code>import &lt; CommonCrypto/CommonHMAC.h&gt;

NSString *key;
NSString *data;

const char *cKey  = [key cStringUsingEncoding:NSASCIIStringEncoding];
const char *cData = [data cStringUsingEncoding:NSASCIIStringEncoding];

unsigned char cHMAC[CC_SHA256_DIGEST_LENGTH];

CCHmac(kCCHmacAlgSHA256, cKey, strlen(cKey), cData, strlen(cData), cHMAC);

NSData *HMAC = [[NSData alloc] initWithBytes:cHMAC
                                  length:sizeof(cHMAC)];

NSString *hash = [HMAC base64Encoding]; //This line doesn´t make sense

[key release];
[data release];
</code></pre>
","<p>I spend a whole day, trying to convert the generated hash (bytes) into readable data. I used the base64 encoded you said and it didn´t work at all for me .</p>

<p>So what i did was this:</p>

<pre><code>CCHmac(kCCHmacAlgSHA256, cKey, strlen(cKey), cData, strlen(cData), cHMAC);

// Now convert to NSData structure to make it usable again
NSData *out = [NSData dataWithBytes:cHMAC length:CC_SHA256_DIGEST_LENGTH];

// description converts to hex but puts &lt;&gt; around it and spaces every 4 bytes
NSString *hash = [out description];
hash = [hash stringByReplacingOccurrencesOfString:@"" "" withString:@""""];
hash = [hash stringByReplacingOccurrencesOfString:@""&lt;"" withString:@""""];
hash = [hash stringByReplacingOccurrencesOfString:@""&gt;"" withString:@""""];
// hash is now a string with just the 40char hash value in it
NSLog(@""%@"",hash);
</code></pre>
","7738346","6376","<iphone><objective-c><encryption><sha256><hmac>","4","2","3","2013-02-08 16:24:50","7724837","0","4","516765","","2011-10-11 09:05:26","2011-10-11 08:49:06","","2013-02-08 16:24:50","2011-10-12 10:03:07"
"7723469","HmacSHA256 objective-c encryptation","<p>I wanna encpryt a string with a key, using HmacSHA256. The code everyone use is the one below, but there is one thing that doesn´t make sense.
Why would we use base64 at the end if all we want is the HmacSHA256 hash?</p>

<p>I tried seeing the hash generated after the method CCHmac is called with </p>

<pre><code>NSString *str = [[NSString alloc] initWithData:HMAC encoding:NSASCIIStringEncoding];
NSLog(@""%@"", str);
</code></pre>

<p>But i don´t get the hash generated, i get null, or garbage, like this:</p>

<p>2011-10-11 09:38:05.082 Hash_HmacSHA256[368:207] (null)
2011-10-11 09:38:05.085 Hash_HmacSHA256[368:207]    Rwªb7iså{yyþ§Ù(&amp;oá÷ÛËÚ¥M`f</p>

<pre><code>import &lt; CommonCrypto/CommonHMAC.h&gt;

NSString *key;
NSString *data;

const char *cKey  = [key cStringUsingEncoding:NSASCIIStringEncoding];
const char *cData = [data cStringUsingEncoding:NSASCIIStringEncoding];

unsigned char cHMAC[CC_SHA256_DIGEST_LENGTH];

CCHmac(kCCHmacAlgSHA256, cKey, strlen(cKey), cData, strlen(cData), cHMAC);

NSData *HMAC = [[NSData alloc] initWithBytes:cHMAC
                                  length:sizeof(cHMAC)];

NSString *hash = [HMAC base64Encoding]; //This line doesn´t make sense

[key release];
[data release];
</code></pre>
","<p>Don't do ""[out description]"" to get the hash as a string.</p>

<p>Do [hash base64Encoding] to get the base64 encoding of it. Use <a href=""http://cybersam.com/ios-dev/http-basic-access-authentication-with-objective-c-and-ios/attachment/nsdataadditions"" rel=""nofollow"">http://cybersam.com/ios-dev/http-basic-access-authentication-with-objective-c-and-ios/attachment/nsdataadditions</a> to get the base64Encoding function. The additions class is a category that will add the function base64Encoding to NSData's implementation.</p>

<p>Or you can do [[NSString alloc]initWithData:out encoding:NSUTF8StringEncoding].</p>
","11477864","6376","<iphone><objective-c><encryption><sha256><hmac>","4","1","3","2013-02-08 16:24:50","7724837","0","4","516765","","2011-10-11 09:05:26","2011-10-11 08:49:06","","","2012-07-13 20:24:32"
"9311443","HMACSHA256 output bytes / bits","<p>My Friend told me to use ""HMACSHA256"" algo and i have used the below code :</p>

<pre><code>SecretKey signingKey = new SecretKeySpec(""123"".getBytes(), ""HMACSHA256"");  
    Mac mac = Mac.getInstance(""HMACSHA256"");  
    mac.init(signingKey);  
    byte[] digest = mac.doFinal(""ABCDEF"".getBytes());     
    System.out.println(""HMA : ""+digest.length);
</code></pre>

<p>Just wanted to know that :</p>

<p>1) is the above implementation looks standard ""HMACSHA256"" ? </p>

<p>2) Output (digest) is coming as 256 bits or 16 bytes.Is this correct.</p>

<p>If we are using HMACSHA256 algo, how many bytes we need to expect to come as an output.</p>
","<p>The number of output bits for HMAC digests is equal to the bits generated by the underlying algorithm. </p>

<ul>
<li>For MD5 this number of bits is 128.</li>
<li>For SHA-1 this number of bits is 160.</li>
<li>For SHA-256 this number of bits if 256.</li>
</ul>

<p>Your code looks fine and is generating the correct digest size. You can read more on cryptographic hashes <a href=""http://en.wikipedia.org/wiki/HMAC"" rel=""noreferrer"">here</a>.</p>
","9311719","6320","<java><algorithm><hmac><hmacsha1>","0","9","1","2012-02-16 13:02:07","9311719","0","2","1160197","","2012-02-16 13:02:07","2012-02-16 12:41:47","","","2012-02-16 13:00:52"
"33419006","PHP and C# HMAC SHA256","<p>I need to convert the following php code in C#:</p>

<pre><code>$res = mac256($ent, $key);
$result = encodeBase64($res);
</code></pre>

<p>where</p>

<pre><code>function encodeBase64($data)
{
    $data = base64_encode($data);
    return $data;
}
</code></pre>

<p>and</p>

<pre><code>function mac256($ent,$key)
{
    $res = hash_hmac('sha256', $ent, $key, true);//(PHP 5 &gt;= 5.1.2)
    return $res;
}
</code></pre>

<p>I use the following C# code:</p>

<pre><code>byte[] res = HashHMAC(ent, key);
string result = System.Convert.ToBase64String(res);
</code></pre>

<p>where </p>

<pre><code>public byte[] HashHMAC(string ent, byte[] key)
{
   byte[] toEncryptArray =System.Text.Encoding.GetEncoding(28591).GetBytes(ent);

   HMACSHA256 hash = new HMACSHA256(key);
   return hash.ComputeHash(toEncryptArray);
}
</code></pre>

<p>The complete php source code available at this <a href=""http://www.redsys.es/wps/wcm/connect/redsys/45b1e5d9-689f-4df0-b2e5-7bff1984755c/API_PHP.zip?MOD=AJPERES"" rel=""nofollow noreferrer"">link</a></p>

<p>I also check this post <a href=""https://stackoverflow.com/questions/699041/hmac-sha256-in-php-and-c-sharp-differ"">hmac_sha256 in php and c# differ</a></p>

<p>and this one <a href=""https://stackoverflow.com/questions/12804231/c-sharp-equivalent-to-hash-hmac-in-php"">C# equivalent to hash_hmac in PHP</a></p>

<p>But the results are not the same.</p>
","<p>This code should do the trick:</p>

<pre><code>static byte[] hmacSHA256(String data, String key)
{
    using (HMACSHA256 hmac = new HMACSHA256(Encoding.ASCII.GetBytes(key)))
    {
        return hmac.ComputeHash(Encoding.ASCII.GetBytes(data));
    }
}
</code></pre>

<p>If I call this code:</p>

<pre><code>Console.WriteLine(BitConverter.ToString(hmacSHA256(""1234"", ""1234"")).Replace(""-"", """").ToLower());
</code></pre>

<p>It returns:</p>

<pre><code>4e4feaea959d426155a480dc07ef92f4754ee93edbe56d993d74f131497e66fb
</code></pre>

<p>When I run this in PHP:</p>

<pre><code>echo hash_hmac('sha256', ""1234"", ""1234"", false);
</code></pre>

<p>It returns</p>

<pre><code>4e4feaea959d426155a480dc07ef92f4754ee93edbe56d993d74f131497e66fb
</code></pre>
","33432788","6240","<c#><php><sha256><hmac>","2","7","3","2015-11-12 12:52:50","33432788","3","1","-1","","2017-05-23 12:33:42","2015-10-29 15:55:04","","","2015-10-30 09:37:27"
"33419006","PHP and C# HMAC SHA256","<p>I need to convert the following php code in C#:</p>

<pre><code>$res = mac256($ent, $key);
$result = encodeBase64($res);
</code></pre>

<p>where</p>

<pre><code>function encodeBase64($data)
{
    $data = base64_encode($data);
    return $data;
}
</code></pre>

<p>and</p>

<pre><code>function mac256($ent,$key)
{
    $res = hash_hmac('sha256', $ent, $key, true);//(PHP 5 &gt;= 5.1.2)
    return $res;
}
</code></pre>

<p>I use the following C# code:</p>

<pre><code>byte[] res = HashHMAC(ent, key);
string result = System.Convert.ToBase64String(res);
</code></pre>

<p>where </p>

<pre><code>public byte[] HashHMAC(string ent, byte[] key)
{
   byte[] toEncryptArray =System.Text.Encoding.GetEncoding(28591).GetBytes(ent);

   HMACSHA256 hash = new HMACSHA256(key);
   return hash.ComputeHash(toEncryptArray);
}
</code></pre>

<p>The complete php source code available at this <a href=""http://www.redsys.es/wps/wcm/connect/redsys/45b1e5d9-689f-4df0-b2e5-7bff1984755c/API_PHP.zip?MOD=AJPERES"" rel=""nofollow noreferrer"">link</a></p>

<p>I also check this post <a href=""https://stackoverflow.com/questions/699041/hmac-sha256-in-php-and-c-sharp-differ"">hmac_sha256 in php and c# differ</a></p>

<p>and this one <a href=""https://stackoverflow.com/questions/12804231/c-sharp-equivalent-to-hash-hmac-in-php"">C# equivalent to hash_hmac in PHP</a></p>

<p>But the results are not the same.</p>
","<p>I'm pretty sure that you're dealing with the new RedSys SHA256 signature implementation. Also I saw that you have some issue with the 3DES encryption between PHP and C#.</p>

<p>First at all you must get the base 64 string with all the payment parameters. You can achieve it with this code:</p>

<pre><code>public static string GetParameters(string merchantCode, string terminal, int currency, string transactionType, decimal amount, string merchantOrder, string merchantIdentifier, string merchantPost, string urlOk, string urlKo)
        {
            var jsonValues = new Dictionary&lt;string, string&gt;
            {
                { ""Ds_Merchant_Amount"", amount.ToString().Replace(CultureInfo.CurrentCulture.NumberFormat.NumberDecimalSeparator, """") },
                { ""Ds_Merchant_Order"", merchantOrder},
                { ""Ds_Merchant_MerchantCode"", merchantCode },
                { ""Ds_Merchant_Currency"", currency.ToString() },
                { ""Ds_Merchant_TransactionType"", transactionType },
                { ""Ds_Merchant_Terminal"", terminal },
                { ""Ds_Merchant_Identifier"", merchantIdentifier },
                { ""Ds_Merchant_MerchantURL"", merchantPost },
                { ""Ds_Merchant_UrlOK"", urlOk},
                { ""Ds_Merchant_UrlKO"",  urlKo}
            }.Select(kvp =&gt; ""\""{0}\"":\""{1}\"""".Formato(kvp.Key.ToUpper(), kvp.Value));

            var jsonString = ""{"" + string.Join("","", jsonValues) + ""}"";

            return Convert.ToBase64String(ASCIIEncoding.ASCII.GetBytes(jsonString));
        }
</code></pre>

<p>Once you have the JSON string in base 64, you must apply 3DES to merchant order parameter with the key provided by RedSys:</p>

<pre><code>public static string GetTransactionEncryptionKey(string merchantOrder, string encryptKey)
        {
            using (var tdes = new TripleDESCryptoServiceProvider())
            {
                tdes.IV = new byte[8] { 0, 0, 0, 0, 0, 0, 0, 0 };
                tdes.Key = Convert.FromBase64String(encryptKey);
                tdes.Padding = PaddingMode.Zeros;
                tdes.Mode = CipherMode.CBC;

                var toEncrypt = ASCIIEncoding.ASCII.GetBytes(merchantOrder);
                var result = tdes.CreateEncryptor().TransformFinalBlock(toEncrypt, 0, toEncrypt.Length);

                return Convert.ToBase64String(result);
            }
        }
</code></pre>

<p>As you can see, the encryption key provided by RedSys is base 64 string so you don't need to calculate the MD5 hash for the 3DES algorithm.</p>

<p>Then we go for the SHA256 signature:</p>

<pre><code>public static string GetSignature(string base64Parameters, string base64tranEncryptKey)
        {
            using (var sha = new HMACSHA256(Convert.FromBase64String(base64tranEncryptKey)))
            {
                var hash = sha.ComputeHash(ASCIIEncoding.ASCII.GetBytes(base64Parameters));

                return Convert.ToBase64String(hash);
            }
        }
</code></pre>

<p>Good luck!</p>
","33479952","6240","<c#><php><sha256><hmac>","2","3","3","2015-11-12 12:52:50","33432788","3","1","-1","","2017-05-23 12:33:42","2015-10-29 15:55:04","","","2015-11-02 14:30:17"
"33419006","PHP and C# HMAC SHA256","<p>I need to convert the following php code in C#:</p>

<pre><code>$res = mac256($ent, $key);
$result = encodeBase64($res);
</code></pre>

<p>where</p>

<pre><code>function encodeBase64($data)
{
    $data = base64_encode($data);
    return $data;
}
</code></pre>

<p>and</p>

<pre><code>function mac256($ent,$key)
{
    $res = hash_hmac('sha256', $ent, $key, true);//(PHP 5 &gt;= 5.1.2)
    return $res;
}
</code></pre>

<p>I use the following C# code:</p>

<pre><code>byte[] res = HashHMAC(ent, key);
string result = System.Convert.ToBase64String(res);
</code></pre>

<p>where </p>

<pre><code>public byte[] HashHMAC(string ent, byte[] key)
{
   byte[] toEncryptArray =System.Text.Encoding.GetEncoding(28591).GetBytes(ent);

   HMACSHA256 hash = new HMACSHA256(key);
   return hash.ComputeHash(toEncryptArray);
}
</code></pre>

<p>The complete php source code available at this <a href=""http://www.redsys.es/wps/wcm/connect/redsys/45b1e5d9-689f-4df0-b2e5-7bff1984755c/API_PHP.zip?MOD=AJPERES"" rel=""nofollow noreferrer"">link</a></p>

<p>I also check this post <a href=""https://stackoverflow.com/questions/699041/hmac-sha256-in-php-and-c-sharp-differ"">hmac_sha256 in php and c# differ</a></p>

<p>and this one <a href=""https://stackoverflow.com/questions/12804231/c-sharp-equivalent-to-hash-hmac-in-php"">C# equivalent to hash_hmac in PHP</a></p>

<p>But the results are not the same.</p>
","<p>Redsys provides libraries for php and java.</p>

<p>Starting from the java library, I've translated the ApiMacSha256 class to C#</p>

<pre><code>public class ApiMacSha256 {
    //////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////
    ////////////                    FUNCIONES AUXILIARES:                              ///////////
    //////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////

    /** 3DES Function */
    private byte[] encrypt_3DES(byte[] key, string data) {
        //http://www.mywebexperiences.com/2012/12/11/crypting-data-using-3des-c/
        //http://stackoverflow.com/a/33479952/2938518
        using (var tdes = new TripleDESCryptoServiceProvider()) {
            tdes.IV = new byte[8] { 0, 0, 0, 0, 0, 0, 0, 0 };
            tdes.Key = key;
            tdes.Padding = PaddingMode.Zeros;
            tdes.Mode = CipherMode.CBC;

            var toEncrypt = Encoding.ASCII.GetBytes(data);
            var result = tdes.CreateEncryptor().TransformFinalBlock(toEncrypt, 0, toEncrypt.Length);

            return result;
        }
    }

    /** MAC Function */
    private byte[] mac256(string dsMerchantParameters, byte[] secretKo) {
        //http://stackoverflow.com/a/17315619/2938518
        byte[] hash;
        using (var hmac = new HMACSHA256(secretKo)) {
            hash = hmac.ComputeHash(Encoding.ASCII.GetBytes(dsMerchantParameters));
        }

        return hash;
    }

    /** Base64 Functions */
    private string encodeB64String(byte[] data) {
        return Convert.ToBase64String(data, Base64FormattingOptions.None);
    }

    //////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////
    ////////////        FUNCIONES PARA LA GENERACIÓN DEL FORMULARIO DE PAGO:          ////////////
    //////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////
    public String createMerchantSignature(string merchantParamsB64, string claveComercio, string OrderId) {
        byte[] clave = Convert.FromBase64String(claveComercio);
        byte[] secretKo = encrypt_3DES(clave, OrderId);

        // Se hace el MAC con la clave de la operación ""Ko"" y se codifica en BASE64
        byte[] hash = mac256(merchantParamsB64, secretKo);
        String res = encodeB64String(hash);
        return res;
    }
}
</code></pre>

<p>The main method 'createMerchantSignature', requires a string encoded in base64 of the merchant params embeded in a json structure, the secret key of the merchant and the OrderId.</p>
","33671878","6240","<c#><php><sha256><hmac>","2","0","3","2015-11-12 12:52:50","33432788","3","1","-1","","2017-05-23 12:33:42","2015-10-29 15:55:04","","","2015-11-12 12:52:50"
"7909288","PHP / Javascript / JQuery - base64 sha256 encoding","<p>I'm trying to port a PHP example of an API integration to Javascript / JQuery. In PHP, an encrypted string is created using the following code:</p>

<pre><code>$sig = base64_encode(hash_hmac('sha256', $sign, $this-&gt;secretAccessKey, true)
</code></pre>

<p>whose functions are documented here:</p>

<p><a href=""http://php.net/manual/en/function.hash-hmac.php"" rel=""nofollow"">http://php.net/manual/en/function.hash-hmac.php</a></p>

<p><a href=""http://us.php.net/base64_encode"" rel=""nofollow"">http://us.php.net/base64_encode</a></p>

<p>In Javascript, I'm using JQuery's crypto to do the HMAC piece:</p>

<pre><code>http://code.google.com/p/crypto-js/#HMAC-SHA256
</code></pre>

<p>and I'm trying to figure out if I also need to do a base64 encode, as it seems it is already in base64. This is the code I'm currently running:</p>

<pre><code>var sigHash = Crypto.HMAC(Crypto.SHA256, sign, accessKey);
</code></pre>

<p>Is this correct? How would I create a javascript / jquery equivalent of the above PHP function?</p>
","<p>HMAC is a standard. So is SHA-256. So their outputs, regardless of which implementation, <strong>has to be</strong> the same.</p>

<p>There could only be differences in the Base64 encoding. Normally, the non-alphanumeric characters are <code>+</code> and <code>/</code>, but you cannot count on that. I've checked, and both implementations use the same non-alphanumeric characters.</p>

<p>However, you should still ""manually"" check a few thousand strings. The implementation in PHP is well tested. But I do not know if the same is true for the implementation in jQuery...</p>

<p>The syntax for Base64 encoded output is:</p>

<pre><code>Crypto.util.bytesToBase64(
    Crypto.HMAC(Crypto.SHA256, sign, accessKey, { asBytes: true })
);
</code></pre>
","7909335","6158","<php><javascript><jquery><sha256><hmac>","0","2","2","2012-04-23 16:40:38","7909335","0","1","","","","2011-10-26 21:41:52","","2012-04-23 16:40:38","2011-10-26 21:47:21"
"7909288","PHP / Javascript / JQuery - base64 sha256 encoding","<p>I'm trying to port a PHP example of an API integration to Javascript / JQuery. In PHP, an encrypted string is created using the following code:</p>

<pre><code>$sig = base64_encode(hash_hmac('sha256', $sign, $this-&gt;secretAccessKey, true)
</code></pre>

<p>whose functions are documented here:</p>

<p><a href=""http://php.net/manual/en/function.hash-hmac.php"" rel=""nofollow"">http://php.net/manual/en/function.hash-hmac.php</a></p>

<p><a href=""http://us.php.net/base64_encode"" rel=""nofollow"">http://us.php.net/base64_encode</a></p>

<p>In Javascript, I'm using JQuery's crypto to do the HMAC piece:</p>

<pre><code>http://code.google.com/p/crypto-js/#HMAC-SHA256
</code></pre>

<p>and I'm trying to figure out if I also need to do a base64 encode, as it seems it is already in base64. This is the code I'm currently running:</p>

<pre><code>var sigHash = Crypto.HMAC(Crypto.SHA256, sign, accessKey);
</code></pre>

<p>Is this correct? How would I create a javascript / jquery equivalent of the above PHP function?</p>
","<p>If you ever need inspiration for a JS implementation of a PHP function, have a look at PHPJS.org. The JavaScript equivalent for <code>base64_encode</code> can be found at: <a href=""http://phpjs.org/functions/base64_encode:358"" rel=""nofollow"">base64_encode</a>.</p>
","7909356","6158","<php><javascript><jquery><sha256><hmac>","0","1","2","2012-04-23 16:40:38","7909335","0","1","","","","2011-10-26 21:41:52","","","2011-10-26 21:49:48"
"4252208","Securing a javascript client with hmac","<p>I am researching ways to secure a javascript application I am working on. The application is a chat client which uses APE (Ajax Push Engine) as the backend.</p>

<p>Currently, anyone can access the page and make a GET/POST request to the APE server. I only want to serve the chat client to registered users, and I want to make sure only their requests will be accepted. I can use username/password authentication with PHP to serve a user the page. But once they have the page, what's to stop them from modifying the javascript or letting it fall into the wrong hands?</p>

<p>This method for securing a client/server application looks promising: <a href=""http://abhinavsingh.com/blog/2009/12/how-to-add-content-verification-using-hmac-in-php/"">http://abhinavsingh.com/blog/2009/12/how-to-add-content-verification-using-hmac-in-php/</a></p>

<p>I have another source that says this is ideal for a javascript client since it doesn't depend on sending the private key. But how can this be? According to to the tutorial above, the client needs to provide the private key. This doesn't seem very safe since anyone who has the javascript now has that user's private key. From what I understand it would work something like this:</p>

<ol>
<li>User logs in with a username and password</li>
<li>PHP validates the username and password, looks up the user's private key and inserts it into the javascript</li>
<li>Javascript supplies a signature (using the private key), and the public key with all APE requests</li>
<li>APE compares the computed signature to the received signature and decides whether to handle the requests.</li>
</ol>

<p>How is this secure if the javascript application needs to be aware of the private key?</p>

<p>Thanks for the help!</p>
","<p>HMAC authentication is better served for an API that third parties are going to connect to. It seems like your app would be better served by writing a cookie to the client's browser indicating that they've been authenticated. Then with each ajax request you can check for that cookie. </p>

<p>Edit: I take back a bit of what I said about HMAC being better served for third party APIs. Traditionally with HMAC each user gets their own private key. I don't think this is necessary for your application. You can probably get away with just keeping one master private key and give each user a unique ""public"" key (I call it a public key, but in actuality the user would never know about the key). When a user logs in I would write two cookies. One which is the combination of the user's public key + time stamp encrypted and another key stating what the time stamp is. Then on the server side you can validate the encrypted key and check that the time stamp is within a given threshold (say 10-30 minutes in case they're sitting around idle on your app). If they're validated, update the encrypted key and time stamp, rinse and repeat.</p>
","4252311","6140","<php><javascript><hmac><ajax-push>","9","0","3","2010-11-23 15:14:03","4252311","1","2","","","","2010-11-23 02:29:42","","2010-11-23 15:14:03","2010-11-23 02:47:15"
"4252208","Securing a javascript client with hmac","<p>I am researching ways to secure a javascript application I am working on. The application is a chat client which uses APE (Ajax Push Engine) as the backend.</p>

<p>Currently, anyone can access the page and make a GET/POST request to the APE server. I only want to serve the chat client to registered users, and I want to make sure only their requests will be accepted. I can use username/password authentication with PHP to serve a user the page. But once they have the page, what's to stop them from modifying the javascript or letting it fall into the wrong hands?</p>

<p>This method for securing a client/server application looks promising: <a href=""http://abhinavsingh.com/blog/2009/12/how-to-add-content-verification-using-hmac-in-php/"">http://abhinavsingh.com/blog/2009/12/how-to-add-content-verification-using-hmac-in-php/</a></p>

<p>I have another source that says this is ideal for a javascript client since it doesn't depend on sending the private key. But how can this be? According to to the tutorial above, the client needs to provide the private key. This doesn't seem very safe since anyone who has the javascript now has that user's private key. From what I understand it would work something like this:</p>

<ol>
<li>User logs in with a username and password</li>
<li>PHP validates the username and password, looks up the user's private key and inserts it into the javascript</li>
<li>Javascript supplies a signature (using the private key), and the public key with all APE requests</li>
<li>APE compares the computed signature to the received signature and decides whether to handle the requests.</li>
</ol>

<p>How is this secure if the javascript application needs to be aware of the private key?</p>

<p>Thanks for the help!</p>
","<p>The answer: You technically <a href=""http://en.wikipedia.org/wiki/Trusted_client"" rel=""nofollow""><strong>cannot</strong> prevent the user from modifying the JavaScript</a>. So don't worry about that because you can do nothing about it.</p>

<p>However, the attack you do need to prevent is <a href=""http://www.owasp.org/index.php/Top_10_2010-A5"" rel=""nofollow"">Cross-Site Request Forgery</a> (CSRF). Malicious scripts on different domains are capable of automatically submitting forms to your domain with the cookies stored by the browser. To deal with that, you need to include an authentication token (which should be sufficiently random, not related to the username or password, and sent in the HTML page in which the chat client resides) in the actual data sent by the AJAX request (which is not automatically filled in by the browser).</p>
","4252378","6140","<php><javascript><hmac><ajax-push>","9","2","3","2010-11-23 15:14:03","4252311","1","2","","","","2010-11-23 02:29:42","","","2010-11-23 03:02:29"
"4252208","Securing a javascript client with hmac","<p>I am researching ways to secure a javascript application I am working on. The application is a chat client which uses APE (Ajax Push Engine) as the backend.</p>

<p>Currently, anyone can access the page and make a GET/POST request to the APE server. I only want to serve the chat client to registered users, and I want to make sure only their requests will be accepted. I can use username/password authentication with PHP to serve a user the page. But once they have the page, what's to stop them from modifying the javascript or letting it fall into the wrong hands?</p>

<p>This method for securing a client/server application looks promising: <a href=""http://abhinavsingh.com/blog/2009/12/how-to-add-content-verification-using-hmac-in-php/"">http://abhinavsingh.com/blog/2009/12/how-to-add-content-verification-using-hmac-in-php/</a></p>

<p>I have another source that says this is ideal for a javascript client since it doesn't depend on sending the private key. But how can this be? According to to the tutorial above, the client needs to provide the private key. This doesn't seem very safe since anyone who has the javascript now has that user's private key. From what I understand it would work something like this:</p>

<ol>
<li>User logs in with a username and password</li>
<li>PHP validates the username and password, looks up the user's private key and inserts it into the javascript</li>
<li>Javascript supplies a signature (using the private key), and the public key with all APE requests</li>
<li>APE compares the computed signature to the received signature and decides whether to handle the requests.</li>
</ol>

<p>How is this secure if the javascript application needs to be aware of the private key?</p>

<p>Thanks for the help!</p>
","<blockquote>
  <p>How is this secure if the javascript application needs to be aware of the private key?</p>
</blockquote>

<p>Why not? It's the user's own private key, so if he is willing to give it out to someone else, it's his problem. It's no different from giving out your password and then saying someone else has access to your account.</p>

<p>If you think about this a bit, you'll realize that you don't need to implement public-key encryption, HMAC or anything like that. Your normal session-based authentication will do, provided the communication channel itself is secure (say using HTTPS).</p>
","4252389","6140","<php><javascript><hmac><ajax-push>","9","1","3","2010-11-23 15:14:03","4252311","1","2","","","","2010-11-23 02:29:42","","","2010-11-23 03:05:55"
"11002603","Base64_encode different between Java and PHP","<p>Here is my problem :</p>

<p>I have a JAVA function to generate an encrypted string. I have to do the same thing in PHP.</p>

<p>My Java function :</p>

<pre><code>String generateSignature () {
    byte[] Sequence = (""hello"").getBytes(""UTF-8"");
    Mac HMAC = Mac.getInstance(""HMACSHA256"");
    HMAC.init(""SECRET_KEY"");
    byte[] Hash = HMAC.doFinal(Sequence);
    String Signature = new String(Base64.encodeBase64(Hash));
    return Signature;
}
</code></pre>

<p>My PHP function :</p>

<pre><code>function generateSignature() {
    $sequence = ""hello"";
    $encrypted = hash_hmac('sha256', $sequence, ""SECRET_KEY"");
    return base64_encode($encrypted);
}
</code></pre>

<p>The return value of the two functions are not the same. What I noticed is that before the encoding to base 64, both functions have the same result. So, for me the problem is not on the generation of the key but on the encoding.</p>

<p>Anybody able to help please ?</p>
","<p>The answer is in the <a href=""http://php.net/manual/en/function.hash-hmac.php"" rel=""nofollow"">documentation</a> for the PHP function hash_hmac.</p>

<blockquote>
  <p>When set to TRUE, outputs raw binary data. FALSE outputs lowercase hexits.</p>
</blockquote>

<p>Pass ""true"" as the final argument. Hashes are binary. When turning them into strings, they are often encoded in hexadecimal. But in this case you are going to base-64 encode it, so you want the raw binary form.</p>
","11006755","6057","<java><php><encoding><base64><hmac>","1","1","1","2013-12-28 07:33:22","11006755","2","0","","","","2012-06-12 18:28:36","","","2012-06-13 00:36:32"
"24429307","HMAC signing requests in Python","<p>I'm trying to create an HMAC-SHA512 signed request for an API call in Python 3.4 using the requests library. I'm trying to follow docs, but am hitting this error:</p>

<pre><code>AttributeError: '_hashlib.HASH' object has no attribute 'new'
</code></pre>

<p>Here's some code. It's failing with the error on the hmac constructor. It's fine if I try and pass hashlib.md5() or omit the digest parameter entirely.</p>

<p>I'm not sure if I'm signing the request properly afterwards as I haven't got that far yet. The docs for the service I'm trying to use say to sign the URL with my secret. I need this to be a byte string for this to work.</p>

<pre><code>import hmac
import hashlib
import requests

secret = b'mysecret'
url = b'http://someurl.com/something/'

signing = hmac.new(secret, url, hashlib.sha512())

headers = {'apisign': signing.digest()}
response = requests.get(url, headers=headers)
</code></pre>

<p>Any pointers appreciated. I couldn't find an example. Thanks!</p>
","<p>You must pass in a reference to the <code>hashlib.sha512</code> callable, not the result of calling it:</p>

<pre><code>signing = hmac.new(secret, url, hashlib.sha512)
</code></pre>

<p>Alternatively, you could just use the string <code>'sha512'</code>:</p>

<pre><code>signing = hmac.new(secret, url, 'sha512')
</code></pre>

<p>and <code>hashlib.new()</code> will be used to construct the hash object.</p>

<p>Demo:</p>

<pre><code>&gt;&gt;&gt; import hashlib
&gt;&gt;&gt; import hmac
&gt;&gt;&gt; secret = b'mysecret'
&gt;&gt;&gt; url = b'http://someurl.com/something/'
&gt;&gt;&gt; signing = hmac.new(secret, url, hashlib.sha512)
&gt;&gt;&gt; signing.digest()
b'!~s2\x97\x97\xa9\xcc\xefcb\xa8\xcc\xa7\xbc\xec\xe5\xfc\xc3\xac\xfc\xbc5]\x05\x96\xc7\x83\x8b\x1b\x90\xd3\xa5\xca\x8cLsC\x17\xa0\xea\xa3\xfe\xd8M\xfda\x1epj\x90\xff}\xfa\xc2@\x92\xfb\xee\xa8\xab\x1b\x08\x8e'
</code></pre>
","24429343","6046","<python><python-requests><hmac><hashlib>","7","14","1","2018-07-19 05:03:14","24429343","0","2","","","","2014-06-26 11:27:44","","2014-06-26 11:38:03","2014-06-26 11:29:10"
"30502589","Spring Boot. HMAC authentication. How to add custom AuthenticationProvider and Authentication filter?","<p>To implement HMAC authentication I made my own filter, provider and token.
RestSecurityFilter:</p>

<pre><code>public class RestSecurityFilter extends AbstractAuthenticationProcessingFilter {
private final Logger LOG = LoggerFactory.getLogger(RestSecurityFilter.class);

private AuthenticationManager authenticationManager;

public RestSecurityFilter(String defaultFilterProcessesUrl) {
    super(defaultFilterProcessesUrl);
}

public RestSecurityFilter(RequestMatcher requiresAuthenticationRequestMatcher) {
    super(requiresAuthenticationRequestMatcher);
}

@Override
public Authentication attemptAuthentication(HttpServletRequest req, HttpServletResponse response) throws AuthenticationException, IOException, ServletException {
    AuthenticationRequestWrapper request = new AuthenticationRequestWrapper(req);

    // Get authorization headers
    String signature = request.getHeader(""Signature"");
    String principal = request.getHeader(""API-Key"");
    String timestamp = request.getHeader(""timestamp"");
    if ((signature == null) || (principal == null) || (timestamp == null))
    unsuccessfulAuthentication(request, response, new BadHMACAuthRequestException(""Authentication attempt failed! Request missing mandatory headers.""));


    // a rest credential is composed by request data to sign and the signature
    RestCredentials credentials = new RestCredentials(HMACUtils.calculateContentToSign(request), signature);

    // Create an authentication token
    return new RestToken(principal, credentials, Long.parseLong(timestamp));
}

@Override
public void doFilter(ServletRequest req, ServletResponse res, FilterChain chain) throws IOException, ServletException {
    LOG.debug(""Filter request: "" + req.toString());
    HttpServletRequest request = (HttpServletRequest) req;
    HttpServletResponse response = (HttpServletResponse) res;

    chain.doFilter(request, response);

    Authentication authResult;

    try {
        authResult = attemptAuthentication(request, response);
        if (authResult == null)
            unsuccessfulAuthentication(request, response, new BadHMACAuthRequestException(""Authentication attempt failed !""));

    } catch (InternalAuthenticationServiceException failed) {
        LOG.error(""An internal error occurred while trying to authenticate the user."", failed);
        unsuccessfulAuthentication(request, response, failed);
    } catch (AuthenticationException failed) {
        // Authentication failed
        unsuccessfulAuthentication(request, response, failed);
    }
}
}
</code></pre>

<p>Authentication provider:</p>

<pre><code>@Component
public class RestAuthenticationProvider implements AuthenticationProvider {
private final Logger LOG = LoggerFactory.getLogger(RestAuthenticationProvider.class);

private ApiKeysService apiKeysService;

@Autowired
public void setApiKeysService(ApiKeysService apiKeysService) {
    this.apiKeysService = apiKeysService;
}

@Override
public Authentication authenticate(Authentication authentication) throws AuthenticationException {
    RestToken restToken = (RestToken) authentication;

    // api key (aka username)
    String principal = restToken.getPrincipal();

    LOG.info(""Authenticating api key: '"" + principal + ""'"");

    // check request time, 60000 is one minute
    long interval = Clock.systemUTC().millis() - restToken.getTimestamp();
    if ((interval &lt; 0) &amp;&amp; (interval &gt; 60000))
        throw new BadHMACAuthRequestException(""Auth Failed: old request."");

    // hashed blob
    RestCredentials credentials = restToken.getCredentials();

    // get secret access key from api key
    ApiKey apiKey = apiKeysService.getKeyByName(principal).orElseThrow(() -&gt; new NotFoundException(""Key not found for: '"" + principal + ""'""));
    String secret = apiKey.getApiKey();

    // calculate the hmac of content with secret key
    String hmac = HMACUtils.calculateHMAC(secret, credentials.getRequestData());
    LOG.debug(""Api Key '{}', calculated hmac '{}'"");

    // check if signatures match
    if (!credentials.getSignature().equals(hmac)) {
        throw new BadHMACAuthRequestException(""Auth Failed: invalid HMAC signature."");
    }

    return new RestToken(principal, credentials, restToken.getTimestamp(), apiKeysService.getPermissions(apiKey));
}

@Override
public boolean supports(Class&lt;?&gt; authentication) {
    return RestToken.class.equals(authentication);

}
}
</code></pre>

<p>I don't know how to configure WebSecurityConfig to authenticate every request with my filter and Authentication Provider. I assume I need to create @Bean to initialize <code>RestSecurityFilter</code>. Also JavaDoc for <code>AbstractAuthenticationProcessingFilter</code> says I need to the <code>authenticationManager</code> property. I would appreciate working solution with custom filter, provider and token. </p>
","<p>I'm not familiar with Spring Boot, but I saw your comment on my question <a href=""https://stackoverflow.com/questions/21633555/how-to-inject-authenticationmanager-using-java-configuration-in-a-custom-filter?noredirect=1#comment49096937_21633555"">How To Inject AuthenticationManager using Java Configuration in a Custom Filter</a></p>

<p>In a traditional Spring Security XML configuration, you would specify your custom RestSecurityFilter like so</p>

<pre><code>&lt;http use-expressions=""true"" create-session=""stateless"" authentication-manager-ref=""authenticationManager"" entry-point-ref=""restAuthenticationEntryPoint""&gt;
       &lt;custom-filter ref=""restSecurityFilter"" position=""FORM_LOGIN_FILTER"" /&gt;
&lt;/http&gt;
</code></pre>

<p>More information <a href=""http://docs.spring.io/spring-security/site/docs/4.0.1.RELEASE/reference/htmlsingle/#ns-custom-filters"" rel=""nofollow noreferrer"">http://docs.spring.io/spring-security/site/docs/4.0.1.RELEASE/reference/htmlsingle/#ns-custom-filters</a></p>
","30533000","6019","<java><authentication><spring-security><spring-boot><hmac>","5","3","1","2015-05-29 15:06:34","","0","3","","","","2015-05-28 09:31:39","","2017-05-23 12:01:02","2015-05-29 15:06:34"
"36876641","Generate HMAC-SHA256 hash with BouncyCastle","<p>I need to generate a HMAC-SHA256 hash in a PCL (developing for Xamarin Forms) which doesn't support the .NET built-in HMAC/cryptography classes, so I'm working with BouncyCastle to implement my cryptography classes.</p>

<p>I need to generate a HMAC-SHA256 hash, but I haven't been able to find any example on Google, nor does BouncyCastle seem to have any documentation for this. Can anyone help me out?</p>
","<p>Thanks to the solution <a href=""https://stackoverflow.com/questions/30974846/c-sharp-pcl-hmacshax-with-bouncycastle-pcl"">here</a> I came up with this code:</p>

<pre><code>public class HmacSha256
{
    public byte[] Hash(string text, string key)
    {
        var hmac = new HMac(new Sha256Digest());
        hmac.Init(new KeyParameter(Encoding.UTF8.GetBytes(key)));
        byte[] result = new byte[hmac.GetMacSize()];
        byte[] bytes = Encoding.UTF8.GetBytes(text);

        hmac.BlockUpdate(bytes, 0, bytes.Length);
        hmac.DoFinal(result, 0);

        return result;
    }
}
</code></pre>

<p>Corresponding unit test (uses FluentAssertions):</p>

<pre><code>[TestClass]
public class HmacSha256Tests
{
    private readonly HmacSha256 _hmac = new HmacSha256();

    [TestMethod]
    public void Hash_GeneratesValidHash_ForInput()
    {
        // Arrange
        string input = ""hello"";
        string key = ""test"";
        string expected = ""F151EA24BDA91A18E89B8BB5793EF324B2A02133CCE15A28A719ACBD2E58A986"";

        // Act
        byte[] output = _hmac.Hash(input, key);

        string outputHex = BitConverter.ToString(output).Replace(""-"", """").ToUpper();

        // Assert
        expected.Should().Be(outputHex);
    }
}
</code></pre>
","36879373","5947","<c#><.net><bouncycastle><sha256><hmac>","6","6","3","2017-11-09 14:54:20","36879373","1","1","","","","2016-04-26 22:06:08","","2017-05-23 12:02:48","2016-04-27 02:47:20"
"36876641","Generate HMAC-SHA256 hash with BouncyCastle","<p>I need to generate a HMAC-SHA256 hash in a PCL (developing for Xamarin Forms) which doesn't support the .NET built-in HMAC/cryptography classes, so I'm working with BouncyCastle to implement my cryptography classes.</p>

<p>I need to generate a HMAC-SHA256 hash, but I haven't been able to find any example on Google, nor does BouncyCastle seem to have any documentation for this. Can anyone help me out?</p>
","<pre><code>private static void CreateToken(string message, string key)
    {
        System.Text.ASCIIEncoding encoding = new System.Text.ASCIIEncoding();
        byte[]keyByte = encoding.GetBytes(key);


        HMACSHA256 hmacsha = new HMACSHA256(keyByte);
        byte[]messageBytes = encoding.GetBytes(message);

        byte[]hashmessage = hmacsha.ComputeHash(messageBytes);
        Console.WriteLine(ByteToString(hashmessage));
    }
    public static string ByteToString(byte[]buff) {
        string sbinary = """";

        for (int i = 0; i &lt; buff.Length; i++) {
            sbinary += buff[i].ToString(""X2""); // hex format
        }
        return (sbinary);
    }
</code></pre>

<p>Above code saved my time while working for HMAC-SHA256, I hope this may help someone and here is the reference in detail <a href=""http://billatnapier.com/security01.aspx"" rel=""nofollow noreferrer"">http://billatnapier.com/security01.aspx</a></p>
","44419513","5947","<c#><.net><bouncycastle><sha256><hmac>","6","0","3","2017-11-09 14:54:20","36879373","1","1","","","","2016-04-26 22:06:08","","","2017-06-07 17:47:03"
"36876641","Generate HMAC-SHA256 hash with BouncyCastle","<p>I need to generate a HMAC-SHA256 hash in a PCL (developing for Xamarin Forms) which doesn't support the .NET built-in HMAC/cryptography classes, so I'm working with BouncyCastle to implement my cryptography classes.</p>

<p>I need to generate a HMAC-SHA256 hash, but I haven't been able to find any example on Google, nor does BouncyCastle seem to have any documentation for this. Can anyone help me out?</p>
","<p>Using this PCL offshoot of BouncyCastle <a href=""https://www.nuget.org/packages/BouncyCastle-PCL/1.0.0.6"" rel=""nofollow noreferrer"">https://www.nuget.org/packages/BouncyCastle-PCL/1.0.0.6</a> it's really easy, in fact identical to the windows api.</p>

<pre><code> public string ComputeHMAC(string message)
    {
        var keyBytes = Encoding.UTF8.GetBytes(Constants.API_KEY);
        var messageBytes = Encoding.UTF8.GetBytes(message);

        var hmac = new HMACSHA256(keyBytes);
        byte[] result = hmac.ComputeHash(messageBytes);

        return Convert.ToBase64String(result);
    }
</code></pre>

<p>And a unit test using the actual .Net version:</p>

<pre><code>[Test, AutoMoqData]
    public void Hash_Algorithm_Correct (
        [NoAutoProperties] HashMacService sut,
        string message)
    {
        string expected;

        var key = Encoding.UTF8.GetBytes(Constants.API_KEY);

        using (var hmac = new HMACSHA256(key))
        {
            var hash = hmac.ComputeHash(Encoding.UTF8.GetBytes(message));
            expected = Convert.ToBase64String(hash);
        }

        var result = sut.ComputeHMAC(message);

        Assert.That(result, Is.EqualTo(expected));
    }
</code></pre>

<p>I was using PCLCrypto but it kept crashing on Xamarin iOS, this was much cleaner and could be unit tested, wheras PCLCrypto required the platform apis so had to be deployed to a device.</p>
","47204931","5947","<c#><.net><bouncycastle><sha256><hmac>","6","2","3","2017-11-09 14:54:20","36879373","1","1","","","","2016-04-26 22:06:08","","","2017-11-09 14:54:20"
"25392257","HMAC SHA256 in C++ (DynamoDB)","<p>I'm trying to connect to DynamoDB through the REST Web API and it requires me to generate a signature using HMAC-SHA256. I've got SHA-256 working, but I cant seem to get HMAC working, here is the C++ code (using OpenSSL)</p>

<pre><code>string hmac(string key, string msg)
{
    unsigned char hash[32];

    HMAC_CTX hmac;
    HMAC_CTX_init(&amp;hmac);
    HMAC_Init_ex(&amp;hmac, &amp;key[0], key.length(), EVP_sha256(), NULL);
    HMAC_Update(&amp;hmac, (unsigned char*) &amp;msg[0], msg.length());
    unsigned int len = 32;
    HMAC_Final(&amp;hmac, hash, &amp;len);
    HMAC_CTX_cleanup(&amp;hmac);

    stringstream ss;
    for (int i = 0; i &lt; len; i++)
    {   
        ss &lt;&lt; hex  &lt;&lt;  ( unsigned int )hash[i];
    }

    return ss.str();
}
</code></pre>

<p>Here is the call to hmac</p>

<pre><code>    /*********************************************CALCULATE SIGNATURE****************************************************************/

string AWS4 = ""AWS4"" + secretKey;

string Kdate = hmac(AWS4.data(), dateStamp);
string Kregion = hmac(Kdate.data(), region);
string Kservice = hmac(Kregion.data(), service);
string signingkey = hmac(Kservice.data(), ""aws4_request"");

string signature = hmac(signingkey.data(), stringToSign);

string authoritzationHeader = algorithm + "" Credential="" + accessKey + ""/"" + credential_scope + "", SignedHeaders="" + signedHeaders + "", Signature="" + signature;
</code></pre>

<p>This is the Python code I'm basing it off:</p>

<pre><code>def sign(key, msg):
    return hmac.new(key, msg.encode(""utf-8""), hashlib.sha256).digest()

def getSignatureKey(key, date_stamp, regionName, serviceName):
    kDate    = sign(('AWS4' + key).encode('utf-8'), date_stamp)
    kRegion  = sign(kDate, regionName)
    kService = sign(kRegion, serviceName)
    kSigning = sign(kService, 'aws4_request')

    print 'Kdate: ' + kDate
    print 'Kregion: ' + kRegion 
    print 'Kservice: ' + kService

    return kSigning
</code></pre>

<p>Given the same values they produce a different result. Can anyone help me as to why this is? Thanks.</p>
","<p>The issue is that DynamoDB calculates hmac in two different ways. The first returns a string representation and the second returns a hex representation</p>

<p>The hex implementation</p>

<pre><code>string hmacHex(string key, string msg)
{
    unsigned char hash[32];

    HMAC_CTX hmac;
    HMAC_CTX_init(&amp;hmac);
    HMAC_Init_ex(&amp;hmac, &amp;key[0], key.length(), EVP_sha256(), NULL);
    HMAC_Update(&amp;hmac, (unsigned char*)&amp;msg[0], msg.length());
    unsigned int len = 32;
    HMAC_Final(&amp;hmac, hash, &amp;len);
    HMAC_CTX_cleanup(&amp;hmac);

    std::stringstream ss;
    ss &lt;&lt; std::hex &lt;&lt; std::setfill('0');
    for (int i = 0; i &lt; len; i++)
    {   
        ss &lt;&lt; std::hex &lt;&lt; std::setw(2)  &lt;&lt; (unsigned int)hash[i];
    }

    return (ss.str());
}
</code></pre>

<p>the string implementation</p>

<pre><code>string hmac(string key, string msg)
{
    unsigned char hash[32];

    HMAC_CTX hmac;
    HMAC_CTX_init(&amp;hmac);
    HMAC_Init_ex(&amp;hmac, &amp;key[0], key.length(), EVP_sha256(), NULL);
    HMAC_Update(&amp;hmac, ( unsigned char* )&amp;msg[0], msg.length());
    unsigned int len = 32;
    HMAC_Final(&amp;hmac, hash, &amp;len);
    HMAC_CTX_cleanup(&amp;hmac);

    std::stringstream ss;
    ss &lt;&lt; std::setfill('0');
    for (int i = 0; i &lt; len; i++)
    {
        ss  &lt;&lt; hash[i];
    }

    return (ss.str());
}
</code></pre>

<p>Amazon uses the hex implementation for all date, region, service and signing key. The string implementation is only used for the signature</p>
","26169417","5947","<c++><amazon-web-services><openssl><amazon-dynamodb><hmac>","3","11","3","2019-12-13 12:34:21","26169417","4","3","3957568","","2014-08-19 21:06:22","2014-08-19 20:17:18","","","2014-10-02 20:48:45"
"25392257","HMAC SHA256 in C++ (DynamoDB)","<p>I'm trying to connect to DynamoDB through the REST Web API and it requires me to generate a signature using HMAC-SHA256. I've got SHA-256 working, but I cant seem to get HMAC working, here is the C++ code (using OpenSSL)</p>

<pre><code>string hmac(string key, string msg)
{
    unsigned char hash[32];

    HMAC_CTX hmac;
    HMAC_CTX_init(&amp;hmac);
    HMAC_Init_ex(&amp;hmac, &amp;key[0], key.length(), EVP_sha256(), NULL);
    HMAC_Update(&amp;hmac, (unsigned char*) &amp;msg[0], msg.length());
    unsigned int len = 32;
    HMAC_Final(&amp;hmac, hash, &amp;len);
    HMAC_CTX_cleanup(&amp;hmac);

    stringstream ss;
    for (int i = 0; i &lt; len; i++)
    {   
        ss &lt;&lt; hex  &lt;&lt;  ( unsigned int )hash[i];
    }

    return ss.str();
}
</code></pre>

<p>Here is the call to hmac</p>

<pre><code>    /*********************************************CALCULATE SIGNATURE****************************************************************/

string AWS4 = ""AWS4"" + secretKey;

string Kdate = hmac(AWS4.data(), dateStamp);
string Kregion = hmac(Kdate.data(), region);
string Kservice = hmac(Kregion.data(), service);
string signingkey = hmac(Kservice.data(), ""aws4_request"");

string signature = hmac(signingkey.data(), stringToSign);

string authoritzationHeader = algorithm + "" Credential="" + accessKey + ""/"" + credential_scope + "", SignedHeaders="" + signedHeaders + "", Signature="" + signature;
</code></pre>

<p>This is the Python code I'm basing it off:</p>

<pre><code>def sign(key, msg):
    return hmac.new(key, msg.encode(""utf-8""), hashlib.sha256).digest()

def getSignatureKey(key, date_stamp, regionName, serviceName):
    kDate    = sign(('AWS4' + key).encode('utf-8'), date_stamp)
    kRegion  = sign(kDate, regionName)
    kService = sign(kRegion, serviceName)
    kSigning = sign(kService, 'aws4_request')

    print 'Kdate: ' + kDate
    print 'Kregion: ' + kRegion 
    print 'Kservice: ' + kService

    return kSigning
</code></pre>

<p>Given the same values they produce a different result. Can anyone help me as to why this is? Thanks.</p>
","<p>Mike's answer has a bug.
Don't use std::strings <code>.length()</code> to find the length of the key when dealing with binary data. As binary data can have null character before the true end of the data. Either take in a <code>char</code> array and length as parameters for both key and msg. OR if you are using C++11, you can use <code>vector</code> to store the binary data. </p>

<p>Following is a partial implementation of Mike's answer with vectors as parameters-</p>

<pre><code>std::vector&lt;uint8_t&gt; 
HMAC_SHA256(const std::vector&lt;uint8_t&gt;&amp; key
           ,const std::vector&lt;uint8_t&gt;&amp; value)
{
    unsigned int len = SHA256_DIGEST_LENGTH;
    unsigned char hash[SHA256_DIGEST_LENGTH];
    size_t keyLen = key.size();
    size_t valueLen = value.size();

    HMAC_CTX hmac;
    HMAC_CTX_init(&amp;hmac);
    HMAC_Init_ex(&amp;hmac, (unsigned char*)key.data(), keyLen, EVP_sha256(), NULL);
    HMAC_Update(&amp;hmac, (unsigned char*)value.data(), valueLen);
    HMAC_Final(&amp;hmac, hash, &amp;len);
    HMAC_CTX_cleanup(&amp;hmac);

    return std::vector&lt;uint8_t&gt;((uint8_t*)hash,(uint8_t*)hash+SHA256_DIGEST_LENGTH);
}
</code></pre>
","41601493","5947","<c++><amazon-web-services><openssl><amazon-dynamodb><hmac>","3","3","3","2019-12-13 12:34:21","26169417","4","3","3957568","","2014-08-19 21:06:22","2014-08-19 20:17:18","","","2017-01-11 22:01:46"
"25392257","HMAC SHA256 in C++ (DynamoDB)","<p>I'm trying to connect to DynamoDB through the REST Web API and it requires me to generate a signature using HMAC-SHA256. I've got SHA-256 working, but I cant seem to get HMAC working, here is the C++ code (using OpenSSL)</p>

<pre><code>string hmac(string key, string msg)
{
    unsigned char hash[32];

    HMAC_CTX hmac;
    HMAC_CTX_init(&amp;hmac);
    HMAC_Init_ex(&amp;hmac, &amp;key[0], key.length(), EVP_sha256(), NULL);
    HMAC_Update(&amp;hmac, (unsigned char*) &amp;msg[0], msg.length());
    unsigned int len = 32;
    HMAC_Final(&amp;hmac, hash, &amp;len);
    HMAC_CTX_cleanup(&amp;hmac);

    stringstream ss;
    for (int i = 0; i &lt; len; i++)
    {   
        ss &lt;&lt; hex  &lt;&lt;  ( unsigned int )hash[i];
    }

    return ss.str();
}
</code></pre>

<p>Here is the call to hmac</p>

<pre><code>    /*********************************************CALCULATE SIGNATURE****************************************************************/

string AWS4 = ""AWS4"" + secretKey;

string Kdate = hmac(AWS4.data(), dateStamp);
string Kregion = hmac(Kdate.data(), region);
string Kservice = hmac(Kregion.data(), service);
string signingkey = hmac(Kservice.data(), ""aws4_request"");

string signature = hmac(signingkey.data(), stringToSign);

string authoritzationHeader = algorithm + "" Credential="" + accessKey + ""/"" + credential_scope + "", SignedHeaders="" + signedHeaders + "", Signature="" + signature;
</code></pre>

<p>This is the Python code I'm basing it off:</p>

<pre><code>def sign(key, msg):
    return hmac.new(key, msg.encode(""utf-8""), hashlib.sha256).digest()

def getSignatureKey(key, date_stamp, regionName, serviceName):
    kDate    = sign(('AWS4' + key).encode('utf-8'), date_stamp)
    kRegion  = sign(kDate, regionName)
    kService = sign(kRegion, serviceName)
    kSigning = sign(kService, 'aws4_request')

    print 'Kdate: ' + kDate
    print 'Kregion: ' + kRegion 
    print 'Kservice: ' + kService

    return kSigning
</code></pre>

<p>Given the same values they produce a different result. Can anyone help me as to why this is? Thanks.</p>
","<pre><code>static int C_hmac(){
    /**
    *   man 3 HMAC
    * */
    std::string data =""your's data"" ;
    std::string key = ""your's key"";
    unsigned int hash_sz = EVP_MAX_MD_SIZE;
    HMAC_CTX ctx;
    HMAC_CTX_init(&amp;ctx);
    unsigned char* digest = HMAC(EVP_sha256(), key.c_str(), key.size(), (unsigned char*)data.c_str(), data.size(), NULL, &amp;hash_sz);

    std::stringstream ss;
    ss&lt;&lt; std::setfill('0');
    for(int i=0;i&lt; hash_sz ;++i){
       ss &lt;&lt; std::hex &lt;&lt; std::setw(2) &lt;&lt; (unsigned int) digest[i];
    }
    std::string final_hash = ss.str();
    return 1;
}
</code></pre>
","59322626","5947","<c++><amazon-web-services><openssl><amazon-dynamodb><hmac>","3","0","3","2019-12-13 12:34:21","26169417","4","3","3957568","","2014-08-19 21:06:22","2014-08-19 20:17:18","","2019-12-13 12:34:21","2019-12-13 12:28:37"
"1959486","digest/hmac is part of ruby standard lib","<p>i'm working with some codes that has a:<br></p>

<pre><code>begin
require 'digest/hmac'
USE_EMBEDDED_HMAC = false
rescue
puts ""HMAC, not found in standard lib."" + $!.message
require 'hmac-sha1'
USE_EMBEDDED_HMAC = true
end
</code></pre>

<p><br>
As i could see, at least in rails 1.8.6 its not part of the standard lib. Is it part from the ruby 1.9 lib? If not, should i install any gem?</p>

<p>Note that solutions using OpenSSL won't be accepted because it will fail anyway in ""require 'digest/hmac'""</p>

<p>The code in question is here <a href=""http://github.com/quetzall/cloud_cache/blob/master/lib/cloud_cache.rb"" rel=""noreferrer"">http://github.com/quetzall/cloud_cache/blob/master/lib/cloud_cache.rb</a></p>
","<p>It's available in 1.8.7. Try this:</p>

<pre><code>ruby -v
ruby 1.8.7 (2008-08-11 patchlevel 72) [i686-darwin9]

require 'openssl'
digest  = OpenSSL::Digest::Digest.new('sha1')
OpenSSL::HMAC.digest(digest, ""superscret"", ""Lorem ipsum dolor sit amet"")
OpenSSL::HMAC.hexdigest(digest, ""superscret"", ""Lorem ipsum dolor sit amet"")
</code></pre>
","1959521","5843","<ruby><gem><hmac>","7","18","2","2012-06-01 12:36:31","1959521","0","2","18642","","2009-12-24 20:57:34","2009-12-24 19:32:21","","","2009-12-24 19:44:08"
"1959486","digest/hmac is part of ruby standard lib","<p>i'm working with some codes that has a:<br></p>

<pre><code>begin
require 'digest/hmac'
USE_EMBEDDED_HMAC = false
rescue
puts ""HMAC, not found in standard lib."" + $!.message
require 'hmac-sha1'
USE_EMBEDDED_HMAC = true
end
</code></pre>

<p><br>
As i could see, at least in rails 1.8.6 its not part of the standard lib. Is it part from the ruby 1.9 lib? If not, should i install any gem?</p>

<p>Note that solutions using OpenSSL won't be accepted because it will fail anyway in ""require 'digest/hmac'""</p>

<p>The code in question is here <a href=""http://github.com/quetzall/cloud_cache/blob/master/lib/cloud_cache.rb"" rel=""noreferrer"">http://github.com/quetzall/cloud_cache/blob/master/lib/cloud_cache.rb</a></p>
","<p>From the <a href=""http://www.ruby-doc.org/stdlib-1.9.3/libdoc/digest/rdoc/Digest/HMAC.html"" rel=""noreferrer"">1.9.3 docs</a>:</p>

<blockquote>
  <p>CAUTION: Use of this library is discouraged, because this implementation was meant to be experimental but somehow got into the 1.9 series without being noticed. Please use OpenSSL::HMAC in the “openssl” library instead.</p>
</blockquote>
","10850402","5843","<ruby><gem><hmac>","7","7","2","2012-06-01 12:36:31","1959521","0","2","18642","","2009-12-24 20:57:34","2009-12-24 19:32:21","","","2012-06-01 12:36:31"
"12195480","Node JS crypto, cannot create hmac on chars with accents","<p>I am having an issue generating the correct signature in NodeJS (using crypto.js) when the text I am trying to encrypt has accented characters (such as ä,ï,ë)</p>

<pre><code>generateSignature = function (str, secKey) { 
 var hmac = crypto.createHmac('sha1', secKey);
 var sig = hmac.update(str).digest('hex');
 return sig;
};
</code></pre>

<p>This function will return the correct HMAC signature if 'str' contains no accented characters  (chars such as ä,ï,ë). If there are accented chars present in the text, it will not return the correct HMAC. The accented characters are valid in UTF8 encoding so I dont know why crypto has a problem with them. It may be the case that I need to somehow tell crypto that I am signing utf8 encoded text, but I don't know how to do this.</p>

<p>The exact same problem is described in this post: <a href=""https://stackoverflow.com/questions/9463157/nodejs-hmac-digest-issue-with-accents"">NodeJS hmac digest issue with accents</a>
However, the post itself, as well as the answer, do not make sense to me (as they are passing the data they want to encrypt where the secret key should go). </p>

<p>Here is a version of the code with hard coded values for str and secKey:</p>

<pre><code>  var crypto = require('crypto');

  str=""äïë"";  
  secKey=""secret""; 
  var hmac = crypto.createHmac('sha1', secKey);
  var sig = hmac.update(new Buffer(str, 'utf8')).digest('hex');
  console.log(""Sig:      "" + sig);
  console.log(""Expected: 094b2ba039775bbf970a58e4a0a61b248953d30b""); 
  // ""Expected"" was generated using http://hash.online-convert.com/sha1-generator
</code></pre>

<p>Output::</p>

<p>Sig:      39c9f1a6094c76534157739681456e7878557f58</p>

<p>Expected: 094b2ba039775bbf970a58e4a0a61b248953d30b</p>

<p>Thanks </p>
","<p>The default encoding used by the <code>crypto</code> module is usually <a href=""http://nodejs.org/api/crypto.html#crypto_hash_update_data_input_encoding"" rel=""nofollow noreferrer""><code>'binary'</code></a>. So, you'll have to specify <code>'utf-8'</code> via a <code>Buffer</code> to use it as the encoding:</p>

<pre><code>var sig = hmac.update(new Buffer(str, 'utf-8')).digest('hex');
</code></pre>

<p>That's what <a href=""https://stackoverflow.com/a/9591184/15031"">the answer for the other question</a> was demonstrating, just for the key:</p>

<pre><code>var hmac = crypto.createHmac('sha1', new Buffer(secKey, 'utf-8'));
</code></pre>

<hr>

<p>You can also use <a href=""http://nodejs.org/api/buffer.html#buffer_buffer"" rel=""nofollow noreferrer""><code>Buffer</code></a> to view the differences:</p>

<pre><code>new Buffer('äïë', 'binary')
// &lt;Buffer e4 ef eb&gt;

new Buffer('äïë', 'utf-8')
// &lt;Buffer c3 a4 c3 af c3 ab&gt;
</code></pre>

<hr>

<p>[<strong>Edit</strong>]</p>

<p>Running the example code you provided, I get:</p>

<pre><code>Sig:      094b2ba039775bbf970a58e4a0a61b248953d30b
Expected: 094b2ba039775bbf970a58e4a0a61b248953d30b
</code></pre>

<p>And, modifying it slightly, I get <code>true</code>:</p>

<pre><code>var crypto = require('crypto');

function sig(str, key) {
  return crypto.createHmac('sha1', key)
    .update(new Buffer(str, 'utf-8'))
    .digest('hex');
}

console.log(sig('äïë', 'secret') === '094b2ba039775bbf970a58e4a0a61b248953d30b');
</code></pre>
","12196252","5762","<node.js><utf-8><hmac><non-ascii-characters><node-crypto>","12","19","1","2016-06-27 09:45:56","","1","2","-1","","2017-05-23 12:01:49","2012-08-30 11:06:18","","2017-05-23 11:46:05","2012-08-30 11:51:08"
"1359624","How to create MD5 hash with HMAC module in Ruby?","<p>Using Google + Bing didn't yield an answer to what should be a simple question:</p>

<p>How are you supposed to use the HMAC module in Ruby to create a HMAC with MD5 (that uses a secret)?</p>

<p>The HMAC docs seem awfully thin.</p>

<p>Thanks!</p>
","<p><a href=""http://betterlogic.com/roger/?p=152"" rel=""nofollow noreferrer"">http://betterlogic.com/roger/?p=152</a></p>

<p>no?</p>

<p>Or I remember toying with it inside one of our Gems so maybe you can reverse engineer from it?</p>

<p><a href=""http://github.com/appoxy/aws/tree/master"" rel=""nofollow noreferrer"">http://github.com/appoxy/aws/tree/master</a></p>

<p>Hope this helps.</p>

<p>Chad</p>
","1359668","5715","<ruby-on-rails><ruby><md5><hmac>","7","-1","5","2013-11-01 15:48:08","1359686","0","6","144088","","2009-08-31 22:57:06","2009-08-31 22:09:55","","","2009-08-31 22:21:17"
"1359624","How to create MD5 hash with HMAC module in Ruby?","<p>Using Google + Bing didn't yield an answer to what should be a simple question:</p>

<p>How are you supposed to use the HMAC module in Ruby to create a HMAC with MD5 (that uses a secret)?</p>

<p>The HMAC docs seem awfully thin.</p>

<p>Thanks!</p>
","<p>The following gem should be installed: 'ruby-hmac'</p>

<pre><code>$ irb
&gt;&gt; require 'hmac-md5'
=&gt; true
&gt;&gt; HMAC::MD5.new(""abc"").digest
=&gt; ""\324\035\214\331\217\000\262\004\351\200\t\230\354\370B~""
&gt;&gt; HMAC::MD5.new(""abc"").hexdigest
=&gt; ""d41d8cd98f00b204e9800998ecf8427e""
&gt;&gt; 
</code></pre>
","1359686","5715","<ruby-on-rails><ruby><md5><hmac>","7","7","5","2013-11-01 15:48:08","1359686","0","6","144088","","2009-08-31 22:57:06","2009-08-31 22:09:55","","2013-11-01 15:48:08","2009-08-31 22:29:50"
"1359624","How to create MD5 hash with HMAC module in Ruby?","<p>Using Google + Bing didn't yield an answer to what should be a simple question:</p>

<p>How are you supposed to use the HMAC module in Ruby to create a HMAC with MD5 (that uses a secret)?</p>

<p>The HMAC docs seem awfully thin.</p>

<p>Thanks!</p>
","<blockquote>
  <p>Probably you just want HMAC::MD5.new(SECRET).digest</p>
</blockquote>

<p>Lookup ""salting"" a hash first. It depends on your usage, but adding a fixed string does help by making your hashes different than the hashes from other apps. Thus, a dictionary attack is harder. But that's just generally speaking.</p>
","4442277","5715","<ruby-on-rails><ruby><md5><hmac>","7","1","5","2013-11-01 15:48:08","1359686","0","6","144088","","2009-08-31 22:57:06","2009-08-31 22:09:55","","2012-12-04 20:35:21","2010-12-14 17:40:48"
"1359624","How to create MD5 hash with HMAC module in Ruby?","<p>Using Google + Bing didn't yield an answer to what should be a simple question:</p>

<p>How are you supposed to use the HMAC module in Ruby to create a HMAC with MD5 (that uses a secret)?</p>

<p>The HMAC docs seem awfully thin.</p>

<p>Thanks!</p>
","<p>This should be the easiest way:</p>

<pre><code>OpenSSL::HMAC.digest(OpenSSL::Digest::Digest.new('md5'), secret_key, your_data)
</code></pre>
","4849892","5715","<ruby-on-rails><ruby><md5><hmac>","7","14","5","2013-11-01 15:48:08","1359686","0","6","144088","","2009-08-31 22:57:06","2009-08-31 22:09:55","","2011-03-02 11:49:12","2011-01-31 10:37:07"
"1359624","How to create MD5 hash with HMAC module in Ruby?","<p>Using Google + Bing didn't yield an answer to what should be a simple question:</p>

<p>How are you supposed to use the HMAC module in Ruby to create a HMAC with MD5 (that uses a secret)?</p>

<p>The HMAC docs seem awfully thin.</p>

<p>Thanks!</p>
","<p>This is what I did:</p>

<pre><code>HMAC::MD5.new(shared_key).update(data).hexdigest
</code></pre>
","9496428","5715","<ruby-on-rails><ruby><md5><hmac>","7","4","5","2013-11-01 15:48:08","1359686","0","6","144088","","2009-08-31 22:57:06","2009-08-31 22:09:55","","","2012-02-29 09:21:38"
"42435095","PHP RESTful API Security","<p>I am currently building a RESTful API in PHP which will be used to power both a web and mobile application. As such, the API should be considered public. However, I want to authenticate users when they make requests to the API from either mobile or web.</p>

<p>When a user registers for the service, I generate a unique API key and secret which is stored against the user's record in the database. Ideally, I want requests to be made <strong>only using the API key</strong> using JavaScript or PHP. </p>

<p>I thought about establishing a hand-shake system for authentication, with the process as follows:</p>

<ul>
<li>User makes request to the API using their known key.</li>
<li>The API responds with a token which is stored in a table along with a timestamp (to prevent replay attacks)</li>
<li>The token is then used to make the actual request by the client, and the API will check the validity of the token. If the hash matches, and the timestamp is valid, the API provides a valid response, otherwise provides information that the token is expired.</li>
</ul>

<p>I was thinking to use HMAC to generate the token, something like this:</p>

<pre><code>$token = hash_hmac('sha256', $user-&gt;apiKey.microtime(), $user-&gt;apiSecret);
</code></pre>

<p>The <code>$token</code> will then be stored in the DB, and should be unique for every request. In turn the requests can then be made using the following jQuery code:</p>

<pre><code>$.getJSON('/api/user/get/1', { 'key': '123rrwfnufsd7f72' }).done(function(data) { 
    // data will now contain a token, so we use it to make another AJAX request:
    if( data.token )
    {
        $.getJSON('/api/user/get/1', { 'token': data.token }).done(function(user) {  
             // do something with user or handle bad token
        });
    }
});
</code></pre>

<p>My question is will this be sufficient to prevent brute-force and replay attacks?</p>
","<p>I just crreated a small lib about this. You can specify a time drift in minutes if need, or even use a custom salt. ( see <a href=""https://github.com/gboddin/psk-validator/"" rel=""nofollow noreferrer"">https://github.com/gboddin/psk-validator/</a> )</p>

<p>This library allows you to authenticate signed message from a client
using time based salts.</p>

<h2>Installation</h2>

<pre><code>composer require gboddin/psk-validator
</code></pre>

<h2>Usage</h2>

<h3>Client</h3>

<pre><code>$sharedsecret = '43223ff65b6ce17072cda5729b20daceec611d1f39e76040d347ceeca51d2a47';
$data = json_encode(['suff','otherstuff',['machin' =&gt; 'bidule']]);

/**
 * Client :
 * Invoke the validator with the pre-shared key and an algo  (sha256 by default) and
 * define an allowed time drift in minutes ( 2 by default ).
 */
$sigValidation = new \Gbo\PSKValidator($sharedsecret, 'sha256');
/**
 * Signs a bunch of data and get the signature.
 * The second optional parameters allows for a user provided salt instead
 * of the default time based salt. It must be agreed on between client and server.
 */
$signature =  $sigValidation-&gt;sign($data, null);
</code></pre>

<h3>Server</h3>

<pre><code>/**
 * Server :
 * The optional third parameter allows to define a maximum time drift  in minutes ( default 2 minutes )
 */

$signature =  $httpRequest-&gt;getHeader('x-signature');
$sharedsecret = '43223ff65b6ce17072cda5729b20daceec611d1f39e76040d347ceeca51d2a47';
$sigValidation = new \PSKValidator($sharedsecret, 'sha256', 2);
$data = $httpRequest-&gt;getBody();

/**
 * Server :
 * The third optional parameters allows for a user provided salt instead
 * of the default time based salt. It must be agreed on between client and server.
 */

$signatureIsValid = $sigValidation-&gt;verify($data, $signature, null);

var_dump(
    $data,
    $signature,
    $sigValidation-&gt;getTimeBasedSignatures($data),
    $signatureIsValid
);
</code></pre>

<h3>Server output</h3>

<pre><code>string(41) ""[""suff"",""otherstuff"",{""machin"":""bidule""}]""
string(64) ""d85a2d6873e034cb3ab8c490cb82139d8dabae6c08581cca0a2e7497ead287a4""
array(5) {
  [0]=&gt;
  string(64) ""d85a2d6873e034cb3ab8c490cb82139d8dabae6c08581cca0a2e7497ead287a4""
  [1]=&gt;
  string(64) ""dc150239c61fe272b7ca44ad0918d159a84e5bc1661db48bad04a81bc7f4c742""
  [2]=&gt;
  string(64) ""e1822fc6cc7bbf1184b29efaaaceac6d598fb406b4f8cf9b3717b3d0c533c19f""
  [3]=&gt;
  string(64) ""d85a2d6873e034cb3ab8c490cb82139d8dabae6c08581cca0a2e7497ead287a4""
  [4]=&gt;
  string(64) ""d85a2d6873e034cb3ab8c490cb82139d8dabae6c08581cca0a2e7497ead287a4""
}
bool(true)
</code></pre>

<p>( sorry for the self promotion :) )</p>
","43685933","5581","<php><api><security><hmac>","3","1","1","2017-04-28 17:37:57","","1","","","","","2017-02-24 09:31:51","","","2017-04-28 17:37:57"
"2959972","HMAC SHA1 ColdFusion","<p>Please help!  I have been pulling out my hair over this one.  :)</p>

<p>I have a site that I need to HMAC SHA1 for authentication.  It currently works with another language but now I need to move it to ColdFusion.  For the life of me I cannot get the strings to match.  Any assistance would be much appreciated.</p>

<p>Data: <code>https%3A%2F%2Fwww%2Etestwebsite%2Ecom%3Fid%3D5447</code><br>
Key:  <code>265D5C01D1B4C8FA28DC55C113B4D21005BB2B348859F674977B24E0F37C81B05FAE85FB75EA9CF53ABB9A174C59D98C7A61E2985026D2AA70AE4452A6E3F2F9</code></p>

<p>Correct answer: <code>WJd%2BKxmFxGWdbw4xQJZXd3%2FHkFQ%3d</code><br>
My answer: <code>knIVr6wIt6%2Fl7mBJPTTbwQoTIb8%3d</code></p>

<p>Both are Base64 encoded and then URL encoded.</p>
","<p>Doing an HMAC-SHA1 thing myself.  Best I can say is that I found this old function.  Has worked great for what I am doing thus far.  Forgot where I found it though so I can't credit the author.</p>

<p>For your Base 64 stuff... run this function on your encryption, then just do a cfset newString = toBase64(oldString) on what is returned.</p>

<pre><code>&lt;cffunction name=""hmacEncrypt"" returntype=""binary"" access=""public"" output=""false""&gt;
   &lt;cfargument name=""signKey"" type=""string"" required=""true"" /&gt;
   &lt;cfargument name=""signMessage"" type=""string"" required=""true"" /&gt;
   &lt;cfargument name=""algorithm"" type=""string"" default=""HmacSHA1"" /&gt;
   &lt;cfargument name=""charset"" type=""string"" default=""UTF-8"" /&gt;

   &lt;cfset var msgBytes = charsetDecode(arguments.signMessage, arguments.charset) /&gt;
   &lt;cfset var keyBytes = charsetDecode(arguments.signKey, arguments.charset) /&gt;
   &lt;cfset var keySpec = createObject(""java"",""javax.crypto.spec.SecretKeySpec"")  /&gt;
   &lt;cfset var mac = createObject(""java"",""javax.crypto.Mac"") /&gt;

   &lt;cfset key = keySpec.init(keyBytes, arguments.algorithm) /&gt;
   &lt;cfset mac = mac.getInstance(arguments.algorithm) /&gt;
   &lt;cfset mac.init(key) /&gt;
   &lt;cfset mac.update(msgBytes) /&gt;

   &lt;cfreturn mac.doFinal() /&gt;
&lt;/cffunction&gt;
</code></pre>
","2960258","5569","<coldfusion><sha1><hmac>","5","9","3","2015-12-14 00:36:03","","1","3","411022","","2013-11-03 15:08:59","2010-06-02 17:19:46","","2013-06-27 03:02:10","2010-06-02 18:03:32"
"2959972","HMAC SHA1 ColdFusion","<p>Please help!  I have been pulling out my hair over this one.  :)</p>

<p>I have a site that I need to HMAC SHA1 for authentication.  It currently works with another language but now I need to move it to ColdFusion.  For the life of me I cannot get the strings to match.  Any assistance would be much appreciated.</p>

<p>Data: <code>https%3A%2F%2Fwww%2Etestwebsite%2Ecom%3Fid%3D5447</code><br>
Key:  <code>265D5C01D1B4C8FA28DC55C113B4D21005BB2B348859F674977B24E0F37C81B05FAE85FB75EA9CF53ABB9A174C59D98C7A61E2985026D2AA70AE4452A6E3F2F9</code></p>

<p>Correct answer: <code>WJd%2BKxmFxGWdbw4xQJZXd3%2FHkFQ%3d</code><br>
My answer: <code>knIVr6wIt6%2Fl7mBJPTTbwQoTIb8%3d</code></p>

<p>Both are Base64 encoded and then URL encoded.</p>
","<p>Steve - Thanks for your response.  I actually was using the hmacEncrypt function already.  I did figure out my issue though.  I was passing in a HEX key instead of a string.  It accepted the key because technically it was a string.  To get it back to a string I used another function along with the one above.  The one below changes the HEX into a string.  I didn't write the function below nor do I remember where it came from to get the author credit, but it worked great. </p>

<pre><code>&lt;cffunction name=""Hex2Bin"" returntype=""any"" hint=""Converts a Hex string to binary""&gt;
    &lt;cfargument name=""inputString"" type=""string"" required=""true"" hint=""The hexadecimal string to be written.""&gt;
    &lt;cfset var outStream = CreateObject(""java"", ""java.io.ByteArrayOutputStream"").init()&gt;
    &lt;cfset var inputLength = Len(arguments.inputString)&gt;
    &lt;cfset var outputString = """"&gt;
    &lt;cfset var i = 0&gt;
    &lt;cfset var ch = """"&gt;
    &lt;cfif inputLength mod 2 neq 0&gt;
    &lt;cfset arguments.inputString = ""0"" &amp; inputString&gt;
    &lt;/cfif&gt;
    &lt;cfloop from=""1"" to=""#inputLength#"" index=""i"" step=""2""&gt;
        &lt;cfset ch = Mid(inputString, i, 2)&gt;
        &lt;cfset outStream.write(javacast(""int"", InputBaseN(ch, 16)))&gt;
    &lt;/cfloop&gt;
    &lt;cfset outStream.flush()&gt;
    &lt;cfset outStream.close()&gt; 
    &lt;cfreturn outStream.toByteArray()&gt;
&lt;/cffunction&gt; 
</code></pre>
","2974324","5569","<coldfusion><sha1><hmac>","5","1","3","2015-12-14 00:36:03","","1","3","411022","","2013-11-03 15:08:59","2010-06-02 17:19:46","","","2010-06-04 13:00:17"
"2959972","HMAC SHA1 ColdFusion","<p>Please help!  I have been pulling out my hair over this one.  :)</p>

<p>I have a site that I need to HMAC SHA1 for authentication.  It currently works with another language but now I need to move it to ColdFusion.  For the life of me I cannot get the strings to match.  Any assistance would be much appreciated.</p>

<p>Data: <code>https%3A%2F%2Fwww%2Etestwebsite%2Ecom%3Fid%3D5447</code><br>
Key:  <code>265D5C01D1B4C8FA28DC55C113B4D21005BB2B348859F674977B24E0F37C81B05FAE85FB75EA9CF53ABB9A174C59D98C7A61E2985026D2AA70AE4452A6E3F2F9</code></p>

<p>Correct answer: <code>WJd%2BKxmFxGWdbw4xQJZXd3%2FHkFQ%3d</code><br>
My answer: <code>knIVr6wIt6%2Fl7mBJPTTbwQoTIb8%3d</code></p>

<p>Both are Base64 encoded and then URL encoded.</p>
","<p>A shorter encryption method (based on <a href=""http://www.barneyb.com/barneyblog/2008/04/04/amazon-s3-url-builder-for-coldfusion/"" rel=""nofollow"">Barney's method</a>) that outputs a string:</p>

<pre><code>&lt;cffunction name=""CFHMAC"" output=""false"" returntype=""string""&gt;
   &lt;cfargument name=""signMsg"" type=""string"" required=""true"" /&gt;
   &lt;cfargument name=""signKey"" type=""string"" required=""true"" /&gt;
   &lt;cfargument name=""encoding"" type=""string"" default=""utf-8"" /&gt;
   &lt;cfset var key = createObject(""java"", ""javax.crypto.spec.SecretKeySpec"").init(signKey.getBytes(arguments.encoding), ""HmacSHA1"") /&gt;
   &lt;cfset var mac = createObject(""java"", ""javax.crypto.Mac"").getInstance(""HmacSHA1"") /&gt;
   &lt;cfset mac.init(key) /&gt;
   &lt;cfreturn toBase64(mac.doFinal(signMsg.getBytes(arguments.encoding))) /&gt;
&lt;/cffunction&gt;
</code></pre>

<p>In addition</p>

<ol>
<li>ColdFusion 10 supports HMAC-SHA1 for Encrypting and Hashing natively.</li>
<li>There is a library called <a href=""http://www.adobe.com/cfusion/exchange/index.cfm?event=extensionDetail&amp;extid=1003921"" rel=""nofollow"">CF_HMAC distributed by Adobe</a></li>
<li>There are several libraries that deal with HMAC in relation while signing files for Amazon.  Among them are <a href=""https://github.com/joedanz/cf-amazon-s3"" rel=""nofollow"">cf-amazon-s3</a>, <a href=""http://www.barneyb.com/barneyblog/2008/04/04/amazon-s3-url-builder-for-coldfusion/"" rel=""nofollow"">Barney's S3 URL Builder</a>, and <a href=""http://amazons3.riaforge.org/"" rel=""nofollow"">RIAForge S3</a> </li>
</ol>
","12061270","5569","<coldfusion><sha1><hmac>","5","4","3","2015-12-14 00:36:03","","1","3","411022","","2013-11-03 15:08:59","2010-06-02 17:19:46","","2015-12-14 00:36:03","2012-08-21 18:56:17"
"15034267","HMAC-SHA256 with AES-256 in CBC mode","<p>I recently came across <a href=""http://code.activestate.com/recipes/576980-authenticated-encryption-with-pycrypto/"" rel=""nofollow"">the following code sample</a> for encrypting a file with AES-256 CBC with a SHA-256 HMAC for authentication and validation:</p>

<pre><code>aes_key, hmac_key = self.keys
# create a PKCS#7 pad to get us to `len(data) % 16 == 0`
pad_length = 16 - len(data) % 16
data = data + (pad_length * chr(pad_length))
# get IV
iv = os.urandom(16)
# create cipher
cipher = AES.new(aes_key, AES.MODE_CBC, iv)
data = iv + cipher.encrypt(data)
sig = hmac.new(hmac_key, data, hashlib.sha256).digest()
# return the encrypted data (iv, followed by encrypted data, followed by hmac sig):
return data + sig
</code></pre>

<p>Since, in my case, I'm encrypting much more than a string, rather a fairly large file, I modified the code to do the following:</p>

<pre><code>aes_key, hmac_key = self.keys
iv = os.urandom(16)
cipher = AES.new(aes_key, AES.MODE_CBC, iv)

with open('input.file', 'rb') as infile:
    with open('output.file', 'wb') as outfile:
        # write the iv to the file:
        outfile.write(iv)

        # start the loop
        end_of_line = True

        while True:
            input_chunk = infile.read(64 * 1024)

            if len(input_chunk) == 0:
                # we have reached the end of the input file and it matches `% 16 == 0`
                # so pad it with 16 bytes of PKCS#7 padding:
                end_of_line = True
                input_chunk += 16 * chr(16)
            elif len(input_chunk) % 16 &gt; 0:
                # we have reached the end of the input file and it doesn't match `% 16 == 0`
                # pad it by the remainder of bytes in PKCS#7:
                end_of_line = True
                input_chunk_remainder = 16 - (len(input_chunk) &amp; 16)
                input_chunk += input_chunk_remainder * chr(input_chunk_remainder)

            # write out encrypted data and an HMAC of the block
            outfile.write(cipher.encrypt(input_chunk) + hmac.new(hmac_key, data, 
                    hashlib.sha256).digest())

            if end_of_line:
                break
</code></pre>

<p>Simply put, this reads an input file in blocks of 64KB at a time and encrypts these blocks, generating a HMAC using SHA-256 of the encrypted data, and appending that HMAC after each block. Decryption will happen by reading in 64KB + 32B chunks and calculating the HMAC of the first 64KB and comparing it against the SHA-256 sum occupying the last 32 bytes in the chunk.</p>

<p>Is this the right way to use an HMAC? Does it ensure security and authentication that the data was unmodified and decrypted with the right key? </p>

<p>FYI, the AES and HMAC keys are both derived from the same passphrase which is generated by running the input text through SHA-512, then through bcrypt, then through SHA-512 again. The output from the final SHA-512 is then split into two chunks, one used for the AES password and the other used for the HMAC.</p>
","<p>I don't think there is a security problem with what you're doing with the HMACs (not that that means there isn't a problem with the security), but I don't know the actual value in HMAC sub elements of the ciphertext gets you.  Unless you want to support partial recovery of the plaintext in the event of tampering, there is not much reason to incur the overhead of HMACing 64 KB blocks, vs the full ciphertext.</p>

<p>From a key generation perspective, it might make more sense to use a key generated from a passphrase to encrypt two randomly generated keys, and then use the randomly generated keys to perform HMAC and AES operations.  I know using the same key for both your block cipher and HMAC is bad news, but I don't know if using a key generated in the same manner is similarly bad. </p>

<p>At the very least, you should tweak your key derivation mechanism. bcrypt is a password hashing mechanism, not a key derivation function.  You should use PBKDF2 to do key derivations.</p>
","15034812","5549","<python><encryption><aes><hmac><pycrypto>","2","-2","2","2013-02-26 07:06:30","15035077","0","","482262","","2013-02-26 07:06:30","2013-02-22 22:27:39","","2013-02-22 23:52:21","2013-02-22 23:14:56"
"15034267","HMAC-SHA256 with AES-256 in CBC mode","<p>I recently came across <a href=""http://code.activestate.com/recipes/576980-authenticated-encryption-with-pycrypto/"" rel=""nofollow"">the following code sample</a> for encrypting a file with AES-256 CBC with a SHA-256 HMAC for authentication and validation:</p>

<pre><code>aes_key, hmac_key = self.keys
# create a PKCS#7 pad to get us to `len(data) % 16 == 0`
pad_length = 16 - len(data) % 16
data = data + (pad_length * chr(pad_length))
# get IV
iv = os.urandom(16)
# create cipher
cipher = AES.new(aes_key, AES.MODE_CBC, iv)
data = iv + cipher.encrypt(data)
sig = hmac.new(hmac_key, data, hashlib.sha256).digest()
# return the encrypted data (iv, followed by encrypted data, followed by hmac sig):
return data + sig
</code></pre>

<p>Since, in my case, I'm encrypting much more than a string, rather a fairly large file, I modified the code to do the following:</p>

<pre><code>aes_key, hmac_key = self.keys
iv = os.urandom(16)
cipher = AES.new(aes_key, AES.MODE_CBC, iv)

with open('input.file', 'rb') as infile:
    with open('output.file', 'wb') as outfile:
        # write the iv to the file:
        outfile.write(iv)

        # start the loop
        end_of_line = True

        while True:
            input_chunk = infile.read(64 * 1024)

            if len(input_chunk) == 0:
                # we have reached the end of the input file and it matches `% 16 == 0`
                # so pad it with 16 bytes of PKCS#7 padding:
                end_of_line = True
                input_chunk += 16 * chr(16)
            elif len(input_chunk) % 16 &gt; 0:
                # we have reached the end of the input file and it doesn't match `% 16 == 0`
                # pad it by the remainder of bytes in PKCS#7:
                end_of_line = True
                input_chunk_remainder = 16 - (len(input_chunk) &amp; 16)
                input_chunk += input_chunk_remainder * chr(input_chunk_remainder)

            # write out encrypted data and an HMAC of the block
            outfile.write(cipher.encrypt(input_chunk) + hmac.new(hmac_key, data, 
                    hashlib.sha256).digest())

            if end_of_line:
                break
</code></pre>

<p>Simply put, this reads an input file in blocks of 64KB at a time and encrypts these blocks, generating a HMAC using SHA-256 of the encrypted data, and appending that HMAC after each block. Decryption will happen by reading in 64KB + 32B chunks and calculating the HMAC of the first 64KB and comparing it against the SHA-256 sum occupying the last 32 bytes in the chunk.</p>

<p>Is this the right way to use an HMAC? Does it ensure security and authentication that the data was unmodified and decrypted with the right key? </p>

<p>FYI, the AES and HMAC keys are both derived from the same passphrase which is generated by running the input text through SHA-512, then through bcrypt, then through SHA-512 again. The output from the final SHA-512 is then split into two chunks, one used for the AES password and the other used for the HMAC.</p>
","<p><strong>Yes, there are 2 security problems.</strong></p>

<p>But first, I assume that with this statement at the end:</p>

<pre><code># write out encrypted data and an HMAC of the block
outfile.write(cipher.encrypt(input_chunk) + hmac.new(hmac_key, data, hashlib.sha256).digest())
</code></pre>

<p>you actually meant:</p>

<pre><code># write out encrypted data and an HMAC of the block
data = cipher.encrypt(input_chunk)
outfile.write(data + hmac.new(hmac_key, data, hashlib.sha256).digest())
</code></pre>

<p>Because <code>data</code> is not defined anywhere.</p>

<p>The 1st security problem is that you are authenticating each piece independently of the others, but not the composition. In other words, the attacker can reshuffle, duplicate, or remove any of the chunks and the receiver will not notice.</p>

<p>A more secure approach is to have one instance of HMAC only, pass all the encrypted data to it via the <a href=""https://www.dlitz.net/software/pycrypto/api/current/Crypto.Hash.HMAC.HMAC-class.html#update"" rel=""nofollow noreferrer""><code>update</code></a> method, and output one digest, at the very end.</p>

<p>Alternatively, if you want to enable the receiver to detect tampering before receiving the whole file, you can output the intermediate MAC for each piece. In fact, a call to <code>digest</code> does not change the state of the HMAC; you can keep calling <code>update</code> afterwards.</p>

<p>The 2nd security problem is that you don't use salt for your key derivation (I say that because you don't send it). Apart from password cracking, if you encrypt more than 2 files using the same password the attacker will also be able to freely mix chunks taken by either encrypted file - because the HMAC key is the same. Solution: use salt.</p>

<p>One last minor thing: <code>infile.read(64 * 1024)</code> may return less than <code>64*1024</code> bytes, but <a href=""https://stackoverflow.com/questions/4426581/python-eof-for-multi-byte-requests-of-file-read"">that does not mean you reached the end of the file</a>.</p>
","15035077","5549","<python><encryption><aes><hmac><pycrypto>","2","5","2","2013-02-26 07:06:30","15035077","0","","482262","","2013-02-26 07:06:30","2013-02-22 22:27:39","","2017-05-23 11:44:19","2013-02-22 23:37:49"
"1336909","Ruby and PHP HMACs not agreeing","<p>I'm trying to create an HMAC in Ruby and then verify it in PHP.</p>

<p>Ruby:</p>

<pre><code>require 'openssl'
message = ""A522EBF2-5083-484D-99D9-AA97CE49FC6C,1234567890,/api/comic/aWh62,GET""
key     = ""3D2143BD-6F86-449F-992C-65ADC97B968B""
hash    = OpenSSL::HMAC.hexdigest('sha256', message, key)
p hash
</code></pre>

<p>PHP:</p>

<pre><code>&lt;?php
  $message = ""A522EBF2-5083-484D-99D9-AA97CE49FC6C,1234567890,/api/comic/aWh62,GET"";
  $key     = ""3D2143BD-6F86-449F-992C-65ADC97B968B"";
  $hash    = hash_hmac(""sha256"", $message, $key);
  var_dump($hash);
?&gt;
</code></pre>

<p>For the Ruby, I get: 20e3f261b762e8371decdf6f42a5892b530254e666508e885c708c5b0bfc03d3</p>

<p>For the PHP, I get: e5f6995ba1496b2fb144329b2d1b3b23c8fa3211486e57bfaec5d993a1da9d15</p>

<p>I and some colleagues are at a complete loss, any help would be greatly appreciated.</p>
","<p>ruby's <code>OpenSSL::HMAC.hexdigest</code> expects first <code>key</code> and then <code>message</code>.</p>

<pre><code>irb(main):002:0&gt; OpenSSL::HMAC.hexdigest('sha256','3D2143BD-6F86-449F-992C-65ADC97B968B','A522EBF2-5083-484D-99D9-AA97CE49FC6C,1234567890,/api/comic/aWh62,GET')
=&gt; ""e5f6995ba1496b2fb144329b2d1b3b23c8fa3211486e57bfaec5d993a1da9d15""
</code></pre>
","1337382","5533","<php><ruby><hmac>","12","30","2","2011-01-31 14:39:59","1337382","1","5","","","","2009-08-26 19:20:03","","","2009-08-26 20:46:41"
"1336909","Ruby and PHP HMACs not agreeing","<p>I'm trying to create an HMAC in Ruby and then verify it in PHP.</p>

<p>Ruby:</p>

<pre><code>require 'openssl'
message = ""A522EBF2-5083-484D-99D9-AA97CE49FC6C,1234567890,/api/comic/aWh62,GET""
key     = ""3D2143BD-6F86-449F-992C-65ADC97B968B""
hash    = OpenSSL::HMAC.hexdigest('sha256', message, key)
p hash
</code></pre>

<p>PHP:</p>

<pre><code>&lt;?php
  $message = ""A522EBF2-5083-484D-99D9-AA97CE49FC6C,1234567890,/api/comic/aWh62,GET"";
  $key     = ""3D2143BD-6F86-449F-992C-65ADC97B968B"";
  $hash    = hash_hmac(""sha256"", $message, $key);
  var_dump($hash);
?&gt;
</code></pre>

<p>For the Ruby, I get: 20e3f261b762e8371decdf6f42a5892b530254e666508e885c708c5b0bfc03d3</p>

<p>For the PHP, I get: e5f6995ba1496b2fb144329b2d1b3b23c8fa3211486e57bfaec5d993a1da9d15</p>

<p>I and some colleagues are at a complete loss, any help would be greatly appreciated.</p>
","<p>I noticed that </p>

<pre><code>hash = HMAC::SHA256(key) 
hash &lt;&lt; a
hash &lt;&lt; b
hash &lt;&lt; c
</code></pre>

<p>gives different result than PHP's</p>

<pre><code>hash_hmac('sha256',$a.$b.$c, $key)
</code></pre>

<p>beware of this caveat. To get correct, just do</p>

<pre><code>hash = HMAC::SHA256(key)
hash &lt;&lt; ""#{a}#{b}#{c}""
</code></pre>
","4852142","5533","<php><ruby><hmac>","12","0","2","2011-01-31 14:39:59","1337382","1","5","","","","2009-08-26 19:20:03","","","2011-01-31 14:39:59"
"42546493","Generate a 10-digit TOTP password with a certain key","<p>This problem is related to TOTP as specified in RFC6238 here: <a href=""https://tools.ietf.org/html/rfc6238#section-1.2"" rel=""noreferrer"">https://tools.ietf.org/html/rfc6238#section-1.2</a>.</p>

<p>I am to implement the RFC6238 to generate a <strong>10-digit</strong> TOTP password, which will be used in a POST request later on. The sample input and output for the TOTP is supposed to be like this:</p>

<p><strong>Sample Input:</strong></p>

<blockquote>
  <p>Shared key: ""ninja@example.comHDECHALLENGE003"" (without double quotes)</p>
  
  <p>Hash function used: HMAC-SHA-512</p>
  
  <p>T0 = 0, Timestep = 30 seconds (as per specified in RFC6238)</p>
  
  <p>Expected TOTP of 10 digits</p>
</blockquote>

<p><strong>Sample Output:</strong></p>

<blockquote>
  <p>Successful TOTP generated: 1773133250, for time of Mon, 17 Mar 2014 15:20:51 GMT</p>
  
  <p>base64 encoded POST Authorization username/password request: bmluamFAZXhhbXBsZS5jb206MTc3MzEzMzI1MA==</p>
  
  <p>(I have decoded the sample POST authorization to be 'ninja@example.com:1773133250' hence why I can say that the sample TOTP output is 1773133250)</p>
</blockquote>

<p>After attempting to make my own script according to the rfc6238 specification I cannot get the same output for the sample input as above. I tried using other available online TOTP modules that are available online (mostly in Python), to find that they generate the same output as the script that I created. Finally, I tried the Java code given in the example of RFC6238 and came up with the same result as my script, i.e.:</p>

<p><strong>Attempted input:</strong></p>

<blockquote>
  <p>Hex encoded seed for HMAC512: ""6E696E6A61406578616D706C652E636F6D4844454348414C4C454E4745303033"" + ""6E696E6A61406578616D706C652E636F6D4844454348414C4C454E4745303033"";</p>
  
  <p>Time inputted is 1395069651L, representing the time received in sample output</p>
</blockquote>

<p><strong>Result of attempt (same output from custom script, other Python modules, and the Java implementation given in RFC6238 documentation):</strong></p>

<blockquote>
  <p>Generated TOTP: 0490867067</p>
</blockquote>

<p>Here is the code that I first used in attempt to generate the TOTP in Python:</p>

<pre><code>    # Mission/Task Description:
    # * For the ""password"", provide an 10-digit time-based one time password conforming to RFC6238 TOTP.
    # 
    # ** You have to read RFC6238 (and the errata too!) and get a correct one time password by yourself.
    # ** TOTP's ""Time Step X"" is 30 seconds. ""T0"" is 0.
    # ** Use HMAC-SHA-512 for the hash function, instead of the default HMAC-SHA-1.
    # ** Token shared secret is the userid followed by ASCII string value ""HDECHALLENGE003"" (not including double quotations).
    # 
    # *** For example, if the userid is ""ninja@example.com"", the token shared secret is ""ninja@example.comHDECHALLENGE003"".
    # *** For example, if the userid is ""ninjasamuraisumotorishogun@example.com"", the token shared secret is ""ninjasamuraisumotorishogun@example.comHDECHALLENGE003""
    # 

import hmac
import hashlib
import time
import sys
import struct

userid = ""ninja@example.com""
secret_suffix = ""HDECHALLENGE003""
shared_secret = userid+secret_suffix

timestep = 30
T0 = 0

def HOTP(K, C, digits=10):
    """"""HTOP:
    K is the shared key
    C is the counter value
    digits control the response length
    """"""
    K_bytes = K.encode()
    C_bytes = struct.pack(""&gt;Q"", C)
    hmac_sha512 = hmac.new(key = K_bytes, msg=C_bytes, digestmod=hashlib.sha512).hexdigest()
    return Truncate(hmac_sha512)[-digits:]

def Truncate(hmac_sha512):
    """"""truncate sha512 value""""""
    offset = int(hmac_sha512[-1], 16)
    binary = int(hmac_sha512[(offset *2):((offset*2)+8)], 16) &amp; 0x7FFFFFFF
    return str(binary)

def TOTP(K, digits=10, timeref = 0, timestep = 30):
    """"""TOTP, time-based variant of HOTP
    digits control the response length
    the C in HOTP is replaced by ( (currentTime - timeref) / timestep )
    """"""
    C = int ( 1395069651 - timeref ) // timestep
    return HOTP(K, C, digits = digits)

passwd = TOTP(""ninja@example.comHDECHALLENGE003ninja@example.comHDECHALLENGE003"", 10, T0, timestep).zfill(10)
print passwd
</code></pre>

<p>Here is the second code in Java which is essentially a modified version of the Java implementation found in RFC6238:</p>

<pre><code> /**
 Copyright (c) 2011 IETF Trust and the persons identified as
 authors of the code. All rights reserved.

 Redistribution and use in source and binary forms, with or without
 modification, is permitted pursuant to, and subject to the license
 terms contained in, the Simplified BSD License set forth in Section
 4.c of the IETF Trust's Legal Provisions Relating to IETF Documents
 (http://trustee.ietf.org/license-info).
 */

 import java.lang.reflect.UndeclaredThrowableException;
 import java.security.GeneralSecurityException;
 import java.text.DateFormat;
 import java.text.SimpleDateFormat;
 import java.util.Date;
 import javax.crypto.Mac;
 import javax.crypto.spec.SecretKeySpec;
 import java.math.BigInteger;
 import java.util.TimeZone;
 import java.util.Calendar;


 /**
  * This is an example implementation of the OATH
  * TOTP algorithm.
  * Visit www.openauthentication.org for more information.
  *
  * @author Johan Rydell, PortWise, Inc.
  */

 public class TOTP {

     private TOTP() {}

     /**
      * This method uses the JCE to provide the crypto algorithm.
      * HMAC computes a Hashed Message Authentication Code with the
      * crypto hash algorithm as a parameter.
      *
      * @param crypto: the crypto algorithm (HmacSHA1, HmacSHA256,
      *                             HmacSHA512)
      * @param keyBytes: the bytes to use for the HMAC key
      * @param text: the message or text to be authenticated
      */


     private static byte[] hmac_sha(String crypto, byte[] keyBytes,
             byte[] text){
         try {
             Mac hmac;
             hmac = Mac.getInstance(crypto);
             SecretKeySpec macKey =
                 new SecretKeySpec(keyBytes, ""RAW"");
             hmac.init(macKey);
             return hmac.doFinal(text);
         } catch (GeneralSecurityException gse) {
             throw new UndeclaredThrowableException(gse);
         }
     }


     /**
      * This method converts a HEX string to Byte[]
      *
      * @param hex: the HEX string
      *
      * @return: a byte array
      */

     private static byte[] hexStr2Bytes(String hex){
         // Adding one byte to get the right conversion
         // Values starting with ""0"" can be converted
         byte[] bArray = new BigInteger(""10"" + hex,16).toByteArray();

         // Copy all the REAL bytes, not the ""first""
         byte[] ret = new byte[bArray.length - 1];
         for (int i = 0; i &lt; ret.length; i++)
             ret[i] = bArray[i+1];
         return ret;
     }

     private static final long[] DIGITS_POWER
     // 0 1  2   3    4     5      6       7        8         9          10
     = {1,10,100,1000,10000,100000,1000000,10000000,100000000,1000000000,10000000000L};

     /**
      * This method generates a TOTP value for the given
      * set of parameters.
      *
      * @param key: the shared secret, HEX encoded
      * @param time: a value that reflects a time
      * @param returnDigits: number of digits to return
      *
      * @return: a numeric String in base 10 that includes
      *              {@link truncationDigits} digits
      */

     public static String generateTOTP(String key,
             String time,
             String returnDigits){
         return generateTOTP(key, time, returnDigits, ""HmacSHA1"");
     }


     /**
      * This method generates a TOTP value for the given
      * set of parameters.
      *
      * @param key: the shared secret, HEX encoded
      * @param time: a value that reflects a time
      * @param returnDigits: number of digits to return
      *
      * @return: a numeric String in base 10 that includes
      *              {@link truncationDigits} digits
      */

     public static String generateTOTP256(String key,
             String time,
             String returnDigits){
         return generateTOTP(key, time, returnDigits, ""HmacSHA256"");
     }

     /**
      * This method generates a TOTP value for the given
      * set of parameters.
      *
      * @param key: the shared secret, HEX encoded
      * @param time: a value that reflects a time
      * @param returnDigits: number of digits to return
      *
      * @return: a numeric String in base 10 that includes
      *              {@link truncationDigits} digits
      */

     public static String generateTOTP512(String key,
             String time,
             String returnDigits){
         return generateTOTP(key, time, returnDigits, ""HmacSHA512"");
     }


     /**
      * This method generates a TOTP value for the given
      * set of parameters.
      *
      * @param key: the shared secret, HEX encoded
      * @param time: a value that reflects a time
      * @param returnDigits: number of digits to return
      * @param crypto: the crypto function to use
      *
      * @return: a numeric String in base 10 that includes
      *              {@link truncationDigits} digits
      */

     public static String generateTOTP(String key,
             String time,
             String returnDigits,
             String crypto){
         int codeDigits = Integer.decode(returnDigits).intValue();
         String result = null;

         // Using the counter
         // First 8 bytes are for the movingFactor
         // Compliant with base RFC 4226 (HOTP)
         while (time.length() &lt; 16 )
             time = ""0"" + time;

         // Get the HEX in a Byte[]
         byte[] msg = hexStr2Bytes(time);
         byte[] k = hexStr2Bytes(key);

         byte[] hash = hmac_sha(crypto, k, msg);

         // put selected bytes into result int
         int offset = hash[hash.length - 1] &amp; 0xf;

         int binary =
             ((hash[offset] &amp; 0x7f) &lt;&lt; 24) |
             ((hash[offset + 1] &amp; 0xff) &lt;&lt; 16) |
             ((hash[offset + 2] &amp; 0xff) &lt;&lt; 8) |
             (hash[offset + 3] &amp; 0xff);

         long otp = binary % DIGITS_POWER[codeDigits];

         result = Long.toString(otp);
         while (result.length() &lt; codeDigits) {
             result = ""0"" + result;
         }
         return result;
     }

     public static void main(String[] args) {
         // Seed for HMAC-SHA1 - 20 bytes
         String seed = ""3132333435363738393031323334353637383930"";
         // Seed for HMAC-SHA256 - 32 bytes
         String seed32 = ""3132333435363738393031323334353637383930"" +
         ""313233343536373839303132"";
         // Seed for HMAC-SHA512 - 64 bytes
         String seed64 = ""6E696E6A61406578616D706C652E636F6D4844454348414C4C454E4745303033"";

         //NOTE: this is the 16-bit/hex encoded representation of ""ninja@example.comHDECHALLENGE003""
         String seednew = ""6E696E6A61406578616D706C652E636F6D4844454348414C4C454E4745303033"" +
         ""6E696E6A61406578616D706C652E636F6D4844454348414C4C454E4745303033""; 
         long T0 = 0;
         long X = 30;
         long current = System.currentTimeMillis()/1000;
         System.out.println(current);
         long testTime[] = {59L, 1234567890L,1395069651L};

         String steps = ""0"";
         DateFormat df = new SimpleDateFormat(""yyyy-MM-dd HH:mm:ss"");
         df.setTimeZone(TimeZone.getTimeZone(""UTC""));
         try {
             System.out.println(
                     ""+---------------+-----------------------+"" +
             ""------------------+--------+--------+"");
             System.out.println(
                     ""|  Time(sec)    |   Time (UTC format)   "" +
             ""| Value of T(Hex)  |  TOTP  | Mode   |"");
             System.out.println(
                     ""+---------------+-----------------------+"" +
             ""------------------+--------+--------+"");

             for (int i=0; i&lt;testTime.length; i++) {
                 long T = (testTime[i] - T0)/X;
                 steps = Long.toHexString(T).toUpperCase();
                 while (steps.length() &lt; 16) steps = ""0"" + steps;
                 String fmtTime = String.format(""%1$-11s"", testTime[i]);
                 String utcTime = df.format(new Date(testTime[i]*1000));
                 System.out.print(""|  "" + fmtTime + ""  |  "" + utcTime +
                         ""  | "" + steps + "" |"");
                 System.out.println(generateTOTP(seed, steps, ""8"",
                 ""HmacSHA1"") + ""| SHA1   |"");
                 System.out.print(""|  "" + fmtTime + ""  |  "" + utcTime +
                         ""  | "" + steps + "" |"");
                 System.out.println(generateTOTP(seed32, steps, ""8"",
                 ""HmacSHA256"") + ""| SHA256 |"");
                 System.out.print(""|  "" + fmtTime + ""  |  "" + utcTime +
                         ""  | "" + steps + "" |"");
                 System.out.println(generateTOTP(seed64, steps, ""10"",
                 ""HmacSHA256"") + ""| SHA256 |"");
                 System.out.print(""|  "" + fmtTime + ""  |  "" + utcTime +
                         ""  | "" + steps + "" |"");
                 System.out.println(generateTOTP(seednew, steps, ""10"",
                  ""HmacSHA512"") + ""| SHA512 |"");
                 System.out.println(
                         ""+---------------+-----------------------+"" +
                 ""------------------+--------+--------+"");
             }
         }catch (final Exception e){
             System.out.println(""Error : "" + e);
         }
     }
 }
</code></pre>

<p>Do note that for the modified RFC Java code, the output would be that of several date/time listed in the testTime[] array, however the targeted GMT from the sample input of the task is also included in here as well. Testing in my Ubuntu showed the same result as that from my Python script.</p>

<p>I believe that I have followed the instructions given by the task. I used the actual RFC given Java code to find it is not generating the same output as the one given in the task. I contacted the provider of the task to ask if there is a bug, but they say that it is correct.</p>

<p>Perhaps I am missing something here, such as the way the task provider actually encrypts the shared key?</p>
","<p>Are you certain the TOTP <code>1773133250</code> is correct? Since your secret is only 32 bytes, do you know for sure that the provider that returned the <code>1773133250</code> is building the same 64 byte secret you are? </p>

<p>In your code you take your 32 byte secret and concatenate it together in order to get 64 bytes. </p>

<p>I am using <a href=""https://github.com/FusionAuth/fusionauth-2FA"" rel=""nofollow noreferrer"">FusionAuth-2FA</a> Java library, and I get the same result you do if I concatenate your 32 byte secret together to get a 64 byte secret. </p>

<p>I've read the RFC and it isn't clear to me that there is any requirement for an implementor to expand a secret to a particular byte size. </p>

<p>It could be your code is correct, and <code>1773133250</code> is a red hearing.  </p>

<p>Here is my test code:</p>

<pre><code>@Test
public void stackOverflow_42546493() {
  // Mon, 17 Mar 2014 15:20:51 GMT
  ZonedDateTime date = ZonedDateTime.of(2014, 3, 17, 15, 20, 51, 0, ZoneId.of(""GMT""));
  long seconds = date.toEpochSecond();
  assert seconds == 1395069651L; 
  long timeStep = seconds / 30;

  // Your shared key in a 32 byte string  
  String rawSecret = ""ninja@example.comHDECHALLENGE003"";
  String rawSecret64 = rawSecret + rawSecret; // 64 bytes

  // Using 32 byte secret
  String code = TwoFactor.calculateVerificationCode(rawSecret, timeStep, Algorithm.HmacSHA512, 10);
  assert code.equals(""1264436375"");

  // Using 64 byte secret
  String code = TwoFactor.calculateVerificationCode(rawSecret64, timeStep, Algorithm.HmacSHA512, 10);
  assert code.equals(""0490867067"");
}
</code></pre>
","53890462","5493","<java><encryption><hmac><password-encryption><one-time-password>","7","0","1","2018-12-21 20:27:15","","13","2","-1","","2017-06-12 10:53:22","2017-03-02 03:47:13","","","2018-12-21 20:27:15"
"362461","Why would HMAC SHA-1 return a different digest with the same input?","<p>I am trying to build a working encrypted signature for the Amazon S3 web service, writing a connection library using Objective C. </p>

<p>I have run into HMAC SHA-1 digest problems with the ObjC code, so I'm putting that to the side and looking at existing, working Perl code, to try to troubleshoot digest creation.</p>

<p>I am testing HMAC SHA-1 digest output from the <code>s3ls</code> command of the <code>Net::Amazon::S3</code> package and comparing that against the <code>_encode</code> subroutine that I pulled out and put into its own perl script:</p>

<pre><code>#!/usr/bin/perl -w                                                                                                                                                                                    

use MIME::Base64 qw(encode_base64);
use Digest::HMAC_SHA1;
use String::Escape qw( printable unprintable );

sub _ascii_to_hex {
    (my $str = shift) =~ s/(.|\n)/sprintf(""%02lx"", ord $1)/eg;
    return $str;
}

sub _encode {
    my ( $aws_secret_access_key, $str ) = @_;
    print ""secret key hex: ""._ascii_to_hex($aws_secret_access_key).""\n"";
    my $hmac = Digest::HMAC_SHA1-&gt;new($aws_secret_access_key);
    $hmac-&gt;add($str);
    my $digest = $hmac-&gt;digest;
    print ""cleartext hex: ""._ascii_to_hex($str).""\n"";
    print ""digest hex: ""._ascii_to_hex($digest).""\n"";
    my $b64 = encode_base64( $digest, '' );
    print ""encoded: "".$b64.""\n"";
}

my $secret = ""abcd1234"";
my $cleartext = ""GET\n\n\nFri, 12 Dec 2008 10:08:51 GMT+00:00\n/"";
_encode($secret, $cleartext);
</code></pre>

<p>Here is sample output from this script:</p>

<pre><code>$ ./testhmac.pl 
secret key hex: 6162636431323334
cleartext hex: 4745540a0a0a4672692c2031322044656320323030382031303a30383a353120474d542b30303a30300a2f
digest hex: 63308f9b8a198440d6d8685a3f3f70d0aab02f68
encoded: YzCPm4oZhEDW2GhaPz9w0KqwL2g=
</code></pre>

<p>What I am testing is that, if I input the same secret key and cleartext into the same <code>_encode</code> function of the <code>Net::Amazon::S3</code> package, I should see the very same secret key, cleartext, and digest bytes.</p>

<p>Indeed, I get the same bytes for the secret key and cleartext.</p>

<p>But I get something different for the digest (and of course the base64 encoding), e.g.:</p>

<pre><code>$ s3ls --access-key=foobar --secret-key=abcd1234
...
secret key hex: 6162636431323334
cleartext hex: 4745540a0a0a4672692c2031322044656320323030382031303a30383a353120474d542b30303a30300a2f
digest hex: c0da50050c451847de7ed055c5286de584527a22
encoded: wNpQBQxFGEfeftBVxSht5YRSeiI=
</code></pre>

<p>I have verified that the secret key and clear text are the same input to both scripts. The encoding subroutine is virtually identical in both scripts (except for an unused argument passed to the subroutine, which I remove from my custom version).</p>

<p>What would cause the HMAC SHA-1 digest to be computed differently in both cases, if the input bytes and <code>_encode</code> subroutine are the same?</p>

<p>(I have also verified the two scripts against the test cases at <a href=""http://www.faqs.org/rfcs/rfc2202.html"" rel=""nofollow noreferrer"">RFC 2201</a>.)</p>
","<p>I'm afraid I can't help much here, but there's definitely something wrong with what you posted. Your example script produces different output for me and the output you posted really cannot be correct.</p>

<p>How could this </p>

<pre><code>secret key hex: abcd...1234
</code></pre>

<p>ever be the result of that</p>

<pre><code>_ascii_to_hex(""blahblahblah"")
</code></pre>

<p>Of course, the whole ascii_to_hex thing is completely irrelevant to your problem, but it shows that you should double-check your results.</p>
","362501","5282","<perl><encryption><hmac><digest><sha1>","5","1","4","2008-12-12 21:10:00","362594","0","3","19410","Alex Reynolds","2008-12-12 13:01:58","2008-12-12 10:50:35","","","2008-12-12 11:26:22"
"362461","Why would HMAC SHA-1 return a different digest with the same input?","<p>I am trying to build a working encrypted signature for the Amazon S3 web service, writing a connection library using Objective C. </p>

<p>I have run into HMAC SHA-1 digest problems with the ObjC code, so I'm putting that to the side and looking at existing, working Perl code, to try to troubleshoot digest creation.</p>

<p>I am testing HMAC SHA-1 digest output from the <code>s3ls</code> command of the <code>Net::Amazon::S3</code> package and comparing that against the <code>_encode</code> subroutine that I pulled out and put into its own perl script:</p>

<pre><code>#!/usr/bin/perl -w                                                                                                                                                                                    

use MIME::Base64 qw(encode_base64);
use Digest::HMAC_SHA1;
use String::Escape qw( printable unprintable );

sub _ascii_to_hex {
    (my $str = shift) =~ s/(.|\n)/sprintf(""%02lx"", ord $1)/eg;
    return $str;
}

sub _encode {
    my ( $aws_secret_access_key, $str ) = @_;
    print ""secret key hex: ""._ascii_to_hex($aws_secret_access_key).""\n"";
    my $hmac = Digest::HMAC_SHA1-&gt;new($aws_secret_access_key);
    $hmac-&gt;add($str);
    my $digest = $hmac-&gt;digest;
    print ""cleartext hex: ""._ascii_to_hex($str).""\n"";
    print ""digest hex: ""._ascii_to_hex($digest).""\n"";
    my $b64 = encode_base64( $digest, '' );
    print ""encoded: "".$b64.""\n"";
}

my $secret = ""abcd1234"";
my $cleartext = ""GET\n\n\nFri, 12 Dec 2008 10:08:51 GMT+00:00\n/"";
_encode($secret, $cleartext);
</code></pre>

<p>Here is sample output from this script:</p>

<pre><code>$ ./testhmac.pl 
secret key hex: 6162636431323334
cleartext hex: 4745540a0a0a4672692c2031322044656320323030382031303a30383a353120474d542b30303a30300a2f
digest hex: 63308f9b8a198440d6d8685a3f3f70d0aab02f68
encoded: YzCPm4oZhEDW2GhaPz9w0KqwL2g=
</code></pre>

<p>What I am testing is that, if I input the same secret key and cleartext into the same <code>_encode</code> function of the <code>Net::Amazon::S3</code> package, I should see the very same secret key, cleartext, and digest bytes.</p>

<p>Indeed, I get the same bytes for the secret key and cleartext.</p>

<p>But I get something different for the digest (and of course the base64 encoding), e.g.:</p>

<pre><code>$ s3ls --access-key=foobar --secret-key=abcd1234
...
secret key hex: 6162636431323334
cleartext hex: 4745540a0a0a4672692c2031322044656320323030382031303a30383a353120474d542b30303a30300a2f
digest hex: c0da50050c451847de7ed055c5286de584527a22
encoded: wNpQBQxFGEfeftBVxSht5YRSeiI=
</code></pre>

<p>I have verified that the secret key and clear text are the same input to both scripts. The encoding subroutine is virtually identical in both scripts (except for an unused argument passed to the subroutine, which I remove from my custom version).</p>

<p>What would cause the HMAC SHA-1 digest to be computed differently in both cases, if the input bytes and <code>_encode</code> subroutine are the same?</p>

<p>(I have also verified the two scripts against the test cases at <a href=""http://www.faqs.org/rfcs/rfc2202.html"" rel=""nofollow noreferrer"">RFC 2201</a>.)</p>
","<p>I find the the main problems I have had with hashes in comparisons are:</p>

<ol>
<li>ensure the data and key are the same in both comparisons</li>
<li>ensure the data and key are in the same character encoding in both comparisons</li>
<li>ensure the key and text are being passed the same in both scripts, i.e. which one is key and which one is text (this has caught me more than once).</li>
</ol>

<p>Try using the Digest::SHA module to create the hash for you and compare the results with that.</p>

<pre><code>use Digest::SHA qw(hmac_sha1_hex);
my $hash = hmac_sha1_hex($data, $key);
</code></pre>

<p>See docs at <a href=""http://perldoc.perl.org/Digest/SHA.pdf"" rel=""nofollow noreferrer"">http://perldoc.perl.org/Digest/SHA.pdf</a></p>
","362594","5282","<perl><encryption><hmac><digest><sha1>","5","3","4","2008-12-12 21:10:00","362594","0","3","19410","Alex Reynolds","2008-12-12 13:01:58","2008-12-12 10:50:35","","","2008-12-12 12:16:44"
"362461","Why would HMAC SHA-1 return a different digest with the same input?","<p>I am trying to build a working encrypted signature for the Amazon S3 web service, writing a connection library using Objective C. </p>

<p>I have run into HMAC SHA-1 digest problems with the ObjC code, so I'm putting that to the side and looking at existing, working Perl code, to try to troubleshoot digest creation.</p>

<p>I am testing HMAC SHA-1 digest output from the <code>s3ls</code> command of the <code>Net::Amazon::S3</code> package and comparing that against the <code>_encode</code> subroutine that I pulled out and put into its own perl script:</p>

<pre><code>#!/usr/bin/perl -w                                                                                                                                                                                    

use MIME::Base64 qw(encode_base64);
use Digest::HMAC_SHA1;
use String::Escape qw( printable unprintable );

sub _ascii_to_hex {
    (my $str = shift) =~ s/(.|\n)/sprintf(""%02lx"", ord $1)/eg;
    return $str;
}

sub _encode {
    my ( $aws_secret_access_key, $str ) = @_;
    print ""secret key hex: ""._ascii_to_hex($aws_secret_access_key).""\n"";
    my $hmac = Digest::HMAC_SHA1-&gt;new($aws_secret_access_key);
    $hmac-&gt;add($str);
    my $digest = $hmac-&gt;digest;
    print ""cleartext hex: ""._ascii_to_hex($str).""\n"";
    print ""digest hex: ""._ascii_to_hex($digest).""\n"";
    my $b64 = encode_base64( $digest, '' );
    print ""encoded: "".$b64.""\n"";
}

my $secret = ""abcd1234"";
my $cleartext = ""GET\n\n\nFri, 12 Dec 2008 10:08:51 GMT+00:00\n/"";
_encode($secret, $cleartext);
</code></pre>

<p>Here is sample output from this script:</p>

<pre><code>$ ./testhmac.pl 
secret key hex: 6162636431323334
cleartext hex: 4745540a0a0a4672692c2031322044656320323030382031303a30383a353120474d542b30303a30300a2f
digest hex: 63308f9b8a198440d6d8685a3f3f70d0aab02f68
encoded: YzCPm4oZhEDW2GhaPz9w0KqwL2g=
</code></pre>

<p>What I am testing is that, if I input the same secret key and cleartext into the same <code>_encode</code> function of the <code>Net::Amazon::S3</code> package, I should see the very same secret key, cleartext, and digest bytes.</p>

<p>Indeed, I get the same bytes for the secret key and cleartext.</p>

<p>But I get something different for the digest (and of course the base64 encoding), e.g.:</p>

<pre><code>$ s3ls --access-key=foobar --secret-key=abcd1234
...
secret key hex: 6162636431323334
cleartext hex: 4745540a0a0a4672692c2031322044656320323030382031303a30383a353120474d542b30303a30300a2f
digest hex: c0da50050c451847de7ed055c5286de584527a22
encoded: wNpQBQxFGEfeftBVxSht5YRSeiI=
</code></pre>

<p>I have verified that the secret key and clear text are the same input to both scripts. The encoding subroutine is virtually identical in both scripts (except for an unused argument passed to the subroutine, which I remove from my custom version).</p>

<p>What would cause the HMAC SHA-1 digest to be computed differently in both cases, if the input bytes and <code>_encode</code> subroutine are the same?</p>

<p>(I have also verified the two scripts against the test cases at <a href=""http://www.faqs.org/rfcs/rfc2202.html"" rel=""nofollow noreferrer"">RFC 2201</a>.)</p>
","<p>Divide and conquer?</p>

<p>The test vectors in the RFC are the best place to start. Did they pass in both instances?  Which ones did you try?  If some work and others don't the most likely problem is that one of the two APIs are improperly marshalling the keys input (Signed vs unsigned arrays, charset conversions..etc)</p>

<p>As an aside its really difficult to help you when your example is nonsense.  As others mentioned the hex representation of blah blah is not abc..123.  Makes me wonder what else in your example is inaccurate?</p>
","362602","5282","<perl><encryption><hmac><digest><sha1>","5","1","4","2008-12-12 21:10:00","362594","0","3","19410","Alex Reynolds","2008-12-12 13:01:58","2008-12-12 10:50:35","","","2008-12-12 12:24:17"
"362461","Why would HMAC SHA-1 return a different digest with the same input?","<p>I am trying to build a working encrypted signature for the Amazon S3 web service, writing a connection library using Objective C. </p>

<p>I have run into HMAC SHA-1 digest problems with the ObjC code, so I'm putting that to the side and looking at existing, working Perl code, to try to troubleshoot digest creation.</p>

<p>I am testing HMAC SHA-1 digest output from the <code>s3ls</code> command of the <code>Net::Amazon::S3</code> package and comparing that against the <code>_encode</code> subroutine that I pulled out and put into its own perl script:</p>

<pre><code>#!/usr/bin/perl -w                                                                                                                                                                                    

use MIME::Base64 qw(encode_base64);
use Digest::HMAC_SHA1;
use String::Escape qw( printable unprintable );

sub _ascii_to_hex {
    (my $str = shift) =~ s/(.|\n)/sprintf(""%02lx"", ord $1)/eg;
    return $str;
}

sub _encode {
    my ( $aws_secret_access_key, $str ) = @_;
    print ""secret key hex: ""._ascii_to_hex($aws_secret_access_key).""\n"";
    my $hmac = Digest::HMAC_SHA1-&gt;new($aws_secret_access_key);
    $hmac-&gt;add($str);
    my $digest = $hmac-&gt;digest;
    print ""cleartext hex: ""._ascii_to_hex($str).""\n"";
    print ""digest hex: ""._ascii_to_hex($digest).""\n"";
    my $b64 = encode_base64( $digest, '' );
    print ""encoded: "".$b64.""\n"";
}

my $secret = ""abcd1234"";
my $cleartext = ""GET\n\n\nFri, 12 Dec 2008 10:08:51 GMT+00:00\n/"";
_encode($secret, $cleartext);
</code></pre>

<p>Here is sample output from this script:</p>

<pre><code>$ ./testhmac.pl 
secret key hex: 6162636431323334
cleartext hex: 4745540a0a0a4672692c2031322044656320323030382031303a30383a353120474d542b30303a30300a2f
digest hex: 63308f9b8a198440d6d8685a3f3f70d0aab02f68
encoded: YzCPm4oZhEDW2GhaPz9w0KqwL2g=
</code></pre>

<p>What I am testing is that, if I input the same secret key and cleartext into the same <code>_encode</code> function of the <code>Net::Amazon::S3</code> package, I should see the very same secret key, cleartext, and digest bytes.</p>

<p>Indeed, I get the same bytes for the secret key and cleartext.</p>

<p>But I get something different for the digest (and of course the base64 encoding), e.g.:</p>

<pre><code>$ s3ls --access-key=foobar --secret-key=abcd1234
...
secret key hex: 6162636431323334
cleartext hex: 4745540a0a0a4672692c2031322044656320323030382031303a30383a353120474d542b30303a30300a2f
digest hex: c0da50050c451847de7ed055c5286de584527a22
encoded: wNpQBQxFGEfeftBVxSht5YRSeiI=
</code></pre>

<p>I have verified that the secret key and clear text are the same input to both scripts. The encoding subroutine is virtually identical in both scripts (except for an unused argument passed to the subroutine, which I remove from my custom version).</p>

<p>What would cause the HMAC SHA-1 digest to be computed differently in both cases, if the input bytes and <code>_encode</code> subroutine are the same?</p>

<p>(I have also verified the two scripts against the test cases at <a href=""http://www.faqs.org/rfcs/rfc2202.html"" rel=""nofollow noreferrer"">RFC 2201</a>.)</p>
","<blockquote>
  <p>The encoding subroutine is virtually identical in both scripts (except for an unused argument passed to the subroutine, which I remove from my custom version).</p>
</blockquote>

<p>Since you're not comparing the digests themselves, but Base-64 encoded versions of the digests, I would recommend backing up one step and checking the digests themselves.  It may be possible that the Base-64 encoding routines are incorrect.</p>

<p>If you can't compare the digests themselves, then use the same encoding routine in both programs and see what you get.</p>
","364153","5282","<perl><encryption><hmac><digest><sha1>","5","2","4","2008-12-12 21:10:00","362594","0","3","19410","Alex Reynolds","2008-12-12 13:01:58","2008-12-12 10:50:35","","","2008-12-12 21:10:00"
"12545811","Using HMAC vs EVP functions in OpenSSL","<p>This is a very basic question, but what is the difference between EVP and HMAC? EVP is a message digest, but how does that differ from what is generated by HMAC?</p>
","<blockquote>
  <p>... what is the difference between EVP and HMAC</p>
</blockquote>

<p><code>EVP_*</code> functions are a high level interface. <code>HMAC_*</code>, <code>AES_*</code> and friends are lower level primitives. You can work with either, but its recommended you work with the <code>EVP_*</code> functions. The <code>HMAC_*</code> routines are software based and don't use hardware.</p>

<p>The <code>EVP_*</code> functions will allow you to easily swap in different hashes and the code essentially remains the same. And you will take advantage of hardware acceleration, like AES-NI for an AES-CMAC, if available.</p>

<p>Here's an OpenSSL example based on <a href=""https://www.openssl.org/docs/crypto/EVP_DigestInit.html"" rel=""nofollow"">https://www.openssl.org/docs/crypto/EVP_DigestInit.html</a>.</p>

<pre><code>EVP_MD_CTX* mdctx = NULL;
const EVP_MD* md = NULL;

unsigned char md_value[EVP_MAX_MD_SIZE];
int md_len = 0;

char message[] = ""Now is the time for all good men to ""
    ""come to the aide of their country\n"";

OpenSSL_add_all_digests();

md = EVP_get_digestbyname(""SHA1"");
mdctx = EVP_MD_CTX_create();

if(!EVP_DigestInit_ex(mdctx, md, NULL))
    handleError();

if(!EVP_DigestUpdate(mdctx, message, strlen(message)))
    handleError();

if(!EVP_DigestFinal_ex(mdctx, md_value, &amp;md_len))
    handleError();

if(!EVP_MD_CTX_destroy(mdctx))
    handleError();

printf(""Digest is: "");
for(int i = 0; i &lt; md_len; i++)
    printf(""%02x"", md_value[i]);
printf(""\n"");
</code></pre>

<p>Now, and HMAC is slightly different than a Hash. The HMAC is a keyed hash, while the hash is not keyed. You can also use the <code>EVP_*</code> functions for HMAC'ing. Below is from the OpenSSL's wiki page <a href=""http://wiki.openssl.org/index.php/EVP_Signing_and_Verifying"" rel=""nofollow"">EVP Signing and Verifying</a>:</p>

<pre><code>EVP_MD_CTX* mdctx = NULL;
const EVP_MD* md = NULL;
EVP_PKEY *pkey = NULL;

unsigned char md_value[EVP_MAX_MD_SIZE];   
int md_len = 0;

char message[] = ""Now is the time for all good men to ""
    ""come to the aide of their country\n"";

OpenSSL_add_all_digests();

if(!(mdctx = EVP_MD_CTX_create()))
    handleError();

if(!(md = EVP_get_digestbyname(""SHA1"")))
    handleError();

if(!(pkey = EVP_PKEY_new_mac_key(EVP_PKEY_HMAC, NULL, ""password"", strlen(""password""))))
    handleError();

if(1 != EVP_DigestSignInit(mdctx, NULL, md, NULL, pkey))
    handleError();

/* Call update with the message */
if(1 != EVP_DigestSignUpdate(mdctx, message, strlen(message)))
    handleError();

if(1 != EVP_DigestSignFinal(mdctx, md_value, &amp;md_len))
    handleError();

printf(""HMAC is: "");
for(int i = 0; i &lt; md_len; i++)
    printf(""%02x"", md_value[i]);
printf(""\n"");
</code></pre>

<p>The low level interface would look similar to:</p>

<pre><code>EVP_MD_CTX* mdctx = NULL;
const EVP_MD* md = NULL;

unsigned char md_value[EVP_MAX_MD_SIZE];
int md_len = 0;

char message[] = ""Now is the time for all good men to ""
""come to the aide of their country\n"";

OpenSSL_add_all_digests();

md = EVP_get_digestbyname(""SHA1"");
mdctx = EVP_MD_CTX_create();

if(!HMAC_Init_ex(mdctx, key, sizeof(key), md, NULL))
    handleError();

if(!HMAC_Update(mdctx, message, strlen(message)))
    handleError();

if(!HMAC_Final(mdctx, md_value, &amp;md_len))
    handleError();

if(!HMAC_CTX_cleanup(mdctx))
    handleError();

printf(""HMAC is: "");
for(int i = 0; i &lt; md_len; i++)
    printf(""%02x"", md_value[i]);
printf(""\n"");
</code></pre>
","20322002","5160","<c><openssl><hmac>","6","5","2","2015-06-12 08:20:01","","0","1","608639","","2015-06-12 08:20:01","2012-09-22 16:50:31","","2015-06-12 08:19:27","2013-12-02 06:18:30"
"12545811","Using HMAC vs EVP functions in OpenSSL","<p>This is a very basic question, but what is the difference between EVP and HMAC? EVP is a message digest, but how does that differ from what is generated by HMAC?</p>
","<p>You need to use EVP_PKEY_new_mac_key function in order to obtain the right key structure for HMAC. And don't forget to free it with EVP_PKEY_free.</p>
","28564277","5160","<c><openssl><hmac>","6","1","2","2015-06-12 08:20:01","","0","1","608639","","2015-06-12 08:20:01","2012-09-22 16:50:31","","","2015-02-17 14:56:16"
"13019203","How can I calculate an AWS API signature (v4) in python?","<p>I'm attempting to generate a signature for an Amazon Glacier upload request, using the <a href=""http://docs.amazonwebservices.com/amazonglacier/latest/dev/amazon-glacier-signing-requests.html#example-signature-calculation"">example requests</a> and <a href=""http://docs.amazonwebservices.com/general/latest/gr/signature-v4-examples.html#signature-v4-examples-python"">example functions</a> provided by the AWS documentation, but I can't make it work. At this point, I'm certain I'm missing something incredibly obvious:</p>

<pre><code>#!/bin/env python

import hmac
import hashlib

# This string to sign taken from: http://docs.amazonwebservices.com/amazonglacier/latest/dev/amazon-glacier-signing-requests.html#example-signature-calculation
sts = """"""AWS4-HMAC-SHA256
20120525T002453Z
20120525/us-east-1/glacier/aws4_request
5f1da1a2d0feb614dd03d71e87928b8e449ac87614479332aced3a701f916743""""""

# These two functions taken from: http://docs.amazonwebservices.com/general/latest/gr/signature-v4-examples.html#signature-v4-examples-python
def sign(key, msg):
    return hmac.new(key, msg.encode('utf-8'), hashlib.sha256).hexdigest()

# The fake secret key is provided by the referenced docs
def getSignatureKey():
    kDate = sign((""AWS4"" + ""wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY"").encode('utf-8'), ""20120525"")
    kRegion = sign(kDate, ""us-east-1"")
    kService = sign(kRegion, ""glacier"")
    kSigning = sign(kService, ""aws4_request"")
    return kSigning

signature = sign(getSignatureKey(), sts)
print signature
</code></pre>

<p>If I run my program, I get the following hash:</p>

<pre><code>$ python test.py
3431315da57da4df28f92895c75364d94b36c745896ad3e580c0a6ae403b1e05
</code></pre>

<p>Yet the docs clearly state:</p>

<blockquote>
  <p>If the secret access key, wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY, is used, then the calculated signature is:</p>
  
  <p>3ce5b2f2fffac9262b4da9256f8d086b4aaf42eba5f111c21681a65a127b7c2a</p>
</blockquote>

<p>What am I missing? </p>
","<p>Your function differs from theirs in one respect. You're doing </p>

<pre><code>def sign(key, msg):
  return hmac.new(key, msg.encode('utf-8'), hashlib.sha256).hexdigest()
</code></pre>

<p>but they're doing</p>

<pre><code>def sign(key, msg):
  return hmac.new(key, msg.encode('utf-8'), hashlib.sha256).digest()
</code></pre>

<p>So your derived key is wrong. You only want to be using hexdigest at the last step of the process, not when calculating the signing key.</p>
","13020921","5113","<python><amazon-web-services><hmac><amazon-glacier>","8","6","1","2012-10-22 22:35:05","13020921","0","1","","","","2012-10-22 20:21:03","","","2012-10-22 22:35:05"
"10628771","Decryption in PHP","<p>I am trying to decrypt data being communicated to our server. Its a certain 8 digit number which is encrypted using a scheme. I have the encryption and integrity keys with me. I have a documentation on how to decrypt it which says -</p>

<blockquote>
  <p>The value is encrypted using a custom encryption scheme. The
  encryption scheme uses a keyed HMAC-SHA1 algorithm to generate a
  secret pad based on the unique event ID. The encrypted value has a
  fixed length of 28 bytes. It is comprised of a 16-byte initialization
  vector, 8 bytes of ciphertext, and a 4-byte integrity signature. The
  encrypted value is web-safe base-64-encoded, according to RFC 3548,
  with padding characters omitted. Thus, the 28-byte encrypted value is
  encoded as a 38 character web-safe base-64 string. The value is
  encrypted as:</p>
  
  <p>value xor HMAC-SHA1(encryption_key, initialization_vector)></p>
  
  <p>so decryption calculates:</p>
  
  <p>HMAC-SHA1(encryption_key, initialization_vector)</p>
  
  <p>and xor's with the encrypted value to reverse the encryption. The
  integrity stage takes 4 bytes of</p>
  
  <p>HMAC-SHA1(integrity_key, value||initialization_vector)></p>
  
  <p>where || is concatenation.</p>
</blockquote>

<p>So i wrote the following PHP Code.</p>

<pre><code>$value= ""[VALUE]""; //38 character base64
$ekey=hextostr(""[ENCRYPTIONKEY]""); //64 byte hex encoded key . 32 byte key
$ikey=hextostr(""[INTEGRITYKEY]""); //64 byte hex encoded key . 32 byte key

$value=str_replace(""-"",""+"",$value);
$value=str_replace(""_"",""/"",$value);
$value=$value.""=="";
$dvalue=base64_decode($value); //Gets a 28 byte encrypted string.

$initvec=substr($dvalue,0,16);
$ciphertext=substr($dvalue,16,8);
$integritysig=substr($dvalue,24,4);

$pad=hash_hmac(""sha1"",$initvec,$ekey);    //Generates 40 byte pad

$uncipher=$ciphertext^$pad;

print($uncipher); //This is 8 byte binary. Dumps some binary on screen. Result should be a 8 byte number
</code></pre>

<p>Unable to get around this problem. Please advice.</p>
","<pre><code>$pad=hash_hmac(""sha1"",$initvec,$ekey); // returns a hexstring, but XOR interprets
                                       // as ASCII string and converts to binary
                                       // accordingly

$ciphertext=substr($dvalue,16,8); // this is ASCII, converted to binary by XOR

$uncipher=$ciphertext^$pad; // so the XOR operation is confused in interpretation.
</code></pre>

<p>try changing it to,</p>

<pre><code>function bin2asc($in)#syntax - bin2asc(""binary to convert"");
{
  $out = '';
  for ($i = 0, $len = strlen($in); $i &lt; $len; $i += 8)
  {
    $out .= chr(bindec(substr($in,$i,8)));
  }
  return $out; 
}

$pad= hash_hmac(""sha1"",$initvec,$ekey, true); // now it will return in binary 
$pad = bin2asc($pad);

$uncipher=$ciphertext^$pad;
</code></pre>

<p>hope this solve your problem.</p>
","10634090","5050","<php><encryption><sha1><hmac>","2","1","3","2016-04-25 14:33:33","10634090","3","","1064748","","2012-05-17 01:34:00","2012-05-17 01:21:29","","2012-05-17 11:20:28","2012-05-17 10:34:56"
"10628771","Decryption in PHP","<p>I am trying to decrypt data being communicated to our server. Its a certain 8 digit number which is encrypted using a scheme. I have the encryption and integrity keys with me. I have a documentation on how to decrypt it which says -</p>

<blockquote>
  <p>The value is encrypted using a custom encryption scheme. The
  encryption scheme uses a keyed HMAC-SHA1 algorithm to generate a
  secret pad based on the unique event ID. The encrypted value has a
  fixed length of 28 bytes. It is comprised of a 16-byte initialization
  vector, 8 bytes of ciphertext, and a 4-byte integrity signature. The
  encrypted value is web-safe base-64-encoded, according to RFC 3548,
  with padding characters omitted. Thus, the 28-byte encrypted value is
  encoded as a 38 character web-safe base-64 string. The value is
  encrypted as:</p>
  
  <p>value xor HMAC-SHA1(encryption_key, initialization_vector)></p>
  
  <p>so decryption calculates:</p>
  
  <p>HMAC-SHA1(encryption_key, initialization_vector)</p>
  
  <p>and xor's with the encrypted value to reverse the encryption. The
  integrity stage takes 4 bytes of</p>
  
  <p>HMAC-SHA1(integrity_key, value||initialization_vector)></p>
  
  <p>where || is concatenation.</p>
</blockquote>

<p>So i wrote the following PHP Code.</p>

<pre><code>$value= ""[VALUE]""; //38 character base64
$ekey=hextostr(""[ENCRYPTIONKEY]""); //64 byte hex encoded key . 32 byte key
$ikey=hextostr(""[INTEGRITYKEY]""); //64 byte hex encoded key . 32 byte key

$value=str_replace(""-"",""+"",$value);
$value=str_replace(""_"",""/"",$value);
$value=$value.""=="";
$dvalue=base64_decode($value); //Gets a 28 byte encrypted string.

$initvec=substr($dvalue,0,16);
$ciphertext=substr($dvalue,16,8);
$integritysig=substr($dvalue,24,4);

$pad=hash_hmac(""sha1"",$initvec,$ekey);    //Generates 40 byte pad

$uncipher=$ciphertext^$pad;

print($uncipher); //This is 8 byte binary. Dumps some binary on screen. Result should be a 8 byte number
</code></pre>

<p>Unable to get around this problem. Please advice.</p>
","<p>Your posted code should look like this</p>

<pre><code>$value= ""[VALUE]""; //38 character base64
$ekey=hextostr(""[ENCRYPTIONKEY]""); //64 byte hex encoded key . 32 byte key
$ikey=hextostr(""[INTEGRITYKEY]""); //64 byte hex encoded key . 32 byte key

$value=str_replace(""-"",""+"",$value);
$value=str_replace(""_"",""/"",$value);
$value=$value.""=="";
$dvalue=base64_decode($value); //Gets a 28 byte encrypted string.

$initvec=substr($dvalue,0,16);
$ciphertext=substr($dvalue,16,8);
$integritysig=substr($dvalue,24,4);

//here is the change
$pad=hash_hmac(""sha1"",$initvec,$ekey, true);

$uncipher=$ciphertext^$pad;

print(hexdec(strToHex($uncipher))); //This is 8 byte binary. Dumps some binary on screen. Result should be a 8 byte number
</code></pre>
","10803596","5050","<php><encryption><sha1><hmac>","2","1","3","2016-04-25 14:33:33","10634090","3","","1064748","","2012-05-17 01:34:00","2012-05-17 01:21:29","","","2012-05-29 17:03:58"
"10628771","Decryption in PHP","<p>I am trying to decrypt data being communicated to our server. Its a certain 8 digit number which is encrypted using a scheme. I have the encryption and integrity keys with me. I have a documentation on how to decrypt it which says -</p>

<blockquote>
  <p>The value is encrypted using a custom encryption scheme. The
  encryption scheme uses a keyed HMAC-SHA1 algorithm to generate a
  secret pad based on the unique event ID. The encrypted value has a
  fixed length of 28 bytes. It is comprised of a 16-byte initialization
  vector, 8 bytes of ciphertext, and a 4-byte integrity signature. The
  encrypted value is web-safe base-64-encoded, according to RFC 3548,
  with padding characters omitted. Thus, the 28-byte encrypted value is
  encoded as a 38 character web-safe base-64 string. The value is
  encrypted as:</p>
  
  <p>value xor HMAC-SHA1(encryption_key, initialization_vector)></p>
  
  <p>so decryption calculates:</p>
  
  <p>HMAC-SHA1(encryption_key, initialization_vector)</p>
  
  <p>and xor's with the encrypted value to reverse the encryption. The
  integrity stage takes 4 bytes of</p>
  
  <p>HMAC-SHA1(integrity_key, value||initialization_vector)></p>
  
  <p>where || is concatenation.</p>
</blockquote>

<p>So i wrote the following PHP Code.</p>

<pre><code>$value= ""[VALUE]""; //38 character base64
$ekey=hextostr(""[ENCRYPTIONKEY]""); //64 byte hex encoded key . 32 byte key
$ikey=hextostr(""[INTEGRITYKEY]""); //64 byte hex encoded key . 32 byte key

$value=str_replace(""-"",""+"",$value);
$value=str_replace(""_"",""/"",$value);
$value=$value.""=="";
$dvalue=base64_decode($value); //Gets a 28 byte encrypted string.

$initvec=substr($dvalue,0,16);
$ciphertext=substr($dvalue,16,8);
$integritysig=substr($dvalue,24,4);

$pad=hash_hmac(""sha1"",$initvec,$ekey);    //Generates 40 byte pad

$uncipher=$ciphertext^$pad;

print($uncipher); //This is 8 byte binary. Dumps some binary on screen. Result should be a 8 byte number
</code></pre>

<p>Unable to get around this problem. Please advice.</p>
","<p>Try this</p>

<pre><code>function decrypt_google_winning_price($value, $ekey, $ikey, &amp;$reason = '') {
if (strlen($value) != 38)
{
    $reason = ""Wrong encrypted value length"";
    return false;
}

$ekey = base64_decode($ekey);
$ikey = base64_decode($ikey);
$value = strtr($value, '-_,', '+/=') . ""=="";
$enc_value = base64_decode($value); //Gets a 28 byte encrypted string.
if (strlen($enc_value) != 28)
{
    $reason = ""Wrong encrypted value length after base64_decode()"";
    return false;
}

$iv = substr($enc_value, 0, 16);// initialization vector (16 bytes - unique to the impression)
$p = substr($enc_value, 16, 8); // encryption key (32 bytes - provided at account set up)
$sig = substr($enc_value, 24, 4);// integrity signature (4 bytes)
$price_pad = hash_hmac(""sha1"", $iv, $ekey, true);
$price = $p ^ $price_pad;// XOR

$conf_sig = substr(hex2bin(hash_hmac(""sha1"", $price . $iv, $ikey)), 0, 4);

if ($sig !== $conf_sig)
{
    $reason = ""Signature is not valid"";
    return false;
}

return  hexdec(bin2hex($price)); //This is 8 byte binary. Dumps some binary on screen. Result should be a 8 byte number
}


$value = ""[VALUE]""; //38 character base64
$ekey = ""[ENCRYPTIONKEY]""; //64 byte hex encoded key . 32 byte key
$ikey ""[INTEGRITYKEY]""; //64 byte hex encoded key . 32 byte key

var_dump(decrypt_google_winning_price($value, $ekey, $ikey));
</code></pre>
","36843588","5050","<php><encryption><sha1><hmac>","2","1","3","2016-04-25 14:33:33","10634090","3","","1064748","","2012-05-17 01:34:00","2012-05-17 01:21:29","","","2016-04-25 14:33:33"
"17131704","how to get Hmac code with javascript","<p>I can get a hmac sing using Python as following:</p>

<pre><code>import hmac, base64, hashlib

def make_sign():
    hash_data = ""data""
    secret = ""this is secret""
    sha512 = hashlib.sha512
    hmac_obj = hmac.new(secret, hash_data, sha512)
    str_hash = hmac_obj.digest()
    sign = base64.b64encode(str_hash)
    hex_hash = hmac_obj.hexdigest()
    hex_sign = base64.b64encode(hex_hash)
    print ""correct_sign:"",sign
    print ""hex_digest_sign:"",hex_sign
make_sign()
</code></pre>

<p>output:</p>

<pre><code>correct_sign: Lg4pXNCIpitNQt2DLU19qWb+FxdsYZlK4LLncfkTzSidrYoFJLNolUziRqh09B5HyRdCTEP7enZp6/Te34FK1g==
hex_digest_sign: MmUwZTI5NWNkMDg4YTYyYjRkNDJkZDgzMmQ0ZDdkYTk2NmZlMTcxNzZjNjE5OTRhZTBiMmU3NzFmOTEzY2QyODlkYWQ4YTA1MjRiMzY4OTU0Y2UyNDZhODc0ZjQxZTQ3YzkxNzQyNGM0M2ZiN2E3NjY5ZWJmNGRlZGY4MTRhZDY=
</code></pre>

<p>but with js, I can get hex_digest_sign, but I need to get correct_sign for web request.</p>

<pre><code>function make_request() {
    hash_data = ""data""
    secret = ""this is secret""
    hmac = hmac_512(hash_data, secret)
    var sign = $.base64.encode(hmac),
    console.log(""js_sign=""+sign);
}

function hmac_512(message, secret) {
    var hmac = CryptoJS.algo.HMAC.create(CryptoJS.algo.SHA512, secret);
    hmac.update(message);
    var hash = hmac.finalize();
    return hash;
}
</code></pre>

<p>js output:</p>

<pre><code>js_sign=""MmUwZTI5NWNkMDg4YTYyYjRkNDJkZDgzMmQ0ZDdkYTk2NmZlMTcxNzZjNjE5OTRhZTBiMmU3NzFmOTEzY2QyODlkYWQ4YTA1MjRiMzY4OTU0Y2UyNDZhODc0ZjQxZTQ3YzkxNzQyNGM0M2ZiN2E3NjY5ZWJmNGRlZGY4MTRhZDY=""
</code></pre>

<p>the correct sign is <pre>correct_sign: Lg4pXNCIpitNQt2DLU19qWb+FxdsYZlK4LLncfkTzSidrYoFJLNolUziRqh09B5HyRdCTEP7enZp6/Te34FK1g==</pre></p>

<p>how to get it in js?</p>
","<p>I suspect that you are running into trouble with types and encoding. According to the <a href=""https://code.google.com/p/crypto-js/source/browse/tags/3.1.2/src/hmac.js"" rel=""nofollow"">CryptoJS source</a>, the iterative hashing style that you are using returns a <em>WordArray</em> once you call <em>finalize()</em>. </p>

<p>With that, once you go to print the results, you are printing the contents of the <em>WordArray</em>. </p>

<p>The purpose for itterative hashing is typically if you have a large input, you can break it into chunks to work on one piece at a time. Try the below edit I made that removes this as it does not look like you need to iterate.</p>

<pre><code>function hmac_512(message, secret) {
var newHMAC = CryptoJS.HmacSHA256(message, secret);
    return newHMAC;
}
</code></pre>

<p>The above will simply return the HMAC in string form which, once Base64 encoded, should match the result you see in Python. </p>

<p>For a working example, you can check out my Google drive encryption service that uses the cryptoJS HMAC. <a href=""http://meowcrypt.com/"" rel=""nofollow"">http://meowcrypt.com/</a></p>

<p>Hope this helps! </p>
","30989872","4946","<javascript><jquery><hmac><sha512>","2","0","1","2015-06-22 21:09:49","","0","","","","","2013-06-16 09:07:26","","","2015-06-22 21:09:49"
"40734309","MIGS Online Payments SHA256 HMAC Error","<p>I've been told by Bendigo Bank that we need to change md5 to SHA256. I've followed their instructions and I am getting this error:</p>

<pre><code>HTTP Status - 400
E5000: Cannot form a matching secure hash based on the merchant's request using either of the two merchant's secrets
</code></pre>

<p>Their <strong>example</strong> code is this:</p>

<pre><code>&lt;?php foreach($_POST as $key =&gt; $value) {
    if (strlen($value) &gt; 0) { ?&gt;
            &lt;input type=""hidden"" name=""&lt;?php echo($key); ?&gt;"" value=""&lt;?php echo($value); ?&gt;""/&gt;&lt;br&gt;
    &lt;?php           
        if ((strlen($value) &gt; 0) &amp;&amp; ((substr($key, 0,4)==""vpc_"") || (substr($key,0,5) ==""user_""))) {
            $hashinput .= $key . ""="" . $value . ""&amp;"";
        }
    }
}
$hashinput = rtrim($hashinput,""&amp;"");
?&gt;
&lt;!-- attach SecureHash --&gt;
&lt;input type=""hidden"" name=""vpc_SecureHash"" value=""&lt;?php echo(strtoupper(hash_hmac('SHA256', $hashinput, pack('H*',$securesecret)))); ?&gt;""/&gt;
&lt;input type=""hidden"" name=""vpc_SecureHashType"" value=""SHA256""&gt;
</code></pre>

<p><strong>And this is my post:</strong></p>

<pre><code>Array (
    [AgainLink] =&gt; http://fallscreekcountryclub.com.au/make-a-booking/submit-booking.html
    [b_terms] =&gt; 1
    [chargetypeid] =&gt; 33
    [deposit] =&gt; 580.00
    [notes] =&gt; 4 Nights - 26/11/2016 to 30/11/2016
    [propertyid] =&gt; 2
    [total] =&gt; 580.00
    [vpc_AccessCode] =&gt; 903876BC
    [vpc_Amount] =&gt; 58000
    [vpc_Command] =&gt; pay
    [vpc_Locale] =&gt; en
    [vpc_MerchTxnRef] =&gt; 1479746896
    [vpc_Merchant] =&gt; BBL5800396
    [vpc_OrderInfo] =&gt; Studio Deluxe
    [vpc_ReturnURL] =&gt; http://fallscreekcountryclub.com.au/make-a-booking/booking-complete.html
    [vpc_Version] =&gt; 1
)
</code></pre>

<p><strong>And this is my code:</strong></p>

<pre><code>        $appendAmp = 0;
        $isencoded = '';
        $notencoded = '';
        foreach($_POST as $key =&gt; $value) {
            if (strlen($value) &gt; 0) {
                if ($appendAmp == 0) :
                    $notencoded     .= $key . '=' . $value;
                    $isencoded      .= urlencode($key) . '=' . urlencode($value);
                    $appendAmp       = 1;
                else :
                    $notencoded     .= '&amp;' . $key . '=' . $value;
                    $isencoded      .= '&amp;' . urlencode($key) . '=' . urlencode($value);
                endif;
            }
        }

        if (strlen($SECURE_SECRET) &gt; 0) {
            #$vpcURL .= ""&amp;vpc_SecureHash="" . strtoupper(md5($md5HashData));
            $SecureHash     = strtoupper(hash_hmac('SHA256',$notencoded,pack('H*',$SECURE_SECRET)));
            $SecureHashType = 'SHA256';
        }
        $vpcURL .= $notencoded.'&amp;vpc_SecureHash='.$SecureHash.'&amp;vpc_SecureHashType='.$SecureHashType;
</code></pre>

<p>I have ""isencoded"" and ""notencoded"" because I've seen people say to <strong>not</strong> urlencode the string for vpc_ReturnURL until I build the vpcURL, but neither works.</p>

<p><strong>The urlencoded version of the vpcURL is:</strong></p>

<pre><code>https://migs.mastercard.com.au/vpcpay?AgainLink=http%3A%2F%2Ffallscreekcountryclub.com.au%2Fmake-a-booking%2Fsubmit-booking.html&amp;b_terms=1&amp;chargetypeid=33&amp;deposit=580.00&amp;notes=4+Nights+-+26%2F11%2F2016+to+30%2F11%2F2016&amp;propertyid=2&amp;total=580.00&amp;vpc_AccessCode=903876BC&amp;vpc_Amount=58000&amp;vpc_Command=pay&amp;vpc_Locale=en&amp;vpc_MerchTxnRef=1479746896&amp;vpc_Merchant=BBL5800396&amp;vpc_OrderInfo=Studio+Deluxe&amp;vpc_ReturnURL=http%3A%2F%2Ffallscreekcountryclub.com.au%2Fmake-a-booking%2Fbooking-complete.html&amp;vpc_Version=1&amp;vpc_SecureHash=A5BA6503FC7A169A90C9AAC7039878F45D761180D874789172EB5A58298022E4&amp;vpc_SecureHashType=SHA256 
</code></pre>

<p><strong>And the non urlencoded version is:</strong></p>

<pre><code>https://migs.mastercard.com.au/vpcpay?AgainLink=http://fallscreekcountryclub.com.au/make-a-booking/submit-booking.html&amp;b_terms=1&amp;chargetypeid=33&amp;deposit=580.00&amp;notes=4 Nights - 26/11/2016 to 30/11/2016&amp;propertyid=2&amp;total=580.00&amp;vpc_AccessCode=903876BC&amp;vpc_Amount=58000&amp;vpc_Command=pay&amp;vpc_Locale=en&amp;vpc_MerchTxnRef=1479746896&amp;vpc_Merchant=BBL5800396&amp;vpc_OrderInfo=Studio Deluxe&amp;vpc_ReturnURL=http://fallscreekcountryclub.com.au/make-a-booking/booking-complete.html&amp;vpc_Version=1&amp;vpc_SecureHash=A5BA6503FC7A169A90C9AAC7039878F45D761180D874789172EB5A58298022E4&amp;vpc_SecureHashType=SHA256 
</code></pre>

<p>Any ideas on what I've done wrong?? I called the bank, and they couldn't help me, they had no idea what I was even talking about..</p>

<p>I know the $SECURE_SECRET number is correct, as it's the same number I've used for the original md5 hash. So the problem lays with the sha256 hash, and I'm not sure why, or how to fix it.</p>
","<p>try to exclude  vpc_SecureHash and vpc_SecureHashType from the strings that get hashed. Here is the code snippet </p>

<p><a href=""https://gist.github.com/lucasnetau/bcacb528d664f0ad1339086c1a585021"" rel=""nofollow noreferrer"">https://gist.github.com/lucasnetau/bcacb528d664f0ad1339086c1a585021</a></p>

<p>Let me know if it works..</p>
","40736892","4894","<php><payment-gateway><sha256><hmac>","3","0","3","2017-03-25 15:33:13","40779058","0","1","","","","2016-11-22 05:21:17","","","2016-11-22 08:22:15"
"40734309","MIGS Online Payments SHA256 HMAC Error","<p>I've been told by Bendigo Bank that we need to change md5 to SHA256. I've followed their instructions and I am getting this error:</p>

<pre><code>HTTP Status - 400
E5000: Cannot form a matching secure hash based on the merchant's request using either of the two merchant's secrets
</code></pre>

<p>Their <strong>example</strong> code is this:</p>

<pre><code>&lt;?php foreach($_POST as $key =&gt; $value) {
    if (strlen($value) &gt; 0) { ?&gt;
            &lt;input type=""hidden"" name=""&lt;?php echo($key); ?&gt;"" value=""&lt;?php echo($value); ?&gt;""/&gt;&lt;br&gt;
    &lt;?php           
        if ((strlen($value) &gt; 0) &amp;&amp; ((substr($key, 0,4)==""vpc_"") || (substr($key,0,5) ==""user_""))) {
            $hashinput .= $key . ""="" . $value . ""&amp;"";
        }
    }
}
$hashinput = rtrim($hashinput,""&amp;"");
?&gt;
&lt;!-- attach SecureHash --&gt;
&lt;input type=""hidden"" name=""vpc_SecureHash"" value=""&lt;?php echo(strtoupper(hash_hmac('SHA256', $hashinput, pack('H*',$securesecret)))); ?&gt;""/&gt;
&lt;input type=""hidden"" name=""vpc_SecureHashType"" value=""SHA256""&gt;
</code></pre>

<p><strong>And this is my post:</strong></p>

<pre><code>Array (
    [AgainLink] =&gt; http://fallscreekcountryclub.com.au/make-a-booking/submit-booking.html
    [b_terms] =&gt; 1
    [chargetypeid] =&gt; 33
    [deposit] =&gt; 580.00
    [notes] =&gt; 4 Nights - 26/11/2016 to 30/11/2016
    [propertyid] =&gt; 2
    [total] =&gt; 580.00
    [vpc_AccessCode] =&gt; 903876BC
    [vpc_Amount] =&gt; 58000
    [vpc_Command] =&gt; pay
    [vpc_Locale] =&gt; en
    [vpc_MerchTxnRef] =&gt; 1479746896
    [vpc_Merchant] =&gt; BBL5800396
    [vpc_OrderInfo] =&gt; Studio Deluxe
    [vpc_ReturnURL] =&gt; http://fallscreekcountryclub.com.au/make-a-booking/booking-complete.html
    [vpc_Version] =&gt; 1
)
</code></pre>

<p><strong>And this is my code:</strong></p>

<pre><code>        $appendAmp = 0;
        $isencoded = '';
        $notencoded = '';
        foreach($_POST as $key =&gt; $value) {
            if (strlen($value) &gt; 0) {
                if ($appendAmp == 0) :
                    $notencoded     .= $key . '=' . $value;
                    $isencoded      .= urlencode($key) . '=' . urlencode($value);
                    $appendAmp       = 1;
                else :
                    $notencoded     .= '&amp;' . $key . '=' . $value;
                    $isencoded      .= '&amp;' . urlencode($key) . '=' . urlencode($value);
                endif;
            }
        }

        if (strlen($SECURE_SECRET) &gt; 0) {
            #$vpcURL .= ""&amp;vpc_SecureHash="" . strtoupper(md5($md5HashData));
            $SecureHash     = strtoupper(hash_hmac('SHA256',$notencoded,pack('H*',$SECURE_SECRET)));
            $SecureHashType = 'SHA256';
        }
        $vpcURL .= $notencoded.'&amp;vpc_SecureHash='.$SecureHash.'&amp;vpc_SecureHashType='.$SecureHashType;
</code></pre>

<p>I have ""isencoded"" and ""notencoded"" because I've seen people say to <strong>not</strong> urlencode the string for vpc_ReturnURL until I build the vpcURL, but neither works.</p>

<p><strong>The urlencoded version of the vpcURL is:</strong></p>

<pre><code>https://migs.mastercard.com.au/vpcpay?AgainLink=http%3A%2F%2Ffallscreekcountryclub.com.au%2Fmake-a-booking%2Fsubmit-booking.html&amp;b_terms=1&amp;chargetypeid=33&amp;deposit=580.00&amp;notes=4+Nights+-+26%2F11%2F2016+to+30%2F11%2F2016&amp;propertyid=2&amp;total=580.00&amp;vpc_AccessCode=903876BC&amp;vpc_Amount=58000&amp;vpc_Command=pay&amp;vpc_Locale=en&amp;vpc_MerchTxnRef=1479746896&amp;vpc_Merchant=BBL5800396&amp;vpc_OrderInfo=Studio+Deluxe&amp;vpc_ReturnURL=http%3A%2F%2Ffallscreekcountryclub.com.au%2Fmake-a-booking%2Fbooking-complete.html&amp;vpc_Version=1&amp;vpc_SecureHash=A5BA6503FC7A169A90C9AAC7039878F45D761180D874789172EB5A58298022E4&amp;vpc_SecureHashType=SHA256 
</code></pre>

<p><strong>And the non urlencoded version is:</strong></p>

<pre><code>https://migs.mastercard.com.au/vpcpay?AgainLink=http://fallscreekcountryclub.com.au/make-a-booking/submit-booking.html&amp;b_terms=1&amp;chargetypeid=33&amp;deposit=580.00&amp;notes=4 Nights - 26/11/2016 to 30/11/2016&amp;propertyid=2&amp;total=580.00&amp;vpc_AccessCode=903876BC&amp;vpc_Amount=58000&amp;vpc_Command=pay&amp;vpc_Locale=en&amp;vpc_MerchTxnRef=1479746896&amp;vpc_Merchant=BBL5800396&amp;vpc_OrderInfo=Studio Deluxe&amp;vpc_ReturnURL=http://fallscreekcountryclub.com.au/make-a-booking/booking-complete.html&amp;vpc_Version=1&amp;vpc_SecureHash=A5BA6503FC7A169A90C9AAC7039878F45D761180D874789172EB5A58298022E4&amp;vpc_SecureHashType=SHA256 
</code></pre>

<p>Any ideas on what I've done wrong?? I called the bank, and they couldn't help me, they had no idea what I was even talking about..</p>

<p>I know the $SECURE_SECRET number is correct, as it's the same number I've used for the original md5 hash. So the problem lays with the sha256 hash, and I'm not sure why, or how to fix it.</p>
","<ol>
<li>Use <code>ksort()</code> to sort your array before linking your parameters.</li>
<li>Don't use <code>urlencode()</code> to process the vpc_ReturnURL, which would make the SHA256 hash result incorrect. Here is what I found from official Troubleshooting Guide:</li>
</ol>

<blockquote>
  <p>c)    Make sure that the vpc_ReturnURL is not URL encoded (i.e. the ""/"" becomes %2f)
      You can use the following link to decode a URL - <a href=""http://meyerweb.com/eric/tools/dencoder/"" rel=""nofollow noreferrer"">http://meyerweb.com/eric/tools/dencoder/</a>
      Sample sorted string based on this example as below: (Removed jsessionid, noheader, tdrid from output of 2b) i.e These elements can be removed prior to sorting the order</p>
</blockquote>

<pre><code>vpc_AccessCode=A837820A&amp;vpc_Amount=100&amp;vpc_Card=VC&amp;vpc_CardNum=4222222222222&amp;vpc_CardSecurityCode=100&amp;vpc_Command=pay&amp;vpc_Gateway=threeDSecure&amp;vpc_Locale=en&amp;vpc_MerchTxnRef=T2_7956&amp;vpc_Merchant=TESTDIALECTTEST&amp;vpc_ReturnURL=http://anjumpc:8080/dev-pg/payment/3dprocess.do&amp;vpc_Version=1
</code></pre>

<ol start=""3"">
<li>Don't send/hash the values which keys don't start with <code>vpc_</code> because MGIS doesn't care about those values and doesn't use those values in hash check. And the guide also mentioned about this:</li>
</ol>

<blockquote>
  <p>b)    Remove unnecessary fields for Hash calculation such as vpc_SecureHashType, vpc_SecureHash and anything that does not begins with vpc_ or user_ - i.e fields highlighted in Bold in 2a above to be removed</p>
</blockquote>

<ol start=""4"">
<li>(Ignore this, the SHA256 can be used on working MIGS merchant)</li>
</ol>
","40779058","4894","<php><payment-gateway><sha256><hmac>","3","1","3","2017-03-25 15:33:13","40779058","0","1","","","","2016-11-22 05:21:17","","2016-11-25 06:03:07","2016-11-24 06:03:40"
"40734309","MIGS Online Payments SHA256 HMAC Error","<p>I've been told by Bendigo Bank that we need to change md5 to SHA256. I've followed their instructions and I am getting this error:</p>

<pre><code>HTTP Status - 400
E5000: Cannot form a matching secure hash based on the merchant's request using either of the two merchant's secrets
</code></pre>

<p>Their <strong>example</strong> code is this:</p>

<pre><code>&lt;?php foreach($_POST as $key =&gt; $value) {
    if (strlen($value) &gt; 0) { ?&gt;
            &lt;input type=""hidden"" name=""&lt;?php echo($key); ?&gt;"" value=""&lt;?php echo($value); ?&gt;""/&gt;&lt;br&gt;
    &lt;?php           
        if ((strlen($value) &gt; 0) &amp;&amp; ((substr($key, 0,4)==""vpc_"") || (substr($key,0,5) ==""user_""))) {
            $hashinput .= $key . ""="" . $value . ""&amp;"";
        }
    }
}
$hashinput = rtrim($hashinput,""&amp;"");
?&gt;
&lt;!-- attach SecureHash --&gt;
&lt;input type=""hidden"" name=""vpc_SecureHash"" value=""&lt;?php echo(strtoupper(hash_hmac('SHA256', $hashinput, pack('H*',$securesecret)))); ?&gt;""/&gt;
&lt;input type=""hidden"" name=""vpc_SecureHashType"" value=""SHA256""&gt;
</code></pre>

<p><strong>And this is my post:</strong></p>

<pre><code>Array (
    [AgainLink] =&gt; http://fallscreekcountryclub.com.au/make-a-booking/submit-booking.html
    [b_terms] =&gt; 1
    [chargetypeid] =&gt; 33
    [deposit] =&gt; 580.00
    [notes] =&gt; 4 Nights - 26/11/2016 to 30/11/2016
    [propertyid] =&gt; 2
    [total] =&gt; 580.00
    [vpc_AccessCode] =&gt; 903876BC
    [vpc_Amount] =&gt; 58000
    [vpc_Command] =&gt; pay
    [vpc_Locale] =&gt; en
    [vpc_MerchTxnRef] =&gt; 1479746896
    [vpc_Merchant] =&gt; BBL5800396
    [vpc_OrderInfo] =&gt; Studio Deluxe
    [vpc_ReturnURL] =&gt; http://fallscreekcountryclub.com.au/make-a-booking/booking-complete.html
    [vpc_Version] =&gt; 1
)
</code></pre>

<p><strong>And this is my code:</strong></p>

<pre><code>        $appendAmp = 0;
        $isencoded = '';
        $notencoded = '';
        foreach($_POST as $key =&gt; $value) {
            if (strlen($value) &gt; 0) {
                if ($appendAmp == 0) :
                    $notencoded     .= $key . '=' . $value;
                    $isencoded      .= urlencode($key) . '=' . urlencode($value);
                    $appendAmp       = 1;
                else :
                    $notencoded     .= '&amp;' . $key . '=' . $value;
                    $isencoded      .= '&amp;' . urlencode($key) . '=' . urlencode($value);
                endif;
            }
        }

        if (strlen($SECURE_SECRET) &gt; 0) {
            #$vpcURL .= ""&amp;vpc_SecureHash="" . strtoupper(md5($md5HashData));
            $SecureHash     = strtoupper(hash_hmac('SHA256',$notencoded,pack('H*',$SECURE_SECRET)));
            $SecureHashType = 'SHA256';
        }
        $vpcURL .= $notencoded.'&amp;vpc_SecureHash='.$SecureHash.'&amp;vpc_SecureHashType='.$SecureHashType;
</code></pre>

<p>I have ""isencoded"" and ""notencoded"" because I've seen people say to <strong>not</strong> urlencode the string for vpc_ReturnURL until I build the vpcURL, but neither works.</p>

<p><strong>The urlencoded version of the vpcURL is:</strong></p>

<pre><code>https://migs.mastercard.com.au/vpcpay?AgainLink=http%3A%2F%2Ffallscreekcountryclub.com.au%2Fmake-a-booking%2Fsubmit-booking.html&amp;b_terms=1&amp;chargetypeid=33&amp;deposit=580.00&amp;notes=4+Nights+-+26%2F11%2F2016+to+30%2F11%2F2016&amp;propertyid=2&amp;total=580.00&amp;vpc_AccessCode=903876BC&amp;vpc_Amount=58000&amp;vpc_Command=pay&amp;vpc_Locale=en&amp;vpc_MerchTxnRef=1479746896&amp;vpc_Merchant=BBL5800396&amp;vpc_OrderInfo=Studio+Deluxe&amp;vpc_ReturnURL=http%3A%2F%2Ffallscreekcountryclub.com.au%2Fmake-a-booking%2Fbooking-complete.html&amp;vpc_Version=1&amp;vpc_SecureHash=A5BA6503FC7A169A90C9AAC7039878F45D761180D874789172EB5A58298022E4&amp;vpc_SecureHashType=SHA256 
</code></pre>

<p><strong>And the non urlencoded version is:</strong></p>

<pre><code>https://migs.mastercard.com.au/vpcpay?AgainLink=http://fallscreekcountryclub.com.au/make-a-booking/submit-booking.html&amp;b_terms=1&amp;chargetypeid=33&amp;deposit=580.00&amp;notes=4 Nights - 26/11/2016 to 30/11/2016&amp;propertyid=2&amp;total=580.00&amp;vpc_AccessCode=903876BC&amp;vpc_Amount=58000&amp;vpc_Command=pay&amp;vpc_Locale=en&amp;vpc_MerchTxnRef=1479746896&amp;vpc_Merchant=BBL5800396&amp;vpc_OrderInfo=Studio Deluxe&amp;vpc_ReturnURL=http://fallscreekcountryclub.com.au/make-a-booking/booking-complete.html&amp;vpc_Version=1&amp;vpc_SecureHash=A5BA6503FC7A169A90C9AAC7039878F45D761180D874789172EB5A58298022E4&amp;vpc_SecureHashType=SHA256 
</code></pre>

<p>Any ideas on what I've done wrong?? I called the bank, and they couldn't help me, they had no idea what I was even talking about..</p>

<p>I know the $SECURE_SECRET number is correct, as it's the same number I've used for the original md5 hash. So the problem lays with the sha256 hash, and I'm not sure why, or how to fix it.</p>
","<p>Hi i am sharing with u my working code. 
Enjoy.</p>

<pre><code>   $secretHash=""xxxxxx"";
    $accessCode='xxxxx';
    $merchantId='xxxxx';    

    $data = array(
        ""vpc_AccessCode"" =&gt; $accessCode,
        ""vpc_Amount"" =&gt; '100',
        ""vpc_Command"" =&gt; 'pay',
        ""vpc_Locale"" =&gt; 'en',
        ""vpc_MerchTxnRef"" =&gt;  ""REF_"".time(),
        ""vpc_Merchant"" =&gt; $merchantId,
        ""vpc_OrderInfo"" =&gt; ""Order_N_"".time(),
        ""vpc_ReturnURL"" =&gt; urlencode(""yourReturnUrl""),
        ""vpc_Version"" =&gt; '1',
        'vpc_SecureHashType' =&gt; 'SHA256'    
    );

    ksort($data);
    $hash = null;
    foreach ($data as $k =&gt; $v) {
        if (in_array($k, array('vpc_SecureHash', 'vpc_SecureHashType'))) {
            continue;
        }
        if ((strlen($v) &gt; 0) &amp;&amp; ((substr($k, 0, 4)==""vpc_"") || (substr($k, 0, 5) ==""user_""))) {
            $hash .= $k . ""="" . $v . ""&amp;"";
        }
    }
    $hash = rtrim($hash, ""&amp;"");

    $secureHash = strtoupper(hash_hmac('SHA256', $hash, pack('H*', $secretHash)));
    $paraFinale = array_merge($data, array('vpc_SecureHash' =&gt; $secureHash));
    $actionurl = 'https://migs.mastercard.com.au/vpcpay?'.http_build_query($paraFinale);

    //print_r($actionurl);
    header(""Location:"".$actionurl);
</code></pre>
","43018269","4894","<php><payment-gateway><sha256><hmac>","3","8","3","2017-03-25 15:33:13","40779058","0","1","","","","2016-11-22 05:21:17","","","2017-03-25 15:33:13"
"9974028","hash string size","<p>In python I use the following code to create hash for user passwords:</p>

<pre><code>self.password = hmac.new(security_key, raw_password, sha1).hexdigest()
</code></pre>

<p>Now I'd like to save this value to database. What size must be my database column? 
It seems related to digest_size property, but do not know what object or class has such property. sha1 doesn't have one.</p>
","<p>The output of the sha-1 hash function will be 20 characters long.
(According to <a href=""http://tools.ietf.org/html/rfc2104.html"" rel=""nofollow"">RFC2104</a>, referenced by the <a href=""http://docs.python.org/library/hmac.html"" rel=""nofollow"">hmac python module docs</a>: ""...L the byte-length of hash outputs (L=16 for MD5, L=20 for SHA-1)."")</p>

<p>You can also verify this by:</p>

<pre><code>import hashlib;
H = hashlib.sha1(""blahblah"");
print(H.digest_size);
</code></pre>
","9974756","4809","<python><hmac><sha>","8","2","2","2012-04-02 12:35:17","9976535","1","","","","","2012-04-02 09:35:41","","","2012-04-02 10:29:55"
"9974028","hash string size","<p>In python I use the following code to create hash for user passwords:</p>

<pre><code>self.password = hmac.new(security_key, raw_password, sha1).hexdigest()
</code></pre>

<p>Now I'd like to save this value to database. What size must be my database column? 
It seems related to digest_size property, but do not know what object or class has such property. sha1 doesn't have one.</p>
","<p>The output of hmac is dependent on the hashing algorithm it uses. In your case, it uses sha1, which always output a 20-byte long byte string according to RFC2104. Calling hexdigest() turns the byte string into a printable hex format. 1 byte = 2 hex numbers, so the total is 40 hex characters. You can safely set your database column to char(40).</p>
","9976535","4809","<python><hmac><sha>","8","5","2","2012-04-02 12:35:17","9976535","1","","","","","2012-04-02 09:35:41","","","2012-04-02 12:35:17"
"9667742","Print out the whole raw http request","<p>how do I get the whole raw http request in the python framework bottle?</p>

<p>I need something like this:</p>

<pre><code>GET\n
myurl.com\n
/\n
attribute=value
&amp;att2=value2
</code></pre>

<p>I need this to sign my http api requests</p>
","<p>As far as I can tell from <a href=""http://bottlepy.org/docs/dev/api.html#bottle.LocalRequest"" rel=""nofollow"">the docs</a> you can't get the data in raw format.</p>

<p>What you can do is reconstruct it using <code>bottle.request.data</code> and <code>bottle.request.headers</code>. That may be enough for your purposes.</p>
","9672922","4668","<python><http><request><hmac><bottle>","2","3","2","2017-03-21 09:48:33","9672922","0","","26406","","2012-03-12 18:11:55","2012-03-12 13:17:12","","","2012-03-12 18:44:02"
"9667742","Print out the whole raw http request","<p>how do I get the whole raw http request in the python framework bottle?</p>

<p>I need something like this:</p>

<pre><code>GET\n
myurl.com\n
/\n
attribute=value
&amp;att2=value2
</code></pre>

<p>I need this to sign my http api requests</p>
","<p>If you just want to print the request you can do the following:</p>

<pre><code>headers_string = ['{}: {}'.format(h, request.headers.get(h)) for h in request.headers.keys()] 
print('URL={}, method={}\nheaders:\n{}'.format(request.url, request.method, '\n'.join(headers_string)))
</code></pre>
","42923427","4668","<python><http><request><hmac><bottle>","2","2","2","2017-03-21 09:48:33","9672922","0","","26406","","2012-03-12 18:11:55","2012-03-12 13:17:12","","","2017-03-21 09:48:33"
"10973711","Public and private API keys","<p>I'm developing an API system which requires this type of authentication. The user will send an HTTP request with its id, the data, and a hash (the data hashed with the private key) and then in the server I check if the hash matches with the same procees here.<br>
Is it like the implementation must be?<br>
And I'm going to use as public key the id of the client but what is the best method to generate the private key, sha256 of the id, of a randon number?</p>
","<p>This is not Private/Public-key cryptography. In such a system, the client would encrypt <strong>the whole data</strong> and you would then decrypt it using your private key. You would never give your private key to the client.</p>

<p>What you are doing is request signature. You give a ""secret"" (what you are calling ""private key""), then they use this to generate a hash. You can then check the hash on your server since you also know the secret.</p>

<p>There would not be a public key in this kind of system. You normally identify the client using a session key or token, so the client needs to authenticate first (which means you need some authentication method). Essentially, what you are trying to implement is OAuth. Perhaps have a look at the library and see if you can use it directly - <a href=""http://oauth.net/documentation/getting-started/"" rel=""nofollow"">http://oauth.net/documentation/getting-started/</a></p>
","10974312","4607","<api><hash><hmac><api-key>","0","1","2","2013-05-19 02:17:28","10974450","0","1","527702","","2013-05-19 02:17:28","2012-06-11 01:25:18","","","2012-06-11 03:47:37"
"10973711","Public and private API keys","<p>I'm developing an API system which requires this type of authentication. The user will send an HTTP request with its id, the data, and a hash (the data hashed with the private key) and then in the server I check if the hash matches with the same procees here.<br>
Is it like the implementation must be?<br>
And I'm going to use as public key the id of the client but what is the best method to generate the private key, sha256 of the id, of a randon number?</p>
","<p>checking out what <a href=""http://docs.amazonwebservices.com/AmazonS3/latest/dev/RESTAuthentication.html#ConstructingTheAuthenticationHeader"" rel=""nofollow"">amazon s3</a> is doing for the authentication might be a good start</p>

<p>basically they are doing the same thing as you proposed, and they use RFC 2104HMAC-SHA1 for the hashing. The implementation depends on your choice of languages.</p>
","10974450","4607","<api><hash><hmac><api-key>","0","1","2","2013-05-19 02:17:28","10974450","0","1","527702","","2013-05-19 02:17:28","2012-06-11 01:25:18","","2012-06-11 04:27:17","2012-06-11 04:17:12"
"35463289","dnx451 RC1 What happened to InMemorySymmetricSecurityKey?","<p>I've been trying to create and sign a JwtSecurityToken using a simple key. And after a lot of research it seems that all the examples I find use the <a href=""https://msdn.microsoft.com/en-us/library/system.identitymodel.tokens.inmemorysymmetricsecuritykey(v=vs.110).aspx"" rel=""noreferrer"">InMemorySymmetricSecurityKey</a> class but unfortunately this class doesn't seem to exist in the newest versions of the <em>System.IdentityModel</em> libraries.</p>

<p>These are the dependencies I'm using:</p>

<pre><code>""System.IdentityModel.Tokens"": ""5.0.0-rc1-211161024"",
""System.IdentityModel.Tokens.Jwt"": ""5.0.0-rc1-211161024""
</code></pre>

<p>I also tried using it's base class <a href=""https://msdn.microsoft.com/en-us/library/system.identitymodel.tokens.symmetricsecuritykey(v=vs.110).aspx"" rel=""noreferrer"">SymmetricSecurityKey</a> but then I get the following exception when trying to create the token:</p>

<pre><code>""Value cannot be null.\r\nParameter name: IDX10000: The parameter 'signatureProvider' cannot be a 'null' or an empty object.""
</code></pre>

<p>This is the code that throws the exception:</p>

<pre><code>public static string CreateTokenHMAC()
{
    HMACSHA256 hmac = new HMACSHA256(Convert.FromBase64String(""test""));

    var key = new SymmetricSecurityKey(hmac.Key);

    var signingCredentials = new SigningCredentials(key, SecurityAlgorithms.HmacSha256Signature);

    JwtSecurityToken token = _tokenHandler.CreateJwtSecurityToken(new SecurityTokenDescriptor()
    {
        Audience = AUDIENCE,
        Issuer = ISSUER,
        Expires = DateTime.UtcNow.AddHours(6),
        NotBefore = DateTime.Now,
        Claims = new List&lt;Claim&gt;()
        {
            new Claim(ClaimTypes.Email, ""johndoe@example.com"")
        },
        SigningCredentials = signingCredentials
    });

    return _tokenHandler.WriteToken(token);
}
</code></pre>

<p><em>It's the first time I'm using JwtSecurityToken so my guess is that I'm probably missing a step somewhere</em></p>
","<p>I managed to reach the exact same exception. I worked around the problem by generating the key another way:</p>

<pre><code>RSAParameters keyParams;
using (var rsa = new RSACryptoServiceProvider(2048))
{
    try
    {
        keyParams = rsa.ExportParameters(true);
    }
    finally
    {
        rsa.PersistKeyInCsp = false;
    }
}
RsaSecurityKey key = new RsaSecurityKey(keyParams);
var signingCredentials = new SigningCredentials(key, SecurityAlgorithms.HmacSha256Signature);
</code></pre>

<p>Here is a great post about <a href=""https://stackoverflow.com/a/33217122/3581943"">token-based authentication on ASP.NET 5 RC1</a> by <a href=""https://stackoverflow.com/users/789529/mark-hughes"">Mark Hughes</a></p>
","35667375","4591","<c#><.net><oauth><jwt><hmac>","8","2","3","2018-02-17 08:29:17","35667375","0","3","","","","2016-02-17 17:12:29","","2017-05-23 11:46:26","2016-02-27 08:15:46"
"35463289","dnx451 RC1 What happened to InMemorySymmetricSecurityKey?","<p>I've been trying to create and sign a JwtSecurityToken using a simple key. And after a lot of research it seems that all the examples I find use the <a href=""https://msdn.microsoft.com/en-us/library/system.identitymodel.tokens.inmemorysymmetricsecuritykey(v=vs.110).aspx"" rel=""noreferrer"">InMemorySymmetricSecurityKey</a> class but unfortunately this class doesn't seem to exist in the newest versions of the <em>System.IdentityModel</em> libraries.</p>

<p>These are the dependencies I'm using:</p>

<pre><code>""System.IdentityModel.Tokens"": ""5.0.0-rc1-211161024"",
""System.IdentityModel.Tokens.Jwt"": ""5.0.0-rc1-211161024""
</code></pre>

<p>I also tried using it's base class <a href=""https://msdn.microsoft.com/en-us/library/system.identitymodel.tokens.symmetricsecuritykey(v=vs.110).aspx"" rel=""noreferrer"">SymmetricSecurityKey</a> but then I get the following exception when trying to create the token:</p>

<pre><code>""Value cannot be null.\r\nParameter name: IDX10000: The parameter 'signatureProvider' cannot be a 'null' or an empty object.""
</code></pre>

<p>This is the code that throws the exception:</p>

<pre><code>public static string CreateTokenHMAC()
{
    HMACSHA256 hmac = new HMACSHA256(Convert.FromBase64String(""test""));

    var key = new SymmetricSecurityKey(hmac.Key);

    var signingCredentials = new SigningCredentials(key, SecurityAlgorithms.HmacSha256Signature);

    JwtSecurityToken token = _tokenHandler.CreateJwtSecurityToken(new SecurityTokenDescriptor()
    {
        Audience = AUDIENCE,
        Issuer = ISSUER,
        Expires = DateTime.UtcNow.AddHours(6),
        NotBefore = DateTime.Now,
        Claims = new List&lt;Claim&gt;()
        {
            new Claim(ClaimTypes.Email, ""johndoe@example.com"")
        },
        SigningCredentials = signingCredentials
    });

    return _tokenHandler.WriteToken(token);
}
</code></pre>

<p><em>It's the first time I'm using JwtSecurityToken so my guess is that I'm probably missing a step somewhere</em></p>
","<p>This should work (note this requires RC2 packages &gt; 304180813)</p>

<pre><code>var handler = new JwtSecurityTokenHandler();
var tokenDescriptor = new SecurityTokenDescriptor
{
    Subject = new ClaimsIdentity(
        new Claim[] { new Claim(ClaimTypes.NameIdentifier, ""bob"") }),
    SigningCredentials = new SigningCredentials(
        new SymmetricSecurityKey(new byte[256]),
        SecurityAlgorithms.HmacSha256)
};

var jwt = handler.CreateEncodedJwt(tokenDescriptor);
</code></pre>
","36728772","4591","<c#><.net><oauth><jwt><hmac>","8","3","3","2018-02-17 08:29:17","35667375","0","3","","","","2016-02-17 17:12:29","","2018-02-17 08:29:17","2016-04-19 20:27:06"
"35463289","dnx451 RC1 What happened to InMemorySymmetricSecurityKey?","<p>I've been trying to create and sign a JwtSecurityToken using a simple key. And after a lot of research it seems that all the examples I find use the <a href=""https://msdn.microsoft.com/en-us/library/system.identitymodel.tokens.inmemorysymmetricsecuritykey(v=vs.110).aspx"" rel=""noreferrer"">InMemorySymmetricSecurityKey</a> class but unfortunately this class doesn't seem to exist in the newest versions of the <em>System.IdentityModel</em> libraries.</p>

<p>These are the dependencies I'm using:</p>

<pre><code>""System.IdentityModel.Tokens"": ""5.0.0-rc1-211161024"",
""System.IdentityModel.Tokens.Jwt"": ""5.0.0-rc1-211161024""
</code></pre>

<p>I also tried using it's base class <a href=""https://msdn.microsoft.com/en-us/library/system.identitymodel.tokens.symmetricsecuritykey(v=vs.110).aspx"" rel=""noreferrer"">SymmetricSecurityKey</a> but then I get the following exception when trying to create the token:</p>

<pre><code>""Value cannot be null.\r\nParameter name: IDX10000: The parameter 'signatureProvider' cannot be a 'null' or an empty object.""
</code></pre>

<p>This is the code that throws the exception:</p>

<pre><code>public static string CreateTokenHMAC()
{
    HMACSHA256 hmac = new HMACSHA256(Convert.FromBase64String(""test""));

    var key = new SymmetricSecurityKey(hmac.Key);

    var signingCredentials = new SigningCredentials(key, SecurityAlgorithms.HmacSha256Signature);

    JwtSecurityToken token = _tokenHandler.CreateJwtSecurityToken(new SecurityTokenDescriptor()
    {
        Audience = AUDIENCE,
        Issuer = ISSUER,
        Expires = DateTime.UtcNow.AddHours(6),
        NotBefore = DateTime.Now,
        Claims = new List&lt;Claim&gt;()
        {
            new Claim(ClaimTypes.Email, ""johndoe@example.com"")
        },
        SigningCredentials = signingCredentials
    });

    return _tokenHandler.WriteToken(token);
}
</code></pre>

<p><em>It's the first time I'm using JwtSecurityToken so my guess is that I'm probably missing a step somewhere</em></p>
","<p>I was unable to get it to work using the RsaSecurityKey example provided in the accepted answer, but this did work for me (using System.IdentityModel.Tokens.Jwt v5.1.3).</p>

<pre><code>var signingKey = new SymmetricSecurityKey(Encoding.ASCII.GetBytes(""test""));
var signingCredentials = new SigningCredentials(signingKey, SecurityAlgorithms.HmacSha256);

var securityTokenDescriptor = new SecurityTokenDescriptor()
{
    Subject = new ClaimsIdentity(new List&lt;Claim&gt;()
    {
        new Claim(ClaimTypes.NameIdentifier, ""johndoe@example.com""),
        new Claim(ClaimTypes.Role, ""Administrator""),
    }, ""Custom""),
    NotBefore = DateTime.Now,
    SigningCredentials = signingCredentials,
    Issuer = ""self"",
    IssuedAt = DateTime.Now,
    Expires = DateTime.Now.AddHours(3),
    Audience = ""http://my.website.com""
};

var tokenHandler = new JwtSecurityTokenHandler();
var plainToken = tokenHandler.CreateToken(securityTokenDescriptor);
var signedAndEncodedToken = tokenHandler.WriteToken(plainToken);
</code></pre>

<p>and to verify</p>

<pre><code>var validationParameters = new TokenValidationParameters()
{
     ValidateAudience = true,
     ValidAudience = ""http://my.website.com"",
     ValidateIssuer = true,
     ValidIssuer = ""self"",
     ValidateIssuerSigningKey = true,
     IssuerSigningKey = signingKey,
     RequireExpirationTime = true,
     ValidateLifetime = true,
     ClockSkew = TimeSpan.Zero
};
try
{
    SecurityToken mytoken = new JwtSecurityToken();
    var myTokenHandler = new JwtSecurityTokenHandler();
    var myPrincipal = myTokenHandler.ValidateToken(signedAndEncodedToken, validationParameters, out mytoken);
} catch (Exception ex)
{
    System.Diagnostics.Debug.WriteLine(""Authentication failed"");
}
</code></pre>
","42819774","4591","<c#><.net><oauth><jwt><hmac>","8","6","3","2018-02-17 08:29:17","35667375","0","3","","","","2016-02-17 17:12:29","","2017-03-15 20:23:17","2017-03-15 20:12:14"
"46988540","Java HmacSHA256 with key","<p>i have tried several links from stackoverflow to get HmacSHA256 with key to work with java, but i always get </p>

<pre><code> func check(body: String) -&gt; String {
    let hash = body.hmac(HMACAlgorithm.sha256, key: Router.sigKey)
    print(""SIG: "" + Router.sigKey)
    print(""result of hash. \(hash)"")
    return hash
}
</code></pre>

<p>This function returns hash with key from given String. 
Key was: 0393e944ee8108bb66fc9fa4f99f9c862481e9e0519e18232ba61b0767eee8c6</p>

<p>String was: example</p>

<p>Result is: 27effb76c97022497e25d3a5d7e823462f212a82d9ebba35f179071568b0c335</p>

<p>When i use <a href=""https://www.freeformatter.com/hmac-generator.html#ad-output"" rel=""nofollow noreferrer"">this</a> website to check if my SHA256 is good with the same key, it returns same answer, so i know my code in swift is good. But when i try to do it in java, here is the source code.</p>

<pre><code>public static String HMAC_SHA(){
    try {
        String secret = ""0393e944ee8108bb66fc9fa4f99f9c862481e9e0519e18232ba61b0767eee8c6"";
        String message = ""example"";
        Mac sha256_HMAC = Mac.getInstance(""HmacSHA256"");
        SecretKeySpec secret_key = new SecretKeySpec(secret.getBytes(), ""HmacSHA256"");
        sha256_HMAC.init(secret_key);
        String hash = android.util.Base64.encodeToString(sha256_HMAC.doFinal(message.getBytes()), Base64.URL_SAFE);
        return new String(Hex.encodeHex(hash.getBytes()));
    }
    catch (Exception e){
        e.printStackTrace();
    }
    return null;
}
</code></pre>

<p>It returns this: 4a2d5f3764736c77496b6c2d4a644f6c312d676a526938684b6f4c5a36376f3138586b4846576977777a553d0a</p>

<p>Which is not even similar to the swift output. How can i achieve the same result with java from the swift code above, it would be helpful a lot!</p>
","<p>Your key contains values greater then the value 127 and, <code>Mac</code> and <code>SecretKeySpec</code> use <code>byte</code>s, which in Java can contain values from -128 to 127.</p>

<hr>

<p>In the HmacSHA256 algorithm, the key is interpreted as a string of hexadecimal values. In the case of your secret, the decimal values of this key are:
<code>3,147,233,68,238,129,8,187,102,252,159,164,249,159,156,134,36,129,233,224,81,158,24,35,43,166,27,7,103,238,232,198</code></p>

<p>As you can see, some of them have a value over 127. When creating the <code>SecretKeySpec</code> object and while doing calculations within the <code>Mac</code> class, Java uses <code>byte[]</code> to store this and related sequences. In Java, a <code>byte</code> can contain values from -128 to 127, which means that when storing this secret, the values > 127 will ""flip"" and will make sure the calculations following this will not go as you'd expect.</p>

<p>In the Swift case (and with C++, Ruby, and other languages), the conversion from hex to byte occurs without losing the actual value.</p>
","51933235","4484","<java><swift><sha256><hmac>","1","-1","2","2018-08-20 21:24:15","","6","2","","","","2017-10-28 10:10:26","","","2018-08-20 14:43:29"
"46988540","Java HmacSHA256 with key","<p>i have tried several links from stackoverflow to get HmacSHA256 with key to work with java, but i always get </p>

<pre><code> func check(body: String) -&gt; String {
    let hash = body.hmac(HMACAlgorithm.sha256, key: Router.sigKey)
    print(""SIG: "" + Router.sigKey)
    print(""result of hash. \(hash)"")
    return hash
}
</code></pre>

<p>This function returns hash with key from given String. 
Key was: 0393e944ee8108bb66fc9fa4f99f9c862481e9e0519e18232ba61b0767eee8c6</p>

<p>String was: example</p>

<p>Result is: 27effb76c97022497e25d3a5d7e823462f212a82d9ebba35f179071568b0c335</p>

<p>When i use <a href=""https://www.freeformatter.com/hmac-generator.html#ad-output"" rel=""nofollow noreferrer"">this</a> website to check if my SHA256 is good with the same key, it returns same answer, so i know my code in swift is good. But when i try to do it in java, here is the source code.</p>

<pre><code>public static String HMAC_SHA(){
    try {
        String secret = ""0393e944ee8108bb66fc9fa4f99f9c862481e9e0519e18232ba61b0767eee8c6"";
        String message = ""example"";
        Mac sha256_HMAC = Mac.getInstance(""HmacSHA256"");
        SecretKeySpec secret_key = new SecretKeySpec(secret.getBytes(), ""HmacSHA256"");
        sha256_HMAC.init(secret_key);
        String hash = android.util.Base64.encodeToString(sha256_HMAC.doFinal(message.getBytes()), Base64.URL_SAFE);
        return new String(Hex.encodeHex(hash.getBytes()));
    }
    catch (Exception e){
        e.printStackTrace();
    }
    return null;
}
</code></pre>

<p>It returns this: 4a2d5f3764736c77496b6c2d4a644f6c312d676a526938684b6f4c5a36376f3138586b4846576977777a553d0a</p>

<p>Which is not even similar to the swift output. How can i achieve the same result with java from the swift code above, it would be helpful a lot!</p>
","<pre><code>    String key = ""0393e944ee8108bb66fc9fa4f99f9c862481e9e0519e18232ba61b0767eee8c6"";
    Mac sha256_HMAC = Mac.getInstance(""HmacSHA256"");
    sha256_HMAC.init(new SecretKeySpec(key.getBytes(), ""HmacSHA256""));
    byte[] result = sha256_HMAC.doFinal(""example"".getBytes());
    System.out.println (DatatypeConverter.printHexBinary(result));
    // ONLY CONVERT TO HEX (= SWIFT) NOT FIRST TO BASE64
</code></pre>

<p>result as requested </p>

<pre><code> 27EFFB76C97022497E25D3A5D7E823462F212A82D9EBBA35F179071568B0C335
</code></pre>
","51938627","4484","<java><swift><sha256><hmac>","1","2","2","2018-08-20 21:24:15","","6","2","","","","2017-10-28 10:10:26","","2018-08-20 21:24:15","2018-08-20 21:19:12"
"17947026","Java method which can provide the same output as Python method for HMAC-SHA256 in Hex","<p>I am now trying to encode the string using HMAC-SHA256 using Java. The encoded string required to match another set of encoded string generated by Python using <code>hmac.new(mySecret, myPolicy, hashlib.sha256).hexdigest()</code>. I have tried </p>

<pre><code>    Mac sha256_HMAC = Mac.getInstance(""HmacSHA256"");
    SecretKeySpec secretKey = new SecretKeySpec(secret.getBytes(), ""HmacSHA256"");
    sha256_HMAC.init(secretKey);

    byte[] hash = sha256_HMAC.doFinal(policy.getBytes());
    byte[] hexB = new Hex().encode(hash);
    String check = Hex.encodeHexString(hash);
    String sha256 = DigestUtils.sha256Hex(secret.getBytes());
</code></pre>

<p>after I print them out, hash, hexB, check and sha256 didn't provide the same result as the following Python encryption method</p>

<pre><code>hmac.new(mySecret, myPolicy, hashlib.sha256).hexdigest()
</code></pre>

<p>So, I have try to looking for the library or something that work similar to the above Python function. Can anybody help me out?</p>
","<p>Are you sure your key and input are identical and correctly encoded in both java and python?</p>

<p>HMAC-SHA256 works the same on both platforms.</p>

<p>Java</p>

<pre><code>Mac sha256_HMAC = Mac.getInstance(""HmacSHA256"");
SecretKeySpec secretKey = new SecretKeySpec(""1234"".getBytes(), ""HmacSHA256"");
sha256_HMAC.init(secretKey);
byte[] hash = sha256_HMAC.doFinal(""test"".getBytes());
String check = Hex.encodeHexString(hash);
System.out.println(new String(check));

Output
24c4f0295e1bea74f9a5cb5bc40525c8889d11c78c4255808be00defe666671f
</code></pre>

<p>Python</p>

<pre><code>print hmac.new(""1234"", ""test"", hashlib.sha256).hexdigest();

Output
24c4f0295e1bea74f9a5cb5bc40525c8889d11c78c4255808be00defe666671f
</code></pre>
","17949464","4280","<java><python><hmac>","5","10","1","2013-07-30 14:13:13","17949464","0","7","1534725","","2013-07-30 14:13:13","2013-07-30 12:27:02","","","2013-07-30 14:12:31"
"1733957","hmac-sha1 in ruby differs from C# HMACSHA1","<p>I am trying to test the API from <a href=""http://ankoder.com"" rel=""nofollow noreferrer"">ankoder.com</a> and have problem on the digest calculation for the <a href=""http://www.ankoder.com/api/Auth/"" rel=""nofollow noreferrer"">authentication token</a> . The sample is ruby while I am trying to call from C#. When I compare the digest result between in HMAC-SHA1, I got issues with the passkey result. </p>

<p>To make it easy to test here is the code:</p>

<pre><code>require 'hmac-sha1'
require 'digest/sha1'
require 'base64'
token=""-Sat, 14 Nov 2009 09:47:53 GMT-GET-/video.xml-""
private_key=""whatever""
salt=Digest::SHA1.hexdigest(token)[0..19]
passkey=Base64.encode64(HMAC::SHA1.digest(private_key, salt)).strip
</code></pre>

<p>Which gives me the result: ""X/0EngsTYf7L8e7LvoihTMLetlM=\n""
If I try this in C# with the following:</p>

<pre><code>const string PrivateKey = ""whatever"";

var date = ""Sat, 14 Nov 2009 09:47:53 GMT"";//DateTime.Now.ToUniversalTime().ToString(""ddd, dd MMM yyyy HH:mm:ss"") + "" GMT"";
string token=string.Format(""-{0}-GET-/video.xml-"", date);

var salt_binary=SHA1.Create().ComputeHash(Encoding.ASCII.GetBytes(token));
var salt_hex=BitConverter.ToString(salt_binary).Replace(""-"", """").ToLower();
var salt =salt_hex.Substring(0,20);

var hmac_sha1 =
            new HMACSHA1(Encoding.ASCII.GetBytes(salt));
hmac_sha1.Initialize();

var private_key_binary = Encoding.ASCII.GetBytes(PrivateKey);
var passkey_binary = hmac_sha1.ComputeHash(private_key_binary,0,private_key_binary.Length);

var passkey = Convert.ToBase64String(passkey_binary).Trim();
</code></pre>

<p>The salt result is the same, but the passkey result is different- C# gives me :</p>

<p>QLC68XjQlEBurwbVwr7euUfHW/k=</p>

<p>Both generates the salt: f5cab5092f9271d43d2e</p>

<p>Any good idea what has happened?</p>
","<p>You've put <code>PrivateKey</code> and <code>salt</code> in the wrong positions in your C# code; per your Ruby code, <code>PrivateKey</code> is meant to be the HMAC's secret key.</p>

<p>Also be aware that you've included a newline at the end of the hash produced by your Ruby program (according to your sample output, anyway).  You must <em>not</em> include the newline or the hashes won't match.</p>

<p>This C# program corrects the first issue:</p>

<pre><code>using System;
using System.Security.Cryptography;
using System.Text;

namespace Hasher
{
  class Program
  {
    static void Main(string[] args)
    {
      const string PrivateKey = ""whatever"";

      string date = ""Sat, 14 Nov 2009 09:47:53 GMT"";
      string token = string.Format(""-{0}-GET-/video.xml-"", date);

      byte[] salt_binary = SHA1.Create().ComputeHash(Encoding.ASCII.GetBytes(token));
      string salt_hex = BitConverter.ToString(salt_binary).Replace(""-"", """").ToLower();
      string salt = salt_hex.Substring(0, 20);

      HMACSHA1 hmac_sha1 = new HMACSHA1(Encoding.ASCII.GetBytes(PrivateKey));
      hmac_sha1.Initialize();

      byte[] private_key_binary = Encoding.ASCII.GetBytes(salt);
      byte[] passkey_binary = hmac_sha1.ComputeHash(private_key_binary, 0, private_key_binary.Length);

      string passkey = Convert.ToBase64String(passkey_binary).Trim();
    }
  }
}
</code></pre>
","1734075","4063","<c#><ruby><hash><sha1><hmac>","8","10","2","2013-11-03 14:59:00","1734075","0","5","411022","","2013-11-03 14:59:00","2009-11-14 11:07:28","","2009-12-28 16:17:18","2009-11-14 12:10:25"
"1733957","hmac-sha1 in ruby differs from C# HMACSHA1","<p>I am trying to test the API from <a href=""http://ankoder.com"" rel=""nofollow noreferrer"">ankoder.com</a> and have problem on the digest calculation for the <a href=""http://www.ankoder.com/api/Auth/"" rel=""nofollow noreferrer"">authentication token</a> . The sample is ruby while I am trying to call from C#. When I compare the digest result between in HMAC-SHA1, I got issues with the passkey result. </p>

<p>To make it easy to test here is the code:</p>

<pre><code>require 'hmac-sha1'
require 'digest/sha1'
require 'base64'
token=""-Sat, 14 Nov 2009 09:47:53 GMT-GET-/video.xml-""
private_key=""whatever""
salt=Digest::SHA1.hexdigest(token)[0..19]
passkey=Base64.encode64(HMAC::SHA1.digest(private_key, salt)).strip
</code></pre>

<p>Which gives me the result: ""X/0EngsTYf7L8e7LvoihTMLetlM=\n""
If I try this in C# with the following:</p>

<pre><code>const string PrivateKey = ""whatever"";

var date = ""Sat, 14 Nov 2009 09:47:53 GMT"";//DateTime.Now.ToUniversalTime().ToString(""ddd, dd MMM yyyy HH:mm:ss"") + "" GMT"";
string token=string.Format(""-{0}-GET-/video.xml-"", date);

var salt_binary=SHA1.Create().ComputeHash(Encoding.ASCII.GetBytes(token));
var salt_hex=BitConverter.ToString(salt_binary).Replace(""-"", """").ToLower();
var salt =salt_hex.Substring(0,20);

var hmac_sha1 =
            new HMACSHA1(Encoding.ASCII.GetBytes(salt));
hmac_sha1.Initialize();

var private_key_binary = Encoding.ASCII.GetBytes(PrivateKey);
var passkey_binary = hmac_sha1.ComputeHash(private_key_binary,0,private_key_binary.Length);

var passkey = Convert.ToBase64String(passkey_binary).Trim();
</code></pre>

<p>The salt result is the same, but the passkey result is different- C# gives me :</p>

<p>QLC68XjQlEBurwbVwr7euUfHW/k=</p>

<p>Both generates the salt: f5cab5092f9271d43d2e</p>

<p>Any good idea what has happened?</p>
","<p>I see 2 issues,</p>

<ol>
<li>You got key/data reversed. In Ruby, private_key is the key and the salt is the data. In C#, you did the opposite.</li>
<li>If non-ASCII is allowed in any of your strings, you have to make sure you use same encoding. Ruby treats everything as raw bytes so the C# has to match its encoding. If jcode is used, the encoding in C# should match $KCODE.</li>
</ol>
","1734703","4063","<c#><ruby><hash><sha1><hmac>","8","3","2","2013-11-03 14:59:00","1734075","0","5","411022","","2013-11-03 14:59:00","2009-11-14 11:07:28","","","2009-11-14 16:18:52"
"10990379","Authorizing a computer to access a web application","<p>I have a web application, and am tasked with adding secure sign-on to bolster security, akin to what Google has added to Google accounts. </p>

<p><strong>Use Case</strong></p>

<p>Essentially, when a user logs in, we want to detect if the user has previously authorized this computer. If the computer has not been authorized, the user is sent a one-time password (via email, SMS, or phone call) that they must enter, where the user may choose to remember this computer. In the web application, we will track authorized devices, allowing users to see when/where they logged in from that device last, and deauthorize any devices if they so choose.</p>

<p>We require a solution that is very light touch (meaning, requiring no client-side software installation), and works with Safari, Chrome, Firefox, and IE 7+ (unfortunately). We will offer x509 security, which provides adequate security, but we still need a solution for customers that can't or won't use x509.</p>

<p>My intention is to store authorization information using cookies (or, potentially, using local storage, degrading to flash cookies, and then normal cookies).</p>

<p><strong>At First Blush</strong></p>

<p><img src=""https://i.stack.imgur.com/bqGhw.png"" alt=""Initial secure sign-on sequence diagram"">
Track two separate values (local data or cookies): a hash representing a secure sign-on token, as well as a device token. Both values are driven (and recorded) by the web application, and dictated to the client. The SSO token is dependent on the device as well as a sequence number. This effectively allows devices to be deauthorized (all SSO tokens become invalid) and mitigates replay (not effectively, though, which is why I'm asking this question) through the use of a sequence number, and uses a nonce.</p>

<p><strong>Problem</strong></p>

<p>With this solution, it's possible for someone to just copy the SSO and device tokens and use in another request. While the sequence number will help me detect such an abuse and thus deauthorize the device, the detection and response can only happen after the valid device and malicious request both attempt access, which is ample time for damage to be done.</p>

<p>I feel like using HMAC would be better. Track the device, the sequence, create a nonce, timestamp, and hash with a private key, then send the hash plus those values as plain text. Server does the same (in addition to validating the device and sequence) and compares. That seems much easier, and much more reliable.... assuming we can securely negotiate, exchange, and store private keys.</p>

<p><strong>Question</strong></p>

<p>So then, how can I securely negotiate a private key for authorized device, and then securely store that key? Is it more possible, at least, if I settle for storing the private key using local storage or flash cookies and just say it's ""good enough""? Or, is there something I can do to my original draft to mitigate the vulnerability I describe?</p>
","<p>I suspect you are asking for more security than the system, as described, can provide. Put simply, if you can't control the client, it can (mis)use the SSO and device tokens in myriad (unintended) ways, as you are aware. It doesn't matter how well you design the other parts of your system; this is the Achilles heel of your system.</p>

<p>Put another way, in the system as you have described it, you are tasking and trusting the client's web browser to provide its device token and SSO token. Right? If so, how can you prevent the movement of these tokens to other devices? (See mitigation strategies, below.)</p>

<p>Now, to answer your questions head-on with this in mind:</p>

<blockquote>
  <p>""So then, how can I securely negotiate a private key for authorized 
  device, and then securely store that key?""</p>
</blockquote>

<p>It doesn't hurt to do this, but it isn't going to help, as I explain above.</p>

<blockquote>
  <p>""Is it more possible, at least, if I settle for storing the private key using 
  local storage or flash cookies and just say it's ""good enough""?</p>
</blockquote>

<p>I can't tell you what ""good enough"" is. You should clearly communicate the ""moving tokens"" attack and help the customer make an informed decision.</p>

<blockquote>
  <p>""Or, is there something I can do to my original draft to mitigate the vulnerability I describe?""</p>
</blockquote>

<p>There are certainly mitigation strategies that depend on your user install base and your tolerance for risk.</p>

<p>The key question, as I see it -- think about the skills and abilities the kind of person who might move tokens from one machine to another -- can your mitigation strategy make a significant dent in that behavior without degrading the system performance and usability for ""honest"" users?</p>

<p>Here are some ideas:</p>

<ul>
<li><p>You could use two factor authentication, such as RSA SecurID. This won't prevent the moving of machine tokens, but it would require that the TFA move with it.</p></li>
<li><p>You can try to obfuscate or hide the local copies of these tokens, but this seems like security through obscurity only.</p></li>
<li><p>You could check a machine's MAC address. If it is harder to clone a MAC address than move a device token, this might be a useful layer of security.</p></li>
<li><p>You could try to require usage of certain customized browsers that ""lock down"" access to these tokens. This is just an idea; I don't know if it is practical.</p></li>
<li><p>If you know that machines are not physically supposed to move, you could examine network properties to look for evidence that a machine is in a different network location, and thus, physical location.</p></li>
<li><p>If you query and store (on the server, not the client) computer configuration information, you could detect if a token moves from one machine with one configuration to a machine with a different one. (This approach, of course, would complain when a machine gets upgraded.)</p></li>
<li><p>Instead of storing local device tokens, you could require the installation of an application that provides an authentication API to the web application. This application could embed itself somewhere on the computer that is hard to hack, root out, or move. (In this way, this application would provide a ""two-factor authentication"" system <em>for the machine</em>.)</p></li>
<li><p>In concert with, or separately from the above idea, You could install a separate ""phone home"" application on the device. It would ""check in"" from time to time with your server. If it changes network location, device configuration, or stops responding you could deny access accordingly.</p></li>
</ul>

<p>I hope this helps. I don't consider myself a security expert, but I enjoy thinking through design problems. You might get some better responses if you ask over at <a href=""https://security.stackexchange.com/"">https://security.stackexchange.com/</a>)</p>
","11131049","3980","<authentication><security><hmac><one-time-password>","9","5","2","2012-06-21 16:10:50","11131049","0","3","","","","2012-06-12 03:59:55","","2017-03-17 13:14:46","2012-06-21 03:14:09"
"10990379","Authorizing a computer to access a web application","<p>I have a web application, and am tasked with adding secure sign-on to bolster security, akin to what Google has added to Google accounts. </p>

<p><strong>Use Case</strong></p>

<p>Essentially, when a user logs in, we want to detect if the user has previously authorized this computer. If the computer has not been authorized, the user is sent a one-time password (via email, SMS, or phone call) that they must enter, where the user may choose to remember this computer. In the web application, we will track authorized devices, allowing users to see when/where they logged in from that device last, and deauthorize any devices if they so choose.</p>

<p>We require a solution that is very light touch (meaning, requiring no client-side software installation), and works with Safari, Chrome, Firefox, and IE 7+ (unfortunately). We will offer x509 security, which provides adequate security, but we still need a solution for customers that can't or won't use x509.</p>

<p>My intention is to store authorization information using cookies (or, potentially, using local storage, degrading to flash cookies, and then normal cookies).</p>

<p><strong>At First Blush</strong></p>

<p><img src=""https://i.stack.imgur.com/bqGhw.png"" alt=""Initial secure sign-on sequence diagram"">
Track two separate values (local data or cookies): a hash representing a secure sign-on token, as well as a device token. Both values are driven (and recorded) by the web application, and dictated to the client. The SSO token is dependent on the device as well as a sequence number. This effectively allows devices to be deauthorized (all SSO tokens become invalid) and mitigates replay (not effectively, though, which is why I'm asking this question) through the use of a sequence number, and uses a nonce.</p>

<p><strong>Problem</strong></p>

<p>With this solution, it's possible for someone to just copy the SSO and device tokens and use in another request. While the sequence number will help me detect such an abuse and thus deauthorize the device, the detection and response can only happen after the valid device and malicious request both attempt access, which is ample time for damage to be done.</p>

<p>I feel like using HMAC would be better. Track the device, the sequence, create a nonce, timestamp, and hash with a private key, then send the hash plus those values as plain text. Server does the same (in addition to validating the device and sequence) and compares. That seems much easier, and much more reliable.... assuming we can securely negotiate, exchange, and store private keys.</p>

<p><strong>Question</strong></p>

<p>So then, how can I securely negotiate a private key for authorized device, and then securely store that key? Is it more possible, at least, if I settle for storing the private key using local storage or flash cookies and just say it's ""good enough""? Or, is there something I can do to my original draft to mitigate the vulnerability I describe?</p>
","<p>What about capturing the MAC address of the computer and storing that information in the database as well? MAC Address's as you know are unique to all computers, verses an IP address. </p>

<p><a href=""https://stackoverflow.com/questions/4467905/getting-mac-address-on-a-web-page-using-a-java-applet"">Getting MAC address on a web page using a Java applet</a></p>

<p>Looking online there are several ways to capture MAC addresses via webpages and applets. </p>
","11142309","3980","<authentication><security><hmac><one-time-password>","9","1","2","2012-06-21 16:10:50","11131049","0","3","","","","2012-06-12 03:59:55","","2017-05-23 12:25:22","2012-06-21 16:10:50"
"31808767","Android: Hmac SHA512 in java","<p>I have the following code in php:</p>

<pre><code>$binKey = pack(""H*"", $keyTest);
$hmac = strtoupper(hash_hmac($pbx_hash, $msg, $binKey));
</code></pre>

<p>How can i achieve the same in android (java).</p>

<p>I have tried few methods available for hmac sha512 but the result of php snippet is different from that of mine. </p>

<p>Thanks in advance</p>
","<p>You can check it with this one.In which i encrypt it using HmacSHA512 algorithm after that i encode it by using base64.    </p>

<pre><code>try {
            String secret = ""secret"";
            String message = ""Message"";

            Mac sha_HMAC = Mac.getInstance(""HmacSHA512"");

            SecretKeySpec secret_key = new SecretKeySpec(secret.getBytes(), ""HmacSHA512"");
            sha_HMAC.init(secret_key);

            String hash = Base64.encodeToString(sha_HMAC.doFinal(message.getBytes()), Base64.DEFAULT);
            System.out.println(hash);
            Log.e(""string is "",hash);

        }
        catch (Exception e){
            System.out.println(""Error"");
        }
</code></pre>
","31811859","3975","<android><encryption><hmac>","2","2","2","2016-03-30 08:11:57","","0","3","916299","","2015-08-05 08:35:57","2015-08-04 11:59:33","","","2015-08-04 14:21:02"
"31808767","Android: Hmac SHA512 in java","<p>I have the following code in php:</p>

<pre><code>$binKey = pack(""H*"", $keyTest);
$hmac = strtoupper(hash_hmac($pbx_hash, $msg, $binKey));
</code></pre>

<p>How can i achieve the same in android (java).</p>

<p>I have tried few methods available for hmac sha512 but the result of php snippet is different from that of mine. </p>

<p>Thanks in advance</p>
","<p>You can see the answer to the same question here : <a href=""https://stackoverflow.com/questions/11670542/java-hmac-sha512-generation"">java hmac/sha512 generation</a></p>

<p>I've searched for long time to see the correct answer. I give you the code, Maybe it will help someone else.</p>

<pre><code>private String generateHMAC( String datas )
{

    //                final Charset asciiCs = Charset.forName( ""utf-8"" );
    Mac mac;
    String result = """";
    try
    {
      final SecretKeySpec secretKey = new SecretKeySpec( DatatypeConverter.parseHexBinary(PayboxConstants.KEY), ""HmacSHA512"" );
        mac = Mac.getInstance( ""HmacSHA512"" );
        mac.init( secretKey );
        final byte[] macData = mac.doFinal( datas.getBytes( ) );
        byte[] hex = new Hex( ).encode( macData );
        result = new String( hex, ""ISO-8859-1"" );
    }
    catch ( final NoSuchAlgorithmException e )
    {
        AppLogService.error( e );
    }
    catch ( final InvalidKeyException e )
    {
        AppLogService.error( e );
    }
    catch ( UnsupportedEncodingException e )
    {
        AppLogService.error( e );
    }

    return result.toUpperCase( );

}
</code></pre>
","36302749","3975","<android><encryption><hmac>","2","0","2","2016-03-30 08:11:57","","0","3","916299","","2015-08-05 08:35:57","2015-08-04 11:59:33","","2017-05-23 12:34:28","2016-03-30 07:50:54"
"6322349","One-Time-Password (OTP) C# to Java conversion of Code","<p>I wrote an One-Time-Password (OTP) generator in C# last year. Now I need to use an OTP generator in Java but I couldn't find the equivalent functions in Java.</p>

<p>Here is the code I wrote last year: (I know this OTP's security is low but I don't need a bullet-proof one)</p>

<pre><code>SHA1CryptoServiceProvider hash = new SHA1CryptoServiceProvider(); //first hash with sha1
byte[] hashPass = hash.ComputeHash(Encoding.ASCII.GetBytes(pass)); //pass is entered by user
HMACMD5 hma = new HMACMD5(hashPass); // use the hashed value as a key to hmac
OTPass = hma.ComputeHash(Encoding.ASCII.GetBytes(email + Counter(email)));// generate OTPass, Counter(email) is the counter of the user taken from database
increaseCounter(email); // updating the counter
this.SetLog(this.GetLog() + Environment.NewLine + ""OTPass Generated: "" + BitConverter.ToString(OTPass)); // OTP
</code></pre>

<p>Here is the Java code I tried to convert C# into: (This is just the SHA1 part, I couldn't find how to write HMAC-MD5 in Java)</p>

<pre><code>import java.io.*;
import java.security.*;

public class otp {

/**
 * @param args
 * @throws IOException 
 */
public static void main(String[] args) throws IOException {

    System.out.println(""Please enter your username:"");
    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    String username = br.readLine();
    System.out.println(""Please enter your password:"");
    String password = br.readLine();

    try {
         MessageDigest md = MessageDigest.getInstance(""SHA1"");

         String input = password;
         md.update(input.getBytes()); 
         byte[] output = md.digest();
         System.out.println();
         System.out.println(""SHA1(\""""+input+""\"") ="");
         System.out.println(""   ""+bytesToHex(output));


      } catch (Exception e) {
         System.out.println(""Exception: ""+e);
      }
   }
   public static String bytesToHex(byte[] b) {
      char hexDigit[] = {'0', '1', '2', '3', '4', '5', '6', '7',
                         '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'};
      StringBuffer buf = new StringBuffer();
      for (int j=0; j&lt;b.length; j++) {
         buf.append(hexDigit[(b[j] &gt;&gt; 4) &amp; 0x0f]);
         buf.append(hexDigit[b[j] &amp; 0x0f]);
      }
      return buf.toString();        
}
}
</code></pre>

<p>Thanks for help</p>
","<p>I have always used <a href=""http://www.bouncycastle.org/java.html"">BouncyCastle</a></p>

<p>You can have a look at a few of these pages:</p>

<p><a href=""http://147.91.177.212/extra/java2/apis/bc138_docs1.5/org/bouncycastle/crypto/macs/HMac.html"">BouncyCastle HMac</a></p>

<p><a href=""http://www.bouncycastle.org/specifications.html"">BouncyCastle Specs</a></p>

<p>Or to stick with Java 6:</p>

<pre><code>Mac hmacMd5 = Mac.getInstance(""HMACMD5"");
</code></pre>
","6322406","3948","<c#><java><md5><hmac>","6","8","1","2013-02-03 18:59:55","6322406","1","6","553308","","2011-06-12 14:14:35","2011-06-12 14:01:02","","2011-06-12 14:19:03","2011-06-12 14:12:35"
"6968734","How to calculate HMAC SHA on Windows?","<p>I need to calculate HMAC SHA in my program on Windows. This program earlier used to run on linux where it used the openssl. Now I need to port it to Windows, but I am not sure if Windows platform SDK provides any means to calculate the HMAC SHA.</p>

<p>I cam across the following link on msdn, but I am not sure - <a href=""http://msdn.microsoft.com/en-us/library/aa382453(v=VS.85).aspx"" rel=""nofollow"">http://msdn.microsoft.com/en-us/library/aa382453(v=VS.85).aspx</a>.</p>

<p>Let me know what is the best way ahead for me. The existing program is in C.</p>
","<p>IF you want to use the API included in the OS then the link you found is ok - more information see <a href=""http://msdn.microsoft.com/en-us/library/aa380255%28v=vs.85%29.aspx"" rel=""nofollow"">http://msdn.microsoft.com/en-us/library/aa380255%28v=vs.85%29.aspx</a></p>

<p>Or are you looking for some 3rd-party lib with some specific features ? if you are already familiar with with openssl, it is available for Windows too... see <a href=""http://www.slproweb.com/products/Win32OpenSSL.html"" rel=""nofollow"">http://www.slproweb.com/products/Win32OpenSSL.html</a></p>
","6968769","3928","<windows><hmac><sha>","0","0","3","2015-09-03 00:03:57","","0","","","","","2011-08-06 18:19:20","","","2011-08-06 18:26:24"
"6968734","How to calculate HMAC SHA on Windows?","<p>I need to calculate HMAC SHA in my program on Windows. This program earlier used to run on linux where it used the openssl. Now I need to port it to Windows, but I am not sure if Windows platform SDK provides any means to calculate the HMAC SHA.</p>

<p>I cam across the following link on msdn, but I am not sure - <a href=""http://msdn.microsoft.com/en-us/library/aa382453(v=VS.85).aspx"" rel=""nofollow"">http://msdn.microsoft.com/en-us/library/aa382453(v=VS.85).aspx</a>.</p>

<p>Let me know what is the best way ahead for me. The existing program is in C.</p>
","<p>If you have the key explicitly, it may be easier to program HMAC explicitly out of two invocations of the SHA primitive than to try to get make the key known to the Windows crypto API. HMAC itself is specified in RFC 2104, and Windows can do the SHA hashes for you with CryptCreateHash, CryptHashData and CryptGetHashParam.</p>
","6968796","3928","<windows><hmac><sha>","0","2","3","2015-09-03 00:03:57","","0","","","","","2011-08-06 18:19:20","","","2011-08-06 18:30:57"
"6968734","How to calculate HMAC SHA on Windows?","<p>I need to calculate HMAC SHA in my program on Windows. This program earlier used to run on linux where it used the openssl. Now I need to port it to Windows, but I am not sure if Windows platform SDK provides any means to calculate the HMAC SHA.</p>

<p>I cam across the following link on msdn, but I am not sure - <a href=""http://msdn.microsoft.com/en-us/library/aa382453(v=VS.85).aspx"" rel=""nofollow"">http://msdn.microsoft.com/en-us/library/aa382453(v=VS.85).aspx</a>.</p>

<p>Let me know what is the best way ahead for me. The existing program is in C.</p>
","<p>You can use <code>CryptImportKey</code>to get your key into the Windows Cryptographic Service Provider. Then follow the <a href=""https://msdn.microsoft.com/en-us/library/windows/desktop/aa382379%28v=vs.85%29.aspx"" rel=""nofollow"">MSDN example HMAC</a> code. The trick to getting your key into the CSP is to make a struct to hold 3 things: a <code>BLOBHEADER</code>, a <code>DWORD</code> for the length, and char[] for the key. I will presume you have the raw key data so it would look something like:</p>

<pre><code>struct KeyData
{
  BLOBHEADER hdr;
  unsigned long keyLength;
  unsigned char key[128];
};

void ComputeHash()
{
  HCRYPTPROV cryptoProvider = 0;
  HCRYPTKEY cryptKey = 0;
  KeyData kd;
  kd.hdr.aiKeyAlg = CALG_RC2;
  kd.hdr.bType = PLAINTEXTKEYBLOB;
  kd.hdr.bVersion = CUR_BLOB_VERSION;
  kd.hdr.reserved = 0;
  kd.keyLength = 128;
  /* set your key data here */
  /* get a crypto provider - See the microsoft references */
  CryptImportKey(cryptoProvider, reinterpret_cast&lt;BYTE*&gt;(&amp;kd), sizeof(kd),0, CRYPT_IPSEC_HMAC_KEY, &amp;cryptKey);
  /* use cryptKey in the call to CryptCreateHash when you create your CALG_HMAC */
}
</code></pre>

<p>Make sure to replace the lengths with the actual length of your key.</p>
","32365048","3928","<windows><hmac><sha>","0","2","3","2015-09-03 00:03:57","","0","","","","","2011-08-06 18:19:20","","","2015-09-03 00:03:57"
"569683","HMACSHA1.ComputeHash() thread-safety question","<p>i am asking myself if it would be dangerous on a asp.net page´s codebehind to use an static (Shared) variable which holds an HMACSHA1-instance. the problem is that the same HMACSHA1-instance would be used by all the asp.net worker-process´ threads when processing multiple simultaneous requests on the same asp.net-page. 
all (HMACSHA1)instance- and ComputeHash()-method variables which are used/modified by ComputeHash() would be shared (= could be modified) by all the threads?! is that assumption correct? 
as a result the return value of ComputeHash would not be guaranteed to be correct?!?!
thus i am not allowed to use an static/Shared HMACSHA1-instance over all the asp.net-threads..</p>

<p>i am just wondering what you think about this problem. </p>

<p>the only solution to this would be sth like an critical path etc in the ComputeHash()-method. but that is ""out of our reach""..</p>

<p>regards,
kris</p>
","<p>Hashing algorithms are deterministic, they <strong>must</strong> return the same hash for a given input every time.</p>

<p>As long as you use the same key each time then there's no need to make them static. However if you're constructing the HMACSHA1 instance with the parameterless constructor then it generates a random key. You should be taking the random value from the KeyValue property and storing it with the hash.</p>

<p>It is definitely dangerous to use a static instance. If Thread1 sets the value to be calculated, and then Thread2 sets the value before Thread1 calls ComputerHash() then Thread1 is going to get the hash of Thread2's value. The same will happen if either thread is setting the key.</p>
","569704","3777","<asp.net><hmac><sha1>","5","5","4","2014-11-11 07:21:28","569704","0","1","4203","Hank Gay","2009-02-20 14:17:38","2009-02-20 14:12:38","","","2009-02-20 14:22:02"
"569683","HMACSHA1.ComputeHash() thread-safety question","<p>i am asking myself if it would be dangerous on a asp.net page´s codebehind to use an static (Shared) variable which holds an HMACSHA1-instance. the problem is that the same HMACSHA1-instance would be used by all the asp.net worker-process´ threads when processing multiple simultaneous requests on the same asp.net-page. 
all (HMACSHA1)instance- and ComputeHash()-method variables which are used/modified by ComputeHash() would be shared (= could be modified) by all the threads?! is that assumption correct? 
as a result the return value of ComputeHash would not be guaranteed to be correct?!?!
thus i am not allowed to use an static/Shared HMACSHA1-instance over all the asp.net-threads..</p>

<p>i am just wondering what you think about this problem. </p>

<p>the only solution to this would be sth like an critical path etc in the ComputeHash()-method. but that is ""out of our reach""..</p>

<p>regards,
kris</p>
","<p>I just got an unknown cryptographic exception form the SHA256Cng.ComputeHash, when running 8 or 16 parallel tasks that amongst other things performed the hash computation, on a quad-core HT cpu.</p>

<p>Adding locking semantics around ComputeHash solved the issue - so it seems that at least the SHA256Cng version is not thread safe.</p>
","8115633","3777","<asp.net><hmac><sha1>","5","8","4","2014-11-11 07:21:28","569704","0","1","4203","Hank Gay","2009-02-20 14:17:38","2009-02-20 14:12:38","","","2011-11-13 23:27:02"
"569683","HMACSHA1.ComputeHash() thread-safety question","<p>i am asking myself if it would be dangerous on a asp.net page´s codebehind to use an static (Shared) variable which holds an HMACSHA1-instance. the problem is that the same HMACSHA1-instance would be used by all the asp.net worker-process´ threads when processing multiple simultaneous requests on the same asp.net-page. 
all (HMACSHA1)instance- and ComputeHash()-method variables which are used/modified by ComputeHash() would be shared (= could be modified) by all the threads?! is that assumption correct? 
as a result the return value of ComputeHash would not be guaranteed to be correct?!?!
thus i am not allowed to use an static/Shared HMACSHA1-instance over all the asp.net-threads..</p>

<p>i am just wondering what you think about this problem. </p>

<p>the only solution to this would be sth like an critical path etc in the ComputeHash()-method. but that is ""out of our reach""..</p>

<p>regards,
kris</p>
","<p>If you want thread safety without locking, you can use the ThreadStatic attribute to create a unique instance on each thread like this:</p>

<pre><code>[ThreadStatic]
private static HMACSHA1 _hmacSha1;

public static HMACSHA1 HmacSha1
{
    get 
    {
        if (_hmacSha1 == null)
        {
            // this will happen once on each thread
            _hmacSha1 = new HMACSHA1(GetKeyBytes());
        }               

        return _hmacSha1;
    }
}
</code></pre>

<p>Now, two side notes:</p>

<ol>
<li><p>Accessing a thread-static field takes significantly longer than accessing a normal static field. So the thread-static version may or may not be better for you. </p></li>
<li><p>If you're doing this once per page request, then the difference will be so minuscule that it won't matter which approach you choose. If you were doing this in a very tight loop, or the code in your lock section took a very long time, then the choice could be important.</p></li>
</ol>
","26184035","3777","<asp.net><hmac><sha1>","5","1","4","2014-11-11 07:21:28","569704","0","1","4203","Hank Gay","2009-02-20 14:17:38","2009-02-20 14:12:38","","","2014-10-03 17:46:33"
"569683","HMACSHA1.ComputeHash() thread-safety question","<p>i am asking myself if it would be dangerous on a asp.net page´s codebehind to use an static (Shared) variable which holds an HMACSHA1-instance. the problem is that the same HMACSHA1-instance would be used by all the asp.net worker-process´ threads when processing multiple simultaneous requests on the same asp.net-page. 
all (HMACSHA1)instance- and ComputeHash()-method variables which are used/modified by ComputeHash() would be shared (= could be modified) by all the threads?! is that assumption correct? 
as a result the return value of ComputeHash would not be guaranteed to be correct?!?!
thus i am not allowed to use an static/Shared HMACSHA1-instance over all the asp.net-threads..</p>

<p>i am just wondering what you think about this problem. </p>

<p>the only solution to this would be sth like an critical path etc in the ComputeHash()-method. but that is ""out of our reach""..</p>

<p>regards,
kris</p>
","<p>It worth to know that <code>KeyedHashAlgorithm.ComputeHash()</code> is not thread safe because it give non-deterministic result for the same <code>KeyedHashAlgorithm.Key</code>.</p>

<p>In my case, I want to cache KeyedHashAlgorithm since my <code>KeyedHashAlgorithm.Key</code> is always the same to verify the <strong>authenticity</strong> from client side. I realize that <code>ComputeHash()</code> is not consistent, probably it cache internal variable into the <code>KeyedHashAlgorithm</code> instance. I should cache the instance per thread <code>ThreadStatic</code> or <code>ThreadLocal</code>. This is the test:</p>

<p>Static <code>KeyedHashAlgorithm</code> gives inconsistent result:</p>

<pre><code>var kha = KeyedHashAlgorithm.Create(""HMACSHA256"");
kha.Key = Encoding.UTF8.GetBytes(""key"");
Action comp = () =&gt;
{
    var computed = kha.ComputeHash(Encoding.UTF8.GetBytes(""message""));
    Console.WriteLine(Convert.ToBase64String(computed));
};
Parallel.Invoke(comp, comp, comp, comp, comp, comp, comp, comp);
</code></pre>

<p>Compared to <code>KeyedHashAlgorithm</code> per thread:</p>

<pre><code>ThreadLocal&lt;KeyedHashAlgorithm&gt; tl= new ThreadLocal&lt;KeyedHashAlgorithm&gt;(() =&gt;
{
    var kha = KeyedHashAlgorithm.Create(""HMACSHA256"");
    kha.Key = Encoding.UTF8.GetBytes(""key"");
    return kha;
});
Action comp = () =&gt;
{
    var computed = tl.Value.ComputeHash(Encoding.UTF8.GetBytes(""message""));
    Console.WriteLine(Convert.ToBase64String(computed));
};
Parallel.Invoke(comp, comp, comp, comp, comp, comp, comp, comp);
</code></pre>

<p>This code can be use to test other functions for 'thread safety' result. Hope this will help others.</p>
","26859605","3777","<asp.net><hmac><sha1>","5","4","4","2014-11-11 07:21:28","569704","0","1","4203","Hank Gay","2009-02-20 14:17:38","2009-02-20 14:12:38","","","2014-11-11 07:21:28"
"36037935","NodeJS crypto.createHmac SHA256 not working properly","<p>I'm currently trying to implement the authentication part of a library we're using but I've stumbled upon a weird issue with the signing of the data, the output of crypto.createHmac in NodeJS is roughly half the size of that of hash_hmac in PHP and this is the only part of the data which differs between PHP and NodeJS (and we need to use NodeJS here)</p>

<p>The exact code used for creating the signature in NodeJS is,</p>

<pre><code>authorization[""oauth_signature""] = crypto.createHmac('SHA256', process.env.SECRET).update(toSign).digest('base64');
</code></pre>

<p>And for PHP it is</p>

<pre><code>$authorization[""oauth_signature""] = base64_encode(hash_hmac(""SHA256"", $signatureString . $signingKey, $secret));
</code></pre>

<p>However the output of the NodeJS version is</p>

<pre><code>7LkQP+qKR1gSdPq/AgH/3No3ps7EtZXnqwjivMixvM8=
</code></pre>

<p>And for PHP it is</p>

<pre><code>NmQ0MWIzYmJiMjI2YzFlMDhiYzY3NzVmMWY0MzEwNDlhNDU3NDI0ZGJlMzU3NjJhYmMwYjgwYzZjMDE4NDM4OA==
</code></pre>

<p>Which has more then double the data</p>

<p>Do I have to use a different library for the NodeJS version rather then the build in one? We're hosting our NodeJS backend on Microsoft Azure btw, not sure if this is related but seems at least valid to mention.</p>

<p>Edit:</p>

<p>I've found the issue, hash_hmac in PHP automatically exports it's data as hexidecimal data, crypto.createHmac exports it's data as raw binary data which I directly converted into base64, all I needed to do was first export the data to hex and then convert that to base64.</p>
","<p>Try this;</p>

<pre><code>var crypto = require('crypto');
var s = 'The quick brown fox jumps over the lazy dog';
console.log(
    new Buffer(
        crypto.createHmac('SHA256', 'SECRET').update(s).digest('hex')
    ).toString('base64')
);
</code></pre>

<p><a href=""https://repl.it/Bwsn/0"" rel=""noreferrer"">DEMO</a></p>

<p>PHP equivalent;</p>

<pre><code>base64_encode(hash_hmac(""SHA256"",'The quick brown fox jumps over the lazy dog', 'SECRET'))
</code></pre>
","36038378","3776","<php><node.js><azure><sha256><hmac>","2","5","2","2016-09-09 14:10:36","36038378","0","1","4989676","","2016-03-17 01:47:23","2016-03-16 14:02:47","","","2016-03-16 14:20:15"
"36037935","NodeJS crypto.createHmac SHA256 not working properly","<p>I'm currently trying to implement the authentication part of a library we're using but I've stumbled upon a weird issue with the signing of the data, the output of crypto.createHmac in NodeJS is roughly half the size of that of hash_hmac in PHP and this is the only part of the data which differs between PHP and NodeJS (and we need to use NodeJS here)</p>

<p>The exact code used for creating the signature in NodeJS is,</p>

<pre><code>authorization[""oauth_signature""] = crypto.createHmac('SHA256', process.env.SECRET).update(toSign).digest('base64');
</code></pre>

<p>And for PHP it is</p>

<pre><code>$authorization[""oauth_signature""] = base64_encode(hash_hmac(""SHA256"", $signatureString . $signingKey, $secret));
</code></pre>

<p>However the output of the NodeJS version is</p>

<pre><code>7LkQP+qKR1gSdPq/AgH/3No3ps7EtZXnqwjivMixvM8=
</code></pre>

<p>And for PHP it is</p>

<pre><code>NmQ0MWIzYmJiMjI2YzFlMDhiYzY3NzVmMWY0MzEwNDlhNDU3NDI0ZGJlMzU3NjJhYmMwYjgwYzZjMDE4NDM4OA==
</code></pre>

<p>Which has more then double the data</p>

<p>Do I have to use a different library for the NodeJS version rather then the build in one? We're hosting our NodeJS backend on Microsoft Azure btw, not sure if this is related but seems at least valid to mention.</p>

<p>Edit:</p>

<p>I've found the issue, hash_hmac in PHP automatically exports it's data as hexidecimal data, crypto.createHmac exports it's data as raw binary data which I directly converted into base64, all I needed to do was first export the data to hex and then convert that to base64.</p>
","<p>In the case of Azure you mentioned the keys are supplied in Base64 format. With the cryto library for node I found it worked when I passed in the key as a Buffer. Azure Authorization Signature header node code sample below:</p>

<pre><code>const util = require('util');
const crypto = require('crypto');
var accountName = ""YOUR_ACCOUNT_NAME"";
var key = Buffer(""YOUR_BASE64_KEY"",'base64');
var hash = crypto.createHmac('sha256',key).update(stringToSign,'utf8').digest('base64');
var signature = util.format(""%s:%s"", accountName, hash);
var authorization = util.format(""SharedKey %s"", signature);
</code></pre>
","39413573","3776","<php><node.js><azure><sha256><hmac>","2","0","2","2016-09-09 14:10:36","36038378","0","1","4989676","","2016-03-17 01:47:23","2016-03-16 14:02:47","","","2016-09-09 14:10:36"
"51154233","How to decrypt of the encrypted value in dart?","<p>I am testing the Cryptographic hashing functions for Dart.  I can't find any information about DECRYPTION?
Can anyone show me how to decryption of the encrypted value?</p>

<p>And this is example;</p>

<pre><code>import 'dart:convert';
import 'package:crypto/crypto.dart'; 

void main() async { 
  var key = utf8.encode('p@ssw0rd'); 
  var bytes = utf8.encode(""Dart and Aqueduct makes my life easier. Thank you.""); 


  // TODO: ENCRYPTION 
  var hmacSha256 = new Hmac(sha256, key); // HMAC-SHA256 
  var digest = hmacSha256.convert(bytes); 
 
  print(“————ENCRYPTION—————“); 
  print(""HMAC digest as bytes: ${digest.bytes}""); 
  print(""HMAC digest as hex string: $digest""); 
  print('\r\n'); 


  // TODO: DECRYPTION 
     ???????????? 
  print(“————DECRYPTION—————“); 
  print(?????????); 

}
</code></pre>
","<p>An HMAC is a message authentication code. It is a digest used to verify that a message has not been tampered with, similar to a signature. It is constructed using a <em>one-way</em> hash function, in this case SHA256. It is not an encryption, and it cannot be reversed, therefore the value you have <em>cannot</em> be decrypted.</p>

<p>The only thing you can do with an HMAC is, given the HMAC and the corresponding plain-text, verifying the origin of the plain-text and that it has not been tampered with.</p>

<p>Looking at the <a href=""https://github.com/dart-lang/crypto"" rel=""nofollow noreferrer"">GitHub page for the Dart crypto library</a>, it looks like it <em>only</em> supports digest algorithms. There are no encryption algorithms listed, so you will need to use a different library if you want to do two-way encryption which can actually be decrypted. The <a href=""http://izaera.github.io/cipher/"" rel=""nofollow noreferrer"">Cipher</a> library looks like it could be promising in this regard.</p>
","51155757","3738","<encryption><dart><sha256><hmac>","0","0","3","2018-07-04 04:49:20","51155757","0","","","","","2018-07-03 12:06:58","","","2018-07-03 13:23:30"
"51154233","How to decrypt of the encrypted value in dart?","<p>I am testing the Cryptographic hashing functions for Dart.  I can't find any information about DECRYPTION?
Can anyone show me how to decryption of the encrypted value?</p>

<p>And this is example;</p>

<pre><code>import 'dart:convert';
import 'package:crypto/crypto.dart'; 

void main() async { 
  var key = utf8.encode('p@ssw0rd'); 
  var bytes = utf8.encode(""Dart and Aqueduct makes my life easier. Thank you.""); 


  // TODO: ENCRYPTION 
  var hmacSha256 = new Hmac(sha256, key); // HMAC-SHA256 
  var digest = hmacSha256.convert(bytes); 
 
  print(“————ENCRYPTION—————“); 
  print(""HMAC digest as bytes: ${digest.bytes}""); 
  print(""HMAC digest as hex string: $digest""); 
  print('\r\n'); 


  // TODO: DECRYPTION 
     ???????????? 
  print(“————DECRYPTION—————“); 
  print(?????????); 

}
</code></pre>
","<p>PointyCastle (<a href=""https://pub.dartlang.org/packages/pointycastle"" rel=""nofollow noreferrer"">https://pub.dartlang.org/packages/pointycastle</a>) has been recommended in the past, but it appears to have not yet been updated for Dart 2. :(</p>
","51164263","3738","<encryption><dart><sha256><hmac>","0","1","3","2018-07-04 04:49:20","51155757","0","","","","","2018-07-03 12:06:58","","","2018-07-04 00:12:17"
"51154233","How to decrypt of the encrypted value in dart?","<p>I am testing the Cryptographic hashing functions for Dart.  I can't find any information about DECRYPTION?
Can anyone show me how to decryption of the encrypted value?</p>

<p>And this is example;</p>

<pre><code>import 'dart:convert';
import 'package:crypto/crypto.dart'; 

void main() async { 
  var key = utf8.encode('p@ssw0rd'); 
  var bytes = utf8.encode(""Dart and Aqueduct makes my life easier. Thank you.""); 


  // TODO: ENCRYPTION 
  var hmacSha256 = new Hmac(sha256, key); // HMAC-SHA256 
  var digest = hmacSha256.convert(bytes); 
 
  print(“————ENCRYPTION—————“); 
  print(""HMAC digest as bytes: ${digest.bytes}""); 
  print(""HMAC digest as hex string: $digest""); 
  print('\r\n'); 


  // TODO: DECRYPTION 
     ???????????? 
  print(“————DECRYPTION—————“); 
  print(?????????); 

}
</code></pre>
","<p>Well actually searching a lot couldn't find anything better than this. The <strong>encrypt 0.2.0</strong> new and has Dart 2 support. <a href=""https://pub.dartlang.org/packages/encrypt#-installing-tab-"" rel=""nofollow noreferrer"">https://pub.dartlang.org/packages/encrypt#-installing-tab-</a></p>

<p>I need to something that makes My Flutter Mobile App and Aqueduct can share secure communication. Leo Cavalcante is a great guy. While we were talking yesterday he comes up quick answer. So this is another love of Dart. Because every people support each other.</p>

<p>It Supports:
    AES (Block Cipher)
    Salsa20 (Stream Cipher)
    RSA (Asymmetric) (working)</p>

<p>Use this package as a library</p>

<ol>
<li><strong>Depend on it</strong>
Add this to your package's pubspec.yaml file:</li>
</ol>

<p>dependencies:
  encrypt: ""^0.2.0""</p>

<ol start=""2"">
<li>Install it
You can install packages from the command line:
<strong>with pub:</strong></li>
</ol>

<p>$ pub get</p>

<p><strong>with Flutter:</strong></p>

<p>$ flutter packages get</p>

<p>Alternatively, your editor might support pub get or flutter packages get. Check the docs for your editor to learn more.</p>

<ol start=""3"">
<li><strong>Import it</strong>
Now in your Dart code, you can use:
  import 'package:encrypt/encrypt.dart';</li>
</ol>
","51165944","3738","<encryption><dart><sha256><hmac>","0","1","3","2018-07-04 04:49:20","51155757","0","","","","","2018-07-03 12:06:58","","","2018-07-04 04:49:20"
"5579559","How to implement hash_hmac properly?","<p>Reading <a href=""https://stackoverflow.com/questions/401656/secure-hash-and-salt-for-php-passwords/401684#401684"">this excellent answer</a> about password hashing and wondering how to implement it:</p>

<p><a href=""https://stackoverflow.com/users/24950/the-wicked-flea"">The Wicked Flea</a> wrote:</p>

<blockquote>
  <p>Generate a nonce for each user; this alone defeats the rainbow table. This is a random number that, depending on the range, expands how many resulting hashes there are.</p>
</blockquote>

<p><em>So beside users' password store a unique token in my database?</em></p>

<p>The example code in the original post:</p>

<pre><code>function hash_password($password, $nonce) {
  global $site_key;
  return hash_hmac('sha512', $password . $nonce, $site_key);
}
</code></pre>

<p><em>How can i verify a password with this code? Let me explain:</em></p>

<p>When user submits his password i need to generate it's hash to check for an existing database row where email address <strong>and</strong> hashed password match. How can i select this row when i know nothing about users' <code>$nonce</code>? Am i missing something? Maybe i need to select user by only his e-mail address then verify the password hash later?</p>

<p>Btw, do you recommend this hashing method?</p>
","<p>I think you have nailed the idea. The same concept is applied in general UNIX-style salted passwords - store salt in clear text with password and retrieve it by username, then use the salt and provided password to produce new hash to be compared to the stored value.</p>

<p>It is up to you to consider wether you trust your DB server (and the connection to it) to use a hashing algorithm that is supported by the DB and let the DB do the math:</p>

<pre><code>SELECT * FROM users WHERE email = 'email' AND password = SHA1(CONCAT('cleartextpass',nonce));
</code></pre>

<p>Or you could do the math in the code after retrieving all the matching emails.</p>

<p><strong>EDIT</strong>: The ThiefMaster comment on differentiating between <em>missing user</em> and <em>invalid password</em> is classical security flaw, which allows attackers to acquire a list of <strong>valid</strong> usernames and concentrate on breaking their passwords instead of fishing in the darkness. I would strongly recommend <em>against</em> it.</p>
","5579739","3611","<php><hash><passwords><hmac>","3","3","1","2011-04-07 18:40:41","5579739","5","2","-1","","2017-05-23 11:47:41","2011-04-07 10:22:53","","2011-04-07 10:44:25","2011-04-07 10:37:46"
"13254907","How can I create a matching HMAC value to verify a Shopify WebHook in .NET?","<p>I have set up an endpoint to receive webhook requests from Shopify.</p>

<p>The requests from Shopify include an HMAC header that is created from a shared secret key and the body of the request.</p>

<p>I need to calculate the HMAC on my server and match it to the value in the request header to ensure that the request is authentic.</p>

<p>I can't seem to create the appropriate mechanism in .NET to create a matching HMAC value.</p>

<p>My algorithm at this point is as follows:</p>

<pre><code>public static string CreateHash(string data)
    {
        string sharedSecretKey = ""MY_KEY"";

        byte[] keyBytes = Encoding.UTF8.GetBytes(sharedSecretKey);
        byte[] dataBytes = Encoding.UTF8.GetBytes(data);

        //use the SHA256Managed Class to compute the hash
        System.Security.Cryptography.HMACSHA256 hmac = new HMACSHA256(keyBytes);
        byte[] hmacBytes = hmac.ComputeHash(dataBytes);

        //retun as base64 string. Compared with the signature passed in the header of the post request from Shopify. If they match, the call is verified.
        return System.Convert.ToBase64String(hmacBytes);
    }
</code></pre>

<p>The Shopify docs for verifying their webhooks can be found <a href=""http://wiki.shopify.com/Verifying_Webhooks"" rel=""nofollow"">HERE</a> but only PHP and Ruby samples are included.</p>

<p>Can anyone see what I might be doing wrong? Should I be just passing the entire JSON request body as a string into this method?</p>
","<p>As you allude to in your question, you should be hashing the entire json request body in your method.</p>

<p>My .NET isn't too good, but Here's the part of the ruby example that shows you what to do:</p>

<pre><code>post '/' do

  . . .

  data = request.body.read
  verified = verify_webhook(data, env[""HTTP_X_SHOPIFY_HMAC_SHA256""])

  . . .

end
</code></pre>

<p>You can see that we're just grabbing the body of the request (as a string) and throwing it into the verify method verbatim. Give it a try and hopefully you'll have more luck.</p>
","13290583","3588","<c#><.net><shopify><hmac><sha256>","4","2","3","2019-02-06 10:37:59","13290583","0","1","428632","","2012-11-07 14:05:01","2012-11-06 16:07:08","","","2012-11-08 14:08:01"
"13254907","How can I create a matching HMAC value to verify a Shopify WebHook in .NET?","<p>I have set up an endpoint to receive webhook requests from Shopify.</p>

<p>The requests from Shopify include an HMAC header that is created from a shared secret key and the body of the request.</p>

<p>I need to calculate the HMAC on my server and match it to the value in the request header to ensure that the request is authentic.</p>

<p>I can't seem to create the appropriate mechanism in .NET to create a matching HMAC value.</p>

<p>My algorithm at this point is as follows:</p>

<pre><code>public static string CreateHash(string data)
    {
        string sharedSecretKey = ""MY_KEY"";

        byte[] keyBytes = Encoding.UTF8.GetBytes(sharedSecretKey);
        byte[] dataBytes = Encoding.UTF8.GetBytes(data);

        //use the SHA256Managed Class to compute the hash
        System.Security.Cryptography.HMACSHA256 hmac = new HMACSHA256(keyBytes);
        byte[] hmacBytes = hmac.ComputeHash(dataBytes);

        //retun as base64 string. Compared with the signature passed in the header of the post request from Shopify. If they match, the call is verified.
        return System.Convert.ToBase64String(hmacBytes);
    }
</code></pre>

<p>The Shopify docs for verifying their webhooks can be found <a href=""http://wiki.shopify.com/Verifying_Webhooks"" rel=""nofollow"">HERE</a> but only PHP and Ruby samples are included.</p>

<p>Can anyone see what I might be doing wrong? Should I be just passing the entire JSON request body as a string into this method?</p>
","<pre><code>    private static bool Validate(string sharedSecretKey)
    {
        var data = GetStreamAsText(HttpContext.Current.Request.InputStream, HttpContext.Current.Request.ContentEncoding);
        var keyBytes = Encoding.UTF8.GetBytes(sharedSecretKey);
        var dataBytes = Encoding.UTF8.GetBytes(data);

        //use the SHA256Managed Class to compute the hash
        var hmac = new HMACSHA256(keyBytes);
        var hmacBytes = hmac.ComputeHash(dataBytes);

        //retun as base64 string. Compared with the signature passed in the header of the post request from Shopify. If they match, the call is verified.
        var hmacHeader = HttpContext.Current.Request.Headers[""x-shopify-hmac-sha256""];
        var createSignature = Convert.ToBase64String(hmacBytes);
        return hmacHeader == createSignature;
    }

    private static string GetStreamAsText(Stream stream, Encoding encoding)
    {
        var bytesToGet = stream.Length;
        var input = new byte[bytesToGet];
        stream.Read(input, 0, (int)bytesToGet);
        stream.Seek(0, SeekOrigin.Begin); // reset stream so that normal ASP.NET processing can read data
        var text = encoding.GetString(input);
        return text;
    }
</code></pre>
","21769990","3588","<c#><.net><shopify><hmac><sha256>","4","7","3","2019-02-06 10:37:59","13290583","0","1","428632","","2012-11-07 14:05:01","2012-11-06 16:07:08","","","2014-02-14 02:55:18"
"13254907","How can I create a matching HMAC value to verify a Shopify WebHook in .NET?","<p>I have set up an endpoint to receive webhook requests from Shopify.</p>

<p>The requests from Shopify include an HMAC header that is created from a shared secret key and the body of the request.</p>

<p>I need to calculate the HMAC on my server and match it to the value in the request header to ensure that the request is authentic.</p>

<p>I can't seem to create the appropriate mechanism in .NET to create a matching HMAC value.</p>

<p>My algorithm at this point is as follows:</p>

<pre><code>public static string CreateHash(string data)
    {
        string sharedSecretKey = ""MY_KEY"";

        byte[] keyBytes = Encoding.UTF8.GetBytes(sharedSecretKey);
        byte[] dataBytes = Encoding.UTF8.GetBytes(data);

        //use the SHA256Managed Class to compute the hash
        System.Security.Cryptography.HMACSHA256 hmac = new HMACSHA256(keyBytes);
        byte[] hmacBytes = hmac.ComputeHash(dataBytes);

        //retun as base64 string. Compared with the signature passed in the header of the post request from Shopify. If they match, the call is verified.
        return System.Convert.ToBase64String(hmacBytes);
    }
</code></pre>

<p>The Shopify docs for verifying their webhooks can be found <a href=""http://wiki.shopify.com/Verifying_Webhooks"" rel=""nofollow"">HERE</a> but only PHP and Ruby samples are included.</p>

<p>Can anyone see what I might be doing wrong? Should I be just passing the entire JSON request body as a string into this method?</p>
","<p>As an improvement to the above code, you can convert it to an attribute with a few minor changes:</p>

<pre><code>public class VerifyShopifyAttribute : ActionFilterAttribute
{
    private readonly string sharedSecret = ""abc"";

    public override void OnActionExecuting(HttpActionContext actionContext)
    {
        if (!ValidateHash(actionContext))
        {
            // reject the request with a 400 error
            var response = actionContext.Request.CreateErrorResponse(HttpStatusCode.BadRequest, ""Bad Request"");
            actionContext.Response = response;
        }
    }

    private bool ValidateHash(HttpActionContext actionContext)
    {
        var context = (HttpContextBase)actionContext.Request.Properties[""MS_HttpContext""];
        context.Request.InputStream.Seek(0, SeekOrigin.Begin);

        using (var stream = new MemoryStream())
        {
            context.Request.InputStream.CopyTo(stream);
            string requestBody = Encoding.UTF8.GetString(stream.ToArray());

            var keyBytes = Encoding.UTF8.GetBytes(sharedSecret);
            var dataBytes = Encoding.UTF8.GetBytes(requestBody);

            //use the SHA256Managed Class to compute the hash
            var hmac = new HMACSHA256(keyBytes);
            var hmacBytes = hmac.ComputeHash(dataBytes);

            //retun as base64 string. Compared with the signature passed in the header of the post request from Shopify. If they match, the call is verified.
            var hmacHeader = HttpContext.Current.Request.Headers[""x-shopify-hmac-sha256""];
            var createSignature = Convert.ToBase64String(hmacBytes);
            return hmacHeader == createSignature;
        }
    }
}
</code></pre>

<p>And then you can use it like so for all of your webhooks:</p>

<pre><code>[RoutePrefix(""api"")]
public class ShopifyWebHookController : ApiController
{
    [VerifyShopify]
    [HttpPost]
    public IHttpActionResult HandleWebhook(...)
    {
        ...
    }
}
</code></pre>
","54545381","3588","<c#><.net><shopify><hmac><sha256>","4","0","3","2019-02-06 10:37:59","13290583","0","1","428632","","2012-11-07 14:05:01","2012-11-06 16:07:08","","2019-02-06 10:37:59","2019-02-06 01:13:34"
"28453409","HMAC SHA256 macro in Excel","<p>I search ed through google, tech forums, etc.... but I couldn't find a good tutorial/guide that answer my question:</p>

<p>I have a Cell in Excel with Text, and a Cell with a Key(both text), is there a way to have an HMAC for EXCEL function that get both cell as input and return the hmac text ?</p>

<p>thanks in advance</p>
","<p>A quick search on Google revealed a HMAC-SHA256 class written in VB6, located here: <a href=""http://www.vbforums.com/showthread.php?635398-VB6-HMAC-SHA-256-HMAC-SHA-1-Using-Crypto-API"" rel=""nofollow"">http://www.vbforums.com/showthread.php?635398-VB6-HMAC-SHA-256-HMAC-SHA-1-Using-Crypto-API</a></p>

<p>Whilst this is for VB6 (and is native code), it should be straightforward to adapt for use with VBA. As it sounds that you need a worksheet function (i.e. UDF) then you will also need to write this, using the above class.</p>

<p>If you're happy to call .NET assemblies from VBA, then you can simplify your code as most of the calculation work is already done for you (see        System.Security.Cryptography, more specifically HMACSHA256). An example (for HMACSHA1, but the principle is the same) is given here: <a href=""https://stackoverflow.com/questions/8246340/does-vba-have-a-hash-hmac"">Does VBA have a Hash_HMAC</a>.</p>
","28453704","3579","<excel><vba><excel-vba><hmac><sha256>","1","3","1","2015-02-11 11:53:24","","3","","","","","2015-02-11 11:38:20","","","2015-02-11 11:53:24"
"5781753","Perl code to generate secret key for HMAC SHA256 signing?","<p>I'm planning to use code similar to <a href=""http://aws.amazon.com/code/2482?_encoding=UTF8&amp;queryArg=searchQuery&amp;x=0&amp;fromSearch=1&amp;y=0&amp;searchPath=code&amp;searchQuery=signed"" rel=""nofollow"">Amazon AWS samples</a> to authenticate signed API requests. So users will have something like:</p>

<pre><code>use Digest::SHA qw(hmac_sha256_base64);
my $digest = hmac_sha256_base64 ($request, $self-&gt;{SecretKey});
</code></pre>

<p>and attach <code>$digest</code> as a parameter to their request URI. The server-side will use the same algorithm to create a digest from the client URI and compare that to the value sent by the client.</p>

<p>What I can't find is <strong>Perl</strong> support for generating the SecretKey of the correct length to use when generating HMAC SHA256 digest. </p>

<p>For my Amazon AWS account I'm being given a 40 ASCII character base64 encoded string.  </p>

<p>How do I generate a proper secret-key for my clients?</p>
","<p>I suggest you use a PBKDF2 algorithm.  PBKDF2 = ""Password-based Key Derivation Function (#2)"".   It is defined in PKCS #5 (<a href=""http://www.faqs.org/rfcs/rfc2898.html"" rel=""nofollow"">RFC 2898</a>).   This is the recommended way to derive a key from a password.  You will need a salt, as well. A typical iteration count is 1000.  </p>

<p><a href=""http://www.ict.griffith.edu.au/anthony/software/"" rel=""nofollow"">This page</a> says it has a perl implementation of PBKDF2.  I haven't tried it. </p>

<p>Apparently there is also a <code>Crypto::PBKDF2</code>, but it is saddled with dependencies you may not want.</p>

<hr>

<p><strong>EDIT</strong>  </p>

<p>I just tried Anthony Thyssen's perl program for pbkdf2 - it works great. Simple, easy.</p>
","5781998","3575","<perl><hmac><sha256><secret-key>","2","1","1","2011-10-16 19:23:06","","0","","540162","","2011-10-16 19:23:06","2011-04-25 18:36:48","","2011-04-25 19:47:10","2011-04-25 18:59:54"
"31073068","Invalid signature with Bittrex API calls in C#","<p>I am trying to access my wallet balances in Bittrex via Bittrex's API calls, but for some reason I'm getting response message saying <code>INVALID_SIGNATURE</code>.</p>

<p>I use these functions to create the signature:</p>

<p><strong>GetNonce</strong></p>

<pre><code>private String GetNonce()
{
    long ms = (long)((DateTime.UtcNow - new DateTime(1970, 1, 1)).TotalSeconds);

    return ms.ToString();
}
</code></pre>

<p><strong>GetApiSignature</strong></p>

<pre><code>private String GetApiSignature(String key, String message)
{
    using (var hmacsha512 = new HMACSHA512(Encoding.UTF8.GetBytes(key)))
    {
        hmacsha512.ComputeHash(Encoding.UTF8.GetBytes(message));
        return string.Concat(hmacsha512.Hash.Select(b =&gt; b.ToString(""x2"")).ToArray());
    }       
}
</code></pre>

<p>Here's how I ""compile"" my calls:</p>

<pre><code>public String ApiQuery(String requestUrl)
{

    url = new Uri(requestUrl);
    webreq = WebRequest.Create(url);

    signature = GetApiSignature(apiSecret, requestUrl);
    webreq.Headers.Add(""apisign"", signature );

    webresp = webreq.GetResponse();
    stream = webresp.GetResponseStream();
    strRead = new StreamReader(stream);

    String rtn = strRead.ReadToEnd();

    return rtn;
}
</code></pre>

<p>I am getting a the same signature as the <a href=""https://github.com/ericsomdahl/python-bittrex/blob/master/bittrex/bittrex.py"" rel=""noreferrer"">python API wrapper</a> does with the same <code>url</code> and <code>nonce</code> etc., but cannot access my balances. When I do a call that doesn't require any signatures, it works just fine... Not sure at all what I'm doing wrong with this. </p>
","<p>Got the answer from elsewhere. Looks like my encoding was wrong, and it didn't work because of that (though I thought I tried other encoders...).</p>

<p>The correct encoding is ASCII, whereas I used UTF-8.</p>

<p>Here's the function I got:</p>

<pre><code>private string genHMAC(string secret, string url)
{
    var hmac = new HMACSHA512(Encoding.ASCII.GetBytes(secret));
    var messagebyte = Encoding.ASCII.GetBytes(url);
    var hashmessage = hmac.ComputeHash(messagebyte);
    var sign = BitConverter.ToString(hashmessage).Replace(""-"", """");

    return sign;
}
</code></pre>

<p>The problem is now solved and everything works as it should. :-)</p>
","31230096","3565","<c#><api><signature><hmac>","5","7","2","2018-07-18 12:14:57","31230096","0","","2559097","","2015-06-27 08:02:00","2015-06-26 12:21:24","","","2015-07-05 12:00:23"
"31073068","Invalid signature with Bittrex API calls in C#","<p>I am trying to access my wallet balances in Bittrex via Bittrex's API calls, but for some reason I'm getting response message saying <code>INVALID_SIGNATURE</code>.</p>

<p>I use these functions to create the signature:</p>

<p><strong>GetNonce</strong></p>

<pre><code>private String GetNonce()
{
    long ms = (long)((DateTime.UtcNow - new DateTime(1970, 1, 1)).TotalSeconds);

    return ms.ToString();
}
</code></pre>

<p><strong>GetApiSignature</strong></p>

<pre><code>private String GetApiSignature(String key, String message)
{
    using (var hmacsha512 = new HMACSHA512(Encoding.UTF8.GetBytes(key)))
    {
        hmacsha512.ComputeHash(Encoding.UTF8.GetBytes(message));
        return string.Concat(hmacsha512.Hash.Select(b =&gt; b.ToString(""x2"")).ToArray());
    }       
}
</code></pre>

<p>Here's how I ""compile"" my calls:</p>

<pre><code>public String ApiQuery(String requestUrl)
{

    url = new Uri(requestUrl);
    webreq = WebRequest.Create(url);

    signature = GetApiSignature(apiSecret, requestUrl);
    webreq.Headers.Add(""apisign"", signature );

    webresp = webreq.GetResponse();
    stream = webresp.GetResponseStream();
    strRead = new StreamReader(stream);

    String rtn = strRead.ReadToEnd();

    return rtn;
}
</code></pre>

<p>I am getting a the same signature as the <a href=""https://github.com/ericsomdahl/python-bittrex/blob/master/bittrex/bittrex.py"" rel=""noreferrer"">python API wrapper</a> does with the same <code>url</code> and <code>nonce</code> etc., but cannot access my balances. When I do a call that doesn't require any signatures, it works just fine... Not sure at all what I'm doing wrong with this. </p>
","<p>Look at this function it is working fine for me and tested.</p>

<p>function calculateSign(url){
    var sign=crypto.createHmac('sha512',constants.bittrexCredentials.SECRET); </p>

<pre><code>sign = sign.update(url,'ascii');
sign = sign.digest('hex');
return sign;
</code></pre>

<p>}
Full Implementation repo : <a href=""https://github.com/tarun1475/Nodejs-Bittrex-Client"" rel=""nofollow noreferrer"">https://github.com/tarun1475/Nodejs-Bittrex-Client</a></p>
","51401772","3565","<c#><api><signature><hmac>","5","1","2","2018-07-18 12:14:57","31230096","0","","2559097","","2015-06-27 08:02:00","2015-06-26 12:21:24","","","2018-07-18 12:14:57"
"8750074","Amazon S3 Policy Signing in Java","<p>For some reason, I'm struggling with the signature generation for my Amazon S3 upload policy. I swear I had this working at one point but no longer. Any help would be much appreciated. I need a fresh set of eyes.</p>

<p>When comparing to the output from <a href=""http://aws.amazon.com/code/199"" rel=""nofollow"">Amazon S3 Signature Tester</a>, I am <strong>not</strong> getting the same signature. However, when I directly use the signature coming out of that tool, everything works fine. So the issue is definitely in my signing process. Also, the ""String to be signed"" hex-decoded coming out of that tool is identical to my input policy being signed.</p>

<p>The AWS docs say <a href=""http://docs.amazonwebservices.com/AmazonS3/latest/dev/HTTPPOSTForms.html#HTTPPOSTConstructingPolicySignature"" rel=""nofollow"">the process for constructing a policy signature</a> should go like this:</p>

<ol>
<li>Encode the policy using UTF-8.</li>
<li>Encode those UTF-8 bytes using Base64.</li>
<li>Sign the policy with your Secret Access Key using HMAC SHA-1.</li>
<li>Encode the SHA-1 signature using Base64.</li>
</ol>

<p>Seems straight-forward enough. The only place for ambiguity might be in #3. The AWS docs show <a href=""http://docs.amazonwebservices.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/AuthJavaSampleHMACSignature.html"" rel=""nofollow"">a sample snippet for generating HMAC-SHA1</a> and this is consistent with <a href=""http://oreilly.com/catalog/javacrypt/chapter/ch06.html#37855"" rel=""nofollow"">other Java cryptography examples</a> I've seen.</p>

<p>I'm using v1.6 of Apache Commons implementation of Base64. My signing code basically looks like this:</p>

<pre><code>import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;
import org.apache.commons.codec.binary.Base64;

/* ... */

private static final String UTF8 = ""UTF-8"";
private static final String HMACSHA1 = ""HmacSHA1"";

public static String sign(String secret, String data) {
    byte[] dataBytes = data.getBytes(UTF8);
    byte[] secretBytes = secret.getBytes(UTF8);

    SecretKeySpec signingKey = new SecretKeySpec(secretBytes, HMACSHA1);

    Mac mac = Mac.getInstance(HMACSHA1);
    mac.init(signingKey);
    byte[] signature = mac.doFinal(dataBytes);

    return Base64.encodeBase64String(signature);
}
</code></pre>

<p>And then my usage of this signing looks like:</p>

<pre><code>String signature = sign(
    /* AWS Secret Access Key copied directly out of the AWS Console */,
    /* policy properly serialized as JSON */);
</code></pre>
","<p>Okay, I found it. Apparently today I've been effectively skipping step #2. I did encode the policy JSON as Base64 but then I am directly signing the JSON string not the Base64 string.</p>

<p>Step #3 should probably be reworded to ""Sign the <em>Base64</em> policy with your Secret Access Key using HMAC SHA-1.""</p>

<p>I guess I'll leave this up in case anyone else comes across a similar issue.</p>
","8750384","3548","<java><amazon-s3><sha1><hmac>","7","5","3","2013-11-03 15:10:17","8750384","0","4","411022","","2013-11-03 15:10:17","2012-01-05 21:27:25","","","2012-01-05 21:53:50"
"8750074","Amazon S3 Policy Signing in Java","<p>For some reason, I'm struggling with the signature generation for my Amazon S3 upload policy. I swear I had this working at one point but no longer. Any help would be much appreciated. I need a fresh set of eyes.</p>

<p>When comparing to the output from <a href=""http://aws.amazon.com/code/199"" rel=""nofollow"">Amazon S3 Signature Tester</a>, I am <strong>not</strong> getting the same signature. However, when I directly use the signature coming out of that tool, everything works fine. So the issue is definitely in my signing process. Also, the ""String to be signed"" hex-decoded coming out of that tool is identical to my input policy being signed.</p>

<p>The AWS docs say <a href=""http://docs.amazonwebservices.com/AmazonS3/latest/dev/HTTPPOSTForms.html#HTTPPOSTConstructingPolicySignature"" rel=""nofollow"">the process for constructing a policy signature</a> should go like this:</p>

<ol>
<li>Encode the policy using UTF-8.</li>
<li>Encode those UTF-8 bytes using Base64.</li>
<li>Sign the policy with your Secret Access Key using HMAC SHA-1.</li>
<li>Encode the SHA-1 signature using Base64.</li>
</ol>

<p>Seems straight-forward enough. The only place for ambiguity might be in #3. The AWS docs show <a href=""http://docs.amazonwebservices.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/AuthJavaSampleHMACSignature.html"" rel=""nofollow"">a sample snippet for generating HMAC-SHA1</a> and this is consistent with <a href=""http://oreilly.com/catalog/javacrypt/chapter/ch06.html#37855"" rel=""nofollow"">other Java cryptography examples</a> I've seen.</p>

<p>I'm using v1.6 of Apache Commons implementation of Base64. My signing code basically looks like this:</p>

<pre><code>import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;
import org.apache.commons.codec.binary.Base64;

/* ... */

private static final String UTF8 = ""UTF-8"";
private static final String HMACSHA1 = ""HmacSHA1"";

public static String sign(String secret, String data) {
    byte[] dataBytes = data.getBytes(UTF8);
    byte[] secretBytes = secret.getBytes(UTF8);

    SecretKeySpec signingKey = new SecretKeySpec(secretBytes, HMACSHA1);

    Mac mac = Mac.getInstance(HMACSHA1);
    mac.init(signingKey);
    byte[] signature = mac.doFinal(dataBytes);

    return Base64.encodeBase64String(signature);
}
</code></pre>

<p>And then my usage of this signing looks like:</p>

<pre><code>String signature = sign(
    /* AWS Secret Access Key copied directly out of the AWS Console */,
    /* policy properly serialized as JSON */);
</code></pre>
","<pre><code>String policy_document =
      ""{\""expiration\"": \""2009-01-01T00:00:00Z\"","" +
        ""\""conditions\"": ["" +
          ""{\""bucket\"": \""s3-bucket\""},"" +
          ""[\""starts-with\"", \""$key\"", \""uploads/\""],"" +
          ""{\""acl\"": \""private\""},"" +
          ""{\""success_action_redirect\"": \""http://localhost/\""},"" +
          ""[\""starts-with\"", \""$Content-Type\"", \""\""],"" +
          ""[\""content-length-range\"", 0, 1048576]"" +
        ""]"" +
      ""}"";

    // Calculate policy and signature values from the given policy document and AWS credentials.
    String policy = new String(
        Base64.encodeBase64(policy_document.getBytes(""UTF-8"")), ""ASCII"");

    Mac hmac = Mac.getInstance(""HmacSHA1"");
    hmac.init(new SecretKeySpec(
        aws_secret_key.getBytes(""UTF-8""), ""HmacSHA1""));
    String signature = new String(
        Base64.encodeBase64(hmac.doFinal(policy.getBytes(""UTF-8""))), ""ASCII"");
</code></pre>
","11000182","3548","<java><amazon-s3><sha1><hmac>","7","-1","3","2013-11-03 15:10:17","8750384","0","4","411022","","2013-11-03 15:10:17","2012-01-05 21:27:25","","2012-06-13 21:21:22","2012-06-12 15:48:04"
"8750074","Amazon S3 Policy Signing in Java","<p>For some reason, I'm struggling with the signature generation for my Amazon S3 upload policy. I swear I had this working at one point but no longer. Any help would be much appreciated. I need a fresh set of eyes.</p>

<p>When comparing to the output from <a href=""http://aws.amazon.com/code/199"" rel=""nofollow"">Amazon S3 Signature Tester</a>, I am <strong>not</strong> getting the same signature. However, when I directly use the signature coming out of that tool, everything works fine. So the issue is definitely in my signing process. Also, the ""String to be signed"" hex-decoded coming out of that tool is identical to my input policy being signed.</p>

<p>The AWS docs say <a href=""http://docs.amazonwebservices.com/AmazonS3/latest/dev/HTTPPOSTForms.html#HTTPPOSTConstructingPolicySignature"" rel=""nofollow"">the process for constructing a policy signature</a> should go like this:</p>

<ol>
<li>Encode the policy using UTF-8.</li>
<li>Encode those UTF-8 bytes using Base64.</li>
<li>Sign the policy with your Secret Access Key using HMAC SHA-1.</li>
<li>Encode the SHA-1 signature using Base64.</li>
</ol>

<p>Seems straight-forward enough. The only place for ambiguity might be in #3. The AWS docs show <a href=""http://docs.amazonwebservices.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/AuthJavaSampleHMACSignature.html"" rel=""nofollow"">a sample snippet for generating HMAC-SHA1</a> and this is consistent with <a href=""http://oreilly.com/catalog/javacrypt/chapter/ch06.html#37855"" rel=""nofollow"">other Java cryptography examples</a> I've seen.</p>

<p>I'm using v1.6 of Apache Commons implementation of Base64. My signing code basically looks like this:</p>

<pre><code>import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;
import org.apache.commons.codec.binary.Base64;

/* ... */

private static final String UTF8 = ""UTF-8"";
private static final String HMACSHA1 = ""HmacSHA1"";

public static String sign(String secret, String data) {
    byte[] dataBytes = data.getBytes(UTF8);
    byte[] secretBytes = secret.getBytes(UTF8);

    SecretKeySpec signingKey = new SecretKeySpec(secretBytes, HMACSHA1);

    Mac mac = Mac.getInstance(HMACSHA1);
    mac.init(signingKey);
    byte[] signature = mac.doFinal(dataBytes);

    return Base64.encodeBase64String(signature);
}
</code></pre>

<p>And then my usage of this signing looks like:</p>

<pre><code>String signature = sign(
    /* AWS Secret Access Key copied directly out of the AWS Console */,
    /* policy properly serialized as JSON */);
</code></pre>
","<p>Now, this procedure is officially supported.
<a href=""http://aws.amazon.com/articles/1434"" rel=""nofollow"">http://aws.amazon.com/articles/1434</a></p>

<pre><code>import sun.misc.BASE64Encoder;
import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;

String policy = (new BASE64Encoder()).encode(
policy_document.getBytes(""UTF-8"")).replaceAll(""\n"","""").replaceAll(""\r"","""");

Mac hmac = Mac.getInstance(""HmacSHA1"");
hmac.init(new SecretKeySpec(
aws_secret_key.getBytes(""UTF-8""), ""HmacSHA1""));
String signature = (new BASE64Encoder()).encode(
hmac.doFinal(policy.getBytes(""UTF-8"")))
.replaceAll(""\n"", """");
</code></pre>

<p>*Beware the window implementation for this example as some found problem from the comments of the post and solution to the problem was also provided there.</p>

<p>The result can be verified by this 
<a href=""http://s3.amazonaws.com/doc/s3-example-code/post/post_sample.html"" rel=""nofollow"">http://s3.amazonaws.com/doc/s3-example-code/post/post_sample.html</a></p>

<p>However, some said this ""org.apache.commons.codec.binary.Base64"" is better because of this.
<a href=""http://www.asgarli.net/2011/03/replacing-sunmiscbase64encoder-and.html"" rel=""nofollow"">http://www.asgarli.net/2011/03/replacing-sunmiscbase64encoder-and.html</a></p>
","14109896","3548","<java><amazon-s3><sha1><hmac>","7","3","3","2013-11-03 15:10:17","8750384","0","4","411022","","2013-11-03 15:10:17","2012-01-05 21:27:25","","2013-01-02 00:41:22","2013-01-01 11:08:31"
"15394543","Convert PHP hash_hmac(sha512) to NodeJS","<p>I am porting a php script to node, and I don't know much about encryption.</p>

<p>The php script uses this function:</p>

<pre><code>hash_hmac('sha512', text, key);
</code></pre>

<p>So, I need to implement a function in Node js for returning a keyed hash using the hmac method (SHA512).</p>

<p>From what I can see, node has this functionality built in via the crypto module (<a href=""http://nodejs.org/docs/latest/api/crypto.html#crypto_crypto"" rel=""noreferrer"">http://nodejs.org/docs/latest/api/crypto.html#crypto_crypto</a>) -- But I unclear how to reproduce this function.</p>

<p>Any help would be appreciated.</p>

<p>Thanks,</p>
","<p>Yes, use the crypto library.</p>

<pre><code>var hash = crypto.createHmac('sha512', key);
hash.update(text);
var hashed_data = hash.digest();
</code></pre>

<p>More details (e.g. arguments to digest to control the output encoding from <code>hash.digest</code>) are at <a href=""http://nodejs.org/docs/latest/api/crypto.html"" rel=""nofollow noreferrer"">the link</a> you provided.</p>

<p>As Nick points out, you will need to do this entire process each time you want to encrypt a new string (i.e. create a new <code>hash</code> object via <code>crypto.createHmac</code>.)</p>
","15394610","3456","<javascript><node.js><hash><hmac>","6","9","1","2017-06-27 14:06:00","15394610","0","2","","","","2013-03-13 19:20:53","","2017-06-27 14:06:00","2013-03-13 19:25:00"
"13362796","How to call an external JavaScript files methods from JMeter","<p>I'm trying to produce a HMAC SHA256 signature for a SOAP/XML-RPC JMeter Request that I am building.
I have found a JavaScript library that should do the trick for me:</p>

<p><a href=""http://code.google.com/p/crypto-js/#HMAC"" rel=""nofollow"">http://code.google.com/p/crypto-js/#HMAC</a></p>

<p>The issue is that I can't find a way to call the external JavaScript files methods from JMeter.</p>

<p>Any help would really be appreciated with this or a suggestion for an alternative to preform the task.</p>
","<p>You don't need to use any external JS libraries to generate HMAC. This functionality <a href=""https://stackoverflow.com/a/3208472/841064"">is available in Java SE</a>. You can use Beanshell Sampler to execute Java code.</p>

<p>If this functionality wouldn't be available in Java SE, you could:</p>

<ul>
<li>use <a href=""http://jmeter.apache.org/usermanual/component_reference.html#OS_Process_Sampler"" rel=""nofollow noreferrer"">OS Process Sampler</a></li>
<li>use <a href=""http://jmeter.apache.org/usermanual/component_reference.html#BSF_Sampler"" rel=""nofollow noreferrer"">BSF Sampler</a>, set language to javascript and attach file with script</li>
<li>put Jar of chosen library to Jmeter's lib folder. Then this library will be loaded by JMeter  at startup time and you can use it through Beanshell sampler</li>
</ul>
","13367400","3426","<javascript><jmeter><hmac><sha256><cryptojs>","3","2","1","2012-11-14 09:42:55","13367400","0","1","","","","2012-11-13 14:45:51","","2017-05-23 11:56:11","2012-11-13 19:30:23"
"37982451","How to generate HMAC-SHA256 in AngularJS?","<p>How am I able to generate a HMAC-SHA256 signature in AngularJS? </p>

<p>I cant find any sources regarding this topic.</p>
","<p>AngularJS is javascript. So, you need to be asking: ""How to generate hmac-sha256"" in javascript. This has been <a href=""https://www.google.com/search?q=hmac-sha256%20javascript"" rel=""noreferrer"">answered many times</a>.</p>

<p>For example using ""jsSHA"" you can do:</p>

<pre><code>var shaObj = new jsSHA(hashType, ""TEXT"");
shaObj.setHMACKey(""abc"", ""TEXT"");
shaObj.update(""This is a test"");
var hmac = shaObj.getHMAC(""HEX"");
</code></pre>
","37982486","3420","<javascript><angularjs><restful-authentication><sha256><hmac>","2","7","1","2016-06-23 05:29:58","37982486","3","","4940630","","2016-06-23 05:29:58","2016-06-23 04:37:22","","","2016-06-23 04:41:10"
"24121705","CodeIgniter 2.2.0 HMAC mismatch error","<p>UPDATE: Even after downloading the ""fixed"" 2.2.0, update log files are still filling up with:</p>

<blockquote>
  <p>Session: HMAC mismatch. The session cookie data did not match what was
  expected.</p>
</blockquote>

<p>After upgrading from CodeIgniter 2.1.3 to 2.2.0 I am getting the error:</p>

<blockquote>
  <p>Session: HMAC mismatch. The session cookie data did not match what was
  expected.</p>
</blockquote>

<p>The Mcrypt extension is enabled. If I set $config['sess_encrypt_cookie'] = FALSE; (not an option for production) there is no error. Any help greatly appreciated.</p>
","<p>in system/libraries/Sessions.php function _set_cookie function change:</p>

<pre><code>if ($this-&gt;sess_encrypt_cookie == TRUE)
{
    $cookie_data = $this-&gt;CI-&gt;encrypt-&gt;encode($cookie_data);
}
else
{
    // if encryption is not used, we provide an md5 hash to prevent userside tampering
    $cookie_data .= hash_hmac('sha1', $cookie_data, $this-&gt;encryption_key);
}
</code></pre>

<p>to:</p>

<pre><code>if ($this-&gt;sess_encrypt_cookie == TRUE)
{
    $cookie_data = $this-&gt;CI-&gt;encrypt-&gt;encode($cookie_data);
}

$cookie_data .= hash_hmac('sha1', $cookie_data, $this-&gt;encryption_key);
</code></pre>

<p>to see if it works.</p>

<p>see: <a href=""https://github.com/EllisLab/CodeIgniter/issues/3086"" rel=""nofollow"">https://github.com/EllisLab/CodeIgniter/issues/3086</a></p>
","24122758","3415","<php><codeigniter><codeigniter-2><hmac>","7","1","4","2018-01-05 13:07:21","25260378","1","","2011685","","2014-06-12 12:24:40","2014-06-09 13:49:58","","","2014-06-09 14:45:42"
"24121705","CodeIgniter 2.2.0 HMAC mismatch error","<p>UPDATE: Even after downloading the ""fixed"" 2.2.0, update log files are still filling up with:</p>

<blockquote>
  <p>Session: HMAC mismatch. The session cookie data did not match what was
  expected.</p>
</blockquote>

<p>After upgrading from CodeIgniter 2.1.3 to 2.2.0 I am getting the error:</p>

<blockquote>
  <p>Session: HMAC mismatch. The session cookie data did not match what was
  expected.</p>
</blockquote>

<p>The Mcrypt extension is enabled. If I set $config['sess_encrypt_cookie'] = FALSE; (not an option for production) there is no error. Any help greatly appreciated.</p>
","<p>Re-download the CI 2.2 archive, it was re-tagged and replaced.</p>
","24122998","3415","<php><codeigniter><codeigniter-2><hmac>","7","3","4","2018-01-05 13:07:21","25260378","1","","2011685","","2014-06-12 12:24:40","2014-06-09 13:49:58","","","2014-06-09 14:57:39"
"24121705","CodeIgniter 2.2.0 HMAC mismatch error","<p>UPDATE: Even after downloading the ""fixed"" 2.2.0, update log files are still filling up with:</p>

<blockquote>
  <p>Session: HMAC mismatch. The session cookie data did not match what was
  expected.</p>
</blockquote>

<p>After upgrading from CodeIgniter 2.1.3 to 2.2.0 I am getting the error:</p>

<blockquote>
  <p>Session: HMAC mismatch. The session cookie data did not match what was
  expected.</p>
</blockquote>

<p>The Mcrypt extension is enabled. If I set $config['sess_encrypt_cookie'] = FALSE; (not an option for production) there is no error. Any help greatly appreciated.</p>
","<p>CI_Input->_sanitize_globals() function sometimes break encrypted session
to fix this problem, I changed /system/core/Input.php (version 2.2, line 636)</p>

<pre><code>$_COOKIE[$this-&gt;_clean_input_keys($key)] = $this-&gt;_clean_input_data($val);
</code></pre>

<p>to</p>

<pre><code>if(!(config_item('sess_encrypt_cookie') === TRUE) || $key!=config_item('sess_cookie_name'))
    $_COOKIE[$this-&gt;_clean_input_keys($key)] = $this-&gt;_clean_input_data($val);
</code></pre>
","25260378","3415","<php><codeigniter><codeigniter-2><hmac>","7","3","4","2018-01-05 13:07:21","25260378","1","","2011685","","2014-06-12 12:24:40","2014-06-09 13:49:58","","","2014-08-12 09:10:44"
"24121705","CodeIgniter 2.2.0 HMAC mismatch error","<p>UPDATE: Even after downloading the ""fixed"" 2.2.0, update log files are still filling up with:</p>

<blockquote>
  <p>Session: HMAC mismatch. The session cookie data did not match what was
  expected.</p>
</blockquote>

<p>After upgrading from CodeIgniter 2.1.3 to 2.2.0 I am getting the error:</p>

<blockquote>
  <p>Session: HMAC mismatch. The session cookie data did not match what was
  expected.</p>
</blockquote>

<p>The Mcrypt extension is enabled. If I set $config['sess_encrypt_cookie'] = FALSE; (not an option for production) there is no error. Any help greatly appreciated.</p>
","<p>Beyond the above correction, I needed to change the following line:</p>

<pre><code>if ($key === $sess_cookie_name &amp;&amp; config_item('sess_encrypt_cookie'))
</code></pre>

<p>To:</p>

<pre><code>if ($key === config_item('cookie_prefix') . $sess_cookie_name
    &amp;&amp; config_item('sess_encrypt_cookie'))
</code></pre>

<p>Hope it helps,
Regards.</p>
","47200081","3415","<php><codeigniter><codeigniter-2><hmac>","7","0","4","2018-01-05 13:07:21","25260378","1","","2011685","","2014-06-12 12:24:40","2014-06-09 13:49:58","","","2017-11-09 10:58:46"
"7175067","HMC SHA1 hash - C# producing different hash output than Ruby","<p>I'm trying to quickly get a buggy .Net client library for a third party service I'm using to work. The original library (which works) is written in Ruby, but their equivalent library for DotNet produces differing hash output to the Ruby library.</p>

<p>The Ruby encryption code is as follows:</p>

<pre><code>def self.encrypt_string(input_string)
  raise Recurly::ConfigurationError.new(""Recurly gem not configured"") unless Recurly.private_key.present?
  digest_key = ::Digest::SHA1.digest(Recurly.private_key)
  sha1_hash = ::OpenSSL::Digest::Digest.new(""sha1"")
  ::OpenSSL::HMAC.hexdigest(sha1_hash, digest_key, input_string.to_s)
end
</code></pre>

<p>The (supposedly) equivalent C# code is:</p>

<pre><code>private static string ComputePrivateHash(string dataToProtect)
{
    if(String.IsNullOrEmpty(Configuration.RecurlySection.Current.PrivateKey))
        throw new RecurlyException(""A Private Key must be configured to use the Recurly Transparent Post API."");

    byte[] salt_binary = SHA1.Create().ComputeHash(Encoding.ASCII.GetBytes(dataToProtect));
    string salt_hex = BitConverter.ToString(salt_binary).Replace(""-"", """").ToLower();
    string salt = salt_hex.Substring(0, 20);

    HMACSHA1 hmac_sha1 = new HMACSHA1(Encoding.ASCII.GetBytes(Configuration.RecurlySection.Current.PrivateKey));
    hmac_sha1.Initialize();

    byte[] private_key_binary = Encoding.ASCII.GetBytes(salt);
    byte[] passkey_binary = hmac_sha1.ComputeHash(private_key_binary, 0, private_key_binary.Length);

    return BitConverter.ToString(passkey_binary).Replace(""-"", """").ToLower();
}
</code></pre>

<p>The actual hash output differs though, given the same input and private key. What is wrong with the C# method that causes it to produce the wrong hash output?</p>

<p><strong>EDIT</strong><br>
This is the way <em>I</em> would have written the code, though it still produces the wrong output:</p>

<pre><code>private static string ComputePrivateHash(string dataToProtect)
{
    if(String.IsNullOrEmpty(Configuration.RecurlySection.Current.PrivateKey))
        throw new RecurlyException(""A Private Key must be configured to use the Recurly Transparent Post API."");

    var privateKey = Configuration.RecurlySection.Current.PrivateKey;
    var hashedData = SHA1.Create().ComputeHash(Encoding.UTF8.GetBytes(dataToProtect));
    var hmac = new HMACSHA1(Encoding.UTF8.GetBytes(privateKey));
    var hash = hmac.ComputeHash(hashedData);
    return BitConverter.ToString(hash).Replace(""-"", """").ToLower();
}
</code></pre>

<p><strong>CORRECT ANSWER</strong>  </p>

<p>Thanks to Henning's answer below, I was able to determine that the correct code is:</p>

<pre><code>var privateKey = Configuration.RecurlySection.Current.PrivateKey;
var hashedKey = SHA1.Create().ComputeHash(Encoding.UTF8.GetBytes(privateKey));
var hmac = new HMACSHA1(hashedKey);
var hash = hmac.ComputeHash(Encoding.ASCII.GetBytes(dataToProtect));
return BitConverter.ToString(hash).Replace(""-"", """").ToLower();
</code></pre>
","<p>If I understand the code, it seems the Ruby code is hashing the <em>key</em> separately before feeding it to HMAC (which shoudln't be cryptographically necessary, as HMAC will hash a long key itself if necessary), and feeds the hashed key to HMAC together with the original message.</p>

<p>On the other hand, your C# code computes a HMAC with the <em>original</em> key and a <em>hash</em> of the message. (Inexplicably, the variables where you store the hashed message are called <code>salt</code> and <code>private_key_binary</code>, though the content is neither a salt nor a key...)</p>

<p>I cannot imagine that the Ruby and C# libraries would treat HMAC so differently that this is the right thing to do.</p>
","7175371","3392","<c#><ruby><encryption><sha1><hmac>","5","4","1","2011-08-24 12:36:47","7175371","9","1","98389","","2011-08-24 12:36:47","2011-08-24 12:00:51","","","2011-08-24 12:26:14"
"30917730","C# Web API method returns 403 Forbidden","<p>Solved!!! - See last edit.</p>

<p>In my MVC app I make calls out to a Web API service with HMAC Authentication Filterign. My Get (GetMultipleItemsRequest) works, but my Post does not. If I turn off HMAC authentication filtering all of them work. I'm not sure why the POSTS do not work, but the GETs do.</p>

<p>I make the GET call from my code like this (this one works):</p>

<pre><code>var productsClient = new RestClient&lt;Role&gt;(System.Configuration.ConfigurationManager.AppSettings[""WebApiUrl""],
              ""xxxxxxxxxxxxxxx"", true);

var getManyResult = productsClient.GetMultipleItemsRequest(""api/Role"").Result;
</code></pre>

<p>I make the POST call from my code like this (this one only works when I turn off HMAC):</p>

<pre><code>private RestClient&lt;Profile&gt; profileClient = new RestClient&lt;Profile&gt;(System.Configuration.ConfigurationManager.AppSettings[""WebApiUrl""],
        ""xxxxxxxxxxxxxxx"", true);

[HttpPost]
public ActionResult ProfileImport(IEnumerable&lt;HttpPostedFileBase&gt; files)
{
    //...
    var postResult = profileClient.PostRequest(""api/Profile"", newProfile).Result;
}
</code></pre>

<p>My RestClient builds like this:</p>

<pre><code>public class RestClient&lt;T&gt; where T : class
{
   //...

   private void SetupClient(HttpClient client, string methodName, string apiUrl, T content = null)
    {
        const string secretTokenName = ""SecretToken"";

        client.BaseAddress = new Uri(_baseAddress);
        client.DefaultRequestHeaders.Accept.Clear();
        client.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue(""application/json""));

        if (_hmacSecret)
        {
            client.DefaultRequestHeaders.Date = DateTime.UtcNow;

            var datePart = client.DefaultRequestHeaders.Date.Value.UtcDateTime.ToString(CultureInfo.InvariantCulture);
            var fullUri = _baseAddress + apiUrl;
            var contentMD5 = """";

            if (content != null)
            {
                var json = new JavaScriptSerializer().Serialize(content);
                contentMD5 = Hashing.GetHashMD5OfString(json); // &lt;--- Javascript serialized version is hashed
            }

            var messageRepresentation = 
                methodName + ""\n"" + 
                contentMD5 + ""\n"" +
                datePart + ""\n"" + 
                fullUri;

            var sharedSecretValue = ConfigurationManager.AppSettings[_sharedSecretName];
            var hmac = Hashing.GetHashHMACSHA256OfString(messageRepresentation, sharedSecretValue);

            client.DefaultRequestHeaders.Add(secretTokenName, hmac);
        }
        else if (!string.IsNullOrWhiteSpace(_sharedSecretName))
        {
            var sharedSecretValue = ConfigurationManager.AppSettings[_sharedSecretName];
            client.DefaultRequestHeaders.Add(secretTokenName, sharedSecretValue);
        }
    }

    public async Task&lt;T[]&gt; GetMultipleItemsRequest(string apiUrl)
    {
        T[] result = null;

        try
        {               
            using (var client = new HttpClient())
            {
                SetupClient(client, ""GET"", apiUrl);

                var response = await client.GetAsync(apiUrl).ConfigureAwait(false);

                response.EnsureSuccessStatusCode();

                await response.Content.ReadAsStringAsync().ContinueWith((Task&lt;string&gt; x) =&gt;
                {
                    if (x.IsFaulted)
                        throw x.Exception;

                    result = JsonConvert.DeserializeObject&lt;T[]&gt;(x.Result);
                });
            }
        }
        catch (HttpRequestException exception)
        {
            if (exception.Message.Contains(""401 (Unauthorized)""))
            {

            }
            else if (exception.Message.Contains(""403 (Forbidden)""))
            {

            }
        }
        catch (Exception)
        {
        }

        return result;
    }

    public async Task&lt;T&gt; PostRequest(string apiUrl, T postObject)
    {
        T result = null;
        try
        {               
            using (var client = new HttpClient())
            {
                SetupClient(client, ""POST"", apiUrl, postObject);

                var response = await client.PostAsync(apiUrl, postObject, new JsonMediaTypeFormatter()).ConfigureAwait(false); //&lt;--- not javascript formatted

                response.EnsureSuccessStatusCode();

                await response.Content.ReadAsStringAsync().ContinueWith((Task&lt;string&gt; x) =&gt;
                {
                    if (x.IsFaulted)
                        throw x.Exception;

                    result = JsonConvert.DeserializeObject&lt;T&gt;(x.Result);

                });
            }
        }
        catch (HttpRequestException exception)
        {
            if (exception.Message.Contains(""401 (Unauthorized)""))
            {

            }
            else if (exception.Message.Contains(""403 (Forbidden)""))
            {

            }
        }
        catch (Exception)
        {
        }

        return result;
    }

   //...

}
</code></pre>

<p>My Web API Controller is defined like this:</p>

<pre><code>[SecretAuthenticationFilter(SharedSecretName = ""xxxxxxxxxxxxxxx"", HmacSecret = true)]      
public class ProfileController : ApiController
{

    [HttpPost]
    [ResponseType(typeof(Profile))]
    public IHttpActionResult PostProfile(Profile Profile)
    {
        if (!ModelState.IsValid)
        {
            return BadRequest(ModelState);
        }
        GuidValue = Guid.NewGuid(); 

        Resource res = new Resource();
        res.ResourceId = GuidValue;
        var data23 = Resourceservices.Insert(res);

        Profile.ProfileId = data23.ResourceId;
        _profileservices.Insert(Profile);

        return CreatedAtRoute(""DefaultApi"", new { id = Profile.ProfileId }, Profile);
    }

}
</code></pre>

<p>Here is some of what SecretAuthenticationFilter does:</p>

<pre><code>//now try to read the content as string
string content = actionContext.Request.Content.ReadAsStringAsync().Result;
var contentMD5 = content == """" ? """" : Hashing.GetHashMD5OfString(content); //&lt;-- Hashing the non-JavaScriptSerialized
var datePart = """";
var requestDate = DateTime.Now.AddDays(-2);
if (actionContext.Request.Headers.Date != null)
{
    requestDate = actionContext.Request.Headers.Date.Value.UtcDateTime;
    datePart = requestDate.ToString(CultureInfo.InvariantCulture);
}
var methodName = actionContext.Request.Method.Method;
var fullUri = actionContext.Request.RequestUri.ToString();

var messageRepresentation =
    methodName + ""\n"" +
    contentMD5 + ""\n"" +
    datePart + ""\n"" +
    fullUri;

var expectedValue = Hashing.GetHashHMACSHA256OfString(messageRepresentation, sharedSecretValue);

// Are the hmacs the same, and have we received it within +/- 5 mins (sending and
// receiving servers may not have exactly the same time)
if (messageSecretValue == expectedValue
    &amp;&amp; requestDate &gt; DateTime.UtcNow.AddMinutes(-5)
    &amp;&amp; requestDate &lt; DateTime.UtcNow.AddMinutes(5))
    goodRequest = true;
</code></pre>

<p>Any idea why HMAC doesn't work for the POST?</p>

<p>EDIT:<br>
When SecretAuthenticationFilter tries to compare the HMAC sent, with what it thinks the HMAC should be they don't match. The reason is the MD5Hash of the content doesn't match the MD5Hash of the received content. The RestClient hashes the content using a JavaScriptSerializer.Serialized version of the content, but then the PostRequest passes the object as JsonMediaTypeFormatted. </p>

<p>These two types don't get formatted the same. For instance, the JavaScriptSerializer give's us dates like this:
\""EnteredDate\"":\""\/Date(1434642998639)\/\""</p>

<p>The passed content has dates like this:
\""EnteredDate\"":\""2015-06-18T11:56:38.6390407-04:00\""</p>

<p>I guess I need the hash to use the same data that's passed, so the Filter on the other end can confirm it correctly. Thoughts?</p>

<p>EDIT:
Found the answer, I needed to change the SetupClient code from using this line:</p>

<pre><code>var json = new JavaScriptSerializer().Serialize(content);
contentMD5 = Hashing.GetHashMD5OfString(json);
</code></pre>

<p>To using this:</p>

<pre><code>var json = JsonConvert.SerializeObject(content);
contentMD5 = Hashing.GetHashMD5OfString(json);
</code></pre>

<p>Now the sent content (formatted via JSON) will match the hashed content.</p>

<p>I was not the person who wrote this code originally. :)</p>
","<p>Found the answer, I needed to change the SetupClient code from using this line:</p>

<pre><code>var json = new JavaScriptSerializer().Serialize(content);
contentMD5 = Hashing.GetHashMD5OfString(json);
</code></pre>

<p>To using this:</p>

<pre><code>var json = JsonConvert.SerializeObject(content);
contentMD5 = Hashing.GetHashMD5OfString(json);
</code></pre>

<p>Now the content used for the hash will be formatted as JSON and will match the sent content (which is also formatted via JSON).</p>
","31053956","3391","<c#><asp.net-web-api><hmac>","1","0","1","2015-06-25 14:59:54","31053956","1","","405883","","2015-06-18 16:16:13","2015-06-18 14:09:43","","","2015-06-25 14:59:54"
"7548223","openssl error : implicit declaration of MD5Init","<p>First of all I am showing the code for my c file .. </p>

<pre><code>#include &lt;stdlib.h&gt;
#include &lt;sys/types.h&gt;
#include &lt;netinet/in.h&gt;
#include &lt;memory.h&gt;
#include &lt;string.h&gt;
#include &lt;ctype.h&gt;
#include ""sendip_module.h""
#include ""ipv6ext.h""
#include ""../ipv6.h""
#include ""../ipv4.h""
#include ""ah.h""
#include ""esp.h""
#include ""crypto_module.h""

#include &lt;openssl/hmac.h&gt;
#include &lt;openssl/md5.h&gt;

/*
code for hmac_md5 here....

void
hmac_md5(text, text_len, key, key_len, digest)
unsigned char*  text;                /* pointer to data stream */
int text_len;            /* length of data stream */
unsigned char* key;                 /* pointer to authentication key */
int key_len;             /* length of authentication key */
caddr_t digest;              /* caller digest to be filled in */

{
    MD5_CTX context;
    unsigned char k_ipad[65];    /* inner padding -
                                  * key XORd with ipad
                                  */
    unsigned char k_opad[65];    /* outer padding -
                                  * key XORd with opad
                                  */
    unsigned char tk[16];
    int i;
    /* if key is longer than 64 bytes reset it to key=MD5(key) */
    if (key_len &gt; 64) {

            MD5_CTX      tctx;

            MD5Init(&amp;tctx);
            MD5Update(&amp;tctx, key, key_len);
            MD5Final(tk, &amp;tctx);

            key = tk;
            key_len = 16;
    }

    /*
     * the HMAC_MD5 transform looks like:
     *
     * MD5(K XOR opad, MD5(K XOR ipad, text))
     *
     * where K is an n byte key
     * ipad is the byte 0x36 repeated 64 times
     * opad is the byte 0x5c repeated 64 times
     * and text is the data being protected
     */

    /* start out by storing key in pads */
    bzero( k_ipad, sizeof k_ipad);
    bzero( k_opad, sizeof k_opad);
    bcopy( key, k_ipad, key_len);
    bcopy( key, k_opad, key_len);

    /* XOR key with ipad and opad values */
    for (i=0; i&lt;64; i++) {
            k_ipad[i] ^= 0x36;
            k_opad[i] ^= 0x5c;
    }
    /*
     * perform inner MD5
     */
    MD5Init(&amp;context);                   /* init context for 1st
                                          * pass */
    MD5Update(&amp;context, k_ipad, 64);      /* start with inner pad */
    MD5Update(&amp;context, text, text_len); /* then text of datagram */
    MD5Final(digest, &amp;context);          /* finish up 1st pass */
    /*
     * perform outer MD5
     */
    MD5Init(&amp;context);                   /* init context for 2nd
                                          * pass */
    MD5Update(&amp;context, k_opad, 64);     /* start with outer pad */
    MD5Update(&amp;context, digest, 16);     /* then results of 1st
                                          * hash */
    MD5Final(digest, &amp;context);          /* finish up 2nd pass */
</code></pre>

<p>}</p>

<p>*/</p>

<pre><code>/*
rest of the program logic...
*/
</code></pre>

<p>I have already included ...&lt;.path where openssl is installed.....>../openssl/include to C_INCLUDE_PATH and exported it.</p>

<p>and now when i try to compile it getting error :</p>

<pre><code> $ make

gcc -o xorauth.so -I.. -fPIC -fsigned-char -pipe -Wall -Wpointer-arith -Wwrite-strings
wstrict-prototypes -Wnested-externs -Winline -Werror -g -Wcast-align -  
DSENDIP_LIBS=\""/usr/local/lib/sendip\"" -shared xorauth.c ../libsendipaux.a  
../libsendipaux.a

cc1: warnings being treated as errors

xorauth.c:34:1: error: function declaration isn’t a prototype
xorauth.c: In function ‘hmac_md5’:
xorauth.c:56:17: error: implicit declaration of function ‘MD5Init’
xorauth.c:56:17: error: nested extern declaration of ‘MD5Init’
xorauth.c:57:17: error: implicit declaration of function ‘MD5Update’
xorauth.c:57:17: error: nested extern declaration of ‘MD5Update’ 
xorauth.c:58:17: error: implicit declaration of function ‘MD5Final’
xorauth.c:58:17: error: nested extern declaration of ‘MD5Final’
make: *** [xorauth.so] Error 1
</code></pre>

<p>if required I will edit the other implementation details I have skiped them just to make the post small because I think there is something which i need to do regarding include path and header files and i am unaware of it.</p>

<p>What is going wrong please help me ???     </p>
","<p>There is no <code>MD5Init</code> function in OpenSSL.  (There is in the BSD implementation.)</p>

<p><code>man MD5_Init</code> (note the underscore), or see <a href=""http://www.openssl.org/docs/crypto/md5.html"" rel=""nofollow"">here</a>.</p>

<p><strong>EDIT</strong>:</p>

<p>Now that you've shown us the offending code, I can also help with the ""not a prototype"" message.</p>

<p>You have (edited a bit):</p>

<pre><code>void hmac_md5(text, text_len, key, key_len, digest)
unsigned char*  text;                
int text_len;            
unsigned char* key;                 
int key_len;             
caddr_t digest;              
{
    /* ... */
}
</code></pre>

<p>That's an old-style, or ""K&amp;R"", function definition.  It's still valid, but only for backward compatibility, and it means that the compiler won't be able to warn you about calls with the wrong number or type(s) of arguments.  The modern (since 1989) version is:</p>

<pre><code>void hmac_md5(unsigned char *text, 
              int text_len, 
              unsigned char *key, 
              int key_len, 
              caddr_t digest)
{
    /* ... */
}
</code></pre>

<p>When converting old-style function declarations and definitions to use prototypes, you sometimes have to be careful about parameters with narrow types (float, and integer types narrower than int or unsigned int) due to the promotion rules.  That doesn't apply in this particular case.</p>

<p>Note that you <em>can</em> leave the definition as it is if you like.  Since you got the code from an internet draft, that might even be a good idea (if it ain't broke, don't fix it) -- but as I said you'll get no help from the compiler if you call it with the wrong number or type(s) of arguments.</p>
","7548358","3368","<c><authentication><encryption><openssl><hmac>","2","1","1","2011-09-25 21:21:02","7548358","3","","827263","","2011-09-25 21:21:02","2011-09-25 20:02:10","","2011-09-25 20:51:02","2011-09-25 20:24:04"
"9802961","How can I create the HMAC signature required to send Amazon SES emails via HTTP?","<p>I am using Amazon SES to try and send emails via a HTTP Post such as:</p>

<pre><code>https://email.us-east-1.amazonaws.com/?Action=SendEmail&amp;Source=user%40example.com&amp;Destination.ToAddresses.member.1=allan%40example.com&amp;Message.Subject.Data=This%20is%20the%20subject%20line.&amp;Message.Body.Text.Data=Hello.%20I%20hope%20you%20are%20having%20a%20good%20day.
</code></pre>

<p>However in the HTTP Header it asks for X-Amzn-Authorization which consists of:</p>

<pre><code>X-Amzn-Authorization: AWS3-HTTPS AWSAccessKeyId=&lt;Your AWS Access Key ID&gt;, Algorithm=HmacSHA256, Signature=&lt;Signature&gt;
</code></pre>

<p>I was wondering how to calculate the signature? Is it simply my Secret Access Key?</p>

<p>A shown here on the <a href=""http://docs.amazonwebservices.com/ses/latest/DeveloperGuide/QueryInterface.Authentication.html#QueryInterface.Authentication.Signatures"" rel=""nofollow"">Amazon Documentation Site</a>.</p>
","<p>NO - Your secret Access key is secret for a reason.  Never pass it over the wire or you'll give any one who sniffs it full access to your AWS Account - they could use it to shutdown all your insances, delete entire S3 Buckets - everything.</p>

<p>The signature is a ""Signed request"".  you take the content of the request and create a Keyed-Hashing for Message Authentication code (HMAC) hash using your secret as the hash key.  Since your secret key is only known to You and Amazon, When amazon receives the request they will also take the contents of your request and hash it based on your secret key - if they get the same hash as your signed request then they know the request was not tampered with.  If they are different, then the request may have been maliciously tampered with or compromised so they will reject it.</p>

<p>More details here: 
<a href=""https://www.jokecamp.com/blog/examples-of-creating-base64-hashes-using-hmac-sha256-in-different-languages/"" rel=""nofollow noreferrer"">https://www.jokecamp.com/blog/examples-of-creating-base64-hashes-using-hmac-sha256-in-different-languages/</a></p>

<p>Including code for calculating the HMAC.</p>
","9803183","3290","<amazon-web-services><email-integration><hmac><amazon-ses>","3","4","1","2018-03-07 12:29:12","9803183","0","2","45773","","2012-03-21 11:24:38","2012-03-21 10:44:10","","2018-03-07 12:29:12","2012-03-21 10:57:36"
"1047391","Scala HMAC-SHA1 signing?","<p>I was wondering if there would be a way to get a HMAC-SHA1 signature in scala without having to compile a java class with the code everyone use in <a href=""http://docs.amazonwebservices.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/index.html?AuthJavaSampleHMACSignature.html"" rel=""nofollow noreferrer"">java</a>. Any ideas?</p>
","<p>If you're looking to avoid dealing with having Java source files in your Scala project, just translate the Java code into Scala.  It should be a very straightforward task.</p>
","1051110","3237","<scala><sha1><hmac>","3","1","2","2015-08-28 21:55:36","1053437","0","","36723","","2009-06-26 04:46:58","2009-06-26 04:45:02","","","2009-06-26 20:25:43"
"1047391","Scala HMAC-SHA1 signing?","<p>I was wondering if there would be a way to get a HMAC-SHA1 signature in scala without having to compile a java class with the code everyone use in <a href=""http://docs.amazonwebservices.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/index.html?AuthJavaSampleHMACSignature.html"" rel=""nofollow noreferrer"">java</a>. Any ideas?</p>
","<p>Not sure what are you trying to do, but here <a href=""http://technically.us/code/x/oauth-here-she-comes"" rel=""nofollow noreferrer"">http://technically.us/code/x/oauth-here-she-comes</a> you can find an example of how to do HMAC-SHA1 (for OAuth) in Scala</p>
","1053437","3237","<scala><sha1><hmac>","3","3","2","2015-08-28 21:55:36","1053437","0","","36723","","2009-06-26 04:46:58","2009-06-26 04:45:02","","","2009-06-27 19:18:01"
"1629253","HMAC - Implementation of PHP algorithm in Objective-C","<p>I have to implement the HMAC MD5 in my iPhone app. The PHP version of the algorithm (implemented server side for verification) is here and I can't modify it (it's an API)</p>

<pre><code>function hmac($key, $data) {
    $b = 64; // byte length for md5
    if (strlen($key) &gt; $b) {
        $key = pack(""H*"",md5($key));            
    }
    $key = str_pad($key, $b, chr(0x00));
    $ipad = str_pad('', $b, chr(0x36));
    $opad = str_pad('', $b, chr(0x5c));
    $k_ipad = $key ^ $ipad ;
    $k_opad = $key ^ $opad;
    $message = $k_opad . pack(""H*"",md5($k_ipad . $data));
    return base64_encode(md5($message));
}
</code></pre>

<p>I found a couple of objective-C implementation :</p>

<pre><code>- (NSString *)HMACMD5WithKey:(NSString *)key andData:(NSString *)data
{

    const char *cKey  = [key cStringUsingEncoding:NSASCIIStringEncoding];   
    const char *cData = [data cStringUsingEncoding:NSASCIIStringEncoding];
    unsigned char cHMAC[CC_MD5_DIGEST_LENGTH];
    CCHmac(kCCHmacAlgMD5, cKey, strlen(cKey), cData, strlen(cData), cHMAC);
    NSData *HMAC = [[NSData alloc] initWithBytes:cHMAC length:sizeof(cHMAC)];
    NSString *hash = [Base64 encode:HMAC];
    return hash;
}
</code></pre>

<p>Didn't return the same results (PHP != ObjC).</p>

<p>I played with ObjC implementations changing the digest length to 32 (result then has the same length than PHP implementation), the key length to 64 (corresponding to the first str_pad) but the results are always differents. </p>

<p>Can someone tell me how to have the same result in Objective-C ??</p>

<p>Edit: since the 2 implementations in ObjC return the same result only one is useful here..</p>
","<p>First, your “ObjC2” is using SHA1, not MD5 (this means you are probably getting a buffer overrun since SHA1 is 20 bytes, while MD5 is 16 bytes).</p>

<p>Second, I think there is a non-standard variation in your PHP HMAC implementation. Notice how all but the last invocations of md5() are wrapped with a pack(""H*"",…)? All but the last one right before Base64 encoding, that is. I think this means that the PHP code is Base64 encoding the 'printable hex' representation of the data (32 bytes, each a hex digit in ASCII) not the 'raw' value (16 bytes).</p>

<p>Since you cannot change the PHP implementation, you will have to write an HMAC implementation in Objective C that has this same non-standard variation.</p>
","1629409","3231","<php><objective-c><algorithm><encryption><hmac>","3","2","2","2009-10-27 13:10:56","1630704","0","3","197129","","2009-10-27 09:10:46","2009-10-27 07:36:29","","","2009-10-27 08:26:29"
"1629253","HMAC - Implementation of PHP algorithm in Objective-C","<p>I have to implement the HMAC MD5 in my iPhone app. The PHP version of the algorithm (implemented server side for verification) is here and I can't modify it (it's an API)</p>

<pre><code>function hmac($key, $data) {
    $b = 64; // byte length for md5
    if (strlen($key) &gt; $b) {
        $key = pack(""H*"",md5($key));            
    }
    $key = str_pad($key, $b, chr(0x00));
    $ipad = str_pad('', $b, chr(0x36));
    $opad = str_pad('', $b, chr(0x5c));
    $k_ipad = $key ^ $ipad ;
    $k_opad = $key ^ $opad;
    $message = $k_opad . pack(""H*"",md5($k_ipad . $data));
    return base64_encode(md5($message));
}
</code></pre>

<p>I found a couple of objective-C implementation :</p>

<pre><code>- (NSString *)HMACMD5WithKey:(NSString *)key andData:(NSString *)data
{

    const char *cKey  = [key cStringUsingEncoding:NSASCIIStringEncoding];   
    const char *cData = [data cStringUsingEncoding:NSASCIIStringEncoding];
    unsigned char cHMAC[CC_MD5_DIGEST_LENGTH];
    CCHmac(kCCHmacAlgMD5, cKey, strlen(cKey), cData, strlen(cData), cHMAC);
    NSData *HMAC = [[NSData alloc] initWithBytes:cHMAC length:sizeof(cHMAC)];
    NSString *hash = [Base64 encode:HMAC];
    return hash;
}
</code></pre>

<p>Didn't return the same results (PHP != ObjC).</p>

<p>I played with ObjC implementations changing the digest length to 32 (result then has the same length than PHP implementation), the key length to 64 (corresponding to the first str_pad) but the results are always differents. </p>

<p>Can someone tell me how to have the same result in Objective-C ??</p>

<p>Edit: since the 2 implementations in ObjC return the same result only one is useful here..</p>
","<p>As per my previous answer, the PHP code implements a non-standard variant of the HMAC algorithm. This Objective C code should imitate it. I tested it on Mac OS X 10.4.11 against the PHP code for two combinations:</p>

<p>""a short key""<br>
""some text""</p>

<p>""This is a very long key. It is longer than 64 bytes, which is the important part.""<br>
""This is some very long text. It is longer than 64 bytes, which is the important part.""</p>

<pre><code>- (NSString *)HMACMD5WithKey:(NSString *)key andData:(NSString *)data {
    const char *cKey  = [key cStringUsingEncoding:NSASCIIStringEncoding];
    const char *cData = [data cStringUsingEncoding:NSASCIIStringEncoding];
    const unsigned int blockSize = 64;
    char ipad[blockSize], opad[blockSize], keypad[blockSize];
    unsigned int keyLen = strlen(cKey);
    CC_MD5_CTX ctxt;
    if(keyLen &gt; blockSize) {
        //CC_MD5(cKey, keyLen, keypad);
        CC_MD5_Init(&amp;ctxt);
        CC_MD5_Update(&amp;ctxt, cKey, keyLen);
        CC_MD5_Final((unsigned char *)keypad, &amp;ctxt);
        keyLen = CC_MD5_DIGEST_LENGTH;
    } else {
        memcpy(keypad, cKey, keyLen);
    }
    memset(ipad, 0x36, blockSize);
    memset(opad, 0x5c, blockSize);

    int i;
    for(i = 0; i &lt; keyLen; i++) {
      ipad[i] ^= keypad[i];
      opad[i] ^= keypad[i];
    }

    CC_MD5_Init(&amp;ctxt);
    CC_MD5_Update(&amp;ctxt, ipad, blockSize);
    CC_MD5_Update(&amp;ctxt, cData, strlen(cData));
    unsigned char md5[CC_MD5_DIGEST_LENGTH];
    CC_MD5_Final(md5, &amp;ctxt);

    CC_MD5_Init(&amp;ctxt);
    CC_MD5_Update(&amp;ctxt, opad, blockSize);
    CC_MD5_Update(&amp;ctxt, md5, CC_MD5_DIGEST_LENGTH);
    CC_MD5_Final(md5, &amp;ctxt);

    const unsigned int hex_len = CC_MD5_DIGEST_LENGTH*2+2;
    char hex[hex_len];
    for(i = 0; i &lt; CC_MD5_DIGEST_LENGTH; i++) {
        snprintf(&amp;hex[i*2], hex_len-i*2, ""%02x"", md5[i]);
    }

    NSData *HMAC = [[NSData alloc] initWithBytes:hex length:strlen(hex)];
    NSString *hash = [Base64 encode:HMAC];
    [HMAC release];
    return hash;
}
</code></pre>
","1630704","3231","<php><objective-c><algorithm><encryption><hmac>","3","4","2","2009-10-27 13:10:56","1630704","0","3","197129","","2009-10-27 09:10:46","2009-10-27 07:36:29","","","2009-10-27 13:10:56"
"9463157","NodeJS hmac digest issue with accents","<p>I'm doing a side by side comparison with Ruby, PHP and NodeJS for the following code, getting an incorrect response in NodeJS using the <code>crypto</code> module.</p>

<p><strong>PHP</strong>
</p>

<pre><code>hash_hmac('sha256', 'text', 'á');
</code></pre>

<p><strong>Ruby</strong>
</p>

<pre><code>OpenSSL::HMAC.hexdigest('sha256', 'á', 'text')
</code></pre>

<p><strong>NodeJS</strong>
</p>

<pre><code>var signer = crypto.createHmac('sha256', 'á');
var expected = signer.update(""text"").digest('hex');
</code></pre>

<p>Both Ruby and PHP return <code>34b3ba4ea7e8ff214f2f36b31c6a6d88cfbf542e0ae3b98ba6c0203330c9f55b</code>, while, NodeJS returns <code>7dc85acba66d21e4394be4f8ead2a327c9f1adc64a99c710c98f60c425bd7411</code>. I noticed that, if I try with <code>utf8_encode('á')</code> in PHP, it actually gives me the result Node expects.</p>

<p>I'm loading the accented text in Node from a file, like so:</p>

<pre class=""lang-js prettyprint-override""><code>JSON.parse(fs.readFileSync('keys.js', 'utf8'));
</code></pre>

<p>How would I go about changing my code in Node to get the resulting hash that both PHP and Ruby  present?</p>

<p>Thanks!</p>
","<p>This code will give you the correct result:</p>

<pre class=""lang-js prettyprint-override""><code>var crypto = require('crypto');

var signer = crypto.createHmac('sha256', new Buffer('á', 'utf8'));
var result = signer.update(""text"").digest('hex');
console.log(result);
</code></pre>
","9591184","3200","<node.js><hmac>","8","13","1","2013-03-14 22:02:09","9591184","7","1","","","","2012-02-27 10:04:52","","","2012-03-06 20:17:30"
"14796330","What are the benefits of HMAC over symmetric cryptography?","<p>Somehow I don't get HMACs.</p>

<p>I once asked <a href=""https://stackoverflow.com/questions/14372628/why-do-i-need-hmacs-when-we-do-have-public-key-signatures"">Why do I need HMACs when we do have public key signatures?</a>, and I think I got this one. Easier to compute, and so on ...</p>

<p>But, what I do not get is why we need HMACs at all, respectively what kind of problem they are solving.</p>

<p>From my understanding, HMACs ...</p>

<ul>
<li>provide a way to make sure the message has not been tampered,</li>
<li>are ""secured"" by a secret, but symmetric key.</li>
</ul>

<p>Hence for calculating the HMAC (either initially or for verification) I do need to know the secret key.</p>

<p>Now, if I can exchange this key in a secret way without it being tampared, I could also exchange the message in the very same secret way without it being tampered, don't I?</p>

<p>Okay, now you could argue that you only need to exchange the key once, but you may have multiple messages. That's fine.</p>

<p>But if we now have a secret key that must be kept secret by all parties, we could also directly use symmetric encryption using the very same secret key to encrypt the message, couldn't we?</p>

<p>Of course, an HMAC shall provide a solution against tampering, but if I only have an encrypted message without the secret key and a reasonable encryption algorithm, I can not change that encrypted message in a way that a) decryption still works, and b) a meaningful decrypted message appears.</p>

<p>So what do I need an HMAC actually for?
Or - where is the point that I am missing?</p>
","<p>You're assuming that it is impossible to tamper with an encrypted message without knowing the key used for encryption. This is not the case and a dangerous assumption to make. There are several things possible even if you only have access to the ciphertext:</p>

<ul>
<li>Corruption of a suffix of the message: this can leak information about the content through error messages, timing and possibly other ways.</li>
<li>Corruption of ranges of the message for some modes (ECB, CFB and possibly others): same as above but the attacker has more ways to trigger the wanted behaviour.</li>
<li>Flipping of arbitrary bits in a single block (not knowing their initial value though) and corruption of the following block (CFB): If some bits are known to the attacker he can set them to the value he wants.</li>
<li>Flipping of arbitrary bits in the whole message for stream ciphers or stream cipher equivalent modes for block ciphers: This can avoid corruption altogether.</li>
</ul>

<p>Thus it is very important to verify that no attacker tampered with the message before processing even a single byte of the decrypted content. Since there are again some pitfalls in doing this using ad-hoc verification or simple hashing there is a need for MACs of which HMAC is one example.</p>
","14796459","3194","<encryption><hmac>","8","11","1","2013-02-10 09:50:45","14796459","2","4","-1","","2017-05-23 11:54:51","2013-02-10 09:29:19","","","2013-02-10 09:50:45"
"23480818","Can't solve an issue with HTTP Basic Authentication - Illegal character in message header (resulting from an HMAC encoding)","<p>I am not an expert with REST APIs and I am running into issues when trying to makes calls to the Duo 2 factor authentication API: <a href=""https://www.duosecurity.com/docs/authapi#api-details"" rel=""nofollow"">https://www.duosecurity.com/docs/authapi#api-details</a></p>

<p>It looks really straight forward, but I think I am missing something, I have been working on this for 2 days without success.</p>

<p>I am using Jersey, which gives me the following error:</p>

<pre><code>java.lang.IllegalArgumentException: Illegal character(s) in message header value: Basic RElGUE1MSVQyMU40OUhORURL[...]YTYzOQ==
</code></pre>

<p>(I have shortened the key in the above line)</p>

<p>The API uses HTTP Basic Authentication to authenticate requests.</p>

<p>I did follow the instructions in the doc for the authentication. I did generate the HTTP Password as an HMAC signature of the request. I also did build the signature as explained in the doc, by first building an ASCII string from my request, then by concatenating the components with line feeds and computing the HMAC-SHA1 of the canonical representation, then encoding username:hmac in Base64.</p>

<p>I think I might be misunderstanding something on the encoding part or not doing something properly.</p>

<p>Here is part of my code:</p>

<pre><code>public Enroll enroll(String username){
    HashMap&lt;String, String&gt; formData = new HashMap&lt;String, String&gt;();
    formData.put(""username"", username);

    String date = generateDate();
    String signature = constructSignature(""POST"", ""/auth/v2/enroll"", formData);

    String authValue = generateAuthValue(secretKey, signature);

    Enroll response = service.path(""auth"").path(""v2"").path(""enroll"").header(""Date"", date)
        .header(""Content-Type"", ""application/x-www-form-urlencoded"")
        .header(""Authorization"", authValue).type(MediaType.APPLICATION_FORM_URLENCODED_TYPE)
        .accept(MediaType.APPLICATION_JSON_TYPE).post(Enroll.class, formData);

    return response;
}

public String generateAuthValue(String secretKey, String signature){
    String hmacValue = calcShaHash(signature, integrationKey, secretKey);
    return hmacValue;
}

private String constructSignature(String method, String path, HashMap&lt;String, String&gt; params){
    String date = generateDate();
    String lineFeed = ""\n"";

    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.append(date);
    stringBuilder.append(lineFeed);
    stringBuilder.append(method);
    stringBuilder.append(lineFeed);
    stringBuilder.append(apiHostName);
    stringBuilder.append(lineFeed);
    stringBuilder.append(path);
    stringBuilder.append(lineFeed);
    stringBuilder = urlEncodeParameters(params, stringBuilder);
    return stringBuilder.toString();
}

private StringBuilder urlEncodeParameters(HashMap&lt;String, String&gt; params, StringBuilder stringBuilder){
    try{
        for (Map.Entry&lt;String, String&gt; entry : params.entrySet()){
            stringBuilder.append(URLEncoder.encode(entry.getKey().toString(), ""UTF-8""));
            stringBuilder.append(""="");
            stringBuilder.append(URLEncoder.encode(entry.getValue().toString(), ""UTF-8""));
            stringBuilder.append(""\n"");
            //signature.concat(encoded);
        }
    }catch (UnsupportedEncodingException e){
        e.printStackTrace();
    }
    return stringBuilder;
}

public static String calcShaHash(String data, String integrationKey, String secretKey){
    String HMAC_SHA1_ALGORITHM = ""HmacSHA1"";
    StringBuilder result = new StringBuilder();

    try{
        Key signingKey = new SecretKeySpec(secretKey.getBytes(""UTF-8""), HMAC_SHA1_ALGORITHM);
        Mac mac = Mac.getInstance(HMAC_SHA1_ALGORITHM);
        mac.init(signingKey);
        byte[] rawHmac = mac.doFinal(data.getBytes(""UTF-8""));

        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append(integrationKey);
        stringBuilder.append("":"");
        stringBuilder.append(Hex.encodeHexString(rawHmac).toString());

        byte[] byteAuthorizationValue = stringBuilder.toString().getBytes(""UTF-8"");
        result.append(""Basic "");     
        result.append(Base64.encode(byteAuthorizationValue).toString());
    }catch (Exception e){
        e.printStackTrace();
    }
    return result.toString();
}


private String generateDate(){
    Date date = new Date();
    SimpleDateFormat sdf = new SimpleDateFormat(""EEE, dd MMM yyyy HH:mm:ss ZZZZ"");
    String formattedDate = sdf.format(date);
    return formattedDate;
}
</code></pre>
","<p>I guess it is the same problem I am facing at the moment.</p>

<p>The illegal character is a new-line-character at the end of the auth header.</p>

<p>Take a look at <a href=""https://stackoverflow.com/questions/2054687/java-fetch-url-with-httpbasic-authentication"">Java: fetch URL with HTTPBasic Authentication</a> for more information.</p>

<p>I use the org.apache.commons.codec.binary.Base64 class from the commons-codec library to get Base64 encryption. I'm not sure but maybe it solves your problem.</p>

<p>Best regards,
Felix</p>
","25177503","3149","<java><rest><base64><hmac><basic-authentication>","1","0","2","2015-03-19 19:11:43","","0","0","","","","2014-05-05 20:03:05","","2017-05-23 11:56:56","2014-08-07 08:20:51"
"23480818","Can't solve an issue with HTTP Basic Authentication - Illegal character in message header (resulting from an HMAC encoding)","<p>I am not an expert with REST APIs and I am running into issues when trying to makes calls to the Duo 2 factor authentication API: <a href=""https://www.duosecurity.com/docs/authapi#api-details"" rel=""nofollow"">https://www.duosecurity.com/docs/authapi#api-details</a></p>

<p>It looks really straight forward, but I think I am missing something, I have been working on this for 2 days without success.</p>

<p>I am using Jersey, which gives me the following error:</p>

<pre><code>java.lang.IllegalArgumentException: Illegal character(s) in message header value: Basic RElGUE1MSVQyMU40OUhORURL[...]YTYzOQ==
</code></pre>

<p>(I have shortened the key in the above line)</p>

<p>The API uses HTTP Basic Authentication to authenticate requests.</p>

<p>I did follow the instructions in the doc for the authentication. I did generate the HTTP Password as an HMAC signature of the request. I also did build the signature as explained in the doc, by first building an ASCII string from my request, then by concatenating the components with line feeds and computing the HMAC-SHA1 of the canonical representation, then encoding username:hmac in Base64.</p>

<p>I think I might be misunderstanding something on the encoding part or not doing something properly.</p>

<p>Here is part of my code:</p>

<pre><code>public Enroll enroll(String username){
    HashMap&lt;String, String&gt; formData = new HashMap&lt;String, String&gt;();
    formData.put(""username"", username);

    String date = generateDate();
    String signature = constructSignature(""POST"", ""/auth/v2/enroll"", formData);

    String authValue = generateAuthValue(secretKey, signature);

    Enroll response = service.path(""auth"").path(""v2"").path(""enroll"").header(""Date"", date)
        .header(""Content-Type"", ""application/x-www-form-urlencoded"")
        .header(""Authorization"", authValue).type(MediaType.APPLICATION_FORM_URLENCODED_TYPE)
        .accept(MediaType.APPLICATION_JSON_TYPE).post(Enroll.class, formData);

    return response;
}

public String generateAuthValue(String secretKey, String signature){
    String hmacValue = calcShaHash(signature, integrationKey, secretKey);
    return hmacValue;
}

private String constructSignature(String method, String path, HashMap&lt;String, String&gt; params){
    String date = generateDate();
    String lineFeed = ""\n"";

    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.append(date);
    stringBuilder.append(lineFeed);
    stringBuilder.append(method);
    stringBuilder.append(lineFeed);
    stringBuilder.append(apiHostName);
    stringBuilder.append(lineFeed);
    stringBuilder.append(path);
    stringBuilder.append(lineFeed);
    stringBuilder = urlEncodeParameters(params, stringBuilder);
    return stringBuilder.toString();
}

private StringBuilder urlEncodeParameters(HashMap&lt;String, String&gt; params, StringBuilder stringBuilder){
    try{
        for (Map.Entry&lt;String, String&gt; entry : params.entrySet()){
            stringBuilder.append(URLEncoder.encode(entry.getKey().toString(), ""UTF-8""));
            stringBuilder.append(""="");
            stringBuilder.append(URLEncoder.encode(entry.getValue().toString(), ""UTF-8""));
            stringBuilder.append(""\n"");
            //signature.concat(encoded);
        }
    }catch (UnsupportedEncodingException e){
        e.printStackTrace();
    }
    return stringBuilder;
}

public static String calcShaHash(String data, String integrationKey, String secretKey){
    String HMAC_SHA1_ALGORITHM = ""HmacSHA1"";
    StringBuilder result = new StringBuilder();

    try{
        Key signingKey = new SecretKeySpec(secretKey.getBytes(""UTF-8""), HMAC_SHA1_ALGORITHM);
        Mac mac = Mac.getInstance(HMAC_SHA1_ALGORITHM);
        mac.init(signingKey);
        byte[] rawHmac = mac.doFinal(data.getBytes(""UTF-8""));

        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append(integrationKey);
        stringBuilder.append("":"");
        stringBuilder.append(Hex.encodeHexString(rawHmac).toString());

        byte[] byteAuthorizationValue = stringBuilder.toString().getBytes(""UTF-8"");
        result.append(""Basic "");     
        result.append(Base64.encode(byteAuthorizationValue).toString());
    }catch (Exception e){
        e.printStackTrace();
    }
    return result.toString();
}


private String generateDate(){
    Date date = new Date();
    SimpleDateFormat sdf = new SimpleDateFormat(""EEE, dd MMM yyyy HH:mm:ss ZZZZ"");
    String formattedDate = sdf.format(date);
    return formattedDate;
}
</code></pre>
","<p>Make sure that your requestXML or any header value does not have any illegal characters and replace it like...</p>

<pre><code>aXmlRequest=aXmlRequest.replaceAll(""\n"", """");
</code></pre>
","29153069","3149","<java><rest><base64><hmac><basic-authentication>","1","1","2","2015-03-19 19:11:43","","0","0","","","","2014-05-05 20:03:05","","","2015-03-19 19:11:43"
"31888289","Decrypting AES and HMAC with PyCrypto","<p>Having a bit of trouble getting a AES cipher text to decrypt. </p>

<p>In this particular scenario, I am encrypting data on the client side with Crypto-JS and decrypting it back on a python server with PyCrypto.</p>

<p>encrypt.js:</p>

<pre><code>  var password = 'BJhtfRjKnTDTtPXUBnErKDxfkiMCOLyP';
  var data = 'mytext';

  var masterKey = CryptoJS.SHA256(password).toString();

  // Derive keys for AES and HMAC
  var length = masterKey.toString().length / 2
  var encryptionKey = masterKey.substr(0, length);
  var hmacKey = masterKey.substr(length);

  var iv = CryptoJS.lib.WordArray.random(64/8);

  var encrypted = CryptoJS.AES.encrypt(
    data,
    encryptionKey,
    {
      iv: iv,
      mode: CryptoJS.mode.CFB
    }
  );

  var concat = iv + encrypted;

  // Calculate HMAC using iv and cipher text
  var hash = CryptoJS.HmacSHA256(concat, hmacKey);

  // Put it all together
  var registrationKey = iv + encrypted + hash;

  // Encode in Base64
  var basemessage = btoa(registrationKey);
</code></pre>

<p>decrypt.py:</p>

<pre><code>class AESCipher:
    def __init__(self, key):
        key_hash = SHA256.new(key).hexdigest()
        # Derive keys
        encryption_key = key_hash[:len(key_hash)/2]
        self.key = encryption_key            
        self.hmac_key = key_hash[len(key_hash)/2:]


    def verify_hmac(self, input_cipher, hmac_key):
        # Calculate hash using inputted key
        new_hash = HMAC.new(hmac_key, digestmod=SHA256)
        new_hash.update(input_cipher)
        digest = new_hash.hexdigest()

        # Calculate hash using derived key from local password
        local_hash = HMAC.new(self.hmac_key, digestmod=SHA256)
        local_hash.update(input_cipher)
        local_digest = local_hash.hexdigest()

        return True if digest == local_digest else False


    def decrypt(self, enc):
        enc = base64.b64decode(enc)
        iv = enc[:16]
        hmac = enc[60:]
        cipher_text = enc[16:60]

        # Verify HMAC using concatenation of iv + cipher like in js
        verified_hmac = self.verify_hmac((iv+cipher_text), self.hmac_key)

        if verified_hmac:
            cipher = AES.new(self.key, AES.MODE_CFB, iv)
            return cipher.decrypt(cipher_text)


password = 'BJhtfRjKnTDTtPXUBnErKDxfkiMCOLyP'

input = 'long base64 registrationKey...'

cipher = AESCipher(password)
decrypted = cipher.decrypt(input)
</code></pre>

<p>I'm successful in re-calculating the HMAC but when I try and then decrypt the cipher I get something that seems encrypted with �'s in the result.</p>

<p>I was getting errors about input length of cipher text but when I switched to CFB mode that fixed it so I don't think it's a padding issue.</p>
","<p>There are many problems with your code.</p>

<h1>Client (JavaScript):</h1>

<ul>
<li><p>AES has a block size of 128 bit and CFB mode expects a full block for the IV. Use</p>

<pre><code>var iv = CryptoJS.lib.WordArray.random(128/8);
</code></pre></li>
<li><p>The <code>iv</code> and <code>hash</code> variables are WordArray objects, but <code>encrypted</code> is not. When you force them to be converted to strings by concatenating them (<code>+</code>), <code>iv</code> and <code>hash</code> are Hex-encoded, but <code>encrypted</code> is formatted in an OpenSSL compatible format and Base64-encoded. You need to access the <code>ciphertext</code> property to get the encrypted WordArray:</p>

<pre><code>var concat = iv + encrypted.ciphertext;
</code></pre>

<p>and</p>

<pre><code>var registrationKey = iv + encrypted.ciphertext + hash;
</code></pre></li>
<li><p><code>registrationKey</code> is hex-encoded. There is no need to encode it again with Base64 and bloat it even more:</p>

<pre><code>var basemessage = registrationKey;
</code></pre>

<p>If you want to convert the hex encoded <code>registrationKey</code> to base64 encoding, use:</p>

<pre><code>var basemessage = CryptoJS.enc.Hex.parse(registrationKey).toString(CryptoJS.enc.Base64);
</code></pre></li>
<li><p><code>concat</code> is a hex-encoded string of the IV and ciphertext, because you forced the stringification by ""adding"" (<code>+</code>) <code>iv</code> and <code>encrypted</code>. The <code>HmacSHA256()</code> function takes either a WordArray object or a string. When you pass a string in, as you do, it will assume that the data is UTF-8 encoded and try to decode it as UTF-8. You need to parse the data yourself into a WordArray:</p>

<pre><code>var hash = CryptoJS.HmacSHA256(CryptoJS.enc.Hex.parse(concat), hmacKey);
</code></pre></li>
<li><p>The <code>CryptoJS.AES.encrypt()</code> and <code>CryptoJS.HmacSHA256()</code> expect the key either as a WordArray object or as a string. As before, if the key is supplied as a string, a UTF-8 encoding is assumed which is not the case here. You better parse the strings into WordArrays yourself:</p>

<pre><code>var encryptionKey = CryptoJS.enc.Hex.parse(masterKey.substr(0, length));
var hmacKey = CryptoJS.enc.Hex.parse(masterKey.substr(length));
</code></pre></li>
</ul>

<h1>Server (Python):</h1>

<ul>
<li><p>You're not verifying anything in <code>verify_hmac()</code>. You hash the same data with the same key twice. What you need to do is hash the IV+ciphertext and compare the result with the hash (called tag or HMAC-tag) that you slice off the full ciphertext.</p>

<pre><code>def verify_hmac(self, input_cipher, mac):
    # Calculate hash using derived key from local password
    local_hash = HMAC.new(self.hmac_key, digestmod=SHA256)
    local_hash.update(input_cipher)
    local_digest = local_hash.digest()

    return mac == local_digest
</code></pre>

<p>And later in <code>decrypt()</code>:</p>

<pre><code>verified_hmac = self.verify_hmac((iv+cipher_text), hmac)
</code></pre></li>
<li><p>You need to correctly slice off the MAC. The 60 that is hardcoded is a bad idea. Since you're using SHA-256 the MAC is 32 bytes long, so you do this</p>

<pre><code>hmac = enc[-32:]
cipher_text = enc[16:-32]
</code></pre></li>
<li><p>The CFB mode is actually a set of similar modes. The actual mode is determined by the segment size. CryptoJS only supports segments of 128 bit. So you need tell pycrypto to use the same mode as in CryptoJS:</p>

<pre><code>cipher = AES.new(self.key, AES.MODE_CFB, iv, segment_size=128)
</code></pre>

<p>If you want to use CFB mode with a segment size of 8 bit (default of pycrypto), you can use a modified version of CFB in CryptoJS from my project: <a href=""https://github.com/artjomb/cryptojs-extension#cfb"" rel=""nofollow noreferrer"">Extension for CryptoJS</a></p></li>
</ul>

<p>Full client code:</p>

<pre class=""lang-js prettyprint-override""><code>var password = 'BJhtfRjKnTDTtPXUBnErKDxfkiMCOLyP';
var data = 'mytext';

var masterKey = CryptoJS.SHA256(password).toString();
var length = masterKey.length / 2
var encryptionKey = CryptoJS.enc.Hex.parse(masterKey.substr(0, length));
var hmacKey = CryptoJS.enc.Hex.parse(masterKey.substr(length));

var iv = CryptoJS.lib.WordArray.random(128/8);

var encrypted = CryptoJS.AES.encrypt(
    data,
    encryptionKey,
    {
      iv: iv,
      mode: CryptoJS.mode.CFB
    }
);

var concat = iv + encrypted.ciphertext; 
var hash = CryptoJS.HmacSHA256(CryptoJS.enc.Hex.parse(concat), hmacKey);
var registrationKey = iv + encrypted.ciphertext + hash;
console.log(CryptoJS.enc.Hex.parse(registrationKey).toString(CryptoJS.enc.Base64));
</code></pre>

<p>Full server code:</p>

<pre><code>from Crypto.Cipher import AES
from Crypto.Hash import HMAC, SHA256
import base64
import binascii

class AESCipher:
    def __init__(self, key):
        key_hash = SHA256.new(key).hexdigest()
        self.hmac_key = binascii.unhexlify(key_hash[len(key_hash)/2:])
        self.key = binascii.unhexlify(key_hash[:len(key_hash)/2])

    def verify_hmac(self, input_cipher, mac):
        local_hash = HMAC.new(self.hmac_key, digestmod=SHA256)
        local_hash.update(input_cipher)
        local_digest = local_hash.digest()

        return SHA256.new(mac).digest() == SHA256.new(local_digest).digest() # more or less constant-time comparison

    def decrypt(self, enc):
        enc = base64.b64decode(enc)
        iv = enc[:16]
        hmac = enc[-32:]
        cipher_text = enc[16:-32]

        verified_hmac = self.verify_hmac((iv+cipher_text), hmac)

        if verified_hmac:
            cipher = AES.new(self.key, AES.MODE_CFB, iv, segment_size=128)
            return cipher.decrypt(cipher_text)
        else:
            return 'Bad Verify'


password = 'BJhtfRjKnTDTtPXUBnErKDxfkiMCOLyP'

input = ""btu0CCFbvdYV4B/j7hezAra6Q6u6KB8n5QcyA32JFLU8QRd+jLGW0GxMQsTqxaNaNkcU2I9r1ls4QUPUpaLPQg==""

obj = AESCipher(password)
decryption = obj.decrypt(input)

print 'Decrypted message:', decryption
</code></pre>
","31891184","3134","<python><encryption><hmac><pycrypto><cryptojs>","1","7","1","2017-01-21 07:48:38","31891184","0","1","1816580","","2015-08-08 08:25:39","2015-08-08 00:11:16","","2017-01-21 07:48:38","2015-08-08 08:25:16"
"9922085","Clarification on HMAC authentication with WCF","<p>I have been following a couple of articles regarding RESTful web services with WCF and more specifically, how to go about authentication in these. The main article I have been referencing is Aaron Skonnard's <a href=""http://msdn.microsoft.com/en-us/library/dd203052.aspx"" rel=""nofollow noreferrer"">RESTful Web Services with WCF 3.5</a>. Another one that specifically deals with HMAC authentication is <a href=""http://blogs.microsoft.co.il/blogs/itai/archive/2009/02/22/how-to-implement-hmac-authentication-on-a-restful-wcf-service.aspx"" rel=""nofollow noreferrer"">Itai Goldstiens article</a> which is based on Skonnards article. </p>

<p>I am confused about the ""User Key"" that is referenced to in both articles. I have a client application that is going to require a user to have both a user name and password. </p>

<ul>
<li>Does this then mean that the key I use to initialise the
System.Security.Cryptography.HMACMD5 class is simply the users
password?  </li>
<li><p>Given the method used to create the Mac in Itai's article
(shown below), am I right is thinking that <code>key</code> is the users
password and <code>text</code> is the string we are using confirm that the
details are in fact correct?</p>

<pre><code>public static string EncodeText(byte[] key, string text, Encoding encoding)
{
    HMACMD5 hmacMD5 = new HMACMD5(key);
    byte[] textBytes = encoding.GetBytes(text);
    byte[] encodedTextBytes =
        hmacMD5.ComputeHash(textBytes);
    string encodedText =
        Convert.ToBase64String(encodedTextBytes);
    return encodedText;
}
</code></pre></li>
</ul>

<p>In my example, the <code>text</code> parameter would be a combination of request uri, a shared secret  and timestamp (which will be available as a request header and used to prevent replay attacks). </p>

<p>Is this form of authentication decent? I've come across <a href=""https://stackoverflow.com/questions/6021612/wcf-restful-web-services-and-custom-authentication"">another thread</a> here that suggests that the method defined in the articles above is ""..a (sic) ugly hack."" The author doesn't suggest why, but it is discouraging given that I've spent a few hours reading about this and getting it working. However, it's worth noting that the accepted answer on this question talks about a custom HMAC authorisation scheme so it is possible the ugly hack reference is simply the implementation of it rather than the use of HMAC algorithms themselves. </p>

<p>The diagram below if from <a href=""http://en.wikipedia.org/wiki/Message_authentication_code"" rel=""nofollow noreferrer"">the wikipedia article on Message Authentication Code</a>. I feel like this should be a secure way to go, but I just want to make sure I understand it's use correctly and also make sure this isn't simply some dated mechanism that has been surpassed by something much better. </p>

<p><img src=""https://i.stack.imgur.com/2KxDT.png"" alt=""Illustrates how MAC authentication works between sender and reciever""></p>
","<p>The key <em>can</em> be the user's password, but <strong>you absolutely should not do this</strong>.</p>

<ul>
<li>First - the key has an optimal length equal to the size of the output hash, and a user's password will rarely be equal to that.</li>
<li>Second, there will never be enough randomness (entropy to use the technical term) in those bytes to be an adequate key.</li>
<li>Third, although you're preventing replay attacks, you're allowing anyone potentially to sign any kind of request, assuming they can also get hold of the shared secret (is that broadcast by the server at some point or is it derived only on the client and server?  If broadcast, a man-in-the-middle attack can easily grab and store that - height of paranoia, yes, but I think you should think about it) unless the user changes their password.</li>
<li>Fourth - stop using HMACMD5 - use HMAC-SHA-256 as a minimum.</li>
</ul>

<p>This key should at the very least be a series of bytes that are generated <em>from</em> the user's password - typically using something like <a href=""http://en.wikipedia.org/wiki/PBKDF2"" rel=""nofollow"">PBKDF2</a> - however you should also include something transitory that is session-based and which, ideally, can't be known by an attacker.</p>

<p>That said, a lot of people might tell you that I'm being far too paranoid.</p>

<p>Personally I know I'm not an expert in authentication - it's a very delicate balancing act - so I rely on peer-reviewed and proven technologies.  SSL (in this case authentication via client certificates), for example, might have it's weaknesses, but most people use it and if one of my systems gets exploited because of an SSL weakness, it's not going to be my fault.  However if an exploit occurs because of some weakness that I wasn't clever enough to identify?  I'd kick <em>myself</em> out of the front door.</p>

<p>Indidentally, for my rest services I now use <a href=""http://tools.ietf.org/html/rfc5802"" rel=""nofollow"">SCRAM</a> for authentication, using SHA512 and 512 bits of random salt for the stretching operation (many people will say that's excessive, but I won't have to change it for a while!), and then use a secure token (signed with an HMAC and encrypted with AES) derived from the authentication and other server-only-known information to persist an authenticated session.  The token is stateless in the same way that Asp.Net forms authentication cookies are.</p>

<p>The password exchange works very well indeed, is secure even without SSL (in protecting the password) and has the added advantage of authenticating both client and server.  The session persistence can be tuned based on the site and client - the token carries its own expiry and absolute expiry values within it, and these can be tuned easily.  By encrypting client ID information into that token as well, it's possible to prevent duplication on to another machine by simply comparing the decrypted values from the client-supplied values.  Only thing about that is watching out for IP address information, yes it can be spoofed but, primarily, you have to consider legitimate users on roaming networks.</p>
","9922881","3099","<wcf><authentication><rest><hmac>","2","4","1","2012-03-29 10:09:31","9922881","0","2","-1","","2017-05-23 10:30:23","2012-03-29 08:55:23","","2012-03-29 10:09:31","2012-03-29 09:45:56"
"35901396","Should I use Base64 of HMAC digest or just HMAC hex digest?","<p><strong>Legend</strong></p>

<p>I expose an API which requires client to sign requests by sending two headers:</p>

<pre><code>Authorization: MyCompany access_key:&lt;signature&gt;
Unix-TimeStamp: &lt;unix utc timestamp in seconds&gt;
</code></pre>

<p>To create a signature part, the client should use a secret key issued by my API service.</p>

<p>In Python (Py3k) it could look like:</p>

<pre><code>import base64
import hmac
from hashlib import sha256
from datetime import datetime

UTF8 = 'utf-8'
AUTH_HEADER_PREFIX = 'MyCompany'

def create_signature(access_key, secret_key, message):
    new_hmac = hmac.new(bytes(secret_key, UTF8), digestmod=sha256)
    new_hmac.update(bytes(message, UTF8))
    signature_base64 = base64.b64encode(new_hmac.digest())
    return '{prefix} {access_key}:{signature}'.format(
        prefix=AUTH_HEADER_PREFIX,
        access_key=access_key,
        signature=str(signature_base64, UTF8).strip()
    )


if __name__ == '__main__':
    message = str(datetime.utcnow().timestamp())
    signature = create_signature('my access key', 'my secret key',  message)
    print(
        'Request headers are',
        'Authorization: {}'.format(signature),
        'Unix-Timestamp: {}'.format(message),
        sep='\n'
    )
    # For message='1457369891.672671', 
    # access_key='my access key' 
    # and secret_key='my secret key' will ouput:
    #
    # Request headers are
    # Authorization: MyCompany my access key:CUfIjOFtB43eSire0f5GJ2Q6N4dX3Mw0KMGVaf6plUI=
    # Unix-Timestamp: 1457369891.672671
</code></pre>

<p>I wondered if I could avoid dealing with encoding digest of bytes to Base64 and just use <a href=""https://docs.python.org/3/library/hmac.html#hmac.HMAC.hexdigest"" rel=""nofollow""><code>HMAC.hexdigest()</code></a> to retrieve a string.
So that my function will change to:</p>

<pre><code>def create_signature(access_key, secret_key, message):
    new_hmac = hmac.new(bytes(secret_key, UTF8), digestmod=sha256)
    new_hmac.update(bytes(message, UTF8))
    signature = new_hmac.hexdigest()
    return '{prefix} {access_key}:{signature}'.format(
        prefix=AUTH_HEADER_PREFIX,
        access_key=access_key,
        signature=signature
    )
</code></pre>

<p>But then I found that <a href=""http://docs.aws.amazon.com/AmazonS3/latest/dev/RESTAuthentication.html#ConstructingTheAuthenticationHeader"" rel=""nofollow"">Amazon uses similar approach</a> as in my first code snippet:</p>

<pre><code>Authorization = ""AWS"" + "" "" + AWSAccessKeyId + "":"" + Signature;

Signature = Base64( HMAC-SHA1( YourSecretAccessKeyID, UTF-8-Encoding-Of( StringToSign ) ) );
</code></pre>

<p>Seeing that Amazon doesn't use hex digest I stopped myself to move forward with it because maybe they know something I don't.</p>

<hr>

<p><strong>Update</strong></p>

<p>I've measured a performance and found hex digest to be faster:</p>

<pre><code>import base64
import hmac
import string
from hashlib import sha256


UTF8 = 'utf-8'
MESSAGE = '1457369891.672671'
SECRET_KEY = 'my secret key'
NEW_HMAC = create_hmac()


def create_hmac():
    new_hmac = hmac.new(bytes(SECRET_KEY, UTF8), digestmod=sha256)
    new_hmac.update(bytes(MESSAGE, UTF8))
    return new_hmac


def base64_digest():
    return base64.b64encode(NEW_HMAC.digest())


def hex_digest():
    return NEW_HMAC.hexdigest()



if __name__ == '__main__':
    from timeit import timeit

    print(timeit('base64_digest()', number=1000000,
                  setup='from __main__ import base64_digest'))
    print(timeit('hex_digest()', number=1000000,
                 setup='from __main__ import hex_digest'))
</code></pre>

<p>Results with:</p>

<pre><code>3.136568891000934
2.3460130329913227
</code></pre>

<hr>

<p><strong>Question #1</strong></p>

<p>Does someone know why do they stick to Base64 of bytes digest and don't use just hex digest? Is there some solid reason to keep using this approach over hex digest?</p>

<p><strong>Question #2</strong></p>

<p>According to <a href=""https://tools.ietf.org/html/rfc2617#section-2"" rel=""nofollow"">RFC2716</a> the format of <code>Authorization</code> header value when using Basic Authentication
is:</p>

<pre><code>Authorization: Base64(username:password)
</code></pre>

<p>So basically you wrap with Base64 two values (user's id and password) seprated by colon.</p>

<p>As you can see in my code snippet and in Amazon's documentation nor me, nor Amazon do that for own custom value of the <code>Authorization</code> header.
Would it be a better style to wrap the whole pair as <code>Base64(access_key:signature)</code> to stick closer to this RFC or it doesn't matter at all?</p>
","<p>Amazon <strong>does</strong> use the hex digest in Signature Version 4.</p>

<blockquote>
  <p><code>Authorization: AWS4-HMAC-SHA256 Credential=AKIDEXAMPLE/20150830/us-east-1/iam/aws4_request, SignedHeaders=content-type;host;x-amz-date, Signature=5d672d79c15b13162d9279b0855cfba6789a8edb4c82c400e06b5924a6f2b5d7</code></p>
  
  <p><a href=""http://docs.aws.amazon.com/general/latest/gr/sigv4-add-signature-to-request.html"" rel=""nofollow noreferrer"">http://docs.aws.amazon.com/general/latest/gr/sigv4-add-signature-to-request.html</a></p>
</blockquote>

<p>Your example is from Signature Version 2, the older algorithm, which does use Base-64 encoding for the signature (and which also is not supported in the newest AWS regions).</p>

<p>So, your concern that AWS knows something you don't is misplaced, since their newer algorithm uses it.</p>

<p>In the <code>Authorization:</code> header, it really doesn't make a difference other than a few extra octets.  </p>

<p>Where Base-64 gets messy is when the signature is passed in the query string, because <code>+</code> and (depending on who you ask) <code>/</code> and <code>=</code> require special handling -- they need to be url-escaped (""percent-encoded"") as <code>%2B</code>, <code>%2F</code>, and <code>%3D</code> respectively... or you have to make accommodations for the possible variations on the server... or you have to require the use of a non-standard Base-64 alphabet, where <code>+</code> <code>/</code> <code>=</code> becomes <code>-</code> <code>~</code> <code>_</code> <a href=""http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/private-content-creating-signed-url-canned-policy.html"" rel=""nofollow noreferrer"">the way CloudFront does it</a>.  (This particular non-standard alphabet is only one of multiple non-standard options, all ""solving"" the same problem of magic characters in URLs with Base-64).</p>

<p>Go with hex-encoding.  </p>

<p>You will almost inevitably find would-be consumers of your API that find Base-64 to be ""difficult."" </p>
","35902688","3090","<python><python-3.x><digital-signature><encode><hmac>","1","4","1","2019-06-03 21:00:22","35902688","8","","1203773","","2016-03-09 20:44:47","2016-03-09 19:57:19","","2019-06-03 21:00:22","2016-03-09 21:10:35"
"5948870","hmac key and salt length","<p>I'm using hmac sha1 to sign a userid which is passed to a third party service.
The same secret is used for all users and the salt is unique for each user.</p>

<pre><code>token = userid : timestamp+2hours : hmac(userid : timestamp+2hours, salt+secret)
token_hex = hex(hash)
</code></pre>

<p>Will hmac work for short strings? userid:timestamp can be for example 12:1304985212
Does the order of salt and secret matters? (salt+secret vs secret+salt)
What should be the shared secret length and what should be the salt length?
Can I use the same secret to also sign messages between the server and the remote service or is it better to generate a separate secret?</p>

<p>Thanks</p>
","<p>You should calculate hmac(salt : userid : timestamp+2hours, secret) and transmit salt : userid : timestamp+2hours : hash.
Purpose of salt here is to make plaintext longer and not repeating, so it better be appended to plaintext, not secret.</p>

<p>If you really want to change secret, do hmac(userid : timestamp+2hours, hash(salt : secret)), it will make one-time secret look more like random number.</p>
","5950777","3077","<security><hash><hmac><sha><hmacsha1>","2","2","1","2011-05-10 13:26:16","5950777","0","2","","","","2011-05-10 10:49:11","","","2011-05-10 13:26:16"
"16477737","Java vs Python HMAC-SHA256 Mismatch","<p>Based on recent feedback and findings on this problem, I've rewritten the question to get rid of noise.</p>

<p>I have 2 separate code paths, one in Java (Android), one and Python which accomplish the following for the purposes of negotiating a pairing between an Android device and a Python/Django.</p>

<p>Java:</p>

<ul>
<li>Generate a syncKey</li>
<li>Hash a concatenated string of various values using the presharedKey (including the syncKey)</li>
<li>Encrypt the syncKey using a presharedKey</li>
<li>Send the Hash, encrypted syncKey, DeviceId and arbitrary variables to web server</li>
</ul>

<p>Python</p>

<ul>
<li>Get the presharedKey from the deviceId</li>
<li>Decrypt the encrypted syncKey</li>
<li>Hash a concatenated string of various values using the presharedKey (including the decrypted syncKey)</li>
<li>Make sure the hash matches, which confirms that the syncKey was decrypted successfully, and that the deviceId holds the correct presharedKey.</li>
</ul>

<p>Now this process works if I send the syncKey unencrypted. The final hash matches, which proves the deviceId has the correct preshared-key, however as soon as I add the en/decryption into the process, the hash no longer matches, despite the fact that both the syncKey and concatenated string appear to match perfectly character for character from the debug output of both Java/Python.</p>

<p>One quirk of the process is that a 256bit key is necessary for the AES256 encryption algorithm, so I'm chopping the 512bit presharedKey in half. The alternative of using only a 256bit key across the board was requiring that I pass the key through <code>encode('ascii')</code> on the python side, or else it was throwing up errors during hashing with the shorter key.</p>

<p>Here is the relevant code:</p>

<p>Java:</p>

<pre><code>String presharedKey = getKey();
// f8250b0d5960444e4de6ecc3a78900bb941246a1dece7848fc72b90092ab3ecd0c1c8e36fddba501ef92e72c95b47e07f98f7fd9cb63da75c008a3201124ea5d

String deviceId = getDeviceId();
// 1605788742789230

SyncKey syncKey = generateSyncKey();
// 824C1EE9EF507B52EA28362C71BD4AD512A5F82ACFAE80DEF531F73AC124CA814BA30CE805A157D6ADB9EC04FC99AAE6FDC4238FCD76B87CE22BC2FE33B2E5C9

String concat = syncKey.hexString();
// 824C1EE9EF507B52EA28362C71BD4AD512A5F82ACFAE80DEF531F73AC124CA814BA30CE805A157D6ADB9EC04FC99AAE6FDC4238FCD76B87CE22BC2FE33B2E5C9

String ALGORITHM = ""HmacSHA256"";
String hash = null;
try {
    SecretKeySpec keySpec = new SecretKeySpec(
        presharedKey.getBytes(),
        ALGORITHM);
    Mac mac = Mac.getInstance(ALGORITHM);
    mac.init(keySpec);
    byte[] result = mac.doFinal(concat.getBytes());
    hash = Base64.encodeToString(result, Base64.DEFAULT);
    // FpDE2JLmCBr+/rW+n/jBHH13F8AV80sUM2fQAY2IpRs=
} catch (NoSuchAlgorithmException x) {
} catch (InvalidKeyException x) {
}

String encKey = presharedKey.substring(0, presharedKey.length() / 2);
// f8250b0d5960444e4de6ecc3a78900bb941246a1dece7848fc72b90092ab3ecd

int len = encKey.length();
byte[] encKeyBytes = new byte[len / 2];
for (int i = 0; i &lt; len; i += 2) {
    encKeyBytes[i / 2] = (byte) ((Character.digit(encKey.charAt(i), 16) &lt;&lt; 4)
            + Character.digit(encKey.charAt(i+1), 16));
}

String encryptedSyncKey = null;
try {
    byte[] iv = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
    AlgorithmParameterSpec ivSpec = new IvParameterSpec(iv);
    SecretKeySpec encKeySpec = new SecretKeySpec(encKeyBytes, ""AES"");
    Cipher cipher = Cipher.getInstance(""AES/CBC/PKCS5Padding"");
    cipher.init(Cipher.ENCRYPT_MODE, encKeySpec, ivSpec);
    byte[] encryptedSyncKeyBytes = cipher.doFinal(syncKey.hexString().getBytes());
    encryptedSyncKey = Base64.encodeToString(encryptedSyncKeyBytes, Base64.DEFAULT);
    /*
        Yrl0/SuTUUTC6oJ8o4TCOy65EwO0JzoXfEi9kLq0AOlf6rH+nN7+BEc0s5uE7TIo1UlJb/DvR2Ca
        ACmQVXXhgpZUTB4sQ0eSo+t32lg0EEb9xKI5CZ4l9QO5raw0xBn7r/tfIdVm8AIFkN9QCcthS0DF
        KH3oWhpwNS+tfEuibLPgGqP/zGTozmido9U9lb4n
    */
} catch (InvalidAlgorithmParameterException e) {
} catch (NoSuchAlgorithmException e) {
} catch (NoSuchPaddingException e) {
} catch (InvalidKeyException e) {
} catch (IllegalBlockSizeException e) {
} catch (BadPaddingException e) {
}

sendStuffToWeb(encryptedSyncKey, deviceId, hash);
</code></pre>

<p>Python:</p>

<pre><code>hash = getHash(request)
# hash from Java: FpDE2JLmCBr+/rW+n/jBHH13F8AV80sUM2fQAY2IpRs=

encrypted_sync_key = getEncSyncKey(request)
# encryptedSyncKey from Java:
# Yrl0/SuTUUTC6oJ8o4TCOy65EwO0JzoXfEi9kLq0AOlf6rH+nN7+BEc0s5uE7TIo1UlJb/DvR2Ca
# ACmQVXXhgpZUTB4sQ0eSo+t32lg0EEb9xKI5CZ4l9QO5raw0xBn7r/tfIdVm8AIFkN9QCcthS0DF
# KH3oWhpwNS+tfEuibLPgGqP/zGTozmido9U9lb4n

device_id = getDeviceId(request)
# 1605788742789230

preshared_key = getPresharedKeyFromDevice(deviceId)
# f8250b0d5960444e4de6ecc3a78900bb941246a1dece7848fc72b90092ab3ecd0c1c8e36fddba501ef92e72c95b47e07f98f7fd9cb63da75c008a3201124ea5d

enc_key = preshared_key[:len(preshared_key)/2]
# f8250b0d5960444e4de6ecc3a78900bb941246a1dece7848fc72b90092ab3ecd

aes = AES.new(enc_key.decode('hex'), AES.MODE_CBC, IV=""\x00""*16)
sync_key = aes.decrypt(base64.b64decode(encrypted_sync_key))
# 824C1EE9EF507B52EA28362C71BD4AD512A5F82ACFAE80DEF531F73AC124CA814BA30CE805A157D6ADB9EC04FC99AAE6FDC4238FCD76B87CE22BC2FE33B2E5C9

concat = sync_key
# 824C1EE9EF507B52EA28362C71BD4AD512A5F82ACFAE80DEF531F73AC124CA814BA30CE805A157D6ADB9EC04FC99AAE6FDC4238FCD76B87CE22BC2FE33B2E5C9

import hashlib
from hmac import new as hmac

verify_hash = hmac(preshared_key, concat, hashlib.sha256).digest().encode('base64')
# IoSc2w2sQ4/fwhJTdUQHw/Hdyjy+ranzQ1z3J5LfYbA=
</code></pre>

<p>From the debug output below you can see the <code>syncKey</code> is encrypted and decrypted successfully, and the <code>concat</code> is identical. However the resulting <code>hash</code> ends up being different.</p>
","<p>Your Python code is wrong. I can reproduce, in Python, the answer you got in Java.</p>

<p>If I use your inputs:</p>

<pre><code>&gt;&gt;&gt; preshared_key_hex
b'f8250b0d5960444e4de6ecc3a78900bb941246a1dece7848fc72b90092ab3ecd0c1c8e36fddba501ef92e72c95b47e07f98f7fd9cb63da75c008a3201124ea5d'
&gt;&gt;&gt; concat_hex
b'824C1EE9EF507B52EA28362C71BD4AD512A5F82ACFAE80DEF531F73AC124CA814BA30CE805A157D6ADB9EC04FC99AAE6FDC4238FCD76B87CE22BC2FE33B2E5C9'
</code></pre>

<p>I get the same value you get in Java:</p>

<pre><code>&gt;&gt;&gt; base64.b64encode(hmac.new(preshared_key_hex, concat_hex, hashlib.sha256).digest())
b'FpDE2JLmCBr+/rW+n/jBHH13F8AV80sUM2fQAY2IpRs='
</code></pre>

<p>However, that value is probably also wrong. You should almost certainly be hex decoding the input values.</p>

<p>I'm unable to reproduce what you got in Python; one of the values you're passing to <code>hmac.new</code> isn't what you think it is. <code>print</code> them immediately before calling <code>hmac.new</code> and you should see what doesn't match.</p>
","16556423","3060","<java><android><python><hmac>","11","8","1","2013-05-15 22:35:25","","10","2","698289","","2013-05-15 02:39:14","2013-05-10 08:09:18","","2013-05-15 22:35:25","2013-05-15 03:38:17"
"613111","Why do I get wrong results for hmac in Python but not Perl?","<p>I'm trying to compute hmac using sha-512.</p>

<p>The Perl code:  </p>

<pre><code>use Digest::SHA qw(hmac_sha512_hex);

$key = ""\x0b""x20;
$data = ""Hi There"";

$hash = hmac_sha512_hex($data, $key);
print ""$hash\n"";
</code></pre>

<p>and gives the correct hash of   </p>

<pre><code>87aa7cdea5ef619d4ff0b4241a1d6cb02379f4e2ce4ec2787ad0b30545e17cde  
daa833b7d6b8a702038b274eaea3f4e4be9d914eeb61f1702e696c203a126854
</code></pre>

<p>Python version:  </p>

<pre><code>import hashlib, hmac

print hmac.new(""\x0b""*20, ""Hi There"", hashlib.sha512).hexdigest()
</code></pre>

<p>which gives the incorrect hash of  </p>

<pre><code>9656975ee5de55e75f2976ecce9a04501060b9dc22a6eda2eaef638966280182
477fe09f080b2bf564649cad42af8607a2bd8d02979df3a980f15e2326a0a22a
</code></pre>

<p>any ideas why the Python version is giving me the wrong hash?</p>

<p>Edit:<br>
version is<br>
    Python 2.5.1 (r251:54863, Jan 13 2009, 10:26:13)<br>
    [GCC 4.0.1 (Apple Inc. build 5465)] on darwin  </p>
","<p>Which version of Python? Strings are Unicode in Python 3. Is this a Unicode issue?</p>
","613128","3053","<python><perl><hash><hmac>","2","0","4","2009-03-05 18:32:54","613271","2","","2766176","brian d foy","2009-03-05 18:32:54","2009-03-05 00:20:15","","","2009-03-05 00:27:08"
"613111","Why do I get wrong results for hmac in Python but not Perl?","<p>I'm trying to compute hmac using sha-512.</p>

<p>The Perl code:  </p>

<pre><code>use Digest::SHA qw(hmac_sha512_hex);

$key = ""\x0b""x20;
$data = ""Hi There"";

$hash = hmac_sha512_hex($data, $key);
print ""$hash\n"";
</code></pre>

<p>and gives the correct hash of   </p>

<pre><code>87aa7cdea5ef619d4ff0b4241a1d6cb02379f4e2ce4ec2787ad0b30545e17cde  
daa833b7d6b8a702038b274eaea3f4e4be9d914eeb61f1702e696c203a126854
</code></pre>

<p>Python version:  </p>

<pre><code>import hashlib, hmac

print hmac.new(""\x0b""*20, ""Hi There"", hashlib.sha512).hexdigest()
</code></pre>

<p>which gives the incorrect hash of  </p>

<pre><code>9656975ee5de55e75f2976ecce9a04501060b9dc22a6eda2eaef638966280182
477fe09f080b2bf564649cad42af8607a2bd8d02979df3a980f15e2326a0a22a
</code></pre>

<p>any ideas why the Python version is giving me the wrong hash?</p>

<p>Edit:<br>
version is<br>
    Python 2.5.1 (r251:54863, Jan 13 2009, 10:26:13)<br>
    [GCC 4.0.1 (Apple Inc. build 5465)] on darwin  </p>
","<p>I am unable to replicate your results here. In IDLE using Python 2.5:</p>

<pre><code>Python 2.5.2 (r252:60911, Feb 21 2008, 13:11:45) [MSC v.1310 32 bit (Intel)] on win32 Type ""copyright"", ""credits"" or ""license()"" for more information.

...

IDLE 1.2.2      
&gt;&gt;&gt; import hashlib, hmac
&gt;&gt;&gt; print hmac.new(""\x0b""*20, ""Hi There"", hashlib.sha512).hexdigest()
87aa7cdea5ef619d4ff0b4241a1d6cb02379f4e2ce4ec2787ad0b30545e17cdedaa833b7d6b8a702038b274eaea3f4e4be9d914eeb61f1702e696c203a126854
</code></pre>
","613137","3053","<python><perl><hash><hmac>","2","1","4","2009-03-05 18:32:54","613271","2","","2766176","brian d foy","2009-03-05 18:32:54","2009-03-05 00:20:15","","","2009-03-05 00:30:30"
"613111","Why do I get wrong results for hmac in Python but not Perl?","<p>I'm trying to compute hmac using sha-512.</p>

<p>The Perl code:  </p>

<pre><code>use Digest::SHA qw(hmac_sha512_hex);

$key = ""\x0b""x20;
$data = ""Hi There"";

$hash = hmac_sha512_hex($data, $key);
print ""$hash\n"";
</code></pre>

<p>and gives the correct hash of   </p>

<pre><code>87aa7cdea5ef619d4ff0b4241a1d6cb02379f4e2ce4ec2787ad0b30545e17cde  
daa833b7d6b8a702038b274eaea3f4e4be9d914eeb61f1702e696c203a126854
</code></pre>

<p>Python version:  </p>

<pre><code>import hashlib, hmac

print hmac.new(""\x0b""*20, ""Hi There"", hashlib.sha512).hexdigest()
</code></pre>

<p>which gives the incorrect hash of  </p>

<pre><code>9656975ee5de55e75f2976ecce9a04501060b9dc22a6eda2eaef638966280182
477fe09f080b2bf564649cad42af8607a2bd8d02979df3a980f15e2326a0a22a
</code></pre>

<p>any ideas why the Python version is giving me the wrong hash?</p>

<p>Edit:<br>
version is<br>
    Python 2.5.1 (r251:54863, Jan 13 2009, 10:26:13)<br>
    [GCC 4.0.1 (Apple Inc. build 5465)] on darwin  </p>
","<p>Under python 2.5.2 I get the correct hash<br>
I guess the old version was the problem</p>
","613189","3053","<python><perl><hash><hmac>","2","0","4","2009-03-05 18:32:54","613271","2","","2766176","brian d foy","2009-03-05 18:32:54","2009-03-05 00:20:15","","","2009-03-05 00:50:23"
"613111","Why do I get wrong results for hmac in Python but not Perl?","<p>I'm trying to compute hmac using sha-512.</p>

<p>The Perl code:  </p>

<pre><code>use Digest::SHA qw(hmac_sha512_hex);

$key = ""\x0b""x20;
$data = ""Hi There"";

$hash = hmac_sha512_hex($data, $key);
print ""$hash\n"";
</code></pre>

<p>and gives the correct hash of   </p>

<pre><code>87aa7cdea5ef619d4ff0b4241a1d6cb02379f4e2ce4ec2787ad0b30545e17cde  
daa833b7d6b8a702038b274eaea3f4e4be9d914eeb61f1702e696c203a126854
</code></pre>

<p>Python version:  </p>

<pre><code>import hashlib, hmac

print hmac.new(""\x0b""*20, ""Hi There"", hashlib.sha512).hexdigest()
</code></pre>

<p>which gives the incorrect hash of  </p>

<pre><code>9656975ee5de55e75f2976ecce9a04501060b9dc22a6eda2eaef638966280182
477fe09f080b2bf564649cad42af8607a2bd8d02979df3a980f15e2326a0a22a
</code></pre>

<p>any ideas why the Python version is giving me the wrong hash?</p>

<p>Edit:<br>
version is<br>
    Python 2.5.1 (r251:54863, Jan 13 2009, 10:26:13)<br>
    [GCC 4.0.1 (Apple Inc. build 5465)] on darwin  </p>
","<p>yes indeed -- it seems the Leopard version of python2.5 is the one that is broken. </p>

<p>below run on a Penryn-based MBP...</p>

<pre><code>$ **uname -a**
Darwin lizard-wifi 9.6.0 Darwin Kernel Version 9.6.0: Mon Nov 24 17:37:00 PST 2008; root:xnu-1228.9.59~1/RELEASE_I386 i386
dpc@lizard-wifi:~$ **which python**
/usr/bin/python
</code></pre>

<p>Running this version installed in Leopard OS</p>

<pre><code>dpc@lizard-wifi:~$ python
Python 2.5.1 (r251:54863, Jan 13 2009, 10:26:13) 
[GCC 4.0.1 (Apple Inc. build 5465)] on darwin
Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.
&gt;&gt;&gt; import hashlib, hmac
&gt;&gt;&gt; print hmac.new(""\x0b""*20, ""Hi There"", hashlib.sha512).hexdigest()
9656975ee5de55e75f2976ecce9a04501060b9dc22a6eda2eaef638966280182477fe09f080b2bf564649cad42af8607a2bd8d02979df3a980f15e2326a0a22a
&gt;&gt;&gt; 
</code></pre>

<p>And then the MacPorts version of <code>python2.5</code></p>

<pre><code>$ /opt/local/bin/python2.5
Python 2.5.4 (r254:67916, Feb  3 2009, 21:40:31) 
[GCC 4.0.1 (Apple Inc. build 5488)] on darwin
Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.
&gt;&gt;&gt; import hashlib, hmac
&gt;&gt;&gt; print hmac.new(""\x0b""*20, ""Hi There"", hashlib.sha512).hexdigest()
87aa7cdea5ef619d4ff0b4241a1d6cb02379f4e2ce4ec2787ad0b30545e17cdedaa833b7d6b8a702038b274eaea3f4e4be9d914eeb61f1702e696c203a126854
&gt;&gt;&gt; 
</code></pre>
","613271","3053","<python><perl><hash><hmac>","2","9","4","2009-03-05 18:32:54","613271","2","","2766176","brian d foy","2009-03-05 18:32:54","2009-03-05 00:20:15","","","2009-03-05 01:23:29"
"11442793","HMAC Implementation for Web Service Authentication in PHP","<p>I am trying to implement a web service and need some (very) simple Authenticate to restrict access to the service.</p>

<p>I found out about HMAC and I think I understand how to implement it. But I have a couple of questions in mind.</p>

<p>Let's say I have this HTML Form on the consumer side. When making a GET/POST request to my server.</p>

<ol>
<li>Is is enough to create a hash of: <code>public_key</code> using the <code>secret_key</code>?</li>
<li>OR, do I need to create a hash of the entire <code>POST</code> variables/array?</li>
</ol>

<p>I'm thinking it would be enough to send the hash of the <code>public_key</code> only but just wanted to make sure and ask you guys.</p>

<p><strong>I am planning to do this:</strong></p>

<ol>
<li>Create a hash of the <code>public_key</code></li>
<li>Put the hash in a hidden field or in the URL as a param together with the public_key (or client_id) and other POST/GET variables.</li>
<li>Receive on my server and verify the hash against the database by recreating the hash of the <code>public_key</code> using the <code>secret_key</code>.</li>
<li>If the hash matches, I accept the POST/GET requests.</li>
</ol>

<p>Your thoughts?</p>

<p><strong>Clarification:</strong> <code>public_key</code> is like the <code>client unique id</code> where I can use to identify what <code>secret key</code> to use to generate the hash on the server.</p>
","<p>Use TLS. It fixes this and a host of problems you haven't even thought of yet.</p>
","11444725","3038","<php><web-services><security><authentication><hmac>","0","2","2","2012-10-15 21:30:42","","8","1","66767","","2012-07-11 23:14:23","2012-07-11 23:00:37","","","2012-07-12 03:43:08"
"11442793","HMAC Implementation for Web Service Authentication in PHP","<p>I am trying to implement a web service and need some (very) simple Authenticate to restrict access to the service.</p>

<p>I found out about HMAC and I think I understand how to implement it. But I have a couple of questions in mind.</p>

<p>Let's say I have this HTML Form on the consumer side. When making a GET/POST request to my server.</p>

<ol>
<li>Is is enough to create a hash of: <code>public_key</code> using the <code>secret_key</code>?</li>
<li>OR, do I need to create a hash of the entire <code>POST</code> variables/array?</li>
</ol>

<p>I'm thinking it would be enough to send the hash of the <code>public_key</code> only but just wanted to make sure and ask you guys.</p>

<p><strong>I am planning to do this:</strong></p>

<ol>
<li>Create a hash of the <code>public_key</code></li>
<li>Put the hash in a hidden field or in the URL as a param together with the public_key (or client_id) and other POST/GET variables.</li>
<li>Receive on my server and verify the hash against the database by recreating the hash of the <code>public_key</code> using the <code>secret_key</code>.</li>
<li>If the hash matches, I accept the POST/GET requests.</li>
</ol>

<p>Your thoughts?</p>

<p><strong>Clarification:</strong> <code>public_key</code> is like the <code>client unique id</code> where I can use to identify what <code>secret key</code> to use to generate the hash on the server.</p>
","<p>The pubkey is just used as an alternative way to recognize the user. It could be the user email as well, by the way since you don't likely want to expose your user data to their programmer (or to potential sniffers) you create a unique identifier for each user. It's all it means. Then you need a private key to sign your hash.</p>

<p>Of course to make it worth it you <strong>have</strong> to sign all unique request data, otherwise someone could alter your request body and you wouldn't be able to detect it (MITM attack).</p>

<p>You also should care of creating a timestamp that must be included in the HMAC itself, then pass it alongside with the request. This way you can make the signature expirable and so you are not exposed to replay attacks (someone steals the request and without modifying it replies it against the server, operating multiple times the same action... think what a problem if it's a request to pay for your service, your user would be very very angry with you).</p>

<p>Also remember (nobody does) to encrypt also the Request-URI inside the HMAC itself and also the HTTP method (aka verb) if you're using a RESTful webservice, otherwise malicious users will be able to send the request to other URIs or (using RESTful services) change the meaning of your request, so a valid GET can become a potential DELETE.
An example could be: user wants to see all its data, makes a GET request, a Man in the Middle reads the request and changes GET with DELETE. You are not given the opportunity to detect that something has been changed if it's not inside your HMAC you can check about, so you receive a DELETE request and <em>boom!</em> you destroy all user data.</p>

<p>So always remember: <strong>everything is essential to your request must be validable</strong>
And if you rely on a HMAC then you must encrypt everything you need to trust the request.</p>

<p>Also always remember to start designing your system by denying all request, then if you can validate them perform requested actions. This way you always fall back on denied requests. It's better to have a user email telling you that he cannot do something that have your user data propagated on the net.</p>
","12904337","3038","<php><web-services><security><authentication><hmac>","0","6","2","2012-10-15 21:30:42","","8","1","66767","","2012-07-11 23:14:23","2012-07-11 23:00:37","","","2012-10-15 21:30:42"
"36293800","How to load external js library in Jmeter?","<p>I have the following code in a jsr223 sampler:</p>

<pre><code>var key = ""key"";
var dateStamp = ""20160329T134359Z"";
var regionName = ""us-east-1"";
var serviceName = ""execute-api"";

   var kDate= Crypto.HMAC(Crypto.SHA256, dateStamp, ""AWS4"" + key, { asBytes: true})
   var kRegion= Crypto.HMAC(Crypto.SHA256, regionName, kDate, { asBytes: true });
   var kService=Crypto.HMAC(Crypto.SHA256, serviceName, kRegion, { asBytes: true });
   var kSigning= Crypto.HMAC(Crypto.SHA256, ""aws4_request"", kService, { asBytes: true });
   vars.put(""AWSKey"", kSigning);
</code></pre>

<p>Now when I run it i get this error:
Response code: 500
Response message: javax.script.ScriptException: sun.org.mozilla.javascript.internal.EcmaError: ReferenceError: ""Crypto"" is not defined. (#6) in  at line number 6</p>

<p>Obviously I dont have the crypto libs. However I am at loss on how to load them. I downloaded all the relavant js and put them in the /lib folder and still nothing.
I downloaded this file: <a href=""https://github.com/Boussetta/CryptoJS-v3.1.2"" rel=""nofollow"">https://github.com/Boussetta/CryptoJS-v3.1.2</a>
Which handles the functions in the code above but for the life of me I have not idea how to import it.</p>

<p>TIA</p>
","<p>If you want to go for JavaScript - there are 2 options:</p>

<ol>
<li><p>Use Rhino <code>load()</code> method like:</p>

<p><code>load(""crypto.js"")</code></p></li>
<li><p>Use <a href=""https://commons.apache.org/proper/commons-codec/apidocs/org/apache/commons/codec/digest/HmacUtils.html"" rel=""nofollow"">HmacUtils</a> class from <a href=""https://commons.apache.org/proper/commons-codec/"" rel=""nofollow"">Apache Commons Codec</a> from JavaScript </p>

<pre><code>var rawhmac = org.apache.commons.codec.digest.HmacUtils.hmacSha1(key,data)
var encoded = org.apache.commons.codec.binary.Base64.encodeBase64String(rawhmac)
</code></pre></li>
</ol>

<p>However I would recommend going for option 3 - switch to ""groovy"" language instead of JavaScript, that way you will be able to:</p>

<ul>
<li>Re-use <a href=""http://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/AuthJavaSampleHMACSignature.html"" rel=""nofollow"">Amazon authentication samples</a> in your test</li>
<li>Get maximum performance and confidence as groovy scripts can be compiled while other languages are interpreted so groovy implementation will take less resources and will work faster. See <a href=""https://blazemeter.com/blog/beanshell-vs-jsr223-vs-java-jmeter-scripting-its-performance"" rel=""nofollow"">Beanshell vs JSR223 vs Java JMeter Scripting: The Performance-Off You've Been Waiting For!</a> article for more details. </li>
</ul>
","36301069","3029","<javascript><jmeter><aws-sdk><hmac><jsr223>","3","2","1","2016-10-13 20:04:06","","0","","","","","2016-03-29 19:48:33","","2016-10-13 20:04:06","2016-03-30 06:16:13"
"12216321","Amazon rest service authentication and security","<p>I was reading about amazon's authentication process, and they use a custom process wich signs each request.</p>

<ul>
<li><p>I still don't understand how signing every requests stops from a man-in-the-middle atack, since everyone who sees the request and sees the signature, can issue the same request again.</p></li>
<li><p>I would also apreciate if someone shared some bibliography about security or amazon web services or web services in general.</p></li>
<li><p>How can SSL help in this situation?</p></li>
</ul>

<p>Thanks!</p>
","<p>Here's what the <a href=""http://docs.amazonwebservices.com/AWSMechTurk/latest/AWSMechanicalTurkRequester/MakingRequests_RequestAuthenticationArticle.html"" rel=""noreferrer"">documentation</a> has to say.  Basically it boils down to the timestamp, and to mitigate against replay attacks, they suggest <a href=""http://aws.amazon.com/articles/1928"" rel=""noreferrer"">using SSL</a>. </p>

<blockquote>
  <p><strong>Authenticating Requests</strong></p>
  
  <p>Requests to AWS are authenticated by verifying information contained
  within the request. This verification is performed using the
  information in the following table.</p>
</blockquote>

<p><strong>AWSAccessKeyId</strong>   The sender’s AWS account is identified by the Access Key ID. The Access Key ID is used to look up the Secret Access Key. </p>

<p><strong>Signature</strong>   Each request to a web service that requires authenticated requests must contain a valid request signature, or the request is rejected. A request signature is
calculated using the Secret Access Key assigned to the developer's account by AWS, which is a shared secret known only to AWS and the developer. </p>

<p><strong>Timestamp</strong>   The date and time the request was created, represented as a string in UTC. The format of the value of this parameter must match the format of the XML Schema dateTime data type.</p>

<p>The second link has this to offer:</p>

<blockquote>
  <p>The best mechanism for defense against a replay attack is to ensure
  all your requests are made over an SSL connection. If you cannot use
  SSL, then the mechanism available to you for prevention of replay
  attacks is the Expires parameter in signature version 2. This requires
  your client to be synchronized to atomic time (using NTP, or a similar
  synchronization protocol). If you do not use the Expires parameter,
  and rely only on the timestamp parameter, your requests are subject to
  a request expiration period, which varies by service, but can be as
  long as 15 minutes.</p>
</blockquote>
","12267408","3010","<web-services><security><authentication><amazon-s3><hmac>","4","7","1","2012-09-04 16:42:36","12267408","0","","","","","2012-08-31 13:26:55","","2012-09-04 16:42:36","2012-09-04 16:09:21"
"44244441","How to create a SECRET_HASH for AWS Cognito using boto3?","<p>I want to create/calculate a SECRET_HASH for AWS Cognito using boto3 and python. This will be incorporated in to my fork of <a href=""https://github.com/nueverest/warrant/blob/master/warrant/__init__.py"" rel=""nofollow noreferrer"">warrant</a>.</p>

<p>I configured my cognito app client to use an <code>app client secret</code>. However, this broke the following code. </p>

<pre><code>def renew_access_token(self):
    """"""
    Sets a new access token on the User using the refresh token.

    NOTE:
    Does not work if ""App client secret"" is enabled. 'SECRET_HASH' is needed in AuthParameters.
    'SECRET_HASH' requires HMAC calculations.

    Does not work if ""Device Tracking"" is turned on.
    https://stackoverflow.com/a/40875783/1783439

    'DEVICE_KEY' is needed in AuthParameters. See AuthParameters section.
    https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_InitiateAuth.html
    """"""
    refresh_response = self.client.initiate_auth(
        ClientId=self.client_id,
        AuthFlow='REFRESH_TOKEN',
        AuthParameters={
            'REFRESH_TOKEN': self.refresh_token
            # 'SECRET_HASH': How to generate this?
        },
    )

    self._set_attributes(
        refresh_response,
        {
            'access_token': refresh_response['AuthenticationResult']['AccessToken'],
            'id_token': refresh_response['AuthenticationResult']['IdToken'],
            'token_type': refresh_response['AuthenticationResult']['TokenType']
        }
    )
</code></pre>

<p>When I run this I receive the following exception:</p>

<pre><code>botocore.errorfactory.NotAuthorizedException: 
An error occurred (NotAuthorizedException) when calling the InitiateAuth operation: 
Unable to verify secret hash for client &lt;client id echoed here&gt;.
</code></pre>

<p><a href=""https://stackoverflow.com/a/40875783/1783439"">This answer</a> informed me that a SECRET_HASH is required to use the cognito client secret.</p>

<p>The <a href=""https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_InitiateAuth.html"" rel=""nofollow noreferrer"">aws API reference docs</a> AuthParameters section states the following:</p>

<blockquote>
  <p>For REFRESH_TOKEN_AUTH/REFRESH_TOKEN: USERNAME (required), SECRET_HASH
  (required if the app client is configured with a client secret),
  REFRESH_TOKEN (required), DEVICE_KEY</p>
</blockquote>

<p>The <a href=""http://boto3.readthedocs.io/en/latest/reference/services/cognito-idp.html#CognitoIdentityProvider.Client.sign_up"" rel=""nofollow noreferrer"">boto3 docs</a> state that a SECRET_HASH is</p>

<blockquote>
  <p>A keyed-hash message authentication code (HMAC) calculated using the
  secret key of a user pool client and username plus the client ID in
  the message.</p>
</blockquote>

<p>The docs explain what is needed, but not how to achieve this.</p>
","<p>The below <code>get_secret_hash</code> method is a solution that I wrote in Python for a Cognito User Pool implementation, with example usage: </p>

<pre><code>import boto3
import botocore
import hmac
import hashlib
import base64


class Cognito:
    client_id = app.config.get('AWS_CLIENT_ID')
    user_pool_id = app.config.get('AWS_USER_POOL_ID')
    identity_pool_id = app.config.get('AWS_IDENTITY_POOL_ID')
    client_secret = app.config.get('AWS_APP_CLIENT_SECRET')
    # Public Keys used to verify tokens returned by Cognito:
    # http://docs.aws.amazon.com/cognito/latest/developerguide/amazon-cognito-user-pools-using-tokens-with-identity-providers.html#amazon-cognito-identity-user-pools-using-id-and-access-tokens-in-web-api
    id_token_public_key = app.config.get('JWT_ID_TOKEN_PUB_KEY')
    access_token_public_key = app.config.get('JWT_ACCESS_TOKEN_PUB_KEY')

    def __get_client(self):
        return boto3.client('cognito-idp')

    def get_secret_hash(self, username):
        # A keyed-hash message authentication code (HMAC) calculated using
        # the secret key of a user pool client and username plus the client
        # ID in the message.
        message = username + self.client_id
        dig = hmac.new(self.client_secret, msg=message.encode('UTF-8'),
                       digestmod=hashlib.sha256).digest()
        return base64.b64encode(dig).decode()

    # REQUIRES that `ADMIN_NO_SRP_AUTH` be enabled on Client App for User Pool
    def login_user(self, username_or_alias, password):
        try:
            return self.__get_client().admin_initiate_auth(
                UserPoolId=self.user_pool_id,
                ClientId=self.client_id,
                AuthFlow='ADMIN_NO_SRP_AUTH',
                AuthParameters={
                    'USERNAME': username_or_alias,
                    'PASSWORD': password,
                    'SECRET_HASH': self.get_secret_hash(username_or_alias)
                }
            )
        except botocore.exceptions.ClientError as e:
            return e.response
</code></pre>
","44245099","3010","<python><amazon-web-services><boto3><amazon-cognito><hmac>","3","4","1","2017-05-29 14:38:56","44245099","0","2","1783439","","2017-05-29 14:10:51","2017-05-29 14:05:03","","","2017-05-29 14:38:56"
"4675343","the best implementation of RFC 2104 HMAC-SHA1","<p>What is the best implementation of RFC 2104 HMAC-SHA1 alg. in php?
I have read <a href=""http://us2.php.net/manual/en/function.hash-hmac.php"" rel=""nofollow"">http://us2.php.net/manual/en/function.hash-hmac.php</a> but when I try them I get<br>
different results.<br>
Thank's</p>
","<p>Just use the function you linked.</p>

<p><code>hash_hmac(""sha1"", $message, $key);</code></p>

<p>$message and $key are the strings provided by you.</p>
","4675372","2960","<php><sha1><hmac>","0","3","2","2011-01-12 23:49:48","","0","","","","","2011-01-12 23:45:07","","","2011-01-12 23:49:45"
"4675343","the best implementation of RFC 2104 HMAC-SHA1","<p>What is the best implementation of RFC 2104 HMAC-SHA1 alg. in php?
I have read <a href=""http://us2.php.net/manual/en/function.hash-hmac.php"" rel=""nofollow"">http://us2.php.net/manual/en/function.hash-hmac.php</a> but when I try them I get<br>
different results.<br>
Thank's</p>
","<p>The hash extension is definitely the best option you have in PHP. <code>hash()</code> and specifically <code>hash_hmac()</code> as you pointed out are both supporting SHA1 and both do a good job of it.</p>
","4675373","2960","<php><sha1><hmac>","0","0","2","2011-01-12 23:49:48","","0","","","","","2011-01-12 23:45:07","","","2011-01-12 23:49:48"
"4635334","PHP Password storage with HMAC+nonce - Is nonce randomness important?","<p>A few years I asked here on stackoverflow about how to make PHP password storage safe.
The <a href=""https://stackoverflow.com/questions/401656/secure-hash-and-salt-for-php-passwords/401684#401684"">main answer</a> suggests using the following hashing algorithm:</p>

<pre><code>function hash_password($password, $nonce) {
  global $site_key;
  return hash_hmac('sha512', $password . $nonce, $site_key);
}
</code></pre>

<p>The answer suggests using a <em>random</em> nonce. Is there any advantage in having a random nonce over simple unique nonces?</p>

<p>For instance, each user can have its own ID which does not change. However, let's assume user IDs are sequential(built with MySQL's auto increment feature) and therefore not random. Would the user ID be a good nonce or is randomness important?</p>

<p>Now, each user can pick an username. Each user has its own username which does not change, and two different users can't have the same username.
Usernames are still not random, but they aren't sequential either. Would usernames be good enough as a nonce? Would it be better than using the user ID?</p>
","<p>THIS IS ALL ON THE ASSUMPTION THAT A NONCE IS A SALT... </p>

<p>If by nonce you mean a salt then yes that requires more rainbow tables to be made. Usually once salt over 20 characters suffices, but for extreme security conditions you would want a new random salt for each password. </p>

<p>Also good choice in a slow hash <a href=""http://www.php.net/manual/en/function.hash.php#89574"" rel=""nofollow"">http://www.php.net/manual/en/function.hash.php#89574</a>, no sarcasm. But I like ripemd. </p>

<p>Didnt see the bottom half of your response. To elaborate: Nonces are used to prevent the use of rainbow tables. Whether the ID's would work depends merely on the length of the IDs. Randomness is not technically important, but just makes more rainbow tables required. An example would be, lets say you used a character ""a"" as a nonce and the password were 2 characters long, a rainbow table of a-aa, a-ab a-ac and so on would have to be created. If you use a random one each time maybe all the permutations of 'a' would have to be done + all the permuatations of the other random characters.</p>

<p>But in general making rainbow tables take quite a long time. So if you come up with a salt thats long its likely the rainbow table for it doesnt exists.  </p>
","4635368","2959","<php><security><hash><hmac><password-storage>","6","2","3","2011-02-18 22:02:50","","1","1","-1","","2017-05-23 10:33:08","2011-01-08 18:08:10","","2011-01-08 18:30:59","2011-01-08 18:15:33"
"4635334","PHP Password storage with HMAC+nonce - Is nonce randomness important?","<p>A few years I asked here on stackoverflow about how to make PHP password storage safe.
The <a href=""https://stackoverflow.com/questions/401656/secure-hash-and-salt-for-php-passwords/401684#401684"">main answer</a> suggests using the following hashing algorithm:</p>

<pre><code>function hash_password($password, $nonce) {
  global $site_key;
  return hash_hmac('sha512', $password . $nonce, $site_key);
}
</code></pre>

<p>The answer suggests using a <em>random</em> nonce. Is there any advantage in having a random nonce over simple unique nonces?</p>

<p>For instance, each user can have its own ID which does not change. However, let's assume user IDs are sequential(built with MySQL's auto increment feature) and therefore not random. Would the user ID be a good nonce or is randomness important?</p>

<p>Now, each user can pick an username. Each user has its own username which does not change, and two different users can't have the same username.
Usernames are still not random, but they aren't sequential either. Would usernames be good enough as a nonce? Would it be better than using the user ID?</p>
","<p>For storing password enough to use:</p>

<pre><code>sha512(salt + password)
</code></pre>

<p><strong><code>salt</code></strong> should be <strong>random and unique</strong> for each user. Random salt will make precalculated hash tables attack impossible: each user will require his own calculated hash tables. If you'll use not random salt, then chance that precalculated table exists will be higher.</p>

<p>Position salt <strong>before password</strong> will help to hide hash patterns in case some users have same password.</p>

<p><strong>Nonce</strong> is not needed, because it is for prevention a reply attack. This protection is not possible in your architecture.</p>

<p>Using <strong>HMAC</strong> to prevent collisions is useless, because a) we use hash not for MAC, b) to make probability of collision 50% for SHA-512 <a href=""http://en.wikipedia.org/wiki/Birthday_paradox"" rel=""nofollow"">you need to calculate</a> about 2^256 values. And 2^256 is truly astronomical number.</p>
","4636131","2959","<php><security><hash><hmac><password-storage>","6","0","3","2011-02-18 22:02:50","","1","1","-1","","2017-05-23 10:33:08","2011-01-08 18:08:10","","2011-01-08 21:12:54","2011-01-08 21:03:26"
"4635334","PHP Password storage with HMAC+nonce - Is nonce randomness important?","<p>A few years I asked here on stackoverflow about how to make PHP password storage safe.
The <a href=""https://stackoverflow.com/questions/401656/secure-hash-and-salt-for-php-passwords/401684#401684"">main answer</a> suggests using the following hashing algorithm:</p>

<pre><code>function hash_password($password, $nonce) {
  global $site_key;
  return hash_hmac('sha512', $password . $nonce, $site_key);
}
</code></pre>

<p>The answer suggests using a <em>random</em> nonce. Is there any advantage in having a random nonce over simple unique nonces?</p>

<p>For instance, each user can have its own ID which does not change. However, let's assume user IDs are sequential(built with MySQL's auto increment feature) and therefore not random. Would the user ID be a good nonce or is randomness important?</p>

<p>Now, each user can pick an username. Each user has its own username which does not change, and two different users can't have the same username.
Usernames are still not random, but they aren't sequential either. Would usernames be good enough as a nonce? Would it be better than using the user ID?</p>
","<p>I found that there was a fairly nice tutorial written online about this topic. I don't quite remember where on google I found it but let me see if I can break the function down well enough myself as it is right in front of me...</p>

<p>First the function, it can create a key length of any size. I took the liberty of commenting it fairly heavily...</p>

<pre><code>function pbkdf2($password,$salt,$iter_count = 1500,$key_length = 32,$algorithm = 'sha512') 
{
    /*
      @param string password -- password to be encrypted
      @param string salt -- salt to encrypt with
      @param int iter_count -- number of times to iterate blocks
      @param key_length -- length of key to return
      @param $algorithm -- algorithm to use in hashing

      @return string key
    */

    //determine the length of the hahs
    $hash_length = strlen(hash($algorithm,NULL,TRUE));
    //determine the number of key blocks to compute
    $key_blocks = ceil($key_length/$hash_length);
    //initialize key
    $key = '';

    //create the key itself
    //create blocks
    for($block_count = 1;$block_count &lt;= $key_blocks;$block_count++)
    {
        //initalize hash for this block
        $iterated_block = $block = hash_hmac($algorithm,$salt.pack('N',$block_count),$password,TRUE);
        //iterate blocks
        for($iterate = 1;$iterate &lt;= $iter_count;$iterate++)
        {
            //xor each iterate
            $iterated_block ^= ($block = hash_hmac($algorithm,$block,$password,TRUE));
        }
        //append iterated block
        $key .= $iterated_block;
    }
    //return the key
    return substr($key,0,$key_length);
}
</code></pre>

<ol>
<li>First thing it does is figure out the length of the hash.</li>
<li>Next it determines how many key blocks are required for the key length specified</li>
<li>Then it initializes the hash (key) to return</li>
<li>sets up the for loop that will create each block</li>
<li>takes the initial hash of the block with the block counter in binary appended to the salt</li>
<li>begins the loop to iterate the block $iter_count times (create a hash of itself)</li>
<li>XOR each iterate and append it to $iterated_block (xor previous hash to current)</li>
<li>XOR loop finishes</li>
<li>append $iterated_block to $key for each block</li>
<li>block loop finishes</li>
<li>return the key</li>
</ol>

<p>I feel this is probably the best way to do this. Maybe I am too paranoid?</p>
","4684501","2959","<php><security><hash><hmac><password-storage>","6","2","3","2011-02-18 22:02:50","","1","1","-1","","2017-05-23 10:33:08","2011-01-08 18:08:10","","2011-02-18 22:02:50","2011-01-13 19:46:05"
"10995568","RADIUS AND EAP calculating the Message-Authenticator","<p>I have been reading through RFC 3579 as I am implementing a RADIUS service that supports EAP-MD5 authentication. Unfortunately I am a little unsure how to interpret the RFC, particularly when trying to calculate the Message-Authenticator.</p>

<p>I basically create an HMAC-MD5 object (I am using C#) use the shared secret of the NAS for the key and concatenate Type (one byte) + Identifier (one byte) + Length (two bytes) + Request Authenticator (16 bytes) + All Attributes (Except the Message-Authenticator in the Access-Request) but the calculated value does not match the value in the packet.</p>

<p>Following the RFC this seems correct. Am I interpreting the RFC correctly?</p>

<p>Here is the code:</p>

<pre><code>RadiusPacket packet = Objects.Packet;

byte[] toHMAC;
toHMAC = new byte[1] { (byte)packet.Code };
toHMAC = ByteArray.Combine(toHMAC, new byte[1] { packet.Identifier });
// reversed to match endian of packet
toHMAC = ByteArray.Combine(toHMAC, ByteArray.Reverse(packet.LengthAsBytes));
toHMAC = ByteArray.Combine(toHMAC, packet.Authenticator);

for (int i = 0; i &lt; packet.Attributes.Length; i++)
{
    if (packet.Attributes[i].Type != RadiusAttributeType.MessageAuthenticator)
    {
        toHMAC = ByteArray.Combine(toHMAC, packet.Attributes[i].RawData);
    }
}

HMACMD5 md5 = new HMACMD5(Encoding.ASCII.GetBytes(Objects.NAS.SharedSecret));

// this DOES NOT match what is in the received packet...
byte[] hmac = md5.ComputeHash(toHMAC);
</code></pre>

<p>Any help would be much appreciated.</p>
","<p>I found the answer by a combination of re-reading the RFC and looking at some source code in JQuery. Here is what I found for anybody else that has the same is</p>

<p>The RFC (3579) reads:</p>

<p>'When the message integrity check is calculated the signature string should be considered to be sixteen octets of zero.'</p>

<p>Upon recieiving the Access-Request packet I replaced the existing Message-Authenticator with 16 zero bytes then HMAC-MD5 the entire packet and compare the calculated value with the Message-Authenticator in the packet.</p>

<p>The code is much simpler (I created a test packet from a wireshark capture):</p>

<pre><code>// a radius-eap packet captured from wireshark
RadiusPacket packet = new RadiusPacket(ByteArray.FromHex(""017600ad375be8f596e90bcffc5e32929d14275b04060a3e01ee05060000c3513d060000000f011f686f73742f64727377696e377472616379702e6472736c2e636f2e756b1e1330302d31322d30302d45332d34312d43311f1342342d39392d42412d46322d38412d44360606000000020c06000005dc4f240200002201686f73742f64727377696e377472616379702e6472736c2e636f2e756b5012c93ef628690a578b31709b0bbccade41""));

// identical packet that I can zero out MA for testing
RadiusPacket radiusPacketCopy = new RadiusPacket(ByteArray.FromHex(""017600ad375be8f596e90bcffc5e32929d14275b04060a3e01ee05060000c3513d060000000f011f686f73742f64727377696e377472616379702e6472736c2e636f2e756b1e1330302d31322d30302d45332d34312d43311f1342342d39392d42412d46322d38412d44360606000000020c06000005dc4f240200002201686f73742f64727377696e377472616379702e6472736c2e636f2e756b5012c93ef628690a578b31709b0bbccade41""));

// zero out MA
radiusPacketCopy.ZeroMessageAuthenticator();

// hash it up
HMACMD5 md5 = new HMACMD5(Encoding.ASCII.GetBytes(""mykey""));
byte[] hmac = md5.ComputeHash(radiusPacketCopy.RawPacket);

// the message authenticator MUST be correct
if (!ByteArray.AreEqual(hmac, packet.MessageAuthenticator))
{
    // etc
</code></pre>
","11003496","2951","<c#><hmac><radius>","3","2","2","2016-10-05 16:07:30","","0","","3474","","2016-10-05 16:07:30","2012-06-12 11:17:19","","","2012-06-12 19:28:24"
"10995568","RADIUS AND EAP calculating the Message-Authenticator","<p>I have been reading through RFC 3579 as I am implementing a RADIUS service that supports EAP-MD5 authentication. Unfortunately I am a little unsure how to interpret the RFC, particularly when trying to calculate the Message-Authenticator.</p>

<p>I basically create an HMAC-MD5 object (I am using C#) use the shared secret of the NAS for the key and concatenate Type (one byte) + Identifier (one byte) + Length (two bytes) + Request Authenticator (16 bytes) + All Attributes (Except the Message-Authenticator in the Access-Request) but the calculated value does not match the value in the packet.</p>

<p>Following the RFC this seems correct. Am I interpreting the RFC correctly?</p>

<p>Here is the code:</p>

<pre><code>RadiusPacket packet = Objects.Packet;

byte[] toHMAC;
toHMAC = new byte[1] { (byte)packet.Code };
toHMAC = ByteArray.Combine(toHMAC, new byte[1] { packet.Identifier });
// reversed to match endian of packet
toHMAC = ByteArray.Combine(toHMAC, ByteArray.Reverse(packet.LengthAsBytes));
toHMAC = ByteArray.Combine(toHMAC, packet.Authenticator);

for (int i = 0; i &lt; packet.Attributes.Length; i++)
{
    if (packet.Attributes[i].Type != RadiusAttributeType.MessageAuthenticator)
    {
        toHMAC = ByteArray.Combine(toHMAC, packet.Attributes[i].RawData);
    }
}

HMACMD5 md5 = new HMACMD5(Encoding.ASCII.GetBytes(Objects.NAS.SharedSecret));

// this DOES NOT match what is in the received packet...
byte[] hmac = md5.ComputeHash(toHMAC);
</code></pre>

<p>Any help would be much appreciated.</p>
","<p>Your code is close, but not quite there. You are stripping out the <code>Message-Authenticator</code> attribute completely. </p>

<p>Instead, it should remain in its original position within the packet, but the 16-byte <code>value</code> field of that attribute should be over-written with zeros.</p>
","39878870","2951","<c#><hmac><radius>","3","0","2","2016-10-05 16:07:30","","0","","3474","","2016-10-05 16:07:30","2012-06-12 11:17:19","","","2016-10-05 16:05:44"
"3186460","Why is ComputeHash not acting deterministically?","<p>I've run into an interesting issue.. It seems that ComputeHash() for a ""HMACSHA256"" hash is not behaving deterministically.. if I create two instances of HashAlgorithm using HashAlgorithm.Create(""HMACSHA256"").. And run ComputeHash, I get two different results.. below is an example static class that exhibiting this behavior.</p>

<pre><code>internal static string HashPassword(byte[] bAll)
{
    using (HashAlgorithm s = HashAlgorithm.Create(""HMACSHA256""))
    {
        return Convert.ToBase64String(s.ComputeHash(bAll));
    }
}
</code></pre>

<p>I've also tried to make the call non static (actually it started non static, and I have double and triple and quadrudruple checked my input array.. its absolutely the same on each call.. I've even done stuff in the immidiate window like :</p>

<pre><code>Convert.ToBase64String(HashAlgorithm.Create(""HMACSHA256"").ComputeHash(bAll)
</code></pre>

<p>And running that twice in the immidiates window via a breakpoint in the method returns two different hashes.. </p>

<p>I know Hash is suppose to be deterministic.. So what gives? is something going on with running in a debugger? Or any other ideas? really this is just two weird for words right now :-P.. </p>

<p>Thanks
Josh</p>
","<p>HMAC is a keyed hash.  I don't see the key in your example code.</p>

<p><code>HashAlgorithm.Create(""HMACSHA256"")</code> creates a HashAlgorithm instance, so it doesn't know anything about a key. It probably just calls <a href=""http://msdn.microsoft.com/en-us/library/5cs9tsk6.aspx"" rel=""noreferrer"">this HMACSHA256 Constructor</a>:</p>

<blockquote>
  <p><code>public HMACSHA256()</code></p>
  
  <p>Initializes a new instance of the HMACSHA256 class with a <strong><em>randomly generated key</em></strong>.</p>
</blockquote>

<p>You want <a href=""http://msdn.microsoft.com/en-us/library/9c9tf8wc.aspx"" rel=""noreferrer"">this constructor</a>:</p>

<blockquote>
  <p><code>public HMACSHA256(byte[] key)</code></p>
  
  <p>Initializes a new instance of the HMACSHA256 class with the specified key data.</p>
</blockquote>

<p>If you don't want to to hard-code the HMAC algorithm, you can use <a href=""http://msdn.microsoft.com/en-us/library/s5zz2x4d.aspx"" rel=""noreferrer"">KeyedHashAlgorithm.Create</a> and supply a specific key by setting the <a href=""http://msdn.microsoft.com/en-us/library/system.security.cryptography.keyedhashalgorithm.key.aspx"" rel=""noreferrer"">KeyedHashAlgorithm.Key</a> property.</p>

<p>If you don't want to use a key, then use a non-keyed hash like SHA256.</p>
","3186570","2912","<c#><.net><hmac><hashalgorithm>","12","24","3","2012-05-20 15:08:23","3186570","8","","168868","","2012-05-20 15:08:23","2010-07-06 13:14:19","","2010-07-06 13:47:17","2010-07-06 13:27:42"
"3186460","Why is ComputeHash not acting deterministically?","<p>I've run into an interesting issue.. It seems that ComputeHash() for a ""HMACSHA256"" hash is not behaving deterministically.. if I create two instances of HashAlgorithm using HashAlgorithm.Create(""HMACSHA256"").. And run ComputeHash, I get two different results.. below is an example static class that exhibiting this behavior.</p>

<pre><code>internal static string HashPassword(byte[] bAll)
{
    using (HashAlgorithm s = HashAlgorithm.Create(""HMACSHA256""))
    {
        return Convert.ToBase64String(s.ComputeHash(bAll));
    }
}
</code></pre>

<p>I've also tried to make the call non static (actually it started non static, and I have double and triple and quadrudruple checked my input array.. its absolutely the same on each call.. I've even done stuff in the immidiate window like :</p>

<pre><code>Convert.ToBase64String(HashAlgorithm.Create(""HMACSHA256"").ComputeHash(bAll)
</code></pre>

<p>And running that twice in the immidiates window via a breakpoint in the method returns two different hashes.. </p>

<p>I know Hash is suppose to be deterministic.. So what gives? is something going on with running in a debugger? Or any other ideas? really this is just two weird for words right now :-P.. </p>

<p>Thanks
Josh</p>
","<p>You need a Key for HMACSHA256. The key will be random if it is not passed into the constructor.</p>
","3186581","2912","<c#><.net><hmac><hashalgorithm>","12","3","3","2012-05-20 15:08:23","3186570","8","","168868","","2012-05-20 15:08:23","2010-07-06 13:14:19","","","2010-07-06 13:28:43"
"3186460","Why is ComputeHash not acting deterministically?","<p>I've run into an interesting issue.. It seems that ComputeHash() for a ""HMACSHA256"" hash is not behaving deterministically.. if I create two instances of HashAlgorithm using HashAlgorithm.Create(""HMACSHA256"").. And run ComputeHash, I get two different results.. below is an example static class that exhibiting this behavior.</p>

<pre><code>internal static string HashPassword(byte[] bAll)
{
    using (HashAlgorithm s = HashAlgorithm.Create(""HMACSHA256""))
    {
        return Convert.ToBase64String(s.ComputeHash(bAll));
    }
}
</code></pre>

<p>I've also tried to make the call non static (actually it started non static, and I have double and triple and quadrudruple checked my input array.. its absolutely the same on each call.. I've even done stuff in the immidiate window like :</p>

<pre><code>Convert.ToBase64String(HashAlgorithm.Create(""HMACSHA256"").ComputeHash(bAll)
</code></pre>

<p>And running that twice in the immidiates window via a breakpoint in the method returns two different hashes.. </p>

<p>I know Hash is suppose to be deterministic.. So what gives? is something going on with running in a debugger? Or any other ideas? really this is just two weird for words right now :-P.. </p>

<p>Thanks
Josh</p>
","<p>Just adding to this in hopes to save someone the headache I went through. </p>

<p>In the case of <strong>.Net Membership Provider</strong>, make sure you have the  setting in your web.config or app.config. Else it will automatically generate its own key... crap out on authentication, and then belligerently laugh at you in the end.</p>
","3908845","2912","<c#><.net><hmac><hashalgorithm>","12","5","3","2012-05-20 15:08:23","3186570","8","","168868","","2012-05-20 15:08:23","2010-07-06 13:14:19","","","2010-10-11 18:13:50"
"21611502","Matching Base64 encoded HMAC-SHA1 strings in iOS/Objective-c Ruby/Rails","<p>I know there are a lot of posts about converting NSData to NSString, NSData to Base64 encoded string, generating HMAC etc. but none that seem to answer how to generate matching Base64 encoded HMAC-SHA1 strings in iOS and Rails.</p>

<p>Using the code below, the signatures do not match. </p>

<p>iOS code:</p>

<pre><code>NSString *secret = @""xxx"";
NSString *data = @""http://someurl?someparams"";
const char *cKey = [secret cStringUsingEncoding:NSASCIIStringEncoding];
const char *cData = [data cStringUsingEncoding:NSASCIIStringEncoding];
unsigned char cHMAC[CC_SHA1_DIGEST_LENGTH];
CCHmac(kCCHmacAlgSHA1, cKey, strlen(cKey), cData, strlen(cData), cHMAC);
NSData *HMAC = [[NSData alloc] initWithBytes:cHMAC length:sizeof(cHMAC)];
NSString *signature = [HMAC base64EncodedStringWithOptions:NSDataBase64Encoding64CharacterLineLength];
</code></pre>

<p>Rails code:</p>

<pre><code>secret = ""xxx"";
data = ""http://someurl?someparams"";
hmac = OpenSSL::HMAC.hexdigest(OpenSSL::Digest::Digest.new('sha1'), secret.encode(""ASCII""), data.encode(""ASCII""))
signature = Base64.encode64(hmac)
puts ""HMAC #{hmac}""
puts ""Signature #{signature}""
</code></pre>

<p>iOS output:</p>

<pre><code>HMAC &lt;05651433 c9a3d449 5816ded7 80bef87f dc903e4a&gt; 
Signature BWUUM8mj1ElYFt7XgL74f9yQPko=
</code></pre>

<p>Rails output:</p>

<pre><code>HMAC 05651433c9a3d4495816ded780bef87fdc903e4a
Signature MDU2NTE0MzNjOWEzZDQ0OTU4MTZkZWQ3ODBiZWY4N2ZkYzkwM2U0YQ==
</code></pre>

<p>Using following code I can get them to match. But it feels hacky (use of description and string replacements in iOS side and <code>chomp</code> in Rails):</p>

<p>iOS code:</p>

<pre><code>NSString *secret = @""xxx"";
NSString *data = @""http://someurl?someparams"";
const char *cKey = [secret cStringUsingEncoding:NSASCIIStringEncoding];
const char *cData = [data cStringUsingEncoding:NSASCIIStringEncoding];
unsigned char cHMAC[CC_SHA1_DIGEST_LENGTH];
CCHmac(kCCHmacAlgSHA1, cKey, strlen(cKey), cData, strlen(cData), cHMAC);
NSData *HMAC = [[NSData alloc] initWithBytes:cHMAC length:sizeof(cHMAC)];
NSString *HMACStr = [[HMAC description] stringByReplacingOccurrencesOfString:@""&lt;"" withString:@""""];
HMACStr = [HMACStr stringByReplacingOccurrencesOfString:@""&gt;"" withString:@""""];
HMACStr = [HMACStr stringByReplacingOccurrencesOfString:@"" "" withString:@""""];
HMAC = [HMACStr dataUsingEncoding:NSASCIIStringEncoding];
NSString *signature = [HMAC base64EncodedStringWithOptions:NSDataBase64Encoding64CharacterLineLength];
NSLog(@""HMAC %@"", [HMAC description]);
NSLog(@""Signature %@"", signature);
</code></pre>

<p>Rails code:</p>

<pre><code>secret = ""xxx""
data = ""http://someurl?someparams""
hmac = OpenSSL::HMAC.hexdigest(OpenSSL::Digest::Digest.new('sha1'), secret.encode(""ASCII""), data.encode(""ASCII""))
signature = Base64.encode64(hmac).chomp
puts ""HMAC #{hmac}""
puts ""Signature #{signature}""
</code></pre>

<p>iOS output:</p>

<pre><code>HMAC &lt;30353635 31343333 63396133 64343439 35383136 64656437 38306265 66383766 64633930 33653461&gt; 
Signature MDU2NTE0MzNjOWEzZDQ0OTU4MTZkZWQ3ODBiZWY4N2ZkYzkwM2U0YQ== 
</code></pre>

<p>Rails output:</p>

<pre><code>HMAC 05651433c9a3d4495816ded780bef87fdc903e4a
Signature MDU2NTE0MzNjOWEzZDQ0OTU4MTZkZWQ3ODBiZWY4N2ZkYzkwM2U0YQ==
</code></pre>

<p>How can I generate matching signatures without using the hacks?</p>
","<p>I am not familiar with Rails, but it seems to me that</p>

<pre><code>hmac = OpenSSL::HMAC.hexdigest(OpenSSL::Digest::Digest.new('sha1'), secret.encode(""ASCII""), data.encode(""ASCII""))
</code></pre>

<p>computes the digest as a <em>hex string</em>, whereas</p>

<pre><code>unsigned char cHMAC[CC_SHA1_DIGEST_LENGTH];
CCHmac(kCCHmacAlgSHA1, cKey, strlen(cKey), cData, strlen(cData), cHMAC);
NSData *HMAC = [[NSData alloc] initWithBytes:cHMAC length:sizeof(cHMAC)];
</code></pre>

<p>computes the digest as a <code>NSData</code> object, which is just a wrapper for a
sequence of arbitrary bytes.</p>

<p>You probably should change the Rails code to compute the digest as sequence of
bytes as well, instead of a hex string (perhaps using <code>digest</code> instead of <code>hexdigest</code>?)</p>
","21611703","2871","<ios><ruby-on-rails><base64><hmac>","3","5","1","2014-02-06 19:42:02","21611703","1","1","1325849","","2014-02-06 19:42:02","2014-02-06 18:53:00","","","2014-02-06 19:03:35"
"37347090","Azure IOT Hub - Device Security Token","<p>so we are using MQTT to connect device/server. I have everything working using a mock client using the M2Mqtt library. What im really struggling with is how to in code generate the <strong><em>signature</em></strong> used in the password field.</p>

<p>I followed this <a href=""https://azure.microsoft.com/en-us/documentation/articles/iot-hub-sas-tokens/"" rel=""nofollow"">https://azure.microsoft.com/en-us/documentation/articles/iot-hub-sas-tokens/</a> however im battling around the HMAC side of things. What is the ""** signingKey**"" they talk of? Is that the devices shared access key? For now just getting the mock client to create its own signature in code (not through the device explorer) is essential before we even worry if our products in the field can compute this (Finding this really over complicated for field devices). Is there a C# example somewhere I can follow other than the node.js - what does this line mean ""hmac.update(toSign);""</p>

<p>Is there any simpler way to authenticate a device to the server? maybe just using its shared access key?</p>

<p>Sorry for all the questions :/ Probably I just need a step by step guide on what/when to do URI encode/Base64 encode/decode, HMAC 256 etc as I believe the documentation is far from sufficient. </p>

<p>""{signature}    An HMAC-SHA256 signature string of the form: {URL-encoded-resourceURI} + ""\n"" + expiry. Important: The key is decoded from base64 and used as key to perform the HMAC-SHA256 computation.""</p>
","<p>The page <a href=""https://azure.microsoft.com/en-us/documentation/articles/iot-hub-sas-tokens/"" rel=""nofollow"">https://azure.microsoft.com/en-us/documentation/articles/iot-hub-sas-tokens/</a> includes a Node.js function that generates a SAS token from the given inputs.
From what you have said, you're using the token to enable a device to connect to your IoT Hub, so the inputs to the Node function should be:</p>

<ul>
<li>resource URI: {IoT hub name}.azure-devices.net/devices/{device id}.</li>
<li>signing key: any symmetric key for the {device id} identity. You can obtain this key from the IoT Hub device identity registry - for example by using the <a href=""https://github.com/Azure/azure-iot-sdks/blob/master/tools/DeviceExplorer/doc/how_to_use_device_explorer.md"" rel=""nofollow"">DeviceExplorer</a> tool.</li>
<li>no policy name.</li>
<li>any expiration time.</li>
</ul>
","37383699","2848","<c#><azure><mqtt><hmac><azure-iot-hub>","1","0","4","2017-01-01 14:45:08","37387845","1","3","960744","","2016-05-21 15:05:44","2016-05-20 12:44:27","","","2016-05-23 06:13:12"
"37347090","Azure IOT Hub - Device Security Token","<p>so we are using MQTT to connect device/server. I have everything working using a mock client using the M2Mqtt library. What im really struggling with is how to in code generate the <strong><em>signature</em></strong> used in the password field.</p>

<p>I followed this <a href=""https://azure.microsoft.com/en-us/documentation/articles/iot-hub-sas-tokens/"" rel=""nofollow"">https://azure.microsoft.com/en-us/documentation/articles/iot-hub-sas-tokens/</a> however im battling around the HMAC side of things. What is the ""** signingKey**"" they talk of? Is that the devices shared access key? For now just getting the mock client to create its own signature in code (not through the device explorer) is essential before we even worry if our products in the field can compute this (Finding this really over complicated for field devices). Is there a C# example somewhere I can follow other than the node.js - what does this line mean ""hmac.update(toSign);""</p>

<p>Is there any simpler way to authenticate a device to the server? maybe just using its shared access key?</p>

<p>Sorry for all the questions :/ Probably I just need a step by step guide on what/when to do URI encode/Base64 encode/decode, HMAC 256 etc as I believe the documentation is far from sufficient. </p>

<p>""{signature}    An HMAC-SHA256 signature string of the form: {URL-encoded-resourceURI} + ""\n"" + expiry. Important: The key is decoded from base64 and used as key to perform the HMAC-SHA256 computation.""</p>
","<p>Finally got it :)</p>

<pre><code>    public static string getSaSToken()
    {
        TimeSpan fromEpochStart = DateTime.UtcNow - new DateTime(1970, 1, 1);
        string expiry = Convert.ToString((int)fromEpochStart.TotalSeconds + 3600);

        string baseAddress = ""XYZABCBLAH.azure-devices.net/devices/12345"".ToLower();
        string stringToSign = WebUtility.UrlEncode(baseAddress).ToLower() + ""\n"" + expiry;

        byte[] data = Convert.FromBase64String(""y2moreblahblahblah="");
        HMACSHA256 hmac = new HMACSHA256(data);
        byte[] poo = hmac.ComputeHash(Encoding.UTF8.GetBytes(stringToSign));
        string signature = Convert.ToBase64String(hmac.ComputeHash(Encoding.UTF8.GetBytes(stringToSign)));

        string token = String.Format(CultureInfo.InvariantCulture, ""SharedAccessSignature sr={0}&amp;sig={1}&amp;se={2}"",
                        WebUtility.UrlEncode(baseAddress).ToLower(), WebUtility.UrlEncode(signature), expiry);

        return token;
    }
</code></pre>

<p>""12345"" is our device's serial number.
the key of y2z.... will be a base64 combination of our serial with something else fancy (as long as its in the base64 format to make the hub happy ;) )</p>
","37387845","2848","<c#><azure><mqtt><hmac><azure-iot-hub>","1","0","4","2017-01-01 14:45:08","37387845","1","3","960744","","2016-05-21 15:05:44","2016-05-20 12:44:27","","","2016-05-23 09:52:51"
"37347090","Azure IOT Hub - Device Security Token","<p>so we are using MQTT to connect device/server. I have everything working using a mock client using the M2Mqtt library. What im really struggling with is how to in code generate the <strong><em>signature</em></strong> used in the password field.</p>

<p>I followed this <a href=""https://azure.microsoft.com/en-us/documentation/articles/iot-hub-sas-tokens/"" rel=""nofollow"">https://azure.microsoft.com/en-us/documentation/articles/iot-hub-sas-tokens/</a> however im battling around the HMAC side of things. What is the ""** signingKey**"" they talk of? Is that the devices shared access key? For now just getting the mock client to create its own signature in code (not through the device explorer) is essential before we even worry if our products in the field can compute this (Finding this really over complicated for field devices). Is there a C# example somewhere I can follow other than the node.js - what does this line mean ""hmac.update(toSign);""</p>

<p>Is there any simpler way to authenticate a device to the server? maybe just using its shared access key?</p>

<p>Sorry for all the questions :/ Probably I just need a step by step guide on what/when to do URI encode/Base64 encode/decode, HMAC 256 etc as I believe the documentation is far from sufficient. </p>

<p>""{signature}    An HMAC-SHA256 signature string of the form: {URL-encoded-resourceURI} + ""\n"" + expiry. Important: The key is decoded from base64 and used as key to perform the HMAC-SHA256 computation.""</p>
","<p>This will be helpful for someone someday:</p>

<h3>Construct authorization header for Azure IoT Hub</h3>

<p><a href=""https://github.com/snobu/Azure-IoT-Hub/blob/master/make-token.sh"" rel=""nofollow"">https://github.com/snobu/Azure-IoT-Hub/blob/master/make-token.sh</a></p>

<pre><code>#!/usr/bin/env bash
#
# GitHub repo:
#    https://github.com/snobu/Azure-IoT-Hub
#
# Construct authorization header for Azure IoT Hub
#    https://azure.microsoft.com/en-us/documentation/articles/iot-hub-devguide/#security
#
# The security token has the following format:
#    SharedAccessSignature sig={signature-string}&amp;se={expiry}&amp;skn={policyName}&amp;sr={URL-encoded-resourceURI}
#
# Author:
#    Adrian Calinescu (a-adcali@microsoft.com), Twitter: @evilSnobu, github.com/snobu
#
# Many things borrowed from:
#    http://stackoverflow.com/questions/20103258/accessing-azure-blob-storage-using-bash-curl
#
# Prereq:
#    OpenSSL
#    npm install underscore -g (for the tidy JSON colorized output) - OPTIONAL
#    Python 2.6 (Might work with 2.5 too)
#    curl (a build from this century should do)

urlencodesafe() {
    # Use urllib to safely urlencode stuff
    python -c ""import urllib, sys; print urllib.quote_plus(sys.argv[1])"" $1
}

iothub_name=""heresthething""
apiversion=""2015-08-15-preview""
req_url=""${iothub_name}.azure-devices.net/devices?top=100&amp;api-version=${apiversion}""

sas_key=""eU2XXXXXXXXXXXXXXXXXXXXXXXXXXXXX=""
sas_name=""iothubowner""

authorization=""SharedAccessSignature""

# 259200 seconds = 72h (Signature is good for the next 72h)
expiry=$(echo $(date +%s)+259200 | bc)
req_url_encoded=$(urlencodesafe $req_url)
string_to_sign=""$req_url_encoded\\n$expiry""

# Create the HMAC signature for the Authorization header
#
# In pseudocode:
#      BASE64_ENCODE(HMAC_SHA256($string_to_sign))
#
# With OpenSSL it's a little more work (StackOverflow thread at the top for details)
decoded_hex_key=$(printf %b ""$sas_key"" | base64 -d -w0 | xxd -p -c256)
signature=$(printf %b ""$string_to_sign"" | openssl dgst -sha256 -mac HMAC -macopt ""hexkey:$decoded_hex_key"" -binary | base64 -w0)

# URLencode computed HMAC signature
sig_urlencoded=$(urlencodesafe $signature)

# Print Authorization header
authorization_header=""Authorization: $authorization sr=$req_url_encoded&amp;sig=$sig_urlencoded&amp;se=$expiry&amp;skn=$sas_name""

echo -e ""\n$authorization_header\n""

# We're ready to make the GET request against azure-devices.net REST API
curl -s -H ""$authorization_header"" ""https://$req_url"" | underscore print --color

echo -e ""\n""
</code></pre>

<p>And a sample MQTT user/pass combo for Azure IoT Hub (yes the password is brutal and includes a whitespace):</p>

<p><a href=""https://github.com/Azure/azure-content/blob/master/articles/iot-hub/iot-hub-devguide.md#example"" rel=""nofollow"">https://github.com/Azure/azure-content/blob/master/articles/iot-hub/iot-hub-devguide.md#example</a></p>

<p><strong>Username (DeviceId is case sensitive):</strong> <code>iothubname.azure-devices.net/DeviceId</code></p>

<p><strong>Password (Generate SAS with Device Explorer):</strong> <code>SharedAccessSignature sr=iothubname.azure-devices.net%2fdevices%2fDeviceId&amp;sig=kPszxZZZZZZZZZZZZZZZZZAhLT%2bV7o%3d&amp;se=1487709501</code></p>
","37391814","2848","<c#><azure><mqtt><hmac><azure-iot-hub>","1","0","4","2017-01-01 14:45:08","37387845","1","3","960744","","2016-05-21 15:05:44","2016-05-20 12:44:27","","","2016-05-23 13:04:58"
"37347090","Azure IOT Hub - Device Security Token","<p>so we are using MQTT to connect device/server. I have everything working using a mock client using the M2Mqtt library. What im really struggling with is how to in code generate the <strong><em>signature</em></strong> used in the password field.</p>

<p>I followed this <a href=""https://azure.microsoft.com/en-us/documentation/articles/iot-hub-sas-tokens/"" rel=""nofollow"">https://azure.microsoft.com/en-us/documentation/articles/iot-hub-sas-tokens/</a> however im battling around the HMAC side of things. What is the ""** signingKey**"" they talk of? Is that the devices shared access key? For now just getting the mock client to create its own signature in code (not through the device explorer) is essential before we even worry if our products in the field can compute this (Finding this really over complicated for field devices). Is there a C# example somewhere I can follow other than the node.js - what does this line mean ""hmac.update(toSign);""</p>

<p>Is there any simpler way to authenticate a device to the server? maybe just using its shared access key?</p>

<p>Sorry for all the questions :/ Probably I just need a step by step guide on what/when to do URI encode/Base64 encode/decode, HMAC 256 etc as I believe the documentation is far from sufficient. </p>

<p>""{signature}    An HMAC-SHA256 signature string of the form: {URL-encoded-resourceURI} + ""\n"" + expiry. Important: The key is decoded from base64 and used as key to perform the HMAC-SHA256 computation.""</p>
","<p>Here is how the SAS token can be generated in Java:</p>

<pre><code>import java.io.UnsupportedEncodingException;
import java.net.MalformedURLException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.util.Base64;
import java.util.Date;
import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;

public class AzureSasTokenCreator
{

    public static void main(String[] args) throws InvalidKeyException, UnsupportedEncodingException,
                    MalformedURLException, NoSuchAlgorithmException
    {
        String token = generateSasTokenForIotDevice(""myiothub.azure-devices.net/devices/mydevice"",
                        ""ZNILSsz4ke0r5DQ8rfB/PBWf6QqWGV7aaT/iICi9WTc="", 3600);

        System.out.println(token);
    }

    private static String generateSasTokenForIotDevice(String uri, String devicePrimaryKey, int validtySeconds)
                    throws UnsupportedEncodingException, MalformedURLException, NoSuchAlgorithmException,
                    InvalidKeyException
    {
        Date now = new Date();
        Date previousDate = new Date(1970);
        long tokenExpirationTime = ((now.getTime() - previousDate.getTime()) / 1000) + validtySeconds;

        String signature = getSignature(uri, tokenExpirationTime, devicePrimaryKey);

        String token = String.format(""SharedAccessSignature sr=%s&amp;sig=%s&amp;se=%s"", uri, signature,
                        String.valueOf(tokenExpirationTime));

        return token;
    }

    private static String getSignature(String resourceUri, long expiryTime, String devicePrimaryKey)
                    throws InvalidKeyException, NoSuchAlgorithmException, UnsupportedEncodingException
    {
        byte[] textToSign = new String(resourceUri + ""\n"" + expiryTime).getBytes();
        byte[] decodedDeviceKey = Base64.getDecoder().decode(devicePrimaryKey);
        byte[] signature = encryptHmacSha256(textToSign, decodedDeviceKey);
        byte[] encryptedSignature = Base64.getEncoder().encode(signature);
        String encryptedSignatureUtf8 = new String(encryptedSignature, StandardCharsets.UTF_8);

        return URLEncoder.encode(encryptedSignatureUtf8, ""utf-8"");
    }

    private static byte[] encryptHmacSha256(byte[] textToSign, byte[] key)
                    throws NoSuchAlgorithmException, InvalidKeyException

    {
        SecretKeySpec secretKey = new SecretKeySpec(key, ""HmacSHA256"");
        Mac hMacSha256 = Mac.getInstance(""HmacSHA256"");
        hMacSha256.init(secretKey);
        return hMacSha256.doFinal(textToSign);
    }
}
</code></pre>

<p>See also: <a href=""https://github.com/Breitmann/AzureSasTokenCreator"" rel=""nofollow noreferrer"">https://github.com/Breitmann/AzureSasTokenCreator</a></p>
","41416294","2848","<c#><azure><mqtt><hmac><azure-iot-hub>","1","0","4","2017-01-01 14:45:08","37387845","1","3","960744","","2016-05-21 15:05:44","2016-05-20 12:44:27","","","2017-01-01 14:45:08"
"44420192","HMAC SHA512 using CommonCrypto in Swift 3.1","<p>I'm trying to encrypt data to send to the API.</p>

<p>The API requires the data to be sent as <code>hmac_sha512</code> encrypted hash.</p>

<p>I've found various examples of how it possibly could have been done for <code>sha1</code> and others (not <code>sha512</code>) and also in older versions of Swift.</p>

<p>None of the examples that I tried work for <code>swift 3.1</code></p>

<p>Any help in the right direction will be appreciated.</p>

<p><strong>Edit:</strong> </p>

<p>In PHP, I successfully send it using:</p>

<pre><code>    $sign = hash_hmac('sha512', $post_data, $this-&gt;secret);
</code></pre>

<p><strong>Edit 2:</strong> </p>

<p>I <code>did add briding header</code>, I don't know what to do next! As the code examples followed after that don't work for swift 3.1 :(</p>

<p><strong>Edit 3:</strong></p>

<p><strong>Solved!</strong> Guess what, I was creating briding header incorrectly! :(  </p>

<p>P.S I'm trying to <strong>avoid CryptoSwift, focusing on CommonCrypto.</strong></p>

<p>The answer given below is not proper, as it doesn't allow hmac to get a key for encryption. I did research and finally got it working. This post contains the working example project for hmac: <a href=""https://github.com/nabtron/hmacTest"" rel=""nofollow noreferrer"">https://github.com/nabtron/hmacTest</a></p>
","<p>I think the best thing to do is using <a href=""https://github.com/soffes/Crypto"" rel=""noreferrer"">Crypto</a> pod which is a wrapper for common crypto. In case you want to use directly commonCrypto you should add the bridging header to the project and import common crypto using: <code>#import &lt;CommonCrypto/CommonCrypto.h&gt;</code></p>

<p><strong>Edit 1</strong><br></p>

<p>Create a swift class and add the following code to it:</p>

<pre><code>import Foundation

extension String {
    var md5: String {
        return HMAC.hash(inp: self, algo: HMACAlgo.MD5)
    }

    var sha1: String {
        return HMAC.hash(inp: self, algo: HMACAlgo.SHA1)
    }

    var sha224: String {
        return HMAC.hash(inp: self, algo: HMACAlgo.SHA224)
    }

    var sha256: String {
        return HMAC.hash(inp: self, algo: HMACAlgo.SHA256)
    }

    var sha384: String {
        return HMAC.hash(inp: self, algo: HMACAlgo.SHA384)
    }

    var sha512: String {
        return HMAC.hash(inp: self, algo: HMACAlgo.SHA512)
    }
}

public struct HMAC {

    static func hash(inp: String, algo: HMACAlgo) -&gt; String {
        if let stringData = inp.data(using: String.Encoding.utf8, allowLossyConversion: false) {
            return hexStringFromData(input: digest(input: stringData as NSData, algo: algo))
        }
        return """"
    }

    private static func digest(input : NSData, algo: HMACAlgo) -&gt; NSData {
        let digestLength = algo.digestLength()
        var hash = [UInt8](repeating: 0, count: digestLength)
        switch algo {
        case .MD5:
            CC_MD5(input.bytes, UInt32(input.length), &amp;hash)
            break
        case .SHA1:
            CC_SHA1(input.bytes, UInt32(input.length), &amp;hash)
            break
        case .SHA224:
            CC_SHA224(input.bytes, UInt32(input.length), &amp;hash)
            break
        case .SHA256:
            CC_SHA256(input.bytes, UInt32(input.length), &amp;hash)
            break
        case .SHA384:
            CC_SHA384(input.bytes, UInt32(input.length), &amp;hash)
            break
        case .SHA512:
            CC_SHA512(input.bytes, UInt32(input.length), &amp;hash)
            break
        }
        return NSData(bytes: hash, length: digestLength)
    }

    private static func hexStringFromData(input: NSData) -&gt; String {
        var bytes = [UInt8](repeating: 0, count: input.length)
        input.getBytes(&amp;bytes, length: input.length)

        var hexString = """"
        for byte in bytes {
            hexString += String(format:""%02x"", UInt8(byte))
        }

        return hexString
    }
}

enum HMACAlgo {
    case MD5, SHA1, SHA224, SHA256, SHA384, SHA512

    func digestLength() -&gt; Int {
        var result: CInt = 0
        switch self {
        case .MD5:
            result = CC_MD5_DIGEST_LENGTH
        case .SHA1:
            result = CC_SHA1_DIGEST_LENGTH
        case .SHA224:
            result = CC_SHA224_DIGEST_LENGTH
        case .SHA256:
            result = CC_SHA256_DIGEST_LENGTH
        case .SHA384:
            result = CC_SHA384_DIGEST_LENGTH
        case .SHA512:
            result = CC_SHA512_DIGEST_LENGTH
        }
        return Int(result)
    }
}
</code></pre>

<p>then use it simply by <code>stringName.sha512</code><br>
this class extends the String class which gives the ability to use the hashing as a function in the string class.</p>
","44420400","2820","<swift><xcode><hmac><sha512><commoncrypto>","0","6","1","2018-05-07 21:57:09","","3","2","953566","","2018-05-07 21:57:09","2017-06-07 18:26:06","2017-06-07 18:52:38","2017-06-07 19:03:01","2017-06-07 18:38:52"
"17569834","angularjs resource Authentication Header based on request body","<p>I'm trying to use Resource with APIs protected by HMAC authentication methods. So I need to append ""Authentication"" header to the request.</p>

<p>In this example code I get the Article from the API with GET and update it with ""update"" custom method. For the update I need Authentication header. The problem is that <code>$scope.article</code> is <code>undefined</code> when I define the header.</p>

<p><code>getAuth</code> function calculates the sign.</p>

<p>Suggestions?</p>

<pre><code>function EditCtrl($scope,$resource,articleId) {
    var Article = $resource('/blog/articles/:articleId',
    {articleId:articleId}, {
        update: {
            method:'PUT',
            headers: {Authentication: getAuth('key','PUT','/blog/articles/'+articleId,$scope.article)}
        }
    });

    var article = Article.get();
    $scope.article = article;

    $scope.save = function(){
        article.$update();
    }
}

function getAuth(key,verb,resource,data) {
    //data is undefined there

    content_md5 = CryptoJS.MD5(JSON.stringify(data));
    message = verb+'\n'+resource+'\n'+content_md5;
    hash = CryptoJS.HmacSHA512(message, key);

    var sign = ""AuthHMAC 0123456789:""+hash.toString(CryptoJS.enc.Base64);

    return sign;
}
</code></pre>
","<p>I have not tried it, but if you look at lower level API <code>$http</code>, it has a methods that take in config as a parameter. This config i think contains the <code>headers</code> property that you can update before making the request. Here is the signature for PUT</p>

<p><code>$http.put(url, data, config)</code></p>
","17570805","2778","<angularjs><header><hmac>","3","-1","4","2015-05-11 17:24:21","","4","1","1464112","","2015-05-11 17:24:21","2013-07-10 11:46:13","","","2013-07-10 12:35:46"
"17569834","angularjs resource Authentication Header based on request body","<p>I'm trying to use Resource with APIs protected by HMAC authentication methods. So I need to append ""Authentication"" header to the request.</p>

<p>In this example code I get the Article from the API with GET and update it with ""update"" custom method. For the update I need Authentication header. The problem is that <code>$scope.article</code> is <code>undefined</code> when I define the header.</p>

<p><code>getAuth</code> function calculates the sign.</p>

<p>Suggestions?</p>

<pre><code>function EditCtrl($scope,$resource,articleId) {
    var Article = $resource('/blog/articles/:articleId',
    {articleId:articleId}, {
        update: {
            method:'PUT',
            headers: {Authentication: getAuth('key','PUT','/blog/articles/'+articleId,$scope.article)}
        }
    });

    var article = Article.get();
    $scope.article = article;

    $scope.save = function(){
        article.$update();
    }
}

function getAuth(key,verb,resource,data) {
    //data is undefined there

    content_md5 = CryptoJS.MD5(JSON.stringify(data));
    message = verb+'\n'+resource+'\n'+content_md5;
    hash = CryptoJS.HmacSHA512(message, key);

    var sign = ""AuthHMAC 0123456789:""+hash.toString(CryptoJS.enc.Base64);

    return sign;
}
</code></pre>
","<p>I improve Alan's solution using three elements:</p>

<ul>
<li>factory service that shares the key</li>
<li>controller that sends the httpRequest</li>
<li>httpRequestInterceptor that sets the header</li>
</ul>

<p>The controller calls a setKey()  provided by a factory service that calculates the header. Finally the httpResponseInterceptor sets the header of request calling getKey() provided by a factory service.</p>

<p>Solved!</p>
","17590099","2778","<angularjs><header><hmac>","3","0","4","2015-05-11 17:24:21","","4","1","1464112","","2015-05-11 17:24:21","2013-07-10 11:46:13","","2013-07-11 09:48:15","2013-07-11 09:42:14"
"17569834","angularjs resource Authentication Header based on request body","<p>I'm trying to use Resource with APIs protected by HMAC authentication methods. So I need to append ""Authentication"" header to the request.</p>

<p>In this example code I get the Article from the API with GET and update it with ""update"" custom method. For the update I need Authentication header. The problem is that <code>$scope.article</code> is <code>undefined</code> when I define the header.</p>

<p><code>getAuth</code> function calculates the sign.</p>

<p>Suggestions?</p>

<pre><code>function EditCtrl($scope,$resource,articleId) {
    var Article = $resource('/blog/articles/:articleId',
    {articleId:articleId}, {
        update: {
            method:'PUT',
            headers: {Authentication: getAuth('key','PUT','/blog/articles/'+articleId,$scope.article)}
        }
    });

    var article = Article.get();
    $scope.article = article;

    $scope.save = function(){
        article.$update();
    }
}

function getAuth(key,verb,resource,data) {
    //data is undefined there

    content_md5 = CryptoJS.MD5(JSON.stringify(data));
    message = verb+'\n'+resource+'\n'+content_md5;
    hash = CryptoJS.HmacSHA512(message, key);

    var sign = ""AuthHMAC 0123456789:""+hash.toString(CryptoJS.enc.Base64);

    return sign;
}
</code></pre>
","<p>I'm working on something similar right now.</p>

<p>I believe the answer lies in using $httpProvider.defaults.transformRequest functions, I don't have it complete yet, but the basics as described in the docs: <a href=""http://docs.angularjs.org/api/ng"" rel=""nofollow"">http://docs.angularjs.org/api/ng</a>.$http</p>

<p>I think are this:</p>

<pre><code>var authModule = angular.module('my.AuthModule', [], myAuthModuleCfg);

function myAuthModuleCfg($httpProvider) {
    $httpProvider.defaults.transformRequest.push(myRequestSigner)
}

function myRequestSigner(data, headersGetter) {
    // do some signing, etc...
}
</code></pre>
","18906882","2778","<angularjs><header><hmac>","3","0","4","2015-05-11 17:24:21","","4","1","1464112","","2015-05-11 17:24:21","2013-07-10 11:46:13","","","2013-09-20 00:02:03"
"17569834","angularjs resource Authentication Header based on request body","<p>I'm trying to use Resource with APIs protected by HMAC authentication methods. So I need to append ""Authentication"" header to the request.</p>

<p>In this example code I get the Article from the API with GET and update it with ""update"" custom method. For the update I need Authentication header. The problem is that <code>$scope.article</code> is <code>undefined</code> when I define the header.</p>

<p><code>getAuth</code> function calculates the sign.</p>

<p>Suggestions?</p>

<pre><code>function EditCtrl($scope,$resource,articleId) {
    var Article = $resource('/blog/articles/:articleId',
    {articleId:articleId}, {
        update: {
            method:'PUT',
            headers: {Authentication: getAuth('key','PUT','/blog/articles/'+articleId,$scope.article)}
        }
    });

    var article = Article.get();
    $scope.article = article;

    $scope.save = function(){
        article.$update();
    }
}

function getAuth(key,verb,resource,data) {
    //data is undefined there

    content_md5 = CryptoJS.MD5(JSON.stringify(data));
    message = verb+'\n'+resource+'\n'+content_md5;
    hash = CryptoJS.HmacSHA512(message, key);

    var sign = ""AuthHMAC 0123456789:""+hash.toString(CryptoJS.enc.Base64);

    return sign;
}
</code></pre>
","<p>(Apologies for only posting a link instead of an entire solution) have a look at <a href=""https://github.com/Monofraps/angular-node-hmac-example"" rel=""nofollow"">'Monofraps's <strong>angular-node-hmac-example</strong></a> on GitHub (MIT license). </p>

<p>For Hmac/SHA512 encryption, it uses the (deprecated) <a href=""http://code.google.com/p/crypto-js/"" rel=""nofollow"">CryptoJS library</a>, which I'd probably swap for the <a href=""https://github.com/digitalbazaar/forge"" rel=""nofollow"">Forge cryptographic library</a> (<a href=""http://code.google.com/p/crypto-js/"" rel=""nofollow"">CryptoJS</a> has now been abandoned).</p>
","24612869","2778","<angularjs><header><hmac>","3","0","4","2015-05-11 17:24:21","","4","1","1464112","","2015-05-11 17:24:21","2013-07-10 11:46:13","","","2014-07-07 14:21:44"
"14477978","AES+HMAC encryption in multiple threads - Java","<p>I'm developing a little program to encryp/decrypt a binary file using AES-256 and HMAC to check the results.</p>

<p>My code is based on AESCrypt implementation in Java, but I wanted to modify it to allow multiple threads to do the job simultaneously.</p>

<p>I get the size of original bytes and calculate the number of 16 bytes blocks per thread, then I startes the threads with information about the offset to apply for reading and writing (because there is a header for the encrypted file, so the offset_write = offset_read+header_length).</p>

<p>When it finishes the encryption I passed the output content (without the header) trough the HMAC to generate the checksum.</p>

<p>The problem is that some bytes get corrupted in the bytes between two threads.</p>

<p>Code of main:</p>

<pre><code>//..
// Initialization and creation of iv, aesKey
//..

in = new FileInputStream(fromPath);
out = new FileOutputStream(toPath);

//..
// Some code for generate the header and write it to out
//..
double totalBytes = new Long(archivo.length()).doubleValue();
int bloquesHilo = new Double(Math.ceil(totalBytes/(AESCrypt.NUM_THREADS*AESCrypt.BLOCK_SIZE))).intValue();
int offset_write = new Long((out.getChannel()).position()).intValue();

for (int i = 0; i &lt; AESCrypt.NUM_THREADS; i++)
{
    int offset = bloquesHilo*AESCrypt.BLOCK_SIZE*i;
    HiloCrypt hilo = new HiloCrypt(fromPath, toPath, ivSpec, aesKey, offset, offsetInicio, bloquesHilo, this);
    hilo.start();
}
</code></pre>

<p>Code for a thread (class HiloCrypt):
    public class HiloCrypt extends Thread {</p>

<pre><code>    private RandomAccessFile in;
    private RandomAccessFile out;

    private Cipher cipher;
    private Mac hmac;
    private IvParameterSpec ivSpec2;
    private SecretKeySpec aesKey2;

    private Integer num_blocks;
    private Integer offset_read;
    private Integer offset_write;

    private AESCrypt parent;

    public HiloCrypt(String input, String output, IvParameterSpec ivSpec, SecretKeySpec aesKey, Integer offset_thread, Integer offset_write, Integer blocks, AESCrypt parent2) 
    {
        try
        {
                        // If i don't use RandomAccessFile there is a problem copying data
            this.in = new RandomAccessFile(input, ""r"");
            this.out = new RandomAccessFile(output, ""rw"");

            int total_offset_write = offset_write + offset_thread;

                        // Adjust the offset for reading and writing 
            this.out.seek(total_offset_write);
            this.in.seek(offset_thread);

            this.ivSpec2 = ivSpec;
            this.aesKey2 = aesKey;

            this.cipher = Cipher.getInstance(AESCrypt.CRYPT_TRANS);
            this.hmac = Mac.getInstance(AESCrypt.HMAC_ALG);

            this.num_blocks = blocks;
            this.offset_read = offset_thread;
            this.offset_write = total_offset_write;
            this.parent = parent2;

        } catch (Exception e)
        {
            System.err.println(e);
            return;
        }
    }


    public void run()
        {
        int len, last,block_counter,total = 0;
        byte[] text = new byte[AESCrypt.BLOCK_SIZE];

        try{
            // Start encryption objects
            this.cipher.init(Cipher.ENCRYPT_MODE, this.aesKey2, this.ivSpec2);
            this.hmac.init(new SecretKeySpec(this.aesKey2.getEncoded(), AESCrypt.HMAC_ALG));

            while ((len = this.in.read(text)) &gt; 0 &amp;&amp; block_counter &lt; this.num_blocks) 
            {
                this.cipher.update(text, 0, AESCrypt.BLOCK_SIZE, text);
                this.hmac.update(text);

                // Write the block
                this.out.write(text);

                last = len;
                total+=len;

                block_counter++;
            }

            if (len &lt; 0) // If it's the last block, calculate the HMAC
            {
                last &amp;= 0x0f;
                this.out.write(last);

                this.out.seek(this.offset_write-this.offset_read);

                while ((len = this.out.read(text)) &gt; 0) 
                {
                    this.hmac.update(text);
                }

                // write last block of HMAC
                text=this.hmac.doFinal();
                this.out.write(text);
            }

                        // Close streams
            this.in.close();
            this.out.close();

                        // Code to notify the end of the thread
        }
        catch(Exception e)
        {
            System.err.println(""Hola!"");
            System.err.println(e);
        }
    }
}
</code></pre>

<p>With this code if I execute only 1 thread, the encryption/decryption goes perfect, but with 2+ threads there is a problem with bytes in the zone between threads jobs, the data gets corrupted there and the checksum also fails.</p>

<p>I'm trying to do this with threads because it gets near 2x faster than with one thread, I think it should be because of processing and not by the accessing of the file.</p>

<p>As a irrelevant data, it compress 250Mb of data in 43 seconds on a MB Air. ¿It's a good time?</p>
","<p>AESCrypt is <a href=""http://read.pudn.com/downloads144/sourcecode/crypt/628305/aescrypt-java/src/es/vocali/util/AESCrypt.java__.htm"" rel=""nofollow"">not thread safe</a>. You cannot use multiple threads with it.</p>

<p>Generally speaking, encryption code is rarely thread safe, as it requires complex mathematics to generate secure output. AES by itself is relatively fast, if you need better speed from it, consider vertical scaling or hardware accelerators as a first step. Later, you can add more servers to encrypt <em>different</em> files concurrently (horizontal scaling).</p>
","14478059","2777","<java><multithreading><encryption><aes><hmac>","3","5","3","2013-01-23 14:26:39","","6","4","","","","2013-01-23 10:56:27","","2013-01-23 14:26:39","2013-01-23 11:00:29"
"14477978","AES+HMAC encryption in multiple threads - Java","<p>I'm developing a little program to encryp/decrypt a binary file using AES-256 and HMAC to check the results.</p>

<p>My code is based on AESCrypt implementation in Java, but I wanted to modify it to allow multiple threads to do the job simultaneously.</p>

<p>I get the size of original bytes and calculate the number of 16 bytes blocks per thread, then I startes the threads with information about the offset to apply for reading and writing (because there is a header for the encrypted file, so the offset_write = offset_read+header_length).</p>

<p>When it finishes the encryption I passed the output content (without the header) trough the HMAC to generate the checksum.</p>

<p>The problem is that some bytes get corrupted in the bytes between two threads.</p>

<p>Code of main:</p>

<pre><code>//..
// Initialization and creation of iv, aesKey
//..

in = new FileInputStream(fromPath);
out = new FileOutputStream(toPath);

//..
// Some code for generate the header and write it to out
//..
double totalBytes = new Long(archivo.length()).doubleValue();
int bloquesHilo = new Double(Math.ceil(totalBytes/(AESCrypt.NUM_THREADS*AESCrypt.BLOCK_SIZE))).intValue();
int offset_write = new Long((out.getChannel()).position()).intValue();

for (int i = 0; i &lt; AESCrypt.NUM_THREADS; i++)
{
    int offset = bloquesHilo*AESCrypt.BLOCK_SIZE*i;
    HiloCrypt hilo = new HiloCrypt(fromPath, toPath, ivSpec, aesKey, offset, offsetInicio, bloquesHilo, this);
    hilo.start();
}
</code></pre>

<p>Code for a thread (class HiloCrypt):
    public class HiloCrypt extends Thread {</p>

<pre><code>    private RandomAccessFile in;
    private RandomAccessFile out;

    private Cipher cipher;
    private Mac hmac;
    private IvParameterSpec ivSpec2;
    private SecretKeySpec aesKey2;

    private Integer num_blocks;
    private Integer offset_read;
    private Integer offset_write;

    private AESCrypt parent;

    public HiloCrypt(String input, String output, IvParameterSpec ivSpec, SecretKeySpec aesKey, Integer offset_thread, Integer offset_write, Integer blocks, AESCrypt parent2) 
    {
        try
        {
                        // If i don't use RandomAccessFile there is a problem copying data
            this.in = new RandomAccessFile(input, ""r"");
            this.out = new RandomAccessFile(output, ""rw"");

            int total_offset_write = offset_write + offset_thread;

                        // Adjust the offset for reading and writing 
            this.out.seek(total_offset_write);
            this.in.seek(offset_thread);

            this.ivSpec2 = ivSpec;
            this.aesKey2 = aesKey;

            this.cipher = Cipher.getInstance(AESCrypt.CRYPT_TRANS);
            this.hmac = Mac.getInstance(AESCrypt.HMAC_ALG);

            this.num_blocks = blocks;
            this.offset_read = offset_thread;
            this.offset_write = total_offset_write;
            this.parent = parent2;

        } catch (Exception e)
        {
            System.err.println(e);
            return;
        }
    }


    public void run()
        {
        int len, last,block_counter,total = 0;
        byte[] text = new byte[AESCrypt.BLOCK_SIZE];

        try{
            // Start encryption objects
            this.cipher.init(Cipher.ENCRYPT_MODE, this.aesKey2, this.ivSpec2);
            this.hmac.init(new SecretKeySpec(this.aesKey2.getEncoded(), AESCrypt.HMAC_ALG));

            while ((len = this.in.read(text)) &gt; 0 &amp;&amp; block_counter &lt; this.num_blocks) 
            {
                this.cipher.update(text, 0, AESCrypt.BLOCK_SIZE, text);
                this.hmac.update(text);

                // Write the block
                this.out.write(text);

                last = len;
                total+=len;

                block_counter++;
            }

            if (len &lt; 0) // If it's the last block, calculate the HMAC
            {
                last &amp;= 0x0f;
                this.out.write(last);

                this.out.seek(this.offset_write-this.offset_read);

                while ((len = this.out.read(text)) &gt; 0) 
                {
                    this.hmac.update(text);
                }

                // write last block of HMAC
                text=this.hmac.doFinal();
                this.out.write(text);
            }

                        // Close streams
            this.in.close();
            this.out.close();

                        // Code to notify the end of the thread
        }
        catch(Exception e)
        {
            System.err.println(""Hola!"");
            System.err.println(e);
        }
    }
}
</code></pre>

<p>With this code if I execute only 1 thread, the encryption/decryption goes perfect, but with 2+ threads there is a problem with bytes in the zone between threads jobs, the data gets corrupted there and the checksum also fails.</p>

<p>I'm trying to do this with threads because it gets near 2x faster than with one thread, I think it should be because of processing and not by the accessing of the file.</p>

<p>As a irrelevant data, it compress 250Mb of data in 43 seconds on a MB Air. ¿It's a good time?</p>
","<p>You basically want to multithread an operation that is intrinsically <strong>sequential</strong>.</p>

<p><code>Stream cipher</code> cannot be made parallel because each block depends on the completion of the previous block. So you <strong>can</strong> encrypt multiple files in parallel independently with slight performance increase, especially if the files are in memory rather than on disk, but you <strong>cannot</strong> encrypt a single file using multiple cores.</p>

<p>As I can see, you use an <code>update</code> method. I'm not an expert in Java crypography but even the name of the method tells me that the encryption algorithm holds a <strong>state</strong>: ""multithreading"" and ""state"" are not friends, you have to deal with state management across threads.</p>

<p>Race condition explains why you get blocks damaged.</p>
","14478195","2777","<java><multithreading><encryption><aes><hmac>","3","0","3","2013-01-23 14:26:39","","6","4","","","","2013-01-23 10:56:27","","","2013-01-23 11:06:36"
"14477978","AES+HMAC encryption in multiple threads - Java","<p>I'm developing a little program to encryp/decrypt a binary file using AES-256 and HMAC to check the results.</p>

<p>My code is based on AESCrypt implementation in Java, but I wanted to modify it to allow multiple threads to do the job simultaneously.</p>

<p>I get the size of original bytes and calculate the number of 16 bytes blocks per thread, then I startes the threads with information about the offset to apply for reading and writing (because there is a header for the encrypted file, so the offset_write = offset_read+header_length).</p>

<p>When it finishes the encryption I passed the output content (without the header) trough the HMAC to generate the checksum.</p>

<p>The problem is that some bytes get corrupted in the bytes between two threads.</p>

<p>Code of main:</p>

<pre><code>//..
// Initialization and creation of iv, aesKey
//..

in = new FileInputStream(fromPath);
out = new FileOutputStream(toPath);

//..
// Some code for generate the header and write it to out
//..
double totalBytes = new Long(archivo.length()).doubleValue();
int bloquesHilo = new Double(Math.ceil(totalBytes/(AESCrypt.NUM_THREADS*AESCrypt.BLOCK_SIZE))).intValue();
int offset_write = new Long((out.getChannel()).position()).intValue();

for (int i = 0; i &lt; AESCrypt.NUM_THREADS; i++)
{
    int offset = bloquesHilo*AESCrypt.BLOCK_SIZE*i;
    HiloCrypt hilo = new HiloCrypt(fromPath, toPath, ivSpec, aesKey, offset, offsetInicio, bloquesHilo, this);
    hilo.start();
}
</code></pre>

<p>Code for a thread (class HiloCrypt):
    public class HiloCrypt extends Thread {</p>

<pre><code>    private RandomAccessFile in;
    private RandomAccessFile out;

    private Cipher cipher;
    private Mac hmac;
    private IvParameterSpec ivSpec2;
    private SecretKeySpec aesKey2;

    private Integer num_blocks;
    private Integer offset_read;
    private Integer offset_write;

    private AESCrypt parent;

    public HiloCrypt(String input, String output, IvParameterSpec ivSpec, SecretKeySpec aesKey, Integer offset_thread, Integer offset_write, Integer blocks, AESCrypt parent2) 
    {
        try
        {
                        // If i don't use RandomAccessFile there is a problem copying data
            this.in = new RandomAccessFile(input, ""r"");
            this.out = new RandomAccessFile(output, ""rw"");

            int total_offset_write = offset_write + offset_thread;

                        // Adjust the offset for reading and writing 
            this.out.seek(total_offset_write);
            this.in.seek(offset_thread);

            this.ivSpec2 = ivSpec;
            this.aesKey2 = aesKey;

            this.cipher = Cipher.getInstance(AESCrypt.CRYPT_TRANS);
            this.hmac = Mac.getInstance(AESCrypt.HMAC_ALG);

            this.num_blocks = blocks;
            this.offset_read = offset_thread;
            this.offset_write = total_offset_write;
            this.parent = parent2;

        } catch (Exception e)
        {
            System.err.println(e);
            return;
        }
    }


    public void run()
        {
        int len, last,block_counter,total = 0;
        byte[] text = new byte[AESCrypt.BLOCK_SIZE];

        try{
            // Start encryption objects
            this.cipher.init(Cipher.ENCRYPT_MODE, this.aesKey2, this.ivSpec2);
            this.hmac.init(new SecretKeySpec(this.aesKey2.getEncoded(), AESCrypt.HMAC_ALG));

            while ((len = this.in.read(text)) &gt; 0 &amp;&amp; block_counter &lt; this.num_blocks) 
            {
                this.cipher.update(text, 0, AESCrypt.BLOCK_SIZE, text);
                this.hmac.update(text);

                // Write the block
                this.out.write(text);

                last = len;
                total+=len;

                block_counter++;
            }

            if (len &lt; 0) // If it's the last block, calculate the HMAC
            {
                last &amp;= 0x0f;
                this.out.write(last);

                this.out.seek(this.offset_write-this.offset_read);

                while ((len = this.out.read(text)) &gt; 0) 
                {
                    this.hmac.update(text);
                }

                // write last block of HMAC
                text=this.hmac.doFinal();
                this.out.write(text);
            }

                        // Close streams
            this.in.close();
            this.out.close();

                        // Code to notify the end of the thread
        }
        catch(Exception e)
        {
            System.err.println(""Hola!"");
            System.err.println(e);
        }
    }
}
</code></pre>

<p>With this code if I execute only 1 thread, the encryption/decryption goes perfect, but with 2+ threads there is a problem with bytes in the zone between threads jobs, the data gets corrupted there and the checksum also fails.</p>

<p>I'm trying to do this with threads because it gets near 2x faster than with one thread, I think it should be because of processing and not by the accessing of the file.</p>

<p>As a irrelevant data, it compress 250Mb of data in 43 seconds on a MB Air. ¿It's a good time?</p>
","<p>It makes absolutely no sense to use more than 1 thread for the HMAC because 1) it has to be computed sequentially and 2) I/O access R/W is much slower than actual HMAC computation</p>

<p>For AES it can be a good idea to use multiple threads when using CNT mode or other chaining modes which don't require knowledge of previous data blocks.  </p>

<p>what about moving the question to crypto-stackexchange?</p>
","14478688","2777","<java><multithreading><encryption><aes><hmac>","3","1","3","2013-01-23 14:26:39","","6","4","","","","2013-01-23 10:56:27","","2013-01-23 13:12:00","2013-01-23 11:32:29"
"8808416","Signature with HMAC SHA-256 and Base64Encoder","<p>I tried a lot for creating signature to access one web service.</p>

<p>They required that I generate a signature with each request.</p>

<p>For generating signature, I have one message say ""abc"" and one secrete key say ""xyz"".  According to them my signature should be processed as the following ruby code</p>

<pre><code>require 'base64'

require 'openssl'

secret = ""xyz""

request = ""abc""

digest = OpenSSL::Digest::Digest.new('sha256')

signature = Base64.encode64(OpenSSL::HMAC.digest(digest, secret, request)).chomp
</code></pre>

<p><code>signature</code> should be <code>9ZjsfVB3k5nPNLf5he+gfyYaxNWCIJ6J8YcRpxW5GG0=</code> but I am not getting this using Java code which is as below:</p>

<pre><code> SecretKey secretKey = null;    

 byte[] keyBytes = keyString.getBytes(""UTF-8"");     

 Mac mac = Mac.getInstance(""HMACHSA256"");

 secretKey = new SecretKeySpec(keyBytes,mac.getAlgorithm());

 mac.init(secretKey);   

 byte[] text = baseString.getBytes(""UTF-8"");

 //mac.update(digest.digest());

 byte[] encodedText = mac.doFinal(text);    

 return new String(Base64.encodeBase64(encodedText)).trim();
</code></pre>

<p>Please help me on this.</p>
","<p>I ran the Java code and got <code>oQLjGtDh255Vg5ix4fjVzHvFOq7TNygJRcbQ/EnF8JE=</code></p>

<p>I went to <a href=""http://www.online-convert.com/result/7db14d1a4f32b7738b727d8a58783b18"" rel=""nofollow"">this</a> online site and I got <code>oQLjGtDh255Vg5ix4fjVzHvFOq7TNygJRcbQ/EnF8JE=</code></p>

<p>I ran the top script as a <strong>ruby</strong> script, and I got <code>oQLjGtDh255Vg5ix4fjVzHvFOq7TNygJRcbQ/EnF8JE=</code></p>

<p>Since those three match, I suggest that all the code above is consistent but the value you report is not correct.  The above Java code is pretty much textbook HMACSHA256 for Java but I cannot comment on the Ruby part because I am only a Java guy.</p>
","21489243","2728","<java><ruby><base64><digital-signature><hmac>","0","1","1","2014-01-31 21:28:29","","4","","236247","","2014-01-31 21:26:59","2012-01-10 18:23:42","","2014-01-31 21:28:29","2014-01-31 20:16:16"
"12824108","PHP and Java hmac hash output matches in hex, doesn't match in raw binary. What's happening?","<p>I'm developing a game in Java that will be packaged as an applet, and I'm working on the networking aspect. I've designed a session flow that will work for the frequency of requests and the security needs, without requiring the use of SSL. The data transmission process is loosely based off of the way facebook signs their signed_token used with their OAuth process. Here's the simplified context:</p>

<ul>
<li>my php/java implementations use hash_hmac/javax.crypto.Mac to generate an obscured signature for signing a payload, based on a shared, secret, unique token and a varied JSON payload</li>
<li>both outputs have to match exactly, because they're part of a larger encode/decode compression scheme</li>
<li>this signature will be passed through URL with the payload, and is used to verify the payload for validity and integrity</li>
</ul>

<p>As you can infer, if they don't match, then I have dropped packets of data and errors due to invalid data sent. My issue is that, <strong>while the hex encoding of the result matches perfectly, the raw binary doesn't seem to ever match</strong>. Below are the extracted php and Java test cases I set up:</p>

<p><em>Note: Because of the differences in how php and java generate the JSON structure for php associative arrays / java hashmaps, I'm using the value of the secret in place of the string payload so that both fields are consistent between platforms.</em></p>

<p>Php:</p>

<pre class=""lang-php prettyprint-override""><code>$secret = ""922ec205d8e4d0ea06079d60a5336fffd9cf0aea"";
$json = $secret; //json_encode($test_array);
$hmac_a = hash_hmac('sha256',$json,$secret);
$hmac_b = hash_hmac('sha256',$json,$secret,$raw=true); 
echo(htmlentities($hmac_a).""&lt;br/&gt;\n"");
echo(htmlentities($hmac_b).""&lt;br/&gt;\n"");
</code></pre>

<p>In-browser output:</p>

<blockquote>
  <p>ff21a9e468ac49863e5e992324ac8bc92f239a08100b0f329b087be16f5ad382</p>
  
  <p>ÿ!©äh¬I†>^™#$¬‹É/#š2›{áoZÓ‚</p>
</blockquote>

<p>Java:</p>

<pre class=""lang-java prettyprint-override""><code>Mac hmac = Mac.getInstance(""HmacSHA256"");
SecretKeySpec secret_key = new SecretKeySpec(Charset.forName(""UTF-8"").encode(this.secret).array(), ""HmacSHA256"");
hmac.init(secret_key);
byte[] digest = hmac.doFinal(this.secret.getBytes(""UTF-8""));
System.out.println(hexify(digest));
System.out.println(new String(digest,""UTF-8""));
</code></pre>

<p>Console output:</p>

<blockquote>
  <p>ff21a9e468ac49863e5e992324ac8bc92f239a08100b0f329b087be16f5ad382</p>
  
  <p>�!��h�I�>^�#$���/#� 2� {�oZӂ</p>
</blockquote>

<p>When copied to php and told to echo, that second string looks like this:</p>

<blockquote>
  <p>:ï¿½!ï¿½ï¿½hï¿½Iï¿½>^ï¿½#$ï¿½ï¿½ï¿½/#ï¿½ï¿½ï¿½2{ï¿½oZÓ‚</p>
</blockquote>

<p>Note that while the hex is identical, the binary is different, but contains the same ending ( oZÓ‚ ) when displayed from the same source. Actually, it contains all of the more common characters (!hI>^#$/#2{oZÓ,) in order. I played around with copying the console output to php then displaying as a binary string, regular string, utf8_encode'd binary/regular string, and also utf8_encode'ing $hmac_b. Nothing seems to make the raw versions match up.</p>

<p>I've run mb_detect_encoding on php's hmac, and it told me UTF-8. I've also set everything in javax.crypto.Mac to UTF-8, and displayed as UTF-8, but no dice. <em>I know Java's UTF-8 isn't different than php's UTF-8, because that defies the concept of having standard character sets.</em> What's going on here?</p>

<p><em>Note: While I now prefer and am able to use the hex version for URL encoding, I'd still like to know what's going on with this character set nonsense, and possibly how to fix it.</em></p>
","<p>I'm no Java expert, but it looks like you're doing two different things...</p>

<p>You are using <code>htmlentities()</code> in PHP, which is converting characters like <code>ÿ</code> to <code>&amp;yulm;</code>, whereas your Java snipped is trying to dump out UTF-8 data.</p>

<p>Why are you actually expecting valid UTF-8 data after a HMAC? UTF-8 is for representing Unicode characters, not random hashes.</p>

<p>Using this in PHP:</p>

<pre><code>$secret = ""922ec205d8e4d0ea06079d60a5336fffd9cf0aea"";
$json = $secret;
$hmac_a = hash_hmac('sha256',$json,$secret);
$hmac_b = hash_hmac('sha256',$json,$secret,$raw=true); 
echo $hmac_a . ""\n"";
echo $hmac_b . ""\n"";
</code></pre>

<p>I get the following (in a UTF-8 aware terminal):</p>

<pre><code>ff21a9e468ac49863e5e992324ac8bc92f239a08100b0f329b087be16f5ad382
�!��h�I�&gt;^�#$���/#2{�oZӂ
</code></pre>

<p>This is entirely expected. <code>$hmac_b</code> is effectively binary being interpreted as UTF-8, so it will be full of invalid UTF-8 sequences. Don't expect it to be characters. You will be better looking at it in as ISO-8859-1 output, which isn't multibyte:</p>

<pre><code>ff21a9e468ac49863e5e992324ac8bc92f239a08100b0f329b087be16f5ad382
ï¿½!ï¿½ï¿½hï¿½Iï¿½&gt;^ï¿½#$ï¿½ï¿½ï¿½/#ï¿2ï¿{ï¿½oZÓ
</code></pre>

<p>(There's also a control character on the end of that output <code>\x82</code>)</p>

<p>The point is, you're comparing apples with oranges in pear packaging.</p>
","13030948","2701","<java><php><character-encoding><hmac>","0","3","1","2012-10-23 12:58:50","13030948","0","3","","","","2012-10-10 16:28:07","","","2012-10-23 12:58:50"
"28966075","Creating a HMAC signature for AWS REST query in C#","<p>So I'm trying to do a REST API call to AWS' SNS service, but I keep getting an <strong>IncompleteSignature</strong> error. I based myself on <a href=""http://www.jokecamp.com/blog/examples-of-creating-base64-hashes-using-hmac-sha256-in-different-languages/#csharp"" rel=""nofollow"">http://www.jokecamp.com/blog/examples-of-creating-base64-hashes-using-hmac-sha256-in-different-languages/#csharp</a> on how to create the signature and <a href=""http://docs.aws.amazon.com/AmazonSimpleDB/latest/DeveloperGuide/HMACAuth.html"" rel=""nofollow"">http://docs.aws.amazon.com/AmazonSimpleDB/latest/DeveloperGuide/HMACAuth.html</a> to find out what to sign.</p>

<p>Here's the test code I came up with:</p>

<pre><code>    static void Main(string[] args)
    {
        string region = ""us-west-2"";
        string msg = ""This is a test!"";
        string secret = ""XXXXXXXXXXXXXXXXXXXXXXXXXXXXX"";
        string key = ""XXXXXXXXXXXXXXX"";
        string arn = ""arn:aws:sns:us-west-2:xxxxxxxxxx:snstest1"";

        string query = ""Action=Publish&amp;Message="" + HttpUtility.UrlEncode(msg) + ""&amp;MessageStructure=json&amp;TargetArn="" + HttpUtility.UrlEncode(arn) + ""&amp;SignatureMethod=HmacSHA256&amp;AWSAccessKeyId="" + key + ""&amp;SignatureVersion=2&amp;Timestamp="" + HttpUtility.UrlEncode(DateTime.UtcNow.ToString(""o""));
        string tosign = ""GET\nsns."" + region + "".amazonaws.com\n/\n"" + query;

        System.Text.ASCIIEncoding encoding = new System.Text.ASCIIEncoding();

        byte[] keyByte = encoding.GetBytes(secret);
        byte[] messageBytes = encoding.GetBytes(tosign);

        var hmacsha256 = new HMACSHA256(keyByte);

        byte[] hashmessage = hmacsha256.ComputeHash(messageBytes);
        query += ""&amp;signature="" + HttpUtility.UrlEncode(Convert.ToBase64String(hashmessage));

        Console.WriteLine(""REST Call: https://sns."" + region + "".amazonaws.com/?"" + query);
    }
</code></pre>

<p>Any idea what might be wrong?</p>

<p><strong>EDIT:</strong> I tried changing the signature part with the code from <a href=""http://wiki.alphasoftware.com/~alphafiv/DotNet+Example%3A+Digital+Hash"" rel=""nofollow"">http://wiki.alphasoftware.com/~alphafiv/DotNet+Example%3A+Digital+Hash</a> it uses CharArray instead of the byte[], not sure which is right, it produces a different signature but it still doesn't work with AWS.</p>

<p><strong>EDIT2:</strong> After long tries I finally figured out that AWS expects <code>Signature=</code> and not <code>signature=</code>, but now I'm getting a <strong>SignatureDoesNotMatch</strong> error, so I need to figure that out next. Also I don't know why this kind of question would get downvoted. Once I figure out the syntax, an AWS API call would be trivial to do in any app. If you use the AWS .NET SDK you're adding 6 megs to your binary. How is that not a worthwhile endeavor?</p>

<p><strong>SOLUTION:</strong></p>

<p>This code works and will send a SNS notification without the AWS SDK:</p>

<pre><code>    static void Main(string[] args)
    {
        string region = ""us-west-2"";
        string msg = ""Test test: sfdfds\nfsd: sdsda\n"";
        string secret = ""XXXXXXXXXXXXXXXXXXX"";
        string key = ""ZZZZZZZZZZZ"";
        string arn = ""arn:aws:sns:us-west-2:YYYYYYYYYYY:snstest1"";

        string query = ""AWSAccessKeyId="" + Uri.EscapeDataString(key) + ""&amp;Action=Publish&amp;Message="" + Uri.EscapeDataString(msg) + ""&amp;SignatureMethod=HmacSHA256&amp;SignatureVersion=2&amp;TargetArn="" + Uri.EscapeDataString(arn) + ""&amp;Timestamp="" + Uri.EscapeDataString(System.DateTime.UtcNow.ToString(""yyyy-MM-ddTHH:mm:ssZ""));
        string tosign = ""GET\nsns."" + region + "".amazonaws.com\n/\n"" + query;

        Console.WriteLine(tosign + ""\n"");

        UTF8Encoding encoding = new UTF8Encoding();
        HMACSHA256 hmac = new HMACSHA256(encoding.GetBytes(secret));
        string signature = Convert.ToBase64String(hmac.ComputeHash(encoding.GetBytes(tosign)));

        query += ""&amp;Signature="" + Uri.EscapeDataString(signature);

        Console.WriteLine(""REST Call: https://sns."" + region + "".amazonaws.com/?"" + query);
    }
</code></pre>
","<p>There is nothing wrong with rolling your own solution rather than using the SDKs.  In fact, I prefer it, because in addition to more lightweight code, you are more likely to understand problems with unexpected behavior because you are working with the native interface.</p>

<p>Here's what you are missing:</p>

<blockquote>
  <p>Add the query string parameters ... sorted using lexicographic byte ordering</p>
  
  <p><a href=""http://docs.aws.amazon.com/general/latest/gr/signature-version-2.html"" rel=""nofollow"">http://docs.aws.amazon.com/general/latest/gr/signature-version-2.html</a></p>
</blockquote>

<p>For example, <code>TargetArn</code> should not be before <code>SignatureMethod</code>.  They <em>all</em> need to be sorted.  There is only one possible correct signature for any given message, so the sort order is critical.</p>
","28978685","2691","<c#><amazon-web-services><hmac>","4","2","1","2015-03-11 13:25:29","28978685","9","1","866400","","2015-03-11 13:25:29","2015-03-10 14:15:20","","","2015-03-11 04:39:37"
"33455463","Python 3 sign a message with key sha512","<p>I have the following line of code:</p>

<pre><code>return hmac.new(self.Secret.upper() , message , hashlib.sha512).digest().encode(""base64"").replace(""\n"","""")
</code></pre>

<p>This works fine in Python2, but not in Python 3. As soon as I try in Python 3 I get:</p>

<pre><code>TypeError: key: expected bytes or bytearray, but got 'str'
</code></pre>

<p>from <code>hmac.py</code>. I've of course tried converting <code>self.Secret</code> and <code>message</code> using <code>bytes()</code> and <code>bytearray()</code>, but that hasn't worked either.</p>

<p>I've also tried using <code>hashlib.sha512</code> to generate the key, but that's not very clear to me. I have a secret API key that needs to be used to sign the POST data and the only clear way to do this is using <code>hmac.new()</code>, but when I finally do get something that can be passed as a string it looks nothing like it should, and as expected I can't authenticate with it.</p>

<p>Another attempt was:</p>

<pre><code>sign = hashlib.sha512(message_to_sign)
sign.update(self.Secret.upper())
</code></pre>

<p>This also produces a string that looks nothing like the working key that comes from the original code in Python 2.7.</p>

<p>I've tried so many other variations as well, but none of them give me anything that works.</p>
","<p>This one works for me on python 3.4.2:</p>

<pre><code>print((base64.b64encode(hmac.new(bytearray(""SECRET"".upper(), ""ASCII"") , bytearray(""TEST"",""ASCII"") , hashlib.sha512).digest())).decode(""ASCII"").replace(""\n"", """"))
</code></pre>

<p>...and calculates a correct HMAC.</p>

<p>You might want to change <code>""ASCII""</code> to some other encoding.</p>
","33456199","2680","<python><security><authentication><hmac><sha512>","2","2","2","2017-09-02 14:27:23","33456199","2","2","1245190","","2017-09-02 14:27:23","2015-10-31 19:05:50","","2015-10-31 20:48:28","2015-10-31 20:24:07"
"33455463","Python 3 sign a message with key sha512","<p>I have the following line of code:</p>

<pre><code>return hmac.new(self.Secret.upper() , message , hashlib.sha512).digest().encode(""base64"").replace(""\n"","""")
</code></pre>

<p>This works fine in Python2, but not in Python 3. As soon as I try in Python 3 I get:</p>

<pre><code>TypeError: key: expected bytes or bytearray, but got 'str'
</code></pre>

<p>from <code>hmac.py</code>. I've of course tried converting <code>self.Secret</code> and <code>message</code> using <code>bytes()</code> and <code>bytearray()</code>, but that hasn't worked either.</p>

<p>I've also tried using <code>hashlib.sha512</code> to generate the key, but that's not very clear to me. I have a secret API key that needs to be used to sign the POST data and the only clear way to do this is using <code>hmac.new()</code>, but when I finally do get something that can be passed as a string it looks nothing like it should, and as expected I can't authenticate with it.</p>

<p>Another attempt was:</p>

<pre><code>sign = hashlib.sha512(message_to_sign)
sign.update(self.Secret.upper())
</code></pre>

<p>This also produces a string that looks nothing like the working key that comes from the original code in Python 2.7.</p>

<p>I've tried so many other variations as well, but none of them give me anything that works.</p>
","<p><code>hmac</code> hashing works with binary keys and data. In python2, <code>str</code> is a sequence of 8 bit characters which is interchangable with binary so everything works. In python3, <code>str</code> is a sequence of unicode characters and must be encoded to binary to work. This should work:</p>

<pre><code>return hmac.new(bytes(self.Secret.upper().encode('ascii')) , bytes(message.encode('ascii') , hashlib.sha512).digest().encode(""base64"").replace(""\n"","""")
</code></pre>

<p>Notice I used <code>ascii</code> encoding but that's just a guess. Your python2 strings may be your local code page and your message may be a binary blob already. You'll need to formalize what encoding you use so that receivers know how to verify the signature.</p>
","33456292","2680","<python><security><authentication><hmac><sha512>","2","2","2","2017-09-02 14:27:23","33456199","2","2","1245190","","2017-09-02 14:27:23","2015-10-31 19:05:50","","","2015-10-31 20:31:57"
"26280036","Delphi HMAC SHA512 signed calls to Bittrex Exchange","<p>I have been working on this for a while and I just can't get a successful response from the server.
All documentation for this can be found at the <a href=""https://www.bittrex.com/Home/Api"" rel=""nofollow"">Bittrex Exchange Wesite</a></p>

<p>The main crux of the signature bit can be found under the heading <strong>Authentication</strong>
<HR>
The hashing file I have been using can be found at <a href=""http://fundementals.sourceforge.net/dl.html"" rel=""nofollow"">Fundamentals</a> on SourceForge. It is the one at the bottom called Fundamentals Hash 4.00.15</p>

<p>The reason I have been using this file is a very simple one, it seems to be the only one giving me a correct answer. Or should I say, it is giving me the correct answer compared to the result this <a href=""http://hash.online-convert.com/sha512-generator"" rel=""nofollow"">Hashing Website</a> is giving me.</p>

<p>I've tried using the Indy components to generate the correct hash, but it never seems to match the value from the website. Maybe I'm not using it correctly or the right libraries or something, but I will add the example for that as well that I created.
(As I write this, I've just tested again, and it does seem like I am getting the right answer, go figure, maybe I am using a better OpenSSL library. Anyway, I will also put my INDY example down below as well).
<HR></p>

<pre><code>function Test: String;
const
  FAPIKey = 'APIKEY';
  FAPISecret = 'APISECRET';
  FURL = 'https://bittrex.com/api/v1.1/account/getbalances?apikey=%s&amp;nonce=%d';
var
  FPost, FSignature: String;
  FNonce: Integer;
  Response: TStringStream;
  HTTP: TIdHTTP;
  SSL:TIdSSLIOHandlerSocketOpenSSL;
begin
  Result := '';

  FNonce := DateTimeToUnix(Now);
  FPost := Format(FURL, [FAPIKey, FNonce]);

  HTTP := TIdHTTP.Create;
  try
    SSL := TIdSSLIOHandlerSocketOpenSSL.Create(HTTP);
    try
      HTTP.IOHandler := SSL;

      FSignature := SHA512DigestToHex(CalcHMAC_SHA512(FAPISecret, FPost));
      HTTP.Request.CustomHeaders.AddValue('apisign', FSignature);

      Response := TStringStream.Create;
      try
        HTTP.Get(FPost, Response);
        Result := Response.DataString;
      finally
        Response := nil;
      end;
    finally
      SSL := nil;
    end;
  finally
    HTTP := nil;
  end;
end;
</code></pre>

<p><HR>
Prior to using this version for the hashing I was only ever getting 
'{""success"":false,""message"":""APISIGN_NOT_PROVIDED"",""result"":null}'
I finally moved on when I worked out the custom HTTP headers and am now getting
'{""success"":false,""message"":""INVALID_SIGNATURE"",""result"":null}'
Could it be something simple as an invalid nonce, or one that is too old?
Does everything look ok or am I missing some basic component settings for the INDY components?
<HR></p>

<pre><code>function Test: String;
const
  FAPIKey = 'APIKEY';
  FAPISecret = 'APISECRET';
  FURL = 'https://bittrex.com/api/v1.1/account/getbalances?apikey=%s&amp;nonce=%d';
var
  FPost, FSignature: String;
  FNonce: Integer;
  Response: TStringStream;
  HTTP: TIdHTTP;
  SSL:TIdSSLIOHandlerSocketOpenSSL;
  FSHA512Hasher: TIdHMACSHA512;
begin
  Result := '';
  if not LoadOpenSSLLibrary then exit;

  FNonce := DateTimeToUnix(Now);
  FPost := Format(FURL, [FAPIKey, FNonce]);

  HTTP := TIdHTTP.Create;
  try
    SSL := TIdSSLIOHandlerSocketOpenSSL.Create(HTTP);
    try
      HTTP.IOHandler := SSL;

      FSHA512Hasher := TIdHMACSHA512.Create;
      try
        FSHA512Hasher.Key := ToBytes(FAPISecret);
        FSignature := Lowercase(ToHex(FSHA512Hasher.HashValue(ToBytes(FPost))));
      finally
        FSHA512Hasher := nil;
      end;

      HTTP.Request.CustomHeaders.AddValue('apisign', FSignature);

      Response := TStringStream.Create;
      try
        HTTP.Get(FPost, Response);
        Result := Response.DataString;
      finally
        Response := nil;
      end;
    finally
      SSL := nil;
    end;
  finally
    HTTP := nil;
  end;
end;
</code></pre>
","<p>I had a similar problem which I eventually figured out.  I used the hmac.pas unit which I found via google search, but had to modify it to work with 10.1 Seattle (specifically IDBytes is a little different).  </p>

<p>IMPORTANT: I also had to modify the hmac.pas unit to remove the '0x' from the front of the HexStr variation of the functions.  </p>

<p>ALSO: I made all inputs ansistring.</p>

<p>My test function for this is as follows.</p>

<pre><code>function TBTXClient.Get(sCommand, sAddParams: string): string;
var
  sURL: string;
  nonce: string;
  res: string;
  sec2: string;
  sha: TIDHashSha256;
  hmac: TIdHMAC;
  hash: string;
  ms: TMemoryStream;
begin
  nonce := inttostr(getticker);
  sURL := 'https://bittrex.com/api/v1.1/'+sCommand+'?apikey='+MY_KEY+'&amp;nonce='+nonce+sAddParams;

  hash := THMACUtils&lt;TIDHMacSha512&gt;.HMAC_HexStr(MY_SECRET,sURL);

  //Debug.Log('url = '+sUrl);
  //Debug.Log('hash = '+hash);
  QuickHTTPSGet(sURL, res, 'apisign', hash);

  result := res;

end;
</code></pre>

<p>My Modified version of the hmac.pas unit (has some new dependencies)</p>

<pre><code>unit hmac;

interface

uses
  System.SysUtils,
  EncdDecd,
  IdHMAC,
  IdSSLOpenSSL,
  helpers.indy,
  idglobal,
  IdHash;

type
  localstringtype = ansistring;

  THMACUtils&lt;T: TIdHMAC, constructor&gt; = class
  public
    class function HMAC(aKey, aMessage: localstringtype): TIdBytes;
    class function HMAC_HexStr(aKey, aMessage: localstringtype): localstringtype;
    class function HMAC_Base64(aKey, aMessage: localstringtype): localstringtype;
  end;

implementation

class function THMACUtils&lt;T&gt;.HMAC(aKey, aMessage: localstringtype): TIdBytes;
var
  _HMAC: T;
begin
  if not IdSSLOpenSSL.LoadOpenSSLLibrary then Exit;
  _HMAC:= T.Create;
  try
    _HMAC.Key := AnsiStringToIDBytes(aKey);
    Result:= _HMAC.HashValue(AnsiStringToIDBytes(aMessage));
  finally
    _HMAC.Free;
  end;
end;

class function THMACUtils&lt;T&gt;.HMAC_HexStr(aKey, aMessage: localstringtype):     localstringtype;
var
  I: Byte;
begin
  Result:= '';//'0x';
  for I in HMAC(aKey, aMessage) do
    Result:= Result + IntToHex(I, 2);
end;

class function THMACUtils&lt;T&gt;.HMAC_Base64(aKey, aMessage: localstringtype):     localstringtype;
var
  _HMAC: TIdBytes;
begin
  _HMAC:= HMAC(aKey, aMessage);
  Result:= EncodeBase64(_HMAC, Length(_HMAC));
end;

end.
</code></pre>

<p>You'll probably also want this helper unit.</p>

<pre><code>unit helpers.indy;

interface

uses
  idglobal, types, classes, sysutils, typex;


function TBytesToIDBytes(b: TBytes): TIDBytes;
function AnsiStringToIDBytes(a: ansistring): TIDBytes;

implementation


function TBytesToIDBytes(b: TBytes): TIDBytes;
var
  t: ni;
begin
  setlength(result, length(b));
  for t := low(b) to high(b) do
    result[t] := b[t];

end;
function AnsiStringToIDBytes(a: ansistring): TIDBytes;
var
  t: ni;
begin
  setlength(result, length(a));
  for t := 0  to length(a)-1 do
    result[t] := ord(a[STRZ+t]);

end;
</code></pre>

<p>And this cheesy function, which I borrowed from my own https unit shows how to handle the header params.</p>

<pre><code>function QuickHTTPSGet(sURL: ansistring; out sOutREsponse: string; 
  addHead: string =''; addHeadValue: string = ''): boolean;
var
  htp: IXMLhttprequest;
begin

  htp := ComsXMLHTTP30.create();
  try
    htp.open('GET', sURL, false, null, null);
    if addHead &lt;&gt; '' then
      htp.setRequestHeader(addHead, addHeadValue);
    htp.send('');
    result := htp.status = 200;
    if result then
      sOutREsponse := htp.responsetext
    else
      soutResponse := 'error '+inttostr(htp.status);
  except
    on e: Exception do begin
      result := false;
      sOutResponse := 'error '+e.message;
    end;
  end;

end;
</code></pre>
","45766518","2664","<delphi><indy><hmac><sha512>","4","0","1","2017-10-24 18:47:47","","9","","","","","2014-10-09 13:43:03","","2017-08-19 00:30:30","2017-08-19 00:22:54"
"39892167","Node Hmac Authentication","<p>My understanding of the authentication process. The host creates a <code>secret</code> and a <code>public api key</code>. The client is crypting the payload with the help of the secret, this is the signature. Then sends its public key, payload, signature to the host.</p>

<p><a href=""https://github.com/bitfinexcom/bitfinex-api-node/blob/master/ws.js#L404"" rel=""nofollow"">Example client</a></p>

<p>The host checks if the public key is allowed to do an operation and gets the secret according to the clients public key. With the help of the secret the host decrypts the signature and compares it to the payload.</p>

<h2>Question</h2>

<ul>
<li>Is the above process described correctly?</li>
<li>How to decrypt the signature and compare it to the payload?</li>
<li>Or am I supposed to crypt it in the same way as the client dos and compare it then?</li>
<li>What exactly do the two steps <code>update</code> &amp; <code>digest</code> <a href=""https://nodejs.org/api/crypto.html#crypto_hmac_digest_encoding"" rel=""nofollow"">Node Docs</a></li>
</ul>

<h2>Client:</h2>

<pre><code>  authenticate: (self)-&gt;
    payload = 'AUTH' + moment()
    signature = crypto.createHmac('sha384', WEBSOCKET_SECRET)
      .update(payload)
      .digest('hex')

    data = {
      event: 'auth',
      apiKey: WEBSOCKET_KEY,
      authSig: signature,
      authPayload: payload
    }
    self.send self, data
</code></pre>

<h2>Server:</h2>

<pre><code>hmac = crypto.createHmac('sha384', WEBSOCKET_SECRET)
hmac.on 'readable', () -&gt;
  data = hmac.read()
  if (data)
    console.log data, data.toString('utf-8')


# hmac.write(authPayload)
hmac.write(signature)
hmac.end()
</code></pre>

<h2>Current Server Side Solution</h2>

<pre><code>  authenticate: (authPublicKey, authSignature, authPayload)-&gt;
    signature = crypto.createHmac('sha384', WEBSOCKET_SECRET)
      .update(authPayload)
      .digest('hex')

    return authSignature == signature
</code></pre>
","<p>HMAC isn't use to encrypt/decrypt, is just use for authentication and check of data integrity.</p>

<p>Client send his payload, his pk, and the hmac of his payload with his secret key.
Server retrieve user with his pk, recompute the hmac with the retrieved sk and then check if the computed hmac is equal to the retrieved hmac.</p>

<p>Client has a public key, and secret key :</p>

<pre><code>var str        = payload_string;
var public_key = pk;
var secret_key = sk;

var hmac = crypto.createHmac('sha384', sk).update(str).digest('hex');

request.post({uri:..., json: { hmac, public_key, payload: str }, function(err, response, body) {
   console.log(body);
});
</code></pre>

<p>On server :</p>

<pre><code>exports.... = function(req, res)
{
   var hmac = req.body.hmac;
   var pk = req.body.public_key;
   var payload  = req.body.payload;


   // retrieve authorized user
   User.findOne({ pk }, function(err, user) {
      if(err || !user){
        return res.status(403).json({error:""Invalid user""});
      }

      // recompute hmac
      var compute_hmac= crypto.createHmac('sha384', user.sk).update(payload).digest('hex');

      // check hmac
      if(compute_hmac != hmac) {
        return res.status(403).json({error:""Security check failed""});
      }
      // do stg
      return res.status(200).json({success:""ok""});
    });
  }
</code></pre>
","39897002","2660","<node.js><hmac>","2","5","1","2019-03-01 02:29:50","39897002","0","","2876990","","2016-10-06 09:43:39","2016-10-06 09:18:51","","2019-03-01 02:29:50","2016-10-06 13:13:05"
"1261454","HMAC-SHA-512 implemention for ActionScript","<p>As mentioned by the title, I would like to find an implementation for HMAC-SHA-512 written for ActionScript. I was able to find a library that provide HMAC-SHA-256 with other functions, however, I am looking for HMAC-SHA-512 specifically.</p>

<p>Thank you</p>

<p><strong>Edit:</strong></p>

<p>Or, since actionscript and javascript have the same origin, can some one port this javascript version into actionscript?</p>

<p><a href=""http://pajhome.org.uk/crypt/md5/sha512.html"" rel=""nofollow noreferrer"">http://pajhome.org.uk/crypt/md5/sha512.html</a></p>

<p><strong>Edit 2:</strong></p>

<p>I already ported the code from javascript to actionscript. The code can be found in one of the answers in this question
<a href=""https://stackoverflow.com/questions/1267873/porting-sha512-javascript-implemention-to-actionscript"">Porting SHA-512 Javascript implementation to Actionscript</a></p>
","<p>The implementation you link to doesn't seem to be using any features that aren't supported by ActionScript 3. Just surround the whole thing with <code>public class SHA512 { }</code>, and prefix the first five functions with <code>public</code>.</p>

<p><strong>Edit:</strong> You will also need to convert <code>function int64</code> to it's own class (or possibly use <code>Number</code>, though I'm not sure if you will lose precision for 64-bit integers).</p>
","1268530","2657","<actionscript><hmac><sha512>","1","1","3","2011-10-17 01:34:07","1268530","1","","-1","AAA","2017-05-23 12:07:10","2009-08-11 16:19:10","","2009-08-12 20:32:10","2009-08-12 20:26:17"
"1261454","HMAC-SHA-512 implemention for ActionScript","<p>As mentioned by the title, I would like to find an implementation for HMAC-SHA-512 written for ActionScript. I was able to find a library that provide HMAC-SHA-256 with other functions, however, I am looking for HMAC-SHA-512 specifically.</p>

<p>Thank you</p>

<p><strong>Edit:</strong></p>

<p>Or, since actionscript and javascript have the same origin, can some one port this javascript version into actionscript?</p>

<p><a href=""http://pajhome.org.uk/crypt/md5/sha512.html"" rel=""nofollow noreferrer"">http://pajhome.org.uk/crypt/md5/sha512.html</a></p>

<p><strong>Edit 2:</strong></p>

<p>I already ported the code from javascript to actionscript. The code can be found in one of the answers in this question
<a href=""https://stackoverflow.com/questions/1267873/porting-sha512-javascript-implemention-to-actionscript"">Porting SHA-512 Javascript implementation to Actionscript</a></p>
","<p>Checkout this library:
<a href=""http://code.google.com/p/as3crypto/"" rel=""nofollow noreferrer"">http://code.google.com/p/as3crypto/</a></p>

<p>Though only does:
SHA-256,SHA-224,SHA-1,MD5, and MD2</p>

<p>So I guess that doesn't answer your question.</p>

<p>But best Crypto library for actionscript I've seen. </p>
","2268484","2657","<actionscript><hmac><sha512>","1","2","3","2011-10-17 01:34:07","1268530","1","","-1","AAA","2017-05-23 12:07:10","2009-08-11 16:19:10","","2010-02-15 20:24:56","2010-02-15 19:45:26"
"1261454","HMAC-SHA-512 implemention for ActionScript","<p>As mentioned by the title, I would like to find an implementation for HMAC-SHA-512 written for ActionScript. I was able to find a library that provide HMAC-SHA-256 with other functions, however, I am looking for HMAC-SHA-512 specifically.</p>

<p>Thank you</p>

<p><strong>Edit:</strong></p>

<p>Or, since actionscript and javascript have the same origin, can some one port this javascript version into actionscript?</p>

<p><a href=""http://pajhome.org.uk/crypt/md5/sha512.html"" rel=""nofollow noreferrer"">http://pajhome.org.uk/crypt/md5/sha512.html</a></p>

<p><strong>Edit 2:</strong></p>

<p>I already ported the code from javascript to actionscript. The code can be found in one of the answers in this question
<a href=""https://stackoverflow.com/questions/1267873/porting-sha512-javascript-implemention-to-actionscript"">Porting SHA-512 Javascript implementation to Actionscript</a></p>
","<p>Just found all of SHA-2 (SHA-224, SHA-256, SHA-384, SHA-512) implemented at <a href=""http://code.google.com/p/flame/"" rel=""nofollow"">http://code.google.com/p/flame/</a>. Also it provides HMAC implementation. Didn't try it yet but looks what you're looking for.</p>
","7788622","2657","<actionscript><hmac><sha512>","1","1","3","2011-10-17 01:34:07","1268530","1","","-1","AAA","2017-05-23 12:07:10","2009-08-11 16:19:10","","","2011-10-17 01:34:07"
"30405598","HMAC Authentication using Django - Shared Secret","<p>I am implementing a web service using Django for a mobile app. I decided to use Hash-MAC to authenticate requests (no Oath, no https) but the challenge is what should i use as shared secret key?</p>

<p>First i considered using The user's password but it required to store passwords in plain text in server-side database. The other solution that came to my mind was salting and hashing password in mobile app just the way that django auth app does in order to compute hashed password in client side. </p>

<ol>
<li><p>What does Django use as salt? Are they ""secret""? Is there any problem with sending them as plain-text to users? We don't have to keep salts as ""secret""s in general, but Django may use something that should be kept secret as salts, i don't know, it is about how django implemented this.</p></li>
<li><p>Users have to know their salts to compute hashed password so server should provide them with it. An adversary can ask for all users salts and eventually (s)he can have all the salts (Even if there is a limit to the number of times someone can ask for this in a certain time period). Even though salts are not secret but i guess knowing ""all"" of them can be dangerous. (or maybe i am overly concerned about security!)</p></li>
</ol>

<p>Requests format:</p>

<pre><code>HTTP request header:
x-mac-digest: 1d186b9c0fd5cd393f23623f0d167f7b17ac7d1cd74d8442647991d61e756c19

HTTP request body:
{
  ""username"": ""mjafar"",
  ... rest of request in json
}
</code></pre>

<p>Authenticating request (simplified):</p>

<pre><code>hash_digest = request.META['HTTP_X_MAC_DIGEST']
request_body = request.body.decode('utf-8')
request_json = json.loads(request_body)

user = UserModel.objects.get(username=request_json['username'])
sharedKey = getSharedKey(user)  # What should it return?

hash = hmac.new(sharedKey, request_body, hashlib.sha256).hexdigest()
if hash != hash_digest:
    return HttpResponseBadRequest('MAC authentication failed')
</code></pre>
","<p>HMAC is used to authenticate a block of messages. It's used to verify block of cipher/Text was not changed during the transmission. You will need to use asymmetric encryption (RSA, DH,..etc) to transfer your shared key.    </p>

<p>Using a plain text without using digital signature is useless. You will be vulnerable to MITM attack. Unless you manage to put the shared secret on the mobile app without internet (GSM SIM cards have shared key inside the sim itself and it's used to encrypt GSM calls).</p>

<p>Django uses random function to generate its secret_key. Random function on Linux will call /dev/urandom, on windows will call what's equivalent to that.</p>

<p>In your case, create a rest api to create a username and password, then return a hash value to be used to access your views.</p>

<p>If you want to compute a custom hash value, you can call make_password function, and save it directly in the password attribute in User</p>

<p>Read this: <a href=""https://docs.djangoproject.com/en/1.8/topics/auth/passwords/"" rel=""nofollow noreferrer"">https://docs.djangoproject.com/en/1.8/topics/auth/passwords/</a> </p>

<p>Example: <a href=""https://stackoverflow.com/questions/18273110/django-make-password-too-slow-for-creating-large-list-of-users-programatically"">Django make_password too slow for creating large list of users programatically</a> </p>
","30407937","2651","<python><django><authentication><hmac>","2","1","1","2015-09-14 16:20:52","30407937","5","","1823497","","2015-05-23 06:22:37","2015-05-22 20:44:22","","2017-05-23 12:23:20","2015-05-23 01:18:27"
"22147895","Is it possible to do a HMAC with wincrypt?","<p>I've been trying to perform a straight forward SHA256 HMAC using wincrypt/cryptoapi/Cryptography API: Next Generation (CNG) and i'm really struggling. My target is Windows 8.</p>

<p>I can not find the correct methods or find any examples anywhere. I am looking to do the following in C/C++, that is demonstrated in C# below</p>

<pre><code>        HMAC hashMaker = new HMACSHA256(Encoding.ASCII.GetBytes(""SecretKey""));
        byte[] hash = hashMaker.ComputeHash(Encoding.ASCII.GetBytes(""&lt;SomeXmlData /&gt;""));
        string hashStr = BitConverter.ToString(hash);
</code></pre>

<p>it returns the hash: B2-42-48-67-5A-B8-03-87-5B-00-D7-8C-65-5A-AE-B7-92-E3-F9-27-40-C1-01-A5-37-74-E1-65-51-9F-F6-6A.</p>

<p>Has anybody succeeded to perform a straight forward HMAC using the cryptoapi?</p>
","<p>Thank you for the information Mgetz. I never knew about the BCrypt set of methods. It is a lot easier for HMAC than CryptHashData of the wincrypt/cryptoapi. From the example of using <a href=""http://msdn.microsoft.com/en-us/library/windows/desktop/aa376217%28v=vs.85%29.aspx"" rel=""noreferrer"" title=""hashing using SHA256"">hashing using SHA256</a>   I was able to create the HMAC code. You only need to add <a href=""http://msdn.microsoft.com/en-us/library/windows/desktop/aa375479%28v=vs.85%29.aspx"" rel=""noreferrer"" title=""Flag"">BCRYPT_ALG_HANDLE_HMAC_FLAG</a> to the last parameter of BCryptOpenAlgorithmProvider and include the key in the call to <a href=""http://msdn.microsoft.com/en-us/library/windows/desktop/aa375383%28v=vs.85%29.aspx"" rel=""noreferrer"">BCryptCreateHash</a>.</p>

<p>This is the completed code:</p>

<pre><code>#include &lt;windows.h&gt;
#include &lt;stdio.h&gt;
#include &lt;bcrypt.h&gt;
#pragma comment(lib, ""bcrypt.lib"") 
#define NT_SUCCESS(Status)          (((NTSTATUS)(Status)) &gt;= 0)

#define STATUS_UNSUCCESSFUL         ((NTSTATUS)0xC0000001L)

void __cdecl wmain(
    int                      argc,
    __in_ecount(argc) LPWSTR *wargv)
{
    BCRYPT_ALG_HANDLE       hAlg = NULL;
    BCRYPT_HASH_HANDLE      hHash = NULL;
    NTSTATUS                status = STATUS_UNSUCCESSFUL;
    DWORD                   cbData = 0,
        cbHash = 0,
        cbHashObject = 0;
    PBYTE                   pbHashObject = NULL;
    PBYTE                   pbHash = NULL;
    CONST BYTE key[] = { ""SecretKey"" };
    CONST BYTE message[] = { ""&lt;SomeXmlData /&gt;"" };

    //open an algorithm handle
    if (!NT_SUCCESS(status = BCryptOpenAlgorithmProvider(
        &amp;hAlg,
        BCRYPT_SHA256_ALGORITHM,
        NULL,
        BCRYPT_ALG_HANDLE_HMAC_FLAG)))
    {
        wprintf(L""**** Error 0x%x returned by BCryptOpenAlgorithmProvider\n"", status);
        goto Cleanup;
    }

    //calculate the size of the buffer to hold the hash object
    if (!NT_SUCCESS(status = BCryptGetProperty(
        hAlg,
        BCRYPT_OBJECT_LENGTH,
        (PBYTE)&amp;cbHashObject,
        sizeof(DWORD),
        &amp;cbData,
        0)))
    {
        wprintf(L""**** Error 0x%x returned by BCryptGetProperty\n"", status);
        goto Cleanup;
    }

    //allocate the hash object on the heap
    pbHashObject = (PBYTE)HeapAlloc(GetProcessHeap(), 0, cbHashObject);
    if (NULL == pbHashObject)
    {
        wprintf(L""**** memory allocation failed\n"");
        goto Cleanup;
    }

    //calculate the length of the hash
    if (!NT_SUCCESS(status = BCryptGetProperty(
        hAlg,
        BCRYPT_HASH_LENGTH,
        (PBYTE)&amp;cbHash,
        sizeof(DWORD),
        &amp;cbData,
        0)))
    {
        wprintf(L""**** Error 0x%x returned by BCryptGetProperty\n"", status);
        goto Cleanup;
    }

    //allocate the hash buffer on the heap
    pbHash = (PBYTE)HeapAlloc(GetProcessHeap(), 0, cbHash);
    if (NULL == pbHash)
    {
        wprintf(L""**** memory allocation failed\n"");
        goto Cleanup;
    }

    //create a hash
    if (!NT_SUCCESS(status = BCryptCreateHash(
        hAlg,
        &amp;hHash,
        pbHashObject,
        cbHashObject,
        (PBYTE)key,
        sizeof(key)-1,
        0)))
    {
        wprintf(L""**** Error 0x%x returned by BCryptCreateHash\n"", status);
        goto Cleanup;
    }

    //hash some data
    if (!NT_SUCCESS(status = BCryptHashData(
        hHash,
        (PBYTE)message,
        sizeof(message)-1,
        0)))
    {
        wprintf(L""**** Error 0x%x returned by BCryptHashData\n"", status);
        goto Cleanup;
    }

    //close the hash
    if (!NT_SUCCESS(status = BCryptFinishHash(
        hHash,
        pbHash,
        cbHash,
        0)))
    {
        wprintf(L""**** Error 0x%x returned by BCryptFinishHash\n"", status);
        goto Cleanup;
    }

    printf(""The hash is:  "");
    for (DWORD i = 0; i &lt; cbHash; i++)
    {
        printf(""%2.2X-"", pbHash[i]);
    }


Cleanup:

    if (hAlg)
    {
        BCryptCloseAlgorithmProvider(hAlg, 0);
    }

    if (hHash)
    {
        BCryptDestroyHash(hHash);
    }

    if (pbHashObject)
    {
        HeapFree(GetProcessHeap(), 0, pbHashObject);
    }

    if (pbHash)
    {
        HeapFree(GetProcessHeap(), 0, pbHash);
    }
};
</code></pre>
","22155681","2581","<c++><c><winapi><hmac><cryptoapi>","2","6","1","2014-03-03 19:36:44","22155681","2","","","","","2014-03-03 13:19:47","","","2014-03-03 19:36:44"
"40104464","Generating signed and encrypted JWT","<p>I'm trying to generate a signed and encrypted JWT token using <a href=""http://connect2id.com/products/nimbus-jose-jwt"" rel=""nofollow"">Nimbus JWT</a>. </p>

<pre><code>private void generateToken() throws JOSEException, NoSuchAlgorithmException, UnsupportedEncodingException {
    KeyGenerator keyGen = KeyGenerator.getInstance(""AES"");
    keyGen.init(256);
    SecretKey secretKey = keyGen.generateKey();

    JWSSigner signer = new MACSigner(secretKey);
    JWTClaimsSet claimsSet = new JWTClaimsSet.Builder().subject(""subject"").build();

    SignedJWT signedJWT = new SignedJWT(new JWSHeader(JWSAlgorithm.HS256), claimsSet);
    signedJWT.sign(signer);

    JWEObject jweObject = new JWEObject(
            new JWEHeader.Builder(JWEAlgorithm.DIR, EncryptionMethod.A256GCM).contentType(""JWT"").build(),
            new Payload(""hello world"")
    );
    jweObject.encrypt(new DirectEncrypter(secretKey));
}
</code></pre>

<p>When running the code, I get the following error message</p>

<pre><code>com.nimbusds.jose.JOSEException: Couldn't create AES/GCM/NoPadding cipher: Illegal key size
    at com.nimbusds.jose.crypto.AESGCM.encrypt(AESGCM.java:123)
    at com.nimbusds.jose.crypto.ContentCryptoProvider.encrypt(ContentCryptoProvider.java:187)
    at com.nimbusds.jose.crypto.DirectEncrypter.encrypt(DirectEncrypter.java:141)
    at com.nimbusds.jose.JWEObject.encrypt(JWEObject.java:370)
    at de.example.generateToken(TokenImpl.java:108)
    at de.example.TokenImpl.&lt;init&gt;(TokenImpl.java:68)
    at de.example.TokenTest.create(TokenTest.java:33)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    at java.lang.reflect.Method.invoke(Method.java:498)
    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)
    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)
    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
    at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
    at org.junit.runner.JUnitCore.run(JUnitCore.java:160)
    at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:69)
    at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:234)
    at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:74)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    at java.lang.reflect.Method.invoke(Method.java:498)
    at com.intellij.rt.execution.application.AppMain.main(AppMain.java:144)
Caused by: java.security.InvalidKeyException: Illegal key size
    at javax.crypto.Cipher.checkCryptoPerm(Cipher.java:1039)
    at javax.crypto.Cipher.implInit(Cipher.java:805)
    at javax.crypto.Cipher.chooseProvider(Cipher.java:864)
    at javax.crypto.Cipher.init(Cipher.java:1396)
    at javax.crypto.Cipher.init(Cipher.java:1327)
    at com.nimbusds.jose.crypto.AESGCM.encrypt(AESGCM.java:119)
</code></pre>

<p>The generated key though is 256-bit AES key, I really don't get what is wrong. The <a href=""http://connect2id.com/products/nimbus-jose-jwt/examples/signed-and-encrypted-jwt"" rel=""nofollow"">example</a> from the nimbus does the same. Do I miss something here? </p>
","<p>Like the user ""leleuj"" says on <a href=""https://github.com/pac4j/pac4j/issues/355"" rel=""nofollow noreferrer"">https://github.com/pac4j/pac4j/issues/355</a>, you need: ""Java Cryptography Extension (JCE) Unlimited Strength Jurisdiction Policy Files"" if you don't have already installed them.
You need:</p>

<ol>
<li>download the version for your installed java (for v7 is <a href=""http://www.oracle.com/technetwork/java/javase/downloads/jce-7-download-432124.html"" rel=""nofollow noreferrer"">jce-7</a>, for v8 is <a href=""http://www.oracle.com/technetwork/java/javase/downloads/jce8-download-2133166.html"" rel=""nofollow noreferrer"">jce-8</a>)</li>
<li>unzip it</li>
<li>stop any java proces running</li>
<li>make a backup of your local_policy.jar and US_export_policy.jar (both are in [java_home]/jre/lib/security)</li>
<li>copy the new ones in [java_home]/jre/lib/security</li>
</ol>
","41232470","2572","<java><encryption><aes><jwt><hmac>","2","4","1","2016-12-19 23:09:16","","0","","","","","2016-10-18 09:28:20","","","2016-12-19 23:09:16"
"21891241","How to use Varnish to cache RESTful API, but still use HMAC for signing/verifying each request?","<p>I am interested in using Varnish to cache/throttle/etc responses to a RESTful API I am creating. I may be using the term/acronym ""HMAC"" too loosely, but what I mean is that each request to my API should include a header that includes a hash that was calculated by the client by hashing parts of the request (including a timestamp) with a shared secret. The server then calculates this same hash with the same ingredients from the request, and determines if the request is valid and should be responded to.</p>

<p>This works well enough, but now I would like to use Varnish to cache my API responses. The nature of HMAC requires that each request calculates the hash to verify the user is who they are, but the actual response that is returned is the same - so the meat of the API call is very much cacheable.</p>

<p>What I'd like (and I'm assuming this can be achieved, I just don't know HOW) is to pass the authentication task to the backend, somehow tell Varnish ""yes, go ahead and respond to this request"" or ""no, don't respond to this request"" and then from there let Varnish determine if the request can be served from cache or not. </p>

<p>Even more ideally, would be to do something slightly fancier, and allow Varnish to handle the authentication itself, or pass the HMAC processing onto something faster then the backend. For example, the API might store the client secret/public key in a redis cache, then Varnish might actually calculate the hash itself using the values from Redis. </p>
","<p>You should be able to implement the fancier solution in Varnish <a href=""https://www.varnish-cache.org/docs/trunk/users-guide/vcl.html"" rel=""nofollow noreferrer"">VCL</a> code (Varnish Configuration Language) by using two <a href=""https://www.varnish-cache.org/docs/trunk/reference/vmod.html"" rel=""nofollow noreferrer"">Varnish Modules</a>:</p>

<ul>
<li><a href=""https://www.varnish-cache.org/vmod/redis-0"" rel=""nofollow noreferrer"">Redis vmod</a> to fetch keys.</li>
<li><a href=""https://www.varnish-cache.org/vmod/digest"" rel=""nofollow noreferrer"">Varnish Digest Module</a> for calculating/processing HMAC.</li>
</ul>

<p>Both modules are used in production, as listed in the <a href=""https://www.varnish-cache.org/vmods"" rel=""nofollow noreferrer"">modules directory</a>.</p>

<p>If Varnish handles the authentication in VCL, you can let Varnish cache your API backend response and deliver it only for authenticated requests.</p>

<p>If the HMAC implementation requires the request body:</p>

<p>As <a href=""https://stackoverflow.com/a/33420159/1914376"">Gridfire points out</a> in his/her answer, Varnish cannot access the request body. And we can/should not send the full request body in a HTTP header from the backend/application. </p>

<p>But, we <strong>can</strong> send a hash/digest of the full request body in a HTTP header. Calculation of the hash on the backend should be negligible compared to generating the output(markup|data|whatever).
AFAICT there should be no cryptological/practical downsides to this method as long as the hash/digest and HMAC is robust, and the digest is lengthy (256bits or more). Performance testing is adviced as usual.</p>
","31812967","2565","<api><rest><caching><varnish><hmac>","6","3","2","2016-05-26 11:13:42","","5","1","","","","2014-02-19 20:06:27","","2017-05-23 12:24:00","2015-08-04 15:11:25"
"21891241","How to use Varnish to cache RESTful API, but still use HMAC for signing/verifying each request?","<p>I am interested in using Varnish to cache/throttle/etc responses to a RESTful API I am creating. I may be using the term/acronym ""HMAC"" too loosely, but what I mean is that each request to my API should include a header that includes a hash that was calculated by the client by hashing parts of the request (including a timestamp) with a shared secret. The server then calculates this same hash with the same ingredients from the request, and determines if the request is valid and should be responded to.</p>

<p>This works well enough, but now I would like to use Varnish to cache my API responses. The nature of HMAC requires that each request calculates the hash to verify the user is who they are, but the actual response that is returned is the same - so the meat of the API call is very much cacheable.</p>

<p>What I'd like (and I'm assuming this can be achieved, I just don't know HOW) is to pass the authentication task to the backend, somehow tell Varnish ""yes, go ahead and respond to this request"" or ""no, don't respond to this request"" and then from there let Varnish determine if the request can be served from cache or not. </p>

<p>Even more ideally, would be to do something slightly fancier, and allow Varnish to handle the authentication itself, or pass the HMAC processing onto something faster then the backend. For example, the API might store the client secret/public key in a redis cache, then Varnish might actually calculate the hash itself using the values from Redis. </p>
","<p>Varnish can easily do HMAC using the VMOD's in Geir Bostad answer, unless your HMAC implementation uses the request body as part of the hash.
Varnish does not give you access to the request body, <a href=""http://info.varnish-software.com/blog/introducing-libvmod-bodyaccess-reqbody-access-functions"" rel=""nofollow"">libvmod-bodyaccess</a> provides some functions but I have found no way of actually getting the request body.</p>

<p>You could theoretically add a header containing the request body, but this is pretty bad practice and will either bloat your HTTP requests with redundant data, or break HTTP request standards if you choose to only put the data in the header. Simply put not recommended.</p>

<p>An alternate solution would be to use Nginx, which can also act as an SSL terminator if you want to use HTTPS (Varnish doesn't do SSL).
Nginx has a <a href=""https://github.com/openresty/lua-nginx-module"" rel=""nofollow"">module</a> to run Lua scripts (Ubuntu/Debian package nginx-extras provides it without requiring you to compile it yourself), and the module brings the handy <a href=""https://github.com/openresty/lua-nginx-module#rewrite_by_lua_file"" rel=""nofollow"">access_by_lua_file</a> directive to allow or block access based on the result of the script.
There's a HMAC script for Nginx <a href=""https://github.com/tdely/nginx-hmac"" rel=""nofollow"">here</a>.</p>
","33420159","2565","<api><rest><caching><varnish><hmac>","6","0","2","2016-05-26 11:13:42","","5","1","","","","2014-02-19 20:06:27","","","2015-10-29 16:49:13"
"25779829","openssl input in hexadecimal for bash","<p>How do we input value and key as hexadecimal values?</p>

<pre><code>echo -n ""value"" | openssl dgst -sha1 -hmac ""key""
$value=11111111FFAA2211
$key=11111111FFAA2211000000000011BBFF
echo -n ""$value"" | openssl dgst -sha1 -hmac ""$key""
</code></pre>

<p>is not working either.</p>
","<p>I just managed to solved it, it's the use of the '-macopt hexkey:string' option.</p>

<p><code>echo -n '4869205468657265' | xxd -r -p | openssl dgst -sha512 -mac HMAC -macopt hexkey:0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b</code></p>

<p>(stdin)= 87aa7cdea5ef619d4ff0b4241a1d6cb02379f4e2ce4ec2787ad0b30545e17cdedaa833b7d6b8a702038b274eaea3f4e4be9d914eeb61f1702e696c203a126854</p>

<p>or</p>

<p><code>key='0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b'</code>
<code>value='4869205468657265'</code>
<code>echo -n ""$value"" | xxd -r -p | openssl dgst -sha512 -mac HMAC -macopt hexkey:$key</code></p>

<p>(stdin)= 87aa7cdea5ef619d4ff0b4241a1d6cb02379f4e2ce4ec2787ad0b30545e17cdedaa833b7d6b8a702038b274eaea3f4e4be9d914eeb61f1702e696c203a126854</p>

<p>I hope this answer may serve as a mini tutorial to help people.</p>
","25780094","2525","<bash><openssl><sha><hmac><digest>","2","4","1","2014-09-11 05:59:05","25780094","0","","3150853","","2014-09-11 05:43:33","2014-09-11 05:39:10","","","2014-09-11 05:59:05"
"14568728","SHA-256 hashing function in Java ME/J2ME","<p>I've posted this question on the Nokia Developer forums so please bear with me.</p>

<p>I'm writing an app which needs to find the SHA-256 hash of a URL keyed with a unique value – i.e. <code>hmac('sha256', '27/3', '9EWVFmHpHN6n2YKW9QtvUqX3xbsFQUBovlrFddqnF7fpcSDA2q')</code>. What would be the best way to do this in Java ME/J2ME?</p>

<p>I've found many examples using the <code>Mac</code> class but this isn't supported in Java ME/J2ME.</p>

<p>Thanks in advance.</p>
","<p><a href=""http://www.bouncycastle.org/latest_releases.html"" rel=""nofollow"">BouncyCastle's latest J2ME compatible release (the lightweight API)</a> contains among other things an SHA256 implementation - <code>org.bouncycastle.crypto.digests.SHA256Digest</code> - that should work for you.</p>
","14569383","2510","<java-me><hmac><sha256>","0","1","2","2014-09-24 12:54:32","14586940","0","1","","","","2013-01-28 18:32:24","","","2013-01-28 19:13:28"
"14568728","SHA-256 hashing function in Java ME/J2ME","<p>I've posted this question on the Nokia Developer forums so please bear with me.</p>

<p>I'm writing an app which needs to find the SHA-256 hash of a URL keyed with a unique value – i.e. <code>hmac('sha256', '27/3', '9EWVFmHpHN6n2YKW9QtvUqX3xbsFQUBovlrFddqnF7fpcSDA2q')</code>. What would be the best way to do this in Java ME/J2ME?</p>

<p>I've found many examples using the <code>Mac</code> class but this isn't supported in Java ME/J2ME.</p>

<p>Thanks in advance.</p>
","<p>I managed to get things working, the solution is as follows:</p>

<pre><code>Digest  digest = new SHA256Digest();
HMac hmac = new HMac(digest);
hmac.init(new KeyParameter(appKeyHere));
hmac.update(requestURI, 0, lenOfReqURI);
byte[]  resBuf = new byte[digest.getDigestSize()];
hmac.doFinal(resBuf, 0);
String  resStr = new String(Hex.encode(resBuf)); // Contains final usable value
</code></pre>
","14586940","2510","<java-me><hmac><sha256>","0","3","2","2014-09-24 12:54:32","14586940","0","1","","","","2013-01-28 18:32:24","","2014-09-24 12:54:32","2013-01-29 15:58:19"
"9897023","asymmetric HMAC","<p>validation of HMAC generated hash requires the key to be known to the validator. So its symmetric. What is the similer asymmetric solution other than SSL ? as I want the signature be smaller like an md5 hash. and the generation and validation procedure to be light. I was going through Rabin's Signature algorithm but couldn't find any Implementation or pseudo code ro follow.</p>
","<p>The smallest asymmetric signatures come from <a href=""http://www.nsa.gov/business/programs/elliptic_curve.shtml"" rel=""nofollow"">elliptic curce</a> cryptosystems like ECDSA. ECDSA signature schemes require signatures approximately four times the length of a symmetric cipher key of equivalent security. So a scheme comparable in security to 128-bit AES would have 512-bit signatures. That's the state of the art right now -- schemes with smaller signatures but equal or greater security are not known.</p>

<p>If you don't need security quite that high, you could use a 192-bit curve which would result in 384-bit signatures. You can go down to 320-bit signatures (160-bit curves) and still have security comparable to 80-bit symmetric ciphers. If you really don't particularly care about security, 112-bit curves can be used, providing 224-bit signatures that are about as difficult to break as DES.</p>

<p>The following curves are what I would recommend for each security level:</p>

<p><strong>SecP112R1</strong>: 224-bit signatures, 56-bit security level<br>
<strong>SecP128R1</strong>: 256-bit signatures, 64-bit security level<br>
<strong>SecP160K1</strong>: 320-bit signatures, 80-bit security level<br>
<strong>SecP192K1</strong>: 386-bit signatures, 96-bit security level<br>
<strong>SecP224K1</strong>: 448-bit signatures, 112-bit security level<br>
<strong>SecP256K1</strong>: 512-bit signatures, 128-bit security level</p>

<p>For each curve, the private key is the same size as the curve. Public keys (in compressed form) are one bit larger than the curve size. Signatures are twice the curve size. So with SecP256K1, private keys are 256-bits, public keys are 257-bits, and signatures are 512-bits. These are the minimum sizes for the raw binary values.</p>

<p><strong>Caution</strong>: I would consider 160-bit curves the minimum for any purpose where security is a factor. Smaller curves might be suitable if keys are generated, used, and then thrown away in a small time frame. For long-term security, 256-bit curves should be used. The system as a whole should be evaluated by competent experts before it is relied upon.</p>
","9897080","2487","<ssl><hash><digital-signature><hmac>","5","4","1","2012-03-28 01:13:31","9897080","0","3","","","","2012-03-27 20:17:54","","2012-03-28 01:13:31","2012-03-27 20:21:14"
"50484195","Generate HMAC Sha256 in python 3","<p>I write code to verify an HMAC Auth incoming POST request with JSON to our API. The HMAC I received is <code>OD5ZxL4tdGgWr78e9vO3cYrjuOFT8WOrTbTIuuIH1PQ=</code></p>

<p>When I try to generate it by my self using Python, it is always different.</p>

<p>Here is the JSON request I received:</p>

<pre><code>{
    ""shipper_id"": 4841,
    ""status"": ""Cancelled"",
    ""shipper_ref_no"": """",
    ""tracking_ref_no"": """",
    ""shipper_order_ref_no"": """",
    ""timestamp"": ""2018-05-23T15:13:28+0800"",
    ""id"": ""61185ecf-3484-4985-b625-ffe30ba36e28"",
    ""previous_status"": ""Pending Pickup"",
    ""tracking_id"": ""NVSGBHINK000000001""
}
</code></pre>

<p>And the client secret is <code>817a3723917f4c7fac24b1f1b324bbab</code>.</p>

<p>The HMAC secret I received is <code>OD5ZxL4tdGgWr78e9vO3cYrjuOFT8WOrTbTIuuIH1PQ=</code>.</p>

<p>Here is the code when I write it in PHP: </p>

<pre><code>&lt;?php
define('CLIENT_SECRET', 'my_shared_secret');
function verify_webhook($data, $hmac_header){
    $calculated_hmac = base64_encode(hash_hmac('sha256', $data, CLIENT_SECRET, true));
    return ($hmac_header == $calculated_hmac);
}  
$hmac_header = $_SERVER['X-NINJAVAN-HMAC-SHA256'];
$data = file_get_contents('php://input');  
$verified = verify_webhook($data, $hmac_header);
error_log('Webhook verified: '.var_export($verified, true)); //check error.log to see result
?&gt;
</code></pre>

<p>But I have no idea how to do it in Python 3.</p>
","<pre><code>from collections import OrderedDict

params = orderedDict()

params[""shipper_id""] = 4841
params[""status""] = ""Cancelled""
params[""shipper_ref_no""] = """"
params[""tracking_ref_no""] = """"
params[""shipper_order_ref_no""] = """"
params[""timestamp""] = ""2018-05-23T15:13:28+0800""
params[""id""] = ""61185ecf-3484-4985-b625-ffe30ba36e28""
params[""previous_status""] = ""Pending Pickup""
params[""tracking_id""] = ""NVSGBHINK000000001""
mes = json(params, separator = ("";"","","")).highdigest()
sighnature = hmac.new(mes, sha256)
# separators = ("";"","","") - i'm not shure
params['sighnature'] = sighnature
r = response.post(url,params,sighnature)
print(r.text())
</code></pre>
","50711058","2470","<python><rest><api><webhooks><hmac>","2","0","2","2018-06-07 04:28:09","","0","","1225882","","2018-05-23 09:26:46","2018-05-23 09:06:21","","","2018-06-06 01:30:12"
"50484195","Generate HMAC Sha256 in python 3","<p>I write code to verify an HMAC Auth incoming POST request with JSON to our API. The HMAC I received is <code>OD5ZxL4tdGgWr78e9vO3cYrjuOFT8WOrTbTIuuIH1PQ=</code></p>

<p>When I try to generate it by my self using Python, it is always different.</p>

<p>Here is the JSON request I received:</p>

<pre><code>{
    ""shipper_id"": 4841,
    ""status"": ""Cancelled"",
    ""shipper_ref_no"": """",
    ""tracking_ref_no"": """",
    ""shipper_order_ref_no"": """",
    ""timestamp"": ""2018-05-23T15:13:28+0800"",
    ""id"": ""61185ecf-3484-4985-b625-ffe30ba36e28"",
    ""previous_status"": ""Pending Pickup"",
    ""tracking_id"": ""NVSGBHINK000000001""
}
</code></pre>

<p>And the client secret is <code>817a3723917f4c7fac24b1f1b324bbab</code>.</p>

<p>The HMAC secret I received is <code>OD5ZxL4tdGgWr78e9vO3cYrjuOFT8WOrTbTIuuIH1PQ=</code>.</p>

<p>Here is the code when I write it in PHP: </p>

<pre><code>&lt;?php
define('CLIENT_SECRET', 'my_shared_secret');
function verify_webhook($data, $hmac_header){
    $calculated_hmac = base64_encode(hash_hmac('sha256', $data, CLIENT_SECRET, true));
    return ($hmac_header == $calculated_hmac);
}  
$hmac_header = $_SERVER['X-NINJAVAN-HMAC-SHA256'];
$data = file_get_contents('php://input');  
$verified = verify_webhook($data, $hmac_header);
error_log('Webhook verified: '.var_export($verified, true)); //check error.log to see result
?&gt;
</code></pre>

<p>But I have no idea how to do it in Python 3.</p>
","<p>In Python 3 you basically want something like the following, taken from how you handle GitHub webhook requests.</p>

<pre><code>    import hashlib
    import hmac

    secret = 'CLIENT_SECRET'
    data = rsp.content # assumes you're using requests for data/sig
    signature = rsp.headers['X-Something-Signature']
    signature_computed = 'sha1=' + hmac.new(
        key=secret.encode('utf-8'),
        msg=data.encode('utf-8'),
        digestmod=hashlib.sha1
    ).hexdigest()
    if not hmac.compare_digest(signature, signature_computed):
        log(""Invalid payload"")
</code></pre>
","50732963","2470","<python><rest><api><webhooks><hmac>","2","1","2","2018-06-07 04:28:09","","0","","1225882","","2018-05-23 09:26:46","2018-05-23 09:06:21","","","2018-06-07 04:28:09"
"14820558","HMAC with ASP.NET WebAPI using Cuong's Solution","<p>I spent a some time today looking through various HMAC implementations in C# for an upcoming WebAPI project. I wanted to start out with some existing code just to see it all work and understand it better before I either wrote it from scratch or modified it for my needs. </p>

<p>There are a bunch of great articles and posts both here and on the web. However, I have gotten to the point that I need some pointers and would greatly appreciate some insight. </p>

<p>I started with Cuong's post here: <a href=""https://stackoverflow.com/questions/11775594/how-to-secure-an-asp-net-web-api/11782361"">How to secure an ASP.NET Web API</a>.</p>

<p>I knew I would have to expand upon it since I wanted to support both json and formencoded data. My test client is also written in C# using HttpClient and I spun up an empty WebAPI project and am using the ValuesController.</p>

<p>Below are my observations and questions:</p>

<ol>
<li><p>POSTing: In order to get Cuong's code to work (validate successfully), my POST needs to include the parameters in the URL, however in order to get the values to my controller, I need to include them in the body. Is this normal for this type of authentication? In this particular instance, the message I am hashing is http://:10300/api/values?param1=value1&amp;param2=value2. Now I can parse the query string manually to get them, however in order to get the value to my controller through binding, I must also:</p>

<pre><code>var dict = new Dictionary&lt;string, string&gt;
                   {
                       {""param1"", ""value1""},
                       {""param2"", ""value2""}
                   };
var content = new FormUrlEncodedContent(dict);

var response = await httpClient.PostAsync(httpClient.BaseAddress, content);
</code></pre></li>
</ol>

<p>Otherwise my parameter is always null in the post action of the ValuesController.</p>

<ol>
<li><p>I am planning on expanding the code to include a nonce. Between the combination of a nonce, a timestamp and the verb, is that enough for a secure hash? Is there really a need to also hash the message?</p></li>
<li><p>I tried (very unsuccessfully) to extend the code to support json as well as form encoded data and I must be missing something obvious.</p></li>
<li><p>Cuong is using the Authentication and Timestamp headers instead of putting the signature and timestamp in the query string. Is there a benefit to one method over the other? The majority of articles I have read have them in the query string itself.</p></li>
</ol>

<p>The code looks great and I am a little out of my element here. I might be safer (saner?) just writing it from scratch to appreciate the nuances of it. That said, if anyone can lend some insight into what I am seeing that would be great.</p>

<p>At the end of the day, I want to be able to use the built in authorization mechinism of the WebAPI framework to simply attribute the methods/controllers, be able to accept form encoded and json data and reasonably model bind for complex types.</p>

<p><strong>* Update *</strong></p>

<p>I have done some more work today and below is the code from my nUnit PostTest. I figured out how to get the values through without both including them in the body and the query string (code below).</p>

<pre><code>[Test]
    public async void PostTest()
    {
        using (var httpClient = new HttpClient())
        {
            var payload = new FormUrlEncodedContent(new Dictionary&lt;string, string&gt;
                       {
                           {""key1"", ""value1""},
                           {""key2"", ""value2""}
                       });

            var now = DateTime.UtcNow.ToString(""U"");
            httpClient.BaseAddress = new Uri(string.Format(""http://ipv4.fiddler:10300/api/values""));
            httpClient.DefaultRequestHeaders.Add(""Timestamp"", now);
            httpClient.DefaultRequestHeaders.Add(""Authentication"", string.Format(""test:{0}"", BuildPostMessage(now, httpClient.BaseAddress, await payload.ReadAsStringAsync())));

            var response = await httpClient.PostAsync(httpClient.BaseAddress, payload);

            await response.Content.ReadAsStringAsync();

            Assert.AreEqual(true, response.IsSuccessStatusCode);

        }
    }
</code></pre>

<p>I also figured out the model binding portion of it. There is a great article here: <a href=""http://www.west-wind.com/weblog/posts/2012/Mar/21/ASPNET-Web-API-and-Simple-Value-Parameters-from-POSTed-data"" rel=""nofollow noreferrer"">http://www.west-wind.com/weblog/posts/2012/Mar/21/ASPNET-Web-API-and-Simple-Value-Parameters-from-POSTed-data</a> that explains how POST works and I was able to get it to work with both a model of my own design as well as with the FormDataCollection object.</p>

<p>Now I am left wondering whether or not it is worth adding json encoded messages or if standardizing on FormUrlEncoding is the way to go. Also, are client nounce's enough or should I implement a server side nounce? Does a server side nounce double all of the calls to the service (first one throws a 401, second one includes the payload with the nounce?</p>
","","","2398","<asp.net-mvc><oauth><asp.net-web-api><hmac><dotnet-httpclient>","1","","0","2013-02-12 17:54:50","","0","","-1","","2017-05-23 11:48:51","2013-02-11 20:46:53","","",""
"10687841","Setting up Twitter OAuth without 3rd party libraries","<p>Continuation from <a href=""https://stackoverflow.com/questions/10673158/get-twitter-public-timeline-jsonc-no-3rd-party-libraries"">Get twitter public timeline, json+C#, no 3rd party libraries</a></p>

<p>I'm still new to C# and oAuth so please bear with me if I fail to understand anything</p>

<p>I've created a C# class named oAuthClass, and these are the variables I currently have:</p>

<pre><code>    static class oAuthClass
{
    public static void run()
    {
        int oauth_timestamp = GetTimestamp(DateTime.Now);
        string oauth_nonce = PseudoRandomStringUsingGUID();
        string oauth_consumer_key = ""consumer key here"";
        string oauth_signature_method = ""HMAC-SHA1"";
        string oauth_version = ""1.0"";
    }
}
</code></pre>

<p>I've read up on OAuth Signatures, and I chose to use HMAC-SHA1 for now, I don't know how to generate the signature, I'm also extremely confused after reading and seeing stuff like HTTP-Encodings and Base-Strings and whatnot (I've no idea what they mean at all), but my guess is to create a URL that's ""Http-encoded"", like spaces->""%20""?</p>

<p>In summary:
-What are base-strings?</p>

<p>-Am I right on the spaces->%20 example?</p>

<p>-HMAC-SHA1 involves a message and a key, is the consumer secret the message? Is the consumer key the key then?</p>

<p>-How to create a signature through the use of the HMAC-SHA1 algorithm</p>

<p>-If I do manage to create the signature, how do I pass these values to Twitter?</p>

<p>I could use </p>

<pre><code>http://example.com?consumer_key=asdf&amp;oauth_signature=signaturevalue&amp;etc., 
</code></pre>

<p>but I've read and apparantly people use HTTP-Headers or something (again, I don't really know what this is)</p>

<p>Thank you! Again, no 3rd party libraries allowed :(</p>
","<p>If you are really confused and just want a simple Library to use I would suggest to look into <a href=""http://www.twitterizer.net/"" rel=""nofollow"">Twitterizer</a></p>

<p>There documentation has examples and it is pretty easy to set up.</p>

<p>[EDIT] oops, sorry just read that you are not looking for 3rd party libraries.  Sorry</p>
","10688193","2394","<c#><oauth><twitter-oauth><sha1><hmac>","6","0","2","2013-11-03 15:15:45","10691466","0","5","-1","","2017-05-23 10:30:39","2012-05-21 15:08:15","","","2012-05-21 15:31:51"
"10687841","Setting up Twitter OAuth without 3rd party libraries","<p>Continuation from <a href=""https://stackoverflow.com/questions/10673158/get-twitter-public-timeline-jsonc-no-3rd-party-libraries"">Get twitter public timeline, json+C#, no 3rd party libraries</a></p>

<p>I'm still new to C# and oAuth so please bear with me if I fail to understand anything</p>

<p>I've created a C# class named oAuthClass, and these are the variables I currently have:</p>

<pre><code>    static class oAuthClass
{
    public static void run()
    {
        int oauth_timestamp = GetTimestamp(DateTime.Now);
        string oauth_nonce = PseudoRandomStringUsingGUID();
        string oauth_consumer_key = ""consumer key here"";
        string oauth_signature_method = ""HMAC-SHA1"";
        string oauth_version = ""1.0"";
    }
}
</code></pre>

<p>I've read up on OAuth Signatures, and I chose to use HMAC-SHA1 for now, I don't know how to generate the signature, I'm also extremely confused after reading and seeing stuff like HTTP-Encodings and Base-Strings and whatnot (I've no idea what they mean at all), but my guess is to create a URL that's ""Http-encoded"", like spaces->""%20""?</p>

<p>In summary:
-What are base-strings?</p>

<p>-Am I right on the spaces->%20 example?</p>

<p>-HMAC-SHA1 involves a message and a key, is the consumer secret the message? Is the consumer key the key then?</p>

<p>-How to create a signature through the use of the HMAC-SHA1 algorithm</p>

<p>-If I do manage to create the signature, how do I pass these values to Twitter?</p>

<p>I could use </p>

<pre><code>http://example.com?consumer_key=asdf&amp;oauth_signature=signaturevalue&amp;etc., 
</code></pre>

<p>but I've read and apparantly people use HTTP-Headers or something (again, I don't really know what this is)</p>

<p>Thank you! Again, no 3rd party libraries allowed :(</p>
","<p>It is really hard to answer your question in a short manner, since implementing a full blown OAuth client is not trivial and requires really understanding the OAuth1.0a specification. It is not rocket science but it really requires sorting out all the bits and pieces.</p>

<p>I will attempt to answer your question piecemeal.</p>

<blockquote>
  <p>What are base strings?</p>
</blockquote>

<p>A signature base string in OAuth is built like this:</p>

<ul>
<li>Start with the HTTP method of the request your are sending, in upper case. E.g <code>POST</code> or <code>GET</code>. </li>
<li>Add an ampersand (<code>&amp;</code>) character to that</li>
<li>Add the URL encoded (percent encoded) URL you are calling in your request (do not include parameters here)</li>
<li>Add yet another ampersand (<code>&amp;</code>) character here</li>
<li>Lastly add the URL encoded parameter string</li>
</ul>

<p>I'll describe how to create the parameter string you need in that last step.</p>

<p>Gather all the parameters included in the request. You'll find them either in the URL as part of the query string and also in the request body when you are <code>POST</code>-ing requests. Say for example that you are <code>POST</code>-ing the parameter <code>parameter1=value1</code> to the URL <code>http://example.com/?parameter2=value2</code>. That makes two parameters to include.</p>

<p>Now you also have to sum up all the OAuth parameters that are needed for the protocol to be happy. These would lead to a parameter list looking something like this:</p>

<ul>
<li><code>oauth_consumer_key=fffffaaaafffaaaff</code></li>
<li><code>oauth_nonce=aaaaabbbbbcccccaaaaudi2313</code></li>
<li><code>oauth_signature_method=HMAC-SHA1</code></li>
<li><code>oauth_timestamp=1319633599</code></li>
<li><code>oauth_token=bbbbbbbbbfsdfdsdfsfserwerfsddffdsdf</code></li>
<li><code>oauth_version=1.0</code></li>
<li><code>parameter1=value1</code></li>
<li><code>parameter2=value2</code></li>
</ul>

<p>All these individual strings need to be lexicographically sorted on the parameter name (alphabetically should suffice), and concatenated into a string. That's your parameter string.</p>

<blockquote>
  <p>Am I right on the spaces->%20 example?</p>
</blockquote>

<p>Yes. You are talking about percent encoding, which also goes by the name of HTTP encoding and URL encoding. <a href=""http://en.wikipedia.org/wiki/Percent-encoding"">http://en.wikipedia.org/wiki/Percent-encoding</a>.</p>

<blockquote>
  <p>HMAC-SHA1 involves a message and a key, is the consumer secret the message? Is the consumer key the key then?</p>
</blockquote>

<p>The message is the signature base string that you created above. And the key is the combination of your consumer secret and your access token secret. So the key should look like this: <code>CONSUMER_SECRET&amp;TOKEN_SECRET</code> (notice the ampersand). In the absolute first request that you do you will not have a token secret yet, then the key is only <code>CONSUMER_SECRET&amp;</code> (again, notice the ampersand).</p>

<blockquote>
  <p>How to create a signature through the use of the HMAC-SHA1 algorithm.</p>
</blockquote>

<p>I fetched this from <a href=""http://oauth.googlecode.com/svn/code/csharp/OAuthBase.cs"">http://oauth.googlecode.com/svn/code/csharp/OAuthBase.cs</a> and the secrets and the base string are assumed to be available to the code.</p>

<p>Basically feed an HMACSHA1 instance with a key and a message, render that hash and convert it to a base64 string.</p>

<pre><code>HMACSHA1 hmacsha1 = new HMACSHA1();
hmacsha1.Key = Encoding.ASCII.GetBytes(string.Format(""{0}&amp;{1}"", UrlEncode(consumerSecret), string.IsNullOrEmpty(tokenSecret) ? """" : UrlEncode(tokenSecret)));
byte[] dataBuffer = System.Text.Encoding.ASCII.GetBytes(signatureBaseString);
byte[] hashBytes = hmacsha1.ComputeHash(dataBuffer);

return Convert.ToBase64String(hashBytes);
</code></pre>

<blockquote>
  <p>If I do manage to create the signature, how do I pass these values to Twitter?</p>
</blockquote>

<p>You should easily be able to research what an HTTP header is.</p>

<p>But you can choose to add the final result of the parameters and signature to the URL, I think Twitter even accepts them in the request body on some requests. But the preferred way is through the <code>Authorization</code> HTTP header since it allows for clear separation between protocol specific and request specific parameters. </p>

<p>It should look somewhat like this (taken straight from the <a href=""http://tools.ietf.org/html/rfc5849#section-3.5.1"">OAuth 1.0a spec</a>): </p>

<pre><code>Authorization: OAuth realm=""Example"",
    oauth_consumer_key=""0685bd9184jfhq22"",
    oauth_token=""ad180jjd733klru7"",
    oauth_signature_method=""HMAC-SHA1"",
    oauth_signature=""wOJIO9A2W5mFwDgiDvZbTSMK%2FPY%3D"",
    oauth_timestamp=""137131200"",
    oauth_nonce=""4572616e48616d6d65724c61686176"",
    oauth_version=""1.0""
</code></pre>
","10691466","2394","<c#><oauth><twitter-oauth><sha1><hmac>","6","14","2","2013-11-03 15:15:45","10691466","0","5","-1","","2017-05-23 10:30:39","2012-05-21 15:08:15","","","2012-05-21 19:35:46"
"38007362","PHP - HMAC Authentication","<p>I'm getting that error code (I'm using a public API so it's certainly working on their side ;)):</p>

<blockquote>
  <p>HMAC authentication key and signature was given, but they are invalid.</p>
</blockquote>

<pre><code>function get_myself($request){
    $public_key = ""MY_PUBLIC_KEY"";
    $secret = ""MY_PRIVATE_KEY"";

    $parameters = array(
        ""client_id"" =&gt; $public_key,
        ""client_secret"" =&gt; $secret
    );
    $data = http_build_query($parameters);

    $ch = curl_init(""https://localbitcoins.com"".$request);
    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0);
    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);
    curl_setopt($ch, CURLOPT_USERAGENT, ""curl"");
    curl_setopt($ch, CURLOPT_POSTFIELDS, $data);
    $nonce = time();
    $sig = base64_encode ( hash_hmac(""sha256"", $nonce.$public_key.$request, $secret ) );
    $options = array(
        CURLOPT_RETURNTRANSFER =&gt; 1,
        CURLOPT_TIMEOUT =&gt; 30,
        CURLOPT_HTTPHEADER =&gt;   array(
            ""Apiauth-Key:"".$public_key,
            ""Apiauth-Nonce:"".$nonce,
            ""Apiauth-Signature:"".$sig
        ),
    );
    curl_setopt_array($ch, $options);
    $result = curl_exec($ch);
    curl_close($ch);
    return $result;
}

$getinfo = array();
$getinfo = get_myself(""/api/myself/"");
echo ""&lt;pre&gt;""; print_r($getinfo); echo ""&lt;/pre&gt;"";
</code></pre>
","<p>After 3 days, I found the 'solution'... here's a working example:</p>

<pre><code>function localbitcoins_query($path, array $req = Array()) {
   $key='MY_KEY';
   $secret='MY_SECRET';
   $mt = explode(' ', microtime());
   $nonce = $mt[1].substr($mt[0], 2, 6);
   if ($req) {
      $get=httpbuildquery($req);
      $path=$path.'?'.$get;
   }
   $postdata=$nonce.$key.$path;
   $sign = strtoupper(hash_hmac('sha256', $postdata, $secret));
   $headers = array(
      'Apiauth-Signature:'.$sign,
      'Apiauth-Key:'.$key,
      'Apiauth-Nonce:'.$nonce
   );
   $ch = null;
   $ch = curl_init('https://localbitcoins.com'.$path);
   curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
   curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
   curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, TRUE);
   curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 20);
   $res = curl_exec($ch);
   if ($res === false) throw new Exception('Curl error: '.curlerror($ch));
   $dec = json_decode($res, true);
   if (!$dec) throw new Exception('Invalid data: '.$res);
   curl_close($ch);
   return $dec;
}

$getinfo = array();
$devise = ""EUR"";
$url = ""/buy-bitcoins-online/"".$devise.""/western-union/.json"";

$getinfo = localbitcoins_query($url);   
echo ""&lt;pre&gt;""; print_r($getinfo); echo ""&lt;/pre&gt;"";
</code></pre>

<p>It's working on my side, I suppose the POST / GET notion wasn't previously handle properly whereas it is in that version.</p>

<p>Enjoy :p</p>
","38027153","2387","<php><api><hmac>","1","2","1","2019-07-09 12:37:05","38027153","2","","1033581","","2017-10-12 10:07:27","2016-06-24 06:57:38","","","2016-06-25 09:51:15"
"697134","How to set the crypto key for Python's MD5 module?","<p>What is the Python equivalent of following Perl code?</p>

<pre><code>hmac_md5_hex($login . ""^"" . $seq . ""^"" . $time . ""^"" . $amo . ""^"", $CryptoKey);
</code></pre>

<p>The Python hashlib.md5 doesn't seem to take an ""cryptographic key"" argument. It only accepts 1 argument.</p>
","<p>You have to use the <a href=""http://docs.python.org/library/hmac.html"" rel=""noreferrer"">hmac module</a> together with md5 or sha. Per default it uses md5:</p>

<pre><code>In [1]: import hmac, hashlib
In [2]: hmac.new('key', 'msg').hexdigest()
Out[2]: '18e3548c59ad40dd03907b7aeee71d67'
In [3]: hmac.new('key2', 'msg').hexdigest()
Out[3]: 'a4bde113179bc2a7c6ac9ad7309ea073'
In [4]: hmac.new('key', 'msg', hashlib.sha256).hexdigest()
Out[4]: '2d93cbc1be167bcb1637a4a23cbff01a7878f0c50ee833954ea5221bb1b8c628'
</code></pre>

<p>Your example would probably look something like:</p>

<pre><code>hmac.new(CryptoKey, '^'.join([login, seq, time, amo]), hashlib.md5).hexdigest()
</code></pre>
","697146","2387","<python><hash><md5><hmac>","1","13","3","2012-03-01 15:19:54","697146","0","","55562","becomingGuru","2009-03-31 06:38:59","2009-03-30 13:11:35","","2009-03-30 18:26:51","2009-03-30 13:16:13"
"697134","How to set the crypto key for Python's MD5 module?","<p>What is the Python equivalent of following Perl code?</p>

<pre><code>hmac_md5_hex($login . ""^"" . $seq . ""^"" . $time . ""^"" . $amo . ""^"", $CryptoKey);
</code></pre>

<p>The Python hashlib.md5 doesn't seem to take an ""cryptographic key"" argument. It only accepts 1 argument.</p>
","<p>Take a look at <a href=""http://docs.python.org/library/hmac.html"" rel=""nofollow noreferrer"">this python library documentation about hmac</a></p>

<p>What you probably want is:</p>

<pre><code>import hmac
hmac_object = hmac.new(crypto_key)
hmac_object.update('^'.join([login, seq, time, amo, ''])
print hmac_object.hexdigest()
</code></pre>

<p>It's probably best to use <strong>.update()</strong> since that way you don't have to instantiate the hmac class everytime and it's a serious performance boost if you want to have a lot of hex digest of the message.</p>
","697157","2387","<python><hash><md5><hmac>","1","3","3","2012-03-01 15:19:54","697146","0","","55562","becomingGuru","2009-03-31 06:38:59","2009-03-30 13:11:35","","","2009-03-30 13:19:21"
"697134","How to set the crypto key for Python's MD5 module?","<p>What is the Python equivalent of following Perl code?</p>

<pre><code>hmac_md5_hex($login . ""^"" . $seq . ""^"" . $time . ""^"" . $amo . ""^"", $CryptoKey);
</code></pre>

<p>The Python hashlib.md5 doesn't seem to take an ""cryptographic key"" argument. It only accepts 1 argument.</p>
","<p>Another solution, based on <a href=""https://www.dlitz.net/software/pycrypto/"" rel=""nofollow"">PyCrypto</a>:</p>

<pre><code>from Crypto.Hash import HMAC
print HMAC.new(CryptoKey, '^'.join([login, seq, time, amo, ''])).hexdigest()
</code></pre>
","9518787","2387","<python><hash><md5><hmac>","1","0","3","2012-03-01 15:19:54","697146","0","","55562","becomingGuru","2009-03-31 06:38:59","2009-03-30 13:11:35","","","2012-03-01 15:19:54"
"14172573","SHA-1 hash for HMAC Generated in Objective C and PHP (hash_hmac) dont match","<p>I am trying to implement HMAC authentication from Objective C(CCHmac) and PHP (hash_hmac). I got the different hash result. Have anyone can help me? I don't know why to get the different hash result? Below is my Code (Objective-c &amp; PHP) for your reference. Please!</p>

<p>PHP: </p>

<pre><code>$APIConsumerSecret =""DcmzvkQC7Sno+lxnbDG0hTtZ0WTQn9T2T9DJxEmcB0"";
$APIConsumerSecret = urlencode($APIConsumerSecret).'&amp;';
$BaseString=""GET&amp;http%3A%2F%2Fboday.api.simppo.com%2Foauth%2Frequest_token&amp;oauth_consumer_key%3DCN6W1I8E2CEWZJNQI2KA7KY3%26oauth_nonce%3DlxTSJL%26oauth_signature_method%3DHMAC-SHA1%26oauth_timestamp%3D1357268295%26oauth_version%3D1.0"";

echo base64_encode(hash_hmac('sha1',$BaseString,$APIConsumerSecret,true));
</code></pre>

<p>PHP Result: <code>xJ5Ya4u4ghH4ugIieGIb9AcFpD0=</code></p>

<p>Objective-C</p>

<pre><code>- (NSString*)flickr_oauthSignatureFor:(NSString*)dataString withKey:(NSString*)secret
{
  NSData* secretData = [secret dataUsingEncoding:NSUTF8StringEncoding];
  NSData* stringData = [dataString dataUsingEncoding:NSUTF8StringEncoding];

  const void* keyBytes = [secretData bytes];
  const void* dataBytes = [stringData bytes];

  ///#define CC_SHA1_DIGEST_LENGTH   20          /* digest length in bytes */
  void* outs = malloc(CC_SHA1_DIGEST_LENGTH);

  CCHmac(kCCHmacAlgSHA1, keyBytes, [secretData length], dataBytes, [stringData length], outs);

  // Soluion 1
  NSData* signatureData = [NSData dataWithBytesNoCopy:outs length:CC_SHA1_DIGEST_LENGTH freeWhenDone:YES];

  NSLog(@""D1-0: signatureData %@"", signatureData );
  NSLog(@""base64:%@"", [signatureData base64EncodedString] );

  return [signatureData base64EncodedString];
}
</code></pre>

<p>Objective-C Result: </p>

<pre><code>D1-0: &lt;59052771 e670a04b 3a2e87db 3d7965be 1aed112e&gt;
base64: WQUnceZwoEs6LofbPXllvhrtES4=
</code></pre>
","<p>In the example php is URL encoding, the ObjectiveC is not.</p>

<p>Best to start with a simple example, short strings and skip the base64 encoding on both, Then compare results. When this works start adding the additional operations such as url encoding and base 64.</p>

<p>For php start with: echo hash_hmac('sha1', 'test string', 'secret'); and the same in objc.</p>

<p>Here is a starting point that matches php:</p>

<pre><code>NSString* phpsignatureData = @""dd26bfddf122c1055d4cd5b054227727e1e3eecf"";
NSLog(@""phpsignatureData: %@"", phpsignatureData);

NSData* secretData = [@""secret"" dataUsingEncoding:NSUTF8StringEncoding];
NSData* stringData = [@""test string"" dataUsingEncoding:NSUTF8StringEncoding];
NSMutableData *signatureData = [NSMutableData dataWithLength:CC_SHA1_DIGEST_LENGTH];
CCHmac(kCCHmacAlgSHA1, secretData.bytes, secretData.length, stringData.bytes, stringData.length, signatureData.mutableBytes);

NSLog(@""secretData %@"", secretData );
NSLog(@""stringData %@"", stringData );
NSLog(@""signatureData %@"", signatureData );
</code></pre>

<p>NSLog output:   </p>

<blockquote>
<pre><code>phpsignatureData: dd26bfddf122c1055d4cd5b054227727e1e3eecf
secretData &lt;73656372 6574&gt;   
stringData &lt;74657374 20737472 696e67&gt;   
signatureData &lt;dd26bfdd f122c105 5d4cd5b0 54227727 e1e3eecf&gt;
</code></pre>
</blockquote>
","14172947","2365","<php><objective-c><encoding><hmac><hmacsha1>","1","6","2","2017-05-13 11:39:44","14172947","0","","","","","2013-01-05 14:11:54","","2013-01-05 15:19:27","2013-01-05 14:53:51"
"14172573","SHA-1 hash for HMAC Generated in Objective C and PHP (hash_hmac) dont match","<p>I am trying to implement HMAC authentication from Objective C(CCHmac) and PHP (hash_hmac). I got the different hash result. Have anyone can help me? I don't know why to get the different hash result? Below is my Code (Objective-c &amp; PHP) for your reference. Please!</p>

<p>PHP: </p>

<pre><code>$APIConsumerSecret =""DcmzvkQC7Sno+lxnbDG0hTtZ0WTQn9T2T9DJxEmcB0"";
$APIConsumerSecret = urlencode($APIConsumerSecret).'&amp;';
$BaseString=""GET&amp;http%3A%2F%2Fboday.api.simppo.com%2Foauth%2Frequest_token&amp;oauth_consumer_key%3DCN6W1I8E2CEWZJNQI2KA7KY3%26oauth_nonce%3DlxTSJL%26oauth_signature_method%3DHMAC-SHA1%26oauth_timestamp%3D1357268295%26oauth_version%3D1.0"";

echo base64_encode(hash_hmac('sha1',$BaseString,$APIConsumerSecret,true));
</code></pre>

<p>PHP Result: <code>xJ5Ya4u4ghH4ugIieGIb9AcFpD0=</code></p>

<p>Objective-C</p>

<pre><code>- (NSString*)flickr_oauthSignatureFor:(NSString*)dataString withKey:(NSString*)secret
{
  NSData* secretData = [secret dataUsingEncoding:NSUTF8StringEncoding];
  NSData* stringData = [dataString dataUsingEncoding:NSUTF8StringEncoding];

  const void* keyBytes = [secretData bytes];
  const void* dataBytes = [stringData bytes];

  ///#define CC_SHA1_DIGEST_LENGTH   20          /* digest length in bytes */
  void* outs = malloc(CC_SHA1_DIGEST_LENGTH);

  CCHmac(kCCHmacAlgSHA1, keyBytes, [secretData length], dataBytes, [stringData length], outs);

  // Soluion 1
  NSData* signatureData = [NSData dataWithBytesNoCopy:outs length:CC_SHA1_DIGEST_LENGTH freeWhenDone:YES];

  NSLog(@""D1-0: signatureData %@"", signatureData );
  NSLog(@""base64:%@"", [signatureData base64EncodedString] );

  return [signatureData base64EncodedString];
}
</code></pre>

<p>Objective-C Result: </p>

<pre><code>D1-0: &lt;59052771 e670a04b 3a2e87db 3d7965be 1aed112e&gt;
base64: WQUnceZwoEs6LofbPXllvhrtES4=
</code></pre>
","<p>You can try this:   (Objective C)</p>

<pre><code>-(NSString *)DATA_TO_HeX_With_HmacDigestData:(NSData *)digestData{
    const unsigned char *dataBuffer = (const unsigned char *)[digestData bytes];
    NSUInteger          dataLength  = [digestData length];
    NSMutableString     *hexString  = [NSMutableString stringWithCapacity:(dataLength * 2)];
    for (int i = 0; i &lt; dataLength; ++i)
    {
        [hexString appendFormat:@""%02x"", (unsigned int)dataBuffer[i]];
    }
    return [NSString stringWithString:hexString];
}

-(NSString *)HMAC_CREATOR:(NSString *)str andKeyData:(NSData *)keyData  {

    NSData *signatureData = [str dataUsingEncoding:NSUTF8StringEncoding];
    uint8_t digest[CC_SHA256_DIGEST_LENGTH]={0};
    CCHmacContext context;
    CCHmacInit(&amp;context, kCCHmacAlgSHA256, keyData.bytes, keyData.length);
    CCHmacUpdate(&amp;context, signatureData.bytes, signatureData.length);
    CCHmacFinal(&amp;context, digest);
    NSData *digestData = [NSData dataWithBytes:digest length:sizeof(digest)];
    return [self DATA_TO_HeX_With_HmacDigestData:digestData];
}
</code></pre>
","43952707","2365","<php><objective-c><encoding><hmac><hmacsha1>","1","0","2","2017-05-13 11:39:44","14172947","0","","","","","2013-01-05 14:11:54","","","2017-05-13 11:39:44"
"44512493","How make Android Java HMAC SHA256 as in PHP?","<p>I have a code in PHP:</p>

<pre><code>$str=base64_encode('1234');
$key='1234';
print(base64_encode(hash_hmac('sha256', $str, $key,true)));
</code></pre>

<p>And what code for Android Java (Android Studio)?</p>

<p>This code gives different result that in PHP:</p>

<pre><code>import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.util.Base64;
import android.util.Log;
import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;

private String hash_hmac(String str, String secret) throws Exception{
Mac sha256_HMAC = Mac.getInstance(""HmacSHA256"");
byte[] string = str.getBytes();
String stringInBase64 = Base64.encodeToString(string, Base64.DEFAULT);
SecretKeySpec secretKey = new SecretKeySpec(secret.getBytes(), ""HmacSHA256"");
sha256_HMAC.init(secretKey);
String hash = Base64.encodeToString(sha256_HMAC.doFinal(stringInBase64.getBytes()), Base64.DEFAULT);
return hash;
}

String str = ""1234"";
String key = ""1234"";

try {

    Log.d(""HMAC:"", hash_hmac(str,key));

} catch (Exception e) {
    Log.d(""HMAC:"",""stop"");
    e.printStackTrace();
}
</code></pre>

<p>But in native Java it works fine. I can not resolve this ;( 
Maybe any limits for Android platform or device?</p>
","<p>You are converting your input string to base64 that's why it's not matching. here is correct code -</p>

<pre><code>private String hash_hmac(String str, String secret) throws Exception{
Mac sha256_HMAC = Mac.getInstance(""HmacSHA256"");

SecretKeySpec secretKey = new SecretKeySpec(secret.getBytes(), ""HmacSHA256"");
sha256_HMAC.init(secretKey);
String hash = Base64.encodeToString(sha256_HMAC.doFinal(str.getBytes()), Base64.DEFAULT);
return hash;
}
</code></pre>
","44883879","2309","<java><php><android><hmac>","3","4","1","2017-07-03 10:59:08","","0","4","","","","2017-06-13 04:37:49","","","2017-07-03 10:59:08"
"17368972","match cryptojs with c# hmacsha512","<p>Why are my HMACs different?<br>
I've created a visual studio 2012 solution here: <a href=""https://github.com/tonyeung/hmacsha512"" rel=""nofollow"">https://github.com/tonyeung/hmacsha512</a></p>

<p>My js</p>

<pre><code>    &lt;script src=""http://crypto-js.googlecode.com/svn/tags/3.1.2/build/components/enc-base64-min.js""&gt;&lt;/script&gt;
    &lt;script src=""http://crypto-js.googlecode.com/svn/tags/3.1.2/build/rollups/hmac-sha512.js""&gt;&lt;/script&gt;

    var rawSig = ""abc:123:Fri, 28 Jun 2013 15:03:00 GMT"";
    var token = ""c22b31a2-780b-4ac5-8bd5-1296b05130f4""
    var hash = CryptoJS.HmacSHA512(rawSig, token);
    var sig = hash.toString(CryptoJS.enc.Base64);
</code></pre>

<p>my c#</p>

<pre><code>    public JsonResult hmac(string sig, string token)
    {
        var signature = string.Empty;
        using (var hmac = new HMACSHA512(Encoding.UTF8.GetBytes(token)))
        {
            var hash = hmac.ComputeHash(Encoding.UTF8.GetBytes(sig));
            signature = Convert.ToBase64String(hash);
        }

        return Json(signature);
    }
</code></pre>

<p>the result:  </p>

<pre><code>CryptoJS Result
93de274be49d5120f5fef8f7c7c91982ba3ad7ae4e967ef86bdd73cf9e5e67a133ffb185e6993b33a323aade155173bb6a2ddd61fde19a6d09f40260d732dbe3

C# Result  
k94nS+SdUSD1/vj3x8kZgro6165Oln74a91zz55eZ6Ez/7GF5pk7M6Mjqt4VUXO7ai3dYf3hmm0J9AJg1zLb4w==
</code></pre>
","<p>I needed to flip the cryptojs reference</p>

<p>from</p>

<pre><code>&lt;script src=""http://crypto-js.googlecode.com/svn/tags/3.1.2/build/components/enc-base64-min.js""&gt;&lt;/script&gt;
&lt;script src=""http://crypto-js.googlecode.com/svn/tags/3.1.2/build/rollups/hmac-sha512.js""&gt;&lt;/script&gt;
</code></pre>

<p>to</p>

<pre><code>&lt;script src=""http://crypto-js.googlecode.com/svn/tags/3.1.2/build/rollups/hmac-sha512.js""&gt;&lt;/script&gt;
&lt;script src=""http://crypto-js.googlecode.com/svn/tags/3.1.2/build/components/enc-base64-min.js""&gt;&lt;/script&gt;
</code></pre>

<p>found this site to be immensely helpful: <a href=""http://jokecamp.wordpress.com/2012/10/21/examples-of-creating-base64-hashes-using-hmac-sha256-in-different-languages/"" rel=""nofollow"">http://jokecamp.wordpress.com/2012/10/21/examples-of-creating-base64-hashes-using-hmac-sha256-in-different-languages/</a></p>
","17370737","2294","<c#><hmac><cryptojs>","2","1","1","2013-06-28 17:48:21","17370737","0","1","","","","2013-06-28 16:02:40","","","2013-06-28 17:48:21"
"7710964","SHA1 in base64 and HMAC in HEX output issues ios iphone","<p>Iam having a fun time with implementing SHA1 and HMAC methods in a iPhone Applecation. I need to access a webservice(which i do not controll) and they require both SHA1 and HMAC encryption.</p>

<p>For my SHA1 in base64 I use the following approach.</p>

<pre><code>    -(NSString*)sha1ith64Base:(NSString *)stringtoencode
{
    unsigned char result[CC_SHA1_DIGEST_LENGTH]; 
    const char *cStr = [stringtoencode UTF8String];
    CC_SHA1(cStr, strlen(cStr), result); 
    NSData *pwHashData = [[NSData alloc] initWithBytes:result length: sizeof result];  
    NSString *base64 =  [Base64 encode:pwHashData];  

    NSLog(@""SHA1 in base64 %@"",base64);

    return  base64;
}
</code></pre>

<p>For my HMAC I am using the following approach:</p>

<pre><code>    - (NSString *) encodeWithHmacsha1:(NSString *)k0:(NSString*)m0
{
    const char *cKey  = [k0 cStringUsingEncoding:NSASCIIStringEncoding];
    const char *cData = [m0 cStringUsingEncoding:NSASCIIStringEncoding];

    unsigned char cHMAC[CC_SHA1_DIGEST_LENGTH];

    CCHmac(kCCHmacAlgSHA1, cKey, strlen(cKey), cData, strlen(cData), cHMAC);

    NSString *s = [NSString  stringWithFormat:
                   @""%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X"",
                   cHMAC[0], cHMAC[1], cHMAC[2], cHMAC[3], cHMAC[4],
                   cHMAC[5], cHMAC[6], cHMAC[7],
                   cHMAC[8], cHMAC[9], cHMAC[10], cHMAC[11], cHMAC[12],
                   cHMAC[13], cHMAC[14], cHMAC[15],
                   cHMAC[16], cHMAC[17], cHMAC[18], cHMAC[19]
                   ];

    NSLog(@""HMAC in hex %@"",s);    
    return s;
}
</code></pre>

<p>But my actually question is there any way I can test these methods locally and not up gainst the webservice - so I can rule out errors from the wbservice.</p>

<p>regards</p>

<p>SOLVED:
for testing my implementations I use the following method - hopes this can help someone, one day.</p>

<pre><code>    -(void)testEncryptions
{
    NSString *key =  @""Jefe"";
    NSString *data = @""what do ya want for nothing?"";

    NSString *digestAnswerHMAC =@""effcdf6ae5eb2fa2d27416d5f184df9c259a7c79"";
    NSString *digestAnswerSHA1HEX =@""cb5551f403fac5fd3d6d1b6329993c3848c468ce"";

    NSString *disgest64base=@""SmVmZQ=="";
    NSData *stringBytes = [key dataUsingEncoding: NSUTF8StringEncoding]; 
    NSString *hash = [Base64 encode:stringBytes];
    //////
    NSLog(@""testing encryptions"");
    NSLog(@""testing HMAC encryptions is :%@ should be :%@"",[self encodeWithHmacsha1:key :data],digestAnswerHMAC);
    NSLog(@""testing SHA1 in HEX encryption is :%@ should be :%@"",[self sha1:key],digestAnswerSHA1HEX);
    NSLog(@""testing base64 is :%@ should be :%@"",hash,disgest64base);
    NSLog(@""testing sha1 in 64 1234 is %@ and should be cRDtpNCeBiql5KOQsKVyrA0sAiA="",[self sha1ith64Base:@""1234""]);
}
</code></pre>
","<p>In order to test your key hashing methods you will need to establish a known set of test data. That way you know what the expected output will be based on some matching input. You can get a lot of different standard test data from <a href=""http://tools.ietf.org/html/rfc2202"" rel=""nofollow"">RFC2202</a></p>

<p>Testing your implementations would therefore be easily handled by a few unit tests which compares these well-known data sets.</p>

<p>If you want to test that you are actually encoding the query to the webservice and handling the response correctly you could look into some kind of stub or mock testing. Again you will need to establish a known set of input data and expected output.</p>

<p>Once you have this reference test set you can implement a custom NSURLProtocol which will act as the real webservice but instead provide you with the ""reference"" response. I have a detailed description of this topic on my blog:</p>

<ul>
<li><a href=""http://www.infinite-loop.dk/blog/2011/09/using-nsurlprotocol-for-injecting-test-data/"" rel=""nofollow"">UsingNSURLProtocol for Injecting Test Data</a></li>
</ul>
","7711322","2287","<iphone><ios><sha1><hmac>","1","0","1","2015-12-14 21:17:01","7711322","0","1","1555990","","2015-12-14 21:17:01","2011-10-10 09:42:47","","","2011-10-10 10:16:06"
"37150187","Time stamp in hMAC authentication","<p>as restful web api server, we supply our client a clientid and password. I think it is enough for the client to use clientid + hMAC(clientid hashed by password) for the authentication. </p>

<p>I have looked through some documents which advise to use Time stamp or even more information for the base string. I just cannot understand the meaning of that. </p>

<p>Could any guru help explain what exactly the time stamp would help for preventing attack or anything else?</p>
","<p>The issue is that without a timestamp any signed message is valid forever. If an attacker managed to capture a message they could replay it infinitely even without compromising your secret used to sign the message.</p>

<p>If you add a timestamp then a message will expire after a short time and prevent this. You would chose how long to honor timestamps for in the server application. When you do remember to consider ""future"" time because the clients' click might be slightly ahead of your and appear in the future to your application.</p>
","37150240","2272","<authentication><timestamp><hmac>","0","4","1","2016-05-10 22:54:23","37150240","0","","","","","2016-05-10 22:48:37","","","2016-05-10 22:54:23"
"27386764","Payeezy Credit Card Payments always geting ""HMAC validation Failure"" error response","<p>Can anyone answer, why I always get ""HMAC validation Failure"" error response .</p>

<p>my code:</p>

<pre><code>$response_purchase_JSON = $payeezy - &gt; purchase(array(

      ""amount"" =&gt; ""420"",
      ""card_number"" =&gt; ""4012000033330026"",
      ""card_type"" =&gt; ""VISA"",
      ""card_holder_name"" =&gt; ""Test Account"",
      ""card_cvv"" =&gt; ""675"",
      ""card_expiry"" =&gt; ""1119"",
      ""merchant_ref"" =&gt; ""Transaction"",
      ""currency_code"" =&gt; ""USD"",

));

print_r($response_purchase_JSON);
</code></pre>
","<p>You need to construct HMAC value. Take a look at documentation at:
<a href=""https://developer.payeezy.com/content/hmac-validation-failure"" rel=""nofollow"">https://developer.payeezy.com/content/hmac-validation-failure</a></p>

<p>Also your JSON payload is incorrect.</p>

<p>Example correct payload (test.json):</p>

<pre><code>{
    ""transaction_type"": ""authorize"",
    ""method"": ""credit_card"",
    ""amount"": ""420"",
    ""currency_code"": ""USD"",
    ""credit_card"": {
        ""type"": ""visa"",
        ""cardholder_name"": ""Test Account"",
        ""card_number"": ""4012000033330026"",
        ""exp_date"": ""1119"",
        ""cvv"": ""675""
    }
}
</code></pre>

<p>Here is also sample PHP code below:</p>

<pre><code>&lt;?php

$serviceURL = 'https://api-cert.payeezy.com/v1/transactions';
$apikey = 'yourapikey';
$token = 'yourapitoken';
$apisecret = 'yourapisecret';

list($usec, $sec) = explode("" "", microtime());
$timestamp = round(((float)$usec + (float)$sec) * 1000);
$timestamp = $timestamp - 5000;
$nonce = rand();

echo 'Timestamp is: '. $timestamp.""\n"";

$reqbody = file_get_contents('./test.json', true);

echo 'Request body: '.$reqbody.""\n"";

$summarize = """";
$summarize .= $apikey;
$summarize .= $nonce;
$summarize .= $timestamp;
$summarize .= $token;
$summarize .= $reqbody;


$hmac = hash_hmac('SHA256', $summarize, $apisecret);

echo ""Hmac is: "".$hmac.""\n"";

$hmac_enc = base64_encode($hmac);


$curl = curl_init($serviceURL);
curl_setopt($curl, CURLOPT_HEADER, false);
curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);

curl_setopt($curl, CURLOPT_POST, true);
curl_setopt($curl, CURLOPT_POSTFIELDS, $reqbody);
curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, 0);
curl_setopt($curl, CURLOPT_VERBOSE, true);


$headers = array(
    'Content-type: application/json',
    ""Authorization: "".$hmac_enc,
    ""apikey: "".$apikey,
    ""token: "".$token,
    ""timestamp: "".$timestamp,
    ""nonce: "".$nonce,
);


curl_setopt($curl, CURLOPT_HTTPHEADER, $headers);

$json_response = curl_exec($curl);

$status = curl_getinfo($curl, CURLINFO_HTTP_CODE);

if ( $status != 201 ) {
    die(""Error: call to URL $serviceURL failed with status $status, response $json_response, curl_error "" . curl_error($curl) . "", curl_errno "" . curl_errno($curl));
}


curl_close($curl);

$response = json_decode($json_response, true);

echo ""Response is: "".$response.""\n"";
echo ""JSON response is: "".$json_response.""\n"";

?&gt; 
</code></pre>
","27630041","2265","<php><payment-gateway><payment><hmac>","0","2","2","2016-05-04 05:10:57","","0","","3820025","","2014-12-09 19:02:48","2014-12-09 19:01:16","","","2014-12-24 00:39:44"
"27386764","Payeezy Credit Card Payments always geting ""HMAC validation Failure"" error response","<p>Can anyone answer, why I always get ""HMAC validation Failure"" error response .</p>

<p>my code:</p>

<pre><code>$response_purchase_JSON = $payeezy - &gt; purchase(array(

      ""amount"" =&gt; ""420"",
      ""card_number"" =&gt; ""4012000033330026"",
      ""card_type"" =&gt; ""VISA"",
      ""card_holder_name"" =&gt; ""Test Account"",
      ""card_cvv"" =&gt; ""675"",
      ""card_expiry"" =&gt; ""1119"",
      ""merchant_ref"" =&gt; ""Transaction"",
      ""currency_code"" =&gt; ""USD"",

));

print_r($response_purchase_JSON);
</code></pre>
","<p>These are the common causes for “HMAC validation Failure”:</p>

<ol>
<li>API key and/or API secret are incorrect.</li>
<li>Leading or trailing spaces in the API key, API secret, merchant token.</li>
<li>Timestamp in the HTTP header is not in milliseconds.</li>
<li>Timestamp in the HTTP header does not represent EPOCH time.</li>
<li>Epoch time is not being calculated from UTC.    </li>
<li>Timestamp in the HTTP header is not within 5 minutes of our server time</li>
<li>System time is not accurate.</li>
</ol>

<p>If you testing payment on the local machine and you think you have followed all the step correctly then also getting the same error,then try the code to run on the server </p>
","37018942","2265","<php><payment-gateway><payment><hmac>","0","0","2","2016-05-04 05:10:57","","0","","3820025","","2014-12-09 19:02:48","2014-12-09 19:01:16","","","2016-05-04 05:10:57"
"11648684","hmac-sha256 support","<p>From linux when execute ssh -c 3des -m hmac-sha256, error message 'unknown mac type-hmac256' is thrown. can someone please suggest me how to use hmac256 algorithm?
Any ssh client which supports hmac-sha256?</p>
","<p>There is yet another link that says - it has added support for SHA-2 family of secure hash algorithms.
<a href=""http://tools.ietf.org/html/rfc6668"" rel=""nofollow"">http://tools.ietf.org/html/rfc6668</a>
You can consider checking this with OpenSSH 5.9 per this link
<a href=""http://cvs.openbsd.org/openssh/txt/release-5.9"" rel=""nofollow"">http://cvs.openbsd.org/openssh/txt/release-5.9</a></p>
","11662626","2243","<ssh><hmac>","0","0","1","2012-07-26 05:01:35","","3","","","","","2012-07-25 11:27:48","","","2012-07-26 05:01:35"
"37763235","Unicode Objects must be encoded before hashing error","<p>Questions dealing with similar issues: <a href=""https://stackoverflow.com/questions/7585307/typeerror-unicode-objects-must-be-encoded-before-hashing"">SO 1</a>, <a href=""https://stackoverflow.com/questions/13265439/python-3-3-unicode-objects-must-be-encoded-before-hashing"">SO 2</a>, <a href=""https://stackoverflow.com/questions/37640868/python-3-4-error-unicode-objects-must-be-encoded-before-hashing"">SO 3</a>.</p>

<p>I've tried their answers, encoding pretty much any string to <code>utf-8</code>, but <code>hmac</code> still tells me to encode my unicoe chars. The biggest problem is that I can't even identify the offending variable; print outputs tell me they're either <code>strings</code> or <code>bytes</code>; in the case of the former I attach <code>.encode()</code>, but that hasn't helped. </p>

<p>I'm trying to query the GDAX API and am also <a href=""https://docs.gdax.com/?python#generating-an-api-key"" rel=""nofollow noreferrer"">using the code as given on their API page</a>. Being written for Python2.7, I figured there might be issues with encoding and all, but this is just not making sense to me.</p>

<p>My code:</p>

<pre><code>class CoinbaseExchangeAuth(AuthBase):
    def __init__(self, api_key, secret_key, passphrase):
        self.api_key = api_key.encode()
        self.secret_key = secret_key.encode()
        self.passphrase = passphrase.encode()

    def __call__(self, request):
        timestamp = str(time.time())
        message = timestamp + request.method + request.path_url + (request.body or '')
        hmac_key = base64.b64decode(self.secret_key)
    #print(hmac_key, type(hmac_key))
    #print(message, type(message))
    signature = hmac.new(hmac_key, message, hashlib.sha256)

    signature_b64 = signature.digest().encode('base64').rstrip('\n')


    request.headers.update({
        'CB-ACCESS-SIGN': signature_b64,
        'CB-ACCESS-TIMESTAMP': timestamp,
        'CB-ACCESS-KEY': self.api_key,
        'CB-ACCESS-PASSPHRASE': self.passphrase,
        'Content-Type': 'application/json'
    })
    return request
</code></pre>

<p>The error:</p>

<pre><code>File ""F:\git\knowhere\Private\bitex-crawler\gdax_client\gdaxex\api.py"", line 47, in __call__
signature = hmac.new(hmac_key, message, hashlib.sha256)
File ""C:\Users\nls\Anaconda3\lib\hmac.py"", line 144, in new
return HMAC(key, msg, digestmod)
File ""C:\Users\nls\Anaconda3\lib\hmac.py"", line 84, in __init__
self.update(msg)
File ""C:\Users\nls\Anaconda3\lib\hmac.py"", line 93, in update
self.inner.update(msg)
TypeError: Unicode-objects must be encoded before hashing
</code></pre>

<p>When I type check the objects I feed to my <code>hmac.new()</code> call, it tells me I have a <code>str</code> object and a <code>bytes</code> object.</p>

<pre><code>print(type(hmac_key)) # &lt;bytes&gt;
print(type(message))  # &lt;str&gt;
</code></pre>

<p>Naturally, I thought I need to encode that sucker too:</p>

<pre><code>signature = hmac.new(hmac_key, message.encode(), hashlib.sha256)
</code></pre>

<p>which resulted in an error on this line:</p>

<pre><code>signature_b64 = signature.digest().encode('base64').rstrip('\n')
</code></pre>

<p>namely:</p>

<pre><code>File ""F:/git/knowhere/Private/bitex-crawler/gdax_client/client.py"",
[..]
File ""F:\git\knowhere\Private\bitex-crawler\gdax_client\gdaxex\api.py"", line 123, in _query
r = api_query(url, json=req, auth=auth)
File ""C:\Users\nls\Anaconda3\lib\site-packages\requests\api.py"", line 67, in get
return request('get', url, params=params, **kwargs)
File ""C:\Users\nls\Anaconda3\lib\site-packages\requests\api.py"", line 53, in request
return session.request(method=method, url=url, **kwargs)
File ""C:\Users\nls\Anaconda3\lib\site-packages\requests\sessions.py"", line 454, in request
prep = self.prepare_request(req)
File ""C:\Users\nls\Anaconda3\lib\site-packages\requests\sessions.py"", line 388, in prepare_request
hooks=merge_hooks(request.hooks, self.hooks),
File ""C:\Users\nls\Anaconda3\lib\site-packages\requests\models.py"", line 297, in prepare
self.prepare_auth(auth, url)
File ""C:\Users\nls\Anaconda3\lib\site-packages\requests\models.py"", line 490, in prepare_auth
r = auth(self)
File ""F:\git\knowhere\Private\bitex-crawler\gdax_client\gdaxex\api.py"", line 49, in __call__
signature_b64 = signature.digest().encode('base64').rstrip('\n')
AttributeError: 'bytes' object has no attribute 'encode'
</code></pre>

<p>..So I can't have unencoded unicode objects, but I cant have bytes later on either? How on earth do I fix this? Appreciating any help on this, because I'm profoundly confused.</p>
","<p><a href=""https://docs.python.org/3/library/hashlib.html#module-hashlib"" rel=""nofollow"">""Parameter msg can be of any type supported by hashlib.""</a>.</p>

<p><a href=""https://docs.python.org/3/library/hashlib.html#module-hashlib"" rel=""nofollow"">""Note: Feeding string objects into  is not supported, as hashes work on bytes, not on characters.""</a>.</p>

<p>Thus, your message must be of type <code>bytes</code>. Use <code>.encode()</code> on the message wich will give you the bytes object.</p>

<p>Note: This is only necessary for python 3!</p>

<p>To encode the digest to base64 use the <a href=""https://docs.python.org/2/library/base64.html"" rel=""nofollow"">base64 library</a>.</p>

<pre><code>import base64
signature_b64 = base64.b64encode(signature.digest())
</code></pre>
","37763456","2229","<python><python-3.x><encode><hmac>","4","4","1","2016-06-11 12:00:01","37763456","2","","-1","","2017-05-23 12:31:49","2016-06-11 11:32:15","","","2016-06-11 12:00:01"
"9080620","FIPS validated application with HMAC function based on SHA512?","<p>I'm building a FIPS validated application and have the FIPS mode turned on on my computer. I need an HMAC function hopefully based on SHA512. I understand that the HMAC SHA1 function is FIPS validated but I have a hash function SHA512CryptoServiceProvider which is FIPS validated and I know that FIPS does in fact allow for SHA512. Is there a similar HMAC function in C# that does FIPS validated HMAC SHA512?</p>
","<p>There is a <a href=""http://msdn.microsoft.com/en-us/library/system.security.cryptography.hmacsha512.aspx"">HMACSHA512 Class</a>, but it uses the <a href=""http://msdn.microsoft.com/en-us/library/system.security.cryptography.sha512managed.aspx"">SHA512Managed Class</a> internally, which is <a href=""http://social.msdn.microsoft.com/Forums/en-US/netfxbcl/thread/b1c59dcd-9a51-408d-bdaf-9a625c3cf503#f1d39277-76c8-474c-94fe-93c83cff6e89"">not FIPS certified</a>.</p>

<p>You could try to <a href=""http://blogs.msdn.com/b/shawnfa/archive/2007/01/31/please-do-not-use-the-net-2-0-hmacsha512-and-hmacsha384-classes.aspx"">create your own HMACSHA512 Class</a> based on the <a href=""http://msdn.microsoft.com/en-us/library/system.security.cryptography.sha512cryptoserviceprovider.aspx"">SHA512CryptoServiceProvider Class</a>:</p>

<pre><code>public class MyHMACSHA512 : HMAC
{
    public MyHMACSHA512(byte[] key)
    {
        HashName = ""System.Security.Cryptography.SHA512CryptoServiceProvider"";
        HashSizeValue = 512;
        BlockSizeValue = 128;
        Key = key;
    }
}
</code></pre>
","9080656","2211","<c#><hmac><fips>","4","7","2","2014-02-15 16:10:53","9080656","0","0","1849664","","2014-02-15 16:10:53","2012-01-31 13:51:26","","2012-01-31 15:22:13","2012-01-31 13:53:34"
"9080620","FIPS validated application with HMAC function based on SHA512?","<p>I'm building a FIPS validated application and have the FIPS mode turned on on my computer. I need an HMAC function hopefully based on SHA512. I understand that the HMAC SHA1 function is FIPS validated but I have a hash function SHA512CryptoServiceProvider which is FIPS validated and I know that FIPS does in fact allow for SHA512. Is there a similar HMAC function in C# that does FIPS validated HMAC SHA512?</p>
","<p>The following worked for me - I was able to create both an AES and SHA256 FIPS happy HMAC:</p>

<pre><code>    /// &lt;summary&gt;Computes a Hash-based Message Authentication Code (HMAC) using the AES hash function.&lt;/summary&gt;
    public class AesHmac : HMAC
    {
        /// &lt;summary&gt;Initializes a new instance of the AesHmac class with the specified key data.&lt;/summary&gt;
        /// &lt;param name=""key""&gt;The secret key for AesHmac encryption.&lt;/param&gt;
        public AesHmac(byte[] key)
        {
            HashName = ""System.Security.Cryptography.AesCryptoServiceProvider"";
            HashSizeValue = 128;
            BlockSizeValue = 128;
            Initialize();
            Key = (byte[])key.Clone();
        }
    }

    /// &lt;summary&gt;Computes a Hash-based Message Authentication Code (HMAC) using the SHA256 hash function.&lt;/summary&gt;
    public class ShaHmac : HMAC
    {
        /// &lt;summary&gt;Initializes a new instance of the ShaHmac class with the specified key data.&lt;/summary&gt;
        /// &lt;param name=""key""&gt;The secret key for ShaHmac encryption.&lt;/param&gt;
        public ShaHmac(byte[] key)
        {
            HashName = ""System.Security.Cryptography.SHA256CryptoServiceProvider"";
            HashSizeValue = 256;
            BlockSizeValue = 128;
            Initialize();
            Key = (byte[])key.Clone();
        }
    }
</code></pre>

<p>Thanks,
Ritchie</p>
","10487510","2211","<c#><hmac><fips>","4","2","2","2014-02-15 16:10:53","9080656","0","0","1849664","","2014-02-15 16:10:53","2012-01-31 13:51:26","","","2012-05-07 18:58:16"
"14533621","objective c hmac sha 256 gives wrong nsdata output","<p>So finally figured out how to do an hmac sha 256 hashing. I will be using this for a wcf service api i made. My problem is that the NSData output that my method is sending out have spaces.</p>

<p>eg. This is how it looks like what my API sends out</p>

<blockquote>
  <blockquote>
    <p>""2efb00aba01a3f5b674fba3063b43fee7a9356947118......""</p>
  </blockquote>
</blockquote>

<p>And this is how my iphone app shows it</p>

<blockquote>
  <blockquote>
    <p>&lt;2efb00ab a01a3f5b 674fba30.....></p>
  </blockquote>
</blockquote>

<p>This is how my code in objective c looks like:</p>

<pre><code>NSData *hmacSHA256(NSString *key, NSString *data)
{
    const char *cKey  = [key cStringUsingEncoding:NSASCIIStringEncoding];
    const char *cData = [data cStringUsingEncoding:NSASCIIStringEncoding];
    unsigned char cHMAC[CC_SHA256_DIGEST_LENGTH];
    CCHmac(kCCHmacAlgSHA256, cKey, strlen(cKey), cData, strlen(cData), cHMAC);
    return [[NSData alloc] initWithBytes:cHMAC length:sizeof(cHMAC)];
}
</code></pre>

<p>This came from this answer:</p>

<p><a href=""https://stackoverflow.com/a/8459123/639713"">https://stackoverflow.com/a/8459123/639713</a></p>

<p>Anyway, my issue is, how do I deal with this. How do I convert the NSdata output to string? And if does get converted to string I'm guessing the output will be different from what the WCF Service API sends out. Do I change how the API processes it's hmacsha256 output?</p>

<p>Thanks!</p>
","<p><code>&lt;2efb00ab a01a3f5b 674fba30.....&gt;</code> looks like the result of calling <code>-[NSData description]</code>, like <code>NSLog</code> would do for any <code>%@</code> format strings. The <code>NSData</code> itself represents a sequence of bytes. The output you're after appears to be the byte sequence as a hexidecimal string. See <a href=""https://stackoverflow.com/questions/1305225/best-way-to-serialize-a-nsdata-into-an-hexadeximal-string/9084784#9084784"">Best way to serialize an NSData into a hexadeximal string</a> for how to serialize the <code>NSData</code> to that format.</p>
","14533739","2200","<objective-c><nsdata><wcf-security><hmac>","2","1","2","2013-01-26 04:02:38","14533742","1","1","-1","","2017-05-23 11:55:14","2013-01-26 03:41:02","","2017-05-23 10:30:16","2013-01-26 04:01:37"
"14533621","objective c hmac sha 256 gives wrong nsdata output","<p>So finally figured out how to do an hmac sha 256 hashing. I will be using this for a wcf service api i made. My problem is that the NSData output that my method is sending out have spaces.</p>

<p>eg. This is how it looks like what my API sends out</p>

<blockquote>
  <blockquote>
    <p>""2efb00aba01a3f5b674fba3063b43fee7a9356947118......""</p>
  </blockquote>
</blockquote>

<p>And this is how my iphone app shows it</p>

<blockquote>
  <blockquote>
    <p>&lt;2efb00ab a01a3f5b 674fba30.....></p>
  </blockquote>
</blockquote>

<p>This is how my code in objective c looks like:</p>

<pre><code>NSData *hmacSHA256(NSString *key, NSString *data)
{
    const char *cKey  = [key cStringUsingEncoding:NSASCIIStringEncoding];
    const char *cData = [data cStringUsingEncoding:NSASCIIStringEncoding];
    unsigned char cHMAC[CC_SHA256_DIGEST_LENGTH];
    CCHmac(kCCHmacAlgSHA256, cKey, strlen(cKey), cData, strlen(cData), cHMAC);
    return [[NSData alloc] initWithBytes:cHMAC length:sizeof(cHMAC)];
}
</code></pre>

<p>This came from this answer:</p>

<p><a href=""https://stackoverflow.com/a/8459123/639713"">https://stackoverflow.com/a/8459123/639713</a></p>

<p>Anyway, my issue is, how do I deal with this. How do I convert the NSdata output to string? And if does get converted to string I'm guessing the output will be different from what the WCF Service API sends out. Do I change how the API processes it's hmacsha256 output?</p>

<p>Thanks!</p>
","<p>You could modify your method slightly so that instead of creating an NSData containing the digest bytes, you could create a string formatting the bytes as hexadecimal.</p>

<pre><code>NSString *hmacSHA256(NSString *key, NSString *data)
{
    const char *cKey  = [key cStringUsingEncoding:NSASCIIStringEncoding];
    const char *cData = [data cStringUsingEncoding:NSASCIIStringEncoding];
    unsigned char cHMAC[CC_SHA256_DIGEST_LENGTH];
    CCHmac(kCCHmacAlgSHA256, cKey, strlen(cKey), cData, strlen(cData), cHMAC);

    NSMutableString *result = [NSMutableString string];
    for (int i = 0; i &lt; sizeof cHMAC, i++)
    {
        [result appendFormat:@""%02hhx"", cHMAC[i]];
    }

    return result;
}
</code></pre>
","14533742","2200","<objective-c><nsdata><wcf-security><hmac>","2","6","2","2013-01-26 04:02:38","14533742","1","1","-1","","2017-05-23 11:55:14","2013-01-26 03:41:02","","","2013-01-26 04:02:37"
"14746870","Creating a restful Login API","<p>I have read a few articles on the subject, but I am just looking for some more advice really.</p>

<p>I have a WordPress site with a login functionality and user database on that site.</p>

<p>What I need to do is allow a 3rd party application to authenticate details which it receives against my WordPress database.</p>

<p>I was thinking the best way to do this would be by sending the data to a REST API, but security wise I cannot think how I can return a successful login without this being easily duplicated by a user.</p>

<p>I have read about oAuth and HMAC, but am not sure which route I should be going down.</p>

<p>Any help greatly appreciated, thanks.</p>

<p>Ian</p>
","<p>WordPress provides the XML-RPC API for this stuff. That's what the iPad/iPhone apps use.</p>

<p>Check out the Codex.</p>

<ul>
<li><a href=""http://codex.wordpress.org/XML-RPC_Extending"" rel=""nofollow"">http://codex.wordpress.org/XML-RPC_Extending</a></li>
<li><a href=""http://codex.wordpress.org/XML-RPC_WordPress_API"" rel=""nofollow"">http://codex.wordpress.org/XML-RPC_WordPress_API</a></li>
</ul>

<p>For more general info, there's the Wikipedia entry, <a href=""http://en.wikipedia.org/wiki/XML-RPC"" rel=""nofollow"">http://en.wikipedia.org/wiki/XML-RPC</a>.</p>
","14750176","2199","<wordpress><rest><oauth><restful-authentication><hmac>","1","0","1","2013-02-07 11:36:36","","0","1","","","","2013-02-07 08:39:41","","","2013-02-07 11:36:36"
"31172102","Using multiple Authorization schemes (HMAC and OATH)","<p>Okay so i have a WebAPI Auth service that is used for the /token request and returns the Bearer token to the client, i have added an AppId and Api Key to the properties so i get back</p>

<pre><code>{
""access_token"": ""..."",
""token_type"": ""bearer"",
""expires_in"": 86399,
""dm:appid"": ""1"",
""dm:apikey"": ""..."",
"".issued"": ""Wed, 01 Jul 2015 20:46:45 GMT"",
"".expires"": ""Thu, 02 Jul 2015 20:46:45 GMT""
}
</code></pre>

<p>The AppId and Api Key should be used by the client to generate a Hmac SHA256 signature for each request.</p>

<p>On my controller i have used the Authorize attribute and created a HmacAuthentication attribute which implement IAuthenticationFilter</p>

<pre><code>[RoutePrefix(""api/account"")]
[Authorize]
[HmacAuthentication]
public class AccountController : ApiController
{
    // rest of controller here
}
</code></pre>

<p>The issue i have is that any request to this controller will expect the <code>Authorization: Bearer ...</code> header and the HmacAuthentication attribute also expects the <code>Authorization: amx</code> header.</p>

<p>Now i know that you can only have one Authorization header so my quandry is how can i implement both Authorization headers without breaking HTTP, has anyone achieved the use of both OWIN OAuth and HMAC Authentication</p>

<p>I followed these examples from Taiseer Joudeh</p>

<p><a href=""http://bitoftech.net/2014/06/01/token-based-authentication-asp-net-web-api-2-owin-asp-net-identity/"" rel=""nofollow"">Token Based Authentication using ASP.NET Web API 2, Owin, and Identity</a>
<a href=""http://bitoftech.net/2014/12/15/secure-asp-net-web-api-using-api-key-authentication-hmac-authentication/"" rel=""nofollow"">Secure ASP.NET Web API using API Key Authentication – HMAC Authentication</a></p>
","<p>This has been a long while without an answer and since I have resolved my original issue I figured I should post the solution here so others can make use of it.</p>

<p>In the end, the solution was to add a custom header like @Glaucus suggested in their comment. For the standard OAuth authorisation I added the <code>Authorize</code> header attribute.  To satisfy my need for the HMAC I simply added an <code>X-Authorize</code> attribute to the header and modified my code to use this header instead.</p>

<p>Now I can have a WebAPI service secured by OAuth token and by implementing HMAC authorisation on the requests</p>
","41614669","2195","<asp.net-web-api><oauth><owin><hmac>","5","0","1","2017-01-12 13:38:02","","1","2","2436209","","2015-07-04 00:21:28","2015-07-01 21:34:14","","","2017-01-12 13:38:02"
"16379591","Where to distribute the HMAC Secret Key part?","<p>So I'm currently in the process of developing an an app that will be cross-platform. For this reason I want the app to use an external database on a cloud service through a REST API build using the Zend Framework. I researched on how to build a secure REST API, many resources pointed out using a HMAC for authentication. The part that leaves me a little confused is where should the secret key be generated and how should it be shared with both the server and the client?</p>

<p>Is every individual client (As in every user of the app) supposed to get a unique secret key?</p>

<p>If not, I imagine I could do something like this:</p>

<ol>
<li>Generate Secret key for (e.g.) iOS devices on the server.</li>
<li>Hard code the key in the app</li>
<li>With every request a HMAC is send hashing the secret key, some data and the user id.</li>
<li>I check the user id in the HMAC with the user id send in normal JSON, and if the secret keys match.</li>
<li>execute whatever the user request the user send.</li>
</ol>

<p>Whenever a third party service would like to use my rest API, I would need to generate a separate secret key specifically for that service.</p>

<p>If every user has to generate a separate secret key, then I have no idea on how I would transfer the key to the server without the risk of a man-in-the-middle attack..</p>

<p>Does this sound about right?</p>
","","","2184","<api><rest><key><hmac>","2","","0","2013-05-04 22:35:37","","2","1","","","","2013-05-04 22:35:37","","",""
"26915864","How can I create a signature for AWS in Javascript?","<p>I am trying to create the signature for AWS Mechanical Turk, using Node.js, but am having trouble doing so.  At the moment I am using the following, but keep getting errors:</p>

<pre><code>CryptoJS.HmacSHA1(service + operation + timestamp, process.env.SECRET_ACCESS_KEY); 
</code></pre>

<p>The explanation of the signature is at this <a href=""http://docs.aws.amazon.com/AWSMechTurk/latest/AWSMechanicalTurkRequester/MakingRequests_RequestAuthenticationArticle.html"" rel=""nofollow"">link</a>.  It states that to create a signature</p>

<blockquote>
  <p>A request signature, an HMAC, is calculated by concatenating the
  values of the Service, Operation, and Timestamp parameters, in that
  order, and then calculating an RFC 2104-compliant HMAC, using the
  Secret Access Key as the ""key."" The computed HMAC value should be
  base64 encoded, and is passed as the value of the Signature request
  parameter. For more information, go to
  <a href=""http://www.faqs.org/rfcs/rfc2104.html"" rel=""nofollow"">http://www.faqs.org/rfcs/rfc2104.html</a>.</p>
</blockquote>
","<p>I think this will work for you (I use <code>GetAccountBalance</code>) as a simple example:</p>

<pre><code>&lt;script src=""http://crypto-js.googlecode.com/svn/tags/3.0.2/build/rollups/hmac-sha1.js""&gt;&lt;/script&gt;  
&lt;script src=""http://crypto-js.googlecode.com/svn/tags/3.0.2/build/components/enc-base64-min.js""&gt;&lt;/script&gt;  
&lt;script&gt;
var service = ""AWSMechanicalTurkRequester"";
var timestamp = new Date().toISOString();
var operation = ""GetAccountBalance"";
var secret = ""YOURSECRETKEY"";
var signature = CryptoJS.HmacSHA1(service + operation + timestamp, secret).toString(CryptoJS.enc.Base64);
&lt;/script&gt;
</code></pre>
","26951603","2114","<javascript><node.js><amazon-web-services><hmac><mechanicalturk>","2","4","1","2018-04-09 21:06:03","26951603","2","","","","","2014-11-13 18:25:52","","","2014-11-15 22:43:49"
"5711412","php to iphone code - CCHmac kCCHmacAlgSHA256","<p>I am trying to login to my server using hmac sha256 encryption, i have working code in php, but can't get it working in iphone and traced it to that the hmac in iphone is yielding different output to php code, given same inputs
php code is</p>

<pre><code>  $privatekey = '6-y6f""\%BjSM;HBo\'sPr"")5#t2nb-LG*;])f^Si[';
  $identity_arrow_getSecret = $privatekey;
  $date_c = ""2011-04-18T23:56:28+0800"";
  $uri = '/backend/1/User/Header';

  $stringToSign =  ""GET\n\n\n"" . $date_c . ""\n"" . $uri;
  $signature = hash_hmac(""sha256"", utf8_encode($stringToSign), $identity_arrow_getSecret);
  echo ""stringToSign is $stringToSign &lt;HR&gt;"";
  echo ""signature is $signature &lt;HR&gt;"";
</code></pre>

<p>objective-c code is</p>

<pre><code>NSString* uri = @""/backend/1/User/Header"";
NSString* date_c = @""2011-04-18T23:56:28+0800""; //[dateFormatter stringFromDate:[NSDate date]];
NSString* stringToSign = [NSString stringWithFormat:@""GET\n\n\n%@\n%@"" , date_c , uri];
NSLog(@"" stringToSign : %@ &lt;&gt;\r\n"", stringToSign);

NSString* privatekey = @""6-y6f\""\%BjSM;HBo\'sPr\"")5#t2nb-LG*;])f^Si["";

const char *cKey  = [privatekey cStringUsingEncoding:NSASCIIStringEncoding];
const char *cData = [stringToSign cStringUsingEncoding:NSASCIIStringEncoding];

unsigned char cHMAC[CC_SHA256_DIGEST_LENGTH];

CCHmac(kCCHmacAlgSHA256, cKey, strlen(cKey), cData, strlen(cData), cHMAC);

NSString *hash = [HMAC base64EncodedString];
NSLog(@"" hash : %@ \r\n"", hash);
</code></pre>
","<p>You may want to check your Base64 class.  I use the Base64 class written by <a href=""http://imthi.com/blog/programming/iphone-sdk-base64-encode-decode.php"" rel=""nofollow"">Kiichi Takeuchi</a> and it gives me identical results to a routine I wrote in C# to verify, so I assume it's correct.</p>

<p>I had to make one small change to your code to verify, as the Base64 library only encodes an NSData structure.  Here's what it looks like:</p>

<pre><code>CCHmac(kCCHmacAlgSHA256, cKey, strlen(cKey), cData, strlen(cData), cHMAC);
NSData *nsd = [[NSData alloc] initWithBytes: cHMAC length:CC_SHA256_DIGEST_LENGTH];

NSString *hash = [Base64 encode:nsd];
[nsd release];
NSLog(@"" hash : %@ \r\n"", hash);
</code></pre>
","5861213","2084","<iphone><objective-c><restful-authentication><hmac><sha256>","-1","1","1","2011-05-02 18:58:33","","0","1","","","","2011-04-19 03:53:47","","","2011-05-02 18:58:33"
"7273060","When using HMAC for message signing, is it wise to salt the key, message, or both?","<p>Say I'm designing a library to sign/verify messages with SHA-256 HMAC. If the end user uses a weak shared key and sends a lot of short messages, I assume there would be risk of an attacker discovering the key.</p>

<p>My intuition says I should append a unique (per message) salt to the key to make reverse-engineering the key harder.</p>

<p><strong>How much would key salting help, and would I gain anything by also salting the messages?</strong></p>
","<p>Normally people salt the key. It does increase security, both because it makes reverse-engineering the key harder, and because the same message does not always have the same MAC, so an attacker can't simply re-send a message that was sent earlier with the same MAC. I don't see what salting the message as well would get you.</p>
","7273257","2067","<hash><digital-signature><salt><hmac>","6","3","1","2011-09-01 16:19:08","7273257","0","0","","","","2011-09-01 16:01:53","","","2011-09-01 16:19:08"
"17793194","Python HMAC-SHA256 signature differs from PHP signature","<p>I searched and found a few questions that sort of addressed what I am trying to accomplish, but I can't seem to quite put my finger on this. I'm new to programming and am trying to replicate a bit of code that's available to me by the vendor in a handful of languages (PHP, Ruby, Perl, C#).  I've taken the PHP code and tried my best to replicate it in Python and have gotten everything working except this signature function.  Basically, I have to take an array of data that's being passed in by a user via web form, sign it, and send it to the web services listener to process.  Try as I might, I can't get the signature values to match. The vendor unfortunately does not provide code-level support for anything other than their samples, so I'm out of luck there.  Here's the PHP sample:</p>

<pre><code>&lt;?php

define ('HMAC_SHA256', 'sha256');
define ('SECRET_KEY', 'secret_key_redacted');

function sign ($params) {
  return signData(buildDataToSign($params), SECRET_KEY);
}

function signData($data, $secretKey) {
    return base64_encode(hash_hmac('sha256', $data, $secretKey, true));
}

function buildDataToSign($params) {
        $signedFieldNames = explode("","",$params[""signed_field_names""]);
        foreach ($signedFieldNames as &amp;$field) {
           $dataToSign[] = $field . ""="" . $params[$field];
        }
        return commaSeparate($dataToSign);
}

function commaSeparate ($dataToSign) {
    return implode("","",$dataToSign);
}

?&gt;
</code></pre>

<p>which is invoked as such:</p>

<pre><code>&lt;?php
foreach($params as $name =&gt; $value) {
    echo ""&lt;input type=\""text\"" id=\"""" . $name . ""\"" name=\"""" . $name . ""\"" value=\"""" . $value . ""\""/&gt;\n"";
}

echo ""&lt;input type=\""text\"" id=\""signature\"" name=\""signature\"" value=\"""" . sign($params) . ""\""/&gt;\n"";
?&gt;
</code></pre>

<p>This is what I've used in Python to attempt to replicate:</p>

<pre><code>def payment_confirmation(self, *args, **kw):
vars = cherrypy.request.params #takes POST parameters from previous page
del vars['submit'] #removed so it doesnt get signed - part of POST from prev. page

def sign_data(vars):
    for key, value in vars.iteritems():
        yield ""%s=%s,"" % (key, value)

sign_payload = ''.join(sign_data(vars)).rstrip(',')
sign_signature = hashlib.sha256(sign_payload + secret_key).digest().encode('base64')
</code></pre>

<p>Here's a sample of the data I'm trying to sign (reduced into the object that's being returned via the sign_data() method in the Python code:</p>

<pre><code>access_key=12345,reference_number=123456789,currency=USD,locale=en,profile_id=1234567,transaction_type=authorization,signed_date_time=2013-07-22T16:30:43Z,amount=25.00,transaction_uuid=0dc4a151-f2ec-11e2-bb29-005056c00008,payment_method=card,signed_field_names=access_key,profile_id,transaction_uuid,payment_token,signed_field_names,signed_date_time,locale,payment_method,transaction_type,amount,reference_number,currency,payment_token=0000000000000000
</code></pre>

<p>I realize it's a long-shot, but does anyone see anything that's obviously incorrect about my signature method in Python vs. the provided method in PHP?  I thought it could be a way that the PHP function is encoding the key-value pairs so I tried messing around with that in the Python code but it doesn't seem to have worked.  Thanks in advance!</p>
","<p>In case you're still stuck on that question, you might want to try using:</p>

<pre><code>sign_signature = base64.b64encode(hmac.new(secret_key, sign_payload, hashlib.sha256).hexdigest())</code></pre>

<p>The key here is to use <code>hexdigest()</code> instead of <code>digest()</code>.</p>

<p>In my case I lost 2 hours finding out why Python did not produce the same result as PHP did when trying to sign Facebook API requests with their new ""app secret proof"".</p>
","19797940","2053","<python><signature><hmac>","1","1","1","2013-11-05 20:08:44","","0","","","","","2013-07-22 16:56:06","","","2013-11-05 20:08:44"
"31870058","HMAC validation Failure with code 403","<p>I have been exploring payeezy api from last three days. I am just making a simple http web request from a C# application. I have followed all the steps mentions and correctly verified each and everything. Below is the detail per item.</p>

<ol>
<li>API Key :- I have verified my api key its correct.</li>
<li>API Secret :- It is also correct.</li>
<li>merchant token :- It is also verified.</li>
<li><p>Nonce :- I have created cryptographically strong random number as following.</p>

<pre><code>RandomNumberGenerator rng = new RNGCryptoServiceProvider();
byte[] nonceData = new byte[18];
rng.GetBytes(nonceData);
string nonce = BitConverter.ToUInt64(nonceData,0).ToString();  
</code></pre></li>
<li><p>Timestamp :-</p>

<pre><code>string timestamp = Convert.ToInt64(ts.TotalMilliseconds).ToString();
</code></pre></li>
<li><p>Payload :-</p>

<pre><code>{""merchant_ref"":""Astonishing-Sale"",""transaction_type"":""authorize"",""method"":""credit_card"",""amount"":""1299"",""currency_code"":""USD"",""credit_card"":{""type"":""visa"",""cardholder_name"":""John Smith"",""card_number"":""4788250000028291"",""exp_date"":""1020"",""cvv"":""123""}}
</code></pre></li>
<li><p>Then I have created HMAC as following.</p>

<pre><code>private string CreateAuthorization(string data, string secret)
{
    // data is in following format.
    //  data = apiKey + nonce + timestamp + token + payload;
    secret = secret ?? """";
    using (var hmacsha256 = new HMACSHA256(Encoding.UTF8.GetBytes(secret)))
    {
        byte[] hashdata = hmacsha256.ComputeHash(Encoding.UTF32.GetBytes(data));
        return Convert.ToBase64String(hashdata);
    }
}
</code></pre></li>
<li>Now I am getting hmac validation error. My generated hmac string is 64 bit while on your website under docs and sandbox its 86 bit. </li>
</ol>

<p>Can you please assist me in this as I am stuck on this issue from last three days.
Thanks</p>
","<p>These are the common causes for “HMAC validation Failure”:</p>

<ol>
<li>API key and/or API secret are incorrect.</li>
<li>Leading or trailing spaces in the API key, API secret, merchant token.</li>
<li>Timestamp in the HTTP header is not in milliseconds.</li>
<li>Timestamp in the HTTP header does not represent EPOCH time.</li>
<li>Timestamp in the HTTP header is not within 5 minutes of our server time.</li>
<li>System time is not accurate.</li>
</ol>

<p>Here is a sample c# code to generate HMAC:</p>

<pre><code>public byte[] CalculateHMAC(string data, string secret)
    {
        HMAC hmacSha256 = new HMACSHA256(Encoding.UTF8.GetBytes(secret));
        byte[] dataBytes = Encoding.UTF8.GetBytes(data);
        byte[] hmac2Hex = hmacSha256.ComputeHash(Encoding.UTF8.GetBytes(data));

        string hex = BitConverter.ToString(hmac2Hex);
        hex = hex.Replace(""-"","""").ToLower();
        byte[] hexArray = Encoding.UTF8.GetBytes(hex);
        return hexArray;
    }

protected void Button1_Click(object sender, EventArgs e)
{                     
    string jsonString = ""{ \""merchant_ref\"": \""MVC Test\"", \""transaction_type\"": \""authorize\"", \""method\"": \""credit_card\"", \""amount\"": \""1299\"", \""currency_code\"": \""USD\"", \""credit_card\"": { \""type\"": \""visa\"", \""cardholder_name\"": \""Test Name\"", \""card_number\"": \""4005519200000004\"", \""exp_date\"": \""1020\"", \""cvv\"": \""123\"" } }"";

    Random random = new Random();
    string nonce = (random.Next(0, 1000000)).ToString();

    DateTime date = DateTime.UtcNow;
    DateTime epoch = new DateTime(1970, 1, 1, 0, 0, 0, 0);
    TimeSpan span = (date - epoch);
    string time = span.TotalSeconds.ToString();

    string token = Request.Form[""token""];//Merchant token
    string apiKey = Request.Form[""apikey""];//apikey
    string apiSecret = Request.Form[""apisecret""];//API secret
    string hashData = apiKey+nonce+time+token+jsonString;

    string base64Hash = Convert.ToBase64String(CalculateHMAC(hashData, apiSecret));

    string url = ""https://api-cert.payeezy.com/v1/transactions"";

    //begin HttpWebRequest
    HttpWebRequest webRequest = (HttpWebRequest)WebRequest.Create(url);

    webRequest.Method = ""POST"";
    webRequest.Accept = ""*/*"";
    webRequest.Headers.Add(""timestamp"", time);
    webRequest.Headers.Add(""nonce"", nonce);
    webRequest.Headers.Add(""token"", token);
    webRequest.Headers.Add(""apikey"", apiKey);
    webRequest.Headers.Add(""Authorization"", base64Hash );
    webRequest.ContentLength = jsonString.Length;
    webRequest.ContentType = ""application/json"";

    StreamWriter writer = null;
    writer = new StreamWriter(webRequest.GetRequestStream());
    writer.Write(jsonString);
    writer.Close();

    string responseString;
    try
        {
            using(HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse())
            {
                using (StreamReader responseStream = new StreamReader(webResponse.GetResponseStream()))
                {
                    responseString = responseStream.ReadToEnd();
                    request_label.Text = ""&lt;h3&gt;Request&lt;/h3&gt;&lt;br /&gt;"" + webRequest.Headers.ToString() + System.Web.HttpUtility.HtmlEncode(jsonString);
                    response_label.Text = ""&lt;h3&gt;Response&lt;/h3&gt;&lt;br /&gt;"" + webResponse.Headers.ToString() + System.Web.HttpUtility.HtmlEncode(responseString);
                }
            }
        }
    catch (WebException ex)
    {
        if (ex.Response != null) 
        {
            using (HttpWebResponse errorResponse = (HttpWebResponse)ex.Response) 
            {
                using (StreamReader reader = new StreamReader(errorResponse.GetResponseStream())) 
                {
                    string remoteEx = reader.ReadToEnd();
                    error.Text = remoteEx;
                }
            }
        }           
    }
}
</code></pre>
","31870766","2050","<c#><hmac>","1","2","2","2015-08-29 20:19:13","31870766","0","","3073006","","2015-08-07 05:22:29","2015-08-07 05:07:15","","","2015-08-07 06:04:54"
"31870058","HMAC validation Failure with code 403","<p>I have been exploring payeezy api from last three days. I am just making a simple http web request from a C# application. I have followed all the steps mentions and correctly verified each and everything. Below is the detail per item.</p>

<ol>
<li>API Key :- I have verified my api key its correct.</li>
<li>API Secret :- It is also correct.</li>
<li>merchant token :- It is also verified.</li>
<li><p>Nonce :- I have created cryptographically strong random number as following.</p>

<pre><code>RandomNumberGenerator rng = new RNGCryptoServiceProvider();
byte[] nonceData = new byte[18];
rng.GetBytes(nonceData);
string nonce = BitConverter.ToUInt64(nonceData,0).ToString();  
</code></pre></li>
<li><p>Timestamp :-</p>

<pre><code>string timestamp = Convert.ToInt64(ts.TotalMilliseconds).ToString();
</code></pre></li>
<li><p>Payload :-</p>

<pre><code>{""merchant_ref"":""Astonishing-Sale"",""transaction_type"":""authorize"",""method"":""credit_card"",""amount"":""1299"",""currency_code"":""USD"",""credit_card"":{""type"":""visa"",""cardholder_name"":""John Smith"",""card_number"":""4788250000028291"",""exp_date"":""1020"",""cvv"":""123""}}
</code></pre></li>
<li><p>Then I have created HMAC as following.</p>

<pre><code>private string CreateAuthorization(string data, string secret)
{
    // data is in following format.
    //  data = apiKey + nonce + timestamp + token + payload;
    secret = secret ?? """";
    using (var hmacsha256 = new HMACSHA256(Encoding.UTF8.GetBytes(secret)))
    {
        byte[] hashdata = hmacsha256.ComputeHash(Encoding.UTF32.GetBytes(data));
        return Convert.ToBase64String(hashdata);
    }
}
</code></pre></li>
<li>Now I am getting hmac validation error. My generated hmac string is 64 bit while on your website under docs and sandbox its 86 bit. </li>
</ol>

<p>Can you please assist me in this as I am stuck on this issue from last three days.
Thanks</p>
","<p>I've been working on an integration and it's working great; maybe you can take a peek
<a href=""https://github.com/clifton-io/Clifton.Payment"" rel=""nofollow"">https://github.com/clifton-io/Clifton.Payment</a></p>

<p>Specifically you'll want to look here:
<a href=""https://github.com/clifton-io/Clifton.Payment/blob/cc4053b0bfe05f2453dc508e96a649fc138b973c/Clifton.Payment/Gateway/Payeezy/PayeezyGateway.cs#L66"" rel=""nofollow"">https://github.com/clifton-io/Clifton.Payment/blob/cc4053b0bfe05f2453dc508e96a649fc138b973c/Clifton.Payment/Gateway/Payeezy/PayeezyGateway.cs#L66</a></p>

<p>Best of luck :)</p>
","32040210","2050","<c#><hmac>","1","1","2","2015-08-29 20:19:13","31870766","0","","3073006","","2015-08-07 05:22:29","2015-08-07 05:07:15","","2015-08-29 20:19:13","2015-08-16 21:40:42"
"20572523","C# help required to Create Facebook AppSecret_Proof HMACSHA256","<p>Facebook requires that I create a appsecret_proof:   <a href=""https://developers.facebook.com/docs/graph-api/securing-requests"" rel=""noreferrer"">https://developers.facebook.com/docs/graph-api/securing-requests</a></p>

<p>And I have done this using the following code:</p>

<pre><code>public string FaceBookSecret(string content, string key)
{
        var encoding = new System.Text.ASCIIEncoding();
        byte[] keyByte = encoding.GetBytes(key);
        byte[] messageBytes = encoding.GetBytes(content);
        using (var hmacsha256 = new HMACSHA256(keyByte))
        {
            byte[] hashmessage = hmacsha256.ComputeHash(messageBytes);
            return Convert.ToBase64String(hashmessage);
        }
}
</code></pre>

<p>Everything looks fine for me, however facebook says that the appsecret_proof is invalid.   I am logged in, I can do everything as normal when i remove the key. So to save some time:</p>

<ul>
<li>Yes I am posting to the correct URL</li>
<li>Yes I am passing a valid access_token</li>
<li>Yes I am using the same access_token in the proof, as i am in the request</li>
<li>Yes my appsecret is fine, and works</li>
</ul>

<p>Example in usage</p>

<pre><code>dynamic results = client.Post(""/"" + model.PostAsId + ""/feed"", new { message = model.Message, appsecret_proof = FaceBookSecret(postAs.AuthToken, AppSecret) });
</code></pre>

<p>I think it probably has something to do with encoding or something along them lines, but to be honest, I just dont know.</p>

<p>I am also using the Facebook .net SDK    however this does not have much in documentation, and does not seem to strike on anything to do with automation, server side operations etc.</p>

<p>Thanks</p>
","<p>The app secret is a base-16 string, so you need to convert that to a byte array. Take a look at <a href=""https://stackoverflow.com/questions/321370/convert-hex-string-to-byte-array"">How can I convert a hex string to a byte array?</a> for details on how to do this. The access_token needs to be converted to a byte array using the ASCII encoding. Once you've generated the HMAC then encode this as a base-16 string to use as your appsecret_proof. The following code will convert a byte array to base16.</p>

<pre><code>public static class Base16
{
    private static readonly char[] encoding;

    static Base16()
    {
        encoding = new char[16]
        {
            '0', '1', '2', '3', '4', '5', '6', '7',
            '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'
        };
    }

    public static string Encode(byte[] data)
    {
        char[] text = new char[data.Length * 2];

        for (int i = 0, j = 0; i &lt; data.Length; i++)
        {
            text[j++] = encoding[data[i] &gt;&gt; 4];
            text[j++] = encoding[data[i] &amp; 0xf];
        }

        return new string(text);
    }
}
</code></pre>

<p>The code to generate the appsecret_proof would then be</p>

<pre><code>private string GenerateAppSecretProof(string accessToken, string appSecret)
{
    byte[] key = Base16.Decode(appSecret);
    byte[] hash;
    using (HMAC hmacAlg = new HMACSHA1(key))
    {
        hash = hmacAlg.ComputeHash(Encoding.ASCII.GetBytes(accessToken));
    }
    return Base16.Encode(hash);
}
</code></pre>

<p>Facebook seems to accept either a <code>SHA256 HMAC</code> or <code>SHA1 HMAC</code>.</p>
","20633585","2044","<c#><asp.net><facebook><facebook-c#-sdk><hmac>","11","0","2","2018-10-20 13:48:52","20633585","2","4","1822514","","2013-12-15 21:54:06","2013-12-13 17:31:01","","2018-10-20 13:48:52","2013-12-17 12:00:59"
"20572523","C# help required to Create Facebook AppSecret_Proof HMACSHA256","<p>Facebook requires that I create a appsecret_proof:   <a href=""https://developers.facebook.com/docs/graph-api/securing-requests"" rel=""noreferrer"">https://developers.facebook.com/docs/graph-api/securing-requests</a></p>

<p>And I have done this using the following code:</p>

<pre><code>public string FaceBookSecret(string content, string key)
{
        var encoding = new System.Text.ASCIIEncoding();
        byte[] keyByte = encoding.GetBytes(key);
        byte[] messageBytes = encoding.GetBytes(content);
        using (var hmacsha256 = new HMACSHA256(keyByte))
        {
            byte[] hashmessage = hmacsha256.ComputeHash(messageBytes);
            return Convert.ToBase64String(hashmessage);
        }
}
</code></pre>

<p>Everything looks fine for me, however facebook says that the appsecret_proof is invalid.   I am logged in, I can do everything as normal when i remove the key. So to save some time:</p>

<ul>
<li>Yes I am posting to the correct URL</li>
<li>Yes I am passing a valid access_token</li>
<li>Yes I am using the same access_token in the proof, as i am in the request</li>
<li>Yes my appsecret is fine, and works</li>
</ul>

<p>Example in usage</p>

<pre><code>dynamic results = client.Post(""/"" + model.PostAsId + ""/feed"", new { message = model.Message, appsecret_proof = FaceBookSecret(postAs.AuthToken, AppSecret) });
</code></pre>

<p>I think it probably has something to do with encoding or something along them lines, but to be honest, I just dont know.</p>

<p>I am also using the Facebook .net SDK    however this does not have much in documentation, and does not seem to strike on anything to do with automation, server side operations etc.</p>

<p>Thanks</p>
","<p>I have used the below successfully with Facebook</p>

<pre><code>using System.Security.Cryptography;
using System.Text;

internal static string FaceBookSecret(string content, string key)
{
    byte[] keyBytes = Encoding.UTF8.GetBytes(key);
    byte[] messageBytes = Encoding.UTF8.GetBytes(content);
    byte[] hash;
    using (HMACSHA256 hmacsha256 = new HMACSHA256(keyBytes))
    {
        hash = hmacsha256.ComputeHash(messageBytes);
    }

    StringBuilder sbHash = new StringBuilder();
    for (int i = 0; i &lt; hash.Length; i++)
    {
        sbHash.Append(hash[i].ToString(""x2""));
    }
    return sbHash.ToString();
}
</code></pre>
","21473380","2044","<c#><asp.net><facebook><facebook-c#-sdk><hmac>","11","19","2","2018-10-20 13:48:52","20633585","2","4","1822514","","2013-12-15 21:54:06","2013-12-13 17:31:01","","2015-11-08 06:55:04","2014-01-31 05:53:13"
"44771701","SHA256 HMAC using OpenSSL 1.1 not compiling","<p>The code below generates a signed hash using HMAC SHA256. This code compiles and works fine on Debian Jessie and Ubuntu 16.04 (OpenSSL 1.0.2g  1 Mar 2016).</p>

<pre><code>#include &lt;openssl/evp.h&gt;
#include &lt;openssl/hmac.h&gt;
#include &lt;iomanip&gt;
#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;sstream&gt;

using namespace std;

string HMAC256(string data, string key)
{
        stringstream ss;
        HMAC_CTX ctx;
        unsigned int  len;
        unsigned char out[EVP_MAX_MD_SIZE];
        HMAC_Init(&amp;ctx, key.c_str(), key.length(), EVP_sha256());
        HMAC_Update(&amp;ctx, (unsigned char*)data.c_str(), data.length());
        HMAC_Final(&amp;ctx, out, &amp;len);
        HMAC_cleanup(&amp;ctx); 
        for (unsigned int i = 0;  i &lt; len;  i++)
        {
          ss &lt;&lt; setw(2) &lt;&lt; setfill('0') &lt;&lt; hex &lt;&lt; static_cast&lt;int&gt; (out[i]);
        }
        return ss.str();
}

int main()
{
    cout &lt;&lt; HMAC256(""AAAA"",""BBBB"") &lt;&lt; endl;
    return 0;
}
</code></pre>

<p><strong>HOWEVER....</strong></p>

<p>When compiling it on Debian Stretch I get the following error:</p>

<pre><code>hmac256.cpp: In function ‘std::__cxx11::string HMAC256(std::__cxx11::string, std::__cxx11::string)’:
hmac256.cpp:14:18: error: aggregate ‘HMAC_CTX ctx’ has incomplete type and cannot be defined
         HMAC_CTX ctx;
                  ^~~
hmac256.cpp:18:9: warning: ‘int HMAC_Init(HMAC_CTX*, const void*, int, const EVP_MD*)’ is deprecated [-Wdeprecated-declarations]
         HMAC_Init(&amp;ctx, key.c_str(), key.length(), EVP_sha256());
         ^~~~~~~~~
In file included from /usr/include/openssl/hmac.h:13:0,
                 from hmac256.cpp:2:
/usr/include/openssl/hmac.h:28:1: note: declared here
 DEPRECATEDIN_1_1_0(__owur int HMAC_Init(HMAC_CTX *ctx, const void *key, int len,
 ^
</code></pre>

<p>And this has to do with the new OpenSSL version (OpenSSL 1.1.0f  25 May 2017). </p>

<p><strong>QUESTION</strong></p>

<p>Why am I experiencing the problem with OpenSSL 1.1, and how to fix it in a way that maintains backward compatibility with OpenSSL 1.0? </p>
","<p>For fixing the error, please read: <a href=""https://developer.akamai.com/blog/2017/02/14/upgrade-openssl-1-1-0/"" rel=""nofollow noreferrer"">Upgrade To OpenSSL 1.1.0</a>. Basically, you need to create a new HMAC_CTX as follows:</p>

<pre><code>HMAC_CTX *h = HMAC_CTX_new();
HMAC_Init_ex(h, key, keylen, EVP_sha256(), NULL);
...
HMAC_CTX_free(h);
</code></pre>

<p>For backward compatibility, you can consider using macros to control the code block to compile.</p>
","49465808","2013","<c++><openssl><debian><sha256><hmac>","1","1","1","2018-03-24 14:25:42","49465808","2","","608639","","2017-06-27 03:46:11","2017-06-27 03:09:37","","","2018-03-24 14:25:42"
"45985661","Is HKDF implemented in Java Cryptography Architecture?","<p>In the application I'm writing I need to do HKDF to derive two different keys from one password. Searching for examples on how to it in Java I found these two:</p>

<ul>
<li><a href=""https://github.com/WhisperSystems/libsignal-protocol-java/blob/master/java/src/main/java/org/whispersystems/libsignal/kdf/HKDF.java"" rel=""noreferrer"">https://github.com/WhisperSystems/libsignal-protocol-java/blob/master/java/src/main/java/org/whispersystems/libsignal/kdf/HKDF.java</a></li>
<li><a href=""https://www.javatips.net/api/keywhiz-master/hkdf/src/main/java/keywhiz/hkdf/Hkdf.java"" rel=""noreferrer"">https://www.javatips.net/api/keywhiz-master/hkdf/src/main/java/keywhiz/hkdf/Hkdf.java</a></li>
</ul>

<p>In both cases HKDF is implemented on top of the HMAC provided by JCA. I haven't read those implementations in detail yet but I was wondering, is this not implemented anywhere in JCA or itself? Do I have to implement my own HKDF?</p>

<p>The part that worries me the most, is making a mistake in applying the info argument. It looks non-trivial and critical.</p>
","<h2>HKDF Implementations in Java</h2>

<p>No, <a href=""https://eprint.iacr.org/2010/264.pdf"" rel=""noreferrer"">Hashed Message Authentication Code (HMAC)-based key derivation function (HKDF)</a> has, like most KDFs, no standard implementation in JCA.</p>

<p>There are some implementations embedded in other projects (like you already said):</p>

<ul>
<li><a href=""https://github.com/mozilla-services/sync-crypto/blob/master/src/main/java/org/mozilla/android/sync/crypto/HKDF.java"" rel=""noreferrer"">mozilla-services/sync-crypto</a></li>
<li><a href=""https://github.com/WhisperSystems/libsignal-protocol-java/blob/master/java/src/main/java/org/whispersystems/libsignal/kdf/HKDF.java"" rel=""noreferrer"">WhisperSystems/libsignal-protocol-java</a></li>
<li><a href=""https://github.com/square/keywhiz/blob/master/hkdf/src/main/java/keywhiz/hkdf/Hkdf.java"" rel=""noreferrer"">square/keywhiz</a></li>
</ul>

<p>Also there is, of course, <a href=""https://github.com/bcgit/bc-java/blob/master/core/src/main/java/org/bouncycastle/crypto/generators/HKDFBytesGenerator.java"" rel=""noreferrer"">Bouncy Castle</a> which use their own Hmac/Mac implementations and APIs. BC is however a massive dependency, and may be unpractical for e.g. embedded or mobile use case. For this I implemented a <strong>standalone</strong>, lightweight java lib (passing all of the RFC 5869 test vectors), which works with any <a href=""https://docs.oracle.com/javase/7/docs/api/javax/crypto/Mac.html"" rel=""noreferrer""><code>javax.crypto.Mac</code></a> instance:</p>

<ul>
<li><a href=""https://github.com/patrickfav/hkdf"" rel=""noreferrer"">https://github.com/patrickfav/hkdf</a></li>
</ul>

<p>If you prefer, you could, of course implement it on your own, it's a fairly straight forward spec, when using the built-in JCA Hmac implementation.</p>

<h2>Info Parameter in HKDF</h2>

<p>From the <a href=""https://tools.ietf.org/html/rfc5869#section-3.2"" rel=""noreferrer"">RFC 5869</a>:</p>

<blockquote>
  <p>While the 'info' value is optional in the definition of HKDF, it is<br>
  often of great importance in applications.  Its main objective is to<br>
  bind the derived key material to application- and context-specific<br>
  information. (...)  In particular, it may prevent the derivation
  of the same keying material for different contexts.</p>
</blockquote>

<p>So for example if you want to derive an Secret Key and IV from the same source material you would use the info parameter (<a href=""https://github.com/patrickfav/hkdf"" rel=""noreferrer"">using this lib</a>):</p>

<pre><code>//example input
String userInput = ""this is a user input with bad entropy"";

HKDF hkdf = HKDF.fromHmacSha256();

//extract the ""raw"" data to create output with concentrated entropy
byte[] pseudoRandomKey = hkdf.extract(staticSalt32Byte, userInput.getBytes(StandardCharsets.UTF_8));

//create expanded bytes for e.g. AES secret key and IV
byte[] expandedAesKey = hkdf.expand(pseudoRandomKey, ""aes-key"".getBytes(StandardCharsets.UTF_8), 16);
byte[] expandedIv = hkdf.expand(pseudoRandomKey, ""aes-iv"".getBytes(StandardCharsets.UTF_8), 16);

//Example boilerplate encrypting a simple string with created key/iv
SecretKey key = new SecretKeySpec(expandedAesKey, ""AES""); //AES-128 key
Cipher cipher = Cipher.getInstance(""AES/CBC/PKCS5Padding"");
cipher.init(Cipher.ENCRYPT_MODE, key, new IvParameterSpec(expandedIv));
byte[] encrypted = cipher.doFinal(""my secret message"".getBytes(StandardCharsets.UTF_8));
</code></pre>
","46619583","2009","<java><hmac><hkdf>","5","10","1","2018-11-20 09:29:58","","1","5","6068","","2017-08-31 17:13:20","2017-08-31 15:57:16","","2018-04-06 20:02:05","2017-10-07 11:22:57"
"11460608","Are there any known Java implementations for OAuth2 'mac' token type?","<p>I have looked into various OAuth2 java libraries (spring-security-oauth, cxf, scribe, google-oauth-java-client) and could not find anything out there that supports the Mac token type as described here:
<a href=""http://tools.ietf.org/html/draft-ietf-oauth-v2-http-mac-01"">http://tools.ietf.org/html/draft-ietf-oauth-v2-http-mac-01</a></p>

<p>All of them support the Bearer token type by default and nothing else. Is there any particular reason why this token type is not supported at all?</p>
","<p>I'm not an expert in this field, but I seem to be under the impression that <a href=""http://picketlink.org/"" rel=""nofollow"">PicketLink</a> supports both MAC and BEARER <a href=""https://github.com/picketlink/picketlink/blob/783ea51b00c4985c90a8440abbde0848ddeb3a84/modules/oauth/src/main/java/org/picketlink/oauth/messages/AccessTokenResponse.java#L37"" rel=""nofollow"">token types</a>.</p>

<p>I'm not really sure it is what you want. If you have any doubts, you can <a href=""http://picketlink.org/gethelp/"" rel=""nofollow"">contact them here</a>.</p>
","22400872","1993","<java><oauth-2.0><hmac>","6","0","2","2014-03-14 11:50:47","","0","1","","","","2012-07-12 21:01:40","","","2014-03-14 09:27:19"
"11460608","Are there any known Java implementations for OAuth2 'mac' token type?","<p>I have looked into various OAuth2 java libraries (spring-security-oauth, cxf, scribe, google-oauth-java-client) and could not find anything out there that supports the Mac token type as described here:
<a href=""http://tools.ietf.org/html/draft-ietf-oauth-v2-http-mac-01"">http://tools.ietf.org/html/draft-ietf-oauth-v2-http-mac-01</a></p>

<p>All of them support the Bearer token type by default and nothing else. Is there any particular reason why this token type is not supported at all?</p>
","<p>The reason behind most of the Java libraries for <code>OAuth 2.0</code> supports <code>Bearer</code> token types is that <code>Bearer</code> Token profile brings a simplified scheme for authentication. Any user which has a <code>bearer</code> token can use it to get access to the associated resources (without demonstrating possession of a cryptographic key). The OAuth 2.0 Authorization Framework: <code>Bearer</code> Token Usage specifications describes the use of <code>bearer</code> tokens in <code>HTTP</code> <code>requests</code> to access OAuth 2.0 protected resources.</p>

<p>Response for <code>Bearer</code> Access Token</p>

<pre><code>HTTP/1.1 200 OK
     Content-Type: application/json;charset=UTF-8
     Cache-Control: no-store
     Pragma: no-cache

     {
       ""access_token"":""mF_9.B5f-4.1JqM"",
       ""token_type"":""Bearer"",
       ""expires_in"":3600,
       ""refresh_token"":""tGzv3JOkF0XG5Qx2TlKWIA""
      }
</code></pre>

<p><code>MAC</code> Token Profile defines the <code>HTTP</code> <code>MAC</code> access authentication scheme, providing a method for making authenticated HTTP requests with partial cryptographic verification of the request, covering the HTTP method, request URI, and host. Each access token type definition specifies the additional attributes (<code>mac_key</code>, <code>mac_algorithm</code>) sent to the client together with the <code>access_token</code> response parameter.</p>

<pre><code>HTTP/1.1 200 OK
     Content-Type: application/json
     Cache-Control: no-store

     {
       ""access_token"":""SlAV32hkKG"",
       ""token_type"":""mac"",
       ""expires_in"":3600,
       ""refresh_token"":""8xLOxBtZp8"",
       ""mac_key"":""adijq39jdlaska9asud"",
       ""mac_algorithm"":""hmac-sha-256""
     }
</code></pre>

<p>The <code>access_token</code> or the <code>MAC</code> key identifier is a string identifying the <code>MAC</code> key used to calculate the request <code>MAC</code>. The string is usually opaque to the client. The server typically assigns a specific scope and lifetime to each set of <code>MAC</code> credentials. The identifier may denote a unique value used to retrieve the authorization information (e.g. from a database), or self-contain the authorization information in a verifiable manner (i.e. a string consisting of some data and a signature).</p>

<p><a href=""https://github.com/fernandezpablo85/scribe-java"" rel=""nofollow""><strong>Scribe</strong></a> is the library in Java for <code>OAuth 2.0</code> with <code>MAC</code> Token profile.</p>

<p>Source: <a href=""http://blog.facilelogin.com/2013/01/oauth-20-bearer-token-profile-vs-mac.html"" rel=""nofollow"">OAuth 2.0 Bearer Token Profile Vs MAC Token Profile</a></p>
","22404202","1993","<java><oauth-2.0><hmac>","6","2","2","2014-03-14 11:50:47","","0","1","","","","2012-07-12 21:01:40","","","2014-03-14 11:50:47"
"13589491","HMAC and WCF Service .net","<p>So I'm very new with HMAC authentication and I really don't know what I'm doing nor reading atm.</p>

<p>I've been trying to understand the following articles / links / discussions properly:</p>

<p><a href=""https://stackoverflow.com/questions/8363315/how-to-implement-hmac-authentication-in-a-restful-wcf-api"">How to implement HMAC Authentication in a RESTful WCF API</a></p>

<p><a href=""http://blogs.microsoft.co.il/blogs/itai/archive/2009/02/22/how-to-implement-hmac-authentication-on-a-restful-wcf-service.aspx"" rel=""nofollow noreferrer"">http://blogs.microsoft.co.il/blogs/itai/archive/2009/02/22/how-to-implement-hmac-authentication-on-a-restful-wcf-service.aspx</a></p>

<p><a href=""http://buchananweb.co.uk/security01.aspx"" rel=""nofollow noreferrer"">http://buchananweb.co.uk/security01.aspx</a></p>

<p>With that said I have a few questions:</p>

<ol>
<li><p>Understanding the first link, if for example I have a loginAuthentication service created in .net and will be accessed from an iPhone app do I pass an unencrypted username (message) for this and should return just a true / false or should it return an encrypted string in which I will be using later on for other transactions (Delete, Insert services, etc)? </p>

<pre><code>[ServiceContract]

public partial class LoginService
{

 [OperationContract]
 bool Authenticate(string username) {
   // stuffs
 }
</code></pre>

<p>}</p></li>
<li><p>With that said, after I verified the user, and this is where I get lost. Is it better that I save something in the database 'with a timestamp' (someone told me about this and I read some discussions about this too)? Or do I just return it with the encrypted message (dependent on the first question) so that everytime a request is made the timestamp is already attached?</p>

<p>a. And what do I do with that timestamp? </p>

<p>b. Is it going to be used once the message is sent again for another transaction?</p></li>
<li><p>Keys and secret message. The way I understood it is that the key will be the password of the user. So if the user sends his username I can open the message using the password of that user? This makes sense if the user already has a session and is just requesting to get data or requesting for a delete, insert, etc. Should it still be the same way if it's just authenticating the username and password of the user?</p></li>
</ol>

<p>Thank you for your time!</p>
","<p>The first thing I would like to mention is that the WCF Web Api was a beta project which is no longer being developed. It was replaced by ASP.NET Web API which is an awesome framework for developing RESTful services.</p>

<p>If you want to get a good idea how a RESTful service and authentication works the Netflix API would be a great place to start. They have a lot of documentation regarding the security portion and this helped me understand HMAC a lot more. </p>

<p>HMAC creates a hash using a secret key. The client and server both maintain a copy of the secret key so that they can generate matching hashes. This allows you to 'sign' a request which serves as both authentication (you know the person sending it is who they say they are), and message integrity (knowing the message they sent is the original message and has not been tampered with).</p>

<p>A signature is created by combining</p>

<pre><code>1. Timestamp (unix epoc is the easiest to send in urls)
2. Nonce (a random number that can never be used twice to protect against someone re-using it)
3. Message (for a GET request this would be the URL, a POST would be the whole body)
4. Signature (the three previous items combined and hashed using the secret key)
</code></pre>

<p>Each of the above can be sent in the query string of the request, then the server can use the first 3 and their copy of the secret key to recreate the signature. If the signatures match then all is good.</p>

<p>In a RESTful API that is over plain HTTP (not using HTTPS over an ssl), I would sign every request sent because again this authenticates and provides message integrity. Otherwise if you just send an authentication token you know the user is authenticated but how do you know the message was not tampered with if you do not have a Message Digest (the HMAC hash) to compare with? </p>

<p>An easy way to implement the server-side checking of the signature is to override OnAuthorization for System.Web.Http.AuthorizeAttribute (Make sure not to use Mvc autorize attribute). Have it rebuild the signature just as you did on the client side using their secret key, and if it does not match you can return a 401. Then you can decorate all controllers that require authentication with your new authorize attribute.</p>

<p>Hopefully this helps clear up some of your confusion and does not muddy the water even further. I can provide some more concrete examples later if you need.</p>

<p><strong>References:</strong></p>

<p><strong>Netflix Api Docs:</strong> <a href=""http://developer.netflix.com/docs/Security#0_18325"" rel=""nofollow"">http://developer.netflix.com/docs/Security#0_18325</a> (go down to the part about creating signatures, they also have a link which shows a full .NET example for creating the HMAC signature)</p>

<p><strong>.NET class for creating HMAC signatures</strong> <a href=""http://oauth.googlecode.com/svn/code/csharp/OAuthBase.cs"" rel=""nofollow"">http://oauth.googlecode.com/svn/code/csharp/OAuthBase.cs</a></p>

<p><strong>Netflix API Wrapper I wrote</strong>: <a href=""https://bitbucket.org/despertar1318/netflix-api/overview"" rel=""nofollow"">https://bitbucket.org/despertar1318/netflix-api/overview</a></p>

<p><strong>ASP.NET Web API</strong>: <a href=""http://www.asp.net/web-api"" rel=""nofollow"">http://www.asp.net/web-api</a></p>
","13632649","1989","<asp.net><wcf><wcf-data-services><wcf-security><hmac>","2","4","2","2012-11-30 19:43:20","13632649","0","1","-1","","2017-05-23 11:56:59","2012-11-27 17:15:12","","2012-11-30 19:43:20","2012-11-29 18:51:01"
"13589491","HMAC and WCF Service .net","<p>So I'm very new with HMAC authentication and I really don't know what I'm doing nor reading atm.</p>

<p>I've been trying to understand the following articles / links / discussions properly:</p>

<p><a href=""https://stackoverflow.com/questions/8363315/how-to-implement-hmac-authentication-in-a-restful-wcf-api"">How to implement HMAC Authentication in a RESTful WCF API</a></p>

<p><a href=""http://blogs.microsoft.co.il/blogs/itai/archive/2009/02/22/how-to-implement-hmac-authentication-on-a-restful-wcf-service.aspx"" rel=""nofollow noreferrer"">http://blogs.microsoft.co.il/blogs/itai/archive/2009/02/22/how-to-implement-hmac-authentication-on-a-restful-wcf-service.aspx</a></p>

<p><a href=""http://buchananweb.co.uk/security01.aspx"" rel=""nofollow noreferrer"">http://buchananweb.co.uk/security01.aspx</a></p>

<p>With that said I have a few questions:</p>

<ol>
<li><p>Understanding the first link, if for example I have a loginAuthentication service created in .net and will be accessed from an iPhone app do I pass an unencrypted username (message) for this and should return just a true / false or should it return an encrypted string in which I will be using later on for other transactions (Delete, Insert services, etc)? </p>

<pre><code>[ServiceContract]

public partial class LoginService
{

 [OperationContract]
 bool Authenticate(string username) {
   // stuffs
 }
</code></pre>

<p>}</p></li>
<li><p>With that said, after I verified the user, and this is where I get lost. Is it better that I save something in the database 'with a timestamp' (someone told me about this and I read some discussions about this too)? Or do I just return it with the encrypted message (dependent on the first question) so that everytime a request is made the timestamp is already attached?</p>

<p>a. And what do I do with that timestamp? </p>

<p>b. Is it going to be used once the message is sent again for another transaction?</p></li>
<li><p>Keys and secret message. The way I understood it is that the key will be the password of the user. So if the user sends his username I can open the message using the password of that user? This makes sense if the user already has a session and is just requesting to get data or requesting for a delete, insert, etc. Should it still be the same way if it's just authenticating the username and password of the user?</p></li>
</ol>

<p>Thank you for your time!</p>
","<p>Looking at your questions in turn</p>

<p><em>...do I pass an unencrypted username (message) for this and should return just a true / false or should it return an encrypted string in which I will be using later on for other transactions (Delete, Insert services, etc)?</em></p>

<p>If you just returned a boolean, you'd have no way to then match the authentication request to subsequent requests. You'll need to return some sort of authentication indicator, on a classic website this would be the session cookie, in your instance you want to pass a value that will act as shared key.</p>

<p><em>Is it better that I save something in the database 'with a timestamp'? Or do I just return it with the encrypted message so that everytime a request is made the timestamp is already attached?</em></p>

<p>Back to the session analogy, you want to store the key from question one somewhere (the database?) with a timestamp that indicates the life of the session/validity of the key. If it's forever then I wouldn't bother with the timestamp, if it's anything else you'll need something to say when it expires.</p>

<p><em>The way I understood it is that the key will be the password of the user. So if the user sends his username I can open the message using the password of that user? This makes sense if the user already has a session and is just requesting to get data or requesting for a delete, insert, etc. Should it still be the same way if it's just authenticating the username and password of the user?</em></p>

<p>This is where the HMACing happens. You have your shared secret, you have a message, this is how I usually combine it all together.</p>

<p>Use all of the message as the body of data to be hashed (that way you can be sure that someone's not just copied the hash and part of the message). Hash the body of the message using the key we shared in step one. You could salt this if wanted, I'd use the username.</p>

<p>Finally make sure the message contains a timestamp (UTC preferably), this way you can help prevent replaying the message later. The service that's responding to the message can compare the timestamp to what it thinks the time is. If it falls outside given bounds, fail the message. Because the timestamp will be part of the HMAC, someone can't just update the date and replay the message, the hashes won't match as soon as the message is tampered with.</p>
","13634012","1989","<asp.net><wcf><wcf-data-services><wcf-security><hmac>","2","0","2","2012-11-30 19:43:20","13632649","0","1","-1","","2017-05-23 11:56:59","2012-11-27 17:15:12","","","2012-11-29 20:19:29"
"50010017","Decode a base64 encoded HMAC-SHA256 hash with python","<p>I need help finding out how I can decode a base64 encoded HMAC-SHA256 hash with python.</p>

<p>From an API I'm given a base64 encoded HMAC-SHA256 hash of a secret key.</p>

<p>The message I get from the API is: ""Mw2aXjiDQABoNi5jB09ie8iTkET4t6JiQJSh+/jIceY=""</p>

<p>My secret is: ""testapp""</p>

<p>Using the answer from this post <a href=""https://stackoverflow.com/questions/1306550/calculating-a-sha-hash-with-a-string-secret-key-in-python"">Calculating a SHA hash with a string + secret key in python</a></p>

<pre><code>import hmac
import hashlib
import base64
dig = hmac.new(b'testapp', msg=b'Mw2aXjiDQABoNi5jB09ie8iTkET4t6JiQJSh+/jIceY=, digestmod=hashlib.sha256).digest()
base64.b64encode(dig).decode()
</code></pre>

<p>I get ""WTEb7ZIAPb89b0NV8NnI9+0x5alkng1LZ7Ffz39bveE=""</p>

<p>I expected a response equal to my message. What am I doing wrong here ?</p>

<p>Any help is appreciated.
Best regards
Kresten</p>
","","","1973","<python><base64><sha256><hmac>","1","","0","2018-04-24 20:09:28","","1","","","","","2018-04-24 20:09:28","","",""
"36815817","Java and Python generate different Hmac-SHA256 output","<p>I am trying to generate the same Hmac-SHA256 signature in Python as in my Java template. But the Python script generates not the same output. I can not find my mistake. Can anyone help me?</p>

<p>Java</p>

<pre><code>public class Main {
    public static void main(String[] args) {
        String paramString = ""teststring"";
        calculateSignature(hash(paramString));
    }

    private static byte[] hash(String paramString)
    {
        MessageDigest localMessageDigest = MessageDigest.getInstance(""SHA-256"");
        localMessageDigest.update(paramString.getBytes(""UTF-8""));
        byte[] paramByte = localMessageDigest.digest();
        System.out.println(""Hash: "" + DatatypeConverter.printBase64Binary(paramByte));
        return paramByte;
    }

    public static void calculateSignature(byte[] paramArrayOfByte)
    {
        String Algor = ""HmacSHA256"";
        Mac localMac = Mac.getInstance(Algor);
        byte [] key = ""secretkey"".getBytes();
        localMac.init(new SecretKeySpec(key, Algor));
        paramArrayOfByte = localMac.doFinal(paramArrayOfByte);
        System.out.println(""Signature: "" + DatatypeConverter.printBase64Binary(paramArrayOfByte));
    }
}
</code></pre>

<blockquote>
  <p>Hash: PIcn4BmkK0RGZ6WHtgASUb7K2ruza/7YCHqSwYiC0RE=</p>
  
  <p>Signature: X8V4RA7qaoVGz5K2l61gAXNPuLkAI7NZ9/9d7WnblbA=</p>
</blockquote>

<p>Python</p>

<pre><code># -*- coding: utf-8 -*-
import hashlib
import base64
import hmac

secretkey = 'secretkey'
stringToSign = ""teststring""

def hash(paramstring):
    x = base64.b64encode(hashlib.sha256(paramstring).digest())
    print('Hash: ' + x)
    return x

def calculate_signature(hashvalue):
    x = base64.b64encode(hmac.new(secretkey, hashvalue, hashlib.sha256).digest())
    print('Signature: ' + x)

calculate_signature(hash(stringToSign))
</code></pre>

<blockquote>
  <p>Hash: PIcn4BmkK0RGZ6WHtgASUb7K2ruza/7YCHqSwYiC0RE=</p>
  
  <p>Signature: NE8RtuFsOtafWrwDdlzILMgqCDm2huJ9A3IO6iy44Jc=</p>
</blockquote>
","<p>The problem is in python code you return base64 encoded but in java you just print it as base64 encoded but return without. </p>

<p>Try:</p>

<pre><code>private static byte[] hash(String paramString)
{
    MessageDigest localMessageDigest = MessageDigest.getInstance(""SHA-256"");
    localMessageDigest.update(paramString.getBytes(""UTF-8""));
    byte[] paramByte = localMessageDigest.digest();
    String base64Binary = DatatypeConverter.printBase64Binary(paramByte);
    System.out.println(""Hash: "" + base64Binary);
    return base64Binary.getBytes();
}
</code></pre>

<p>Or modify python code as:</p>

<pre><code>def hash(paramstring):
    x = hashlib.sha256(paramstring).digest()
    return x
</code></pre>
","36821298","1943","<java><python><hmac>","4","1","1","2016-04-24 10:13:07","36821298","0","4","2534685","","2016-04-24 06:43:31","2016-04-23 20:08:12","","2016-04-24 10:13:07","2016-04-24 09:20:59"
"15405460","Why my python and objective-c code get different hmac-sha1 result?","<p>I am writing a client/server project that need a signature. I use <code>base64(hmac-sha1(key, data))</code> to generate a signature. But I got different signatures between python code and objective-c code:</p>

<pre><code>get_signature('KEY', 'TEXT')   //python get 'dAOnR2oXWP9xa4vUBdDvVXTpzQo='
[self hmacsha1:@""KEY"" @""TEXT""] //obj-c  get '7FH0NG0Ou4nb5luKUyjfrdWunos='
</code></pre>

<p>Not only the base64 values are different, the hmac-sha1 digest values are different too.
I'm trying to work it out with my friend for a few hours, still don't get it. Where is the problem of my code?</p>

<p>My python code:</p>

<pre><code>import hmac
import hashlib
import base64
def get_signature(key, msg):
    return base64.b64encode(hmac.new(key, msg, hashlib.sha1).digest())
</code></pre>

<p>My friend's objective-c code (copy from <a href=""https://stackoverflow.com/questions/756492/objective-c-sample-code-for-hmac-sha1"">Objective-C sample code for HMAC-SHA1</a>):</p>

<pre><code>(NSString *)hmac_sha1:(NSString *)key text:(NSString *)text{

    const char *cKey  = [key cStringUsingEncoding:NSASCIIStringEncoding];
    const char *cData = [text cStringUsingEncoding:NSASCIIStringEncoding];

    unsigned char cHMAC[CC_SHA1_DIGEST_LENGTH];
    CCHmac(kCCHmacAlgSHA1, cKey, strlen(cKey), cData, strlen(cData), cHMAC);

    NSData *HMAC = [[NSData alloc] initWithBytes:cHMAC length:sizeof(cHMAC)];
    NSString *hash = [GTMBase64 stringByEncodingData:HMAC];
    return hash;
}
</code></pre>

<p>SOLVED: Thanks for everyone below. But I'm not gotta tell you that the real reason is I typed ""TE <strong>S</strong> T"" in my python IDE while typed ""TE <strong>X</strong> T"" in this post :P</p>

<p>For not wasting your time, I made some tests and got a nicer solution, base on your answers:</p>

<pre><code>print get_signature('KEY', 'TEXT')                        
# 7FH0NG0Ou4nb5luKUyjfrdWunos=

print get_signature(bytearray('KEY'), bytearray('TEXT'))  
# 7FH0NG0Ou4nb5luKUyjfrdWunos=

print get_signature('KEY', u'你好'.encode('utf-8'))  # best solution, i think!
# PxEm7Oibj7ijZ55ko7V3isSkD1Q=

print get_signature('KEY', bytearray(u'你好'))           
# TypeError: unicode argument without an encoding

print get_signature('KEY', u'你好')                      
# UnicodeEncodeError: 'ascii' codec can't encode characters in position 0-1: ordinal not in range(128)

print get_signature(u'KEY', 'TEXT')                      
# TypeError: character mapping must return integer, None or unicode

print get_signature(b'KEY', b'TEXT')                       
# 7FH0NG0Ou4nb5luKUyjfrdWunos=
</code></pre>

<p>Conclusion: </p>

<ol>
<li>The message to be signature should be encoded to utf-8 string with both sides.</li>
<li>(Thanks to <a href=""https://stackoverflow.com/users/1974792/djv"">DJV</a>)In python 3, strings are all unicode, so they should be used with 'b', or bytearray(thanks to <a href=""https://stackoverflow.com/users/790387/burhan-khalid"">Burhan Khalid</a>), or encoded to utf-8 string.</li>
</ol>
","<p>Your friend is completely right, but so are you (sorta). Your function is completely right in both Python 2 and Python 3. However, your call is a little erroneous in Python 3. You see, in Python 3, <a href=""http://docs.python.org/3.0/howto/unicode.html#the-string-type"" rel=""nofollow noreferrer"">strings</a> are unicode, so in order to pass an ASCII string (as your Objective C friend does and as you would do in Python 2), you need to call your function with:</p>

<pre><code>get_signature(b'KEY', b'TEXT')
</code></pre>

<p>in order to specify that those strings are <a href=""http://docs.python.org/3.0/library/functions.html#bytes"" rel=""nofollow noreferrer"">bytes</a> a.k.a. ASCII strings.</p>

<p><strong>EDIT:</strong> As <a href=""https://stackoverflow.com/users/790387/burhan-khalid"">Burhan Khalid</a> noted, the flexible way of doing this in Python 3 is to either call your function like this:</p>

<pre><code>get_signature(key.encode('ascii'), test.encode('ascii'))
</code></pre>

<p>or define it as:</p>

<pre><code>def get_signature(key, msg):
    if(isinstance(key, str)):
        key = key.encode('ascii')
    if(isinstance(msg, str)):
        msg = msg.encode('ascii')
    return base64.b64encode(hmac.new(key, msg, hashlib.sha1).digest())
</code></pre>
","15405849","1930","<python><objective-c><base64><sha1><hmac>","3","3","1","2013-03-14 11:26:45","15405849","3","","-1","","2017-05-23 12:22:37","2013-03-14 09:28:12","","2017-05-23 11:44:06","2013-03-14 09:48:34"
"4504876","PBKDF2-HMAC-SHA256 Objective-C implementation","<p>Can someone point me to an implementation of PBKDF2 using HMAC-SHA256 to generate a key, in Objective-C.  This is part of the key generation process that I will later use for AES-CBC-Pad encryption.</p>

<p>Thanks in advance</p>
","<p>You can just simply borrow C implementation from OpenSSL or any other library.</p>
","4571892","1910","<iphone><objective-c><hmac><sha256><pbkdf2>","4","4","1","2012-06-01 12:20:10","4571892","3","1","","","","2010-12-21 23:17:34","","","2010-12-31 19:16:01"
"12608649","HMAC authentication for REST","<p>I am looking to implment HMAC for my REST API based on </p>

<p><a href=""http://www.smartjava.org/content/protect-rest-service-using-hmac-play-20"" rel=""nofollow"">http://www.smartjava.org/content/protect-rest-service-using-hmac-play-20</a></p>

<p>The one thing I am still confused about is the how to get the SECRET to the client. The clients will be iphone, android and downloaded from the market </p>

<p>What I was thinking of was using something the user has entered as the SECRET like a pin, the server will have this pin via</p>

<p>1) client gets a public key from server
2) encrypts the pin with the public key
3) server stores pin in db
4) from that point forward the PIN in used as the SECRET </p>

<p>Any holes in this?</p>
","<p>This would in principle be fine. However, a pin usually is only 4 digits. It would not be difficult for an attacker to get the public key and encrypt all 9999 combinations. He could then compare his encrypted keys with the encrypted data from the client and find the secret. You can avoid this problem by padding the pin with i.e. 50 random characters. The server must decrypt the padded data and simply throw away the last 50 characters.</p>
","12609938","1902","<security><rest><hmac>","2","2","3","2012-10-09 14:06:53","12609938","2","1","","","","2012-09-26 19:03:44","","","2012-09-26 20:34:20"
"12608649","HMAC authentication for REST","<p>I am looking to implment HMAC for my REST API based on </p>

<p><a href=""http://www.smartjava.org/content/protect-rest-service-using-hmac-play-20"" rel=""nofollow"">http://www.smartjava.org/content/protect-rest-service-using-hmac-play-20</a></p>

<p>The one thing I am still confused about is the how to get the SECRET to the client. The clients will be iphone, android and downloaded from the market </p>

<p>What I was thinking of was using something the user has entered as the SECRET like a pin, the server will have this pin via</p>

<p>1) client gets a public key from server
2) encrypts the pin with the public key
3) server stores pin in db
4) from that point forward the PIN in used as the SECRET </p>

<p>Any holes in this?</p>
","<p>There is a hole. </p>

<p>At step 3, the PIN is stored in the database. The server has no way of knowing that the request to save the PIN comes from a legitimate user.</p>

<p>For this to work, you must save the PIN either :</p>

<ul>
<li>At account creation</li>
<li>When the old PIN is provided</li>
</ul>

<p>That being said, a PIN stays very weak and easy to break. A 4 digit pin will be guessed in about 5000 tries, on average.</p>
","12610474","1902","<security><rest><hmac>","2","1","3","2012-10-09 14:06:53","12609938","2","1","","","","2012-09-26 19:03:44","","","2012-09-26 21:12:02"
"12608649","HMAC authentication for REST","<p>I am looking to implment HMAC for my REST API based on </p>

<p><a href=""http://www.smartjava.org/content/protect-rest-service-using-hmac-play-20"" rel=""nofollow"">http://www.smartjava.org/content/protect-rest-service-using-hmac-play-20</a></p>

<p>The one thing I am still confused about is the how to get the SECRET to the client. The clients will be iphone, android and downloaded from the market </p>

<p>What I was thinking of was using something the user has entered as the SECRET like a pin, the server will have this pin via</p>

<p>1) client gets a public key from server
2) encrypts the pin with the public key
3) server stores pin in db
4) from that point forward the PIN in used as the SECRET </p>

<p>Any holes in this?</p>
","<p>I'm not a security expert, but what if the client sent along a random seed with each request?  Both the client and server would use this seed in generating a secret key based on a shared algorithm.  I'm not sure how attackable the relationship between a given seed and a returned hash would be, however.  </p>
","12801902","1902","<security><rest><hmac>","2","0","3","2012-10-09 14:06:53","12609938","2","1","","","","2012-09-26 19:03:44","","","2012-10-09 14:06:53"
"9985787","Delphi - Can't get HMAC-SHA256 to pass RFC 4231 test vectors","<p>I need to access Amazon REST services like a previous question at "" <a href=""https://stackoverflow.com/questions/2003194/hmac-sha256-in-delphi"">HMAC-SHA256 in Delphi</a> "" asked. Since this has to be in D2010 I'm trying to use the latest libeay32.dll to pass the test vectors in RFC 4231:</p>

<p><a href=""http://tools.ietf.org/html/rfc4231"" rel=""nofollow noreferrer"">http://tools.ietf.org/html/rfc4231</a> </p>

<p>Does anyone have a method that passes these tests in Delphi using this library? The code posted by shunty in the post I referred to passes the first two test vectors as well as the fifth, but it fails in the third and fourth. Those vectors are over 64 bytes and since all of the url's that I need to sign for Amazon are over 64 bytes this is a problem. I haven't been able to figure out if I'm doing something wrong. The OpenSSL test is in hmactest.c, but it only checks EVP_md5 and the test vectors aren't all the same as in the RFC. I need this to work with SHA256 so I can verify against the test vectors in the RFC. I'm using the following constants for the tests (constants now updated for future viewers to fix my copy and paste errors mentioned in the comments below):</p>

<pre><code>const
  LIBEAY_DLL_NAME = 'libeay32.dll';
  EVP_MAX_MD_SIZE = 64;

  //RFC 4231 Test case 1
  TEST1_KEY: string = '0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b';
  TEST1_DATA: string = '4869205468657265';
  TEST1_DIGEST: string = 'b0344c61d8db38535ca8afceaf0bf12b881dc200c9833da726e9376c2e32cff7';

  //RFC 4231 Test case 2
  TEST2_KEY = '4a656665';
  TEST2_DATA = '7768617420646f2079612077616e7420666f72206e6f7468696e673f';
  TEST2_DIGEST = '5bdcc146bf60754e6a042426089575c75a003f089d2739839dec58b964ec3843';

  //RFC 4231 Test case 3
  TEST3_KEY = 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa';
  TEST3_DATA = 'dddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd';
  TEST3_DIGEST = '773ea91e36800e46854db8ebd09181a72959098b3ef8c122d9635514ced565fe';

  //RFC 4231 Test case 4
  TEST4_KEY = '0102030405060708090a0b0c0d0e0f10111213141516171819';
  TEST4_DATA = 'cdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcd';
  TEST4_DIGEST = '82558a389a443c0ea4cc819899f2083a85f0faa3e578f8077a2e3ff46729665b';

  //RFC 4231 Test case 5
  TEST5_KEY = '0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c0c';
  TEST5_DATA = '546573742057697468205472756e636174696f6e';
  TEST5_DIGEST = 'a3b6167473100ee06e0c796c2955552b';
</code></pre>

<p>I don't know how this code by shunty will look pasted in because it looks terrible here (I'm a stackoverflow novice). I used RAND_seed rather than RAND_load_file like he did, but otherwise it's the same:</p>

<pre><code>function TForm1.GetHMAC(const AKey, AData: string): TBytes;
var
  key, data: TBytes;
  md_len: integer;
  res: PByte;
  buf: PInteger;
  rand_val: Integer;
begin
  OpenSSL_add_all_algorithms;

  Randomize;
  rand_val := Random(100);
  GetMem(buf, rand_val);
  try
    RAND_seed(buf, rand_val);

    key := TEncoding.UTF8.GetBytes(AKey);
    data := TEncoding.UTF8.GetBytes(AData);
    md_len := EVP_MAX_MD_SIZE;
    SetLength(Result, md_len);
    res := HMAC(EVP_sha256, @key[0], Length(key), @data[0], Length(data), @result[0], md_len);
    if (res &lt;&gt; nil) then
      SetLength(Result, md_len);

  finally
    FreeMem(buf);
  end;
end;
</code></pre>

<p>The code I use to test looks like this. This particular method is for test 3 which fails. The result is bb861233f283aef2ef7aea09785245c9f3c62720c9d04e0c232789f27a586e44, but it should be equal to the constant hex value for TEST3_DIGEST:</p>

<pre><code>procedure TForm1.btnTestCase3Click(Sender: TObject);
var
  LBytesDigest: TBytes;
  LHashString: string;
  LHexDigest: string;
begin
  LBytesDigest := GetHMAC(HexToStr(TEST3_KEY), HexToStr(TEST3_DATA));

  LHexDigest := LowerCase(BytesToHex(LBytesDigest));

  if LHexDigest = TEST3_DIGEST then begin
    Memo1.Lines.Add('SUCCESS: Matches test case');
    Memo1.Lines.Add(LHexDigest);
  end else begin
    Memo1.Lines.Add('ERROR: Does not match test case');
    Memo1.Lines.Add('Result:    ' + LHexDigest);
    Memo1.Lines.Add('Test Case: ' + TEST3_DIGEST);
  end;
end;
</code></pre>

<p>Any ideas? I'm about to give up and just create a .NET app using the library they provide...</p>
","<p>You are using D2009+ (as evident by your use of <code>TEncoding</code>), which mean you are dealing with <code>UnicodeString</code>, but you are not taking Unicode into account in your logic.  The RFC does not operate on characters, it operates on bytes.  Your test data contains hex-encoded strings.  When you decode them into <code>(Unicode)String</code> values, many of the resulting characters are outside of the ASCII range of characters, which means they have to be interpretted by Ansi codepages before you can convert them to UTF-8 correctly (which you should not be using in this situation anyway).</p>

<p>You need to change your implementation to decode your hex strings straight to <code>TBytes</code> instead (you can use <code>Classes.HexToBin()</code> for that) so the correct byte values are preserved and passed to HMAC, and get rid of <code>TEncoding.UTF8.GetBytes()</code> completely:</p>

<pre><code>function TForm1.GetHMAC(const AKey, AData: TBytes): TBytes; 
var 
  md_len: integer; 
  res: PByte; 
  buf: PInteger; 
  rand_val: Integer; 
begin 
  OpenSSL_add_all_algorithms; 

  Randomize; 
  rand_val := Random(100); 
  GetMem(buf, rand_val); 
  try 
    RAND_seed(buf, rand_val); 
    md_len := EVP_MAX_MD_SIZE; 
    SetLength(Result, md_len); 
    res := HMAC(EVP_sha256, Pointer(AKey), Length(AKey), Pointer(AData), Length(AData), @Result[0], md_len); 
    if (res &lt;&gt; nil) then 
      SetLength(Result, md_len); 
  finally 
    FreeMem(buf); 
  end; 
end; 

function HexToBytes(const S: String): TBytes;
begin
  SetLength(Result, Length(S) div 2);
  SetLength(Result, HexToBin(PChar(S), Pointer(Result), Length(Result)));
en;

procedure TForm1.btnTestCase3Click(Sender: TObject);  
var  
  LBytesDigest: TBytes;  
  LHashString: string;  
  LHexDigest: string;  
begin  
  LBytesDigest := GetHMAC(HexToBytes(TEST3_KEY), HexToBytes(TEST3_DATA));  
  LHexDigest := LowerCase(BytesToHex(LBytesDigest));  
  if LHexDigest = TEST3_DIGEST then begin  
    Memo1.Lines.Add('SUCCESS: Matches test case');  
    Memo1.Lines.Add(LHexDigest);  
  end else begin  
    Memo1.Lines.Add('ERROR: Does not match test case');  
    Memo1.Lines.Add('Result:    ' + LHexDigest);  
    Memo1.Lines.Add('Test Case: ' + TEST3_DIGEST);  
  end;  
end;  
</code></pre>
","9986217","1874","<delphi><hmac><amazon-mws>","5","6","1","2012-04-03 15:55:26","9986217","0","","-1","","2017-05-23 12:20:15","2012-04-03 00:53:29","","","2012-04-03 02:06:39"
"23657804","HMAC md5 encryption/decryption in PHP","<p>I have the php code for making HMAC md5 encryption</p>

<pre><code>$input = 'foo';
$output = hash_hmac('md5', $input, $secretKey);
</code></pre>

<p>After making the hash,is there anyway I could get the $input back to text form.</p>
","<p>The difference between encryption (which MD5 is <strong>not</strong>) and hashing is that hashing is unidirectional. The answer is no.</p>
","23657871","1867","<php><encryption><hash><hmac>","0","1","1","2014-05-14 14:41:34","","0","","","","","2014-05-14 14:38:22","2014-05-14 14:43:21","","2014-05-14 14:41:34"
"27439086","Send a message to Azure Service Bus Queue or Topic using the REST API","<p>I'm building a Windows Phone app and cannot ouse the Microsoft.ServiceBus.Messaging.QueueClient class. </p>

<p>I then try to use the Azure Service Bus REST API to do a Send, but that requires that I build a SAS token. But to build the SAS token I need to use Windows.Security.Cryptography.Core.MacAlgorithmNames.HmacSha256. This class is shown in type-ahead but when compiling it does not exist.</p>

<p>How can I post a message to a Service Bus Queue or Topic using the Send REST API?</p>
","<p>I'll include the complete code that send a message to the Service Bus using the REST API, including creating the SAS token and HmacSha256 hash.</p>

<p>You need to update the sample with your unique Service Bus namespace and keys, and you will probably want to store it somewhere better than in the method...</p>

<p>How to create a SAS token is documented in <a href=""http://msdn.microsoft.com/library/azure/dn170477.aspx"" rel=""nofollow noreferrer"">http://msdn.microsoft.com/library/azure/dn170477.aspx</a> and <a href=""https://code.msdn.microsoft.com/windowsazure/Service-Bus-HTTP-Token-38f2cfc5"" rel=""nofollow noreferrer"">https://code.msdn.microsoft.com/windowsazure/Service-Bus-HTTP-Token-38f2cfc5</a>.</p>

<p>I took the implementation of HmacSha256 from <a href=""https://stackoverflow.com/questions/24792142/hmacsha256-on-windows-phone-8-1"">HMACSHA256 on Windows Phone 8.1?</a></p>

<pre><code>private static void SendSBMessage(string message)
{
    try
    {
        string baseUri = ""https://&lt;your-namespace&gt;.servicebus.windows.net"";
        using (System.Net.Http.HttpClient client = new System.Net.Http.HttpClient())
        {
            client.BaseAddress = new Uri(baseUri);
            client.DefaultRequestHeaders.Accept.Clear();

            string token = SASTokenHelper();
            client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(""SharedAccessSignature"", token);

            string json = JsonConvert.SerializeObject(message);
            HttpContent content = new StringContent(json, Encoding.UTF8);
            content.Headers.ContentType = new MediaTypeHeaderValue(""application/json"");

            string path = ""/&lt;queue-or-topic-name&gt;/messages""; 

            var response = client.PostAsync(path, content).Result;
            if (response.IsSuccessStatusCode)
            {
                // Do something
            }
            else
            {
                // Do something else
            }
        }
    }
    catch(Exception ex)
    {
        // Handle issue
    }
}

private static string SASTokenHelper()
{
    string keyName = ""RootManageSharedAccessKey"";
    string key = ""&lt;your-secret-key&gt;"";
    string uri = ""&lt;your-namespace&gt;.servicebus.windows.net"";

    int expiry = (int)DateTime.UtcNow.AddMinutes(20).Subtract(new DateTime(1970, 1, 1)).TotalSeconds;
    string stringToSign = WebUtility.UrlEncode(uri) + ""\n"" + expiry.ToString();
    string signature = HmacSha256(key, stringToSign);
    string token = String.Format(""sr={0}&amp;sig={1}&amp;se={2}&amp;skn={3}"", WebUtility.UrlEncode(uri), WebUtility.UrlEncode(signature), expiry, keyName);

    return token;
}

// Because Windows.Security.Cryptography.Core.MacAlgorithmNames.HmacSha256 doesn't
// exist in WP8.1 context we need to do another implementation
public static string HmacSha256(string key, string value)
{
    var keyStrm = CryptographicBuffer.ConvertStringToBinary(key, BinaryStringEncoding.Utf8);
    var valueStrm = CryptographicBuffer.ConvertStringToBinary(value, BinaryStringEncoding.Utf8);

    var objMacProv = MacAlgorithmProvider.OpenAlgorithm(MacAlgorithmNames.HmacSha256);
    var hash = objMacProv.CreateHash(keyStrm);
    hash.Append(valueStrm);

    return CryptographicBuffer.EncodeToBase64String(hash.GetValueAndReset());
}
</code></pre>
","27439087","1866","<azure><windows-phone-8><hmac><azureservicebus><azure-servicebus-queues>","2","2","1","2014-12-12 07:49:10","","0","1","","","","2014-12-12 07:49:10","","2017-05-23 11:58:09","2014-12-12 07:49:10"
"46286341","Base64 and HMAC SHA-256 encoding/decoding in Java","<p>I am trying to get my GDAX balance, but I think I can't handle the encoding/decoding properly in Java.
The API reference is here: <a href=""https://docs.gdax.com/#authentication"" rel=""nofollow noreferrer"">https://docs.gdax.com/#authentication</a>, and the part I'm trying to do is under Accounts -> List Accounts (only have to scroll down a little bit from the above link) to just get the balance.</p>

<p>Here is the code that I have. I can't seem to get it working despite how much searching I've done on Google and here. I keep getting a 400 error from the server, meaning ""Bad Request – Invalid request format"".</p>

<pre><code>    // Decode the secret key
    byte[] decodedSecret;
    try
    {
        decodedSecret = Base64.decode(SECRET_KEY);
    }
    catch (Base64DecodingException ex)
    {
        System.out.println(""Failed to decode secret key."");
        return null;
    }

    // Make the header parameters
    long timestamp = (new GregorianCalendar()).getTimeInMillis() / 1000;
    String preSign = """" + timestamp + ""GET"" + BASE_URL + ""/accounts"";

    byte[] encodedhash;
    try
    {
        Mac sha256_HMAC = Mac.getInstance(""HmacSHA256"");
        try
        {
            sha256_HMAC.init(new SecretKeySpec(decodedSecret, ""HmacSHA256""));
        }
        catch (InvalidKeyException ex)
        {
            System.out.println(""Failed due to invalid key exception."");
            System.out.println(ex.getMessage());
            return null;
        }
        encodedhash = sha256_HMAC.doFinal(preSign.getBytes());
    }
    catch (NoSuchAlgorithmException ex)
    {
        System.out.println(""Failed to make SHA-256 encode because of no such algorithm."");
        return null;
    }

    HashMap&lt;String, String&gt; parameters = new HashMap&lt;&gt;();
    parameters.put(""CB-ACCESS-KEY"", API_KEY);
    parameters.put(""CB-ACCESS-SIGN"", Base64.encode(encodedhash));
    parameters.put(""CB-ACCESS-TIMESTAMP"", """" + timestamp);
    parameters.put(""CB-ACCESS-PASSPHRASE"", PASSPHRASE);

    // Send the request
    String response = sendGet(BASE_URL + ""/accounts"", parameters);
</code></pre>

<p>Here is the code I have inside sendGet() as well, in case that is where the problem is. I know it works without parameters, but I don't know if it uses the parameters properly or not since I can't get it to work.</p>

<pre><code>    // Set up the connection
    URL url = null;
    try
    {
        url = new URL(urlStr);
    }
    catch (MalformedURLException ex)
    {
        return null;
    }
    HttpURLConnection con;
    try
    {
        con = (HttpURLConnection) url.openConnection();
    }
    catch (IOException ex)
    {
        System.out.println(""Returning null because of failure to open connection."");
        return null;
    }
    try
    {
        con.setRequestMethod(""GET"");
    }
    catch (ProtocolException ex) {}
    if (parameters != null) // if there are parameters to add to the connection
    {
        for (Map.Entry&lt;String, String&gt; pair : parameters.entrySet()) // for each pair in parameters
        {
            try
            {
                con.addRequestProperty(pair.getKey(), pair.getValue());
            }
            catch (Exception ex)
            {
                System.out.println(""Failed to add "" + pair.getKey() + ""."");
            }
        }
    }

    // Get the response
    int responseCode;
    try
    {
        responseCode = con.getResponseCode();

        BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream()));
        StringBuilder responseBldr = new StringBuilder();
        String line;
        while ((line = in.readLine()) != null) // while we have read another line
        {
            responseBldr.append(line);
        }
        in.close();
        return responseBldr.toString();
    }
    catch (IOException ex)
    {
        System.out.println(""Returning null from network IOException."");
        System.out.println(ex.getMessage());
        return null;
    }
</code></pre>
","<p>I got this working locally. Looks like you're double encoding your signature. </p>

<p>the steps for creating a signature are:</p>

<ol>
<li>create the initial string that forms the basis of the signature</li>
<li>decode your secret to get a KeySpec (new SecretKeySpec())</li>
<li>init your HMAC with the keyspec (sha256Hmac.init())</li>
<li>use the secret to encode the request signature (sha256Hmac.doFinal())</li>
<li>base64 encode the result of step 4.</li>
</ol>

<p>The only error you've made in the above snippet is to then base64 encode it again in your headers.</p>

<p>HTH</p>
","48808266","1859","<java><base64><sha256><hmac>","0","0","1","2018-02-15 13:19:27","","7","3","","","","2017-09-18 18:55:41","","","2018-02-15 13:19:27"
"48181364","Openssl | dgst -sha256 -hmac different signatures than online and in java","<p>I have been trying to figure out why the command in bash is generating a different signature than online converters as well as my java code.</p>

<p>Online and in Java it a value=""value"" and a key=""key"" generates the following sha256 signature in hex: 
90fbfcf15e74a36b89dbdb2a721d9aecffdfdddc5c83e27f7592594f71932481</p>

<p><a href=""https://i.stack.imgur.com/oIxuJ.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/oIxuJ.png"" alt=""enter image description here""></a></p>

<p>OR </p>

<p><a href=""https://i.stack.imgur.com/AljxT.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/AljxT.png"" alt=""enter image description here""></a>
This is across the board from online tools to my java code.</p>

<p>Yet in bash it produces the following output:</p>

<p><a href=""https://i.stack.imgur.com/8sqVN.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/8sqVN.png"" alt=""enter image description here""></a></p>

<p>Does anyone know what would cause this difference? And which one is incorrect or is it printing in a different format?</p>

<p><a href=""https://www.freeformatter.com/hmac-generator.html"" rel=""nofollow noreferrer"">Online Converter 1</a> OR <a href=""https://hash.online-convert.com/sha256-generator"" rel=""nofollow noreferrer"">Online Converter 2</a></p>
","","","1833","<bash><openssl><sha256><hmac>","3","","0","2018-12-27 22:13:00","","5","","29157","","2018-12-27 22:13:00","2018-01-10 06:18:37","","",""
"17234435","How can I replicate this C# hashing in PHP? (toByteArray(), ComputeHash())","<p>I am trying to replicate the following code in <code>PHP</code>, It is example code for an API I have to interface with (The API &amp; Example code is in <code>C#</code>, My app is in <code>PHP 5.3</code>). I'm not a C# developer and so am having trouble doing this.</p>

<pre><code>// C# Code I am trying to replicate in PHP
var apiTokenId = 1887;
var apiToken = ""E1024763-1234-5678-91E0-T32E4E7EB316"";

// Used to authenticate our request by the API (which is in C#)
var stringToSign = string.Empty;
stringToSign += ""POST""+""UserAgent""+""http://api.com/post"";

// Here is the issue, How can I do the following 3 lines in PHP?
// No ""secret key"" provided?.. How do I do this in PHP?
var hmacsha1 = new HMACSHA1(new Guid(apiToken).toByteArray());

// Make a byte array with ASCII encoding.
byte[] byteArray = System.Text.Encoding.ASCII.GetBytes(stringToSign);

// Finally, 'computeHash' of the above (what does this do exactly?!)
var calculatedSignature = Convert.ToBase64String(hmacsha1.ComputeHash(byteArray));
</code></pre>

<p>I've tried many variations using <a href=""http://php.net/manual/en/function.pack.php"" rel=""nofollow noreferrer""><code>pack()</code></a> and other functions I've found online, but without anything to compare it to, I don't know if i've done it right or not.  </p>

<p>Can any C# devs run the above code and post the values generated so I can use that to check/test against?</p>

<p>I've tried checking the <a href=""http://msdn.microsoft.com/en-us/library/system.security.cryptography.hashalgorithm.computehash%28v=vs.71%29.aspx"" rel=""nofollow noreferrer"">MSDN</a> to see what these methods do, but am stuck (and not sure if its correct, as I have nothing to compare it to). </p>

<h3>PHP Pseudo Code</h3>

<pre><code>// Set vars
$apiToken = 'E1024763-1234-5678-91E0-T32E4E7EB316';
$apiTokenId = '1887';
$stringToSign = ""POST"".""UserAgent"".""http://api.com/post"";

// HowTo: Build a `byteArray` of our apiToken? (i think)
// C#: var hmacsha1 = new HMACSHA1(new Guid(apiToken).toByteArray());

// HowTo: Convert our $stringToSign to a ASCII encoded `byteArray`?
// C#: byte[] byteArray = System.Text.Encoding.ASCII.GetBytes(stringToSign);

// HowTo: Generate a base64 string of our (`hmacsha1`.ComputeHash(byteArray))
// C#: var calculatedSignature = Convert.ToBase64String(hmacsha1.ComputeHash(byteArray));
</code></pre>

<p>This sounds pretty simple and straightforwaard, but I'm not sure what a few of these C# methods do..</p>

<h3>What do these <code>C#</code> methods do/return?</h3>

<ul>
<li><code>ComputeHash(byteArray)</code> - Computed to what?.. what is returned?</li>
<li><code>System.Text.Encoding.ASCII.GetBytes(stringToSign);</code> - What does this return?</li>
<li><code>new HMACSHA1(new Guid(apiToken).toByteArray());</code> No Secret Key?, what is the key used?</li>
</ul>

<p>Any resources or help would be much appreciated.
I tried variations of <a href=""https://stackoverflow.com/questions/13064942/net-c-sharp-to-php-pb-with-byte-array-computehash"">other</a> answers on SO, but no joy.</p>

<p>Can I run the 3 lines of code somewhere online (like <code>JSFiddle</code> but for <code>C#</code>?) so I can see the output of each line?</p>

<p><hr/></p>

<h2>Update - Bounty Added</h2>

<p>Still having trouble with this, I have managed to test the <code>C#</code> code in Visual Studio, but am having trouble getting the same hash generated in <code>PHP</code>.</p>

<h3>I would like...</h3>

<p>.. the above <code>C#</code> code (specifically, the 3 lines which create the <code>SHA1</code> hash) to be converted into PHP (Check out the <code>Pseudo Code</code> I posted above). I should be able to match the <code>C#</code> hash using PHP.</p>

<p>If you have any other questions, please ask.</p>
","<p>It's pretty easy, when i don't have to test the code :P</p>

<p><a href=""http://php.net/manual/en/function.hash-hmac.php"" rel=""nofollow"">http://php.net/manual/en/function.hash-hmac.php</a> - that's the equivalent of the HMACSHA1 c# class.</p>

<p>string hash_hmac (string $algo , string $data , string $key [, bool $raw_output = false ] )</p>

<p>So $algo = ""sha1""</p>

<p>$data is your $stringToSign - since that is already an ascii string (i hope) - the C# was just taking the byte equivalent of the same.</p>

<p>new Guid(apiToken).toByteArray() -> that's a 16 byte (16*8 = 128) representation of the GUID - which is 32*4 = 128 bits. This is the key. </p>

<p>$key is a string so you need the ASCII string equivalent for your $apiToken (which is 32 hex chars - first strip / ignore the dashes in between) - E10247631234567891E0T32E4E7EB316 (correct the key - it cannot have a ""T"")</p>

<pre><code>function hex2str($hex) {
    for($i=0;$i&lt;strlen($hex);$i+=2) $str .= chr(hexdec(substr($hex,$i,2)));
    return $str;
}

$hexKey = hex2str($apiToken); //strip the dashes first
</code></pre>

<p><a href=""http://www.linux-support.com/cms/php-convert-hex-strings-to-ascii-strings/"" rel=""nofollow"">http://www.linux-support.com/cms/php-convert-hex-strings-to-ascii-strings/</a></p>

<p>So the method call now works : </p>

<pre><code>$almostResult = hash_hmac (""sha1"" , $stringToSign, $hexKey, true)
</code></pre>

<p>This returns a binary string - which you need to convert to base64 encoding.</p>

<pre><code>$final = base64_encode ($almostResult)
</code></pre>

<p>That should do it...enjoy :)</p>
","17306204","1814","<c#><php><sha1><hmac>","5","0","2","2013-11-03 15:21:28","17307077","4","1","-1","","2017-05-23 12:22:36","2013-06-21 11:44:44","","2013-06-25 19:56:16","2013-06-25 19:48:06"
"17234435","How can I replicate this C# hashing in PHP? (toByteArray(), ComputeHash())","<p>I am trying to replicate the following code in <code>PHP</code>, It is example code for an API I have to interface with (The API &amp; Example code is in <code>C#</code>, My app is in <code>PHP 5.3</code>). I'm not a C# developer and so am having trouble doing this.</p>

<pre><code>// C# Code I am trying to replicate in PHP
var apiTokenId = 1887;
var apiToken = ""E1024763-1234-5678-91E0-T32E4E7EB316"";

// Used to authenticate our request by the API (which is in C#)
var stringToSign = string.Empty;
stringToSign += ""POST""+""UserAgent""+""http://api.com/post"";

// Here is the issue, How can I do the following 3 lines in PHP?
// No ""secret key"" provided?.. How do I do this in PHP?
var hmacsha1 = new HMACSHA1(new Guid(apiToken).toByteArray());

// Make a byte array with ASCII encoding.
byte[] byteArray = System.Text.Encoding.ASCII.GetBytes(stringToSign);

// Finally, 'computeHash' of the above (what does this do exactly?!)
var calculatedSignature = Convert.ToBase64String(hmacsha1.ComputeHash(byteArray));
</code></pre>

<p>I've tried many variations using <a href=""http://php.net/manual/en/function.pack.php"" rel=""nofollow noreferrer""><code>pack()</code></a> and other functions I've found online, but without anything to compare it to, I don't know if i've done it right or not.  </p>

<p>Can any C# devs run the above code and post the values generated so I can use that to check/test against?</p>

<p>I've tried checking the <a href=""http://msdn.microsoft.com/en-us/library/system.security.cryptography.hashalgorithm.computehash%28v=vs.71%29.aspx"" rel=""nofollow noreferrer"">MSDN</a> to see what these methods do, but am stuck (and not sure if its correct, as I have nothing to compare it to). </p>

<h3>PHP Pseudo Code</h3>

<pre><code>// Set vars
$apiToken = 'E1024763-1234-5678-91E0-T32E4E7EB316';
$apiTokenId = '1887';
$stringToSign = ""POST"".""UserAgent"".""http://api.com/post"";

// HowTo: Build a `byteArray` of our apiToken? (i think)
// C#: var hmacsha1 = new HMACSHA1(new Guid(apiToken).toByteArray());

// HowTo: Convert our $stringToSign to a ASCII encoded `byteArray`?
// C#: byte[] byteArray = System.Text.Encoding.ASCII.GetBytes(stringToSign);

// HowTo: Generate a base64 string of our (`hmacsha1`.ComputeHash(byteArray))
// C#: var calculatedSignature = Convert.ToBase64String(hmacsha1.ComputeHash(byteArray));
</code></pre>

<p>This sounds pretty simple and straightforwaard, but I'm not sure what a few of these C# methods do..</p>

<h3>What do these <code>C#</code> methods do/return?</h3>

<ul>
<li><code>ComputeHash(byteArray)</code> - Computed to what?.. what is returned?</li>
<li><code>System.Text.Encoding.ASCII.GetBytes(stringToSign);</code> - What does this return?</li>
<li><code>new HMACSHA1(new Guid(apiToken).toByteArray());</code> No Secret Key?, what is the key used?</li>
</ul>

<p>Any resources or help would be much appreciated.
I tried variations of <a href=""https://stackoverflow.com/questions/13064942/net-c-sharp-to-php-pb-with-byte-array-computehash"">other</a> answers on SO, but no joy.</p>

<p>Can I run the 3 lines of code somewhere online (like <code>JSFiddle</code> but for <code>C#</code>?) so I can see the output of each line?</p>

<p><hr/></p>

<h2>Update - Bounty Added</h2>

<p>Still having trouble with this, I have managed to test the <code>C#</code> code in Visual Studio, but am having trouble getting the same hash generated in <code>PHP</code>.</p>

<h3>I would like...</h3>

<p>.. the above <code>C#</code> code (specifically, the 3 lines which create the <code>SHA1</code> hash) to be converted into PHP (Check out the <code>Pseudo Code</code> I posted above). I should be able to match the <code>C#</code> hash using PHP.</p>

<p>If you have any other questions, please ask.</p>
","<p>The issue is that the string form of the GUID reverses the order of the 2-character hexadecimal numbers in the first 3 segments of the GUID. For more information see the comments in the example at: <a href=""http://msdn.microsoft.com/en-us/library/system.guid.tobytearray.aspx"" rel=""nofollow"">http://msdn.microsoft.com/en-us/library/system.guid.tobytearray.aspx</a></p>

<p>The following code should work:</p>

<pre><code>$apiTokenId = 1887;
$apiToken = ""E1024763-1234-5678-91E0-FF2E4E7EB316"";
$stringToSign = '';
$hexStr = str_replace('-','',$apiToken);
$c = explode('-',chunk_split($hexStr,2,'-'));
$hexArr = array($c[3],$c[2],$c[1],$c[0],$c[5],$c[4],$c[7],$c[6],$c[8],$c[9],$c[10],$c[11],$c[12],$c[13],$c[14],$c[15]);
$keyStr = '';
for ($i = 0; $i &lt; 16; ++$i) {
    $num = hexdec($hexArr[$i]);
    $keyStr .= chr($num);
}
$stringToSign .= ""POST"" . ""UserAgent"" . ""http://api.com/post"";
$hmacsha1 = base64_encode(hash_hmac('sha1',$stringToSign,$keyStr,true));
</code></pre>

<p>I've tested this code against the C# code you provided above and the output was the same. However, the GUID specified in the original code is not valid so I had to change it slightly.</p>
","17307077","1814","<c#><php><sha1><hmac>","5","3","2","2013-11-03 15:21:28","17307077","4","1","-1","","2017-05-23 12:22:36","2013-06-21 11:44:44","","","2013-06-25 20:38:25"
"48843112","How to compare HMAC SHA256 signatures from request body in NodeJS","<p>I am trying to use Dropbox's API, and I got it to successfully send me alerts via webhooks, but now I want to verify the signatures every time they send me an alert.</p>

<p>From dropbox's documentation, they write:</p>

<p><em>""Every notification request will include a header called X-Dropbox-Signature that includes an HMAC-SHA256 signature of the request body, using your app secret as the signing key. This lets your app verify that the notification really came from Dropbox.""</em></p>

<p>So I successfully catch that signature, and I use NodeJS built in crypto module to try to create my own signature with HMAC SHA256 and then compare my signature against the signature Dropbox sends me.</p>

<p>Here is my code for doing so:</p>

<pre><code>  var sign = req.get(""X-Dropbox-Signature"");
  console.log(sign);
  var hmac = crypto.createHmac(algorithm, secret);
  hmac.update(JSON.stringify(req.body));
  hash = hmac.digest('hex');
  console.log(hash);
</code></pre>

<p>Where algorithm is just 'sha256'
and secret is my secret key that I got from my dropbox apps page.
I have to use JSON.stringify(req.body) because req.body is an object and hmac.update takes a string. I am wondering if that is where my error comes from?</p>

<p>I console log the sign which is the signature from dropbox, and then I console log the signature which I created using hmac, but it is a different signature.</p>

<p>Any suggestions to what I may be doing wrong?</p>
","<p>Greg is right. You need to use the raw body request to check the ingredients of the message. The following code employs the body-parser library to extract the raw body.</p>

<pre><code>var bodyParser = require(""body-parser"");

app.use(bodyParser.json({verify:function(req,res,buf){req.rawBody=buf}}))
</code></pre>

<p>Then for the post method:</p>

<pre><code>app.post('/webhooks', function(req, res) {

    const retrievedSignature = req.get(""X-header-Integrity"")
    //send this body string for validation with secret
    const bodyString = new Buffer(req.rawBody, 'utf8')

    let check = integrityCheck(retrievedSignature, bodyString, ""secret"")

});
</code></pre>
","50679846","1803","<node.js><dropbox><dropbox-api><sha256><hmac>","3","3","1","2019-07-12 08:36:25","","1","","","","","2018-02-17 15:56:11","","2019-07-12 08:36:25","2018-06-04 11:45:32"
"14019064","Will hmac-sha1 slow down the performance?","<p>There is a website with lots of HTTP traffic. There is a MD5 HASH field in HTTP header. Now I want to change use HMAC-SHA1 to encrypt the data instead. Will the server load increase a lot with HMAC-SHA1?</p>
","<p>This question can not be answered meaningfully. Does it take more computational power to count SHA1 than MD5? Yes. <a href=""https://stackoverflow.com/a/2723941/308851"">https://stackoverflow.com/a/2723941/308851</a> . Will this affect your traffic meaningfully? Well, that depends on how big a percentage this hashing takes currently. Ie. if you are running even just somewhat complex page which queries a database then calculating a single hash won't give you a meaningful difference.</p>

<p>You yourself need to benchmark this.</p>
","14019096","1789","<encryption><md5><hmac><hmacsha1>","0","2","1","2012-12-24 08:44:59","","3","","","","","2012-12-24 08:41:19","","2017-05-23 12:15:47","2012-12-24 08:44:59"
"42150420","Why does encrypting HMAC-SHA1 in exactly the same code in C# and PowerShell show different results?","<p>I've been trying to encrypt a Amazon S3-like authorization key with HMAC-SHA1 in PowerShell with the following code:</p>

<pre><code>$str=""PUT\n\napplication/x-zip-compressed\nThu, 09 Feb 2017 08:59:43 GMT\n/test-bucket/test-key""
$secret=""c334da95a6734ff4a04abd99efca450f""
$sha = [System.Security.Cryptography.KeyedHashAlgorithm]::Create(""HMACSHA1"")
$sha.Key = [System.Text.Encoding]::UTF8.Getbytes($secret)
$sign = [Convert]::Tobase64String($sha.ComputeHash([System.Text.Encoding]::UTF8.Getbytes(${str})))
echo $sign
</code></pre>

<p>This code outputs <code>NcJQ1MapHbyRwC2FzvABYyte5uY=</code>, which is incorrect according to our service provider's suggestion.</p>

<p>Then I tried to use exactly the same classes in C# code:</p>

<pre><code>static void Main(string[] args)
{
    var str = ""PUT\n\napplication/x-zip-compressed\nThu, 09 Feb 2017 08:59:43 GMT\n/test-bucket/test-key"";
    var secret = ""c334da95a6734ff4a04abd99efca450f"";

    var sha = System.Security.Cryptography.KeyedHashAlgorithm.Create(""HMACSHA1"");
    sha.Key = System.Text.Encoding.UTF8.GetBytes(secret);
    Console.WriteLine(Convert.ToBase64String(sha.ComputeHash(System.Text.Encoding.UTF8.GetBytes(str)))); //1S+/P9zgcCCyjwUK1bPKaKeya7A=
    Console.Read();
}
</code></pre>

<p>Oddly enough, this time, the result is correct: <code>1S+/P9zgcCCyjwUK1bPKaKeya7A=</code></p>

<p>I also tried Python, and it vindicated the C# code. Why did PowerShell run into an incorrect answer even though the inputs, classes and the methods are exactly the same with those which are called in C# code?</p>
","<p>It's because the escape character in PowerShell is ` while the one in C# is <code>\</code>.</p>

<pre><code>$str = ""PUT`n`napplication/x-zip-compressed`nThu, 09 Feb 2017 08:59:43 GMT`n/test-bucket/test-key""
</code></pre>

<p>Should yield the expected result.</p>
","42150510","1765","<c#><powershell><sha1><hmac>","13","19","1","2017-02-10 11:08:00","42150510","0","","63550","","2017-02-10 11:06:48","2017-02-10 02:18:21","","2017-02-10 11:08:00","2017-02-10 02:29:30"
"23596622","TLS 1.0-calculating the finished message MAC","<p>I'm having trouble calculating the MAC of the finished message.The RFC gives the formula</p>

<blockquote>
  <p>HMAC_hash(MAC_write_secret, seq_num + TLSCompressed.type +
                       TLSCompressed.version + TLSCompressed.length +
                       TLSCompressed.fragment));  </p>
</blockquote>

<p>But the tlsCompressed(tlsplaintext in this case because no compression is used) does not contain version information:(hex dump)</p>

<blockquote>
  <p>14 00 00 0c 2c 93 e6 c5 d1 cb 44 12 bd a0 f9 2d  </p>
</blockquote>

<p>the first byte is the tlsplaintext.type, followed by uint24 length.<br>
The full message, with the MAC and padding appended and before encryption is  </p>

<blockquote>
  <p>1400000c2c93e6c5d1cb4412bda0f92dbc175a02daab04c6096da8d4736e7c3d251381b10b  </p>
</blockquote>

<p>I have tried to calculate the hmac with the following parameters(complying to the rfc) but it does not work:  </p>

<pre><code>uint64 seq_num  
uint8  tlsplaintext.type  
uint8  tlsplaintext.version_major  
uint8  tlscompressed.version_minor  
uint16 tlsplaintext.length  
opaque tlsplaintext.fragment
</code></pre>

<p>I have also tried omitting the version and using uint24 length instead.no luck.<br>
My <code>hmac_hash()</code> function cannot be the problem because it has worked thus far. I am also able to compute the verify_data and verify it.
Because this is the first message sent under the new connection state, the sequence number is 0.<br>
So, what exactly are the parameters for the calculation of the MAC for the finished message?</p>
","<p>Here's the relevant source from Forge (JS implementation of TLS 1.0):</p>

<p><a href=""https://github.com/digitalbazaar/forge/blob/master/js/tls.js#L367"" rel=""nofollow"">The HMAC function</a>:</p>

<pre><code>var hmac_sha1 = function(key, seqNum, record) {
    /* MAC is computed like so:
    HMAC_hash(
      key, seqNum +
        TLSCompressed.type +
        TLSCompressed.version +
        TLSCompressed.length +
        TLSCompressed.fragment)
    */
    var hmac = forge.hmac.create();
    hmac.start('SHA1', key);
    var b = forge.util.createBuffer();
    b.putInt32(seqNum[0]);
    b.putInt32(seqNum[1]);
    b.putByte(record.type);
    b.putByte(record.version.major);
    b.putByte(record.version.minor);
    b.putInt16(record.length);
    b.putBytes(record.fragment.bytes());
    hmac.update(b.getBytes());
    return hmac.digest().getBytes();
};
</code></pre>

<p><a href=""https://github.com/digitalbazaar/forge/blob/master/js/tls.js#L3263"" rel=""nofollow"">The function that creates the Finished record</a>:</p>

<pre><code>tls.createFinished = function(c) {
    // generate verify_data
    var b = forge.util.createBuffer();
    b.putBuffer(c.session.md5.digest());
    b.putBuffer(c.session.sha1.digest());

    // TODO: determine prf function and verify length for TLS 1.2
    var client = (c.entity === tls.ConnectionEnd.client);
    var sp = c.session.sp;
    var vdl = 12;
    var prf = prf_TLS1;
    var label = client ? 'client finished' : 'server finished';
    b = prf(sp.master_secret, label, b.getBytes(), vdl);

    // build record fragment
    var rval = forge.util.createBuffer();
    rval.putByte(tls.HandshakeType.finished);
    rval.putInt24(b.length());
    rval.putBuffer(b);
    return rval;
};
</code></pre>

<p>The code to handle a Finished message is a bit lengthier and can be <a href=""https://github.com/digitalbazaar/forge/blob/master/js/tls.js#L1756"" rel=""nofollow"">found here</a>. I see that I have a comment in that code that sounds like it might be relevant to your problem:</p>

<pre><code> // rewind to get full bytes for message so it can be manually
 // digested below (special case for Finished messages because they
 // must be digested *after* handling as opposed to all others)
</code></pre>

<p>Does this help you spot anything in your implementation?</p>

<p><strong>Update 1</strong></p>

<p>Per your comments, I wanted to clarify how TLSPlainText works. TLSPlainText is the main ""record"" for the TLS protocol. It is the ""wrapper"" or ""envelope"" for content-specific types of messages. It always looks like this:</p>

<pre><code>struct {
    ContentType type;
    ProtocolVersion version;
    uint16 length;
    opaque fragment[TLSPlaintext.length];
} TLSPlaintext;
</code></pre>

<p>So it always has a version. A Finished message is a type of handshake message. All handshake messages have a content type of 22. A handshake message looks like this:</p>

<pre><code>struct {
    HandshakeType msg_type;
    uint24 length;
    body
} Handshake;
</code></pre>

<p>A Handshake message is yet another envelope/wrapper for other messages, like the Finished message. In this case, the body will be a Finished message (HandshakeType 20), which looks like this:</p>

<pre><code>struct {
    opaque verify_data[12];
} Finished;
</code></pre>

<p>To actually send a Finished message, you have to wrap it up in a Handshake message envelope, and then like any other message, you have to wrap it up in a TLS record (TLSPlainText). The ultimate result looks/represents something like this:</p>

<pre><code>struct {
    ContentType type=22;
    ProtocolVersion version=&lt;major, minor&gt;;
    uint16 length=&lt;length of fragment&gt;;
    opaque fragment=&lt;struct {
        HandshakeType msg_type=20;
        uint24 length=&lt;length of finished message&gt;;
        body=&lt;struct {
          opaque verify_data[12]&gt;;
        } Finished&gt;
    } Handshake&gt;
} TLSPlainText;
</code></pre>

<p>Then, before transport, the record may be altered. You can think of these alterations as operations that take a record and transform its fragment (and fragment length). The first operation compresses the fragment. After compression you compute the MAC, as described above and then append that to the fragment. Then you encrypt the fragment (adding the appropriate padding if using a block cipher) and replace it with the ciphered result. So, when you're finished, you've still got a record with a type, version, length, and fragment, but the fragment is encrypted.</p>

<p>So, just so we're clear, when you're computing the MAC for the Finished message, imagine passing in the above TLSPlainText (assuming there's no compression as you indicated) to a function. This function takes this TLSPlainText record, which has properties for type, version, length, and fragment. The HMAC function above is run on the record. The HMAC key and sequence number  (which is 0 here) are provided via the session state. Therefore, you can see that everything the HMAC function needs is available.</p>

<p>In any case, hopefully this better explains how the protocol works and that will maybe reveal what's going wrong with your implementation.</p>
","23689246","1756","<ssl><hmac>","4","3","1","2014-05-16 21:46:24","23689246","0","","3139480","","2014-05-15 12:18:46","2014-05-11 18:54:25","","2014-05-16 21:46:24","2014-05-15 21:44:54"
"12895806","Java vs Ruby HMAC SHA256 don't agree","<p>I can't get Ruby and Java to agree on a HMAC:</p>

<p>Ruby:</p>

<pre><code>hmac_key = ""my hmac key"" #this is THE REAL KEY
msg = ""fCyVmpFAZxv9Utui2QWGUtoGJ//Zr5aH+1PV31ry/dwX3yVdeEMIMW/dfoA9\nihbnYrnoSnb2yyfOrBYoy0JlDvWz8GJ6dY643lDTj7xcw8Q=""
hashb16  = OpenSSL::HMAC.hexdigest('sha256', hmac_key, msg)
puts hashb16

052310d1fc91df4e5bbb47194cc401feed51eca98668b501555c78774dad6bed
</code></pre>

<p>Java:</p>

<pre><code>String hmac_key = ""my hmac key"";
String encrypted_message_b64 = ""fCyVmpFAZxv9Utui2QWGUtoGJ//Zr5aH+1PV31ry/dwX3yVdeEMIMW/dfoA9ihbnYrnoSnb2yyfO\nrBYoy0JlDvWz8GJ6dY643lDTj7xcw8Q="";
final Mac hmac = Mac.getInstance(""HmacSHA256"");
hmac.init(new SecretKeySpec(hmac_key.getBytes(""UTF-8""), ""HmacSHA256""));
byte[] signature = hmac.doFinal(encrypted_message_b64.getBytes(""UTF-8""));
System.out.println(Hex.encodeHexString(signature));

d5bc0b58f43c6f6611f63822d22f99e18c51a33251a5a1c0c7712b4c7fb1ad24
</code></pre>

<p>Can you spot what's wrong?</p>

<hr>

<p>Edit: I fixed the string that was badly copy/pasted.</p>

<p>Edit2: I reverted the fix, and use the proper content on ruby string so the answers and the accepted answer still make sense. Sorry for the mess</p>
","<p>The messages are different - see the <code>dfoA9\n</code> in the Ruby block.</p>
","12895830","1738","<java><ruby><encryption><hmac>","2","5","2","2012-10-15 14:27:12","12895830","2","2","128421","","2012-10-15 14:27:12","2012-10-15 12:35:12","2012-10-15 21:06:25","2012-10-15 14:25:23","2012-10-15 12:37:15"
"12895806","Java vs Ruby HMAC SHA256 don't agree","<p>I can't get Ruby and Java to agree on a HMAC:</p>

<p>Ruby:</p>

<pre><code>hmac_key = ""my hmac key"" #this is THE REAL KEY
msg = ""fCyVmpFAZxv9Utui2QWGUtoGJ//Zr5aH+1PV31ry/dwX3yVdeEMIMW/dfoA9\nihbnYrnoSnb2yyfOrBYoy0JlDvWz8GJ6dY643lDTj7xcw8Q=""
hashb16  = OpenSSL::HMAC.hexdigest('sha256', hmac_key, msg)
puts hashb16

052310d1fc91df4e5bbb47194cc401feed51eca98668b501555c78774dad6bed
</code></pre>

<p>Java:</p>

<pre><code>String hmac_key = ""my hmac key"";
String encrypted_message_b64 = ""fCyVmpFAZxv9Utui2QWGUtoGJ//Zr5aH+1PV31ry/dwX3yVdeEMIMW/dfoA9ihbnYrnoSnb2yyfO\nrBYoy0JlDvWz8GJ6dY643lDTj7xcw8Q="";
final Mac hmac = Mac.getInstance(""HmacSHA256"");
hmac.init(new SecretKeySpec(hmac_key.getBytes(""UTF-8""), ""HmacSHA256""));
byte[] signature = hmac.doFinal(encrypted_message_b64.getBytes(""UTF-8""));
System.out.println(Hex.encodeHexString(signature));

d5bc0b58f43c6f6611f63822d22f99e18c51a33251a5a1c0c7712b4c7fb1ad24
</code></pre>

<p>Can you spot what's wrong?</p>

<hr>

<p>Edit: I fixed the string that was badly copy/pasted.</p>

<p>Edit2: I reverted the fix, and use the proper content on ruby string so the answers and the accepted answer still make sense. Sorry for the mess</p>
","<p>I don't know what you ""fixed"" by copy&amp;pasting, the two source strings are still different (having <code>\n</code> at different places), and the hashes you posted are now equal. I suppose you don't have them equal, otherwise you won't be posting the question.</p>

<p>But what i see is that you are using <code>b64_encoded</code> as the Ruby input, which is not the <code>msg</code> you are showing us. Is there a chance it has a different content?</p>
","12896117","1738","<java><ruby><encryption><hmac>","2","2","2","2012-10-15 14:27:12","12895830","2","2","128421","","2012-10-15 14:27:12","2012-10-15 12:35:12","2012-10-15 21:06:25","","2012-10-15 12:56:25"
"16628180","Amazon S3 REST API; how is the API-key transferred firsttime between client and service?","<p>Within my research I came across many different sources, but somehow I fail to see, which side is generating the private API-key and how is the other side getting hold of it.</p>

<p>Many people recommend Amazon S3 Restful API as the role model, hence if I understand that, I could create something similar for my own purposes.</p>

<p><a href=""http://docs.amazonwebservices.com/AmazonS3/latest/dev/RESTAuthentication.html"" rel=""nofollow noreferrer"">Amazon's S3 REST API.</a></p>

<p>e.g. this <a href=""https://stackoverflow.com/questions/8567512/passing-api-keys-to-rest-api"">example</a> here explains the process very nicely, however it fails to explain, which side is generating the API-key? So upon user signup, is it the service side that is generating the private API-key and assigns it to the user id in database?</p>

<p>If this is the case though, the client needs to know the API key in order to create the <strong>signature</strong> for each request, so that the service can actually verify it. So how do both sides get hold of the private API key?</p>

<p>In my case I would have a iPhone app and a AngularJS web app as my clients talking to the RESTful API service.</p>

<p>Many Thanks,</p>
","<p>First, you don't want give out keys to your clients. In general, that's a security nightmare. (Also, key creation can take some hours to propagate. And you'll have to manage the permissions for each key, etc.)  So all the signing is done by your server, and your key doesn't leave your server.</p>

<p>You want your server to have the S3 key, but only return signed links that will give the client the power to do something (GET a particular file, or PUT a file).  It's a bit like the mother-may-I game: The client asks you for a ""S3 signed link"", then it can talk to S3 to do one thing.  Since your server is doing a trivial amount of work (checking request is authorized, then returning a signed URL), you will be able to scale pretty well.</p>

<p>For some things, like ""list files"" or ""delete a file"", it might be better for your server to call S3 (i.e. making a web request to S3 within the web request from the client) and return the results to the client (instead of messing with signed links). But if you do this, you may run into problems when scaling -- unless you are using the right technologies. (I.e. you want an evented server like node.js)</p>

<p>Note that for a PUT request, the signed link must specify a lot of stuff ahead of time (like the file type, etc). You have to read the AWS spec carefully.</p>

<p>Be careful of the <a href=""http://en.wikipedia.org/wiki/Confused_Deputy"" rel=""nofollow"">Confused Deputy</a> problem. Your code will have one key that can see all user's files, so you are responsible for the security between users.</p>
","16628448","1735","<rest><amazon-web-services><amazon-s3><hmac><api-key>","0","-1","1","2013-05-18 20:02:30","","0","","-1","","2017-05-23 12:14:31","2013-05-18 19:29:11","","","2013-05-18 20:02:30"
"11598821","Ruby HMAC-SHA Differs from Python","<p>I'm rewriting some existing code from Python to Ruby, and I've across a strange error that I can't seem to figure out.  Here we have the Python code (which works):</p>

<pre><code>import sha, hmac
data = 'sampledata'
data = data.encode('ascii')
des_key = hmac.new(data + ""\0"", ""SUPERSECRET"", sha).digest()[0:8]
</code></pre>

<p>Output: 0x64F461D377D9930C</p>

<p>And the Ruby (which I'm new to) code:</p>

<pre><code>require 'openssl'
digest  = OpenSSL::Digest::SHA.new
data = 'sampledata'
data.encode!('ascii')
puts OpenSSL::HMAC.hexdigest(digest, ""SUPERSECRET"", data + ""\0"")[0, 16]
</code></pre>

<p>Output: 0x563FDAF11E63277C</p>

<p>What could be causing this difference?</p>
","<p>You made two mistakes:</p>

<ol>
<li><p>Python's hmac.new takes key, method, digest - so you should write</p>

<p>hmac.new(""SUPERSECRET"",data + ""\0"", sha)</p></li>
<li><p>The default digest method for OpenSSL::Digest in Ruby isn't SHA1 (I'm not sure what it is). You should just use:</p>

<p>OpenSSL::HMAC.hexdigest('sha1',""SUPERSECRET"",data+""\0"")[0,16]</p></li>
</ol>

<p>Both methods (first in Python, second in Ruby) return the same output.</p>
","11599097","1706","<python><ruby><sha><hmac>","3","5","2","2012-07-22 18:53:11","11599097","0","1","","","","2012-07-22 08:37:02","","","2012-07-22 09:23:58"
"11598821","Ruby HMAC-SHA Differs from Python","<p>I'm rewriting some existing code from Python to Ruby, and I've across a strange error that I can't seem to figure out.  Here we have the Python code (which works):</p>

<pre><code>import sha, hmac
data = 'sampledata'
data = data.encode('ascii')
des_key = hmac.new(data + ""\0"", ""SUPERSECRET"", sha).digest()[0:8]
</code></pre>

<p>Output: 0x64F461D377D9930C</p>

<p>And the Ruby (which I'm new to) code:</p>

<pre><code>require 'openssl'
digest  = OpenSSL::Digest::SHA.new
data = 'sampledata'
data.encode!('ascii')
puts OpenSSL::HMAC.hexdigest(digest, ""SUPERSECRET"", data + ""\0"")[0, 16]
</code></pre>

<p>Output: 0x563FDAF11E63277C</p>

<p>What could be causing this difference?</p>
","<p>In addition to Guy Adini's answer - in Ruby SHA is different from python <code>sha</code> which is <code>sha1</code> (in <code>sha.py</code>: <code>from hashlib import sha1 as sha</code>):</p>

<pre><code>from hashlib import *
import hmac
data = 'sampledata'
data = data.encode('ascii')

algo = [sha1, sha224, sha256, sha512]
for al in algo:
    print al().name, hmac.new(""SUPERSECRET"", data + ""\0"", al).hexdigest()[0:16]
</code></pre>

<p>produces:</p>

<pre><code>sha1 50c61ea49195f03c
sha224 fd6a418ee0ae21c8
sha256 79deab13bd7b041a
sha512 31561f9c9df69ab2
</code></pre>

<p>and in Ruby:</p>

<pre><code>require 'openssl'
data = 'sampledata'
data.encode!('ascii')
%w(sha sha1 sha224 sha256 sha512).each do |al|
  puts ""#{al}: #{OpenSSL::HMAC::hexdigest(al, ""SUPERSECRET"", ""#{data}\0"")[0,16]}""
end
</code></pre>

<p>produces:</p>

<pre><code>sha: 563fdaf11e63277c
sha1: 50c61ea49195f03c
sha224: fd6a418ee0ae21c8
sha256: 79deab13bd7b041a
sha512: 31561f9c9df69ab2
</code></pre>
","11599174","1706","<python><ruby><sha><hmac>","3","4","2","2012-07-22 18:53:11","11599097","0","1","","","","2012-07-22 08:37:02","","2012-07-22 18:53:11","2012-07-22 09:38:04"
"11134763","HMAC a php byte array","<p>I'm trying to integrate a PHP backend with a Java backend. The Java backend expects some credentials which must be correctly encoded and hashed to match at both ends.</p>

<p>The java system converts a string to a sequence of bytes (1), then generates a HMAC/SHA256 keyed hash of that sequence (2) and then base 64 encodes the hash (3).</p>

<pre><code>private static final String HMAC_ALGORITHM = ""HmacSHA256"";
final SecretKey key = new SecretKeySpec('mysecret', HMAC_ALGORITHM);
final Mac hmac = Mac.getInstance(key.getAlgorithm());
hmac.init(key);
final String stringToHash = ""blablabla"";
final byte[] bytesToHash = stringToHash.getBytes(""UTF8"");
final byte[] hash = hmac.doFinal(bytesToHash);
return Base64.encodeBytes(hash);
</code></pre>

<p>I can do (1) and convert the string in PHP to a sequence of bytes using </p>

<pre><code>$stringArray = unpack('C*', $string);
</code></pre>

<p>// which works and is exactly the same as the Java system at this point</p>

<p>however the second part (2) doesn't seem to match, is there a way to pass a byte array to hmac in PHP because in Java the HMAC method accepts a byte array whereas the PHP one expects a string e.g.</p>

<pre><code>hash_hmac('sha256', $stringArray, $secret);
</code></pre>

<p>or do I need to loop through the array and do some magic?</p>

<p>Thanks!</p>
","<p>I dont think you need to <code>unpack</code> in php</p>

<p>Just try </p>

<pre><code>hash_hmac('sha256', $string, $secret, TRUE);
</code></pre>

<p><strong>Note:</strong> I am passing the actual string to the function and the last param <code>raw_output</code> is set to <code>TRUE</code></p>

<p><strong>Update</strong></p>

<p>Your java code seems to be wrong <a href=""http://docs.oracle.com/javase/6/docs/api/javax/crypto/spec/SecretKeySpec.html"" rel=""nofollow"">docs</a></p>

<pre><code>final SecretKey key = new SecretKeySpec('mysecret', HMAC_ALGORITHM);
</code></pre>

<p>This should be like the following</p>

<pre><code>byte[] keyBytes = mysecret.getBytes(); // say mysecret is a String var
final SecretKey key = new SecretKeySpec(keyBytes, HMAC_ALGORITHM);
</code></pre>
","11135039","1706","<java><php><encoding><bytearray><hmac>","2","3","2","2018-09-26 18:49:04","","1","3","1425671","","2012-06-21 10:02:20","2012-06-21 08:59:32","","2012-06-21 10:06:34","2012-06-21 09:15:04"
"11134763","HMAC a php byte array","<p>I'm trying to integrate a PHP backend with a Java backend. The Java backend expects some credentials which must be correctly encoded and hashed to match at both ends.</p>

<p>The java system converts a string to a sequence of bytes (1), then generates a HMAC/SHA256 keyed hash of that sequence (2) and then base 64 encodes the hash (3).</p>

<pre><code>private static final String HMAC_ALGORITHM = ""HmacSHA256"";
final SecretKey key = new SecretKeySpec('mysecret', HMAC_ALGORITHM);
final Mac hmac = Mac.getInstance(key.getAlgorithm());
hmac.init(key);
final String stringToHash = ""blablabla"";
final byte[] bytesToHash = stringToHash.getBytes(""UTF8"");
final byte[] hash = hmac.doFinal(bytesToHash);
return Base64.encodeBytes(hash);
</code></pre>

<p>I can do (1) and convert the string in PHP to a sequence of bytes using </p>

<pre><code>$stringArray = unpack('C*', $string);
</code></pre>

<p>// which works and is exactly the same as the Java system at this point</p>

<p>however the second part (2) doesn't seem to match, is there a way to pass a byte array to hmac in PHP because in Java the HMAC method accepts a byte array whereas the PHP one expects a string e.g.</p>

<pre><code>hash_hmac('sha256', $stringArray, $secret);
</code></pre>

<p>or do I need to loop through the array and do some magic?</p>

<p>Thanks!</p>
","<p>I have to generate the same Java values on PHP. The only way that it works was this</p>

<pre><code>&lt;?php

$verb = hash_hmac(""sha256"", ""POST"" , ""9mO6oBVSmb2QTSeN73mEGHHnD"", FALSE);

$path = hash_hmac(""sha256"", '/1.0/benefits/registerBenefit', pack(""H*"",  $verb), FALSE);

$query = hash_hmac(""sha256"", """" , pack(""H*"",  $path), FALSE);

$body  = hash_hmac(""sha256"", '{""id"":""a7d23226-bdfc-4d85-a30a-b2d7eccc36e6"",""phone_number"":""5511973512530"",""sku"":""com.movile.cubes.br.biweekly.homolog"",""origin"":""trade_up_group"",""application_id"":437}' , pack(""H*"",  $query), FALSE);

$rawSignature   = hash_hmac(""sha256"", ""x-kiwi-signature"", pack(""H*"",  $body), FALSE);

$signature  = base64_encode( pack(""H*"",  $rawSignature));

var_dump($signature);
</code></pre>

<p>So..I had to use pack(""H*"", $str) to get the same values that Java was generating.</p>
","52524303","1706","<java><php><encoding><bytearray><hmac>","2","0","2","2018-09-26 18:49:04","","1","3","1425671","","2012-06-21 10:02:20","2012-06-21 08:59:32","","","2018-09-26 18:49:04"
"48171199","Generating one-time-only security tokens from UUID or HMAC/JWT/hash?","<p>I'm build the backend for a web app. When a new user goes to the site and clicks the <strong>Sign Up</strong> button, they'll fill out a super simple form asking them for their username + password and they'll submit. This prompts the server to send a verification email to that email address. They'll then check their email, click a link (which verifies their email) and then be routed to the login page so they can sign in if they choose.</p>

<p>In order to verify their email, when the server generates the email it will need to create (and store) a <strong>verification token</strong> (likely a UUID) and attach it to this link in the email, so that the link looks something like:</p>

<blockquote>
  <p>""<a href=""https://api.myapp.example.com/v1/users/verify?vt=12345"" rel=""nofollow noreferrer"">https://api.myapp.example.com/v1/users/verify?vt=12345</a>""</p>
</blockquote>

<p>Where <code>vt=12345</code> is the ""verification token"" (again likely a UUID). So the user clicks this link and my <code>GET v1/users/verify</code> endpoint looks at the token, somehow confirms its valid, and makes some DB updates to ""activate"" the user. They can now log in.</p>

<p>Similar scenarios for when a user wants to unsubscribe from receiving email, or when they can't remember their password and need to recover it so that they can log in.</p>

<h3>Unsubscribe</h3>

<p>User wants to stop receiving emails but still wants to use the app. They click an ""<em>Unsubscribe</em>"" link in a weekly newsletter we send them. This link needs to contain some kind of similar ""unsubscribe token"" that, like the verification token above, is generated + stored on the server, and is used to authenticate the user's request to unsubscribe from email.</p>

<h3>Recover Password</h3>

<p>Here the user has forgotten their password and needs to recover it. So at the login screen they click the ""<em>Forgot my password</em>"" link, and are presented with a form where they must fill out their email address. Server sends an email to that address. They check this email and it contains a link to a form where they can enter their new password. This link needs to contain a ""reset password token"" that -- like the verification token above -- is generated + stored on the server, and is used to authenticate the user's request to change their password.</p>

<p>So here we have three very similar problems to solve, all requiring the use of what I'm calling ""<em>one-time only (OTO) security tokens</em>"". These OTO tokens:</p>

<ul>
<li>Must be generated server-side and persisted (maybe to a <code>security_tokens</code> table)</li>
<li>Must be something that can be attached to links that we'll expose from inside of emails</li>
<li>Must only be valid one time: once they click it, the token is ""used"" and cannot be reused</li>
</ul>

<h2>My question</h2>

<p>The solution I came up was simple...almost too simple.</p>

<p>For the tokens I am just generating random UUIDs (36-char) and storing them to a <code>security_tokens</code> table that has the following fields:</p>

<pre><code>[security_tokens]
---
id (PK)
user_id (FK to [users] table)
token (the token itself)
status (UNCLAIMED or CLAIMED)
generated_on (DATETIME when created)
</code></pre>

<p>When the server creates them they are ""UNCLAIMED"". When the user clicks a link inside the table they are ""CLAIMED"". A background worker job will run periodically to clean up any CLAIMED tokens or to delte any UNCLAIMED tokens that have ""expired"" (based on their <code>generated_on</code> fields). The app will also ignore any tokens that have been previously CLAIMED (and have just not yet been cleaned up).</p>

<p>I <em>think</em> this solution would work, but I'm not a super security guy and I'm worried that this approach:</p>

<ol>
<li>Possibly leaves my app open to some type of attack/exploit; and</li>
<li>Possibly reinvents the wheel when some other solution might work just as well</li>
</ol>

<p>Like for the 2nd one above I'm wondering if I should be using a hash/HMAC/JWT-related mechanism instead of a dead simple UUID. Maybe there's some smart crypto/security folks who found a way to make these tokens contain CLAIM status and expiration date themselves in a secure/immutable fashion, etc.</p>
","<p><strong>You're on the right lines</strong></p>

<p>I have a very similar method in my application based on what I want it to do. I have a table containing each user (a Users table) which I can use to reference each individual account and perform actions based on their identity. There are a <em>lot</em> of security threats to mitigate by adding in user accounts and self-management options. Here's how I combat a few of these vulnerabilities.</p>

<p><strong>Verifying your email</strong></p>

<p>When a user signs up, the server should use the <code>RNGCryptoServiceProvider()</code> class to generate a random salt with sufficient length that it could never realistically be guessed. Then, I hash the salt (on it's own) and apply base64 encoding to it so that it can be added to a Url. Send the completed link to the user via email, and be sure to store that hash against the relevant <code>UserId</code> in the <code>Users</code> table.</p>

<p>The user sees a nice and neat ""Click here to validate your email address"" in their inbox and can click on the link. It should redirect to a page that accepts an optional url parameter (such as <code>mywebsite.com/account/verifyemail/myhash</code> and then check the hash server-side. The site can then check the hash against the activation hashes it has stored in the database. If it matches a record, then you should mark the <code>Users.EmailVerified</code> column to <code>true</code> and commit to the table. Then, you can delete that Verification record entry from the table.</p>

<p>Well done, you've successfully verified a user's email address is real!</p>

<p><strong>Reset password</strong></p>

<p>Here, we implement a similar method. But instead of a Verification record, we're better off storing our record in a PasswordResetRequest table, and do not delete records - this allows you to see whether or not a password was reset and when. Each time the user requests a password reset, you should display an anonymous message such as ""An email was sent to your primary email address containing further instructions"". Even if one was not sent or the account doesn't exist, it stops a potential attacker from enumerating usernames or email addresses to see if they are registered with your service. Again, if they are real, send a link using the same method as before.</p>

<p>The users opens their email address and clicks on the link. They are then redirected to a reset page such as <code>mywebsite.com/account/resetpassword/myhash</code>. The server then runs the hash in the url against the database and returns a result if it is real. Now, this is the tricky part - you shouldn't keep these active for long. I'd recommend a column linking the hash to the <code>Users.UserId</code>, one called <code>ExpiraryDateTime</code> which contains something like <code>Datetime.Now.AddMinutes(15)</code> (which makes it easier to work with later), and one called <code>IsUsed</code> as a boolean (false by default).</p>

<p>On clicking a link, you should check to see if a link exists. If not, give them them to the default ""There was a problem with that link. Please request a new one"" text. However, if the link is valid, you should check that <code>Used == false</code> because you don't want people using the same link more than once. If it's not used, great! Let's check to see if it's still valid. The easiest way would be a simple <code>if (PasswordResetRequest.ExpiraryDateTime &lt; DateTime.Now)</code> - if the link is still valid, then you can proceed with the password reset. If not, it means it was generated a while ago and you shouldn't allow it to be used anymore. Seriously, some sites will still allow you to generate a link today and if your email is hacked 1 month from now, you can still use the reset links!</p>

<p>I should also mention that each time the user requests a password reset, you should check the existing records in the table for a <strong>valid</strong> link. If one is valid (meaning it can still be used) then you should instantly invalidate it. Replace the hash with some assistive text like ""Invalid: User requested new reset link"". This also lets you know they've requested more than one link whilst also invalidating their link. You could also mark it as Used if you really wanted to just to prevent people from trying to use expired links by being smart and sneaking the whole ""Invalid: User requested new reset link"" as an encoded URL into their browsers. You should never have more than one reset link active for the same account - <strong>ever</strong>!</p>

<p><strong>Unsubscribing</strong></p>

<p>For this, I'd have a simple flag in the database that determines whether or not a user can receive promotional offers and newsletters etc. So a <code>Users.SubscribedToNewsletter</code> would suffice. They should be able to log in and change this in their Email Settings or Communication Preferences etc.</p>

<p><strong>Some code examples</strong></p>

<p>This is my RNGCryptoServiceProvider code in C#</p>

<pre><code>public static string GenerateRandomString(RNGCryptoServiceProvider rng, int size)
{
    var bytes = new Byte[size];

    rng.GetBytes(bytes);

    return Convert.ToBase64String(bytes);
}

var rng = new RNGCryptoServiceProvider();
var randomString = GenerateRandomSalt(rng, 47); // This will end up being a string of almost entirely random bytes
</code></pre>

<p><strong>Why do I use RNGCryptoServiceProvider?</strong></p>

<p>The <code>RNGCryptoServiceProvider()</code> (which is a C# class in their Security library) allows you to generate a seemingly random string of bytes based on entirely random and non-reproducable events. Classes like the <code>Random()</code> still need to use some sort of internal data to generate a number based on predictable algorithmic events such as current date and time. The <code>RNGCryptoServiceProvider()</code> uses things like cpu temperatures, number of running processes, etc. all to create something random that can't be reproduced. This allows for the final byte array to be as random as possible.</p>

<p><strong>Why do I Base64 encode it?</strong></p>

<p>Base64 encoding will result in a string containing only numbers and letters. This means there will be no symbols or encoded characters within the text and therefore it is safe to use in a URL. This isn't so much a security feature, but it does allow you to only allow numbers and letters within the parameters of the method, and filter out or reject any input that doesn't match this standard. For example, filtering out any inputs that contain the chevrons <code>&lt;</code> and <code>&gt;</code> should allow you to prevent XSS.</p>

<p><strong>Something to keep in mind</strong></p>

<p>You should ALWAYS assume that the link containing your hash is <strong>invalid</strong> until you perform each check on it to ensure it passes requirements. So you can do your various <code>if</code> statements but unless you pass <strong>every single one</strong>, you leave your default <em>next action</em> to some form of error for the user. To clarify, I should check that the password reset link is valid, then not used, then still within the time window, <strong>and then</strong> perform my reset actions. Should it fail to pass any of these requirements, the default action should be to give the user an error saying that it is an invalid link.</p>

<p><strong>Notes for others</strong></p>

<p>Since I'm pretty confident this isn't the <em>only</em> way to do this, I'd just like to declare that this is how I've done it for years which has never failed me and has gotten my company through several extensive pentests. But if someone has a better / more secure way of doing so, please do shed some light as I'd be happy to learn more. If you have any further questions or need clarification on a particular part I mentioned, just let me know and I'll try my best to help</p>
","48172412","1693","<security><authentication><hash><jwt><hmac>","1","2","1","2018-01-09 22:08:36","48172412","0","4","","","","2018-01-09 15:12:32","","2018-01-09 22:08:36","2018-01-09 16:16:40"
"20240681","RESTful API with HMAC: how to manage user authentication","<p>I am developing a RESTful API for my web and mobile applications. My intention with this API is to store all data of users so that my applications can access them easily. It is like Google's solution: you don't have a separate account for Gmail and Youtube, but a shared one.</p>

<p>For every request (that needs USER authentication, not only APPLICATION authentication) the following workflow is applied:</p>

<ul>
<li><p>Application determines the message of the request:<br/>
MESSAGE= URL + HEADERS + BODY</p></li>
<li><p>Application calculates the signature of the request:<br/>
SIGNATURE= HMAC(HMAC(MESSAGE, user_password), application_key)<br/></p></li>
<li><p>Application sends the request via HTTP/HTTPS:<br/>
REQUEST= MESSAGE + Signature</p></li>
<li><p>API recreates the signature to authenticate both user and application:<br/>
SIGNATURE= application_id/user_id HMAC(HMAC(MESSAGE, user_password_from_database), application_key)</p></li>
</ul>

<p>Where e.g.:<br/></p>

<ul>
<li><p>application_id = 1</p></li>
<li><p>user_id = 123456</p></li>
<li><p>user_password= 'mypass'</p></li>
<li><p>user_password_from_database= '$2y$10$1234567890abcde...'</p></li>
</ul>

<p>The problem with this approach is that passwords in the database are irreversibly hashed (with BCrypt), and that's why I can't use them when I want to the recreate the signature of the request.</p>

<p>My question is how it can be accomplished yet? Is sending user_password_from_database to the application via HTTPS a good practice? My basic workflow would be:</p>

<ul>
<li><p>User logs in to the application with user_email and user_password</p></li>
<li><p>Application sends these credentials via HTTPS to the API</p></li>
<li><p>API responds with user_id and user_password_from_database if credentials are OK</p></li>
<li><p>From now, application can use these data to determine SIGNATURE.</p></li>
<li><p>From now, API can recreate SIGNATURE because user_password_from_database is the secret key, not user_password</p></li>
</ul>

<p>How secure is this algorithm? Does HTTPS prevent abuse of user_password_from_database?</p>

<p>Footnote: the signing method detailed above is just an example, indeed I took Amazon's <a href=""http://docs.aws.amazon.com/general/latest/gr/sigv4_signing.html"" rel=""nofollow"">AWS Signature Version 4</a> algorithm and tried to add some user authentication to it.</p>
","","","1687","<php><api><rest><authentication><hmac>","3","","0","2013-11-27 12:50:55","","7","","1692726","","2013-11-27 12:50:55","2013-11-27 11:02:34","","",""
"8129700","Trying to create php equivalent of C# signature hash method for api","<p>I'm trying to replicate a c# method for generating a signature hash to communicate with an API, having trouble reproducing the same example result in PHP based on the c# method examples I was given.</p>

<p>The word problem version of what I'm trying to do is: (from api documentation)</p>

<p><strong>Calculating Request Signatures</strong></p>

<p>A request signature, an HMAC with an SHA-1 hash code, is calculated by concatenating the values of the Service, Method, and Timestamp parameters, in that order, and then calculating an RFC 2104-compliant HMAC, using the Secret Access Key as the ""key"". The computed HMAC value must be base64 encoded</p>

<p>The test data:</p>

<pre><code>service_name = “Zoyto Fulfillment Service”
timestamp: “2010-07-21T04:33:55Z”
api_secret = “2c0774063f4bb1a10ca39ba6c806636a57d78dc3”
method = “getOrderStatus”

Result should be:
signature: “mlePFDcrTAxd+PWA6hOGGtvu2Zc=”
</code></pre>

<p>I have the following code example of a c# method for creating a signature hash to make an API call:</p>

<pre><code>public string createSignature(string api_secret, string method, string timestamp, string service_name) { 
  DateTime currentTime = DateTime.UtcNow; string toSign = service_name.ToLower() +   method.ToLower() + timestamp.ToLower(); 
  byte[] toSignBytes = Encoding.UTF8.GetBytes(toSign); byte[] secretBytes = Encoding.UTF8.GetBytes(api_secret); 
  HMAC signer = new HMACSHA1(secretBytes byte[] sigBytes = signer.ComputeHash(toSignBytes); 
  string signature = Convert.ToBase64String(sigBytes); 
  return signature; 
}
</code></pre>

<p>Currently, my php method looks like:</p>

<pre><code>$testSecret = '2c0774063f4bb1a10ca39ba6c806636a57d78dc3';
$testSvc    = 'Zoyto Fulfillment Service';
$testStamp  = strtotime('2010-07-21 04:33:55');   
$method = 'getOrderStatus';

$sig    = utf8_encode($testSvc.$method.$testStamp);

$hash   = hash_hmac(""sha1"", $sig, $testSecret, true);

$sig    = base64_encode($hash);
return $sig;

//returns:
//OUhgiIqxngaFm1Rquxm1lZ/3CzE=
</code></pre>

<p>Any help is appreciated</p>
","<p>I'm not sure where you got that C# code from but it doesn't work. This PHP code will give you the desired input for the input given.</p>

<pre><code>function createSignature($api_secret, $method, $timestamp, $service_name) {
    $toSign = strtolower($service_name) . strtolower($method) . strtolower($timestamp);
    $sig = hash_hmac('sha1', $toSign, $api_secret, true);
    return base64_encode($sig);
}

$api_secret = '2c0774063f4bb1a10ca39ba6c806636a57d78dc3';
$method = 'getOrderStatus';
$timestamp  = '2010-07-21T04:33:55Z'; 
$service_name    = 'Zoyto Fulfillment Service';

echo createSignature($api_secret, $method, $timestamp, $service_name);
// output: mlePFDcrTAxd+PWA6hOGGtvu2Zc=
</code></pre>

<p>Note: Requires PHP 5 >= 5.1.2 or PECL hash >= 1.1</p>
","8130389","1684","<c#><php><sha1><hmac>","4","2","1","2011-11-15 01:21:31","8130389","1","","968312","","2011-11-15 00:52:31","2011-11-14 23:32:56","","","2011-11-15 01:21:31"
"17929107","CryptoJS (HMAC Sha256) giving incorrect output?","<p>Let me start by saying I'm no expert in cryptography algorithms...</p>

<p>I am trying to build a method which formats an HTTP header for Windows Azure - and this header requires part of its message to be encrypted via HMAC with SHA256 (and then also base64 encoded).</p>

<p>I chose to use <a href=""https://code.google.com/p/crypto-js/"" rel=""nofollow"">CryptoJS</a> because it's got an active user community.</p>

<p>First, my code:</p>

<pre><code>_encodeAuthHeader : function (url, params, date) {
    //http://msdn.microsoft.com/en-us/library/windowsazure/dd179428
    var canonicalizedResource = '/' + this.getAccountName() + url;

    /*
     StringToSign = Date + ""\n"" + CanonicalizedResource
     */
    var stringToSign = date + '\n' + canonicalizedResource;
    console.log('stringToSign &gt;&gt; ' + stringToSign)

    var encodedBits = CryptoJS.HmacSHA256(stringToSign, this.getAccessKey());
    console.log('encodedBits &gt;&gt; ' + encodedBits);

    var base64Bits = CryptoJS.enc.Base64.stringify(encodedBits);
    console.log('base64Bits &gt;&gt; ' + base64Bits);

    var signature = 'SharedKeyLite ' + this.getAccountName() + ':' + base64Bits;
    console.log('signature &gt;&gt; ' + signature);

    return signature;
},
</code></pre>

<p>The method successfully returns a ""signature"" with the appropriate piece encrypted/encoded. However, Azure complains that it's not formatted correctly.</p>

<p>Some example output:</p>

<pre><code>stringToSign &gt;&gt; Mon, 29 Jul 2013 16:04:20 GMT\n/senchaazurestorage/Tables

encodedBits &gt;&gt; 6723ace2ec7b0348e1270ccbaab802bfa5c1bbdddd108aece88c739051a8a767

base64Bits &gt;&gt; ZyOs4ux7A0jhJwzLqrgCv6XBu93dEIrs6IxzkFGop2c=

signature &gt;&gt; SharedKeyLite senchaazurestorage:ZyOs4ux7A0jhJwzLqrgCv6XBu93dEIrs6IxzkFGop2c=
</code></pre>

<p>Doing some debugging, I am noticing that CryptoJS is not returning the same value (HMAC with SHA256) as alternative implementations. For example, the string ""<em>Mon, 29 Jul 2013 16:04:20 GMT\n/senchaazurestorage/Tables</em>"" appears as:</p>

<ul>
<li>""<em>6723ace2ec7b0348e1270ccbaab802bfa5c1bbdddd108aece88c739051a8a767</em>"" via CryptoJS</li>
<li>""<em>faa89f45ef029c63d04b8522d07c54024ae711924822c402b2d387d05398fc9f</em>"" via PHP hash_hmac('sha256', ... )</li>
</ul>

<p>Digging even deeper, I'm seeing that most HMAC/SHA265 algorithms return data which matches the output from PHP... am I missing something in CryptoJS? Or is there a legitimate difference?</p>
","<p>As I mentioned in my first comment, the newline (""\n"") was causing problems. Escaping that (""\ \n"", without the space inbetween) seems to have fixed the inconsistency in HMAC/SHA256 output.</p>

<p>I'm still having problems with the Azure HTTP ""Authorization"" header, but that's another issue.</p>
","17932981","1683","<azure-storage><hmac><cryptojs>","3","1","1","2013-07-29 19:53:39","17932981","1","1","","","","2013-07-29 16:21:25","","","2013-07-29 19:53:39"
"2394762","Pear Crypt/HMAC.php failed to open stream","<p>I am on a MediaTemple Dedicated Virtual server and have enabled Pear using the instructions found at:
<a href=""http://kb.mediatemple.net/questions/514/Enabling+PEAR+by+setting+your+open_basedir+and+include_path"" rel=""nofollow noreferrer"">http://kb.mediatemple.net/questions/514/Enabling+PEAR+by+setting+your+open_basedir+and+include_path</a></p>

<p>Here's the problem...</p>

<p>In my PHP script, I have this:</p>

<pre><code>require_once 'Crypt/HMAC.php';
</code></pre>

<p>When I execute the script, I get this message:</p>

<pre><code>S3::require_once(Crypt/HMAC.php) [s3.require-once]: failed to open stream: No such file or directory
</code></pre>

<p>It's a script for integrating with Amazon S3. When we were on the Grid service it worked fine. I've only had problems since moving to a DV server.</p>

<p>I installed the HMAC pear module using this command:</p>

<pre><code>pear install Crypt_HMAC
</code></pre>

<p>Then re-started the server. Still no luck.</p>

<p>Any ideas? Thanks a bunch if you can help :)</p>
","<p>Try <code>require_once 'Crypt_HMAC.php';</code></p>
","2394802","1675","<php><pear><hmac>","2","0","3","2010-09-30 16:18:41","","0","","","","","2010-03-07 01:14:18","","","2010-03-07 01:27:57"
"2394762","Pear Crypt/HMAC.php failed to open stream","<p>I am on a MediaTemple Dedicated Virtual server and have enabled Pear using the instructions found at:
<a href=""http://kb.mediatemple.net/questions/514/Enabling+PEAR+by+setting+your+open_basedir+and+include_path"" rel=""nofollow noreferrer"">http://kb.mediatemple.net/questions/514/Enabling+PEAR+by+setting+your+open_basedir+and+include_path</a></p>

<p>Here's the problem...</p>

<p>In my PHP script, I have this:</p>

<pre><code>require_once 'Crypt/HMAC.php';
</code></pre>

<p>When I execute the script, I get this message:</p>

<pre><code>S3::require_once(Crypt/HMAC.php) [s3.require-once]: failed to open stream: No such file or directory
</code></pre>

<p>It's a script for integrating with Amazon S3. When we were on the Grid service it worked fine. I've only had problems since moving to a DV server.</p>

<p>I installed the HMAC pear module using this command:</p>

<pre><code>pear install Crypt_HMAC
</code></pre>

<p>Then re-started the server. Still no luck.</p>

<p>Any ideas? Thanks a bunch if you can help :)</p>
","<p>you need to set your include path to also mention the PEAR directory on your server, you can either do this in a .htaccess file or with the set_include_path function.</p>
","2401487","1675","<php><pear><hmac>","2","2","3","2010-09-30 16:18:41","","0","","","","","2010-03-07 01:14:18","","","2010-03-08 13:16:19"
"2394762","Pear Crypt/HMAC.php failed to open stream","<p>I am on a MediaTemple Dedicated Virtual server and have enabled Pear using the instructions found at:
<a href=""http://kb.mediatemple.net/questions/514/Enabling+PEAR+by+setting+your+open_basedir+and+include_path"" rel=""nofollow noreferrer"">http://kb.mediatemple.net/questions/514/Enabling+PEAR+by+setting+your+open_basedir+and+include_path</a></p>

<p>Here's the problem...</p>

<p>In my PHP script, I have this:</p>

<pre><code>require_once 'Crypt/HMAC.php';
</code></pre>

<p>When I execute the script, I get this message:</p>

<pre><code>S3::require_once(Crypt/HMAC.php) [s3.require-once]: failed to open stream: No such file or directory
</code></pre>

<p>It's a script for integrating with Amazon S3. When we were on the Grid service it worked fine. I've only had problems since moving to a DV server.</p>

<p>I installed the HMAC pear module using this command:</p>

<pre><code>pear install Crypt_HMAC
</code></pre>

<p>Then re-started the server. Still no luck.</p>

<p>Any ideas? Thanks a bunch if you can help :)</p>
","<p>Try</p>

<pre><code>sudo pear install Crypt_HMAC2
</code></pre>
","3832631","1675","<php><pear><hmac>","2","0","3","2010-09-30 16:18:41","","0","","","","","2010-03-07 01:14:18","","","2010-09-30 16:18:41"
"22469118","Web App Authentication for REST API Backend","<p>I am currently in the early stages of creating a web application (HTML5, JS, etc.) that uses a REST API on the backend (Java, specifically Jersey v1.18). The nature of the data that will be stored is highly sensitive, so security is something that I’ve started looking at, even though the application is only in the early stages. The eventual goal will be to have native mobile applications as well, and to potentially provide access to the data for external clients via the same API.</p>

<p>In my research thus far, I have identified a variety of authentication methods, including HTTP Basic, token-based, session cookie, OAuth, HMAC, etc. The key component here is that the REST API will be primarily accessed by users, rather than other applications or backends. Thus, having a “login/logout” equivalent is important, and this boils down to user level authentication.</p>

<p>So far, HMAC authentication looks to be the most promising, as we have no plans to integrate with any OAuth provider at this moment.</p>

<p>I have already read through dozens of SO posts, as well as articles such as:
<a href=""http://www.thebuzzmedia.com/designing-a-secure-rest-api-without-oauth-authentication/"" rel=""nofollow"">http://www.thebuzzmedia.com/designing-a-secure-rest-api-without-oauth-authentication/</a>
<a href=""http://www.errant.me.uk/blog/2013/04/authenticating-restful-web-applications/"" rel=""nofollow"">http://www.errant.me.uk/blog/2013/04/authenticating-restful-web-applications/</a> (note: this is clearly bad, as salting with the username is not recommended)</p>

<p>Ideally, HMAC seems like the way to go, but I have yet to see a recommended approach to handling the shared secret. The idea of using a resource to validate credentials, which then provides a token/nonce to be used with the HMAC scheme, seems to be an option, but I’m questioning the advantages over just using this token/nonce strictly as a token.</p>

<p>I know that HMAC authentication for a REST API has been discussed at length, but when used in conjunction with the authentication details that users have come to expect (username, email, password, etc.), is there any recommended approach that doesn’t require a pre-shared secret key?</p>
","<p>This is primarily an opinion-based question, but I'll offer my two cents: just go for a session cookie.</p>

<p>If your primary audience is humans, and you don't need to integrate with third parties, don't bother with OAuth. Just make sure your API is only available over HTTPS, and issue a session token that the server can revoke after login. Strictly speaking it doesn't need to be a cookie; I've seen APIs that stash the token in HTML5 session storage and provide it in the Authorization header or as a query param.</p>

<p>If you have SSL set up properly, your users will get the expected padlock in the browser, and you'll be safe from anyone in between you and the client. If the client is compromised, you're screwed anyways. And since the client can't keep a secret, there aren't a lot of advantages to more complex HMAC schemes.</p>
","22469327","1674","<java><security><rest><jersey><hmac>","1","1","1","2014-03-18 02:32:37","","0","1","850271","","2014-03-18 02:28:01","2014-03-18 02:07:58","","","2014-03-18 02:32:37"
"12712519","HTTP MAC Authentication using C#","<p>I'm trying to create a client for the new tent.io protocol that's being developed and they are using the HTTP MAC Oauth2 scheme described by <a href=""http://tools.ietf.org/html/draft-ietf-oauth-v2-http-mac-01"" rel=""noreferrer"">http://tools.ietf.org/html/draft-ietf-oauth-v2-http-mac-01</a>.</p>

<p>I've written a simple method in C# that creates the Authorization header, but when I submit my request I get a simple ""Invalid MAC signature"" error. </p>

<p>Since I don't have a reference implementation, I'm struggling to figure out what's wrong with my code. I'm posting it here in the hope that somebody can spot my mistake.</p>

<pre><code>public string GetAuthorizationHeader(string macKeyIdentifier, string macKey, string macAlgorithm, string method, Uri uri)
{
    TimeSpan t = (DateTime.UtcNow - new DateTime(1970, 1, 1));
    string timestamp = ((int)t.TotalSeconds).ToString();

    string nonce = new Random().Next().ToString();

    string normalizedString = string.Format(""{0}\n{1}\n{2}\n{3}\n{4}\n{5}\n\n"", 
                                            timestamp, 
                                            nonce, 
                                            method,
                                            uri.PathAndQuery, 
                                            uri.Host, 
                                            uri.Port);

    HashAlgorithm hashGenerator = null;
    if (macAlgorithm == ""hmac-sha-256"")
    {
        hashGenerator = new HMACSHA256(Encoding.ASCII.GetBytes(macKey));
    }
    else if (macAlgorithm == ""hmac-sha-1"")
    {
        hashGenerator = new HMACSHA1(Encoding.ASCII.GetBytes(macKey));
    }
    else
    {
        throw new InvalidOperationException(""Unsupported MAC algorithm"");
    }

    string hash = System.Convert.ToBase64String(hashGenerator.ComputeHash(Encoding.ASCII.GetBytes(normalizedString)));

    StringBuilder authorizationHeader = new StringBuilder();
    authorizationHeader.AppendFormat(@""id=""""{0}"""",ts=""""{1}"""",nonce=""""{2}"""",mac=""""{3}"""""",
                                     macKeyIdentifier, timestamp, nonce, hash);

    return authorizationHeader.ToString();
}
</code></pre>

<p>I create the full header using the returned value and it looks something lke this</p>

<p>Authorization: MAC id=""a:dfsdfa2"",ts=""1349277638"",nonce=""1469030797"",mac=""ibZ/HXaoz2VgBer3CK7K9vu0po3K+E36K+TQ9Sgcw6o=""</p>

<p>I'm sure I'm missing something small, but I cannot see it. </p>

<p>Any help would be very much appreciated!</p>
","<p>Nicely executed tool at <a href=""http://buchananweb.co.uk/security01.aspx"" rel=""nofollow"">http://buchananweb.co.uk/security01.aspx</a> showing HMAC using MD5 and SHA1, SHA256, SHA384, SHA512</p>
","12713384","1673","<c#><.net><oauth-2.0><hmac>","6","0","2","2012-10-04 08:14:50","12723028","1","2","344002","","2012-10-04 07:43:31","2012-10-03 16:11:39","","","2012-10-03 17:07:03"
"12712519","HTTP MAC Authentication using C#","<p>I'm trying to create a client for the new tent.io protocol that's being developed and they are using the HTTP MAC Oauth2 scheme described by <a href=""http://tools.ietf.org/html/draft-ietf-oauth-v2-http-mac-01"" rel=""noreferrer"">http://tools.ietf.org/html/draft-ietf-oauth-v2-http-mac-01</a>.</p>

<p>I've written a simple method in C# that creates the Authorization header, but when I submit my request I get a simple ""Invalid MAC signature"" error. </p>

<p>Since I don't have a reference implementation, I'm struggling to figure out what's wrong with my code. I'm posting it here in the hope that somebody can spot my mistake.</p>

<pre><code>public string GetAuthorizationHeader(string macKeyIdentifier, string macKey, string macAlgorithm, string method, Uri uri)
{
    TimeSpan t = (DateTime.UtcNow - new DateTime(1970, 1, 1));
    string timestamp = ((int)t.TotalSeconds).ToString();

    string nonce = new Random().Next().ToString();

    string normalizedString = string.Format(""{0}\n{1}\n{2}\n{3}\n{4}\n{5}\n\n"", 
                                            timestamp, 
                                            nonce, 
                                            method,
                                            uri.PathAndQuery, 
                                            uri.Host, 
                                            uri.Port);

    HashAlgorithm hashGenerator = null;
    if (macAlgorithm == ""hmac-sha-256"")
    {
        hashGenerator = new HMACSHA256(Encoding.ASCII.GetBytes(macKey));
    }
    else if (macAlgorithm == ""hmac-sha-1"")
    {
        hashGenerator = new HMACSHA1(Encoding.ASCII.GetBytes(macKey));
    }
    else
    {
        throw new InvalidOperationException(""Unsupported MAC algorithm"");
    }

    string hash = System.Convert.ToBase64String(hashGenerator.ComputeHash(Encoding.ASCII.GetBytes(normalizedString)));

    StringBuilder authorizationHeader = new StringBuilder();
    authorizationHeader.AppendFormat(@""id=""""{0}"""",ts=""""{1}"""",nonce=""""{2}"""",mac=""""{3}"""""",
                                     macKeyIdentifier, timestamp, nonce, hash);

    return authorizationHeader.ToString();
}
</code></pre>

<p>I create the full header using the returned value and it looks something lke this</p>

<p>Authorization: MAC id=""a:dfsdfa2"",ts=""1349277638"",nonce=""1469030797"",mac=""ibZ/HXaoz2VgBer3CK7K9vu0po3K+E36K+TQ9Sgcw6o=""</p>

<p>I'm sure I'm missing something small, but I cannot see it. </p>

<p>Any help would be very much appreciated!</p>
","<p>It turns out the code above is perfect, but I was passing the wrong HTTP method value into it! </p>

<p>Where I was getting the error, I was POST'ing JSON, but I had actually put ""GET"" into the GetAuthorizationMethod!</p>

<p>Once I'd corrected that, I got an access_token value from Tent.is. </p>
","12723028","1673","<c#><.net><oauth-2.0><hmac>","6","3","2","2012-10-04 08:14:50","12723028","1","2","344002","","2012-10-04 07:43:31","2012-10-03 16:11:39","","","2012-10-04 08:14:50"
"18486903","Using HMAC with Web App and API","<p>I have been trying to implement a system of authorisation for my API which would be able to work for a web app. I have looked at three legged OAuth as well as signature verification, but I am not really interested in OAuth. The method I am testing out can be found <a href=""http://www.thebuzzmedia.com/designing-a-secure-rest-api-without-oauth-authentication"" rel=""nofollow noreferrer"">here</a>.
It uses HMAC to authorize sign the request similar to Amazon Signature. I have just cobbled together a working example here. Nothing really fancy. Just a proof of concept.</p>

<p>Client side uses CryptoJs and JQuery</p>

<pre><code>

   //Dummy credentials
    var username = 'username';
    var password = 'password';

    //first create the key and store it in memory for the duration of the app
    var KEY = CryptoJS.SHA512(username + ""."" + password).toString();
    var url = ""http://127.0.0.1/whisppa/api"";

    //setup the parameters that will be sent to the server
    var params = 
    {
        ""user"" : username,
        ""requested_url"" : CryptoJS.MD5(url).toString(),//hash the url to make it shorter
        ""signature_version"" : ""1.0"",
        ""time"" : 0
    }

    //get all parameters and sort them
    var props = [];
    for(var prop in params)
    {
        props.push(prop);
    }
    props.sort();

    //concatenate the parameters as a parameter string and set the time value
    var param_string = """";
    for(var prop in props)
    {
        prop = props[prop];
        if(prop == ""time"")
        {
            params.time = Math.round(new Date() / 1000);
        }

        param_string += prop + ""="" + params[prop] + ""&""; 
    }
    param_string = param_string.substring(0, param_string.length - 1);

    //generate the hmac of the request to be set in the header
    var hmac = CryptoJS.HmacSHA512(param_string, KEY).toString();

    //make the request
    $.ajax({
        type:""GET"",
        beforeSend: function (request)
        {
            request.setRequestHeader(""Auth-KEY"", hmac);
        },
        url: url,
        data: ""params="" + escape(JSON.stringify(params)),
        processData: false,
        success: function(msg) {
            $('body').html(msg);
        }
    }); 
</code></pre>   

<p>Using slim php framework and php 5.4 for the server.</p>

<pre><code>         


    //define the time before the app starts
    define('TIME', round(microtime(true)));

    $headers = getallheaders();

    //just make a few checks here to ensure necessary params are set
    if(!isset($_GET['params']) || !isset($headers['Auth-KEY']))
    {
        $app->halt(400);
    }
    //get the parameters from the get string
    $params = json_decode($_GET['params']);

    //make some more checks for important parameters
    if(!isset($params->time) || !isset($params->user))
    {
        $app->halt(400);
    }

    //get the parameters and sort them
    $properties = get_object_vars($params);
    ksort($properties);

    //concatenate the parameters as a parameter string
    $param_string = '';
    foreach($properties as $prop => $value)
    {
        $param_string .= $prop . '=' . $value . '&'; 
    }
    $param_string = substr($param_string, 0, strlen($param_string) - 1);

    //in reality, fetch the user from the database
    $password = 'password';

    //create the hash and then generate the HMAC
    $KEY = hash('SHA512', $params->user . '.' . $password);
    $Auth_KEY = hash_hmac('SHA512', $param_string, $KEY);

    //verify the request
    if($Auth_KEY == $headers['Auth-KEY'])
    {
        $app->halt(401);
    }

    //verify the time
    if(TIME - $params->time > 60)
    {
        $app->halt(408);
    } 

    //TODO: verify the requested url matches the current url

</code></pre>

<p>Obviously, there are problems with this.
What I can see is </p>

<ol>
<li><p>How to store the user data server side. I can't store the plaintext password, I can't store the password hashed and storing the user's key is asking for trouble. I can't seem to get around this issue.</p></li>
<li><p>Is it possible to store the key client side while the app is running in memory such that it can't be gotten at? Obviously, using a tool like firebug or the webdev tools that come with chrome and firefox, you can get at it. but is it possible to nest it in code so deeply or even in an anonymous function such that, you are unable to get at it easily. I am not very worried about this though since it will be my own app that is running.</p></li>
<li><p>What is an appropriate timeout to apply to the request?</p></li>
<li><p>Are there any glaring holes that I can't see? Maybe due to inattention blindness.</p></li>
</ol>

<p>Thanks.</p>

<p><strong>EDIT</strong></p>

<p>As I said, this is just a proof, I forgot to add that the request method/verb will be added to the hash as well.</p>

<p><a href=""https://stackoverflow.com/questions/5487757/using-hmac-sha1-for-api-authentication-how-to-store-the-client-password-secure"">This answer</a> seems to hold the answer to password storage, but it is not clear how to use api keys/share secret.</p>

<p><strong>EDIT 2</strong></p>

<p>Another issue I see here is allowing users to enter their passwords on other consumers applications. A good solution will be to use some sort of API keys or Shared secret, but then any ideas on this?</p>
","<p>Reading this article <a href=""http://www.matasano.com/articles/javascript-cryptography/"" rel=""nofollow"">Javascript Cryptography Considered Harmful</a>, Ive decided to simply use SSL. API will also use access keys and nonces.</p>
","19082835","1666","<php><api><security><oauth><hmac>","1","1","1","2013-09-29 20:19:37","19082835","0","1","-1","","2017-05-23 12:05:35","2013-08-28 11:41:55","","","2013-09-29 20:19:37"
"39280452","have HMAC SHA256 in pure Swift (Vapor) project","<p>I am new in Swift based <a href=""https://github.com/vapor/vapor"" rel=""nofollow noreferrer"">Vapor</a> backend framework, I just setup the HelloWorld project. </p>

<p>I need to use <strong>HMAC SHA256</strong> algorithm to encrypt data. I searched on internet, and found <a href=""https://stackoverflow.com/questions/35620960/generating-hmac-sha256-from-byte-array-in-swift"">something like this</a>, but they are all based on iOS or OSX framework, which uses C library and can be added by <code>import &lt;CommonCrypto/CommonHMAC.h&gt;</code>.</p>

<p>How can I add CommonCrypto or HMAC to my Vapor project? If it is impossible, how can I have a pure swift HMAC Sha256 algorithm? Is there such dependency I can add to <em>Package.swift</em> ?</p>
","<p>You should be able to the the <a href=""https://github.com/krzyzanowskim/CryptoSwift"" rel=""nofollow noreferrer"">CryptoSwift</a> project or at least the code from it.</p>

<p>It is a terrible solution on a Mac or iOS device because it does not have hardware support and is hundreds to 1000 times slower than Apple's Common Crypto. But is about as fast as possible in code only.</p>
","39280923","1666","<swift3><hmac><vapor>","1","1","3","2017-03-10 14:18:59","","1","1","-1","","2017-05-23 12:25:17","2016-09-01 20:34:39","","2017-03-10 14:18:59","2016-09-01 21:12:14"
"39280452","have HMAC SHA256 in pure Swift (Vapor) project","<p>I am new in Swift based <a href=""https://github.com/vapor/vapor"" rel=""nofollow noreferrer"">Vapor</a> backend framework, I just setup the HelloWorld project. </p>

<p>I need to use <strong>HMAC SHA256</strong> algorithm to encrypt data. I searched on internet, and found <a href=""https://stackoverflow.com/questions/35620960/generating-hmac-sha256-from-byte-array-in-swift"">something like this</a>, but they are all based on iOS or OSX framework, which uses C library and can be added by <code>import &lt;CommonCrypto/CommonHMAC.h&gt;</code>.</p>

<p>How can I add CommonCrypto or HMAC to my Vapor project? If it is impossible, how can I have a pure swift HMAC Sha256 algorithm? Is there such dependency I can add to <em>Package.swift</em> ?</p>
","<p>Agreed with @zaph answer, and if you want to use more optimized and fast solution, then import OpenSSL in swift using SPM (<a href=""https://github.com/Zewo/OpenSSL"" rel=""nofollow"">https://github.com/Zewo/OpenSSL</a>) and then use OpenSSL based HMAC apis. </p>

<p>Reference: <a href=""https://github.com/yoshiki/HMACHash/blob/master/Sources/HMACHash.swift"" rel=""nofollow"">https://github.com/yoshiki/HMACHash/blob/master/Sources/HMACHash.swift</a></p>
","39298272","1666","<swift3><hmac><vapor>","1","0","3","2017-03-10 14:18:59","","1","1","-1","","2017-05-23 12:25:17","2016-09-01 20:34:39","","","2016-09-02 17:57:04"
"39280452","have HMAC SHA256 in pure Swift (Vapor) project","<p>I am new in Swift based <a href=""https://github.com/vapor/vapor"" rel=""nofollow noreferrer"">Vapor</a> backend framework, I just setup the HelloWorld project. </p>

<p>I need to use <strong>HMAC SHA256</strong> algorithm to encrypt data. I searched on internet, and found <a href=""https://stackoverflow.com/questions/35620960/generating-hmac-sha256-from-byte-array-in-swift"">something like this</a>, but they are all based on iOS or OSX framework, which uses C library and can be added by <code>import &lt;CommonCrypto/CommonHMAC.h&gt;</code>.</p>

<p>How can I add CommonCrypto or HMAC to my Vapor project? If it is impossible, how can I have a pure swift HMAC Sha256 algorithm? Is there such dependency I can add to <em>Package.swift</em> ?</p>
","<p>If you're using Vapor 0.17 or later, you should be able to do <code>import HMAC</code> and <code>import SHA2</code></p>

<p>From there you can easily create SHA1 hashes using HMAC.</p>

<p>Check out the Crypto package that Vapor uses: <a href=""https://github.com/vapor/crypto"" rel=""nofollow"">https://github.com/vapor/crypto</a></p>

<p>Additionally, Vapor's default hasher is SHA256 with HMAC. So you can do <code>drop.hash.make(""foo"")</code> and that will work.</p>
","39396496","1666","<swift3><hmac><vapor>","1","4","3","2017-03-10 14:18:59","","1","1","-1","","2017-05-23 12:25:17","2016-09-01 20:34:39","","","2016-09-08 16:55:57"
"3018173","Double hashing passwords - client & server","<p>Hey, first, let me say, I'm not asking about things like md5(md5(..., there are already topics about it.</p>

<p>My question is this:</p>

<p>We allow our clients to store their passwords locally. Naturally, we don't want them stored in plan text, so we hmac them locally, before storing and/or sending. Now, this is fine, but if this is all we did, then the server would have the stored hmac, and since the client only needs to send the hmac, not the plain text password, an attacker could use the stored hashes from the server to access anyone's account (in the catastrophic scenario where someone would get such an access to the database, of course).</p>

<p>So, our idea was to encode the password on the client once via hmac, send it to the server, and there encode it a second time via hmac and match it against the stored, two times hmac'ed password. This would ensure that:</p>

<ul>
<li>The client can store the password locally without having to store it as plain text</li>
<li>The client can send the password without having to worry (too much) about other network parties</li>
<li>The server can store the password without having to worry about someone stealing it from the server and using it to log in.</li>
</ul>

<p>Naturally, all the other things (strong passwords, double salt, etc) apply as well, but aren't really relevant to the question.</p>

<p>The actual question is: does this sound like a solid security design ? Did we overlook any flaws with doing things this way ? Is there maybe a security pattern for something like this ?</p>

<p>Addendum: the reason we don't want to locally store the password in plain text on the client is because as sad as it is, many people still use the same password for multiple services, so getting the 'real' password would be a bigger security breach for the user than getting his hash stolen.</p>
","<p>Caveat: I'm not a security expert. I'll ping <a href=""https://stackoverflow.com/users/2525/blowdart"">blowdart</a> to see if he fancies joining in.</p>

<p>If the client is just storing the hash, and effectively transmitting something <em>just</em> based on the hash, then they're <em>effectively</em> storing it in plain text. The only benefit that the first hash is providing is that if they've used the same password on a different system, that other system won't be compromised if the hash is revealed.</p>

<p>To put it another way: if someone can get hold of the hash that's stored on the server, that's all they need to log into the system... just like plain text storage.</p>
","3018241","1665","<security><passwords><hash><design-patterns><hmac>","9","7","7","2010-06-10 21:54:22","3018292","1","2","220621","","2010-06-10 21:08:09","2010-06-10 20:20:26","","2017-05-23 10:27:30","2010-06-10 20:28:40"
"3018173","Double hashing passwords - client & server","<p>Hey, first, let me say, I'm not asking about things like md5(md5(..., there are already topics about it.</p>

<p>My question is this:</p>

<p>We allow our clients to store their passwords locally. Naturally, we don't want them stored in plan text, so we hmac them locally, before storing and/or sending. Now, this is fine, but if this is all we did, then the server would have the stored hmac, and since the client only needs to send the hmac, not the plain text password, an attacker could use the stored hashes from the server to access anyone's account (in the catastrophic scenario where someone would get such an access to the database, of course).</p>

<p>So, our idea was to encode the password on the client once via hmac, send it to the server, and there encode it a second time via hmac and match it against the stored, two times hmac'ed password. This would ensure that:</p>

<ul>
<li>The client can store the password locally without having to store it as plain text</li>
<li>The client can send the password without having to worry (too much) about other network parties</li>
<li>The server can store the password without having to worry about someone stealing it from the server and using it to log in.</li>
</ul>

<p>Naturally, all the other things (strong passwords, double salt, etc) apply as well, but aren't really relevant to the question.</p>

<p>The actual question is: does this sound like a solid security design ? Did we overlook any flaws with doing things this way ? Is there maybe a security pattern for something like this ?</p>

<p>Addendum: the reason we don't want to locally store the password in plain text on the client is because as sad as it is, many people still use the same password for multiple services, so getting the 'real' password would be a bigger security breach for the user than getting his hash stolen.</p>
","<p>I'm not exactly sure what this buys you over storing the password locally in plaintext.  </p>

<p>The purpose of local encryption is to prevent a hacker from being able to send the password to your server.  However, if you are going to send the encrypted form over... well, you haven't bought anything.</p>

<p>Instead, the local machine should store the password in a two-way encrypted format.  Meaning that it can be decrypted.  Which you do prior to transmittal.  The db can store a one-way encrypted format (even using a separate encryption mechanism).  Prior to comparison, you encrypt what you received then check.</p>
","3018245","1665","<security><passwords><hash><design-patterns><hmac>","9","0","7","2010-06-10 21:54:22","3018292","1","2","220621","","2010-06-10 21:08:09","2010-06-10 20:20:26","","","2010-06-10 20:29:11"
"3018173","Double hashing passwords - client & server","<p>Hey, first, let me say, I'm not asking about things like md5(md5(..., there are already topics about it.</p>

<p>My question is this:</p>

<p>We allow our clients to store their passwords locally. Naturally, we don't want them stored in plan text, so we hmac them locally, before storing and/or sending. Now, this is fine, but if this is all we did, then the server would have the stored hmac, and since the client only needs to send the hmac, not the plain text password, an attacker could use the stored hashes from the server to access anyone's account (in the catastrophic scenario where someone would get such an access to the database, of course).</p>

<p>So, our idea was to encode the password on the client once via hmac, send it to the server, and there encode it a second time via hmac and match it against the stored, two times hmac'ed password. This would ensure that:</p>

<ul>
<li>The client can store the password locally without having to store it as plain text</li>
<li>The client can send the password without having to worry (too much) about other network parties</li>
<li>The server can store the password without having to worry about someone stealing it from the server and using it to log in.</li>
</ul>

<p>Naturally, all the other things (strong passwords, double salt, etc) apply as well, but aren't really relevant to the question.</p>

<p>The actual question is: does this sound like a solid security design ? Did we overlook any flaws with doing things this way ? Is there maybe a security pattern for something like this ?</p>

<p>Addendum: the reason we don't want to locally store the password in plain text on the client is because as sad as it is, many people still use the same password for multiple services, so getting the 'real' password would be a bigger security breach for the user than getting his hash stolen.</p>
","<p>What is the initial hashing of the password intended to achieve? It will protect against discovery of the plain-text version of the password. It won't prevent the use of that hash value to calculate the doubly hashed value.</p>
","3018247","1665","<security><passwords><hash><design-patterns><hmac>","9","0","7","2010-06-10 21:54:22","3018292","1","2","220621","","2010-06-10 21:08:09","2010-06-10 20:20:26","","","2010-06-10 20:29:28"
"3018173","Double hashing passwords - client & server","<p>Hey, first, let me say, I'm not asking about things like md5(md5(..., there are already topics about it.</p>

<p>My question is this:</p>

<p>We allow our clients to store their passwords locally. Naturally, we don't want them stored in plan text, so we hmac them locally, before storing and/or sending. Now, this is fine, but if this is all we did, then the server would have the stored hmac, and since the client only needs to send the hmac, not the plain text password, an attacker could use the stored hashes from the server to access anyone's account (in the catastrophic scenario where someone would get such an access to the database, of course).</p>

<p>So, our idea was to encode the password on the client once via hmac, send it to the server, and there encode it a second time via hmac and match it against the stored, two times hmac'ed password. This would ensure that:</p>

<ul>
<li>The client can store the password locally without having to store it as plain text</li>
<li>The client can send the password without having to worry (too much) about other network parties</li>
<li>The server can store the password without having to worry about someone stealing it from the server and using it to log in.</li>
</ul>

<p>Naturally, all the other things (strong passwords, double salt, etc) apply as well, but aren't really relevant to the question.</p>

<p>The actual question is: does this sound like a solid security design ? Did we overlook any flaws with doing things this way ? Is there maybe a security pattern for something like this ?</p>

<p>Addendum: the reason we don't want to locally store the password in plain text on the client is because as sad as it is, many people still use the same password for multiple services, so getting the 'real' password would be a bigger security breach for the user than getting his hash stolen.</p>
","<p>No, this isn't safe. The hashed value is effectively the password. The fact the password was derived from something else that the user thinks of as <em>the</em> password doesn't matter. It's a secret value that authenticates a user, right? Sounds like a password to me.</p>

<p>I think it hinges on the statement, ""Naturally, we don't want them stored in plan text, so we hmac them locally, before storing and/or sending."" If the system is altered so that the hash password now has the same power the password once had, the same level of caution should be used with the hashed password.</p>
","3018265","1665","<security><passwords><hash><design-patterns><hmac>","9","3","7","2010-06-10 21:54:22","3018292","1","2","220621","","2010-06-10 21:08:09","2010-06-10 20:20:26","","","2010-06-10 20:31:29"
"3018173","Double hashing passwords - client & server","<p>Hey, first, let me say, I'm not asking about things like md5(md5(..., there are already topics about it.</p>

<p>My question is this:</p>

<p>We allow our clients to store their passwords locally. Naturally, we don't want them stored in plan text, so we hmac them locally, before storing and/or sending. Now, this is fine, but if this is all we did, then the server would have the stored hmac, and since the client only needs to send the hmac, not the plain text password, an attacker could use the stored hashes from the server to access anyone's account (in the catastrophic scenario where someone would get such an access to the database, of course).</p>

<p>So, our idea was to encode the password on the client once via hmac, send it to the server, and there encode it a second time via hmac and match it against the stored, two times hmac'ed password. This would ensure that:</p>

<ul>
<li>The client can store the password locally without having to store it as plain text</li>
<li>The client can send the password without having to worry (too much) about other network parties</li>
<li>The server can store the password without having to worry about someone stealing it from the server and using it to log in.</li>
</ul>

<p>Naturally, all the other things (strong passwords, double salt, etc) apply as well, but aren't really relevant to the question.</p>

<p>The actual question is: does this sound like a solid security design ? Did we overlook any flaws with doing things this way ? Is there maybe a security pattern for something like this ?</p>

<p>Addendum: the reason we don't want to locally store the password in plain text on the client is because as sad as it is, many people still use the same password for multiple services, so getting the 'real' password would be a bigger security breach for the user than getting his hash stolen.</p>
","<p>As others have said, taking the client and your system in isolation this doesn't really buy you anything - the first hash simply becomes the password.</p>

<p>The value comes if (as is likely) the client uses that same password on other systems.  In this case, should the client machine be compromised then at least your local copy of their hashed password doesn't allow the attacker access to other systems. Obviously the attacker of the client <em>will</em> now be able to access your server - they have, after all, got the password.</p>

<p>An attacker having access to the double-hashed value on the server won't buy them anything, since they can't reverse that to get the single hash (i.e., the ""password"").  Of course, if the attacker is in a position to read your security database then I suspect they have other attack vectors available :)</p>

<p>Also, as another poster said, make sure you are using a salt on both hashes.  Without doing so, reversing the hashes may actually be quite simple if the passwords are not strong.</p>

<p>EDIT - actually, thinking about it, since you are using a hash as the password you don't really need to use a salt on the server.  No way anyone is going to be able to create a rainbow table that's effective :)  Still need one on the client though.</p>
","3018292","1665","<security><passwords><hash><design-patterns><hmac>","9","6","7","2010-06-10 21:54:22","3018292","1","2","220621","","2010-06-10 21:08:09","2010-06-10 20:20:26","","2010-06-10 21:06:04","2010-06-10 20:36:40"
"3018173","Double hashing passwords - client & server","<p>Hey, first, let me say, I'm not asking about things like md5(md5(..., there are already topics about it.</p>

<p>My question is this:</p>

<p>We allow our clients to store their passwords locally. Naturally, we don't want them stored in plan text, so we hmac them locally, before storing and/or sending. Now, this is fine, but if this is all we did, then the server would have the stored hmac, and since the client only needs to send the hmac, not the plain text password, an attacker could use the stored hashes from the server to access anyone's account (in the catastrophic scenario where someone would get such an access to the database, of course).</p>

<p>So, our idea was to encode the password on the client once via hmac, send it to the server, and there encode it a second time via hmac and match it against the stored, two times hmac'ed password. This would ensure that:</p>

<ul>
<li>The client can store the password locally without having to store it as plain text</li>
<li>The client can send the password without having to worry (too much) about other network parties</li>
<li>The server can store the password without having to worry about someone stealing it from the server and using it to log in.</li>
</ul>

<p>Naturally, all the other things (strong passwords, double salt, etc) apply as well, but aren't really relevant to the question.</p>

<p>The actual question is: does this sound like a solid security design ? Did we overlook any flaws with doing things this way ? Is there maybe a security pattern for something like this ?</p>

<p>Addendum: the reason we don't want to locally store the password in plain text on the client is because as sad as it is, many people still use the same password for multiple services, so getting the 'real' password would be a bigger security breach for the user than getting his hash stolen.</p>
","<p>I am running out the door, but the Skeet pinged and you don't mess with the Skeet.</p>

<p>What you're doing is replacing a password with another constant value. You gain nothing here, the only security you have is that the plain text password cannot be discovered on the client machine.</p>

<p>What you then appear to do is treating the HMAC (are you sure you mean HMAC? If so, where is the key coming from, and stored?) of the password as the password itself - you send it from the client to the server where it is used to authenticate. The second HMAC or hashing is meaningless - you're comparing against the value sent - it's a password by any other name. So, as an attacker, instead of stealing the password, I just need to steal the HMAC stored on the client machine. Nothing is gained at all here.</p>
","3018352","1665","<security><passwords><hash><design-patterns><hmac>","9","12","7","2010-06-10 21:54:22","3018292","1","2","220621","","2010-06-10 21:08:09","2010-06-10 20:20:26","","","2010-06-10 20:43:57"
"3018173","Double hashing passwords - client & server","<p>Hey, first, let me say, I'm not asking about things like md5(md5(..., there are already topics about it.</p>

<p>My question is this:</p>

<p>We allow our clients to store their passwords locally. Naturally, we don't want them stored in plan text, so we hmac them locally, before storing and/or sending. Now, this is fine, but if this is all we did, then the server would have the stored hmac, and since the client only needs to send the hmac, not the plain text password, an attacker could use the stored hashes from the server to access anyone's account (in the catastrophic scenario where someone would get such an access to the database, of course).</p>

<p>So, our idea was to encode the password on the client once via hmac, send it to the server, and there encode it a second time via hmac and match it against the stored, two times hmac'ed password. This would ensure that:</p>

<ul>
<li>The client can store the password locally without having to store it as plain text</li>
<li>The client can send the password without having to worry (too much) about other network parties</li>
<li>The server can store the password without having to worry about someone stealing it from the server and using it to log in.</li>
</ul>

<p>Naturally, all the other things (strong passwords, double salt, etc) apply as well, but aren't really relevant to the question.</p>

<p>The actual question is: does this sound like a solid security design ? Did we overlook any flaws with doing things this way ? Is there maybe a security pattern for something like this ?</p>

<p>Addendum: the reason we don't want to locally store the password in plain text on the client is because as sad as it is, many people still use the same password for multiple services, so getting the 'real' password would be a bigger security breach for the user than getting his hash stolen.</p>
","<p>blowdart hit the nail on the head - you're just changing the secet to steal, not securing anything.  What you're <em>trying</em> to replicate is an old authentication protocol that I can't for the life of me remember the name of.  Here's how it works:</p>

<p>Upon initialization, the server gets your password, iteratively hashed n times, represented by F<sub>n</sub>(pass).  The client has the password, and the number n.</p>

<p>You go to authenticate, and send the server F<sub>n-1</sub>(pass) - that is, the password hashed n-1 times.  The server hashes it one more time, compares it to F<sub>n</sub>(pass) and if they match you get access.  The server then replaces F<sub>n</sub>(pass) with F<sub>n-1</sub>(pass) and you decrement n.</p>

<p>The next time you go to authenticate you send F<sub>n-2</sub>(pass) and the process repeats.</p>

<p>Let's examine the security:</p>

<ul>
<li>MITM: no resistence built into the protocol, you'd have to layer it inside SSL</li>
<li>Replay attacks: they don't work, because the server has decremented the hash iterations.  </li>
<li>Eavesdropping:  The <em>next</em> authentication will be done using F<sub>n-1</sub>(pass).  You have F<sub>n</sub>(pass).  Going from F<sub>n</sub>(pass) to F<sub>n-1</sub>(pass) is, by definition of the hash function, infeasible</li>
<li>Owning the server: You don't know the client's password, nor can you authenticate as them, because again you would need F<sub>n-1</sub>(pass) when you only have F<sub>n</sub></li>
<li>Owning the client: Since you store F<sub>n-1</sub>(pass) (so they don't have to enter pass) - then owning the client would let the attacker login.  If you only store n and not the password this would be prevented, but you clearly want to save the password.</li>
</ul>

<p>That's what you're trying to accomplish.  However, there's a reason this protocol isn't in use - it's a giant bitch to syncronize.  If the client and server get out of sync due to a half-completed step, you're locked out.  Any resilience you built in to avoid that would likely reduce the security to replay or eavesdropping.</p>
","3018844","1665","<security><passwords><hash><design-patterns><hmac>","9","1","7","2010-06-10 21:54:22","3018292","1","2","220621","","2010-06-10 21:08:09","2010-06-10 20:20:26","","","2010-06-10 21:54:22"
"29384473","Hash Based Message Authentication Codes (MAC) does not match at receiver end","<p>I am trying to create a basic demo application where one class will generate a message to be sent in the following format
SignedMessage_using_HMAC.BASE64encoded_message</p>

<p>At the receiving end (DecodeData.java) first I wan to compare if the message was signed using the right key by decrypting the signed message and then signing the message with the same key and then compare the signed message at the receiver end the signed message sent.
But these do not work.</p>

<p>When I try to decode the Base64 encoded message it does not give me the correct message.</p>

<p>Can anyone please guide me what's wrong here?</p>

<pre><code>import org.apache.commons.codec.binary.Base64;
import javax.crypto.Mac;
import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;

public class EncodeData {

public static void main(String[] args) throws Exception {
    String myAppContext = ""abc123def"";
    String consumerSecret = ""959595"";
    String algorithm = ""HMACSHA256"";
    byte[] encodedContext;

    // Base64 encoded context;
    encodedContext = new Base64(true).encode(myAppContext.getBytes());
    System.out.print(""Encoded Context : "");
    System.out.println(encodedContext);

    //Generate Signed context           
    SecretKey hmacKey = new SecretKeySpec(consumerSecret.getBytes(), algorithm);
    Mac mac = Mac.getInstance(algorithm);
    mac.init(hmacKey);

    byte[] digest = mac.doFinal(myAppContext.getBytes());       
    System.out.print(""Created digest : "");
    System.out.println(digest);

    // Signed Based64 context and Base64 encoded context        
    String messageToSend = digest.toString() + ""."" + encodedContext.toString();
    System.out.println(messageToSend);
}   
}
</code></pre>

<hr>

<pre><code>import org.apache.commons.codec.binary.Base64;
import javax.crypto.Mac;
import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import java.util.Arrays;

public class DecodeData {

public static void main(String[] args) throws Exception {
    byte[] myAppContext;
    String consumerSecret = ""959595"";
    String algorithm = ""HMACSHA256"";
    String messageRecieved = args[0];
    byte[] singedDecodedContext;

    String recievedDigest = messageRecieved.split(""[.]"", 2)[0];             
    String encodedContext = messageRecieved.split(""[.]"", 2)[1];
    myAppContext = new Base64(true).decode(encodedContext);
    System.out.print(""Decrypted message : "");
    System.out.println(myAppContext);

    //Check if the message is sent by the correct sender by signing the context and matching with signed context
    SecretKey hmacKey = new SecretKeySpec(consumerSecret.getBytes(), algorithm);
    Mac mac = Mac.getInstance(algorithm);
    mac.init(hmacKey);      
    byte[] digest = mac.doFinal(myAppContext);

    System.out.print(""Created digest : "");
    System.out.println(digest);

    if (Arrays.equals(digest, recievedDigest.getBytes())) {
        System.out.println(""Message was not tempered and was sent by the correct sender"");
    } else {
        System.out.println(""Message was tempered or was not sent by the corrrect sender"");
    }   
}   
}
</code></pre>

<p><strong><em>Output</em></strong> </p>

<p>Output of EncodeData.java
    C:\Users\vivek.patel\Desktop\API\java\encoding>java -cp commons-codec-1.10.jar;. EncodeData
    Encoded Context : [B@510bfe2c
    Created digest : [B@73f025cb
    [B@73f025cb.[B@510bfe2c</p>

<p>Output of DecodeData.java
    C:\Users\vivek.patel\Desktop\API\java\encoding>java -cp commons-codec-   1.10.jar;. DecodeData [B@73f025cb.[B@510bfe2c</p>

<pre><code>Decrypted message : [B@6726a408
Created digest : [B@7168bd8b
Message was tempered or was not sent by the correct sender
</code></pre>
","<p>Before evaluate your code, you aren't actually comparing the values.
If you print like this:</p>

<pre><code>System.out.print(""Encoded Context : "");
System.out.println(encodedContext);
</code></pre>

<p>You are just printting the type of the array ([B) followed by its hashCode.
Initialize a String with the encoded bytes:</p>

<pre><code>System.out.println(new String(encodedContext, ""UTF8""));
</code></pre>

<p>You should also consider using an explicit charset instead of the default one (depending on your origin charset).</p>

<p>Try it and re-post your results.</p>
","29384803","1663","<java><encryption><hmac>","1","0","1","2015-04-01 09:38:42","29384803","1","2","1816580","","2015-04-01 09:38:42","2015-04-01 06:45:24","","","2015-04-01 07:04:59"
"46974128","AWS Signature Version 4 S3 Upload using Node.js","<p>I've been following the AWS example on how to generate a V4 HMAC signature. I've done this successfully in Java but I'm trying to get it to work in Node/JavaScript. When I use my code I generate all the correct intermediary keys in their 1st example below but on the next example when given the test StringToSign the same code that generated the correct intermediary keys fails to generate the supposed correct signature.</p>

<p><strong>Correct Intermediary Keys:</strong></p>

<pre><code>secretkey = 'wJalrXUtnFEMI/K7MDENG+bPxRfiCYEXAMPLEKEY'
dateStamp = '20120215'
regionName = 'us-east-1'
serviceName = 'iam'

kSecret  = '41575334774a616c725855746e46454d492f4b374d44454e472b62507852666943594558414d504c454b4559'
kDate    = '969fbb94feb542b71ede6f87fe4d5fa29c789342b0f407474670f0c2489e0a0d'
kRegion  = '69daa0209cd9c5ff5c8ced464a696fd4252e981430b10e3d3fd8e2f197d7a70c'
kService = 'f72cfd46f26bc4643f06a11eabb6c0ba18780c19a8da0c31ace671265e3c87fa'
kSigning = 'f4780e2d9f65fa895f9c67b32ce1baf0b0d8a43505a000a1a9e090d414db404d'
</code></pre>

<p><a href=""http://docs.aws.amazon.com/general/latest/gr/signature-v4-examples.html"" rel=""nofollow noreferrer"">http://docs.aws.amazon.com/general/latest/gr/signature-v4-examples.html</a>.</p>

<p><strong>Fails With the Following Input</strong></p>

<pre><code>secretkey = 'wJalrXUtnFEMI/K7MDENG+bPxRfiCYEXAMPLEKEY'
dateStamp = '20151229'
regionName = 'us-east-1'
serviceName = 's3'
</code></pre>

<p><strong>StringToSign</strong>
  eyAiZXhwaXJhdGlvbiI6ICIyMDE1LTEyLTMwVDEyOjAwOjAwLjAwMFoiLA0KICAiY29uZGl0aW9ucyI6IFsNCiAgICB7ImJ1Y2tldCI6ICJzaWd2NGV4YW1wbGVidWNrZXQifSwNCiAgICBbInN0YXJ0cy13aXRoIiwgIiRrZXkiLCAidXNlci91c2VyMS8iXSwNCiAgICB7ImFjbCI6ICJwdWJsaWMtcmVhZCJ9LA0KICAgIHsic3VjY2Vzc19hY3Rpb25fcmVkaXJlY3QiOiAiaHR0cDovL3NpZ3Y0ZXhhbXBsZWJ1Y2tldC5zMy5hbWF6b25hd3MuY29tL3N1Y2Nlc3NmdWxfdXBsb2FkLmh0bWwifSwNCiAgICBbInN0YXJ0cy13aXRoIiwgIiRDb250ZW50LVR5cGUiLCAiaW1hZ2UvIl0sDQogICAgeyJ4LWFtei1tZXRhLXV1aWQiOiAiMTQzNjUxMjM2NTEyNzQifSwNCiAgICB7IngtYW16LXNlcnZlci1zaWRlLWVuY3J5cHRpb24iOiAiQUVTMjU2In0sDQogICAgWyJzdGFydHMtd2l0aCIsICIkeC1hbXotbWV0YS10YWciLCAiIl0sDQoNCiAgICB7IngtYW16LWNyZWRlbnRpYWwiOiAiQUtJQUlPU0ZPRE5ON0VYQU1QTEUvMjAxNTEyMjkvdXMtZWFzdC0xL3MzL2F3czRfcmVxdWVzdCJ9LA0KICAgIHsieC1hbXotYWxnb3JpdGhtIjogIkFXUzQtSE1BQy1TSEEyNTYifSwNCiAgICB7IngtYW16LWRhdGUiOiAiMjAxNTEyMjlUMDAwMDAwWiIgfQ0KICBdDQp9</p>

<p><strong>Correct Signature:</strong> 46503978d3596de22955b4b18d6dfb1d54e8c5958727d5bdcd02cc1119c60fc9
<strong>My Signature:</strong> e7318f0bfd7d86fb9ba81c314f62192ee2baf7273792ef01ffafeb430fc2fb68</p>

<p><a href=""http://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-post-example.html"" rel=""nofollow noreferrer"">http://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-post-example.html</a></p>

<p><strong>My Code</strong></p>

<pre><code>var crypto = require(""crypto-js"")

module.exports.getSignatureKey = function(key, dateStamp, regionName, serviceName) {
    var kSecret = ""AWS4"" + key
    var kDate = crypto.HmacSHA256(dateStamp, kSecret)
    var kRegion = crypto.HmacSHA256(regionName, kDate)
    var kService = crypto.HmacSHA256(serviceName, kRegion)
    var kSigning = crypto.HmacSHA256(""aws4_request"", kService)
    return kSigning;
}

module.exports.sign = function(signatureKey,stringToSign) {
    var unencodedSignature = crypto.HmacSHA256(stringToSign,signatureKey)
    return unencodedSignature
}

module.exports.getSignature = function(stringToSign,secretKey,dateStamp,regionName, serviceName) {
    var signingKey = this.getSignatureKey(secretKey,dateStamp,regionName,serviceName)

    return this.sign(signingKey,stringToSign)
}
</code></pre>
","<p>The AWS example in the second link has the wrong signature. Using my solution I am able to successfully upload to s3.</p>

<p>Something else to consider is that the crypto-js node library outputs the signatures already in hex. Theres no need to do a manual conversion yourself as you would if you we in Java using the example code they provide.</p>
","46978707","1619","<node.js><amazon-web-services><amazon-s3><hmac>","1","2","1","2017-10-28 13:59:31","46978707","2","","975649","","2017-10-28 13:59:31","2017-10-27 11:37:09","","","2017-10-27 15:35:35"
"19944720","Javascript using HMAC SHA256 with base64 encoded key","<p>I am using the following function to create a base64 HMAC SHA256 hash</p>

<p><a href=""https://gist.github.com/hanih/7443134"" rel=""nofollow"">https://gist.github.com/hanih/7443134</a></p>

<pre><code>function sha256() {
    var sha256;

    sha256 = ""undefined"" !== typeof exports ? exports : {};
    sha256.hexcase = 0;
    sha256.b64pad = ""="";
    var b64pad = ""="";
    var hexcase = 0;
    sha256.hex_sha256 = function(a) {
        return sha256.rstr2hex(sha256.rstr_sha256(sha256.str2rstr_utf8(a)));
    };
    sha256.b64_sha256 = function(a) {
        return sha256.rstr_sha256(sha256.str2rstr_utf8(a));
    };
    sha256.any_sha256 = function(a, c) {
        return sha256.rstr2any(sha256.rstr_sha256(sha256.str2rstr_utf8(a)), c);
    };
    sha256.hex_hmac_sha256 = function(a, c) {
        return sha256.rstr2hex(sha256.rstr_hmac_sha256(sha256.str2rstr_utf8(a), sha256.str2rstr_utf8(c)));
    };
    sha256.b64_hmac_sha256 = function(a, c) {
        return sha256.rstr2b64(sha256.rstr_hmac_sha256(sha256.str2rstr_utf8(a), sha256.str2rstr_utf8(c)));
    };
    sha256.b64_hmac_sha256_sha256 = function(a, c) {
        return sha256.rstr2b64(sha256.rstr_hmac_sha256(a, sha256.rstr_sha256(c)));
    };
    sha256.any_hmac_sha256 = function(a, c, b) {
        return sha256.rstr2any(sha256.rstr_hmac_sha256(sha256.str2rstr_utf8(a), sha256.str2rstr_utf8(c)), b);
    };
    sha256.sha256_vm_test = function() {
        return ""ba7816bf8f01cfea414140de5dae2223b00361a396177a9cb410ff61f20015ad"" == sha256.hex_sha256(""abc"").toLowerCase();
    };
    sha256.sha256_vm_test1 = function() {
        return ""d7a8fbb307d7809469ca9abcb0082e4f8d5651e46d3cdb762d02d0bf37c9e592"" == sha256.hex_sha256(""The quick brown fox jumps over the lazy dog"").toLowerCase();
    };
    sha256.rstr_sha256 = function(a) {
        return sha256.binb2rstr(sha256.binb_sha256(sha256.rstr2binb(a), 8 * a.length));
    };
    sha256.rstr_hmac_sha256 = function(a, c) {
        var b = sha256.rstr2binb(a);
        16 &lt; b.length &amp;&amp; ( b = sha256.binb_sha256(b, 8 * a.length));
        for (var d = Array(16), e = Array(16), f = 0; 16 &gt; f; f++)
            d[f] = b[f] ^ 909522486, e[f] = b[f] ^ 1549556828;
        b = sha256.binb_sha256(d.concat(sha256.rstr2binb(c)), 512 + 8 * c.length);
        return sha256.binb2rstr(sha256.binb_sha256(e.concat(b), 768));
    };
    sha256.rstr2hex = function(a) {
        try { hexcase;
        } catch(c) {
            hexcase = 0;
        }
        for (var b = hexcase ? ""0123456789ABCDEF"" : ""0123456789abcdef"", d = """", e, f = 0; f &lt; a.length; f++)
            e = a.charCodeAt(f), d += b.charAt(e &gt;&gt;&gt; 4 &amp; 15) + b.charAt(e &amp; 15);
        return d;
    };
    sha256.rstr2b64 = function(a) {
        try { b64pad;
        } catch(c) {
            b64pad = """";
        }
        for (var b = """", d = a.length, e = 0; e &lt; d; e += 3)
            for (var f = a.charCodeAt(e) &lt;&lt; 16 | (e + 1 &lt; d ? a.charCodeAt(e + 1) &lt;&lt; 8 : 0) | (e + 2 &lt; d ? a.charCodeAt(e + 2) : 0), g = 0; 4 &gt; g; g++)
                b = 8 * e + 6 * g &gt; 8 * a.length ? b + b64pad : b + ""ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"".charAt(f &gt;&gt;&gt; 6 * (3 - g) &amp; 63);
        return b;
    };
    sha256.rstr2any = function(a, c) {
        var b = c.length, d = [], e, f, g, h, j = Array(Math.ceil(a.length / 2));
        for ( e = 0; e &lt; j.length; e++)
            j[e] = a.charCodeAt(2 * e) &lt;&lt; 8 | a.charCodeAt(2 * e + 1);
        for (; 0 &lt; j.length; ) {
            h = [];
            for ( e = g = 0; e &lt; j.length; e++)
                if ( g = (g &lt;&lt; 16) + j[e], f = Math.floor(g / b), g -= f * b, 0 &lt; h.length || 0 &lt; f)
                    h[h.length] = f;
            d[d.length] = g;
            j = h;
        }
        b = """";
        for ( e = d.length - 1; 0 &lt;= e; e--)
            b += c.charAt(d[e]);
        d = Math.ceil(8 * a.length / (Math.log(c.length) / Math.log(2)));
        for ( e = b.length; e &lt; d; e++)
            b = c[0] + b;
        return b;
    };
    sha256.str2rstr_utf8 = function(a) {
        for (var c = """", b = -1, d, e; ++b &lt; a.length; )
            d = a.charCodeAt(b), e = b + 1 &lt; a.length ? a.charCodeAt(b + 1) : 0, 55296 &lt;= d &amp;&amp; 56319 &gt;= d &amp;&amp; 56320 &lt;= e &amp;&amp; 57343 &gt;= e &amp;&amp; ( d = 65536 + ((d &amp; 1023) &lt;&lt; 10) + (e &amp; 1023), b++), 127 &gt;= d ? c += String.fromCharCode(d) : 2047 &gt;= d ? c += String.fromCharCode(192 | d &gt;&gt;&gt; 6 &amp; 31, 128 | d &amp; 63) : 65535 &gt;= d ? c += String.fromCharCode(224 | d &gt;&gt;&gt; 12 &amp; 15, 128 | d &gt;&gt;&gt; 6 &amp; 63, 128 | d &amp; 63) : 2097151 &gt;= d &amp;&amp; (c += String.fromCharCode(240 | d &gt;&gt;&gt; 18 &amp; 7, 128 | d &gt;&gt;&gt; 12 &amp; 63, 128 | d &gt;&gt;&gt; 6 &amp; 63, 128 | d &amp; 63));
        return c;
    };
    sha256.str2rstr_utf16le = function(a) {
        for (var c = """", b = 0; b &lt; a.length; b++)
            c += String.fromCharCode(a.charCodeAt(b) &amp; 255, a.charCodeAt(b) &gt;&gt;&gt; 8 &amp; 255);
        return c;
    };
    str2rstr_utf16be = function(a) {
        for (var c = """", b = 0; b &lt; a.length; b++)
            c += String.fromCharCode(a.charCodeAt(b) &gt;&gt;&gt; 8 &amp; 255, a.charCodeAt(b) &amp; 255);
        return c;
    };
    sha256.rstr2binb = function(a) {
        for (var c = Array(a.length &gt;&gt; 2), b = 0; b &lt; c.length; b++)
            c[b] = 0;
        for ( b = 0; b &lt; 8 * a.length; b += 8)
            c[b &gt;&gt; 5] |= (a.charCodeAt(b / 8) &amp; 255) &lt;&lt; 24 - b % 32;
        return c;
    };
    sha256.binb2rstr = function(a) {
        for (var c = """", b = 0; b &lt; 32 * a.length; b += 8)
            c += String.fromCharCode(a[b &gt;&gt; 5] &gt;&gt;&gt; 24 - b % 32 &amp; 255);
        return c;
    };
    sha256.sha256_S = function(a, c) {
        return a &gt;&gt;&gt; c | a &lt;&lt; 32 - c;
    };
    sha256.sha256_R = function(a, c) {
        return a &gt;&gt;&gt; c;
    };
    sha256.sha256_Ch = function(a, c, b) {
        return a &amp; c ^ ~a &amp; b;
    };
    sha256.sha256_Maj = function(a, c, b) {
        return a &amp; c ^ a &amp; b ^ c &amp; b;
    };
    sha256.sha256_Sigma0256 = function(a) {
        return sha256.sha256_S(a, 2) ^ sha256.sha256_S(a, 13) ^ sha256.sha256_S(a, 22);
    };
    sha256.sha256_Sigma1256 = function(a) {
        return sha256.sha256_S(a, 6) ^ sha256.sha256_S(a, 11) ^ sha256.sha256_S(a, 25);
    };
    sha256.sha256_Gamma0256 = function(a) {
        return sha256.sha256_S(a, 7) ^ sha256.sha256_S(a, 18) ^ sha256.sha256_R(a, 3);
    };
    sha256.sha256_Gamma1256 = function(a) {
        return sha256.sha256_S(a, 17) ^ sha256.sha256_S(a, 19) ^ sha256.sha256_R(a, 10);
    };
    sha256.sha256_Sigma0512 = function(a) {
        return sha256.sha256_S(a, 28) ^ sha256.sha256_S(a, 34) ^ sha256.sha256_S(a, 39);
    };
    sha256.sha256_Sigma1512 = function(a) {
        return sha256.sha256_S(a, 14) ^ sha256.sha256_S(a, 18) ^ sha256.sha256_S(a, 41);
    };
    sha256.sha256_Gamma0512 = function(a) {
        return sha256.sha256_S(a, 1) ^ sha256.sha256_S(a, 8) ^ sha256.sha256_R(a, 7);
    };
    sha256.sha256_Gamma1512 = function(a) {
        return sha256.sha256_S(a, 19) ^ sha256.sha256_S(a, 61) ^ sha256.sha256_R(a, 6);
    };
    sha256.sha256_K = [1116352408, 1899447441, -1245643825, -373957723, 961987163, 1508970993, -1841331548, -1424204075, -670586216, 310598401, 607225278, 1426881987, 1925078388, -2132889090, -1680079193, -1046744716, -459576895, -272742522, 264347078, 604807628, 770255983, 1249150122, 1555081692, 1996064986, -1740746414, -1473132947, -1341970488, -1084653625, -958395405, -710438585, 113926993, 338241895, 666307205, 773529912, 1294757372, 1396182291, 1695183700, 1986661051, -2117940946, -1838011259, -1564481375, -1474664885, -1035236496, -949202525, -778901479, -694614492, -200395387, 275423344, 430227734, 506948616, 659060556, 883997877, 958139571, 1322822218, 1537002063, 1747873779, 1955562222, 2024104815, -2067236844, -1933114872, -1866530822, -1538233109, -1090935817, -965641998];
    sha256.binb_sha256 = function(a, c) {
        var b = [1779033703, -1150833019, 1013904242, -1521486534, 1359893119, -1694144372, 528734635, 1541459225], d = Array(64), e, f, g, h, j, k, m, o, p, n, l, q;
        a[c &gt;&gt; 5] |= 128 &lt;&lt; 24 - c % 32;
        a[(c + 64 &gt;&gt; 9 &lt;&lt; 4) + 15] = c;
        for ( p = 0; p &lt; a.length; p += 16) {
            e = b[0];
            f = b[1];
            g = b[2];
            h = b[3];
            j = b[4];
            k = b[5];
            m = b[6];
            o = b[7];
            for ( n = 0; 64 &gt; n; n++)
                d[n] = 16 &gt; n ? a[n + p] : sha256.safe_add(sha256.safe_add(sha256.safe_add(sha256.sha256_Gamma1256(d[n - 2]), d[n - 7]), sha256.sha256_Gamma0256(d[n - 15])), d[n - 16]), l = sha256.safe_add(sha256.safe_add(sha256.safe_add(sha256.safe_add(o, sha256.sha256_Sigma1256(j)), sha256.sha256_Ch(j, k, m)), sha256.sha256_K[n]), d[n]), q = sha256.safe_add(sha256.sha256_Sigma0256(e), sha256.sha256_Maj(e, f, g)), o = m, m = k, k = j, j = sha256.safe_add(h, l), h = g, g = f, f = e, e = sha256.safe_add(l, q);
            b[0] = sha256.safe_add(e, b[0]);
            b[1] = sha256.safe_add(f, b[1]);
            b[2] = sha256.safe_add(g, b[2]);
            b[3] = sha256.safe_add(h, b[3]);
            b[4] = sha256.safe_add(j, b[4]);
            b[5] = sha256.safe_add(k, b[5]);
            b[6] = sha256.safe_add(m, b[6]);
            b[7] = sha256.safe_add(o, b[7]);
        }
        return b;
    };
    sha256.safe_add = function(a, c) {
        var b = (a &amp; 65535) + (c &amp; 65535);
        return (a &gt;&gt; 16) + (c &gt;&gt; 16) + (b &gt;&gt; 16) &lt;&lt; 16 | b &amp; 65535;
    };
    return sha256;

}

module.exports = sha256;
</code></pre>

<p>it contains a function named b64_hmac_sha256 that works fine.</p>

<p>I use a base 64 encoded key that I decode using the following function: </p>

<p><a href=""https://gist.github.com/hanih/7443203"" rel=""nofollow"">https://gist.github.com/hanih/7443203</a></p>

<pre><code>function urlDecode(str){
    str=str.replace(new RegExp('\\+','g'),' ');
    return unescape(str);
}
function urlEncode(str){
    str=escape(str);
    str=str.replace(new RegExp('\\+','g'),'%2B');
    return str.replace(new RegExp('%20','g'),'+');
}

var END_OF_INPUT = -1;

var base64Chars = new Array(
    'A','B','C','D','E','F','G','H',
    'I','J','K','L','M','N','O','P',
    'Q','R','S','T','U','V','W','X',
    'Y','Z','a','b','c','d','e','f',
    'g','h','i','j','k','l','m','n',
    'o','p','q','r','s','t','u','v',
    'w','x','y','z','0','1','2','3',
    '4','5','6','7','8','9','+','/'
);

var reverseBase64Chars = new Array();
for (var i=0; i &lt; base64Chars.length; i++){
    reverseBase64Chars[base64Chars[i]] = i;
}

var base64Str;
var base64Count;
function setBase64Str(str){
    base64Str = str;
    base64Count = 0;
}
function readBase64(){    
    if (!base64Str) return END_OF_INPUT;
    if (base64Count &gt;= base64Str.length) return END_OF_INPUT;
    var c = base64Str.charCodeAt(base64Count) &amp; 0xff;
    base64Count++;
    return c;
}
function encodeBase64(str){
    setBase64Str(str);
    var result = '';
    var inBuffer = new Array(3);
    var lineCount = 0;
    var done = false;
    while (!done &amp;&amp; (inBuffer[0] = readBase64()) != END_OF_INPUT){
        inBuffer[1] = readBase64();
        inBuffer[2] = readBase64();
        result += (base64Chars[ inBuffer[0] &gt;&gt; 2 ]);
        if (inBuffer[1] != END_OF_INPUT){
            result += (base64Chars [(( inBuffer[0] &lt;&lt; 4 ) &amp; 0x30) | (inBuffer[1] &gt;&gt; 4) ]);
            if (inBuffer[2] != END_OF_INPUT){
                result += (base64Chars [((inBuffer[1] &lt;&lt; 2) &amp; 0x3c) | (inBuffer[2] &gt;&gt; 6) ]);
                result += (base64Chars [inBuffer[2] &amp; 0x3F]);
            } else {
                result += (base64Chars [((inBuffer[1] &lt;&lt; 2) &amp; 0x3c)]);
                result += ('=');
                done = true;
            }
        } else {
            result += (base64Chars [(( inBuffer[0] &lt;&lt; 4 ) &amp; 0x30)]);
            result += ('=');
            result += ('=');
            done = true;
        }
        lineCount += 4;
        if (lineCount &gt;= 76){
            result += ('\n');
            lineCount = 0;
        }
    }
    return result;
}
function readReverseBase64(){   
    if (!base64Str) return END_OF_INPUT;
    while (true){      
        if (base64Count &gt;= base64Str.length) return END_OF_INPUT;
        var nextCharacter = base64Str.charAt(base64Count);
        base64Count++;
        if (reverseBase64Chars[nextCharacter]){
            return reverseBase64Chars[nextCharacter];
        }
        if (nextCharacter == 'A') return 0;
    }
    return END_OF_INPUT;
}

function ntos(n){
    n=n.toString(16);
    if (n.length == 1) n=""0""+n;
    n=""%""+n;
    return unescape(n);
}

function decodeBase64(str){
    setBase64Str(str);
    var result = """";
    var inBuffer = new Array(4);
    var done = false;
    while (!done &amp;&amp; (inBuffer[0] = readReverseBase64()) != END_OF_INPUT
        &amp;&amp; (inBuffer[1] = readReverseBase64()) != END_OF_INPUT){
        inBuffer[2] = readReverseBase64();
        inBuffer[3] = readReverseBase64();
        result += ntos((((inBuffer[0] &lt;&lt; 2) &amp; 0xff)| inBuffer[1] &gt;&gt; 4));
        if (inBuffer[2] != END_OF_INPUT){
            result +=  ntos((((inBuffer[1] &lt;&lt; 4) &amp; 0xff)| inBuffer[2] &gt;&gt; 2));
            if (inBuffer[3] != END_OF_INPUT){
                result +=  ntos((((inBuffer[2] &lt;&lt; 6)  &amp; 0xff) | inBuffer[3]));
            } else {
                done = true;
            }
        } else {
            done = true;
        }
    }
    return result;
}

var digitArray = new Array('0','1','2','3','4','5','6','7','8','9','a','b','c','d','e','f');
function toHex(n){
    var result = ''
    var start = true;
    for (var i=32; i&gt;0;){
        i-=4;
        var digit = (n&gt;&gt;i) &amp; 0xf;
        if (!start || digit != 0){
            start = false;
            result += digitArray[digit];
        }
    }
    return (result==''?'0':result);
}

function pad(str, len, pad){
    var result = str;
    for (var i=str.length; i&lt;len; i++){
        result = pad + result;
    }
    return result;
}

function encodeHex(str){
    var result = """";
    for (var i=0; i&lt;str.length; i++){
        result += pad(toHex(str.charCodeAt(i)&amp;0xff),2,'0');
    }
    return result;
}

var hexv = {
  ""00"":0,""01"":1,""02"":2,""03"":3,""04"":4,""05"":5,""06"":6,""07"":7,""08"":8,""09"":9,""0A"":10,""0B"":11,""0C"":12,""0D"":13,""0E"":14,""0F"":15,
  ""10"":16,""11"":17,""12"":18,""13"":19,""14"":20,""15"":21,""16"":22,""17"":23,""18"":24,""19"":25,""1A"":26,""1B"":27,""1C"":28,""1D"":29,""1E"":30,""1F"":31,
  ""20"":32,""21"":33,""22"":34,""23"":35,""24"":36,""25"":37,""26"":38,""27"":39,""28"":40,""29"":41,""2A"":42,""2B"":43,""2C"":44,""2D"":45,""2E"":46,""2F"":47,
  ""30"":48,""31"":49,""32"":50,""33"":51,""34"":52,""35"":53,""36"":54,""37"":55,""38"":56,""39"":57,""3A"":58,""3B"":59,""3C"":60,""3D"":61,""3E"":62,""3F"":63,
  ""40"":64,""41"":65,""42"":66,""43"":67,""44"":68,""45"":69,""46"":70,""47"":71,""48"":72,""49"":73,""4A"":74,""4B"":75,""4C"":76,""4D"":77,""4E"":78,""4F"":79,
  ""50"":80,""51"":81,""52"":82,""53"":83,""54"":84,""55"":85,""56"":86,""57"":87,""58"":88,""59"":89,""5A"":90,""5B"":91,""5C"":92,""5D"":93,""5E"":94,""5F"":95,
  ""60"":96,""61"":97,""62"":98,""63"":99,""64"":100,""65"":101,""66"":102,""67"":103,""68"":104,""69"":105,""6A"":106,""6B"":107,""6C"":108,""6D"":109,""6E"":110,""6F"":111,
  ""70"":112,""71"":113,""72"":114,""73"":115,""74"":116,""75"":117,""76"":118,""77"":119,""78"":120,""79"":121,""7A"":122,""7B"":123,""7C"":124,""7D"":125,""7E"":126,""7F"":127,
  ""80"":128,""81"":129,""82"":130,""83"":131,""84"":132,""85"":133,""86"":134,""87"":135,""88"":136,""89"":137,""8A"":138,""8B"":139,""8C"":140,""8D"":141,""8E"":142,""8F"":143,
  ""90"":144,""91"":145,""92"":146,""93"":147,""94"":148,""95"":149,""96"":150,""97"":151,""98"":152,""99"":153,""9A"":154,""9B"":155,""9C"":156,""9D"":157,""9E"":158,""9F"":159,
  ""A0"":160,""A1"":161,""A2"":162,""A3"":163,""A4"":164,""A5"":165,""A6"":166,""A7"":167,""A8"":168,""A9"":169,""AA"":170,""AB"":171,""AC"":172,""AD"":173,""AE"":174,""AF"":175,
  ""B0"":176,""B1"":177,""B2"":178,""B3"":179,""B4"":180,""B5"":181,""B6"":182,""B7"":183,""B8"":184,""B9"":185,""BA"":186,""BB"":187,""BC"":188,""BD"":189,""BE"":190,""BF"":191,
  ""C0"":192,""C1"":193,""C2"":194,""C3"":195,""C4"":196,""C5"":197,""C6"":198,""C7"":199,""C8"":200,""C9"":201,""CA"":202,""CB"":203,""CC"":204,""CD"":205,""CE"":206,""CF"":207,
  ""D0"":208,""D1"":209,""D2"":210,""D3"":211,""D4"":212,""D5"":213,""D6"":214,""D7"":215,""D8"":216,""D9"":217,""DA"":218,""DB"":219,""DC"":220,""DD"":221,""DE"":222,""DF"":223,
  ""E0"":224,""E1"":225,""E2"":226,""E3"":227,""E4"":228,""E5"":229,""E6"":230,""E7"":231,""E8"":232,""E9"":233,""EA"":234,""EB"":235,""EC"":236,""ED"":237,""EE"":238,""EF"":239,
  ""F0"":240,""F1"":241,""F2"":242,""F3"":243,""F4"":244,""F5"":245,""F6"":246,""F7"":247,""F8"":248,""F9"":249,""FA"":250,""FB"":251,""FC"":252,""FD"":253,""FE"":254,""FF"":255
};

function decodeHex(str){
    str = str.toUpperCase().replace(new RegExp(""s/[^0-9A-Z]//g""));
    var result = """";
    var nextchar = """";
    for (var i=0; i&lt;str.length; i++){
        nextchar += str.charAt(i);
        if (nextchar.length == 2){
            result += ntos(hexv[nextchar]);
            nextchar = """";
        }
    }
    return result;

}
</code></pre>

<p>The problem happens when the decoded key contains uncommon characters</p>

<p>This encoded key works:</p>

<pre><code>dGhpc2lzYWxvbmdlcm1lc3NhZ2VvZmNvdXJzZXRoaXNpc2Fsb25nZXJtZXNzYWdlb2Zjb3Vyc2U=
</code></pre>

<p>but this doesn't work</p>

<pre><code>5VoyMfmtN7lBiFlyDcMX85Hjvw/oxj8IVcB0dn8N6CXr+F0nuPI2LQ3K/w==
</code></pre>
","","","1619","<javascript><hmac><sha256>","1","","0","2015-12-19 14:23:04","","0","","2432317","","2015-12-19 14:23:04","2013-11-13 03:29:20","","",""
"32314020","Node.js - req.on(""data"") in POST is never called even though req.body is not empty","<p>I'm doing the following : </p>

<pre><code>......
....
app.use(cookieParser());
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({  
  extended: true 
})); 

app.use('/public', express.static(__dirname + '/public'));

app.post('/uninstalled', function (req, res, next)
{     
  var bodyAsQueryString = queryString.stringify(req.body);
  console.log('bodyAsQueryString = ' + bodyAsQueryString);

  var hmacReceived = req.headers['x-shopify-hmac-sha256'];
  var calculatedHmac = crypto.createHmac('SHA256', config.app.secret);

  req.on(""data"", function(data) 
  {
     console.log('on data...');
     calculatedHmac.update(data);
  });

  req.on(""end"", function() 
  {
     console.log('on end...');
     calculatedHmac = calculatedHmac.digest(""base64"");
     console.log('hmacReceived = ' + hmacReceived);
     console.log('calculatedHmac = ' + calculatedHmac);
  });

  req.on(""error"", function(err) 
  {
     console.log('on error...');
     console.log(err);
     return next(err);
  });
});
</code></pre>

<p>None of the above <code>req.on(""..."")</code> is ever called (nothing is console-logged...) - What am I doing wrong ?</p>

<p>The value of <code>bodyAsQueryString</code> always looks smth like the following (I've replaced personal data with <code>xxxxx</code>) :</p>

<blockquote>
  <p>id=xxxxx&amp;name=xxxxx&amp;email=xxxxxx&amp;domain=xxxxxxx&amp;created_at=2015-03-21T00%3A31%3A36%2B00%3A00&amp;province=&amp;country=GB&amp;address1=xxxxxxxxx&amp;zip=E59JY&amp;city=London&amp;source=xxxx&amp;phone=xxxxxx&amp;updated_at=2015-08-19T15%3A12%3A31%2B01%3A00&amp;customer_email=&amp;latitude=xxxxx&amp;longitude=-xxxxxx&amp;primary_location_id=&amp;primary_locale=en&amp;country_code=GB&amp;country_name=United%20Kingdom&amp;currency=USD&amp;timezone=(GMT%2B00%3A00)%20Europe%2FLondon&amp;iana_timezone=Europe%2FLondon&amp;shop_owner=xxxxxx&amp;money_format=%24%20%7B%7Bamount%7D%7D&amp;money_with_currency_format=%24%20%7B%7Bamount%7D%7D%20USD&amp;province_code=&amp;taxes_included=false&amp;tax_shipping=&amp;county_taxes=true&amp;plan_display_name=affiliate&amp;plan_name=affiliate&amp;myshopify_domain=xxxxxx.myshopify.com&amp;google_apps_domain=&amp;google_apps_login_enabled=&amp;money_in_emails_format=%24%7B%7Bamount%7D%7D&amp;money_with_currency_in_emails_format=%24%7B%7Bamount%7D%7D%20USD&amp;eligible_for_payments=false&amp;requires_extra_payments_agreement=false&amp;password_enabled=true&amp;has_storefront=true&amp;setup_required=false</p>
</blockquote>
","<p>You need to use the raw POST body rather than req.body.</p>

<p>Try something like this:</p>

<pre><code>app.post('/somepath', function (req, res, next) {
    var hmacReceived = req.headers['x-shopify-hmac-sha256'];
    hmac = crypto.createHmac('SHA256',secret);

    req.on(""data"", function(data) {
        hmac.update(data);
    });

    req.on(""end"", function() {
        var calculatedHmac = hmac.digest(""base64"");
        var test1 = hmacReceived === calculatedHmac;
    });

    req.on(""error"", function(err) {
        return next(err);
    });
}
</code></pre>

<p>Further details in this similar question:</p>

<p><a href=""https://stackoverflow.com/questions/10305067/hmac-md5-validation-with-node-js-express-and-trialpay"">HMAC MD5 Validation with Node.js, Express and Trialpay</a></p>
","32314650","1616","<node.js><post><hmac>","1","1","2","2015-08-31 17:30:11","32314650","0","","2272048","","2015-08-31 17:28:32","2015-08-31 14:48:22","","2017-05-23 12:14:34","2015-08-31 15:22:20"
"32314020","Node.js - req.on(""data"") in POST is never called even though req.body is not empty","<p>I'm doing the following : </p>

<pre><code>......
....
app.use(cookieParser());
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({  
  extended: true 
})); 

app.use('/public', express.static(__dirname + '/public'));

app.post('/uninstalled', function (req, res, next)
{     
  var bodyAsQueryString = queryString.stringify(req.body);
  console.log('bodyAsQueryString = ' + bodyAsQueryString);

  var hmacReceived = req.headers['x-shopify-hmac-sha256'];
  var calculatedHmac = crypto.createHmac('SHA256', config.app.secret);

  req.on(""data"", function(data) 
  {
     console.log('on data...');
     calculatedHmac.update(data);
  });

  req.on(""end"", function() 
  {
     console.log('on end...');
     calculatedHmac = calculatedHmac.digest(""base64"");
     console.log('hmacReceived = ' + hmacReceived);
     console.log('calculatedHmac = ' + calculatedHmac);
  });

  req.on(""error"", function(err) 
  {
     console.log('on error...');
     console.log(err);
     return next(err);
  });
});
</code></pre>

<p>None of the above <code>req.on(""..."")</code> is ever called (nothing is console-logged...) - What am I doing wrong ?</p>

<p>The value of <code>bodyAsQueryString</code> always looks smth like the following (I've replaced personal data with <code>xxxxx</code>) :</p>

<blockquote>
  <p>id=xxxxx&amp;name=xxxxx&amp;email=xxxxxx&amp;domain=xxxxxxx&amp;created_at=2015-03-21T00%3A31%3A36%2B00%3A00&amp;province=&amp;country=GB&amp;address1=xxxxxxxxx&amp;zip=E59JY&amp;city=London&amp;source=xxxx&amp;phone=xxxxxx&amp;updated_at=2015-08-19T15%3A12%3A31%2B01%3A00&amp;customer_email=&amp;latitude=xxxxx&amp;longitude=-xxxxxx&amp;primary_location_id=&amp;primary_locale=en&amp;country_code=GB&amp;country_name=United%20Kingdom&amp;currency=USD&amp;timezone=(GMT%2B00%3A00)%20Europe%2FLondon&amp;iana_timezone=Europe%2FLondon&amp;shop_owner=xxxxxx&amp;money_format=%24%20%7B%7Bamount%7D%7D&amp;money_with_currency_format=%24%20%7B%7Bamount%7D%7D%20USD&amp;province_code=&amp;taxes_included=false&amp;tax_shipping=&amp;county_taxes=true&amp;plan_display_name=affiliate&amp;plan_name=affiliate&amp;myshopify_domain=xxxxxx.myshopify.com&amp;google_apps_domain=&amp;google_apps_login_enabled=&amp;money_in_emails_format=%24%7B%7Bamount%7D%7D&amp;money_with_currency_in_emails_format=%24%7B%7Bamount%7D%7D%20USD&amp;eligible_for_payments=false&amp;requires_extra_payments_agreement=false&amp;password_enabled=true&amp;has_storefront=true&amp;setup_required=false</p>
</blockquote>
","<p>Turns outs it's because I wasn't replying to the client anywhere in the callback with something like:</p>

<pre><code>res.sendStatus(200); or res.sendStatus(500); etc...
</code></pre>

<p>It's weird because my the code in my callbacks executes fine (even without ever replying to the client) but apparently
if the node parser realises there is a <code>req.on()</code> and no reply to the client, either inside or outside of it, it will ignore the <code>req.on(..)</code> which makes no sense really... Either the whole thing should break or none of it if a reply to the client is missing.</p>
","32316641","1616","<node.js><post><hmac>","1","0","2","2015-08-31 17:30:11","32314650","0","","2272048","","2015-08-31 17:28:32","2015-08-31 14:48:22","","2015-08-31 17:30:11","2015-08-31 17:24:36"
"1844623","What is the auth_tkt cookie format?","<p>The Apache module <code>auth_tkt</code> creates authentication cookies that can be verified cryptographically so a web server can generate <code>REMOTE_USER</code> without consulting a database. What is the specification for <code>auth_tkt</code> cookies?</p>
","<p>From the README inside <a href=""http://www.openfusion.com.au/labs/dist/mod_auth_tkt/mod_auth_tkt-2.1.0.tar.gz"" rel=""nofollow noreferrer"">http://www.openfusion.com.au/labs/dist/mod_auth_tkt/mod_auth_tkt-2.1.0.tar.gz</a></p>

<pre><code>Cookie Format

The TKTAuthCookieName cookie is constructed using following algorithm:`

('+' is concatenation operation)

cookie := digest + hextimestamp + user_id + '!' + user_data

or if using tokens:

cookie := digest + hextimestamp + user_id + '!' + token_list + '!' + user_data

digest := MD5(digest0 + key)

digest0 := MD5(iptstamp + key + user_id + '\0' + token_list + '\0' + user_data)

iptstamp is a 8 bytes long byte array, bytes 0-3 are filled with
client's IP address as a binary number in network byte order, bytes
4-7 are filled with timestamp as a binary number in network byte
order. 

hextimestamp is 8 character long hexadecimal number expressing
timestamp used in iptstamp. 

token_list is an optional comma-separated list of access tokens 
for this user. This list is checked if TKTAuthToken is set for a
particular area.

user_data is optional
</code></pre>
","2539092","1602","<apache><hmac>","0","3","1","2010-04-01 12:32:10","2539092","0","","36330","","2009-12-07 14:40:26","2009-12-04 03:17:57","","2010-04-01 12:32:10","2010-03-29 15:23:01"
"22683952","Security issue, HMAC in header vs https, or both?","<p>I'm setting up a server which an android app and an iPhone app will connect to. And I'm wondering what type of security is more secure for sending/requesting data?</p>

<p>Currently I generate a HMAC-SHA256 of the content I'm sending to the server in the header to verify its integrity. 
But I'm wondering if its more secure to use a https connection instead? If I use https, could I skip the HMAC?</p>

<p>I would like to know the differences in security, which is more secure? </p>

<p>And also, if I'm using either is it better to use both for an extra layer of security?</p>
","<p>Quick answer to your questions: SSL if used properly should give you more security guarantees than HMAC. So, usually SSL can be used in a way that removes the need for HMAC. </p>

<p>HMAC provides integrity as well as authenticity. Assuming the client and the server use pre-shared symmetric keys to calculate the HMACs, one side can be sure that the device on the other end has the secret key. This provides authenticity of both server and client.</p>

<p>What is missing in this picture (with just HMAC) is confidentiality. What is the nature of data exchanged between the server and client? Is there any sensitive user data being transferred during the communication that you don't want a man-in-the-middle to see? If so, then you may want to use SSL. </p>

<p>SSL gives you confidentiality (among other things). Meaning that you can be sure that you have a secured end-to-end connection and no man-in-the-middle can see what data is being exchanged between the server and client. However, common SSL usage does not include client machine authentication. Fro example, your web browser checks for Paypal's authenticity when you go to their https webpage. But the Paypal server does not ask your browser to send any certificate from your side. </p>

<p>Since you are comparing SSL with HMAC, I am assuming you care about authenticity of both sides. So, use SSL with both server and client authentication. This basically means that both of them would ask for each other's certificates and check different aspects of the certificates (i.e. common name, certificate issuer etc.). You can create your own certificate issuer to sign these certificates. </p>

<p>If you are making an app for AppStore or Google Play that users can simply install and start using, you may want to think through how the client side certificates will be generated, signed or who will sign them. You can remove the need for client side certificate (and signing) by adopting a model similar to <a href=""https://help.github.com/articles/generating-ssh-keys"" rel=""nofollow noreferrer"">GitHub's</a>, where the user manually informs the server of trusted public keys to authenticate devices. But you can probably see how this process might not be user friendly. </p>
","22890783","1576","<android><iphone><https><hmac>","2","7","1","2017-07-05 22:18:51","22890783","0","1","","","","2014-03-27 09:56:01","","2017-07-05 22:18:51","2014-04-06 06:34:50"
"48455982","R Binance API HMAC SHA256 signed message","<p>Im trying to send over signed api messages using the binance APIs I keep failing with a 404 error. can someone help me out with the below code please?</p>

<pre><code>library(jsonlite)
library(httr)
library(dplyr)
library(digest)


timestamp &lt;- 1516941586 #as.numeric(as.POSIXct(Sys.time()))

post_message &lt;- paste0(timestamp, 'public.api' ) # data_client.id = client 
id # data_key = key

sha.message &lt;- toupper(digest::hmac('private.api', object = post_message, 
algo = 'sha256', serialize = F))

url &lt;- 'https://api.binance.com/api/v3/account'

body = list('timestamp' = timestamp, 'signature' = sha.message)
body2 &lt;- paste(""?timestamp="",timestamp,""&amp;signature="",sha.message, sep = """")


httr::POST(url, body2 = body, verbose())
</code></pre>

<p>here is the documentation <a href=""https://github.com/binance-exchange/binance-official-api-docs/blob/master/rest-api.md"" rel=""nofollow noreferrer"">https://github.com/binance-exchange/binance-official-api-docs/blob/master/rest-api.md</a></p>
","<p>Based on example under section ""SIGNED Endpoint Examples for POST /api/v1/order"" in the website, you can follow something similar. You will need to replace with your own apiKey and secretKey.</p>

<pre><code>library(httr)
library(openssl)

url &lt;- 'https://api.binance.com/api/v3/account'
apiKey &lt;- ""vmPUZE6mv9SD5VNHk4HlWFsOr6aKE2zvsw0MuIgwCIPy6utIco14y7Ju91duEh8A""
secretKey &lt;- ""NhqPtmdSJYdKjVHjA7PZj4Mge3R5YNiP1e3UZjInClVN65XAbvqqM6A7H5fATj0j""

timestamp &lt;- 1516941586
recvWindow &lt;- 1e20
postmsg &lt;- paste0(""timestamp="", timestamp, ""&amp;recvWindow="", recvWindow)
signature &lt;- openssl::sha256(postmsg, key=secretKey)

GET(url, 
    add_headers(""X-MBX-APIKEY""=apiKey),
    query=list(timestamp=timestamp, recvWindow=recvWindow, signature=signature), 
    verbose())
</code></pre>
","48456395","1574","<r><api><post><sha256><hmac>","0","0","1","2018-01-26 06:10:27","48456395","0","","","","","2018-01-26 04:54:06","","2018-01-26 06:10:27","2018-01-26 05:54:56"
"34941233","Why HMAC sha256 return different value on PHP & Javascript","<p>I am trying to build a HMAC SHA256 string in Javascript using CryptoJS, my existing code is written in PHP using the Akamai library.</p>

<p>In some cases I am getting different results compared to PHP &amp; I am unable to understand why it is giving me different results</p>

<pre><code>    /* 
       &lt;php&gt; Using native hash_hmac
       Generating key by concatenating char 
    */ 

      $signature1 = hash_hmac('SHA256', ""st=1453362060~exp=1453363260~acl=/*"", chr(63));
      $signature2 = hash_hmac('SHA256', ""st=1453362060~exp=1453363260~acl=/*"", chr(63) . chr(23));
      $signature3 = hash_hmac('SHA256', ""st=1453362060~exp=1453363260~acl=/*"", chr(63) . chr(23) . chr(253));

    /*
       here is result from php
       signature1 : 3e086bb48ab9aafa85661f9ce1b7dac49befddf117ce2a42d93c92b6abe513ce ( matched: same as JavaScript)
       signature2 : 3667dd414a50f68f7ce083e540f27f68f7d0f18617b1fb1e4788bffeaeab59f6( matched: same as JavaScript)
       signature3 : dd5a20041661046fdee871c8b9e77b3190fbbf85937c098090a1d524719b6aa9 ( not matched: diff from JavaScript)
    */


    /* 
       &lt;JavaScript&gt; using CryptoJS
       Generating key by concatenating three char 
    */ 

    var signature1 = CryptoJS.HmacSHA256(""st=1453362060~exp=1453363260~acl=/*"", String.fromCharCode(63));
    var signature2 = CryptoJS.HmacSHA256(""st=1453362060~exp=1453363260~acl=/*"", String.fromCharCode(63) + String.fromCharCode(23));
    var signature3 = CryptoJS.HmacSHA256(""st=1453362060~exp=1453363260~acl=/*"", String.fromCharCode(63) + String.fromCharCode(23) + String.fromCharCode(253));

    /* 
       here is result from JavaScript
       signature1 : 3e086bb48ab9aafa85661f9ce1b7dac49befddf117ce2a42d93c92b6abe513ce ( matched: same as php)
       signature2 : 3667dd414a50f68f7ce083e540f27f68f7d0f18617b1fb1e4788bffeaeab59f6 ( matched: same as php)
       signature3 : 28075dc75de9f22f83e87772f09a89efb007f2e298167686832eff122ef6eb08 ( not matched: diff from php)
    */
</code></pre>

<p>First two HMAC values are matching but when I append the third char it produces different results, Can anyone please explain why this is. </p>

<p>here is<br>
<a href=""http://codepad.org/qtKsIJtT"" rel=""nofollow"">PHPFiddle</a> &amp; 
<a href=""http://jsfiddle.net/_anil/5c4yyeao/2/"" rel=""nofollow"">JSFiddle</a></p>
","<p>CryptoJS add UTF8 encoding in ""Key"" while creating hash sha256 so that we are getting different value.</p>

<p>If i wrap utf8_encode in PHP side then we will get same hmac value as compare to JavaScript </p>

<pre><code>     // &lt;php&gt;
     $key = chr(63) . chr(23) . chr(253);
     signature3 = hash_hmac('SHA256', ""st=1453362060~exp=1453363260~acl=/*"", utf8_encode($key));
</code></pre>
","34945401","1562","<javascript><php><sha256><hmac><cryptojs>","3","2","1","2016-08-17 15:59:22","34945401","0","4","5348307","","2016-08-17 15:59:22","2016-01-22 07:28:40","","2016-02-02 06:33:13","2016-01-22 11:14:48"
"17168115","REST Api authentication - exchange private key","<p>I'm adding rest API for mobile application into my existing grails web app. Since I'm having hard time with integrating OAuth2 provider into my application, I'm going to implement my own HMAC mechanism.</p>

<p>HMAC uses secret key and what I want is, that each user of application has it's own secret key. Now the thing is how do I transfer secret in a safe manner between API and mobile device initially.</p>

<p>Of course all communication will be through t SSL. But is it safe to send client secret from server to mobile client when connecting for the first time over the wire? </p>

<p>Or I should use one secret and store it with mobile client, which could be easily reverse-engineered?</p>

<p>Or maybe there are other and better ways to do it?</p>
","<p>You may want to look into <a href=""http://en.wikipedia.org/wiki/Key-agreement_protocol"" rel=""nofollow"">shared key authentication schemes</a> and implement custom mechanism.</p>

<p>Here is example how Amazon use it for REST request:</p>

<p><a href=""http://docs.aws.amazon.com/AWSECommerceService/latest/DG/Query_QueryAuth.html"" rel=""nofollow"">http://docs.aws.amazon.com/AWSECommerceService/latest/DG/Query_QueryAuth.html</a></p>

<p>and sample java code</p>

<p><a href=""http://docs.aws.amazon.com/AWSECommerceService/latest/DG/AuthJavaSampleSig2.html"" rel=""nofollow"">http://docs.aws.amazon.com/AWSECommerceService/latest/DG/AuthJavaSampleSig2.html</a></p>
","17203093","1534","<rest><authentication><grails><hmac>","2","0","1","2013-06-19 23:37:46","","0","","","","","2013-06-18 11:50:57","","","2013-06-19 23:37:46"
"53910845","Generate HMAC SHA256 signature Python","<p>Trying to generate HMAC SHA256 signature for 3Commas, I use the same parameters from the <a href=""https://github.com/3commas-io/3commas-official-api-docs/blob/master/rest-api.md#example-1-as-a-query-string"" rel=""nofollow noreferrer"">official example</a>, it should generate:
""30f678a157230290e00475cfffccbc92ae3659d94c145a2c0e9d0fa28f41c11a""</p>

<p>But I generate:
""17a656c7df48fa2db615bfc719627fc94e59265e6af18cc7714694ea5b58a11a""</p>

<p>Here is what I tried:</p>

<pre><code>secretkey = 'NhqPtmdSJYdKjVHjA7PZj4Mge3R5YNiP1e3UZjInClVN65XAbvqqM6A7H5fATj0j'
totalParams = '/public/api/ver1/accounts/new?type=binance&amp;name=binance_account&amp;api_key=XXXXXX&amp;secret=YYYYYY'
print 'signature = '+hashlib.sha256((secretkey+totalParams).encode('ASCII')).hexdigest()
</code></pre>

<p>Can anyone help me out?</p>
","<p>Try using the <code>hmac</code> module instead of the <code>hashlib</code> module:</p>

<pre><code>import hmac
import hashlib
secret_key = b""NhqPtmdSJYdKjVHjA7PZj4Mge3R5YNiP1e3UZjInClVN65XAbvqqM6A7H5fATj0j""
total_params = b""/public/api/ver1/accounts/new?type=binance&amp;name=binance_account&amp;api_key=XXXXXX&amp;secret=YYYYYY""
signature = hmac.new(secret_key, total_params, hashlib.sha256).hexdigest()
print(""signature = {0}"".format(signature))
</code></pre>

<p>This gives the desired result:</p>

<pre><code>signature = 30f678a157230290e00475cfffccbc92ae3659d94c145a2c0e9d0fa28f41c11a
</code></pre>
","53911060","1529","<python><python-3.x><hmac>","4","4","2","2019-11-12 15:47:02","53911060","0","1","","","","2018-12-24 08:14:01","","","2018-12-24 08:36:35"
"53910845","Generate HMAC SHA256 signature Python","<p>Trying to generate HMAC SHA256 signature for 3Commas, I use the same parameters from the <a href=""https://github.com/3commas-io/3commas-official-api-docs/blob/master/rest-api.md#example-1-as-a-query-string"" rel=""nofollow noreferrer"">official example</a>, it should generate:
""30f678a157230290e00475cfffccbc92ae3659d94c145a2c0e9d0fa28f41c11a""</p>

<p>But I generate:
""17a656c7df48fa2db615bfc719627fc94e59265e6af18cc7714694ea5b58a11a""</p>

<p>Here is what I tried:</p>

<pre><code>secretkey = 'NhqPtmdSJYdKjVHjA7PZj4Mge3R5YNiP1e3UZjInClVN65XAbvqqM6A7H5fATj0j'
totalParams = '/public/api/ver1/accounts/new?type=binance&amp;name=binance_account&amp;api_key=XXXXXX&amp;secret=YYYYYY'
print 'signature = '+hashlib.sha256((secretkey+totalParams).encode('ASCII')).hexdigest()
</code></pre>

<p>Can anyone help me out?</p>
","<p>I did implement it using a different approach few years ago.</p>

<pre><code>import hmac
import hashlib 
import binascii

def create_sha256_signature(key, message):
    byte_key = binascii.unhexlify(key)
    message = message.encode()
    return hmac.new(byte_key, message, hashlib.sha256).hexdigest().upper()

create_sha256_signature(""E49756B4C8FAB4E48222A3E7F3B97CC3"", ""TEST STRING"")
</code></pre>

<p><a href=""https://www.pyscoop.com/generate-hmac-sha256-signature-in-python/"" rel=""nofollow noreferrer"">https://www.pyscoop.com/generate-hmac-sha256-signature-in-python/</a></p>
","58822086","1529","<python><python-3.x><hmac>","4","0","2","2019-11-12 15:47:02","53911060","0","1","","","","2018-12-24 08:14:01","","","2019-11-12 15:47:02"
"52791095","Python TypeError - Expected bytes but got 'str' when trying to created signature","<p>I'm trying to create a signature for an API call - for which the documentation provides these instructions:</p>

<pre><code>timestamp = str(int(time.time()))
    message = timestamp + request.method + request.path_url + (request.body or '')
    signature = hmac.new(self.secret_key, message, hashlib.sha256).hexdigest()
</code></pre>

<p>However, I always get this error:</p>

<pre><code>Exception has occurred: TypeError key: expected bytes or bytearray, but got 'str' 

File ""/Users/dylanbrandonuom/BouncePay_Code/src/coinbase/Coinbase_API.py"", line 26, in __call__
signature = hmac.new(self.secret_key, message, hashlib.sha256).hexdigest()

File ""/Users/dylanbrandonuom/BouncePay_Code/src/coinbase/Coinbase_API.py"", line 40, in &lt;module&gt;
r = requests.get(api_url + 'user', auth=auth)
</code></pre>

<p>I've tried changing</p>

<pre><code>signature = hmac.new(self.secret_key, message, hashlib.sha256).hexdigest()
</code></pre>

<p>to </p>

<pre><code>signature = hmac.new(b'self.secret_key', message, hashlib.sha256).hexdigest()
</code></pre>

<p>but had no success.</p>

<p>Here is the second part of the error:</p>

<pre><code>api_url = 'https://api.coinbase.com/v2/'
auth = CoinbaseWalletAuth(API_KEY, API_SECRET)
r = requests.get(api_url + 'user', auth=auth)
</code></pre>

<p>Is anyone able to let me know why this keeps occurring?</p>

<p>I'm thinking it might be the message variable with <code>request.method</code> and <code>request.path_url</code>, but I'm not sure.</p>
","<p>The error message you're seeing tells you that you're passing a (unicode) string as the <code>key</code> argument to <code>hmac.new()</code>, but it expects bytes (or a bytearray).</p>

<p>This means that <code>self.secret_key</code> is a string, rather than a bytes object. There's no indication in your question where in your code <code>self.secret_key</code> is being assigned, but on the assumption that it's a constant somewhere, it might look like this:</p>

<pre><code>SECRET = 'some secret key'
</code></pre>

<p>If so, changing that line to something like </p>

<pre><code>SECRET = b'some secret key'
</code></pre>

<p>… ought to work. If you're assigning <code>self.secret_key</code> in some other way, it's impossible to know how to fix the problem without seeing that code.</p>
","52791351","1526","<python><python-3.x><python-requests><hmac><coinbase-api>","4","1","1","2018-10-13 09:49:42","52791351","0","","1014938","","2018-10-13 09:49:42","2018-10-13 08:33:33","","","2018-10-13 09:08:48"
"17003134","php's hmac sha256 implementation mismatches java's one","<p>i'm trying to reproduce in php the test cases mentioned in the official of totp computation reference (<a href=""http://tools.ietf.org/html/rfc6238"" rel=""nofollow"">http://tools.ietf.org/html/rfc6238</a> Appendix A) which are written in java. The reference provides example for sha1, sha256 and sha512 algorithm.  </p>

<p>I've found <a href=""http://www.opendoorinternet.co.uk/news/2013/05/09/simple-totp-rfc-6238-in-php"" rel=""nofollow"">this</a> nice example by Rob Swan (see the 8 digit example) that reproduces fine one test case (with sha1). But if I change the algorithm to sha256 or sha512 (and change the seeds too, according to the reference input data) I got different results from the reference's ones. </p>

<p>May the hmac hash function of php be different from java's one? </p>

<p>Thank you!</p>
","<p><strong>* SOLUTION</strong>  </p>

<p>Here is a copy of the php implementation by Rob Swan I mentioned:</p>

<pre><code>&lt;?php

// Define your secret seed
// NB: this is a hexadecimal representation of the example
// ASCII string which is: 12345678901234567890
$secret_seed = ""3132333435363738393031323334353637383930"";

// Determine the time window as 30 seconds
$time_window = 30;

// Set the timestamp manually
$exact_time = 1111111109;

// Round the time down to the time window
$rounded_time = floor($exact_time/$time_window);

// Pack the counter into binary
$packed_time = pack(""N"", $rounded_time);

// Make sure the packed time is 8 characters long
$padded_packed_time = str_pad($packed_time,8, chr(0), STR_PAD_LEFT);

// Pack the secret seed into a binary string
$packed_secret_seed = pack(""H*"", $secret_seed);

// Generate the hash using the SHA1 algorithm
$hash = hash_hmac ('sha1', $padded_packed_time, $packed_secret_seed, true);

// NB: Note we have change the exponent in the pow function 
// from 6 to 8 to generate an 8 digit OTP not a 6 digit one 

// Extract the 8 digit number fromt the hash as per RFC 6238
$offset = ord($hash[19]) &amp; 0xf;
$otp = (
    ((ord($hash[$offset+0]) &amp; 0x7f) &lt;&lt; 24 ) |
    ((ord($hash[$offset+1]) &amp; 0xff) &lt;&lt; 16 ) |
    ((ord($hash[$offset+2]) &amp; 0xff) &lt;&lt; 8 ) |
    (ord($hash[$offset+3]) &amp; 0xff)
) % pow(10, 8);

// NB: Note that we are padding to 8 characters not 6 for this example

// Add any missing zeros to the left of the numerical output
$otp = str_pad($otp, 8, ""0"", STR_PAD_LEFT);

// Display the output, which should be 
echo ""This should display 07081804: "" . $otp;

?&gt;
</code></pre>

<p>The key point is this line: </p>

<pre><code>$offset = ord($hash[19]) &amp; 0xf;
</code></pre>

<p>This works fine under the hypotesis of using sha1 algorithm, which returns a 20 chars string. </p>

<p>To abstract the line and make it compatible with any other algorithm change this line to:</p>

<pre><code>$offset = ord($hash[strlen($hash)-1]) &amp; 0xf;
</code></pre>

<p>Now you have a general and working php version of RFC 6238 totp calculation!</p>
","17010530","1520","<java><php><hash><sha><hmac>","0","1","1","2014-04-19 21:21:54","","5","","","","","2013-06-08 19:38:56","","","2013-06-09 14:16:29"
"2621436","Accidental Complexity in OpenSSL HMAC functions","<p><strong>SSL Documentation Analaysis</strong></p>

<p>This question is pertaining the usage of the HMAC routines in OpenSSL.</p>

<p>Since Openssl documentation is a tad on the weak side in certain areas, profiling has revealed that using the:</p>

<pre><code> unsigned char *HMAC(const EVP_MD *evp_md, const void *key,
               int key_len, const unsigned char *d, int n,
               unsigned char *md, unsigned int *md_len);
</code></pre>

<p>From <a href=""http://www.openssl.org/docs/crypto/hmac.html#"" rel=""nofollow noreferrer"">here</a>, shows <strong>40% of my library runtime</strong> is devoted to creating and taking down <strong>HMAC_CTX</strong>'s behind the scenes.</p>

<p>There are also two additional function to create and destroy a <strong>HMAC_CTX</strong> explicetly:</p>

<blockquote>
  <p>HMAC_CTX_init() initialises a HMAC_CTX
  before first use. It must be called.</p>
  
  <p>HMAC_CTX_cleanup() erases the key and
  other data from the HMAC_CTX and
  releases any associated resources. It
  must be called when an HMAC_CTX is no
  longer required.</p>
</blockquote>

<p>These two function calls are prefixed with:</p>

<blockquote>
  <p>The following functions may be used if
  the message is not completely stored
  in memory</p>
</blockquote>

<p>My data fits entirely in memory, so I choose the HMAC function -- the one whose signature is shown above.</p>

<p>The context, as described by the man page, is made use of by using the following two functions:</p>

<blockquote>
  <p>HMAC_Update() can be called repeatedly
  with chunks of the message to be
  authenticated (len bytes at data).</p>
  
  <p>HMAC_Final() places the message
  authentication code in md, which must
  have space for the hash function
  output.</p>
</blockquote>

<hr>

<p><strong>The Scope of the Application</strong></p>

<p>My application generates a authentic (HMAC, which is also used a nonce), CBC-BF encrypted protocol buffer string. The code will be interfaced with various web-servers and frameworks Windows / Linux as OS, nginx, Apache and IIS as webservers and Python / .NET and C++ web-server filters. </p>

<p>The description above should clarify that the library needs to be thread safe, and <strong>potentially</strong> have resumeable processing state -- i.e., lightweight threads sharing a OS thread (which might leave thread local memory out of the picture).</p>

<hr>

<p><strong>The Question</strong></p>

<p>How do I get rid of the <strong>40% overhead on each invocation</strong> in a (1) thread-safe / (2) resume-able state way ? (2) is optional since I have all of the source-data present in one go, and can make sure a digest is created in place without relinquishing control of the thread mid-digest-creation. So,</p>

<p>(1) can probably be done using thread local memory -- but how do I resuse the CTX's ? does the <strong>HMAC_final()</strong> call make the CTX reusable ?. </p>

<p>(2) optional: in this case I would have to create a pool of CTX's.</p>

<p>(3) how does the HMAC function do this ? does it create a CTX in the scope of the function call and destroy it ? </p>

<p><strong>Psuedocode and commentary will be useful.</strong></p>
","<p>If you aren't trying to restrict your dependencies, you could choose a HMAC implementation that is self contained and requires that the user explicitly control all the aspects that OpenSSL is, in it's documentation, vague about. Many such simple C/C++ alternatives exist, but it is up to you to choose and evaluate such an alternative.</p>
","2621516","1515","<c++><profiling><thread-safety><openssl><hmac>","2","0","2","2010-04-13 05:31:55","2627183","0","","153865","","2010-04-12 11:11:27","2010-04-12 10:54:33","","","2010-04-12 11:08:18"
"2621436","Accidental Complexity in OpenSSL HMAC functions","<p><strong>SSL Documentation Analaysis</strong></p>

<p>This question is pertaining the usage of the HMAC routines in OpenSSL.</p>

<p>Since Openssl documentation is a tad on the weak side in certain areas, profiling has revealed that using the:</p>

<pre><code> unsigned char *HMAC(const EVP_MD *evp_md, const void *key,
               int key_len, const unsigned char *d, int n,
               unsigned char *md, unsigned int *md_len);
</code></pre>

<p>From <a href=""http://www.openssl.org/docs/crypto/hmac.html#"" rel=""nofollow noreferrer"">here</a>, shows <strong>40% of my library runtime</strong> is devoted to creating and taking down <strong>HMAC_CTX</strong>'s behind the scenes.</p>

<p>There are also two additional function to create and destroy a <strong>HMAC_CTX</strong> explicetly:</p>

<blockquote>
  <p>HMAC_CTX_init() initialises a HMAC_CTX
  before first use. It must be called.</p>
  
  <p>HMAC_CTX_cleanup() erases the key and
  other data from the HMAC_CTX and
  releases any associated resources. It
  must be called when an HMAC_CTX is no
  longer required.</p>
</blockquote>

<p>These two function calls are prefixed with:</p>

<blockquote>
  <p>The following functions may be used if
  the message is not completely stored
  in memory</p>
</blockquote>

<p>My data fits entirely in memory, so I choose the HMAC function -- the one whose signature is shown above.</p>

<p>The context, as described by the man page, is made use of by using the following two functions:</p>

<blockquote>
  <p>HMAC_Update() can be called repeatedly
  with chunks of the message to be
  authenticated (len bytes at data).</p>
  
  <p>HMAC_Final() places the message
  authentication code in md, which must
  have space for the hash function
  output.</p>
</blockquote>

<hr>

<p><strong>The Scope of the Application</strong></p>

<p>My application generates a authentic (HMAC, which is also used a nonce), CBC-BF encrypted protocol buffer string. The code will be interfaced with various web-servers and frameworks Windows / Linux as OS, nginx, Apache and IIS as webservers and Python / .NET and C++ web-server filters. </p>

<p>The description above should clarify that the library needs to be thread safe, and <strong>potentially</strong> have resumeable processing state -- i.e., lightweight threads sharing a OS thread (which might leave thread local memory out of the picture).</p>

<hr>

<p><strong>The Question</strong></p>

<p>How do I get rid of the <strong>40% overhead on each invocation</strong> in a (1) thread-safe / (2) resume-able state way ? (2) is optional since I have all of the source-data present in one go, and can make sure a digest is created in place without relinquishing control of the thread mid-digest-creation. So,</p>

<p>(1) can probably be done using thread local memory -- but how do I resuse the CTX's ? does the <strong>HMAC_final()</strong> call make the CTX reusable ?. </p>

<p>(2) optional: in this case I would have to create a pool of CTX's.</p>

<p>(3) how does the HMAC function do this ? does it create a CTX in the scope of the function call and destroy it ? </p>

<p><strong>Psuedocode and commentary will be useful.</strong></p>
","<p>The documentation for the <code>HMAC_Init_ex()</code> function in OpenSSL 0.9.8g says:</p>

<blockquote>
  <p><code>HMAC_Init_ex()</code> initializes <strong>or reuses</strong> a
  <code>HMAC_CTX</code> structure to use the function
  <code>evp_md</code> and key <code>key</code>. Either can be
  <code>NULL</code>, in which case the existing one
  will be reused.</p>
</blockquote>

<p>(Emphasis mine).  So this means that you can initialise a <code>HMAC_CTX</code> with <code>HMAC_CTX_Init()</code> once, then keep it around to create multiple HMACs with, as long as you don't call <code>HMAC_CTX_cleanup()</code> on it and you start off each HMAC with <code>HMAC_Init_ex()</code>.</p>

<p>So yes, you should be able to do what you want with a <code>HMAC_CTX</code> in thread-local memory.</p>
","2627183","1515","<c++><profiling><thread-safety><openssl><hmac>","2","2","2","2010-04-13 05:31:55","2627183","0","","153865","","2010-04-12 11:11:27","2010-04-12 10:54:33","","","2010-04-13 05:31:55"
"20195307","HMAC / Javascript - where to store the secret?","<p>The client gets it's secret for HMAC encryption after it's first login on the server - but what's the best way to store the secret on the (java-script) client? cookie, localStorage?
thx</p>
","<p>The <code>best</code> way is pretty subjective.</p>

<p>If you must store it on the client (you must, I assume), then it can't be secure, it just can't.<br>
Putting that aside, the <code>best</code> way depends on your situation.</p>

<p>Are you trying to target older browsers? Then you can't use local storage.  </p>

<p>Since we've already removed security from the equation, your most far-reaching, cross-browser-compatible solution is to store it in a cookie.<br>
That's also probably one of the easiest solutions, though certainly the least secure (since your only form of security here is obscurity, and cookies are... not obscure).</p>
","20195463","1514","<javascript><hmac>","2","0","2","2013-11-25 17:25:50","20195813","3","","","","","2013-11-25 14:15:24","","","2013-11-25 14:23:22"
"20195307","HMAC / Javascript - where to store the secret?","<p>The client gets it's secret for HMAC encryption after it's first login on the server - but what's the best way to store the secret on the (java-script) client? cookie, localStorage?
thx</p>
","<p>Well the answer is, it depends. <code>localStorage</code> and cookies are not equivalent. Although they both can be used to store information on the client, they serve very specific goals. <code>localStorage</code> is meant to store application's data locally. It cannot be set directly from the server and is not sent to the server through HTTP headers either.</p>

<p><em>You may also have a look at <a href=""https://developer.mozilla.org/en-US/docs/Web/Guide/API/DOM/Storage#sessionStorage"" rel=""nofollow"">sessionStorage</a></em>.</p>

<p>However, cookies are typically created from the server (even if there's a JS API) through HTTP headers and they contain expiry information. Once set, they will be part of every client request's HTTP headers, allowing the server to access the information.</p>

<p>Both ways are probably equally secure since they both cannot be accessed from another domain. However if you are transmitting secure information you should probably do it through <a href=""http://en.wikipedia.org/wiki/HTTP_Secure"" rel=""nofollow"">HTTPS</a> as well.</p>
","20195813","1514","<javascript><hmac>","2","0","2","2013-11-25 17:25:50","20195813","3","","","","","2013-11-25 14:15:24","","2013-11-25 14:46:46","2013-11-25 14:39:58"
"12039671","ruby openssl hmac php equivalent","<p>I have to convert this ruby code into PHP equivalent.</p>

<pre><code>[OpenSSL::HMAC.digest(OpenSSL::Digest::Digest.new('sha1'), secret_key, policy)].pack(""m"").strip
</code></pre>

<p>I converted it into the following code but I'm not sure if it is correct or not.</p>

<pre><code>$s = hash_hmac('sha1', $secret_key, $policy);
$s = base64_encode($sig);
$s = trim($sig);
return $s;
</code></pre>

<p>I'm not sure if I need to set the last parameter of hash_hmac to true:</p>

<pre><code>$sig = hash_hmac('sha1', $secret_key, $policy, true);
</code></pre>

<p>or none is correct and should do this in a different way.</p>

<p>Which would be the correct equivalent?</p>
","<p>Ok, I have just installed ruby myself to test. I have tested and the equivalent is:</p>

<pre><code>$sig = hash_hmac('sha1', $policy, $secret_key, true);
$sig = base64_encode($sig);
$sig = trim($sig);
return $sig;
</code></pre>

<p>The order of parameters is inverted in php, first data, then key. And the raw_output parameter needs to be true.</p>
","12042563","1514","<php><ruby><openssl><sha1><hmac>","1","5","1","2015-10-08 13:56:04","12042563","0","1","","","","2012-08-20 14:35:19","","2015-10-08 13:56:04","2012-08-20 17:54:24"
"32279004","Decrypting signature and Veryifying JWT","<p>I understand that there exist other libraries which make my life easier to work with JWT (in node.js).  </p>

<p>In this case, I am using ""crypto-js"" to learn JWT in a manual way.  The following gives me the token:</p>

<pre><code>var header = {
    ""alg"": ""HS256"",
    ""typ"": ""JWT""
};
var wordArrayHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header));
var base64Header = CryptoJS.enc.Base64.stringify(wordArrayHeader);

var payload = {
    ""sub"": ""1234567890"",
    ""name"": ""John Doe"",
    ""admin"": true
};
var wordArrayPayload = CryptoJS.enc.Utf8.parse(JSON.stringify(payload));
var base64Payload = CryptoJS.enc.Base64.stringify(wordArrayPayload);

var signature = CryptoJS.HmacSHA256(base64Header + ""."" + base64Payload , ""secret"");
var base64Sign = CryptoJS.enc.Base64.stringify(signature);
var token = base64Header + ""."" + base64Payload + ""."" + base64Sign;
</code></pre>

<p>I am unable to do the exact opposite, to verify the token.  For example, the following throws me an error when decrypting the signature:</p>

<pre><code>var token = ""eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ"";
var base64Header = ""eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9"";
var base64Payload = ""eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9"";
var base64Sign = ""TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ"";

var parsedSignArray = CryptoJS.enc.Base64.parse(base64Sign);
var parsedSign = parsedSignArray.toString(CryptoJS.enc.Utf8);
var decrypted = CryptoJS.HmacSHA256.decrypt(parsedSign , ""secret"");
console.log(decrypted);
</code></pre>

<p>What am I missing here?  BTW, just for this example, I am using token from <a href=""http://jwt.io"" rel=""nofollow"">http://jwt.io</a></p>
","<p>There is no such thing as <code>CryptoJS.HmacSHA256.decrypt</code>. Since HMAC, as well as hash functions in general, are one-way functions the only way to verify the ""signature"" would be to run the same one way function over the same string and then compare it with the one that you've got:</p>

<pre><code>var signature = CryptoJS.HmacSHA256(base64Header + ""."" + base64Payload , ""secret"").toString(CryptoJS.enc.Base64);
var valid = signature == base64Sign;
</code></pre>
","32279189","1511","<javascript><node.js><jwt><hmac><cryptojs>","3","4","1","2015-08-28 22:50:18","32279189","0","1","1816580","","2015-08-28 22:50:18","2015-08-28 20:05:43","","","2015-08-28 20:20:53"
"11826948","hash_hmac - sha1 - signed value coming wrong?","<pre><code>$signData = hash_hmac(""sha1"", 'GET\n1344250030\n/contacts.json', 
              base64_decode($this-&gt;api_secret));

$signData = base64_encode($signData);
</code></pre>

<p>the value of api_secret is</p>

<pre><code>LPq6ZD2JdyPnBvxf6p6h
</code></pre>

<p>the value of result $signData is </p>

<blockquote>
  <p>ZTYxM2NkYmNhZDJiZDUxZWUwMWIyNGRlZTlmYTc3MDliM2FiY2NhYQ==</p>
</blockquote>

<p>but the expected result in $signData is </p>

<blockquote>
  <p>QbOd8%2BOIzHMKrmEpf4G%2FZFWLAx8%3D</p>
</blockquote>

<p>I should use this expected result for url connection.</p>

<p>Where am i doing wrong? help me.</p>
","<p>Made a complete java program</p>

<pre><code>package javaapplication1;

import java.net.URLEncoder;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;
import org.apache.commons.codec.binary.Base64;

public class JavaApplication1 {

    public static void main(String[] args) {
        try {
            System.out.println(signData(""GET\n1344250030\n/contacts.json""));
        } catch (Exception ex) {
            Logger.getLogger(JavaApplication1.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private static String signData(String data) throws Exception {
        Mac mac = Mac.getInstance(""HmacSHA1"");
        mac.init(new SecretKeySpec(Base64.decodeBase64(""LPq6ZD2JdyPnBvxf6p6h""), ""HmacSHA1""));
        String sig = new String(Base64.encodeBase64(mac.doFinal(data.getBytes())));
        return URLEncoder.encode(sig, ""UTF-8"");
    }
}
</code></pre>

<p>Noticed the URLEncoder so I added that to the PHP. Also suspect that your URL should be using double quotes as otherwise the \n doesn't work. Which gave this code:</p>

<pre><code>&lt;?php

$signData = hash_hmac(""sha1"", ""GET\n1344250030\n/contacts.json"", 
              base64_decode('LPq6ZD2JdyPnBvxf6p6h'), true);
$signData = base64_encode($signData);
echo urlencode($signData);
</code></pre>

<p>Both give the same result but not what you expected. </p>

<pre><code>fH%2F0XJpooui3U2nyd%2FCD9YjRVGM%3D
</code></pre>

<p>So are you certain your inputs are correct? Both the URL and the secret?</p>
","11827724","1511","<php><sha1><hmac><hmacsha1>","1","0","1","2012-08-06 11:53:17","11827724","3","","1578749","","2012-08-06 11:00:19","2012-08-06 10:57:57","","","2012-08-06 11:53:17"
"36745204","Nodejs - Expressjs - Verify shopify webhook","<p>I am trying to verify the <code>hmac</code> code sent from a <code>shopify</code> <code>webhook</code> on a dev environment. However <code>shopify</code> will not send a post request for a <code>webhook</code> to a non live endpoint, so I am using <a href=""http://requestb.in/"" rel=""nofollow"">requestbin</a> to capture the request and then use <code>postman</code> to send it to my local webserver.</p>

<p>From shopify <a href=""https://docs.shopify.com/api/tutorials/webhooks#verify-webhook"" rel=""nofollow"">documentation</a>, I seem to be doing everything right and have also tried applying the method used in <a href=""https://github.com/jonpulice/node-shopify-auth/blob/master/lib/main.js"" rel=""nofollow"">node-shopify-auth verifyWebhookHMAC function</a>. But none of this has worked so far.
The codes are never a match.
What am I doing wrong here?</p>

<p>My code to verify the webhook:</p>

<pre><code> function verifyWebHook(req, res, next) {
      var message = JSON.stringify(req.body);
    //Shopify seems to be escaping forward slashes when the build the HMAC
        // so we need to do the same otherwise it will fail validation
        // Shopify also seems to replace '&amp;' with \u0026 ...
        //message = message.replace('/', '\\/');
        message = message.split('/').join('\\/');
    message = message.split('&amp;').join('\\u0026');
      var signature = crypto.createHmac('sha256', shopifyConfig.secret).update(message).digest('base64');
      var reqHeaderHmac = req.headers['x-shopify-hmac-sha256'];
      var truthCondition = signature === reqHeaderHmac;

      winston.info('sha256 signature: ' + signature);
      winston.info('x-shopify-hmac-sha256 from header: ' + reqHeaderHmac);
      winston.info(req.body);

      if (truthCondition) {
        winston.info('webhook verified');
        req.body = JSON.parse(req.body.toString());
        res.sendStatus(200);
        res.end();
        next();
      } else {
        winston.info('Failed to verify web-hook');
        res.writeHead(401);
        res.end('Unverified webhook');
      }
    }
</code></pre>

<p>My route which receives the request:</p>

<pre><code>router.post('/update-product', useBodyParserJson, verifyWebHook, function (req, res) {
  var shopName = req.headers['x-shopify-shop-domain'].slice(0, -14);
  var itemId = req.headers['x-shopify-product-id'];
  winston.info('Shopname from webhook is: ' + shopName + ' For item: ' + itemId);
});
</code></pre>
","<p>I do it a little differently -- Not sure where I saw the recommendation but I do the verify in the body parser. IIRC one reason being that I get access to the raw body before any other handlers are likely to have touched it:</p>

<pre><code>app.use( bodyParser.json({verify: function(req, res, buf, encoding) {
    var shopHMAC = req.get('x-shopify-hmac-sha256');
    if(!shopHMAC) return;
    if(req.get('x-kotn-webhook-verified')) throw ""Unexpected webhook verified header"";
    var sharedSecret = process.env.API_SECRET;
    var digest = crypto.createHmac('SHA256', sharedSecret).update(buf).digest('base64');
    if(digest == req.get('x-shopify-hmac-sha256')){
        req.headers['x-kotn-webhook-verified']= '200';
    }
 }})); 
</code></pre>

<p>and then any web hooks just deal with the verified header:</p>

<pre><code>if('200' != req.get('x-kotn-webhook-verified')){
    console.log('invalid signature for uninstall');
    res.status(204).send();
    return;
}
var shop = req.get('x-shopify-shop-domain');
if(!shop){
    console.log('missing shop header for uninstall');
    res.status(400).send('missing shop');
    return;
}
</code></pre>
","36748390","1508","<node.js><shopify><hmac><webhooks>","2","4","2","2018-06-18 14:55:07","36748390","0","1","","","","2016-04-20 13:22:11","","2016-05-31 21:42:58","2016-04-20 15:22:35"
"36745204","Nodejs - Expressjs - Verify shopify webhook","<p>I am trying to verify the <code>hmac</code> code sent from a <code>shopify</code> <code>webhook</code> on a dev environment. However <code>shopify</code> will not send a post request for a <code>webhook</code> to a non live endpoint, so I am using <a href=""http://requestb.in/"" rel=""nofollow"">requestbin</a> to capture the request and then use <code>postman</code> to send it to my local webserver.</p>

<p>From shopify <a href=""https://docs.shopify.com/api/tutorials/webhooks#verify-webhook"" rel=""nofollow"">documentation</a>, I seem to be doing everything right and have also tried applying the method used in <a href=""https://github.com/jonpulice/node-shopify-auth/blob/master/lib/main.js"" rel=""nofollow"">node-shopify-auth verifyWebhookHMAC function</a>. But none of this has worked so far.
The codes are never a match.
What am I doing wrong here?</p>

<p>My code to verify the webhook:</p>

<pre><code> function verifyWebHook(req, res, next) {
      var message = JSON.stringify(req.body);
    //Shopify seems to be escaping forward slashes when the build the HMAC
        // so we need to do the same otherwise it will fail validation
        // Shopify also seems to replace '&amp;' with \u0026 ...
        //message = message.replace('/', '\\/');
        message = message.split('/').join('\\/');
    message = message.split('&amp;').join('\\u0026');
      var signature = crypto.createHmac('sha256', shopifyConfig.secret).update(message).digest('base64');
      var reqHeaderHmac = req.headers['x-shopify-hmac-sha256'];
      var truthCondition = signature === reqHeaderHmac;

      winston.info('sha256 signature: ' + signature);
      winston.info('x-shopify-hmac-sha256 from header: ' + reqHeaderHmac);
      winston.info(req.body);

      if (truthCondition) {
        winston.info('webhook verified');
        req.body = JSON.parse(req.body.toString());
        res.sendStatus(200);
        res.end();
        next();
      } else {
        winston.info('Failed to verify web-hook');
        res.writeHead(401);
        res.end('Unverified webhook');
      }
    }
</code></pre>

<p>My route which receives the request:</p>

<pre><code>router.post('/update-product', useBodyParserJson, verifyWebHook, function (req, res) {
  var shopName = req.headers['x-shopify-shop-domain'].slice(0, -14);
  var itemId = req.headers['x-shopify-product-id'];
  winston.info('Shopname from webhook is: ' + shopName + ' For item: ' + itemId);
});
</code></pre>
","<h1>Short Answer</h1>

<p>The body parser in express does not handle BigInt well, and things like order number which are passed as integer get corrupted. Apart from that certain values are edited such as URLs are originally sent as ""https://..."", which OP also found out from the other code.</p>

<p>To solve this, do not parse the data using body parser and instead get it as raw string, later on you can parse it with json-bigint to ensure none of it has been corrupted.</p>

<h1>Long Answer</h1>

<p>Although the <a href=""https://stackoverflow.com/a/36748390/1609066"">answer</a> by @bknights works perfectly fine, it's important to find out why this was happening in the first place.</p>

<p>For a webhook I made on the ""order_created"" event from Shopify I found out that the id of the request being passed to the body was different than what I was sending from my test data, this turned out to be an issue with body-parser in express which did not play nice with big integers.</p>

<p>Ultimately I was deploying something to Google cloud functions and the req already had raw body which I could use, but in my test environment in Node I implemented the following as a separate body parser as using the same body parser twice overwrote the raw body with JSON</p>

<pre><code>var rawBodySaver = function (req, res, buf, encoding) {
    if (buf &amp;&amp; buf.length) {
      req.rawBody = buf.toString(encoding || 'utf8');
    }
}
app.use(bodyParser.json({verify: rawBodySaver, extended: true}));
</code></pre>

<p>Based on <a href=""https://stackoverflow.com/a/35651853/1609066"">this</a> answer</p>

<p>I later on parse the rawBody using json-bigint for use in code elsewhere as otherwise some of the numbers were corrupted.</p>
","50912277","1508","<node.js><shopify><hmac><webhooks>","2","1","2","2018-06-18 14:55:07","36748390","0","1","","","","2016-04-20 13:22:11","","","2018-06-18 14:55:07"
"6821967","HMAC SHA-512 Calculation + Timestamp","<p>I'm doing an online ""hacking"" challenge and I'm trying to get to the next level.</p>

<p>On the current level, we're given the Caption ""Think fast"", asked the following question,</p>

<p>""What is element x in the Fibonacci sequence, where element zero is 0?""</p>

<p>Where x is randomly generated.</p>

<p>When I compute the answer and submit it, it prompts me with another itteration of the question above (with a different value for x) and it says ""Didn't answer fast enough"". I've tried submitting answers as fast as I can with no avail, so there must be another way.</p>

<p>If we view the source code of the page, we see the following:
(I'm only going to post the portion I think is interesting/relevant)</p>

<pre><code>&lt;form action=""herecomes9.php"" method=""get""&gt;
  &lt;input type=""text"" name=""answer"" /&gt;
  &lt;input type=""hidden"" name=""timestamp"" value=""1311528704"" /&gt;
  &lt;input type=""hidden"" name=""number"" value=""274"" /&gt;
  &lt;input type=""hidden"" name=""hmac"" value=""6d423e4405ceb79022662fbf5d1d2885c51b6ada2ad5e99500a3fbc4d0170b4fd9c7fd22af9a7e542617a5924586ca7e41860e17289120d1a899f1bcac007df3"" /&gt;
  &lt;input type=""submit"" value=""Answer"" /&gt;
&lt;/form&gt;
</code></pre>

<p>So my next idea was to edit the timestamp by changing the information contained in the url, like so</p>

<p>(Just an example to explain my doing, may not match answer, timestamp, hmac listed above in code)</p>

<p>http ://www.skullspace.net/2011/08-batman/herecomes9.php?answer=1&amp;timestamp=1&amp;number=1&amp;hmac=e41bd1f9093a67b70ce9316b19abc1862ec 35c5c0f746444d8018286bf19d9adb05a652c46b5de53b2d4f d6bfb2c1f848c8dc92a54e84d042953d6b48b30b0f9</p>

<p>If I submit that into my browser, we are given the caption, ""Don't try to be clever, the HMAC has to match the parameters you were given.""</p>

<p>This is where I'm stuck.</p>

<p>Does anyone have any ideas or hints as to how I can proceed to the next level? Can I somehow make the HMAC match? Is there another way entirely?</p>

<p>Thanks for the ideas/input/help!</p>
","<p>I suggest that you write a script that parses the page and responds immediately, rather than trying to break the HMAC.</p>

<p>HMAC is an authentication code. Its purpose is to be secure, and it uses a secret key that you'd be very lucky to break or guess (in other words, that's not the way forward).</p>
","6822525","1494","<security><hash><hmac><sha512>","1","1","1","2014-08-19 03:21:40","","0","0","3366929","","2014-08-19 03:21:40","2011-07-25 20:30:47","","","2011-07-25 21:20:53"
"26977333","coldfusion hashing and difference between hmacSHA256 and SHA256","<p>I'm trying to mimic is this PHP functionality</p>

<pre><code>&lt;?php
    base64_encode( hash_hmac( 'SHA256', $a, $b, true) );
?&gt;
</code></pre>

<p>is there a difference between the ""HmacSHA256"" and ""sha256""?</p>

<p>This works - but doesn't give me the same result:</p>

<pre><code>&lt;cfscript&gt;
    toBase64( hmac( a, b, 'HmacSHA256', 'us-ascii' ) );
&lt;/cfscript&gt;
</code></pre>

<p>this tells me ""sha256"" is unavail (because Im not using enterprise)</p>

<pre><code>&lt;cfscript&gt;
    toBase64( hmac( a, b, 'SHA256', 'us-ascii' ) );
&lt;/cfscript&gt;
</code></pre>

<p>Any way I can do this without enterprise? isn't there a java lib i can tie into for encoding?</p>

<p>thanks</p>
","<p>It looks like you might have to <a href=""https://github.com/bennadel/Crypto.cfc"" rel=""nofollow"">install libraries</a> to get sha256</p>

<blockquote>
  <p>ColdFusion 10 introduced the hmac() function for generating secure, hashed message authentication codes (HMAC). This function makes dealing with 3rd-Party APIs much easier. Before ColdFusion 10, however, you would need to dip down into the Java layer to access the security libraries. This ColdFusion component - Crypto.cfc - attempts to make access to such libraries easier and more concise.</p>
</blockquote>
","26978156","1456","<php><encoding><coldfusion><hmac><sha256>","1","0","3","2015-12-13 22:46:18","26978853","0","","2370483","","2014-11-17 17:17:56","2014-11-17 16:34:06","","","2014-11-17 17:16:47"
"26977333","coldfusion hashing and difference between hmacSHA256 and SHA256","<p>I'm trying to mimic is this PHP functionality</p>

<pre><code>&lt;?php
    base64_encode( hash_hmac( 'SHA256', $a, $b, true) );
?&gt;
</code></pre>

<p>is there a difference between the ""HmacSHA256"" and ""sha256""?</p>

<p>This works - but doesn't give me the same result:</p>

<pre><code>&lt;cfscript&gt;
    toBase64( hmac( a, b, 'HmacSHA256', 'us-ascii' ) );
&lt;/cfscript&gt;
</code></pre>

<p>this tells me ""sha256"" is unavail (because Im not using enterprise)</p>

<pre><code>&lt;cfscript&gt;
    toBase64( hmac( a, b, 'SHA256', 'us-ascii' ) );
&lt;/cfscript&gt;
</code></pre>

<p>Any way I can do this without enterprise? isn't there a java lib i can tie into for encoding?</p>

<p>thanks</p>
","<p>This is a generic version of something I've used recently. Haven't tested this exact code, but give it a shot. I store the encrypted value of <code>SECRET_KEY</code> in the database in order to keep it out of the application code.</p>

<pre><code>&lt;cffunction name=""HmacSHA256"" access=""public"" output=""false"" returntype=""string"" hint=""Generates HmacSHA256 string."">
    &lt;cfargument name=""message"" type=""string"" required=""true"" hint=""form data"" />
    &lt;cfset var HMAC_SHA256 = ""HmacSHA256"" />
    &lt;cfset var SECRET_KEY = ""{YOUR_SECRET_KEY}"" />

    &lt;cfset var secretKeySpec = createObject(""java"", ""javax.crypto.spec.SecretKeySpec"").init( SECRET_KEY.getBytes(""UTF-8""), HMAC_SHA256 ) />
    &lt;cfset var mac = createObject(""java"", ""javax.crypto.Mac"").getInstance(HMAC_SHA256) />
    &lt;cfset mac.init( secretKeySpec ) />
    &lt;cfset var rawHmac = mac.doFinal( arguments.message.getBytes(""UTF-8"") ) />
    &lt;cfset var encoder = createObject(""java"", ""sun.misc.BASE64Encoder"") />
    &lt;cfreturn encoder.encodeBuffer(rawHmac).replace(""\n"", """").replace(""\r"", """") />
&lt;/cffunction></code></pre>
","26978853","1456","<php><encoding><coldfusion><hmac><sha256>","1","1","3","2015-12-13 22:46:18","26978853","0","","2370483","","2014-11-17 17:17:56","2014-11-17 16:34:06","","2015-08-29 13:55:56","2014-11-17 17:56:43"
"26977333","coldfusion hashing and difference between hmacSHA256 and SHA256","<p>I'm trying to mimic is this PHP functionality</p>

<pre><code>&lt;?php
    base64_encode( hash_hmac( 'SHA256', $a, $b, true) );
?&gt;
</code></pre>

<p>is there a difference between the ""HmacSHA256"" and ""sha256""?</p>

<p>This works - but doesn't give me the same result:</p>

<pre><code>&lt;cfscript&gt;
    toBase64( hmac( a, b, 'HmacSHA256', 'us-ascii' ) );
&lt;/cfscript&gt;
</code></pre>

<p>this tells me ""sha256"" is unavail (because Im not using enterprise)</p>

<pre><code>&lt;cfscript&gt;
    toBase64( hmac( a, b, 'SHA256', 'us-ascii' ) );
&lt;/cfscript&gt;
</code></pre>

<p>Any way I can do this without enterprise? isn't there a java lib i can tie into for encoding?</p>

<p>thanks</p>
","<p>The <a href=""https://helpx.adobe.com/coldfusion/cfml-reference/coldfusion-functions/functions-h-im/hmac.html"" rel=""nofollow"">CF documentation for <code>hmac</code></a> is sorely lacking useful details. The reason your code does not work is that <code>hmac()</code> returns a hexadecimal string. Whereas the PHP call to <a href=""http://php.net/manual/en/function.hash-hmac.php"" rel=""nofollow""><code>hash-hmac</code></a> returns binary. As a result, your CF script is base64 encoding a completely different value. That is why the two results do not match. </p>

<p>You need to decode the hex string into binary first. Then encode the <em>binary</em> as base64 and the results will match:</p>

<pre><code>resultAsHex = hmac(""Well done is better than well said."", ""key"", ""HmacSHA256"");
finalValue = binaryEncode( binaryDecode(resultAsHex, ""hex""), ""base64"" );
writeDump( finalValue );
</code></pre>

<p>As an aside, <code>toBase64()</code> is deprecated. The docs recommend using <code>binaryEncode</code> for new applications.</p>
","26980911","1456","<php><encoding><coldfusion><hmac><sha256>","1","2","3","2015-12-13 22:46:18","26978853","0","","2370483","","2014-11-17 17:17:56","2014-11-17 16:34:06","","2015-12-13 22:46:18","2014-11-17 20:00:00"
"8320360","Can't Mimic Amazon Web Services Signature Algorithm","<p>I'm becoming extremely frustrated when people &amp; companies don't provide reliable documentation for their products.</p>

<p>According to this site: <a href=""http://s3.amazonaws.com/doc/s3-developer-guide/RESTAuthentication.html"" rel=""nofollow"">http://s3.amazonaws.com/doc/s3-developer-guide/RESTAuthentication.html</a></p>

<p>There is an algorithm that looks something like this:</p>

<pre><code>import base64
import hmac
import sha
import urllib
h = hmac.new(""OtxrzxIsfpFjA7SwPzILwy8Bw21TLhquhboDYROV"",
             ""GET\n\n\n1141889120\n/quotes/nelson"",
             sha)
urllib.quote_plus(base64.encodestring(h.digest()).strip())
</code></pre>

<p>Which should produce a result of:</p>

<pre><code>vjbyPxybdZaNmGa%2ByT272YEAiv4%3D
</code></pre>

<p>I've tried several variations, different charsets and different languages and I cannot produce this hash. I even downloaded some samples and when I use their signing algorithms they still don't produce this hash. Here's the C# code I have:</p>

<pre><code>    byte[] bytesToSign = Encoding.UTF8.GetBytes(""GET\n\n\n1141889120\n/quotes/nelson"");
    byte[] secretKeyBytes = Encoding.UTF8.GetBytes(""OtxrzxIsfpFjA7SwPzILwy8Bw21TLhquhboDYROV"");
    HMAC hmacSha256 = new HMACSHA256(secretKeyBytes);
    byte[] hashBytes = hmacSha256.ComputeHash(bytesToSign);
    string signature = Convert.ToBase64String(hashBytes);
</code></pre>

<p>But it produces a value of:</p>

<pre><code>a5n2tpQTlqetX6Pjvv7vK23qi2JIZVlWZqIdteD2pok=
</code></pre>

<p>Yeah I can see that they're wrapping it with a URL encoder but that wouldn't change it this drastically. Does anyone have any idea what algorithm they may have used to produce this hash? I'm out of ideas.</p>
","<p>Your C# code using the wrong HMAC hashing algorithm. From Amazon's documentation: </p>

<blockquote>
  <p>""The hash function to compute the signature is HMAC-SHA1 defined in
  RFC 2104 (http://www.ietf.org/rfc/rfc2104.txt), using your Secret
  Access Key as the key.""</p>
</blockquote>

<p>As it says, you need to use SHA-1 instead of SHA-256:</p>

<pre><code>var bytesToSign = Encoding.UTF8.GetBytes(""GET\n\n\n1141889120\n/quotes/nelson"");
var secretKeyBytes = 
    Encoding.UTF8.GetBytes(""OtxrzxIsfpFjA7SwPzILwy8Bw21TLhquhboDYROV"");
var hmacSha1 = new HMACSHA1(secretKeyBytes);
var hashBytes = hmacSha256.ComputeHash(bytesToSign);
var signature = Convert.ToBase64String(hashBytes);
</code></pre>
","8320435","1448","<amazon-web-services><hmac>","1","2","1","2011-11-30 06:36:35","8320435","0","","168868","","2011-11-30 06:36:35","2011-11-30 02:15:18","","","2011-11-30 02:28:57"
"48111072","HMAC SHA256 signatures PHP CURL","<p>I am trying to sign my request but it gives me Signature for this request is not valid.</p>

<p>This is the way I should sign it.</p>

<p>SIGNED endpoints require an additional parameter, signature, to be sent in the query string or request body.
Endpoints use HMAC SHA256 signatures. The HMAC SHA256 signature is a keyed HMAC SHA256 operation. Use your secretKey as the key and totalParams as the value for the HMAC operation.
The signature is not case sensitive.
totalParams is defined as the query string concatenated with the request body</p>

<p>My code as below:</p>

<pre><code>$ch = curl_init();
$timestamp = round(microtime(true) * 1000);
$secret = 'bmrLfulhggHgudLEHzRj7zNz**************p3KladNAcI4qLg';
$querystring = urlencode(""LTCBTC&amp;side=BUY&amp;type=LIMIT&amp;timeInForce=GTC&amp;quantity=1&amp;price=0.1"");
$signature = hash_hmac('SHA256',$querystring ,$secret);

curl_setopt($ch, CURLOPT_URL, ""https://api.binance.com/api/v3/order/test?symbol=LTCBTC&amp;side=BUY&amp;type=LIMIT&amp;timeInForce=GTC&amp;quantity=1&amp;price=0.1&amp;recvWindow=50000&amp;timestamp="".$timestamp.""&amp;signature="".$signature."""");
curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
curl_setopt($ch, CURLOPT_POST, 1);

$headers = array();
$headers[] = ""X-Mbx-Apikey: EAXHTI2ZyuWqVdVC*****************RsVrptYUnl2XYM9f"";
curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);

$result = curl_exec($ch);
print_r($result);
if (curl_errno($ch)) {
    echo 'Error:' . curl_error($ch);
}
curl_close ($ch);
</code></pre>
","<p>You don't need to url encode the query string for Binance. You haven't included the recvWindow or timestamp, also looks like your missing the key off the first parameter. </p>

<p>try:</p>

<pre><code>$querystring = ""symbol=LTCBTC&amp;side=BUY&amp;type=LIMIT&amp;timeInForce=GTC&amp;quantity=1&amp;price=0.1&amp;recvWindow=50000&amp;timestamp="".$timestamp;
$signature = hash_hmac('SHA256',$querystring ,$secret);
</code></pre>
","48363438","1443","<php><curl><hmac>","1","1","1","2018-01-21 03:34:47","","0","","4060530","","2018-01-05 11:32:47","2018-01-05 09:54:03","","","2018-01-21 03:34:47"
"33080404","HMAC SHA1 with NSData input Objective-C","<p>I need to hash a NSData input with HMAC-SHA1. I used this code:</p>

<pre><code>- (NSString *)HMACSHA1:(NSData *)data {
    NSParameterAssert(data);

    const char *cKey = [@""SampleSecretKey012345678"" cStringUsingEncoding:NSUTF8StringEncoding];
    const void *cData = [data bytes];

    unsigned char cHMAC[CC_SHA1_DIGEST_LENGTH];

    CCHmac(kCCHmacAlgSHA1, cKey, strlen(cKey), cData, strlen(cData), cHMAC);

    NSData *HMAC = [[NSData alloc] initWithBytes:cHMAC length:sizeof(cHMAC)];\

    /* Returns hexadecimal string of NSData. Empty string if data is empty. */

    const unsigned char *dataBuffer = (const unsigned char *)[HMAC bytes];

    if (!dataBuffer) {
        return [NSString string];
    }

    NSUInteger dataLength = [HMAC length];
    NSMutableString *hexString = [NSMutableString stringWithCapacity:(dataLength * 2)];

    for (int i = 0; i &lt; dataLength; ++i) {
        [hexString appendFormat:@""%02x"", (unsigned int)dataBuffer[i]];
    }

    return [NSString stringWithString:hexString];
}
</code></pre>

<p>but the hex string output is always wrong (checked from server). I think the problem is this line:</p>

<p><code>const void *cData = [data bytes];</code></p>

<p>because if convert data (sample ""test"" string) in the same way as key:</p>

<p><code>const void *cData = [@""test"" cStringUsingEncoding:NSUTF8StringEncoding];</code></p>

<p>then check the result using this page: <a href=""http://myeasywww.appspot.com/utility/free/online/Crypt_Decrypt-MD5-AES-HMAC-SHA-DES-RABBIT/en?command=UTILITY&amp;ID=2"" rel=""nofollow"">HMAC crypt</a>, the result is matched.</p>

<p>If I hash a NSString then I can use <code>cStringUsingEncoding:</code> but I can't figure out convert NSData to <code>const void*</code>. Anyone can help me? Thanks!</p>
","<p>I'd advise to use <a href=""http://opensource.apple.com/source/CommonCrypto/CommonCrypto-36064/Source/Digest/sha1.c"" rel=""nofollow noreferrer"">CommonCrypto framework from Apple</a> as you have hardware accelerated SHA calculation. </p>

<p>I don't know if it's HMAC (as far as I can see it is supported, but didn't try), but I'd consider switching your server (or whatever) to be compatible, as on the iOS side it's much faster with hardware support.</p>

<p><strong>Edit</strong>: You can read more about the topic at this <a href=""https://stackoverflow.com/a/5387310/849616"">SOF question</a>.</p>

<p><strong>Edit 2</strong>: At Github there is also a <a href=""https://github.com/iosdevzone/IDZSwiftCommonCrypto"" rel=""nofollow noreferrer"">nice wrapper</a> (Swift) for CommonCrypto. Anyway, it will give you an idea how to implement it and what does CommonCrypto support.</p>
","33080760","1440","<objective-c><encryption><hmac>","3","0","2","2015-10-14 20:50:36","33086161","0","1","451475","","2015-10-14 20:50:36","2015-10-12 11:50:01","","2017-05-23 10:28:01","2015-10-12 12:08:47"
"33080404","HMAC SHA1 with NSData input Objective-C","<p>I need to hash a NSData input with HMAC-SHA1. I used this code:</p>

<pre><code>- (NSString *)HMACSHA1:(NSData *)data {
    NSParameterAssert(data);

    const char *cKey = [@""SampleSecretKey012345678"" cStringUsingEncoding:NSUTF8StringEncoding];
    const void *cData = [data bytes];

    unsigned char cHMAC[CC_SHA1_DIGEST_LENGTH];

    CCHmac(kCCHmacAlgSHA1, cKey, strlen(cKey), cData, strlen(cData), cHMAC);

    NSData *HMAC = [[NSData alloc] initWithBytes:cHMAC length:sizeof(cHMAC)];\

    /* Returns hexadecimal string of NSData. Empty string if data is empty. */

    const unsigned char *dataBuffer = (const unsigned char *)[HMAC bytes];

    if (!dataBuffer) {
        return [NSString string];
    }

    NSUInteger dataLength = [HMAC length];
    NSMutableString *hexString = [NSMutableString stringWithCapacity:(dataLength * 2)];

    for (int i = 0; i &lt; dataLength; ++i) {
        [hexString appendFormat:@""%02x"", (unsigned int)dataBuffer[i]];
    }

    return [NSString stringWithString:hexString];
}
</code></pre>

<p>but the hex string output is always wrong (checked from server). I think the problem is this line:</p>

<p><code>const void *cData = [data bytes];</code></p>

<p>because if convert data (sample ""test"" string) in the same way as key:</p>

<p><code>const void *cData = [@""test"" cStringUsingEncoding:NSUTF8StringEncoding];</code></p>

<p>then check the result using this page: <a href=""http://myeasywww.appspot.com/utility/free/online/Crypt_Decrypt-MD5-AES-HMAC-SHA-DES-RABBIT/en?command=UTILITY&amp;ID=2"" rel=""nofollow"">HMAC crypt</a>, the result is matched.</p>

<p>If I hash a NSString then I can use <code>cStringUsingEncoding:</code> but I can't figure out convert NSData to <code>const void*</code>. Anyone can help me? Thanks!</p>
","<p>Common Crypto supports HMAC with SHA1, MD5, SHA256, SHA384, SHA512 and SHA224.</p>

<p>Here is an example implementation that is a little simpler, not sure if it resolves yourproblem since no input/desired output was supplied:</p>

<pre><code>- (NSString *)HMACSHA1:(NSData *)data {
    NSParameterAssert(data);

    NSData *keyData = [@""SampleSecretKey012345678"" dataUsingEncoding:NSUTF8StringEncoding];
    NSMutableData *hMacOut = [NSMutableData dataWithLength:CC_SHA1_DIGEST_LENGTH];

    CCHmac(kCCHmacAlgSHA1,
           keyData.bytes, keyData.length,
           data.bytes,    data.length,
           hMacOut.mutableBytes);

    /* Returns hexadecimal string of NSData. Empty string if data is empty. */
    NSString *hexString = @"""";
    if (data) {
        uint8_t *dataPointer = (uint8_t *)(hMacOut.bytes);
        for (int i = 0; i &lt; CC_SHA1_DIGEST_LENGTH; i++) {
            hexString = [hexString stringByAppendingFormat:@""%02x"", dataPointer[i]];
        }
    }

    return hexString;
}
</code></pre>
","33086161","1440","<objective-c><encryption><hmac>","3","2","2","2015-10-14 20:50:36","33086161","0","1","451475","","2015-10-14 20:50:36","2015-10-12 11:50:01","","2015-10-12 16:55:13","2015-10-12 16:41:46"
"1017150","migrate from C#.net 2.0 to php so the hash value of the password - how to resolve?","<p>we previously use a C#.net 2.0 to create a web app.</p>

<p>Users password were hashed and stored in database using the following code.</p>

<pre><code>private const string encryptionKey = ""AE09F72B007CAAB5"";

HMACSHA1 hash = new HMACSHA1();
hash.Key = HexToByte(encryptionKey);
encodedPassword = Convert.ToBase64String(
    hash.ComputeHash(Encoding.Unicode.GetBytes(password)));
</code></pre>

<p>now we intend to migrate to php.</p>

<p>so we face a problem for users when they want to back in. </p>

<p>what php equivalent of the method should be used so that the hash values in the database would work?</p>

<p>eg password to encode is pa55w0rd 
the hash value gotten is oK9NOVhpTkxLoLfvh1430SFb5gw=</p>

<p>Thank you.</p>
","<p>Using a .Net version of PHP (<a href=""http://www.php-compiler.net/doku.php"" rel=""nofollow noreferrer"">Phalanger</a>) or using a .Net webservice to encode/decode isn't an option?</p>
","1017227","1435","<c#><php><hash><migrate><hmac>","2","0","4","2009-06-19 13:12:53","1017900","2","","12748","","2009-06-19 12:11:15","2009-06-19 09:43:45","","","2009-06-19 10:00:48"
"1017150","migrate from C#.net 2.0 to php so the hash value of the password - how to resolve?","<p>we previously use a C#.net 2.0 to create a web app.</p>

<p>Users password were hashed and stored in database using the following code.</p>

<pre><code>private const string encryptionKey = ""AE09F72B007CAAB5"";

HMACSHA1 hash = new HMACSHA1();
hash.Key = HexToByte(encryptionKey);
encodedPassword = Convert.ToBase64String(
    hash.ComputeHash(Encoding.Unicode.GetBytes(password)));
</code></pre>

<p>now we intend to migrate to php.</p>

<p>so we face a problem for users when they want to back in. </p>

<p>what php equivalent of the method should be used so that the hash values in the database would work?</p>

<p>eg password to encode is pa55w0rd 
the hash value gotten is oK9NOVhpTkxLoLfvh1430SFb5gw=</p>

<p>Thank you.</p>
","<p>Try something like:</p>

<pre><code>&lt;?php
 $key = ""AE09F72B007CAAB5"";
 echo base64_encode(hash_hmac(""sha1"", ""test"", $key, true));
?&gt;
</code></pre>
","1017285","1435","<c#><php><hash><migrate><hmac>","2","0","4","2009-06-19 13:12:53","1017900","2","","12748","","2009-06-19 12:11:15","2009-06-19 09:43:45","","","2009-06-19 10:20:03"
"1017150","migrate from C#.net 2.0 to php so the hash value of the password - how to resolve?","<p>we previously use a C#.net 2.0 to create a web app.</p>

<p>Users password were hashed and stored in database using the following code.</p>

<pre><code>private const string encryptionKey = ""AE09F72B007CAAB5"";

HMACSHA1 hash = new HMACSHA1();
hash.Key = HexToByte(encryptionKey);
encodedPassword = Convert.ToBase64String(
    hash.ComputeHash(Encoding.Unicode.GetBytes(password)));
</code></pre>

<p>now we intend to migrate to php.</p>

<p>so we face a problem for users when they want to back in. </p>

<p>what php equivalent of the method should be used so that the hash values in the database would work?</p>

<p>eg password to encode is pa55w0rd 
the hash value gotten is oK9NOVhpTkxLoLfvh1430SFb5gw=</p>

<p>Thank you.</p>
","<p>In C# the default formatting of the hash is in HEX (AE09F72B007CAAB5 is a hex number).PHP defaults to Base64 formatting. Solving your problem is a matter of converting the base64 string to hex in php</p>
","1017291","1435","<c#><php><hash><migrate><hmac>","2","0","4","2009-06-19 13:12:53","1017900","2","","12748","","2009-06-19 12:11:15","2009-06-19 09:43:45","","","2009-06-19 10:20:55"
"1017150","migrate from C#.net 2.0 to php so the hash value of the password - how to resolve?","<p>we previously use a C#.net 2.0 to create a web app.</p>

<p>Users password were hashed and stored in database using the following code.</p>

<pre><code>private const string encryptionKey = ""AE09F72B007CAAB5"";

HMACSHA1 hash = new HMACSHA1();
hash.Key = HexToByte(encryptionKey);
encodedPassword = Convert.ToBase64String(
    hash.ComputeHash(Encoding.Unicode.GetBytes(password)));
</code></pre>

<p>now we intend to migrate to php.</p>

<p>so we face a problem for users when they want to back in. </p>

<p>what php equivalent of the method should be used so that the hash values in the database would work?</p>

<p>eg password to encode is pa55w0rd 
the hash value gotten is oK9NOVhpTkxLoLfvh1430SFb5gw=</p>

<p>Thank you.</p>
","<p>In your C# app you generate the byte[] arrays in two different ways with a little bit different results. Your PHP script needs to emulate them exactly.
<blockquote>hash.Key = HexToByte(encryptionKey)</blockquote> You pass in a 16 characters long string and get an array of 8 bytes, just like <code>hash.Key = new byte[]{0xAE, 0x09, 0xF7, 0x2B, 0x00, 0x7C, 0xAA, 0xB5 };</code> but<pre><code>string password = ""pa55w0rd"";
byte[] b = Encoding.Unicode.GetBytes(password)</pre></code>returns an array with 16 elements because of the Encoding.Unicode, like <code>byte[] b = { 0x112, 0x0, 0x97, 0x0, 0x53, 0x0, 0x53, 0x0, 0x119, 0x0, 0x48, 0x0, 0x114, 0x0,0x100, 0x0 }</code><br>
In your php script you can change the encoding of $password to utf-16le with <a href=""http://php.net/mb_convert_encoding"" rel=""nofollow noreferrer"">$data = mb_convert_encoding($password, 'UTF16-LE')</a> to achieve a similar result. hash_hmac() being unaware of any encoding will treat the string a 16 byte single-byte encoded string, just like hash.ComputeHash(byte[]) in .net does.</p>

<p><pre><code>&lt;?php
$password = ""pa55w0rd"";
$key = HexToBytes(""AE09F72B007CAAB5""); // 8 bytes, hex</p>

<p>// $to must be 'UTF-16LE'
// $from depends on the ""source"" of $password
$data = mb_convert_encoding($password, 'UTF-16LE', 'ASCII');</p>

<p>// I've saved this script as an ascii file -&gt; the string literal is ASCII encoded
// therefore php's strlen() returns 8 for $password and 16 for $data
// this may differ in your case, e.g. if the contents of $password comes from a
// http-request where the data is utf-8 encoded. Adjust the $from parameter for
// mb_convert_encoding() accordingly
echo 'Debug: |data|=', strlen($data), ' |password|=', strlen($password), ""\n"";  </p>

<p>$h = HexToBytes(hash_hmac('sha1', $data, $key));
echo 'hmac-sha1: ', base64_encode($h);</p>

<p>function HexToBytes($s) {
  // there has to be a more elegant way...
  return join('', array_map('chr', array_map('hexdec', str_split($s, 2))));
}</pre></code>prints<pre>Debug: |data|=16 |password|=8
hmac-sha1: oK9NOVhpTkxLoLfvh1430SFb5gw=</pre></p>
","1017900","1435","<c#><php><hash><migrate><hmac>","2","2","4","2009-06-19 13:12:53","1017900","2","","12748","","2009-06-19 12:11:15","2009-06-19 09:43:45","","","2009-06-19 13:12:53"
"11356216","How to implement HMAC with JS and PHP","<p>I am tying to implement a progressive hmac with PHP and JS.  I think I got the js figured out using crypto.js</p>

<pre><code>var hmac = CryptoJS.algo.HMAC.create(CryptoJS.algo.SHA256, ""Secret Passphrase"");

hmac.update(""Message Part 1"");
hmac.update(""Message Part 2"");
hmac.update(""Message Part 3"");

var hash = hmac.finalize();
</code></pre>

<p>Taken straight from crypto.js I'm trying to figure out how to duplicate this on the server side with PHP 5.3</p>

<p>Any help on this would be great!</p>
","<p>You can use <a href=""http://www.php.net/manual/en/function.hash-init.php"" rel=""nofollow"">hash_init()</a>, <a href=""http://www.php.net/manual/en/function.hash-update.php"" rel=""nofollow"">hash_update()</a> and <a href=""http://www.php.net/manual/en/function.hash-final.php"" rel=""nofollow"">hash_final()</a>:</p>

<pre><code>$ctx = hash_init('sha256', HASH_HMAC, 'Secret Passphrase');
hash_update($ctx, 'Message Part 1');
hash_update($ctx, 'Message Part 2');
hash_update($ctx, 'Message Part 3');
$result = hash_final($ctx);

echo $result;
</code></pre>
","11356260","1424","<php><javascript><hmac>","2","4","1","2012-07-06 05:22:50","11356260","0","1","","","","2012-07-06 05:17:13","","","2012-07-06 05:22:50"
"26572015","HMAC, RS and Base64 in Rust","<p>I have a project in which RS and HMAC 256...512 are involved and base64. Is there any way to do encoding and decoding in such the algorithms in Rust already? If so, is it safe to them now, at this point of Rust development stage?</p>
","<p>(By 'RS' I'm assuming you're speaking of RS256 and siblings, which are identifiers defined in <a href=""https://tools.ietf.org/html/rfc7518#section-3.1"" rel=""nofollow noreferrer"">RFC7518</a> for specific suites of asymmetric cryptography using RSA and SHA2 functions.)</p>

<p>These three algorithms are vastly different:</p>

<ul>
<li><p>HMAC is an authentication algorithm often used alongside symmetric crypto, and it is <em>digest agnostic</em>; so you also need a library of digest / hash functions. <a href=""https://briansmith.org/rustdoc/ring"" rel=""nofollow noreferrer"">ring</a> is a pure-Rust high-quality implementation of various <em>mainstream</em> cryptographic algorithms, such as AES, HMAC, SHA1/2/3, AEAD, etc.</p></li>
<li><p>RSA is a cryptosystem for public key cryptography. Ring, mentioned above, supports modern configurations of the system. For other/older configurations, you may use the <a href=""https://github.com/sfackler/rust-openssl"" rel=""nofollow noreferrer"">rust-openssl</a> bindings, or <a href=""https://crates.io/crates/native-tls"" rel=""nofollow noreferrer"">native-tls</a>.</p></li>
<li><p>Base64 is a binary-to-text encoding (not encryption). The <a href=""https://docs.rs/base64"" rel=""nofollow noreferrer"">base64 crate</a> is the recommended way to handle it.</p></li>
</ul>

<p>The question of how <em>safe</em> these are to use is highly subjective and depends on your use-case, and as such StackOverflow is not a good venue for that discussion.</p>
","26941772","1422","<encryption><base64><rust><hmac>","3","6","1","2019-09-05 12:13:56","26941772","0","","","","","2014-10-26 10:28:29","","2019-09-05 12:13:56","2014-11-15 02:15:12"
"24541465","OpenSSL Hmac and BouncyCastle Hmac Differ","<p>I am trying to figure out why an hmac in openssl is not giving me the same result as an hmac in java.</p>

<p>in open ssl</p>

<pre><code>echo -n ""Hello"" | openssl dgst -sha256 -hmac 04d6b077d60e323711b37813b3a68a71
</code></pre>

<p>Output:
cc598d8840fe409d5fcc1c1c856f9e8c311d1c458850615555857b023f1cd94c</p>

<p>In java</p>

<pre><code>String key = ""04d6b077d60e323711b37813b3a68a71""
SecretKeySpec key2 = new SecretKeySpec(Hex.decode(key), ""RAW"");
String data = ""Hello"";
Mac hmac = Mac.getInstance(""Hmac-SHA256"", BouncyCastleProvider.PROVIDER_NAME);
hmac.init(key2)
byte[] bytes = hmac.doFinal(data.getBytes());
System.out.println(Hex.toHexString(bytes));
</code></pre>

<p>Output:
877f9c8eb44c20987e3978928fbfcea0f1cf99c88f9db904596921b7ecf0613b</p>

<p>I am at a loss why these are different.</p>
","<p>OpenSSL treats <code>-hmac key</code> option as if the key is just an array of bytes represented as corresponding ASCII characters. The key is thus limited to contain only printable characters.</p>

<p>You can get the same results in Java as in OpenSSL by using</p>

<pre><code>SecretKeySpec key2 = new SecretKeySpec( key.getBytes(""ASCII""), ""RAW"" );
</code></pre>

<p>Alternatively you can use <code>openssl dgst -sha256 -mac HMAC -macopt hexkey:string</code> where <code>string</code> will be treated as a HEX encoded key.</p>
","24545919","1414","<java><openssl><bouncycastle><hmac><sha256>","5","4","1","2014-07-03 09:23:33","24545919","3","","207421","","2014-07-03 01:36:54","2014-07-02 21:39:58","","2014-07-03 09:23:33","2014-07-03 05:54:36"
"35245067","Generating a JWT in Ruby","<p>I am trying to post to Ping Identity's PingID API and it keeps giving me 403 invalid signature.</p>

<p>I am fairly certain I am encoding the JSON messages correctly. I get the header string to be identical with their example data but I am not sure if I am creating the HMAC SHA256 signature correctly.</p>

<p>I'm using <a href=""https://developer.pingidentity.com/en/api/pingid-api/example-pingid-user-registration.html"" rel=""nofollow"">the API walkthrough</a> and the code I've written is:</p>

<pre><code>require 'json'
require 'base64'
require 'OpenSSL'
require 'rest-client'


use_base64_key = ""JWC41crr322aUfdckVfJKHvGKNIPyAPGL7rMsTbzHlA=""

jwtheader = {
    ""alg"": ""HS256"",
    ""org_alias"": ""aaaaaaaa-a1b2-123a-b456-1234abcd5678"",
    ""token"": ""1a2b3c4d5e6f""
}

jwtpayload = {
    ""reqHeader"": {
        ""locale"": ""en"",
        ""orgAlias"": ""aaaaaaaa-a1b2-123a-b456-1234abcd5678"",
        ""secretKey"": ""1a2b3c4d5e6f"",
        ""timestamp"": ""2015-09-03 11:57:25.229"",
        ""version"": ""4.6""
    },
    ""reqBody"": {
        ""activateUser"": false,
        ""email"": ""marcher@pingdevelopers.com"",
        ""fName"": ""Meredith"",
        ""lname"": ""Archer"",
        ""username"": ""meredith"",
        ""role"": ""REGULAR"",
        ""clientData"": nil
    }
}

jwtheader64 = Base64.urlsafe_encode64(jwtheader.to_json).chomp[0...-1]
jwtpayload64 = Base64.urlsafe_encode64(jwtpayload.to_json).chomp[0...-1]
signeddata = jwtheader64 + ""."" + jwtpayload64

digest = OpenSSL::Digest.new('sha256')
instance = OpenSSL::HMAC.digest(digest, use_base64_key, signeddata)
signature = Base64.urlsafe_encode64(instance).chomp[0...-1]
</code></pre>

<p>When I use this with my own information, it returns a 403 error. To get the timestamp in their format I'm using:</p>

<pre><code>timestamp = Time.now.utc.strftime(""%m-%e-%y %H:%M:%S.000"")
</code></pre>

<p>What am I doing incorrect?</p>

<p>Solution:</p>

<p>I was able to use this code to successfully construct the token:</p>

<pre><code>require 'json'
require 'base64'
require 'OpenSSL'
require 'rest-client'

pidalg = ""HS256""
pidorg = ""aaaaaaaa-a1b2-123a-b456-1234abcd5678""
pidtok = ""c9fed74c5c994509b849ff65adb367d1""
timestamp = Time.now.utc.strftime(""%Y-%m-%d %H:%M:%S.000"")
uid = ""meredith""
pidkey = ""JWC41crr322aUfdckVfJKHvGKNIPyAPGL7rMsTbzHlA=""

#jwt header
jwtheader = {
    ""alg"": pidalg,
    ""org_alias"": pidorg,
    ""token"": pidtok
}

#jwt payload
jwtpayload = {
    ""reqHeader"":{
        ""locale"":""en"",
        ""orgAlias"":pidorg,
        ""secretKey"":pidtok,
        ""timestamp"":timestamp,
        ""version"":""4.6""
    },
    ""reqBody"":{
        ""getSameDeviceUsers"":false,
        ""userName"":uid,
    }
}

jwtheaderJSON = jwtheader.to_json
jwtheaderUTF = jwtheaderJSON.encode(""UTF-8"")
tokenheader = Base64.urlsafe_encode64(jwtheaderUTF)
puts tokenheader

jwtpayloadJSON = jwtpayload.to_json
jwtpayloadUTF = jwtpayloadJSON.encode(""UTF-8"")
tokenpayload = Base64.urlsafe_encode64(jwtpayloadUTF)
puts tokenpayload

signeddata = tokenheader + ""."" + tokenpayload

digest = OpenSSL::Digest.new('sha256')
bin_key = Base64.decode64(pidkey)
puts bin_key
instance = OpenSSL::HMAC.digest(digest, bin_key, signeddata)
signature = Base64.urlsafe_encode64(instance)
puts signature

apitoken = signeddata + ""."" + signature

puts apitoken
</code></pre>
","<p>Your code is basically correct but you're using the base64-encoded representation as the key to sign the JWT where you should be using the binary key, i.e. first base64-decode it as in:</p>

<pre><code>digest = OpenSSL::Digest.new('sha256')
bin_key = Base64.decode64(use_base64_key)
instance = OpenSSL::HMAC.digest(digest, bin_key, signeddata)
signature = Base64.urlsafe_encode64(instance).chomp[0...-1]
</code></pre>
","35253130","1405","<ruby><jwt><hmac>","1","1","1","2016-02-13 22:54:27","35253130","2","1","5892857","","2016-02-13 22:54:27","2016-02-06 18:53:31","","","2016-02-07 11:54:47"
"31981373","How to encrypt data with sha256 with hash_hmac in Rails like in this php function","<p>I need to convert this php function to Rails. It is used to encrypt the data we supply with a special key. The output of this function should match the ruby function. Please help.</p>

<pre><code>public static function genHash($secret, $data) {
    $ourhash = hash_hmac('sha256', utf8_decode($data), utf8_decode($secret), FALSE);
    return $Hmac;
}
</code></pre>
","<pre><code>require 'openssl'

def genHash(secret, data)
  OpenSSL::HMAC.hexdigest('sha256', secret, data)
end
</code></pre>
","31981883","1399","<php><ruby-on-rails><ruby><hash><hmac>","3","4","1","2015-08-13 09:17:32","31981883","0","1","1816580","","2015-08-13 09:17:32","2015-08-13 06:52:37","","2015-08-13 07:32:16","2015-08-13 07:19:13"
"44373395","Duo Security API with python client","<p>I'm trying to work with Duo's python client (<a href=""https://github.com/duosecurity/duo_client_python"" rel=""nofollow noreferrer"">https://github.com/duosecurity/duo_client_python</a>) and I believe I'm simply missing something with my novice python eyes.  I somehow need to authenticate my requests to the API using an HMAC signature -- which I've not worked with before but seems trivial to generate (they even provide a python function).  Doc here <a href=""https://duo.com/docs/adminapi#authentication"" rel=""nofollow noreferrer"">https://duo.com/docs/adminapi#authentication</a></p>

<p>I'm at a loss as to HOW to craft this signature for authentication, prior to passing my request to the API.  From <a href=""https://duo.com/docs/adminapi#authentication"" rel=""nofollow noreferrer"">https://duo.com/docs/adminapi#authentication</a>:</p>

<blockquote>
  <p>The API uses HTTP Basic Authentication to authenticate requests. Use your >Duo application’s integration key as the HTTP Username.</p>
  
  <p>Generate the HTTP Password as an HMAC signature of the request. This will >be different for each request and must be re-generated each time.</p>
</blockquote>

<p>It then goes into which parameters are added and necessary for the HMAC signature to be generated properly.  I understand this part.  My issue is how and when to pass the HMAC signature that I generate.  As the Duo doc doesn't specifically go into that, I'm thinking that this is something I should already know [were I not such a python novice].</p>

<p>For example, simple auth calls work fine (as they need no authentication):</p>

<pre>root@box:~# python -m duo_client.client --ikey XXXXXXXX --skey XXXXXXXX --host XXXXXXXX.duosecurity.com --method GET --path /auth/v2/check 200 OK
{
""response"":
{ ""time"": 1496437236 }
,
""stat"": ""OK""
}</pre>

<p>However, calls using admin require authentication, and thus fail with:</p>

<pre>root@box:~# python -m duo_client.client --ikey XXXXXXXX --skey XXXXXXXX --host XXXXXXXX.duosecurity.com --method GET --path /admin/v1/users signature=XXXXXXXX
401 Unauthorized
{
    ""code"": 40103,
    ""message"": ""Invalid signature in request credentials"",
    ""stat"": ""FAIL""
}</pre>

<p>Thanks in advance for any insight!</p>

<p>==EDIT==</p>

<p>So I thought I'd post the function that Duo provide for creating the signature, which appears similar to what is happening in the StackOverflow question I found that I thought might help (<a href=""https://stackoverflow.com/questions/6999565/python-https-get-with-basic-authentication"">Python, HTTPS GET with basic authentication</a>).  From <a href=""https://duo.com/docs/adminapi#authentication"" rel=""nofollow noreferrer"">https://duo.com/docs/adminapi#authentication</a>:</p>

<pre>
def sign(method, host, path, params, skey, ikey):
    """"""
    Return HTTP Basic Authentication (""Authorization"" and ""Date"") headers.
    method, host, path: strings from request
    params: dict of request parameters
    skey: secret key
    ikey: integration key
    """"""

    # create canonical string
    now = email.Utils.formatdate()
    canon = [now, method.upper(), host.lower(), path]
    args = []
    for key in sorted(params.keys()):
        val = params[key]
        if isinstance(val, unicode):
            val = val.encode(""utf-8"")
        args.append(
            '%s=%s' % (urllib.quote(key, '~'), urllib.quote(val, '~')))
    canon.append('&'.join(args))
    canon = '\n'.join(canon)

    # sign canonical string
    sig = hmac.new(skey, canon, hashlib.sha1)
    auth = '%s:%s' % (ikey, sig.hexdigest())

    # return headers
    return {'Date': now, 'Authorization': 'Basic %s' % base64.b64encode(auth)}
</pre>

<p>I've used the above function in a simple script to print out (just so I can visualize) what should be getting passed within the script I'll create to server our needs -- I added the function to a script and used print by adding the following:</p>

<pre>
# Printing Signature Headers ### TESTING ###
print sign('GET', 'XXXhostXXX', '/admin/v1/users', 'XXXparamXXX', 'XXXskeyXXX', 'XXXXikeyXXXX')
</pre>

<p>However, I'm getting this error:</p>

<pre>
root@box:~# ./duo.py
Traceback (most recent call last):
  File ""./duo.py"", line 39, in 
    print sign('GET', 'XXXhostXXX', '/admin/v1/users', 'XXXparamXXX', 'XXXskeyXXX', 'XXXikeyXXX')
  File ""./duo.py"", line 18, in sign
    for key in sorted(params.keys()):
AttributeError: 'str' object has no attribute 'keys'
</pre>

<p>Am I just missing something here?  I've been looking for what could cause that error but I thought I'd ask here as well.</p>
","<p>This was an ""issue"" on Duo's side...wrong skey was being used and my user did not have the proper access.</p>
","44397235","1399","<python><http><hmac>","1","0","1","2019-08-19 10:05:04","","1","","1981414","","2017-06-05 20:28:11","2017-06-05 16:26:20","","","2017-06-06 18:24:22"
"33432413","Hex to string, the python way, in powershell","<p>A bit of a weird question perhaps, but I'm trying to replicate a python example where they are creating a HMAC SHA256 hash from a series of parameters.</p>

<p>I've run into a problem where I'm supposed to translate an api key in hex to ascii and use it as secret, but I just can't get the output to be the same as python.</p>

<pre><code>&gt;&gt;&gt; import hmac
&gt;&gt;&gt; import hashlib
&gt;&gt;&gt; apiKey = ""76b02c0c4543a85e45552466694cf677937833c9cce87f0a628248af2d2c495b""
&gt;&gt;&gt; apiKey.decode('hex')
'v\xb0,\x0cEC\xa8^EU$fiL\xf6w\x93x3\xc9\xcc\xe8\x7f\nb\x82H\xaf-,I['
</code></pre>

<p>If I've understood the material online this is supposed to represent the hex string in ascii characters.</p>

<p>Now to the powershell script:</p>

<pre><code>$apikey = '76b02c0c4543a85e45552466694cf677937833c9cce87f0a628248af2d2c495b';

$hexstring = """"

for($i=0; $i -lt $apikey.Length;$i=$i+2){
    $hexelement = [string]$apikey[$i] + [string]$apikey[$i+1]
    $hexstring += [CHAR][BYTE][CONVERT]::toint16($hexelement,16)
}
</code></pre>

<p>That outputs the following:</p>

<pre><code>v°,♀EC¨^EU$fiLöw?x3ÉÌè⌂
b?H¯-,I[
</code></pre>

<p>They are almost the same, but not quite and using them as secret in the HMAC generates different results. Any ideas?</p>

<blockquote>
  <p>Stating the obvious: The key in this example is no the real key.</p>
</blockquote>

<p>Update:
They look more or less the same, but the encoding of the output is different. I also verified the hex to ASCII in multiple online functions and the powershell version seems right. </p>

<p>Does anyone have an idea how to compare the two different outputs?</p>

<p>Update 2:
I converted each character to integer and both Python and Powershell generates the same numbers, aka the content should be the same.</p>

<p>Attaching the scripts</p>

<p>Powershell:</p>

<pre><code>Function generateToken {

    Param($apikey, $url, $httpMethod, $queryparameters=$false, $postData=$false)


    #$timestamp = [int]((Get-Date -UFormat %s).Replace("","", "".""))
    $timestamp = ""1446128942""

    $datastring = $httpMethod + $url

    if($queryparameters){ $datastring += $queryparameters }
    $datastring += $timestamp
    if($postData){ $datastring += $postData }


    $hmacsha = New-Object System.Security.Cryptography.HMACSHA256

    $apiAscii = HexToString -hexstring $apiKey

    $hmacsha.key = [Text.Encoding]::ASCII.GetBytes($apiAscii)
    $signature = $hmacsha.ComputeHash([Text.Encoding]::ASCII.GetBytes($datastring))
    $signature
}

Function HexToString {

    Param($hexstring)

    $asciistring = """"

    for($i=0; $i -lt $hexstring.Length;$i=$i+2){
        $hexelement = [string]$hexstring[$i] + [string]$hexstring[$i+1]
        $asciistring += [CHAR][BYTE][CONVERT]::toint16($hexelement,16)
    }

    $asciistring
}

Function TokenToHex {

    Param([array]$Token)

    $hexhash = """"

    Foreach($element in $Token){
        $hexhash += '{0:x}' -f $element
    }

    $hexhash
}


$apiEndpoint = ""http://test.control.llnw.com/traffic-reporting-api/v1""
#what you see in Control on Edit My Profile page#
$apikey = '76b02c0c4543a85e45552466694cf677937833c9cce87f0a628248af2d2c495b';
$queryParameters = ""shortname=bulkget&amp;service=http&amp;reportDuration=day&amp;startDate=2012-01-01""
$postData = ""{param1: 123, param2: 456}""

$token = generateToken -uri $apiEndpoint -httpMethod ""GET"" -queryparameters $queryParameters, postData=postData, -apiKey $apiKey
TokenToHex -Token $token
</code></pre>

<p>Python:</p>

<pre><code>import hashlib
import hmac
import time
try: import simplejson as json
except ImportError: import json
class HMACSample:
        def generateSecurityToken(self, url, httpMethod, apiKey, queryParameters=None, postData=None):
                #timestamp = str(int(round(time.time()*1000)))
                timestamp = ""1446128942""
                datastring = httpMethod + url
                if queryParameters != None : datastring += queryParameters
                datastring += timestamp
                if postData != None : datastring += postData
                token = hmac.new(apiKey.decode('hex'), msg=datastring, digestmod=hashlib.sha256).hexdigest()
                return token
if __name__ == '__main__':
        apiEndpoint = ""http://test.control.llnw.com/traffic-reporting-api/v1""
        #what you see in Control on Edit My Profile page#
        apiKey = ""76b02c0c4543a85e45552466694cf677937833c9cce87f0a628248af2d2c495b"";
        queryParameters = ""shortname=bulkget&amp;service=http&amp;reportDuration=day&amp;startDate=2012-01-01""
        postData = ""{param1: 123, param2: 456}""
        tool = HMACSample()
        hmac = tool.generateSecurityToken(url=apiEndpoint, httpMethod=""GET"", queryParameters=queryParameters, postData=postData, apiKey=apiKey)
        print json.dumps(hmac, indent=4)
</code></pre>

<p>apiKey with ""test"" instead of the converted hex to ASCII string outputs the same value which made me suspect that the conversion was the problem. Now I'm not sure what to believe anymore.</p>

<p>/Patrik</p>
","<p>ASCII encoding support characters from this code point range 0–127. Any character outside this range, encoded with byte 63, which correspond to <code>?</code>, in case you decode byte array back to string. So, with your code, you ruin your key by applying ASCII encoding to it. But if what you want is a byte array, then why do you do <code>Hex String -&gt; ASCII String -&gt; Byte Array</code> instead of just <code>Hex String -&gt; Byte Array</code>?</p>

<p>Here is PowerShell code, which generate same results, as your Python code:</p>

<pre><code>function GenerateToken {
    param($apikey, $url, $httpMethod, $queryparameters, $postData)

    $datastring = -join @(
        $httpMethod
        $url
        $queryparameters
        #[DateTimeOffset]::Now.ToUnixTimeSeconds()
        1446128942
        $postData
    )

    $hmacsha = New-Object System.Security.Cryptography.HMACSHA256

    $hmacsha.Key = @($apikey -split '(?&lt;=\G..)(?=.)'|ForEach-Object {[byte]::Parse($_,'HexNumber')})

    [BitConverter]::ToString($hmacsha.ComputeHash([Text.Encoding]::UTF8.GetBytes($datastring))).Replace('-','').ToLower()
}

$apiEndpoint = ""http://test.control.llnw.com/traffic-reporting-api/v1""
#what you see in Control on Edit My Profile page#
$apikey = '76b02c0c4543a85e45552466694cf677937833c9cce87f0a628248af2d2c495b';
$queryParameters = ""shortname=bulkget&amp;service=http&amp;reportDuration=day&amp;startDate=2012-01-01""
$postData = ""{param1: 123, param2: 456}""

GenerateToken -url $apiEndpoint -httpMethod ""GET"" -queryparameters $queryParameters -postData $postData -apiKey $apiKey
</code></pre>

<p>I also fix some other errors in your PowerShell code. In particular, arguments to <code>GenerateToken</code> function call. Also, I change ASCII to UTF8 for <code>$datastring</code> encoding. UTF8 yields exactly same bytes if all characters are in ASCII range, so it does not matter in you case. But if you want to use characters out of ASCII range in <code>$datastring</code>, than you should choose same encoding, as you use in Python, or you will not get the same results.</p>
","33433690","1374","<python><powershell><hash><hex><hmac>","3","3","1","2015-10-31 19:35:02","33433690","1","1","3558914","","2015-10-31 13:22:25","2015-10-30 09:16:26","","2015-10-31 19:35:02","2015-10-30 10:22:22"
"51600957","HMAC Decryption","<p>I coded HMAC decryption. I try many time to decrypt the output.</p>

<p>This is my code </p>

<pre><code>package javaapplication_HMAC;

import java.io.UnsupportedEncodingException;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;
import com.sun.org.apache.xml.internal.security.utils.Base64;
import java.util.Formatter;

public class Encryption {

    public void Encryption_Base64(String x,String y){
     String message = x;
        String key = y;
        String algorithm = ""HmacSHA1"";  
        try {
            Mac sha256_hmac = Mac.getInstance(algorithm);
            SecretKeySpec secret_key = new SecretKeySpec(key.getBytes(""UTF-8""), algorithm);
             sha256_hmac.init(secret_key);
            String hash = Base64.encode(sha256_hmac.doFinal(message.getBytes(""UTF-8"")));
            System.out.println(hash);
        } catch (NoSuchAlgorithmException | UnsupportedEncodingException | InvalidKeyException e) {
            e.printStackTrace();
        }    
    }

    public static void main(String args[]) {
        Encryption encryption_base64 = new Encryption();
        encryption_base64.Encryption_Base64(""test"", ""123456"");
    }

}
</code></pre>

<p>The output is : QFemksWe6HuyDAJIepZd+ldchzc=</p>

<p>Is it possible to decrypt it?  </p>
","<p>TL;DR: No.</p>

<p>A MAC function is also called a ""keyed hash function"". It is not an ""encryption"" in any meaning of the word.
It transforms a key and a plain text into an authentication tag. The same key + plain text result in the same tag, this property is used to check that the plain text was not modified.</p>

<p>HMAC is a MAC built on a hash function, in your case SHA-256. As long as the hash function is not broken, you can't get the plain text back, even if you know the key.</p>

<p>If there is only a small set of possible plain texts, you can of course do a brute-force attack, just trying each plain text with the key to see if the tag is matching. (If the key is also unknown but from a small set, you can also try to try all possible keys.)</p>
","51602104","1362","<java><encryption><base64><hmac>","0","3","1","2018-07-31 15:08:16","","1","1","466862","","2018-07-31 15:08:16","2018-07-30 19:24:12","","","2018-07-30 20:51:16"
"24554946","Android (Java) method equivalent to Python HMAC-SHA256 in Hex","<p>I am attempting to replicate the Python HMAC-SHA256 equivalent in Android (Java). The Python representation is shown bellow with the correct output:  </p>

<p>Python</p>

<pre><code>print (hmac.new(key = binascii.unhexlify(""0123465789""),msg = binascii.unhexlify(""ABCDEF""),digestmod=hashlib.sha256).hexdigest()).upper()

Output
5B5EE08A20DDD645A31384E51AC581A4551E9BE5AC8BF7E690A5527F2B9372CB
</code></pre>

<p>However, I am unable to get the same output in Java using the code below:</p>

<p>Java</p>

<pre><code>Mac sha256_HMAC = Mac.getInstance(""HmacSHA256"");
SecretKeySpec secretKey = new SecretKeySpec(""0123465789"".getBytes(""UTF-8""), ""HmacSHA256"");      
sha256_HMAC.init(secretKey);
byte[] hash = sha256_HMAC.doFinal(""ABCDEF"".getBytes(""UTF-8""));      
String check = (new String(Hex.encodeHex(hash))).toUpperCase();
System.out.println(check);

Output
46F9FD56BDAE29A803BAD5BC668CB78DA4C54A51E6C031FB3BC2C42855047213
</code></pre>

<p>I am fairly positive that my problem is failing to code the Java equivalent of Python's: </p>

<pre><code>key = binascii.unhexlify(""0123465789"")
</code></pre>

<p>&amp;</p>

<pre><code>msg = binascii.unhexlify(""ABCDEF"") 
</code></pre>

<p>This is because when I do not perform the <strong>binascii.unhexlify</strong> on the Hex-String inputs in Python, I render identical results for both methods. However, the Python HMAC-SHA256 requires the <strong>binascii.unhexlify</strong> operation. </p>

<p>I have done a lot of research and even attempted to import the method that Python uses to perform the <strong>binascii.unhexlify</strong> in Java but I am still unable to produce identical results. Any help and/or advise would be more than appreciated in solving this issue. Can anybody help me out?</p>
","","","1351","<java><android><python><hmac><sha256>","0","","0","2014-07-03 13:25:30","","3","4","","","","2014-07-03 13:25:30","","",""
"24802908","Decode HMAC signature","<p>I decode (secret_key,client_id, path) into signature by following code :</p>

<pre><code>require 'rubygems'
require 'base64'
require 'cgi'
require 'hmac-sha1'
@client_id = ""asdkasdlda""
@secret = ""3fdsdsfxds""

binary_key = Base64.decode64(@secret)

params.update({""client"" =&gt; @client_id})
path = uri_path + ""?"" + params.collect{|k,v| ""#{k}=#{v}""}.inject{|initial,cur| initial + ""&amp;"" + cur}

digest = HMAC::SHA1.new(binary_key).update(path).digest
digest = Base64.encode64(digest).gsub(/[+\/]/, {""+"" =&gt; ""-"", ""/"" =&gt; ""_""}).delete(""="")
return ""#{path}&amp;sig=#{digest}""
</code></pre>

<p>So, this code generates <code>sig</code> and <code>path</code>. we send request to server in following way:</p>

<pre><code>/api/v1/customers/sign_in.json?user[email]=amit1656789@gmail.com&amp;user[password]=[FILTERED]&amp;client=asdkasdlda&amp;sig=JSdP5xUHhgS8ZbKApBOIlsJKg_Q
</code></pre>

<p>Now, on server side, i want to decode this params[""sign""] into app_id, secret_key and path means reverse process of above code. But i am not found any reverse process of this. Means </p>

<pre><code>(app_id, secret, path) =&gt;  ""signature""
""signature""      =&gt;   (app_id, secret, path) /* Here i stuck */
</code></pre>
","<p>First thing you should know:</p>

<blockquote>
  <p>""signature"" => (app_id, secret, path)</p>
</blockquote>

<p>This is <em>not possible</em>. It is not how MACs of any kind work. The signature does not contain the data. Signatures are meant to be sent <em>alongside</em> the message that they sign.</p>

<p>For secure HMAC, you should <em>never</em> send the secret with the message that you sign. It is also not possible to figure out a secret from the signature, except by repeatedly guessing what the value might be.</p>

<hr>

<p>The usual way to confirm a signature is to follow the same process on the server, signing the same message, using the same secret (which the server should <em>already</em> have), and compare the signatures. You have made it difficult for yourself because you have signed the params as you sent them, and then put the signature on the end. You have to re-construct the message.</p>

<p>First, you need to use whatever web server library you can to get the request URI including the query string</p>

<pre><code>signed_uri = ""/api/v1/customers/sign_in.json?user[email]=amit1656789@gmail.com&amp;user[password]=[FILTERED]&amp;client=asdkasdlda&amp;sig=JSdP5xUHhgS8ZbKApBOIlsJKg_Q""
</code></pre>

<p>Then split it into the message and its signature (I'll leave that to you, but just a regular expression ought to work):</p>

<pre><code>message = ""/api/v1/customers/sign_in.json?user[email]=amit1656789@gmail.com&amp;user[password]=[FILTERED]&amp;client=asdkasdlda""

signature = ""JSdP5xUHhgS8ZbKApBOIlsJKg_Q""
</code></pre>

<p>To decode this signature back to the original digest (for easy comparison), just reverse the replace and encoding you did at the end on the client:</p>

<pre><code>client_digest = Base64.decode64( 
  signature.gsub(/[-_]/, {""-"" =&gt; ""+"", ""_"" =&gt; ""/""}) )
</code></pre>

<p>Then on the server (where you should already have a value for @secret), calculate what you <em>expect</em> the signature to be:</p>

<pre><code>@secret = '3fdsdsfxds'
binary_key = Base64.decode64(@secret)

server_digest = HMAC::SHA1.new(binary_key).update( message ).digest

if server_digest == client_digest
  puts ""The message was signed correctly""
else
  puts ""ERROR: The message or signature is not correct!""
end
</code></pre>
","24813509","1350","<ruby><algorithm><api><signature><hmac>","0","3","1","2014-07-17 21:05:00","","7","","1743874","","2014-07-17 21:02:55","2014-07-17 11:57:38","","","2014-07-17 21:05:00"
"25128372","Accessing Api data using HMAC Authentication","<p>I have api_key, secret and I have to hash the signature to sha256. The signature = api_key+secret+utctimestamp. I am using Crypto.Js for hashing. I am getting following error </p>

<pre><code>XMLHttpRequest cannot load ""HOST LINK"". No 'Access-Control-Allow-Origin' header is present on the requested resource. Origin localhost is therefore not allowed access
</code></pre>

<p>Following is my code</p>

<pre><code>var app = (function($){    
var baseURL = 'http://xyz.herokuapp.com/api/v1';
var apiSecretKey = 'ABC';
var apiKey = '123';
var init = function(){  

$('#login').on('click', function(e){
    e.preventDefault();
    login();
}); 
};

var login = function() {        
var u = encodeURIComponent($('#username').val());
var p = encodeURIComponent($('#password').val());

$.ajax({
    type: ""POST"",
    url: baseURL + ""/login"",
    contentType: ""application/json; charset=utf-8"",
    dataType: ""json"",
    data: JSON.stringify({email: u, password: p}),      
    beforeSend: function (request) {
        request.setRequestHeader('Access-Control-Allow-Origin', 'http://localhost');
        request.setRequestHeader('X-HASH', getHMAC(apiKey, timestamp));
    },
    success: function (data) {

    $('.loggedIn').show();
    console.log(data);
    $('.loggedIn .name').text(""Hello "");
    },
    error: function (errorMessage) {
    alert('Error logging in');
    }
});
};

timestamp = new Date().getTime() / 1000;;


var getHMAC = function(key, timestamp) {
    var hash = CryptoJS.SHA256(key+timestamp+apiSecretKey);
    return hash.toString();
};

return {
  init:init
};  

})(jQuery);
app.init();
</code></pre>

<p>Is the error due to wrong hashing or CORS problem. This is the first time I am using HMAC authentication, I don't know if I am doing it right or wrong.</p>

<p>Google developer tools give me this information![enter image description here][1]</p>

<pre><code>REQUEST Method: OPTION
Status Code: 200 Ok

Request Header
Access-Control-Request-Headers:access-control-allow-origin, accept, content-type, x-hash
Access-Control-Request-Method:POST

Response Header
Allow:DELETE, POST, OPTIONS
Connection:keep-alive
Content-Length:0
Content-Type:text/html; charset=utf-8
Date:Mon, 04 Aug 2014 21:30:06 GMT
Server:gunicorn/18.0
Via:1.1 vegur
</code></pre>
","","","1348","<jquery><api><cors><hmac>","1","","0","2014-08-04 22:20:04","","1","","903790","","2014-08-04 22:20:04","2014-08-04 22:10:10","","",""
"38904954","HttpContent.ReadAsByteArrayAsync() fails without error inside DelegatingHandler","<p>I'm trying to implement HMAC security for an API. Everything works fine until I try to post a file.</p>

<p>The HMAC solution can be found here - <a href=""https://github.com/gavinharriss/WebAPI.HMAC"" rel=""nofollow"">https://github.com/gavinharriss/WebAPI.HMAC</a> - it's a fork from the original to allow GET requests as well as POST requests.</p>

<p>The code to attach a file:</p>

<pre><code>var requestContent = new MultipartFormDataContent();
var fileContent = new ByteArrayContent(file);
requestContent.Add(fileContent, ""file"", filename);
</code></pre>

<p>if I immediately call <code>HttpContent.ReadAsByteArrayAsync()</code> there is no issue, the byte array is available.</p>

<p>However, the HMAC <code>HttpClient</code> (<a href=""https://github.com/gavinharriss/WebAPI.HMAC/blob/master/WebAPI.HMAC/Http/HMACHttpClient.cs"" rel=""nofollow"">HMACHttpClient</a>) implements a <code>DelegatingHandler</code> (<a href=""https://github.com/gavinharriss/WebAPI.HMAC/blob/master/WebAPI.HMAC/Http/HMACDelegatingHandler.cs"" rel=""nofollow"">HMACDelegatingHandler</a>) in order to attach the HMAC header to requests.</p>

<p>In the <a href=""https://github.com/gavinharriss/WebAPI.HMAC/blob/master/WebAPI.HMAC/Http/HMACDelegatingHandler.cs"" rel=""nofollow"">HMACDelegatingHandler</a> the request is passed along as a <code>HttpRequestMessage</code> from which the <code>HttpRequestMessage.Content</code> property is used in a helper to build the HMAC signature.</p>

<p>When building the signature, the following code is called from a <a href=""https://github.com/gavinharriss/WebAPI.HMAC/blob/master/WebAPI.HMAC/Crypto/HMACHelper.cs"" rel=""nofollow"">helper class</a>:</p>

<pre><code>private static async Task&lt;byte[]&gt; ComputeHash(HttpContent httpContent)
{
    using (var md5 = MD5.Create())
    {
        byte[] hash = null;
        if (httpContent != null)
        {
            var content = await httpContent.ReadAsByteArrayAsync(); // &lt;-- Fails here
            if (content.Length != 0)
            {
                hash = md5.ComputeHash(content);
            }
        }
        return hash;
    }
}
</code></pre>

<p>When stepping through the code the <code>var content = await httpContent.ReadAsByteArrayAsync()</code> line is hit, then nothing, no error. The requests just seems to go poof but everything is still running and the <code>HttpClient</code> request never gets sent.</p>

<p>Any ideas what's going on?</p>
","<p>Having tested this with various sizes of file, I found the issue arose when files got around the 50,000 byte mark.</p>

<p>This post provided a solution: <a href=""https://stackoverflow.com/questions/17797236/httpcontent-readasstringasync-causes-request-to-hang-or-other-strange-behaviour"">HttpContent.ReadAsStringAsync causes request to hang (or other strange behaviours)</a>.</p>

<p>If you replace erroring line in HMACHelper (line 66):</p>

<pre><code>var content = await httpContent.ReadAsByteArrayAsync();
</code></pre>

<p>with this:</p>

<pre><code>var ms = new MemoryStream();
await httpContent.CopyToAsync(ms);
ms.Seek(0, SeekOrigin.Begin);

var content = ms.ToArray();
</code></pre>

<p>It should stop hanging.</p>
","38945164","1335","<c#><httprequest><hmac>","4","4","1","2016-08-14 18:14:18","38945164","0","","","","","2016-08-11 19:49:26","","2017-05-23 12:02:51","2016-08-14 18:14:18"
"9562366","Confused how a client and a server using AES and Hmac will verify each other","<p>The scenario is this: I have a client and server talking. Here is the standard idea:</p>

<ul>
<li>Use Diffie-Hellman to generate a secret key between the client and server.</li>
<li>Use this secret key for AES/CTR/PKCS7Padding cipher on both client and server.</li>
<li>Use Hmac on the original message</li>
<li>Encrypt the Hmac message with AES cipher</li>
</ul>

<p>So this would allow the client and server to talk securely. </p>

<p>The relevant code example I'm looking at is the tutorial here: <a href=""http://www.java2s.com/Tutorial/Java/0490__Security/TamperedmessagewithHMacencryptionwithAESinCTRmode.htm"" rel=""nofollow"">Tampered message with HMac, encryption with AES in CTR mode : Advanced Encryption Standard « Security « Java Tutorial</a></p>

<p>I'm able to generate the secret key for both the client and server. I'm able to encrypt this using Hmac and AES. Because encryption and decryption happen independently, I am unsure how to retrieve the relevant information required for decryption. </p>

<p>Here is the section I'm confused on:</p>

<pre><code>cipher.init(Cipher.DECRYPT_MODE, key, ivSpec);

byte[] plainText = cipher.doFinal(cipherText, 0, ctLength);
int messageLength = plainText.length - hMac.getMacLength();

hMac.init(hMacKey);
hMac.update(plainText, 0, messageLength);

byte[] messageHash = new byte[hMac.getMacLength()];
</code></pre>

<p>If the client sends an encrypted message, how does the server retrieve the <code>ivSpec</code>, <code>hMac.getMacLength()</code>, and <code>hMacKey</code>? These items are required on the server to decrypt the message from the client.</p>

<p>I understand that the Initialization Vector (IV) can be retained from the ciphertext since it's appended to the beginning of the resulting ciphertext (I think I'll have to add it in manually since I don't think AES cipher does that?). However, the hMacKey and hMac length used to verify the message integrity remains a mystery. </p>

<p>On a last note, can someone explain what the purpose of this line is? Is this for encryption or decryption?</p>

<pre><code>     cipherText[9] ^= '0' ^ '9';`
</code></pre>
","<p>First, for this kind of thing use SSL if your doing it for real. For educational purposes, this stuff is cool.</p>

<p>As others have said, this is an example that proves HMAC works when the cipher text is tampered with.  Hence the <code>cipherText[9] ^= '0' ^ '9';</code></p>

<p>In order to use HMAC, you have to verify that the message authentication tag (whats returned  by hmac) you got with your cipher text  matches the one you are supposed to have. To do this in this code you: 1) decrypt the message using the key you negotiated, 2) compute the hmac of that text using a different key you negotiated and then 3) compare that the two are the same.</p>

<p>Since you know those keys, you can decrypt the message and compute the mac. The mac length  b the way, is a fixed property of the hmac function and is publicly known.</p>

<p>Because you must have the key to generate the valid tag, if they match, then the message is authentic.</p>

<p>As a note, this code is likely insecure since you need to MAC the ciphertext, not plaintext. If you don't, you end up with problems like the <a href=""https://en.wikipedia.org/wiki/Padding_oracle_attack"" rel=""nofollow"">Padding oracle attack</a> that broke a bunch of sites secure cookie implementations. Use SSL for these kind of things.</p>
","9576262","1326","<java><encryption><aes><hmac><hmacsha1>","3","1","1","2016-06-08 02:19:27","9576262","3","1","1466970","","2016-06-08 02:12:01","2012-03-05 06:09:22","","2016-06-08 02:19:27","2012-03-06 00:35:15"
"47250628","How to get CryptoJS result as hash_hmac PHP (SHA1)","<p>Try to genegarate HMAC on JS with CryptoJS lib from UTF8 string with UTF8 secret. Like PHP hash_hmac('sha1','...','...',true);</p>

<p>PHP :</p>

<pre><code>$buf = ' accept';
$bufferedSecret = '��xDx�����4�J�?)#';

hash_hmac('sha1', $buf, $bufferedSecret, false);
/* d301cae776ed8c5d46ac93bd7441b01af4d1b888 */
hash_hmac('sha1', $buf, $bufferedSecret, true);
/* ���v�]F���tA��Ѹ� */
</code></pre>

<p>JavaScript : </p>

<pre><code>var buf = ' accept';
var bufferedSecret = '��xDx�����4�J�?)#';

CryptoJS.HmacSHA1(buf, bufferedSecret).toString();
/* d301cae776ed8c5d46ac93bd7441b01af4d1b888 */
var forBase64 = CryptoJS.HmacSHA1(buf, bufferedSecret);
CryptoJS.enc.Base64.stringify(forBase64);
/* 0wHK53btjF1GrJO9dEGwGvTRuIg= */
</code></pre>

<p>How get same HMAC(SHA1) UTF8 value on JS?</p>
","<h2>Buffer to UTF8</h2>

<p>You can take your Buffer and convert it to UTF-8 in JavaScript using the toString method; make sure you specify which format in the parameters, suitable values are <code>hex</code> and <code>utf8</code>, read more <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString"" rel=""nofollow noreferrer"">here</a>.</p>

<pre><code>var buf = ' accept';
var bufferedSecret = '��xDx�����4�J�?)#';

CryptoJS.HmacSHA1(buf, bufferedSecret).toString('utf8');
</code></pre>
","47250734","1325","<javascript><php><hmac><cryptojs><hmacsha1>","0","0","2","2017-11-13 20:03:20","47272613","0","","8833582","","2017-11-12 16:18:36","2017-11-12 15:40:03","","","2017-11-12 15:48:21"
"47250628","How to get CryptoJS result as hash_hmac PHP (SHA1)","<p>Try to genegarate HMAC on JS with CryptoJS lib from UTF8 string with UTF8 secret. Like PHP hash_hmac('sha1','...','...',true);</p>

<p>PHP :</p>

<pre><code>$buf = ' accept';
$bufferedSecret = '��xDx�����4�J�?)#';

hash_hmac('sha1', $buf, $bufferedSecret, false);
/* d301cae776ed8c5d46ac93bd7441b01af4d1b888 */
hash_hmac('sha1', $buf, $bufferedSecret, true);
/* ���v�]F���tA��Ѹ� */
</code></pre>

<p>JavaScript : </p>

<pre><code>var buf = ' accept';
var bufferedSecret = '��xDx�����4�J�?)#';

CryptoJS.HmacSHA1(buf, bufferedSecret).toString();
/* d301cae776ed8c5d46ac93bd7441b01af4d1b888 */
var forBase64 = CryptoJS.HmacSHA1(buf, bufferedSecret);
CryptoJS.enc.Base64.stringify(forBase64);
/* 0wHK53btjF1GrJO9dEGwGvTRuIg= */
</code></pre>

<p>How get same HMAC(SHA1) UTF8 value on JS?</p>
","<p>I was found a way for get UTF-8 RAW. </p>

<p>Used ""convertWordArrayToUint8Array()"" from here:
<a href=""https://gist.github.com/getify/7325764"" rel=""nofollow noreferrer"">https://gist.github.com/getify/7325764</a>
and just decode it.</p>

<pre><code>var wordArr = CryptoJS.HmacSHA1(buf, bufferedSecret);
var utf8Arr = convertWordArrayToUint8Array(wordArr);
var string = new TextDecoder('utf-8').decode(utf8Arr);
</code></pre>
","47272613","1325","<javascript><php><hmac><cryptojs><hmacsha1>","0","1","2","2017-11-13 20:03:20","47272613","0","","8833582","","2017-11-12 16:18:36","2017-11-12 15:40:03","","","2017-11-13 20:03:20"
"14177928","HMAC-MD5 in pure lua","<p>I need to write a HMAC-MD5 algorithm in pure Lua.. </p>

<p>I got this algorithm <a href=""http://en.wikipedia.org/wiki/Hash-based_message_authentication_code#Implementation"" rel=""nofollow noreferrer"">from Wikipedia</a></p>

<pre><code>function hmac (key, message)
    if (length(key) &gt; blocksize) then
        key = hash(key) // keys longer than blocksize are shortened
    end if
    if (length(key) &lt; blocksize) then
        key = key ∥ [0x00 * (blocksize - length(key))] // keys shorter than blocksize are zero-padded ('∥' is concatenation) 
    end if

    o_key_pad = [0x5c * blocksize] ⊕ key // Where blocksize is that of the underlying hash function
    i_key_pad = [0x36 * blocksize] ⊕ key // Where ⊕ is exclusive or (XOR)

    return hash(o_key_pad ∥ hash(i_key_pad ∥ message)) // Where '∥' is concatenation
end function
</code></pre>

<p>and I have the md5 code from <a href=""https://stackoverflow.com/a/12292659/1137788"">here</a>. The md5 calculation function works correctly..</p>

<p>Implementing the algorithm in lua, so far I have the following code </p>

<pre><code>local function hmac_md5(key,msg)
    local blocksize = 64

    if string.len(key) &gt; blocksize then 
        key = calculateMD5(key)
    end 

    while string.len(key)&lt;blocksize do 
        key = key .. ""0""
    end 

    -- local o_key_pad = bit_xor((0x5c * blocksize),key) 
    -- local i_key_pad = bit_xor((0x36 * blocksize),key)

    return calculateMD5(o_key_pad..calculateMD5(i_key_pad..message))
end 

--calculateMD5 is the md5.Calc function in the Stackoverflow link specifed
</code></pre>

<p>I am stuck in the part where o_key_pad and i_key_pad are calculated.. do I just XOR the 2 values?  The python implementation in the wikipedia link had some weird calculations.. 
Please help!</p>
","<p>Yes, ""⊕"" is the symbol for ""exclusive or"".</p>

<ul>
<li><p>Remember: once you compute the final hash, <strong>DO NOT</strong> use an ordinary string comparison to check if a hash is correct.  This <strong>WILL</strong> allow attackers to sign arbitrary messages.</p></li>
<li><p>Note that <code>0x5c * blocksize</code> is probably not what you are looking for, since that multiplies <code>0x5c</code> by <code>blocksize</code>.  You want to create an array of length <code>blocksize</code> containing <code>0x5c</code> in each position.</p></li>
<li><p>Note that you must pad with zero bytes, not the character <code>""0""</code>.  So <code>key = key .. ""0""</code> is wrong.  It should be <code>key = key .. ""\0""</code>, or however you create NUL bytes in Lua.</p></li>
</ul>
","14177988","1321","<hash><lua><md5><hmac>","2","3","1","2013-01-06 00:26:58","14177988","1","","-1","","2017-05-23 12:04:33","2013-01-06 00:17:44","","","2013-01-06 00:26:58"
"15377235","HMAC Mismatch Error Using PHP Decryptor for RNCryptor","<p>I have an encrypted NSData variable that has been Base64 Encoded in Objective-C, and is being passed via POST to a PHP script. I am attempting to decrypt this string, but keep receiving a HMAC mismatch error. Here is my PHP code:</p>

<pre><code>// back to binary
$bin_data = mb_convert_encoding($username_encrypted, ""UTF-8"", ""BASE64"");
// extract salt
$salt = substr($bin_data, 2, 8);
// extract HMAC salt
$hmac_salt = substr($bin_data, 10, 8);
// extract IV
$iv = substr($bin_data, 18, 16);
// extract data
$data = substr($bin_data, 34, strlen($bin_data) - 34 - 32);
// extract HMAC
$hmac = substr($bin_data, strlen($bin_data) - 32);

// make HMAC key
$hmac_key = pbkdf2('SHA1', $password, $hmac_salt, 10000, 32, true);
// make HMAC hash
$hmac_hash = hash_hmac('sha256', $data, $hmac_key, true);
// check if HMAC hash matches HMAC
if($hmac_hash != $hmac)
    exit(""Error HMAC mismatch"");

// make data key
$key = pbkdf2('SHA1', $password, $salt, 10000, 32, true);
// decrypt
$ret = mcrypt_decrypt(MCRYPT_RIJNDAEL_128, $key, $data, MCRYPT_MODE_CBC, $iv);
echo trim(preg_replace('/[\x00-\x08\x0B\x0C\x0E-\x1F\x80-\xFF]/u', '', $ret));

function pbkdf2($algorithm, $password, $salt, $count, $key_length, $raw_output = false)
{
    $algorithm = strtolower($algorithm);
    if(!in_array($algorithm, hash_algos(), true))
        die('PBKDF2 ERROR: Invalid hash algorithm.');
    if($count &lt;= 0 || $key_length &lt;= 0)
        die('PBKDF2 ERROR: Invalid parameters.');

    $hash_length = strlen(hash($algorithm, """", true));
    $block_count = ceil($key_length / $hash_length);

    $output = """";
    for($i = 1; $i &lt;= $block_count; $i++) {
        // $i encoded as 4 bytes, big endian.
        $last = $salt . pack(""N"", $i);
        // first iteration
        $last = $xorsum = hash_hmac($algorithm, $last, $password, true);
        // perform the other $count - 1 iterations
        for ($j = 1; $j &lt; $count; $j++) {
            $xorsum ^= ($last = hash_hmac($algorithm, $last, $password, true));
        }
        $output .= $xorsum;
    }

    if($raw_output)
        return substr($output, 0, $key_length);
    else
        return bin2hex(substr($output, 0, $key_length));
}
</code></pre>

<p>And this is my iOS code:</p>

<pre><code>NSData *plain_data = [plain_string dataUsingEncoding:NSUTF8StringEncoding];
NSError *error_encryption = nil;
NSData *encrypted_data = [RNOpenSSLEncryptor encryptData:plain_data
                                            withSettings:kRNCryptorAES256Settings
                                                password:key
                                                   error:&amp;error_encryption];

NSString *test_variable = [encrypted_data base64Encoding];
</code></pre>

<p>Any idea what is wrong?</p>
","<p>The issue was fixed by following this post: <a href=""https://stackoverflow.com/questions/14835546/base64-issue-in-nsmutableurlrequest-post-message?rq=1"">Base64 issue in NSMutableURLRequest POST message?</a></p>

<p>Essentially, the <code>+</code>'s were being converted to spaces by PHP. Also, I used the PHP <code>decrypt2()</code> function found in his example, rather than mine. (I've included the code below for reference.)</p>

<pre><code>function decrypt2($b64_data,$password)
{
            // back to binary
            //$bin_data = mb_convert_encoding($b64_data, ""UTF-8"", ""BASE64"");
            $bin_data = base64_decode($b64_data);
            // extract salt
            $salt = substr($bin_data, 2, 8);
            // extract HMAC salt
            $hmac_salt = substr($bin_data, 10, 8);
            // extract IV
            $iv = substr($bin_data, 18, 16);
            // extract data
            $data = substr($bin_data, 34, strlen($bin_data) - 34 - 32);
            $dataWithoutHMAC = chr(2).chr(1).$salt.$hmac_salt.$iv.$data;
            // extract HMAC
            $hmac = substr($bin_data, strlen($bin_data) - 32);
            // make HMAC key
            $hmac_key = pbkdf2('SHA1', $password, $hmac_salt, 10000, 32, true);
            // make HMAC hash
            $hmac_hash = hash_hmac('sha256', $dataWithoutHMAC , $hmac_key, true);
            // check if HMAC hash matches HMAC
            if($hmac_hash != $hmac) {
                echo ""HMAC mismatch"".$nl.$nl.$nl;
               // return false;
            }
            // make data key
            $key = pbkdf2('SHA1', $password, $salt, 10000, 32, true);
            // decrypt
            $ret = mcrypt_decrypt(MCRYPT_RIJNDAEL_128, $key, $data, MCRYPT_MODE_CBC, $iv);      
            return $ret;
}
$passkey = ""123456"";
</code></pre>
","15377501","1321","<php><encryption><hmac><rncryptor>","2","1","1","2013-03-21 04:00:48","15377501","0","","1250940","","2013-03-13 04:46:41","2013-03-13 04:42:02","","2017-05-23 11:50:08","2013-03-13 05:09:16"
"15665251","HMAC SHA512 output varies in Perl","<p>I have observed that the output of HMAC SHA512 for a given data and a key varies each time I execute the script.</p>

<p>first, I take an example of a script where the output does not vary:</p>

<pre><code>#! /usr/bin/perl

use Digest::SHA qw(hmac_sha512_hex);
use warnings;

$data=""test"";
$key=""20202020"";

print hmac_sha512_hex($data,$key),""\n"";
</code></pre>

<p>I run this script two times and get the same output:</p>

<pre><code>perl test.pl
457a1ff378f11880defaa91675de4633d1f1e69712b5dccd2f86612224b825b4461a9215a37cce53
8e7f5de43a6900867667b9361af38df32fc58e54d7ce9a02

perl test.pl
457a1ff378f11880defaa91675de4633d1f1e69712b5dccd2f86612224b825b4461a9215a37cce53
8e7f5de43a6900867667b9361af38df32fc58e54d7ce9a02
</code></pre>

<p>now I modify the data variable in the script as follows:</p>

<pre><code>#! /usr/bin/perl

use Digest::SHA qw(hmac_sha512_hex);
use warnings;

$data={'method' =&gt; 'test', 'value' =&gt; 21};
$key=""20202020"";

print hmac_sha512_hex($data,$key),""\n"";
</code></pre>

<p>now the output is different each time I run the script:</p>

<pre><code>perl test.pl
cb1a40ba7a7f52da39dc0a3f130399dfbecb5249946057fd19887b72a58701f28452f6e663153bb6
85a4b86f9d427de4af5904801e11cb6fcbc272344605c2a9

perl test.pl
73dd1678a4e7f29f8032a65cbe979248b3e41cd6ed7aa81e5b214b8b6232af1e7a6683412b8532b7
187313d2c2a96c7e5009a9362690f355028b56ca319825e4
</code></pre>

<p>how do I correct this?</p>
","<p>When you pass $data to the hmac_sha512_hex function you are passing the address of the variable which will change every time you run the program. You will have to look into serializing your hash into a string in a consistent way.</p>
","15665474","1317","<perl><hmac><sha512>","0","1","2","2013-03-27 17:30:13","15665490","0","","","","","2013-03-27 17:18:52","","","2013-03-27 17:29:24"
"15665251","HMAC SHA512 output varies in Perl","<p>I have observed that the output of HMAC SHA512 for a given data and a key varies each time I execute the script.</p>

<p>first, I take an example of a script where the output does not vary:</p>

<pre><code>#! /usr/bin/perl

use Digest::SHA qw(hmac_sha512_hex);
use warnings;

$data=""test"";
$key=""20202020"";

print hmac_sha512_hex($data,$key),""\n"";
</code></pre>

<p>I run this script two times and get the same output:</p>

<pre><code>perl test.pl
457a1ff378f11880defaa91675de4633d1f1e69712b5dccd2f86612224b825b4461a9215a37cce53
8e7f5de43a6900867667b9361af38df32fc58e54d7ce9a02

perl test.pl
457a1ff378f11880defaa91675de4633d1f1e69712b5dccd2f86612224b825b4461a9215a37cce53
8e7f5de43a6900867667b9361af38df32fc58e54d7ce9a02
</code></pre>

<p>now I modify the data variable in the script as follows:</p>

<pre><code>#! /usr/bin/perl

use Digest::SHA qw(hmac_sha512_hex);
use warnings;

$data={'method' =&gt; 'test', 'value' =&gt; 21};
$key=""20202020"";

print hmac_sha512_hex($data,$key),""\n"";
</code></pre>

<p>now the output is different each time I run the script:</p>

<pre><code>perl test.pl
cb1a40ba7a7f52da39dc0a3f130399dfbecb5249946057fd19887b72a58701f28452f6e663153bb6
85a4b86f9d427de4af5904801e11cb6fcbc272344605c2a9

perl test.pl
73dd1678a4e7f29f8032a65cbe979248b3e41cd6ed7aa81e5b214b8b6232af1e7a6683412b8532b7
187313d2c2a96c7e5009a9362690f355028b56ca319825e4
</code></pre>

<p>how do I correct this?</p>
","<p>The data that you pass into <code>hmac_sha512_hex</code> is interpreted as a string. You are passing it as a reference to a hash. You can verify this by printing the value of <code>$data</code> before passing it into the function.</p>

<p>Your reference is just a unique identifier for your hash. Perl doesn't guarantee that you'll get the same hash reference for the same data in different runs of your program. You are therefore passing different values into <code>hmac_sha512_hex</code> which will obviously give you different output.</p>

<p>If you want your output to be the same, then you need to find a way to pass the <em>same</em> string into the function each time. One simple approach might be to use the string that you get back from <a href=""https://metacpan.org/module/Data%3a%3aDumper"" rel=""nofollow"">Data::Dumper</a>'s Dumper function.</p>

<p><strong>Update:</strong> If you use Data::Dumper, then you'll need to set <code>$Data::Dumper::Sortkeys</code> to a true value.</p>
","15665490","1317","<perl><hmac><sha512>","0","3","2","2013-03-27 17:30:13","15665490","0","","","","","2013-03-27 17:18:52","","","2013-03-27 17:30:13"
"33992392","Shopify C# HMAC SHA256 OAuth Validation","<p>I'm trying to validate the Shopify HMAC during an OAUTH request and the hash I generate does not match the one provided as part of the request.</p>

<p>I've found some other threads but they are <a href=""https://stackoverflow.com/questions/13254907/how-can-i-create-a-matching-hmac-value-to-verify-a-shopify-webhook-in-net"">either outdated</a>, as the documentation now states it uses a GET request instead of POST, or <a href=""https://stackoverflow.com/questions/32565052/hmac-sha256-issue-in-shopify-oauth-output-does-not-match"">unanswered</a> in java.</p>

<p>My C# code is as follows:</p>

<pre><code>string key = ""mysecretkey"";

string message = string.Format(""shop={0}&amp;timestamp={1}"", shop, timestamp);

System.Text.ASCIIEncoding encoding = new ASCIIEncoding();

byte[] keyBytes = encoding.GetBytes(key);

byte[] messageBytes = encoding.GetBytes(message);

System.Security.Cryptography.HMACSHA256 cryptographer = new System.Security.Cryptography.HMACSHA256(keyBytes);

byte[] bytes = cryptographer.ComputeHash(messageBytes);

string digest = BitConverter.ToString(bytes).Replace(""-"", """");

bool valid = digest == hmac.ToUpper();
</code></pre>

<p>I'm guessing the message is being built incorrectly but I've followed the <a href=""https://docs.shopify.com/api/authentication/oauth"" rel=""nofollow noreferrer"">official documentation</a> with no luck.</p>

<p>Can someone help please?</p>
","<p>You are calculating a HMAC without using your key.</p>

<p>The documentation states that you should generate the HMAC digest using the shared key. What is the meaning of an HMAC value without the key anyways? Anybody could mimic the shopify server if Shopify had not use the pre-shared key between you and them for calculating the HMAC.</p>

<p>The following code block is from the documentation:</p>

<pre><code>digest = OpenSSL::Digest.new('sha256')
secret = ""hush""
message = ""shop=some-shop.myshopify.com&amp;timestamp=1337178173""

digest = OpenSSL::HMAC.hexdigest(digest, secret, message)
digest == ""2cb1a277650a659f1b11e92a4a64275b128e037f2c3390e3c8fd2d8721dac9e2""
</code></pre>

<p>Therefore, try <code>cryptographer.Key = keyBytes;</code> before computing the Hash </p>

<pre><code>byte[] keyBytes = encoding.GetBytes(key);

byte[] messageBytes = encoding.GetBytes(message);

System.Security.Cryptography.HMACSHA256 cryptographer = new System.Security.Cryptography.HMACSHA256(keyBytes);

cryptographer.Key = keyBytes;

byte[] bytes = cryptographer.ComputeHash(messageBytes);
</code></pre>
","33992803","1317","<c#><oauth><shopify><sha256><hmac>","2","1","3","2017-05-03 07:37:36","34428449","4","2","-1","","2017-05-23 12:18:04","2015-11-30 06:09:09","","","2015-11-30 06:40:35"
"33992392","Shopify C# HMAC SHA256 OAuth Validation","<p>I'm trying to validate the Shopify HMAC during an OAUTH request and the hash I generate does not match the one provided as part of the request.</p>

<p>I've found some other threads but they are <a href=""https://stackoverflow.com/questions/13254907/how-can-i-create-a-matching-hmac-value-to-verify-a-shopify-webhook-in-net"">either outdated</a>, as the documentation now states it uses a GET request instead of POST, or <a href=""https://stackoverflow.com/questions/32565052/hmac-sha256-issue-in-shopify-oauth-output-does-not-match"">unanswered</a> in java.</p>

<p>My C# code is as follows:</p>

<pre><code>string key = ""mysecretkey"";

string message = string.Format(""shop={0}&amp;timestamp={1}"", shop, timestamp);

System.Text.ASCIIEncoding encoding = new ASCIIEncoding();

byte[] keyBytes = encoding.GetBytes(key);

byte[] messageBytes = encoding.GetBytes(message);

System.Security.Cryptography.HMACSHA256 cryptographer = new System.Security.Cryptography.HMACSHA256(keyBytes);

byte[] bytes = cryptographer.ComputeHash(messageBytes);

string digest = BitConverter.ToString(bytes).Replace(""-"", """");

bool valid = digest == hmac.ToUpper();
</code></pre>

<p>I'm guessing the message is being built incorrectly but I've followed the <a href=""https://docs.shopify.com/api/authentication/oauth"" rel=""nofollow noreferrer"">official documentation</a> with no luck.</p>

<p>Can someone help please?</p>
","<p>OK the devs at Shopify got back to me with the answer. It seems you need to hash the <strong>entire</strong> contents of the querystring in alphabetical order except the signature and hmac. I had my own parameter (rlr) I was appending as well as one not mentioned in the docs (state).</p>

<pre><code> string message = """";// ""code=7af66fd73427a1634cee3103297230b8&amp;rlr=9DFD5EA9-7747-4142-97D9-2D44BBA442F1&amp;shop=appswiz.myshopify.com&amp;state=fa992b8f-762e-4813-b707-6044e71ad3b5&amp;timestamp=1448856806"";
        message = ""code=xxxxxxxx"";
        message += ""&amp;rlr=xxxxx"";
        message += ""&amp;shop=xxx.myshopify.com"";
        message += ""&amp;state=xxxxxxxx"";
        message += ""&amp;timestamp=1449111190"";
        hmac = ""xxxxxxx"";
        System.Text.ASCIIEncoding encoding = new ASCIIEncoding();
        byte[] keyBytes = encoding.GetBytes(key);
        byte[] messageBytes = encoding.GetBytes(message);
        System.Security.Cryptography.HMACSHA256 cryptographer = new System.Security.Cryptography.HMACSHA256(keyBytes);

        byte[] bytes = cryptographer.ComputeHash(messageBytes);

        string digest = BitConverter.ToString(bytes).Replace(""-"", """");
        return digest == hmac.ToUpper();
</code></pre>

<p>This now works.</p>
","34428449","1317","<c#><oauth><shopify><sha256><hmac>","2","4","3","2017-05-03 07:37:36","34428449","4","2","-1","","2017-05-23 12:18:04","2015-11-30 06:09:09","","2016-06-09 23:23:08","2015-12-23 04:01:39"
"33992392","Shopify C# HMAC SHA256 OAuth Validation","<p>I'm trying to validate the Shopify HMAC during an OAUTH request and the hash I generate does not match the one provided as part of the request.</p>

<p>I've found some other threads but they are <a href=""https://stackoverflow.com/questions/13254907/how-can-i-create-a-matching-hmac-value-to-verify-a-shopify-webhook-in-net"">either outdated</a>, as the documentation now states it uses a GET request instead of POST, or <a href=""https://stackoverflow.com/questions/32565052/hmac-sha256-issue-in-shopify-oauth-output-does-not-match"">unanswered</a> in java.</p>

<p>My C# code is as follows:</p>

<pre><code>string key = ""mysecretkey"";

string message = string.Format(""shop={0}&amp;timestamp={1}"", shop, timestamp);

System.Text.ASCIIEncoding encoding = new ASCIIEncoding();

byte[] keyBytes = encoding.GetBytes(key);

byte[] messageBytes = encoding.GetBytes(message);

System.Security.Cryptography.HMACSHA256 cryptographer = new System.Security.Cryptography.HMACSHA256(keyBytes);

byte[] bytes = cryptographer.ComputeHash(messageBytes);

string digest = BitConverter.ToString(bytes).Replace(""-"", """");

bool valid = digest == hmac.ToUpper();
</code></pre>

<p>I'm guessing the message is being built incorrectly but I've followed the <a href=""https://docs.shopify.com/api/authentication/oauth"" rel=""nofollow noreferrer"">official documentation</a> with no luck.</p>

<p>Can someone help please?</p>
","<p>Using Guy Lowe's answer I recently got this working:</p>

<pre><code>    public bool ValidateShopifyHmac(string hmacHeader, string localData, string apiSecret) {
        var ascii = new ASCIIEncoding();
        var secretBytes = ascii.GetBytes(apiSecret);
        var cryptographer = new System.Security.Cryptography.HMACSHA256(secretBytes);
        var messageBytes = ascii.GetBytes(localData);
        var hashedMessage = cryptographer.ComputeHash(messageBytes);
        var digest = BitConverter.ToString(hashedMessage).Replace(""-"", """");
        return digest == hmacHeader.ToUpper();
    }
</code></pre>
","35397795","1317","<c#><oauth><shopify><sha256><hmac>","2","0","3","2017-05-03 07:37:36","34428449","4","2","-1","","2017-05-23 12:18:04","2015-11-30 06:09:09","","2016-02-14 20:56:39","2016-02-14 20:47:09"
"19861729","How to input key with ""PBKDF2WithHmacSHA1"" in Java","<p>I am working on a Java project where I must ensure the confidentiality of users password saved in a plaintext file. </p>

<p>To do so, I will write only a hash of the password in the file. More specifically, my intention is to write the hash of the password and a random salt, plus the random salt itself, to avoid the use of rainbow and lookup tables. I also want to use key-stretching with PBKDF2, to make the computation of the hash computationally expensive. 
Finally, I would like to use a keyed hash algorithm, HMAC, for a final layer of protection.</p>

<p>I am trying to implement my thoughts in a Java code, and I have found some examples of the operations that I have presented above:</p>

<pre><code>private static byte[] pbkdf2(char[] password, byte[] salt, int iterations, int bytes)
    throws NoSuchAlgorithmException, InvalidKeySpecException
{
    PBEKeySpec spec = new PBEKeySpec(password, salt, iterations, bytes * 8);
    SecretKeyFactory skf = SecretKeyFactory.getInstance(""PBKDF2WithHmacSHA1"");
    return skf.generateSecret(spec).getEncoded();
}
</code></pre>

<p>The thing that I really cannot understand is how to input my secret key as the key used by the HMAC algorithm, as it doesn't seem an input to the function. I have looked through the Java documentation, but I cannot find a solution to my question.</p>
","<p>If your talking about the HMAC function used internally by PBKDF2 for key streching, you don't need to supply a key, it will create one from the inputs.</p>

<p>If you wanted to use PBKDF2 to create key material for an HMAC function, then below works.</p>

<p>You init a Mac function the same way you'd do it with a cipher.</p>

<p>Using your <code>pbkdf2</code> method above.</p>

<pre><code>byte[] key = pbkdf2(password, salt, 1000, 16)
Mac mac = Mac.getInstance(""HmacSHA1"");
mac.init(new SecretKeySpec(key, ""HmacSHA1"");

byte[] macResult = mac.doFinal(...);
</code></pre>
","19862525","1315","<java><security><hash><hmac><pbkdf2>","1","1","1","2013-11-08 15:22:39","19862525","0","","","","","2013-11-08 14:42:39","","","2013-11-08 15:22:39"
"26167926","HMAC using Linux Kernel Crypto APIs not the same as the one by OpenSSL command","<p>I tried code(Using Linux Kernel Crypto APIs) for calculating HMAC-SHA512 on a file.
Surprisingly, HMAC calculated from the kernel code and from OpenSSL commands are different.</p>

<p>OpenSSL commands are:</p>

<pre><code>openssl rand -base64 16
plakOhrXlfnBENPVBo91kg==
openssl dgst -sha512 -mac hmac -macopt key:plakOhrXlfnBENPVBo91kg== ../hello6.ko  
HMAC-SHA512(../hello6.ko)=   9605f40851630f5b7a18fa30c7e5d6f1e77afb011d319efa515556d12ba6930f459825b3695a0d0d910a714724c0d99b36ccea5c878962b32a8de65dcbcc247d
</code></pre>

<p>HMAC-SHA512 from the kernel code is:  </p>

<pre><code>84306723b713379aa666fe9aa75af3192a9707d19136c25dd2286c5f6d86dfd8f76ceaa0ce147b53c0e9f7bfab485f38f5139c687c34c840db7f7fa9438bf8b0d8df8e770088ffffc8de8e770088ffffc3f027a0ffffffff672c00000088fffff0de8e770088ffff1900000000000080672c000000000000e8de8e770088ffff    
</code></pre>

<p>How come these HMACs are different for the same content? Any pointers to get rid of this issue is very helpful.  </p>

<p>Base64 encoded key is generated by below command and stored in a file: </p>

<pre><code>openssl rand -base64 -out $Module_name.sha512key 16
</code></pre>

<p>HMAC is generated on a file and stored in a file.
    openssl dgst -sha512 -mac hmac -macopt key:$HMAC_KEY $HMAC_PATH/$Module_name> temp.txt</p>

<p>Key and File content are read by below code:</p>

<pre><code>    static char hmac[HMAC_SHA512_SIZE];
    const char *kofilename = ""/home/sri/Documents/Hello/hello6.ko"";
    const char *hmackey_file = ""/home/sri/Documents/Hello/hello6.ko.sha512key""; 
    const char *hmac_file = ""/home/sri/Documents/Hello/hello6.ko.sha512""; 

    unsigned char *data = NULL;
    int readkostatus;
    int readkeystatus;
    int readhmacstatus;

    unsigned char *hmackey = NULL;
    unsigned char *stored_hmac = NULL; 

    readkeystatus = read_file(hmackey_file, &amp;hmackey); 

    if(readkeystatus &lt; 0)
        goto readkeyerr;

    printk(KERN_INFO ""HMAC Key is :%s"", hmackey);

    readkostatus = read_kofile(kofilename, &amp;data);

    if(readkostatus &lt; 0)
        goto readkoerr;

    printk(KERN_INFO ""File data size is :%ld"", strlen(data)); 
    printk(KERN_INFO ""File data is :%s"", data);

    hmac_sha512(hmackey, data, hmac, sizeof(hmac)); 
    printk(KERN_INFO ""FINAL HMAC:%s"", hmac);

    readhmacstatus = read_file(hmac_file, &amp;stored_hmac); 

    if(readhmacstatus &lt; 0)
    goto readhmacerr;

    printk(KERN_INFO ""Stored HMAC:%s"", stored_hmac);

    if(!memcmp(stored_hmac, hmac, HMAC_SHA512_SIZE))    
    printk(KERN_INFO ""HMACs match"");
    else
        printk(KERN_INFO ""HMACs do not match""); 

    vfree(stored_hmac); 
    vfree(data); 
    vfree(hmackey); 

    return 0;

   readkeyerr:
   {
       printk(KERN_INFO ""hmac key read error:%d"", readkeystatus);    
       return readkeystatus;
   }

   readkoerr:
   {
       printk(KERN_INFO ""ko read error:%d"", readkostatus);        
       return readkostatus;
   }

   readhmacerr:
   {
       printk(KERN_INFO ""hmac read error:%d"", readhmacstatus);
       return readhmacstatus;
   }
</code></pre>

<p>Code for reading the files is given below:</p>

<pre><code>    int read_file(const char *filename, unsigned char **data)
    {
        struct file* filp = NULL; 
        long filesize;  
        int ret = 0;


        mm_segment_t old_fs = get_fs();
        set_fs(get_ds());
        filp = filp_open(filename, O_RDONLY, 0);
        if(IS_ERR(filp)) {
            ret = PTR_ERR(filp);
            printk(KERN_INFO ""kofile is not opened"");
        }
        else
        {
            loff_t offset;
            offset = 0; 
            filesize = filp-&gt;f_dentry-&gt;d_inode-&gt;i_size; 
            if (filesize &lt;= 0 || filesize &gt; 131072)
            {
                goto fileoperror;
            }

            *data = (unsigned char *)vmalloc(filesize);

            if (*data == NULL)
                goto datanull;

            ret = vfs_read(filp, *data, filesize, &amp;offset);

            if(ret != filesize)
                goto read_error; 

            filp_close(filp, NULL);
        }

        set_fs(old_fs);
        return ret;

    fileoperror:
        {
            filp_close(filp, NULL);
            set_fs(old_fs);
            printk(KERN_INFO ""Invalid file operation '%s'\n"", filename);    
            return (-EPERM); 
        } 
    datanull:
        {
            filp_close(filp, NULL);
            set_fs(old_fs);
            printk(KERN_INFO ""Data Buffer is not allocated"");
            return (-EFAULT); 
        }

    read_error:
        {
            filp_close(filp, NULL);
            set_fs(old_fs);
            printk(KERN_INFO ""Failed to read '%s'.\n"", filename);
            return (-EFBIG);    
        }

    }

int read_kofile(const char* filename, unsigned char **data)
{
   return read_file(filename, data);
}
</code></pre>

<p>HMAC-SHA-512 is calculated on the file by calling Crypto APIs:</p>

<pre><code>#define HMAC_SHA512_SIZE 64

struct hmac_sha512_result {
    struct completion completion;
    int err;
};

static void hmac_sha512_complete(struct crypto_async_request *req, int err) {
    struct hmac_sha512_result *r=req-&gt;data;
    if(err==-EINPROGRESS)
        return;
    r-&gt;err=err;
    complete(&amp;r-&gt;completion);
}

int hmac_sha512(const unsigned char *key, // key 
                         const unsigned char *data_in, // data in
                        unsigned char *hash_out, size_t outlen) {  // hash buffer and length

    int rc=0;
    struct crypto_ahash *tfm;
    struct scatterlist sg;
    struct ahash_request *req;
    struct hmac_sha512_result tresult;
    void *hash_buf;
        size_t klen = strlen(key);
        size_t dlen = strlen(data_in); 

        int len = HMAC_SHA512_SIZE;
        char hash_tmp[HMAC_SHA512_SIZE];
    char *hash_res = hash_tmp;

        printk(KERN_INFO ""hmac_sha512: HMAC key is %s "", key);

    /* Set hash output to 0 initially */
    memset(hash_out, 0, outlen);

    init_completion(&amp;tresult.completion);
    tfm=crypto_alloc_ahash(""hmac(sha512)"",0,0);
    if(IS_ERR(tfm)) {
        printk(KERN_ERR ""hmac_sha512: crypto_alloc_ahash failed.\n"");
        rc=PTR_ERR(tfm);
        goto err_tfm;
    }
    if(!(req=ahash_request_alloc(tfm,GFP_KERNEL))) {
        printk(KERN_ERR ""hmac_sha512: failed to allocate request for hmac(sha512)\n"");
        rc=-ENOMEM;
        goto err_req;
    }
    if(crypto_ahash_digestsize(tfm)&gt;len) {
        printk(KERN_ERR ""hmac_sha512: tfm size &gt; result buffer.\n"");
        rc=-EINVAL;
        goto err_req;
    }
    ahash_request_set_callback(req,CRYPTO_TFM_REQ_MAY_BACKLOG,
                    hmac_sha512_complete,&amp;tresult);

    if(!(hash_buf=kzalloc(dlen,GFP_KERNEL))) {
        printk(KERN_ERR ""hmac_sha512: failed to kzalloc hash_buf"");
        rc=-ENOMEM;
        goto err_hash_buf;
    }
    memcpy(hash_buf,data_in,dlen);
    sg_init_one(&amp;sg,hash_buf,dlen);

    crypto_ahash_clear_flags(tfm,-0);
    if((rc=crypto_ahash_setkey(tfm,key,klen))){
        printk(KERN_ERR ""hmac_sha512: crypto_ahash_setkey failed\n"");
        goto err_setkey;
    }
    ahash_request_set_crypt(req,&amp;sg,hash_res,dlen);
    rc=crypto_ahash_digest(req);
    switch(rc) {
        case 0:
            while (len--) {
                snprintf(hash_out, outlen, ""%02x"", (*hash_res++ &amp; 0x0FF));
                hash_out += 2;
            }

                break;
        case -EINPROGRESS:
        case -EBUSY:
            rc=wait_for_completion_interruptible(&amp;tresult.completion);
            if(!rc &amp;&amp; !(rc=tresult.err)) {
                INIT_COMPLETION(tresult.completion);
                break;
            } else {
                printk(KERN_ERR ""hmac_sha512: wait_for_completion_interruptible failed\n"");
                goto out;
            }
        default:
            goto out;
    }

    out:
    err_setkey:
        kfree(hash_buf);
    err_hash_buf:
        ahash_request_free(req);
    err_req:
        crypto_free_ahash(tfm);
    err_tfm:
        return rc;
}
</code></pre>

<p>Please let me know, if something is missing.</p>
","","","1305","<c><linux><linux-kernel><openssl><hmac>","2","","0","2014-10-05 02:49:21","","6","","2365790","","2014-10-05 02:49:21","2014-10-02 19:14:52","","",""
"28059022","Base64 HMAC-SHA1 and MD5 encryption in Dart and Vuforia's VWS API","<p>To communicate with Vuforia through its VWS API I have to do some tricky stuff: first create this string</p>

<pre><code>StringToSign = 
  HTTP-Verb + ""\n"" +
  Content-MD5 + ""\n"" +
  Content-Type + ""\n"" +
  Date + ""\n"" +
  Request-Path;
</code></pre>

<p>where <code>Content-MD5</code> is the encryption of the request's body...</p>

<blockquote>
  <p>(from the first boundary to the last one, including the boundary
  itself). For request types without request body, include the MD5 hash
  of an empty string which is “d41d8cd98f00b204e9800998ecf8427e”.</p>
</blockquote>

<p>then with this string you have to perform the equivalent to this Java code</p>

<pre><code>Signature = Base64 (HMAC-SHA1 (server_secret_key, StringToSign));
</code></pre>

<p>where <code>server_secret_key</code> is a constant. Finally you have to plug that into an authorization header of this form</p>

<p><code>Authorization: VWS {provision_access_key}:{Signature}</code></p>

<p>I've got no experience with encryption, can anybody tell me how to do this in Dart?</p>

<p><strong>Edit</strong></p>

<p>More info about this on <a href=""https://developer.vuforia.com/resources/dev-guide/setting-api"" rel=""nofollow"">Setting Up the API</a></p>
","<p>All the algorithms you need for this are in the dart <a href=""https://pub.dartlang.org/packages/crypto"" rel=""nofollow"">crypto package</a>.</p>



<pre class=""lang-dart prettyprint-override""><code>import 'dart:convert';
import 'dart:io';

import 'package:crypto/crypto.dart' as crypto;

main() {
  var contentStr = '{x:""y""}';
  var content = UTF8.encode(contentStr);
  var md5 = new crypto.MD5();
  md5.add(content);

  var verb = 'GET';
  var hash = crypto.CryptoUtils.bytesToHex(md5.close());
  var type = 'text/plain';
  var date = HttpDate.format(new DateTime.now());
  var path = '/request/path';
  var stringToSign = '$verb\n$hash\n$type\n$date\n$path';
  print(stringToSign);
  print('');

  var keyStr = ""0102030405060708090a0b0c0d0e0f"";
  var key = [];
  for (int i = 0; i &lt; keyStr.length; i += 2) {
    key.add(int.parse(keyStr.substring(i, i + 2), radix: 16));
  }
  var hmac = new crypto.HMAC(new crypto.SHA1(), key);
  hmac.add(UTF8.encode(stringToSign));
  print(crypto.CryptoUtils.bytesToHex(hmac.close()));
}
</code></pre>

<p>Of cause you need to figure out the exact encoding of the different parts, e.g. the date. If just one bit is wrong in the input nothing works. </p>

<p>If you have some examples of input and output it is much easier to get the details right. E.g. test the MD5 of the empty string</p>



<pre class=""lang-dart prettyprint-override""><code>print(crypto.CryptoUtils.bytesToHex(new crypto.MD5().close()));
</code></pre>
","28062315","1302","<dart><md5><sha1><hmac><vuforia>","2","5","1","2015-01-23 07:43:55","","1","","2118130","","2015-01-22 00:34:03","2015-01-21 03:14:07","","2015-01-23 07:43:55","2015-01-21 08:07:00"
"8610730","How do I link my MS Visual Studio project against OpenSSL static libraries?","<p>Before starting on this project, I had the false impression I was proficient in coding and using Visual Studio 2010. I realize now I was under just full of myself.</p>

<p>My platform is development box is 64bit Windows 7, but I need to build for both 64 and 32 bit platforms.  I'm using VS 2010 and OpenSSL 1.0.0e, though if need be, I can use another one.  I'm trying to create a static library (*.lib) that will be included into a larger project by other developers.  The *.lib seems to compile, but obviously things are not all well since the test program breaks.</p>

<p>I cannot use *.dlls with my program, this has come from on high, therefore I've been trying to statically link my library to libeay32.lib and ssleay32.lib.  I've only just begun and like to start slow when using something new, so the only two functions I'm trying to call from SSL are HMAC and EVP_sha512:</p>

<p><code>HMAC(EVP_sha512(), key, keyLen, lpBufferAddr, dwCurBufSize, hashOut, &amp;len);</code></p>

<p>I acknowledge I may be doing it entirely wrong, but there you have it. Honestly, the only thing I need are the crypto functions, and HMAC functions. I could probably use something else, but I've been told to use OpenSSL. Anyway, moving on....</p>

<p>When building the test program that links to my library project (which in turn links to the two OpenSSL libraries), I get the following linking errors:</p>

<pre><code>error LINK2019: unresolved external symbol _HMAC@28 referenced in function ""public: int _thiscall etc""
error LINK2019: unresolved external symbol _EVP_sha512@28 referenced in function ""public: int _thiscall etc""
</code></pre>

<p>I include both libraries in ""Additional Dependencies"", and have included their directory in ""Additional Library Dependencies"".</p>

<p>Can anyone help me with this? I've been pouring over this and have come to the unfortunate conclusion I'm a dunce.  Creating static libs from OpenSSL was difficult enough for me, I  admit, and I'm not even convinced I succeeded with x64.  Any help and advice would be greatly appreciated.</p>
","<p>OpenSSL is C-based library and is compiled with /Gd option. All the functions are with __cdecl calling convention.</p>

<p>Add __cdecl before the functions which you are using. (Note that there is no need to recompile the library after adding __cdecl since the library is compiled with this option).</p>

<p>e.g. if you are using SSL_connect</p>

<pre><code> int __cdecl SSL_connect(SSL * ssl);
</code></pre>

<p>I think, it will solve your problem.</p>

<p>In few cases, you many need to wrap the function declaration under extern ""C"". But as far as I know, in this case, you should not need to do this.</p>
","15728201","1296","<static><linker><openssl><hmac>","2","0","1","2013-03-31 09:41:43","","0","","","","","2011-12-22 23:10:09","","","2013-03-31 09:41:43"
"47242528","HMAC-SHA256 - how to?","<p>I am doing HMAC-SHA256 in Android. Here is the following code :</p>

<pre><code>String baseString = ""eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiI2NjU0MjA5MGE2NGJhYWU0MzI4NGFiYTY0MmNkNWJmNmFlNzdkNjFhIiwiYXVkIjoiaHR0cHM6Ly9hcHAuaWZvcm1idWlsZGVyLmNvbS9leHphY3QvYXBpL29hdXRoL3Rva2VuIiwiZXhwIjoxNTEwNDMyMzcyLCJpYXQiOjE1MTA0MzE3NzJ9"";

String clientSecret = ""167edb4d9c3e603131619ae4a92c76307e3f9631"";
Mac sha256_HMAC = Mac.getInstance(""HmacSHA256"");
SecretKeySpec secret_key = new 
SecretKeySpec(clientSecret.getBytes(""UTF-8""), ""HmacSHA256"");
sha256_HMAC.init(secret_key);
String jwtSignature = 
Base64.encodeToString(sha256_HMAC.doFinal(baseString.getBytes(""UTF-8"")), Base64.NO_WRAP);
Log.d(""JWT-SIGNATURE"", jwtSignature);
</code></pre>

<p>I get the JWT-SIGNATURE value as 2nFaU/7jcc99jTWCO0VLriN/fiLwqi/ap7eeuVhhal4=</p>

<p>Instead the correct JWT-SIGNATURE value should be 2nFaU_7jcc99jTWCO0VLriN_fiLwqi_ap7eeuVhhal4</p>

<p>There are few characters that are not correct i.e. ""/"" and a ""="" at the end.Can someone kindly help me out.</p>
","<p>The encoding you need to use is a variant of Base64 encoding called base64url.</p>

<p>From wikipedia:</p>

<blockquote>
  <p>Using standard Base64 in URL requires encoding of '+', '/' and '='
  characters into special percent-encoded hexadecimal sequences ('+'
  becomes '%2B', '/' becomes '%2F' and '=' becomes '%3D'), which makes
  the string unnecessarily longer.</p>
  
  <p>For this reason, modified Base64 for URL variants exist, where the '+'
  and '/' characters of standard Base64 are respectively replaced by '-'
  and '_', so that using URL encoders/decoders is no longer necessary
  and have no impact on the length of the encoded value, leaving the
  same encoded form intact for use in relational databases, web forms,
  and object identifiers in general. Some variants allow or require
  omitting the padding '=' signs to avoid them being confused with field
  separators, or require that any such padding be percent-encoded. Some
  libraries will encode '=' to '.'.</p>
</blockquote>
","47849795","1289","<java><android><character-encoding><hmac>","0","0","1","2017-12-16 20:44:29","","0","","2649012","","2017-11-11 21:52:19","2017-11-11 20:33:39","","","2017-12-16 20:44:29"
"20725481","Convert HMAC-SHA256 function from Java to Ruby","<p>I'm trying to convert this hashing function to Ruby from Java.</p>

<p>Java code:</p>

<pre><code>  Mac localMac = ""HMAC-SHA256"";
  String str1 = ""a4d1b77bbb1a4a5ca695ad72c84b77e5"";
  localMac.init(new SecretKeySpec(str1.getBytes(""UTF-8""), localMac.getAlgorithm()));
  byte[] arrayOfByte = localMac.doFinal(""{""_uid"":""3396112"",""_csrftoken"":""a23482932482sdsf4428"",""media_id"":""616150302791211280_187036957""}"");
  BigInteger localBigInteger = new BigInteger(1, arrayOfByte);
  String str3 = String.format(""%0"" + (arrayOfByte.length &lt;&lt; 1) + ""x"", new Object[] { localBigInteger });
  return str3;
</code></pre>

<p>Ruby code:</p>

<pre><code>require 'openssl'
require 'base64'

secret = ""a4d1b77bbb1a4a5ca695ad72c84b77e5""
digest = OpenSSL::Digest::Digest.new('sha256')
hash  = OpenSSL::HMAC.hexdigest(digest, secret,'{""_uid"":""3396112"",""_csrftoken"":""a23482932482sdsf4428"",""media_id"":""616150302791211280_187036957""}')
p hash
</code></pre>

<p>For some reason the hashes are never the same. Any help?</p>
","<p>You can do it like this</p>

<pre><code>public static void main(String[] args) {
  String str1 = ""a4d1b77bbb1a4a5ca695ad72c84b77e5"";
  byte[] keyBytes = str1.getBytes();
  SecretKeySpec localMac = new SecretKeySpec(
      keyBytes, ""HmacSHA256"");
  final String inputStr = ""{\""_uid\"":\""3396112\"",\""_csrftoken\"":""
      + ""\""a23482932482sdsf4428\"",""
      + ""\""media_id\"":\""616150302791211280_187036957\""}"";
  try {
    Mac mac = Mac.getInstance(""HmacSHA256"");
    mac.init(localMac);
    // Compute the hmac on input data bytes
    byte[] arrayOfByte = mac.doFinal(inputStr
        .getBytes());
    BigInteger localBigInteger = new BigInteger(1,
        arrayOfByte);
    String str3 = String.format(""%0""
        + (arrayOfByte.length &lt;&lt; 1) + ""x"",
        new Object[] { localBigInteger });
    System.out.println(str3);
  } catch (InvalidKeyException e) {
    e.printStackTrace();
  } catch (NoSuchAlgorithmException e) {
    e.printStackTrace();
  } catch (IllegalStateException e) {
    e.printStackTrace();
  }
}
</code></pre>

<p>Which will output <code>e48d690dc6825e8f2895845be112fb1e5ee22f5283f2243512d6cca2714e8b35</code>.</p>

<pre><code>$ cat test.rb
#!/usr/bin/env ruby

require 'openssl'
require 'base64'

secret = ""a4d1b77bbb1a4a5ca695ad72c84b77e5""
digest = OpenSSL::Digest::Digest.new('sha256')
hash  = OpenSSL::HMAC.hexdigest(digest, secret,'{""_uid"":""3396112"",""_csrftoken"":""a23482932482sdsf4428"",""media_id"":""616150302791211280_187036957    ""}')
p hash
$ ./test.rb
""e48d690dc6825e8f2895845be112fb1e5ee22f5283f2243512d6cca2714e8b35""
</code></pre>
","20725648","1282","<java><ruby><hmac><sha256>","-1","2","1","2013-12-22 02:28:46","","1","4","","","","2013-12-22 02:00:54","","","2013-12-22 02:28:46"
"50615993","HMAC hashing with Base64 encoding with Javascript","<p>I am working with Payeezy API to handle payment on a webapp, their API for purchase requires a HMAC of payload signed using api secret. An excerpt from the docs: </p>

<blockquote>
  <p>Construct the data param by appending the parameters below in the same order as shown. a. apikey - API key of the developer. b. nonce - secure random number. c. timestamp - epoch timestamp in milliseconds. d. token - Merchant Token. e. payload - Actual body content passed as post request. Compute HMAC SHA256 hash on the above data param using the key below f. apiSecret - Consumer Secret token for the given api key Calculate the base64 of the hash which would be our required Authorization header value.</p>
</blockquote>

<p>I found a library called jshashes on NPM and I tried to use their library to hash my header params, my code looks like this: </p>

<pre><code>const payload = {
        ""merchant_ref"": ""1-Sale"",
        ""transaction_type"": ""purchase"",
        ""method"": ""credit_card"",
        ""amount"": amount * 100,
        ""partial_redemption"": ""false"",
        ""currency_code"": ""USD"",
        ""credit_card"": {
          ""type"": type,
          ""cardholder_name"": cardholder_name,
          ""card_number"": card_number,
          ""exp_date"": exp_date,
          ""cvv"": cvv
        }
      }
      const data = apikey + nounce + timestamp + token + JSON.stringify(payload)
      const sha256 = new Hashes.SHA256()
      const shaData = sha256.b64_hmac(apiSecret, data)
</code></pre>

<p>The outcome compared to the sample hashed value looks like this:</p>

<pre><code>//mine
beWtpCGDv/iBoAUDAThGFXIge9eli/Xtl7JIBuR1bd4= 


//payeezy sample 
NmUzMTNmYWU0YjExM2UxMmM0NjllZGI1NThjY2M5MmUzMzE3NTFlZmQ1NDQxYzAzMTgwMmIwNDQ0MWVmYTdhMw== 
</code></pre>

<p>from the looks of the character counts I could tell that my hashing process is not correct but I can't figure out where went wrong. </p>

<p>I've seen similar questions being asked here but none answered, any help is appreciated.</p>

<p>ADDITION, I tried crypto library on Node.js:</p>

<pre><code>const data = apikey + nounce + timestamp + token + JSON.stringify(payload)

  const hmac = crypto.createHmac('sha512', apiSecret)

  hmac.on('readable', () =&gt; {
    const data = hmac.read()
    if (data) {
      console.log(data.toString('base64'));
    }
  })

  hmac.write(data)
  hmac.end()
</code></pre>

<p>Same result, with only half the character length compared to the sample hashed value</p>

<p>UPDATE: After I used SHA512 on the data it finally returned a string that looks to have the same character length as the sample, but the validation is still not passing... </p>
","<p>if you convert the base64 example from that site to a string</p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>console.log(atob('NmUzMTNmYWU0YjExM2UxMmM0NjllZGI1NThjY2M5MmUzMzE3NTFlZmQ1NDQxYzAzMTgwMmIwNDQ0MWVmYTdhMw=='))</code></pre>
</div>
</div>
</p>

<p>You get </p>

<pre><code>6e313fae4b113e12c469edb558ccc92e331751efd5441c031802b04441efa7a3
</code></pre>

<p>This is a 64 character (256 bit) hex string</p>

<p>So my guess is that they get the hex string HMAC, and base64 encode that - which seems awfully stupid, hex is safe to send as is, why make it 4/3rds larger!!</p>

<p><em>if they simply used the base64 of the HMAC, it'd only be 45 characters long!!</em></p>

<p><em>Instead they get the 64 character hex string and base64 encode that to get 88 characters!! strange design decision!!</em></p>

<p>So, your code should do the same</p>

<p>like</p>

<pre><code>Data = Buffer.from(sha256.hex_hmac(apiSecret, data), 'utf-8').toString('base64');
</code></pre>

<p>not sure if there's a better way in node to convert hex encoded string to base64, but that works</p>

<p>And finally <strong>(actually this bit is just to ""match"" how the authorization is calculated on the example page as linked by the OP <code>https://developer.payeezy.com/payeezy-api/apis/post/transactions-3</code>) So, it's not necessary to make the payload larger for no reason)</strong></p>

<p>Another point you need to know, the payload JSON needs to be in a specific format it seems ... 2 space indented ... again, this is a damned stupid waste of bandwidth ..  <code>{""key"":1234}</code> takes 12 characters </p>

<pre><code>{
  ""key"": 1234
}
</code></pre>

<p>takes 17</p>

<p>So, anyway, you need to do this:</p>

<pre><code>JSON.stringify(payload,null, 2)
</code></pre>

<p>This last piece of the puzzle should make your code as follows</p>

<pre><code>const data = apikey + nonce + timestamp + token + JSON.stringify(payload,null, 2)
const sha256 = new Hashes.SHA256()
const shaData = Buffer.from(sha256.hex_hmac(secret, data), 'utf-8').toString('base64');
</code></pre>
","50616243","1270","<javascript><hash><sha256><hmac><payeezy>","0","1","1","2018-05-31 04:46:08","","11","","5411991","","2018-05-31 03:38:26","2018-05-31 02:56:57","","2018-05-31 04:46:08","2018-05-31 03:35:12"
"9990064","HEX representation of byte array","<p>I feel pretty stupid asking this, but as I don't know the answer, I'm going ahead anyway. </p>

<p>I""m trying out some authentication code and want to know why the byte array I get from Rfc2898DeriveBytes needs to be converted to HEX and back to a byte array again for it to correctly initialise my HMACSHA1 object. I feel like I am doing something silly, or simply missing something obvious.</p>

<p>My client code is a javascript function based on <a href=""http://code.google.com/p/crypto-js/"" rel=""noreferrer"">crypto-js</a>;</p>

<pre><code>var key256bit = Crypto.PBKDF2(passwordEntered, saltBytes, 32, { iterations: 1000 }); 
var hmacBytes = Crypto.HMAC(Crypto.SHA1, url, key256bit, { asBytes: true });
var base64Hash = Crypto.util.bytesToBase64(hmacBytes);
</code></pre>

<p>My Server side code is as follows;</p>

<pre><code>    Rfc2898DeriveBytes rfc2898 = new Rfc2898DeriveBytes(password,
                                              encoding.GetBytes(salt), 1000);
    byte[] key = rfc2898.GetBytes(32);

    // Don't think I should need to do this. 
    // However, it wont work if I initialise HMACSHA1 
    // with the rfc2898.GetBytes(32)
    string test = ByteArrayToString(key); 

    HMACSHA1 hmacSha1 = new HMACSHA1(encoding.GetBytes(test));

    byte[] computedHash = hmacSha1.ComputeHash(encoding.GetBytes(requestUri));
    string computedHashString = Convert.ToBase64String(computedHash);
</code></pre>

<p>My ByteArrayToString method which I nabbed from the web is;</p>

<pre><code>private static string ByteArrayToString(byte[] ba)
{
    StringBuilder hex = new StringBuilder(ba.Length * 2);
    foreach (byte b in ba)
        hex.AppendFormat(""{0:x2}"", b);
    return hex.ToString();
}
</code></pre>

<p>So I can see that I get 32 bytes from my call to <code>rfc2898.GetBytes(32)</code>. I converted that to HEX using the ByteArrayToString method to confirm it matches what I am seeing in my Javascript variable key256bit. Now my test variable is a string of length 64 and when I pass that to HMACSHA1's constuctor using encoding.GetBytes(test) it is a byte array of length 64.</p>

<p>The doco on crypto-js is a bit lacking, but I thought the call to Crypto.PBKDF2 with a param of 32 and it was creating a key of 32 bytes long (or 256 bits).</p>

<p>Any clarification is much appreciated.</p>
","<p>I suspect this is the root of the issue, in <a href=""http://code.google.com/p/crypto-js/source/browse/branches/2.x/src/PBKDF2.js"" rel=""nofollow"">PBKDF2.js</a>:</p>

<pre><code>return options &amp;&amp; options.asBytes ? derivedKeyBytes :
       options &amp;&amp; options.asString ? Binary.bytesToString(derivedKeyBytes) :
       util.bytesToHex(derivedKeyBytes);
</code></pre>

<p>Because you haven't provided options for either <code>asBytes</code> or <code>asString</code>, it's converting the key to a hex representation - just as your C# code does. So at the moment you <em>are</em> using a 512 bit key, precisely because you're generating 2 bytes of ""used key"" from each byte of ""original key"".</p>

<p>I suspect that if you specify the <code>asBytes</code> option in the Javascript, it will just work without the extra hex part in the C# code.</p>

<p>Then again, I've never seen PBKDF2 before, so I could be way off base...</p>
","10222807","1264","<hex><bytearray><hmac><pbkdf2>","6","3","1","2012-04-19 08:34:51","10222807","4","","","","","2012-04-03 08:57:30","","2012-04-19 08:34:51","2012-04-19 06:35:24"
"30974080","openssl hmac differ from python hmac","<p>with:</p>

<pre><code>KEY='7vgd39eyxald9sucClM7'
DATA='POST\nmultipart/form-data\nWed, 10 Jun 2015 07:27:43 GMT\n/1/classes/item\nx-wbs-uid:f886a495220975d724ff3679a5cc9cef04343076'
</code></pre>

<p>in command line</p>

<pre><code>HASH_BIN=`echo -n ""$DATA"" | openssl dgst -sha256 -mac HMAC -macopt key:$KEY -binary`
openssl enc -e -base64 &lt;&lt;&lt; $HASH_BIN
result: VmBdzRcNg0OJZVVLSgg1zcViflug9iqtb6Gsnjqf9F8K
</code></pre>

<p>in python</p>

<pre><code>import hmac, hashlib, base64
hash = hmac.new(KEY, DATA, hashlib.sha256).digest()
base64.encodestring(hash).strip()
result: u6Poj7Jqrz6+wvXDNyK88pVm5iKUF6RUmq2P2LtHmuE=
</code></pre>

<p>Can someone give me a help??? Thanks a lot.</p>
","<p>It should be caused by the <code>DATA</code> string definition in your python code. </p>

<p>You need add <code>r</code> to treat the <code>DATA</code> as a raw string, such as</p>

<pre><code>DATA=r'POST\nmultipart/form-data\nWed, 10 Jun 2015 07:27:43 GMT\n/1/classes...'
</code></pre>

<p>With the <code>r</code>, all escape codes in <code>DATA</code> will be ignored. That is to say, '\n' will be treated as a newline character, but r'\n' will be treated as the characters \ followed by n. In Python,</p>

<pre><code>'\n'  // 0x0d

r'\n' // 0x5c 0x6e 
</code></pre>

<p>With the <code>r</code>, it will output the result equals to output via openssl,</p>

<pre><code>VmBdzRcNg0OJZVVLSgg1zcViflug9iqtb6Gsnjqf9F8K
</code></pre>
","31001061","1262","<python><openssl><hmac>","4","5","1","2015-06-23 11:31:16","","2","1","","","","2015-06-22 07:19:23","","2015-06-23 11:31:16","2015-06-23 11:04:48"
"35034637","Python hmac (sha1) calculation","<p>I am trying to calculate the HMAC-SHA1 value in Python, but results don't match with the standard tool I am using as reference (openSSL):</p>

<p><strong>Python</strong></p>

<pre><code>k = ""ffffffffffffffffffffffffffffffff""
m = ""ffffffffffffffffffffffffffffffff""
key = k.decode(""hex"")
msg = m.decode(""hex"")
print xlong(hmac.new(key, msg=msg, digestmod=hashlib.sha1).digest())
</code></pre>

<p>Result: <code>801271609151602865551107406598369208989784139177</code></p>

<p><strong>OpenSSL</strong></p>

<pre><code>echo -n ‘ffffffffffffffffffffffffffffffff’ | xxd -r -p | openssl dgst -sha1 -mac HMAC -macopt hexkey:ffffffffffffffffffffffffffffffff
</code></pre>

<p>Result: <code>8c5a42f91479bfbaed8dd538db8c4a76b44ee5a9</code></p>
","<p>Try using <a href=""https://docs.python.org/2.7/library/binascii.html#binascii.hexlify"" rel=""nofollow""><code>binascii.hexlify()</code></a> on the HMAC:</p>

<pre><code>&gt;&gt;&gt; from binascii import hexlify
&gt;&gt;&gt; print hexlify(hmac.new(key, msg=msg, digestmod=hashlib.sha1).digest())
8c5a42f91479bfbaed8dd538db8c4a76b44ee5a9
</code></pre>

<p>Or you may just use <code>str.encode('hex')</code>:</p>

<pre><code>&gt;&gt;&gt; print hmac.new(key, msg=msg, digestmod=hashlib.sha1).digest().encode('hex')
8c5a42f91479bfbaed8dd538db8c4a76b44ee5a9
</code></pre>
","35035145","1259","<python><hmac><hmacsha1>","0","3","1","2016-01-27 10:44:55","35035145","2","","","","","2016-01-27 10:22:01","","","2016-01-27 10:44:55"
"36033980","undefined reference EVP_sha1 , HMAC, Id returned 1 exit status","<p>i´ve got a problem with the Error above. 
In m Code is the HMAC implemented.
i tried solving the problem with this link: <a href=""https://bbs.archlinux.org/viewtopic.php?id=131726"" rel=""nofollow"">Here</a></p>

<p>But it just doesnt work so i hope you can help me. im really stuck with this and played with the QMAKE_CXXFLAGS but just got no positiv solution.</p>

<p>here is the .pro:</p>

<pre><code>QT       += core gui webkit network

greaterThan(QT_MAJOR_VERSION, 4): QT += widgets

TARGET = csui
TEMPLATE = app




#QMAKE_CFLAGS_RELEASE += -lssl -lcrypto
#QMAKE_CFLAGS_RELEASE += -lcrypto



target.path = /home/msw

INSTALLS += target

SOURCES += main.cpp\
    mainwindow.cpp \
    qcolpushbutton.cpp \
    librfid/mifare.cpp \
    librfid/list.cpp \
    librfid/brp.cpp \
    qrfid.cpp \
    qscaledlabel.cpp \
    statelogic.cpp \
    qcsnp.cpp \
    qchargepoint.cpp \
    qi2cnode.cpp \
    libhotp-tan.cpp

HEADERS  += mainwindow.h \
    qcolpushbutton.h \
    debug.h \
    config.h \
    librfid/mifare.h \
    librfid/list.h \
    librfid/brp.h \
    qrfid.h \
    qscaledlabel.h \
    statelogic.h \
    qcsnp.h \
    qchargepoint.h \
    qi2cnode.h \
    libhotp-tan.h

FORMS    += mainwindow.ui

RESOURCES += \
    res/res.qrc
</code></pre>

<p>and the links from the Makefile </p>

<pre><code>CFLAGS        = -pipe -isystem /home/msw/crossdev/OSELAS.BSP-RaspberryPi/platform-RaspberryPi/sysroot-target/include -isystem /home/msw/crossdev/OSELAS.BSP-RaspberryPi/platform-RaspberryPi/sysroot-target/usr/include -O2 -Wall -W -D_REENTRANT $(DEFINES)
CXXFLAGS      = -pipe -isystem /home/msw/crossdev/OSELAS.BSP-RaspberryPi/platform-RaspberryPi/sysroot-target/include -isystem /home/msw/crossdev/OSELAS.BSP-RaspberryPi/platform-RaspberryPi/sysroot-target/usr/include -O2 -Wall -W -D_REENTRANT $(DEFINES)
</code></pre>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-css lang-css prettyprint-override""><code>13:45:58: Führe Schritte für Projekt csui aus...
13:45:59: Starte ""/opt/qt-4.8.3e-armhf/sysroot-cross/bin/qmake"" '/home/msw/Arbeitsfläche/Experimentelles Programm/csui.pro' -r -spec /opt/qt-4.8.3e-armhf/sysroot-target/usr/mkspecs/qws/linux-ptx-g++
13:45:59: Der Prozess ""/opt/qt-4.8.3e-armhf/sysroot-cross/bin/qmake"" wurde normal beendet.
13:45:59: Starte ""/usr/bin/make"" -w
make: Entering directory `/home/msw/Arbeitsfläche/Experimentelles Programm'
arm-1136jfs-linux-gnueabihf-g++ -L/home/msw/crossdev/OSELAS.BSP-RaspberryPi/platform-RaspberryPi/sysroot-target/lib -L/home/msw/crossdev/OSELAS.BSP-RaspberryPi/platform-RaspberryPi/sysroot-target/usr/lib -Wl,-rpath-link -Wl,/home/msw/crossdev/OSELAS.BSP-RaspberryPi/platform-RaspberryPi/sysroot-target/lib -Wl,-rpath-link -Wl,/home/msw/crossdev/OSELAS.BSP-RaspberryPi/platform-RaspberryPi/sysroot-target/usr/lib -Wl,-O1 -o csui main.o mainwindow.o qcolpushbutton.o mifare.o list.o brp.o qrfid.o qscaledlabel.o statelogic.o qcsnp.o qchargepoint.o qi2cnode.o libhotp-tan.o moc_mainwindow.o moc_qcolpushbutton.o moc_qrfid.o moc_qscaledlabel.o moc_statelogic.o moc_qcsnp.o moc_qchargepoint.o moc_qi2cnode.o qrc_res.o    -L/home/msw/crossdev/OSELAS.BSP-RaspberryPi/platform-RaspberryPi/sysroot-target/lib -L/home/msw/crossdev/OSELAS.BSP-RaspberryPi/platform-RaspberryPi/sysroot-target/usr/lib -lQtWebKit -lQtGui -L/home/msw/crossdev/OSELAS.BSP-RaspberryPi/platform-RaspberryPi/sysroot-target/usr/lib -L/home/msw/crossdev/OSELAS.BSP-RaspberryPi/platform-RaspberryPi/sysroot-target/lib -lQtNetwork -lQtCore -lpthread 
make: Leaving directory `/home/msw/Arbeitsfläche/Experimentelles Programm'
libhotp-tan.o: In function `hotpa(unsigned char const*, unsigned char const*, char*, unsigned int, unsigned char const*, unsigned int)':
libhotp-tan.cpp:(.text+0x74): undefined reference to `EVP_sha1'
libhotp-tan.cpp:(.text+0xb4): undefined reference to `HMAC'
collect2: error: ld returned 1 exit status
make: *** [csui] Error 1
13:46:01: Der Prozess ""/usr/bin/make"" wurde mit dem Rückgabewert 2 beendet.
Fehler beim Erstellen/Deployment des Projekts csui(Ziel: Embedded Linux)
Bei der Ausführung von Schritt 'Make'</code></pre>
</div>
</div>
</p>

<p>THANKS!!</p>
","<p>Your linkage command is:</p>

<pre><code>arm-1136jfs-linux-gnueabihf-g++ \ 
-L/home/msw/crossdev/OSELAS.BSP-RaspberryPi/platform-RaspberryPi/sysroot-target/lib \ 
-L/home/msw/crossdev/OSELAS.BSP-RaspberryPi/platform-RaspberryPi/sysroot-target/usr/lib \ 
-Wl,-rpath-link \
-Wl,/home/msw/crossdev/OSELAS.BSP-RaspberryPi/platform-RaspberryPi/sysroot-target/lib \ 
-Wl,-rpath-link \
-Wl,/home/msw/crossdev/OSELAS.BSP-RaspberryPi/platform-RaspberryPi/sysroot-target/usr/lib \ 
-Wl,-O1 \
-o csui main.o mainwindow.o qcolpushbutton.o mifare.o list.o brp.o qrfid.o \
qscaledlabel.o statelogic.o qcsnp.o qchargepoint.o qi2cnode.o libhotp-tan.o \ 
moc_mainwindow.o moc_qcolpushbutton.o moc_qrfid.o moc_qscaledlabel.o moc_statelogic.o \
moc_qcsnp.o moc_qchargepoint.o moc_qi2cnode.o qrc_res.o \    
-L/home/msw/crossdev/OSELAS.BSP-RaspberryPi/platform-RaspberryPi/sysroot-target/lib \
-L/home/msw/crossdev/OSELAS.BSP-RaspberryPi/platform-RaspberryPi/sysroot-target/usr/lib \ 
-lQtWebKit \
-lQtGui \
-L/home/msw/crossdev/OSELAS.BSP-RaspberryPi/platform-RaspberryPi/sysroot-target/usr/lib \
-L/home/msw/crossdev/OSELAS.BSP-RaspberryPi/platform-RaspberryPi/sysroot-target/lib \
-lQtNetwork \
-lQtCore \
-lpthread
</code></pre>

<p>(There's a lot of redundant repetition there)</p>

<p>The undefined symbols <code>EVP_sha1</code> and <code>HMAC</code> are defined in <code>libcrypto</code>, for which
you need also to link <code>libssl</code>, but <code>-lssl -lcrypto</code>
are not among the library options you are passing to the linker. You need to add them.</p>

<p>I'm not familiar with QMake but I believe library options should be defined in 
<a href=""http://doc.qt.io/qt-4.8/qmake-variable-reference.html#libs"" rel=""nofollow""><code>LIBS</code></a> If you generate a linker
commandline with <code>-lssl -lcrypto</code> following <code>-lQtCore</code> you should be all right.</p>

<p>I notice that <code>-lssl -lcrypto</code> appears in the commented-out setting:</p>

<pre><code>#QMAKE_CFLAGS_RELEASE += -lssl -lcrypto
</code></pre>

<p>That wouldn't have worked, since it's setting options for the C Compiler in
release mode, not the linker. Likewise <code>QMAKE_CXXFLAGS</code>, which you say you
tinkered with, sets options for the C++ compiler, not the linker.</p>
","36040149","1257","<c++><qt><undefined><qmake><hmac>","1","2","1","2016-03-16 15:30:12","36040149","4","0","6061563","","2016-03-16 12:59:43","2016-03-16 11:11:35","","","2016-03-16 15:30:12"
"26685699","Calculating HMAC in Rust","<p>In Java I can do this to calculate HMAC:</p>

<pre><code>import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;

//.......
Mac hmac = Mac.getInstance(""some algorithm"");
hmac.init(new SecretKeySpec(""some secret"", ""some algorithm""));
byte[] res = hmac.doFinal((""some str"").getBytes());
</code></pre>

<p>How can I do the same thing in Rust?</p>
","<p><a href=""https://github.com/DaGenix/rust-crypto"" rel=""nofollow""><code>rust-crypto</code></a> appears to <a href=""https://github.com/DaGenix/rust-crypto/blob/bd9f097058131f89ca85fb3a8f02d47833449061/src/rust-crypto/hmac.rs"" rel=""nofollow"">offer HMAC</a>. The correct way to use it is to <a href=""http://crates.io/"" rel=""nofollow"">install Cargo</a>, and add</p>

<pre><code>[dependencies.rust-crypto]
git = ""https://github.com/DaGenix/rust-crypto""
</code></pre>

<p>to your Cargo.toml.</p>

<p>It looks like the correct API is to call <a href=""https://github.com/DaGenix/rust-crypto/blob/bd9f097058131f89ca85fb3a8f02d47833449061/src/rust-crypto/hmac.rs#L68"" rel=""nofollow""><code>Hmac::new</code></a> with your selected key &amp; digest (anything that implements the <code>Digest</code> trait works, e.g. <a href=""https://github.com/DaGenix/rust-crypto/blob/bd9f097058131f89ca85fb3a8f02d47833449061/src/rust-crypto/sha2.rs#L670"" rel=""nofollow""><code>Sha256</code></a>), feed data via <a href=""https://github.com/DaGenix/rust-crypto/blob/bd9f097058131f89ca85fb3a8f02d47833449061/src/rust-crypto/hmac.rs#L81"" rel=""nofollow""><code>input</code></a> and the extract the result with <a href=""https://github.com/DaGenix/rust-crypto/blob/bd9f097058131f89ca85fb3a8f02d47833449061/src/rust-crypto/hmac.rs#L92"" rel=""nofollow""><code>result</code></a> (these require importing <a href=""https://github.com/DaGenix/rust-crypto/blob/bd9f097058131f89ca85fb3a8f02d47833449061/src/rust-crypto/mac.rs#L16"" rel=""nofollow"">the <code>Mac</code> trait</a>.</p>

<p>I cannot find any online documentation, but running <code>cargo doc</code> in your codebase locally after adding the dependency will build the docs of <code>rust-crypto</code> into (IIRC) <code>./target/doc/rust-crypto</code>.</p>
","26686486","1255","<rust><hmac>","1","6","1","2014-11-01 10:14:05","26686486","3","","","","","2014-11-01 02:25:00","","2014-11-01 10:14:05","2014-11-01 05:31:37"
"28667243","What to use (best/good practice) for the secret key in HMAC solution?","<p>I am implementing a HMAC-like solution based upon specifications provided to me by another company.  The hashing parameters and use of the secret key is not an issue, and neither is the distribution of the key itself, since we are in close contact and close geographical location.</p>

<p>However - what is best practice for the actual secret key <strong>value</strong>?</p>

<p>Since both companies are working together, it would seem that<br/>
<code>c9ac56dd392a3206fc80145406517d02</code> <br/>generated with a Rijndael algorithm and <br/>
<code>Daisy Daisy give me your answer do</code><br/>are both pretty much equally secure (in this context) as a secret key used to add to the hash?</p>
","<p>Citing <a href=""http://en.wikipedia.org/wiki/Hash-based_message_authentication_code"" rel=""nofollow"">Wikipedia page on HMAC</a>:</p>

<blockquote>
  <p>The cryptographic strength of the HMAC depends upon the cryptographic strength of the underlying hash function, the size of its hash output, <strong>and on the size and quality of the key</strong>.</p>
</blockquote>

<p>This means that completely random key, where every bit is randomly generated, is far better than set of characters.</p>

<p>The optimum size of the key is equal to block size. If the key is too short then it is padded usually with zeroes (which are not random). If the key is too long then its hash function is used. The length of hash output is anyway block size.</p>

<p>Use of visible characters as a key makes the key easier to guess as there are far less combinations of visible characters than if we allow for every possible combination of bits. For example:</p>

<p>There are 95 visible characters in ASCII (out of 256 combinations). If the block size is 16 bytes (HMAC_MD5) then there are 95^16 ~= 4.4*10^31 combinations. But for 16 bytes there are 3.4*10^38 possibilities. Attacker knowing that the key consists only of visible ASCII characters knows that he requires around 10 000 000 times less time than if he had to consider every possible combination of bits.</p>

<p>Summarizing I recommend use of cryptographic pseudo-random number generator to generate secret keys instead of coming up with your own keys.</p>

<hr>

<p>Edit:</p>

<p>As martinstoeckli suggested if you have to you can use key-derivation-function to generate byte key of specified length from text password. This is much safer than converting plain text to bytes and using these bytes as a key directly. Nevertheless, there is nothing more secure than key consisting of random bytes.</p>
","28841267","1255","<hash><hmac>","2","3","1","2015-03-03 21:45:20","28841267","0","","","","","2015-02-23 05:09:08","","2015-03-03 21:45:20","2015-03-03 20:24:43"
"29947400","HMAC SHA1 Digest in python","<p>I'm using the <a href=""https://dev.moves-app.com"" rel=""nofollow"">Moves API</a> to get some fitness data. Instead of querying the API on a regular basis I would like to use the <a href=""https://dev.moves-app.com/docs/api_notifications"" rel=""nofollow"">storyline notifications</a>.</p>

<p>It works, I get a request from the API but I'm unable to verify the hmac sha1 signature provided in the request.</p>

<p>The Documentation says:</p>

<blockquote>
  <p>All notification requests are signed with Base64 encoded HMAC-SHA1
  signature. The signature is calculated as HMAC_SHA1(&lt;your client
  secret>,&lt;request body>|&lt;timestamp>|&lt;nonce>), in other words the client
  secret as the key and request body, timestamp and nonce concatenated
  as the message data. HTTP headers are not included in the signature.
  The headers X-Moves-Signature, X-Moves-Timestamp and X-Moves-Nonce
  contain the signature, timestamp and nonce values. The timestamp is a
  unix timestamp, seconds since Jan 01 1970 00:00:00 GMT.</p>
</blockquote>

<p>My Implementation:</p>

<pre><code>from hmac import new as hmac_new
from hashlib import sha1

def check_signature(signature, timestamp, nonce, client_secret, request_body):
    msg = request_body + timestamp.encode('utf-8') + nonce.encode('utf-8')
    hmac = hmac_new(key=client_secret, msg=msg, digestmod=sha1)
    return hmac.digest().encode('base64') == signature
</code></pre>

<p>I get the request from flask and call my function likes this:</p>

<pre><code>check_signature(headers['X-Moves-Signature'], headers['X-Moves-Timestamp'], headers['X-Moves-Nonce'], settings['client-secret'], request.data)
</code></pre>

<p>Values:</p>

<pre><code>client-secret= mnMuu6rDMkeG5FL0Fm0ho2z14JUhMVWAntUnGz0VyXc446RtqP8J7ETfag0TQa58
request-body = {""userId"": 34511428141091768, ""storylineUpdates"": [{""reason"": ""DataUpload"", ""endTime"": ""20150429T121602Z"", ""lastSegmentType"": ""place"", ""lastSegmentStartTime"": ""20150429T101434Z"", ""startTime"": ""20150429T101434Z""}]}
X-Moves-Nonce = eqVCO4bnNbN+8Hhiz7ZceA== 
X-Moves-Signature = BRMwYCxglul01wbyXpfpdtiJh2Y=
X-Moves-Timestamp = 1430309780
my-digest = paWR/3yiJ8NT8KukorGVJlpmQeM=
my-hexdigest = a5a591ff7ca227c353f0aba4a2b195265a6641e3
moves_signature = BRMwYCxglul01wbyXpfpdtiJh2Y=
</code></pre>

<p>I also tried <a href=""http://www.freeformatter.com/hmac-generator.html"" rel=""nofollow"">http://www.freeformatter.com/hmac-generator.html</a> and also received <code>a5a591ff7ca227c353f0aba4a2b195265a6641e3</code>.</p>

<p>(the client secret is not valid anymore).</p>

<p>As you can see from the values my digest and the moves_signature are not equal. Sadly I'm unable to get a digest that is equal to the one from moves but I'm unable to locate the problem. Does anybody have an idea on how to fix this?</p>
","","","1249","<python><flask><sha1><hmac><hmacsha1>","4","","0","2017-02-10 04:58:30","","4","","409881","","2015-04-29 15:16:06","2015-04-29 14:56:35","","",""
"40100760","c# Base64 Encoding Decoding wrong result","<p>I need to create a hash-signature in c#. </p>

<p>The pseudo-code example that i need to implement in my c# code: </p>

<pre><code>Signatur(Request) = new String(encodeBase64URLCompatible(HMAC-SHA-256(getBytes(Z, ""UTF-8""), decodeBase64URLCompatible(getBytes(S, ""UTF-8"")))), ""UTF-8"")
</code></pre>

<p>Z: apiSecret 
S: stringToSign </p>

<p>The coding for <code>expectedSignatur</code> and <code>apiSecret</code> is <code>Base64 URL Encoding [RFC 4648 Section 5]</code></p>

<p>My problem is that I always get the wrong result.</p>

<pre><code>public static string Base64Decode(string base64EncodedData)
{
    var base64EncodedBytes = Convert.FromBase64String(base64EncodedData);
    return Encoding.UTF8.GetString(base64EncodedBytes);
}

public static string Base64Encode(string plainText)
{
    var plainTextBytes = Encoding.UTF8.GetBytes(plainText);
    return Convert.ToBase64String(plainTextBytes);
}

private static byte[] HmacSha256(string data, string key)
{
     using (var hmac = new HMACSHA256(Encoding.UTF8.GetBytes(key)))
     {
       return hmac.ComputeHash(Encoding.UTF8.GetBytes(data));
     }
}

static void Main(string[] args)
{
     var apiSecret = ""JrXRHCnUegQJAYSJ5J6OvEuOUOpy2q2-MHPoH_IECRY="";
     var stringToSign = ""f3fea5f3-60af-496f-ac3e-dbb10924e87a:20160201094942:e81d298b-60dd-4f46-9ec9-1dbc72f5b5df:Qg5f0Q3ly1Cwh5M9zcw57jwHI_HPoKbjdHLurXGpPg0yazdC6OWPpwnYi22bnB6S"";
     var expectedSignatur = ""ps9MooGiTeTXIkPkUWbHG4rlF3wuTJuZ9qcMe-Y41xE="";

     apiSecret = apiSecret.Replace('-', '+').Replace('_', '/').PadRight(apiSecret.Length + (4 - apiSecret.Length % 4) % 4, '=');

     var secretBase64Decoded = Base64Decode(apiSecret);

     var hmac = Convert.ToBase64String(HmacSha256(secretBase64Decoded, stringToSign));

     var signatur = hmac.Replace('+', '-').Replace('/', '_');


     Console.WriteLine($""signatur: {signatur}"");
     Console.WriteLine($""expected: {expectedSignatur}"");

     Console.WriteLine(signatur.Equals(expectedSignatur));
     Console.ReadLine();
 }
</code></pre>
","<p>You're assuming that your key was originally text encoded with UTF-8 - but it looks like it wasn't. You should keep logically binary data <em>as</em> binary data - you don't need your <code>Base64Encode</code> and <code>Base64Decode</code> methods at all. Instead, your <code>HmacSha256</code> method should take a <code>byte[]</code> as a key, and you can just use <code>Convert.FromBase64String</code> to get at those bytes from the base64-encoded secret:</p>

<pre><code>using System;
using System.Text;
using System.Security.Cryptography;

class Test
{    
    private static byte[] HmacSha256(byte[] key, string data)
    {
        using (var hmac = new HMACSHA256(key))
        {
            return hmac.ComputeHash(Encoding.UTF8.GetBytes(data));
        }
    }

    static void Main(string[] args)
    {
        var apiSecret = ""JrXRHCnUegQJAYSJ5J6OvEuOUOpy2q2-MHPoH_IECRY="";
        var stringToSign = ""f3fea5f3-60af-496f-ac3e-dbb10924e87a:20160201094942:e81d298b-60dd-4f46-9ec9-1dbc72f5b5df:Qg5f0Q3ly1Cwh5M9zcw57jwHI_HPoKbjdHLurXGpPg0yazdC6OWPpwnYi22bnB6S"";
        var expectedSignatur = ""ps9MooGiTeTXIkPkUWbHG4rlF3wuTJuZ9qcMe-Y41xE="";

        apiSecret = apiSecret.Replace('-', '+').Replace('_', '/').PadRight(apiSecret.Length + (4 - apiSecret.Length % 4) % 4, '=');

        var secretBase64Decoded = Convert.FromBase64String(apiSecret);

        var hmac = Convert.ToBase64String(HmacSha256(secretBase64Decoded, stringToSign));

        var signatur = hmac.Replace('+', '-').Replace('/', '_');
        Console.WriteLine($""signatur: {signatur}"");
        Console.WriteLine($""expected: {expectedSignatur}"");            
        Console.WriteLine(signatur.Equals(expectedSignatur));
    }
}
</code></pre>

<p>Personally I'd change your <code>HmacSha256</code> method to:</p>

<pre><code>private static byte[] ComputeHmacSha256Hash(byte[] key, byte[] data)
{
    using (var hmac = new HMACSHA256(key))
    {
        return hmac.ComputeHash(data);
    }
}
</code></pre>

<p>so that it's more general purpose, maybe adding another method to compute the hash after encoding as UTF-8 for convenience. That way you can sign <em>any</em> data, not just strings.</p>
","40100917","1236","<c#><encoding><decoding><hmac>","2","2","1","2016-10-18 06:20:46","40100917","0","","168425","","2016-10-18 06:18:21","2016-10-18 06:09:23","","","2016-10-18 06:20:46"
"23133130","Java/Scala - hmacSHA256 signature different every time","<p>I'm getting this strange behaviour where sha256 signiture is coming out different for the same input and key every time. Not sure why. Here is the code and some of the printlns.</p>

<pre><code>def apply(algorithm: String, data: String, key: String): Array[Byte] = {

  val _key = Option(key).getOrElse(throw new IllegalArgumentException(""Missing key for JWT encryption via "" + algorithm))
  val mac: Mac = Mac.getInstance(algorithm)
  val secretKey: SecretKeySpec = new SecretKeySpec(_key.getBytes, algorithm)
  mac.init(secretKey)
  val res = mac.doFinal(data.getBytes)

  println(s""$algorithm $data $key $res $secretKey"")
  res
}
</code></pre>

<p>Here is the logging from the testsuite using this code:</p>

<pre><code>HmacSHA256 eyJIZXkiOiJmb28ifQ== secretkey [B@4959742d javax.crypto.spec.SecretKeySpec@fa77d7a8
HmacSHA256 eyJIZXkiOiJmb28ifQ== secretkey [B@6a790e37 javax.crypto.spec.SecretKeySpec@fa77d7a8
HmacSHA256 eyJIZXkiOiJmb28ifQ== secretkey [B@2347f330 javax.crypto.spec.SecretKeySpec@fa77d7a8
HmacSHA256 eyJIZXkiOiJmb28ifQ== secretkey [B@5298db1f javax.crypto.spec.SecretKeySpec@fa77d7a8
HmacSHA256 eyJIZXkiOiJmb28ifQ== secretkey [B@5cb80eb0 javax.crypto.spec.SecretKeySpec@fa77d7a8
</code></pre>

<p>Why are the signatures all different??</p>
","<p>You're not looking at the signature, you're looking at the default toString() method call on an Array of bytes.  If you inspect the actual bytes, they should match.</p>
","23133257","1223","<java><scala><digital-signature><hmac>","0","10","1","2014-04-17 12:34:54","23133257","0","","","","","2014-04-17 12:29:42","","","2014-04-17 12:34:54"
"29262345","Comparing two hex values as strings","<p>I'm writing a program that creates random strings and then hashes the string to get its MAC. I want to then look at the first byte for the hash and see if is equal to a specific hex value. (Pre-image attack simplified.) My code successfully pulls the first byte off of each hash but doesn't compare it correctly. So even if the the two bytes are equal, the while loop doesn't recognize it and keeps going indefinitely.</p>

<pre><code>    Random generator = new Random();
    Boolean found = false;
    int i;
    String test="""";
    int whatIWant = 169;


    while(found == false)
    {

        String x = """";
        i = 0;

    while(i&lt;15000)
    {   //String x = """";


        int y = generator.nextInt(220)+20;
        x = x + Integer.toHexString(y);
        i++;
    }
    byte[] hexMessage = DatatypeConverter.parseHexBinary(x);
    MessageDigest cript = MessageDigest.getInstance(""SHA-512"");
    cript.reset();
    cript.update(hexMessage);
    byte[] hash = cript.digest();

    test = String.format(""%02X "", hash[0]);

    if(test.equalsIgnoreCase(Integer.toHexString(whatIWant).toString()))
        found = true;
</code></pre>
","<p>I didn't run your code. I would like to see the result of Integer.toHexString() and I am not sure why you are calling the string returned by Integer.toHexString() to be a string again by .toString() although it is not a big issue since the value should be the same. </p>

<p>All in all I think the outstanding issue may be you never closed your while loop... at least it isn't shown here.</p>
","29263219","1219","<java><hex><hmac><sha512><javax.crypto>","1","0","2","2015-03-26 11:35:36","29275945","0","3","","","","2015-03-25 17:22:19","","","2015-03-25 18:06:38"
"29262345","Comparing two hex values as strings","<p>I'm writing a program that creates random strings and then hashes the string to get its MAC. I want to then look at the first byte for the hash and see if is equal to a specific hex value. (Pre-image attack simplified.) My code successfully pulls the first byte off of each hash but doesn't compare it correctly. So even if the the two bytes are equal, the while loop doesn't recognize it and keeps going indefinitely.</p>

<pre><code>    Random generator = new Random();
    Boolean found = false;
    int i;
    String test="""";
    int whatIWant = 169;


    while(found == false)
    {

        String x = """";
        i = 0;

    while(i&lt;15000)
    {   //String x = """";


        int y = generator.nextInt(220)+20;
        x = x + Integer.toHexString(y);
        i++;
    }
    byte[] hexMessage = DatatypeConverter.parseHexBinary(x);
    MessageDigest cript = MessageDigest.getInstance(""SHA-512"");
    cript.reset();
    cript.update(hexMessage);
    byte[] hash = cript.digest();

    test = String.format(""%02X "", hash[0]);

    if(test.equalsIgnoreCase(Integer.toHexString(whatIWant).toString()))
        found = true;
</code></pre>
","<p>You are searching through bytes (<code>hash[0]</code>) for a value (169) greater than the maximum value of a byte (127). That is one reason why your search never finishes. Values > 127 will never be there.</p>

<p>The next problem is that your String conversion pattern <code>""%02X ""</code> introduces a space after the hex string. Let's say you search for 127... <code>""7F ""</code> will never equal <code>""7F""</code>, so again, your search will never finish, even for byte values within range.</p>

<p>For interest, try adding this to your code:</p>

<p>Outside the loop:</p>

<pre><code>Set&lt;Integer&gt; foundBytes = new TreeSet&lt;Integer&gt;();
</code></pre>

<p>At the end of the loop:</p>

<pre><code>if (hash[0] != whatIWant) {
    if (foundBytes.add((int)hash[0])) {
        System.out.printf(""[%3d] %s\n"", foundBytes.size(), foundBytes);
    }
}
</code></pre>

<p>If you set your search value to be greater than 127, you will notice that the <code>foundBytes</code> set quickly fills up with all the possible values of byte after which no more new bytes are found and the print statement is not invoked.</p>

<p>(Your code could be optimized in several ways BTW, but that is not the point of the question.)</p>
","29275945","1219","<java><hex><hmac><sha512><javax.crypto>","1","0","2","2015-03-26 11:35:36","29275945","0","3","","","","2015-03-25 17:22:19","","2015-03-26 11:35:36","2015-03-26 10:17:22"
"24752141","HMAC-SHA512 bug in my code","<p>I would greatly appreciate, if you could help me with this c++ implementation of HMAC-SHA512 code, I can't seem to find why it gives a different hash than online converters. (The SHA512 is working just fine.)</p>

<p>Code (based on wikipedia):</p>

<pre><code>#include &lt;iostream&gt;
#include ""sha512.h""

using namespace std;

const unsigned int BLOCKSIZE = (512/8); // 64 byte

int main(int argc, char *argv[])
{
    if(argc!=3)return 0;
    string key = argv[1];
    string message = argv[2];

    if(key.length() &gt; BLOCKSIZE){
        key = sha512(key);
    }
    while(key.length() &lt; BLOCKSIZE){
        key = key + (char)0x00;
    }

    string o_key_pad = key;
    for(unsigned int i = 0; i &lt; BLOCKSIZE; i++){
        o_key_pad[i] = key[i] ^ (char)0x5c;
    }

    string i_key_pad = key;
    for(unsigned int i = 0; i &lt; BLOCKSIZE; i++){
        i_key_pad[i] = key[i] ^ (char)0x36;
    }

    string output = sha512(o_key_pad + sha512(i_key_pad + message));

    cout&lt;&lt;""hmac-sha512: \n""&lt;&lt;output&lt;&lt;endl;

    return 0;
}
</code></pre>
","<p>It turned out the BLOCKSIZE is incorrect.</p>

<p>According to <a href=""http://en.wikipedia.org/wiki/SHA-2"" rel=""nofollow"">http://en.wikipedia.org/wiki/SHA-2</a>, sha-512's block size is 1024 bits, which 128 bytes.</p>

<p>So simply change the code to</p>

<pre><code>const unsigned int BLOCKSIZE = (1024/8); // 128 byte
</code></pre>

<p>You get the correct result.</p>
","24754491","1217","<c++><hmac>","0","2","2","2017-06-23 19:48:59","24754491","2","","","","","2014-07-15 07:17:55","","","2014-07-15 09:25:27"
"24752141","HMAC-SHA512 bug in my code","<p>I would greatly appreciate, if you could help me with this c++ implementation of HMAC-SHA512 code, I can't seem to find why it gives a different hash than online converters. (The SHA512 is working just fine.)</p>

<p>Code (based on wikipedia):</p>

<pre><code>#include &lt;iostream&gt;
#include ""sha512.h""

using namespace std;

const unsigned int BLOCKSIZE = (512/8); // 64 byte

int main(int argc, char *argv[])
{
    if(argc!=3)return 0;
    string key = argv[1];
    string message = argv[2];

    if(key.length() &gt; BLOCKSIZE){
        key = sha512(key);
    }
    while(key.length() &lt; BLOCKSIZE){
        key = key + (char)0x00;
    }

    string o_key_pad = key;
    for(unsigned int i = 0; i &lt; BLOCKSIZE; i++){
        o_key_pad[i] = key[i] ^ (char)0x5c;
    }

    string i_key_pad = key;
    for(unsigned int i = 0; i &lt; BLOCKSIZE; i++){
        i_key_pad[i] = key[i] ^ (char)0x36;
    }

    string output = sha512(o_key_pad + sha512(i_key_pad + message));

    cout&lt;&lt;""hmac-sha512: \n""&lt;&lt;output&lt;&lt;endl;

    return 0;
}
</code></pre>
","<p>Thank you for the quick responses, the problem was with the hash function(sort of).
The sha512 output was converted to hex before return, so the ""sha512(i_key_pad + message)"" did not answer what I was expecting. (And also the blocksize was 1024)</p>
","24762317","1217","<c++><hmac>","0","0","2","2017-06-23 19:48:59","24754491","2","","","","","2014-07-15 07:17:55","","","2014-07-15 15:33:04"
"20522661","How to calculate a 256-bit HMAC_SHA3 hash with CryptoJS?","<p>Recent CryptoJS versions support SHA3 hashing. </p>

<p>SHA3 can output different hash sizes, including 512-bit (default) and 256-bit. These two work fine:</p>

<pre><code>var sha3_512_hash = CryptoJS.SHA3( 'test' );
var sha3_256_hash = CryptoJS.SHA3( 'test' , { outputLength:256 } );
</code></pre>

<p>Similarly, CryptoJS can also calculate HMAC values. However, I can't figure out how to change the default output size there:</p>

<pre><code>var sha3_512_hmac = CryptoJS.HmacSHA3( 'test' , 'key' );
var sha3_256_hmac = CryptoJS.HmacSHA3( 'test' , 'key' , { outputLength:256 } );
</code></pre>

<p>The first works OK (the result is a 512-bit hmac value) but the second is the <em>same</em> (i.e. also 512-bit), as if it ignores the {outputLength:256} parameter!</p>

<p>Here's a live example: <a href=""http://jsfiddle.net/M8xf3/"" rel=""nofollow"">http://jsfiddle.net/M8xf3/</a> (using hmac-sha3.js from CryptoJS 3.1.2)</p>

<p>Does anyone know how to create 256-bit SHA3-based HMAC hashes?</p>

<p>P.S. For the SHA2 family of functions, CryptoJS has separate Hmac functions for each output size (that's HmacSHA256 and HmacSHA512). But this doesn't seem to be the case for SHA3?</p>
","<p>This doesn't answer the actual question, but note that with SHA3 you don't really need HMAC hashes. Unlike SHA1 and SHA2 and MD5, SHA3 is <em>not</em> vulnerable to length-extension attacks.</p>

<p>Therefore with SHA3 it would suffice to just prepend or append the secret key to your input.</p>

<p>Or, if you're paranoid of a single hash step becoming compromised (not to be expected in the foreseeable future, especially not with SHA3, but still) you could do something like SHA3(key+SHA3(key+data)) or SHA3(key+SHA3(key+data)+data) (obviously with ""+"" denoting binary concatenation).</p>
","20757239","1211","<hash><sha><hmac><cryptojs>","1","2","2","2014-05-19 16:16:11","","0","","1072269","","2013-12-11 15:35:47","2013-12-11 15:09:02","","","2013-12-24 08:07:53"
"20522661","How to calculate a 256-bit HMAC_SHA3 hash with CryptoJS?","<p>Recent CryptoJS versions support SHA3 hashing. </p>

<p>SHA3 can output different hash sizes, including 512-bit (default) and 256-bit. These two work fine:</p>

<pre><code>var sha3_512_hash = CryptoJS.SHA3( 'test' );
var sha3_256_hash = CryptoJS.SHA3( 'test' , { outputLength:256 } );
</code></pre>

<p>Similarly, CryptoJS can also calculate HMAC values. However, I can't figure out how to change the default output size there:</p>

<pre><code>var sha3_512_hmac = CryptoJS.HmacSHA3( 'test' , 'key' );
var sha3_256_hmac = CryptoJS.HmacSHA3( 'test' , 'key' , { outputLength:256 } );
</code></pre>

<p>The first works OK (the result is a 512-bit hmac value) but the second is the <em>same</em> (i.e. also 512-bit), as if it ignores the {outputLength:256} parameter!</p>

<p>Here's a live example: <a href=""http://jsfiddle.net/M8xf3/"" rel=""nofollow"">http://jsfiddle.net/M8xf3/</a> (using hmac-sha3.js from CryptoJS 3.1.2)</p>

<p>Does anyone know how to create 256-bit SHA3-based HMAC hashes?</p>

<p>P.S. For the SHA2 family of functions, CryptoJS has separate Hmac functions for each output size (that's HmacSHA256 and HmacSHA512). But this doesn't seem to be the case for SHA3?</p>
","<p>You can just edit hmac-sha3.js and change the outputLength to 256-bit instead of 512-bit.</p>

<ol>
<li>Open hmac-sha3.js file, using your text editor.</li>
<li>Find ""{outputLength:512}"" and replace it with ""{outputLength:256}""</li>
</ol>

<p>Then the hash output will be 256-bit in length.</p>

<p>To be sure that you did not messed up things, double check your 256-bit hmac-sha3 output with some test cases available on the internet, for example: <a href=""http://www.di-mgt.com.au/hmac_sha3_testvectors.html"" rel=""nofollow"">http://www.di-mgt.com.au/hmac_sha3_testvectors.html</a></p>
","23742588","1211","<hash><sha><hmac><cryptojs>","1","1","2","2014-05-19 16:16:11","","0","","1072269","","2013-12-11 15:35:47","2013-12-11 15:09:02","","","2014-05-19 16:16:11"
"19721161","Lowercase hexits. .NET and Java equivalent","<p>A trading partner has asked me to send an HMAC SHA1 hash as lowercase heaxits. The only reference I can find to them is in relation to PHP. I can do the hashing in .NET and Java but how do I output ""lowercase hexits"" with them? Lowercase hexits doesn't appear to be equivalent to Base64. </p>
","<p>For lowercase hex digits (hexits) use:</p>

<pre><code>public static String toHex(byte[] bytes) {
    BigInteger bi = new BigInteger(1, bytes);
    return String.format(""%0"" + (bytes.length &lt;&lt; 1) + ""x"", bi);
}
</code></pre>

<p>From related question:
<a href=""https://stackoverflow.com/questions/332079/in-java-how-do-i-convert-a-byte-array-to-a-string-of-hex-digits-while-keeping-l"">In Java, how do I convert a byte array to a string of hex digits while keeping leading zeros?</a></p>
","19722967","1207","<java><php><.net><sha1><hmac>","0","1","3","2015-11-29 15:18:43","","0","","","","","2013-11-01 05:10:23","","2017-05-23 10:31:17","2013-11-01 08:07:09"
"19721161","Lowercase hexits. .NET and Java equivalent","<p>A trading partner has asked me to send an HMAC SHA1 hash as lowercase heaxits. The only reference I can find to them is in relation to PHP. I can do the hashing in .NET and Java but how do I output ""lowercase hexits"" with them? Lowercase hexits doesn't appear to be equivalent to Base64. </p>
","<p>Ah! I love simplicity. Here's the solution. </p>

<pre><code>Public Shared Function Encrypt(ByVal plainText As String, ByVal preSharedKey As String) As String
    Dim preSharedKeyBytes() As Byte = Encoding.UTF8.GetBytes(preSharedKey)
    Dim plainTextBytes As Byte() = Encoding.UTF8.GetBytes(plainText)
    Dim hmac = New HMACSHA1(preSharedKeyBytes)
    Dim cipherTextBytes As Byte() = hmac.ComputeHash(plainTextBytes)

    Dim strTemp As New StringBuilder(cipherTextBytes.Length * 2)
    For Each b As Byte In cipherTextBytes
        strTemp.Append(Conversion.Hex(b).PadLeft(2, ""0""c).ToLower)
    Next
    Dim cipherText As String = strTemp.ToString
    Return cipherText
End Function
</code></pre>

<p>This is compatible with the PHP hash_hmac function with FALSE in the raw_output parameter.</p>
","19760255","1207","<java><php><.net><sha1><hmac>","0","2","3","2015-11-29 15:18:43","","0","","","","","2013-11-01 05:10:23","","","2013-11-04 01:13:00"
"19721161","Lowercase hexits. .NET and Java equivalent","<p>A trading partner has asked me to send an HMAC SHA1 hash as lowercase heaxits. The only reference I can find to them is in relation to PHP. I can do the hashing in .NET and Java but how do I output ""lowercase hexits"" with them? Lowercase hexits doesn't appear to be equivalent to Base64. </p>
","<p>Here's a C# translation of sedge's solution:</p>

<pre><code>private static String toHex(byte[] cipherTextBytes)
{
    var strTemp = new StringBuilder(cipherTextBytes.Length * 2);

    foreach(Byte b in cipherTextBytes) 
    {
        strTemp.Append(Microsoft.VisualBasic.Conversion.Hex(b).PadLeft(2, '0').ToLower());
    }

    String cipherText = strTemp.ToString();
    return cipherText;
}
</code></pre>
","33984355","1207","<java><php><.net><sha1><hmac>","0","0","3","2015-11-29 15:18:43","","0","","","","","2013-11-01 05:10:23","","","2015-11-29 15:18:43"
"26209105","Python: using HMAC signing to use API (implementation from PHP example)","<p>I have little trouble when i try to use bitcoin exchange API via python. 
I have example function in PHP:</p>

<pre><code>function bitmarket_api($method, $params = array())
{
$key = ""my_key"";
$secret = ""my_secret"";
$params[""method""] = $method;
$params[""tonce""] = time();
$post = http_build_query($params, """", ""&amp;"");
$sign = hash_hmac(""sha512"", $post, $secret);
$headers = array(
""API-Key: "" . $key,
""API-Hash: "" . $sign,
);

$curl = curl_init();
curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);
curl_setopt($curl, CURLOPT_URL, ""https://www.bitmarket.pl/api2/"");
curl_setopt($curl, CURLOPT_POST, true);
curl_setopt($curl, CURLOPT_POSTFIELDS, $post);
curl_setopt($curl, CURLOPT_HTTPHEADER, $headers);
$ret = curl_exec($curl);
return json_decode($ret);
}
</code></pre>

<p>And it is my python implementation:</p>

<pre><code>def bitmarket_api(method, params):

    key = 'my_key'
    secret = 'my_secret'
    url = 'https://www.bitmarket.pl/api2/'

    params['method'] = method
    params['tonce'] = timestamp()

    post = urllib.urlencode(params)
    sign = base64.b64encode(str(HMAC(secret, post, sha512).digest()))

    headers = {}

    headers['API-Key:'] = key
    headers['API-Hash:'] = sign

    req = urllib2.Request(url, post, headers)
    res = urllib2.urlopen(req, post)
    return json.load(res)
</code></pre>

<p>So, when i try to to invoke info method (or other method) i get 'Invalid API key' error.
I was looking for solution, and i was trying several other approach with no succes.
Can u guys help me? I think problem can be in headers...
Please excuse my poor English. I try to do my best, but I'm still making mistakes.</p>
","<p>Use the Python HMAC Auth lib with Requests lib
<a href=""https://github.com/bazaarvoice/python-hmac-auth"" rel=""nofollow"">https://github.com/bazaarvoice/python-hmac-auth</a></p>

<p>Nice and tidy to let your build your client without too much trouble.</p>
","27347276","1201","<php><python><api><hmac><bitcoin>","1","0","1","2017-02-02 09:11:24","","0","","4111810","","2014-10-06 01:56:20","2014-10-06 01:51:17","","","2014-12-07 20:12:40"
"35464976","java equivalent to python for hashing","<p>I have below code in java documentation (it takes <code>secret_key</code> and <code>data</code> as input) :</p>

<pre><code>javax.crypto.Mac mac = javax.crypto.Mac.getInstance(""HmacSHA1"")
mac.init(new javax.crypto.spec.SecretKeySpec(secret_key.getBytes(), ""HmacSHA1""))
byte[] hexBytes = new org.apache.commons.codec.binary.Hex().encode(mac.doFinal(data.getBytes()))
String signature = new String(hexBytes, ""UTF-8"")
</code></pre>

<p>after doing some RnD online , i wrote equivalent python  to :</p>

<pre><code>decodedKey = secret_key.decode(""hex"")
hmac_val = hmac.new(decodedKey, data.encode('UTF-8'), hashlib.sha1)
signature = hmac_val.digest().encode('base64')
</code></pre>

<p>but on doing a post request with this signature value in header, i am getting </p>

<blockquote>
  <p>ValueError: Invalid header value 'XXXXXXXXXX'</p>
</blockquote>

<p>is my python equivalent correct? it would be great help if someone can explain!</p>

<p><strong>EDIT</strong></p>

<p>Java </p>

<pre><code>public static void main(String[] args) throws NoSuchAlgorithmException, InvalidKeyException, UnsupportedEncodingException {
        String secret_key = ""c84766ca4a3ce52c3602bbf02ad1f7"";
        String data = ""some data"";
        javax.crypto.Mac mac = javax.crypto.Mac.getInstance(""HmacSHA1"");
        mac.init(new javax.crypto.spec.SecretKeySpec(secret_key.getBytes(), ""HmacSHA1""));
        byte[] hexBytes = new org.apache.commons.codec.binary.Hex().encode(mac.doFinal(data.getBytes()));
        String signature = new String(hexBytes, ""UTF-8"");
        System.out.println(""signature : ""+signature);
 }
</code></pre>

<p><strong>o/p</strong></p>

<pre><code>signature : 2b565c0476eed0f350ddb3a2852a4cab91281bdc
</code></pre>

<p><strong>Python :</strong></p>

<pre><code>In [1]: import hmac

In [2]: import hashlib

In [3]: secret_key = ""c84766ca4a3ce52c3602bbf02ad1f7""

In [4]: data = ""some data""

In [5]: decodedKey = secret_key.decode(""hex"")

In [6]: hmac_val = hmac.new(decodedKey, data.encode('UTF-8'), hashlib.sha1)

In [7]: signature = hmac_val.digest().encode('base64')

In [8]: signature
Out[8]: '3qE5SqSdvBEJcy8mSF+srqNXCd4=\n'

In [9]:
</code></pre>
","<p><strong>pycrypto</strong> has a hash function <a href=""https://pypi.python.org/pypi/pycrypto"" rel=""nofollow noreferrer"">https://pypi.python.org/pypi/pycrypto</a></p>

<p>because of <em>ValueError: Invalid header value 'XXXXXXXXXX'</em> see this thread <a href=""https://stackoverflow.com/questions/33345675/valueerror-invalid-header-value-h2o-python-client-2-7-9-default-apr-2-2015"">ValueError: Invalid header value &#39;H2O Python client/2.7.9 (default, Apr 2 2015, 15:33:21) \n[GCC 4.9.2]&#39;</a></p>

<p>maybe the header in your post is not compatible with the library you use for the post</p>

<p>what libraries do you import in the python code ?</p>
","35465370","1197","<java><python><hash><hmac><hmacsha1>","3","0","3","2016-02-17 20:13:43","35466812","4","1","3154233","","2016-02-17 19:29:05","2016-02-17 18:39:32","","2017-05-23 11:50:34","2016-02-17 18:59:57"
"35464976","java equivalent to python for hashing","<p>I have below code in java documentation (it takes <code>secret_key</code> and <code>data</code> as input) :</p>

<pre><code>javax.crypto.Mac mac = javax.crypto.Mac.getInstance(""HmacSHA1"")
mac.init(new javax.crypto.spec.SecretKeySpec(secret_key.getBytes(), ""HmacSHA1""))
byte[] hexBytes = new org.apache.commons.codec.binary.Hex().encode(mac.doFinal(data.getBytes()))
String signature = new String(hexBytes, ""UTF-8"")
</code></pre>

<p>after doing some RnD online , i wrote equivalent python  to :</p>

<pre><code>decodedKey = secret_key.decode(""hex"")
hmac_val = hmac.new(decodedKey, data.encode('UTF-8'), hashlib.sha1)
signature = hmac_val.digest().encode('base64')
</code></pre>

<p>but on doing a post request with this signature value in header, i am getting </p>

<blockquote>
  <p>ValueError: Invalid header value 'XXXXXXXXXX'</p>
</blockquote>

<p>is my python equivalent correct? it would be great help if someone can explain!</p>

<p><strong>EDIT</strong></p>

<p>Java </p>

<pre><code>public static void main(String[] args) throws NoSuchAlgorithmException, InvalidKeyException, UnsupportedEncodingException {
        String secret_key = ""c84766ca4a3ce52c3602bbf02ad1f7"";
        String data = ""some data"";
        javax.crypto.Mac mac = javax.crypto.Mac.getInstance(""HmacSHA1"");
        mac.init(new javax.crypto.spec.SecretKeySpec(secret_key.getBytes(), ""HmacSHA1""));
        byte[] hexBytes = new org.apache.commons.codec.binary.Hex().encode(mac.doFinal(data.getBytes()));
        String signature = new String(hexBytes, ""UTF-8"");
        System.out.println(""signature : ""+signature);
 }
</code></pre>

<p><strong>o/p</strong></p>

<pre><code>signature : 2b565c0476eed0f350ddb3a2852a4cab91281bdc
</code></pre>

<p><strong>Python :</strong></p>

<pre><code>In [1]: import hmac

In [2]: import hashlib

In [3]: secret_key = ""c84766ca4a3ce52c3602bbf02ad1f7""

In [4]: data = ""some data""

In [5]: decodedKey = secret_key.decode(""hex"")

In [6]: hmac_val = hmac.new(decodedKey, data.encode('UTF-8'), hashlib.sha1)

In [7]: signature = hmac_val.digest().encode('base64')

In [8]: signature
Out[8]: '3qE5SqSdvBEJcy8mSF+srqNXCd4=\n'

In [9]:
</code></pre>
","<p>if you want it easy try this: <a href=""https://pythonhosted.org/pycrypto/Crypto.Hash.HMAC-module.html"" rel=""nofollow"">https://pythonhosted.org/pycrypto/Crypto.Hash.HMAC-module.html</a></p>

<p>maybe the encoding influences the result, [UTF-8] then [base-64]</p>
","35466179","1197","<java><python><hash><hmac><hmacsha1>","3","0","3","2016-02-17 20:13:43","35466812","4","1","3154233","","2016-02-17 19:29:05","2016-02-17 18:39:32","","","2016-02-17 19:41:14"
"35464976","java equivalent to python for hashing","<p>I have below code in java documentation (it takes <code>secret_key</code> and <code>data</code> as input) :</p>

<pre><code>javax.crypto.Mac mac = javax.crypto.Mac.getInstance(""HmacSHA1"")
mac.init(new javax.crypto.spec.SecretKeySpec(secret_key.getBytes(), ""HmacSHA1""))
byte[] hexBytes = new org.apache.commons.codec.binary.Hex().encode(mac.doFinal(data.getBytes()))
String signature = new String(hexBytes, ""UTF-8"")
</code></pre>

<p>after doing some RnD online , i wrote equivalent python  to :</p>

<pre><code>decodedKey = secret_key.decode(""hex"")
hmac_val = hmac.new(decodedKey, data.encode('UTF-8'), hashlib.sha1)
signature = hmac_val.digest().encode('base64')
</code></pre>

<p>but on doing a post request with this signature value in header, i am getting </p>

<blockquote>
  <p>ValueError: Invalid header value 'XXXXXXXXXX'</p>
</blockquote>

<p>is my python equivalent correct? it would be great help if someone can explain!</p>

<p><strong>EDIT</strong></p>

<p>Java </p>

<pre><code>public static void main(String[] args) throws NoSuchAlgorithmException, InvalidKeyException, UnsupportedEncodingException {
        String secret_key = ""c84766ca4a3ce52c3602bbf02ad1f7"";
        String data = ""some data"";
        javax.crypto.Mac mac = javax.crypto.Mac.getInstance(""HmacSHA1"");
        mac.init(new javax.crypto.spec.SecretKeySpec(secret_key.getBytes(), ""HmacSHA1""));
        byte[] hexBytes = new org.apache.commons.codec.binary.Hex().encode(mac.doFinal(data.getBytes()));
        String signature = new String(hexBytes, ""UTF-8"");
        System.out.println(""signature : ""+signature);
 }
</code></pre>

<p><strong>o/p</strong></p>

<pre><code>signature : 2b565c0476eed0f350ddb3a2852a4cab91281bdc
</code></pre>

<p><strong>Python :</strong></p>

<pre><code>In [1]: import hmac

In [2]: import hashlib

In [3]: secret_key = ""c84766ca4a3ce52c3602bbf02ad1f7""

In [4]: data = ""some data""

In [5]: decodedKey = secret_key.decode(""hex"")

In [6]: hmac_val = hmac.new(decodedKey, data.encode('UTF-8'), hashlib.sha1)

In [7]: signature = hmac_val.digest().encode('base64')

In [8]: signature
Out[8]: '3qE5SqSdvBEJcy8mSF+srqNXCd4=\n'

In [9]:
</code></pre>
","<p>Referrring to this thread :</p>

<p><a href=""https://stackoverflow.com/questions/17947026/java-method-which-can-provide-the-same-output-as-python-method-for-hmac-sha256-i"">Java method which can provide the same output as Python method for HMAC-SHA256 in Hex</a></p>

<p>minor tweeking for <code>sha1</code>, below is simple equivalent :</p>

<pre><code>In [13]: print hmac.new(secret_key, data, hashlib.sha1).hexdigest()
2b565c0476eed0f350ddb3a2852a4cab91281bdc
</code></pre>
","35466812","1197","<java><python><hash><hmac><hmacsha1>","3","1","3","2016-02-17 20:13:43","35466812","4","1","3154233","","2016-02-17 19:29:05","2016-02-17 18:39:32","","2017-05-23 10:28:18","2016-02-17 20:13:43"
"36261697","Hmac Hashing Error in Python 3.5","<p>I'm trying to hash an API secret using hmac.  But I can't get it to work using Python 3.5.</p>

<p>Here's the problem code:</p>

<pre><code>sign = hmac.new(self.Secret, post_data, hashlib.sha512).hexdigest()
</code></pre>

<p>Here's the error:</p>

<pre><code>TypeError: key: expected bytes or bytearray, but got 'str'
</code></pre>

<p>I've tried encoding first like so...</p>

<pre><code>secret = b'api_secret_here'
</code></pre>

<p>Also tried...</p>

<pre><code>sign = hmac.new(self.Secret.encode('utf-8'), post_data, hashlib.sha512).hexdigest()
</code></pre>

<p>and...</p>

<pre><code>sign = hmac.new(self.Secret.encode(), post_data, hashlib.sha512).hexdigest() 
</code></pre>

<p>All give the error:</p>

<pre><code>TypeError: Unicode-objects must be encoded before hashing
</code></pre>

<p>Here's the code in full context:</p>

<pre><code>import hashlib
import hmac
import json
import sys
import time
from datetime import datetime

# Tested on Python 2.7.6 &amp; 3.4.3
if sys.version_info[0] == 3:
    from urllib.request import Request, urlopen
    from urllib.parse import urlencode
else:
    from urllib2 import Request, urlopen
    from urllib import urlencode

minute = 60
hour = minute * 60
day = hour * 24
week = day * 7
month = day * 30
year = day * 365

# Possible Commands
PUBLIC_COMMANDS = ['returnTicker', 'return24hVolume', 'returnOrderBook', 'returnTradeHistory', 'returnChartData',
                   'returnCurrencies', 'returnLoanOrders']
PRIVATE_COMMANDS = ['returnBalances', 'returnCompleteBalances', 'returnDepositAddresses', 'generateNewAddress',
                    'returnDepositsWithdrawals', 'returnOpenOrders', 'returnTradeHistory',
                    'returnAvailableAccountBalances', 'returnTradableBalances', 'returnOpenLoanOffers',
                    'returnActiveLoans', 'createLoanOffer', 'cancelLoanOffer', 'toggleAutoRenew', 'buy', 'sell',
                    'cancelOrder', 'moveOrder', 'withdraw', 'transferBalance', 'returnMarginAccountSummary',
                    'marginBuy', 'marginSell', 'getMarginPosition', 'closeMarginPosition']


class Poloniex:
    def __init__(self, APIKey='', Secret=''):
        self.APIKey = APIKey
        self.Secret = Secret
        # Conversions
        self.timestamp_str = lambda timestamp=time.time(), format=""%Y-%m-%d %H:%M:%S"": datetime.fromtimestamp(
            timestamp).strftime(format)
        self.str_timestamp = lambda datestr=self.timestamp_str(), format=""%Y-%m-%d %H:%M:%S"": int(
            time.mktime(time.strptime(datestr, format)))
        self.float_roundPercent = lambda floatN, decimalP=2: str(round(float(floatN) * 100, decimalP)) + ""%""

        # PUBLIC COMMANDS
        self.marketTicker = lambda x=0: self.api('returnTicker')
        self.marketVolume = lambda x=0: self.api('return24hVolume')
        self.marketStatus = lambda x=0: self.api('returnCurrencies')
        self.marketLoans = lambda coin: self.api('returnLoanOrders', {'currency': coin})
        self.marketOrders = lambda pair='all': self.api('returnOrderBook', {'currencyPair': pair})
        self.marketChart = lambda pair, period=day, start=time.time() - (month * 2), end=time.time(): self.api(
            'returnChartData', {'currencyPair': pair, 'period': period, 'start': start, 'end': end})
        self.marketTradeHist = lambda pair: self.api('returnTradeHistory',
                                                     {'currencyPair': pair})  # NEEDS TO BE FIXED ON Poloniex

        # PRIVATE COMMANDS
        # self.myTradeHist = lambda pair: self.api('returnTradeHistory',{'currencyPair':pair})
        self.myAvailBalances = lambda x=0: self.api('returnAvailableAccountBalances')
        self.myMarginAccountSummary = lambda x=0: self.api('returnMarginAccountSummary')
        self.myMarginPosition = lambda pair='all': self.api('getMarginPosition', {'currencyPair': pair})
        self.myCompleteBalances = lambda x=0: self.api('returnCompleteBalances')
        self.myAddresses = lambda x=0: self.api('returnDepositAddresses')
        self.myOrders = lambda pair='all': self.api('returnOpenOrders', {'currencyPair': pair})
        self.myDepositsWithdraws = lambda x=0: self.api('returnDepositsWithdrawals')
        self.myTradeableBalances = lambda x=0: self.api('returnTradableBalances')
        self.myActiveLoans = lambda x=0: self.api('returnActiveLoans')
        self.myOpenLoanOrders = lambda x=0: self.api('returnOpenLoanOffers')
        ## Trading functions ##
        self.createLoanOrder = lambda coin, amount, rate: self.api('createLoanOffer',
                                                                   {'currency': coin, 'amount': amount, 'duration': 2,
                                                                    'autoRenew': 0, 'lendingRate': rate})
        self.cancelLoanOrder = lambda orderId: self.api('cancelLoanOffer', {'orderNumber': orderId})
        self.toggleAutoRenew = lambda orderId: self.api('toggleAutoRenew', {'orderNumber': orderId})
        self.closeMarginPosition = lambda pair: self.api('closeMarginPosition', {'currencyPair': pair})
        self.marginBuy = lambda pair, rate, amount, lendingRate=2: self.api('marginBuy',
                                                                            {'currencyPair': pair, 'rate': rate,
                                                                             'amount': amount,
                                                                             'lendingRate': lendingRate})
        self.marginSell = lambda pair, rate, amount, lendingRate=2: self.api('marginSell',
                                                                             {'currencyPair': pair, 'rate': rate,
                                                                              'amount': amount,
                                                                              'lendingRate': lendingRate})
        self.buy = lambda pair, rate, amount: self.api('buy', {'currencyPair': pair, 'rate': rate, 'amount': amount})
        self.sell = lambda pair, rate, amount: self.api('sell', {'currencyPair': pair, 'rate': rate, 'amount': amount})
        self.cancelOrder = lambda orderId: self.api('cancelOrder', {'orderNumber': orderId})
        self.moveOrder = lambda orderId, rate, amount: self.api('moveOrder', {'orderNumber': orderId, 'rate': rate,
                                                                              'amount': amount})
        self.withdraw = lambda coin, amount, address: self.api('withdraw',
                                                               {'currency': coin, 'amount': amount, 'address': address})
        self.transferBalance = lambda coin, amount, fromac, toac: self.api('transferBalance',
                                                                           {'currency': coin, 'amount': amount,
                                                                            'fromAccount': fromac, 'toAccount': toac})

    #####################
    # Main Api Function #
    #####################
    def api(self, command, args={}):
        """"""
        returns 'False' if invalid command or if no APIKey or Secret is specified (if command is ""private"")
        returns {""error"":""&lt;error message&gt;""} if API error
        """"""
        args['command'] = command
        if command in PRIVATE_COMMANDS:
            if len(self.APIKey) &lt; 2 or len(self.Secret) &lt; 2:
                print(""An APIKey and Secret is needed!"")
                return False
            url, args['nonce'] = ['https://poloniex.com/tradingApi', int(time.time() * 42)]
            post_data = urlencode(args)
            sign = hmac.new(self.Secret, post_data, hashlib.sha512).hexdigest()
            headers = {'Sign': sign, 'Key': self.APIKey}
            ret = urlopen(Request(url, post_data, headers))
            return json.loads(ret.read().decode(encoding='UTF-8'))
        elif command in PUBLIC_COMMANDS:
            url = 'https://poloniex.com/public?'
            if not args:
                ret = urlopen(Request(url + command))
                return json.loads(ret.read().decode(encoding='UTF-8'))
            else:
                ret = urlopen(Request(url + urlencode(args)))
                return json.loads(ret.read().decode(encoding='UTF-8'))
        else:
            return False
</code></pre>
","<p>Both the <code>key</code> and <code>msg</code> arguments to <code>hmac.new()</code> must be <code>bytes</code> objects. You are feeding it a <code>str</code> object, as that is what the <a href=""https://docs.python.org/3/library/urllib.parse.html#urllib.parse.urlencode"" rel=""nofollow""><code>urllib.parse.urlencode()</code> function</a> produces:</p>

<blockquote>
  <p>Convert <em>[...]</em> to a percent-encoded ASCII text string. If the resultant string is to be used as a <em>data</em> for POST operation with the <code>urlopen()</code> function, then it should be encoded to bytes, otherwise it would result in a <code>TypeError</code>.</p>
</blockquote>

<p>So not only should your <code>self.Secret</code> be bytes, you need to encode the <code>post_data</code> element too, even more so since you'll be passing it to <code>urlopen()</code> for a POST operation:</p>

<pre><code>post_data = urlencode(args).encode('ASCII')
sign = hmac.new(self.Secret, post_data, hashlib.sha512).hexdigest()
headers = {'Sign': sign, 'Key': self.APIKey}
ret = urlopen(Request(url, post_data, headers))
</code></pre>
","36261885","1196","<python><python-3.x><hmac>","1","2","1","2016-03-28 12:01:15","36261885","0","1","100297","","2016-03-28 12:01:15","2016-03-28 11:49:06","","","2016-03-28 12:01:05"
"6444507","Using CommonCrypto/CommonHMAC to encrypt some data and always comes back null","<p>I tried the following to encrypt the <code>clearTextData</code> using the key <code>keyData</code>. And I did check to make sure that both of those values are valid and going through.</p>

<pre><code>NSData *keyData = [PRIVATE_KEY dataUsingEncoding:NSUTF8StringEncoding];
NSData *clearTextData = [data dataUsingEncoding:NSUTF8StringEncoding];

uint8_t digest[CC_SHA1_DIGEST_LENGTH] = {0};

CCHmacContext hmacContext;
CCHmacInit(&amp;hmacContext, kCCHmacAlgSHA1, keyData.bytes, keyData.length);
CCHmacUpdate(&amp;hmacContext, clearTextData.bytes, clearTextData.length);
CCHmacFinal(&amp;hmacContext, digest);

NSData *out = [NSData dataWithBytes:digest length:CC_SHA1_DIGEST_LENGTH];

NSLog(@""encrypted data: %@"", [NSString stringWithUTF8String:[out bytes]]);
</code></pre>

<p>The log always comes back saying <code>encrypted data: (null)</code></p>

<p>Any ideas?</p>

<p><strong>* UPDATE *</strong></p>

<p>Here are examples of the key and data that I am passing:</p>

<blockquote>
  <p>key: 983745hjhgfd3454</p>
  
  <p>data:
  {""data"":""lala"",""pubKey"":""75948458"",""sig"":""val""}</p>
</blockquote>
","<p>This data from the crypto is <strong>data</strong> and attempting to turn it into string is failing on the encoding. You are specifying UTF8 encoding and I have also tried UTF32 encoding and that fails as well. Just log the data returned as those hex values are more beneficial than a string representation.</p>

<p>If you would still like to see as much as the string as possible you can do this.</p>

<pre><code>NSData *output = [NSData dataWithBytes:digest length:CC_SHA1_DIGEST_LENGTH];

    //This is useful
NSLog(@""encrypted data: %@"", output);

    //Not useful but you may be able to visualize some of the string
char *outstr = malloc(sizeof(char) * (CC_SHA1_DIGEST_LENGTH + 1));
memcpy(outstr, [output bytes], CC_SHA1_DIGEST_LENGTH);
outstr[CC_SHA1_DIGEST_LENGTH] = 0;
NSLog(@""encrypted data string: %s"", outstr);
free(outstr);
</code></pre>

<p>And I also had some success with the following line.(Prints a different string than above)</p>

<pre><code>NSLog(@""encrypted data: %@"", [[[NSString alloc] initWithData:output encoding:NSISOLatin2StringEncoding] autorelease]);
</code></pre>
","6444830","1194","<objective-c><encryption><hmac>","2","1","1","2012-11-05 13:39:57","6444830","0","1","490424","","2012-11-05 13:39:57","2011-06-22 18:13:19","","","2011-06-22 18:38:00"
"33669133","How to authenticate a post request in php","<p>I am trying to implement the HTTP Post Authentication, Which mentioned on this document <a href=""https://www.clearslide.com/view/mail?iID=YS7LCS8XDPCABFR453DE"" rel=""nofollow"">https://www.clearslide.com/view/mail?iID=YS7LCS8XDPCABFR453DE</a> , I am not able to understand what exactly i have to do to get this working, I tried to dump <em>$_REQUEST</em> and <em>$_SERVER</em> variables.</p>

<p>This is the output i am getting for this $_REQUEST</p>

<pre><code>Array
(
    [emailpitchsent] =&gt;
)
</code></pre>

<p>And this the output for $_SERVER</p>

<pre><code>Array
(
    [HTTP_HMAC] =&gt; D4L1ICmRMii32PdCryBkpSNdxY5XDxC_OXsDTEucyzU
    [HTTP_DATE] =&gt; Thu, 12 Nov 2015 00:50:05 PST
    [HTTP_SHA1] =&gt; GTRFkX7JYVtDQgvrQeXJmHaCF24=
    [CONTENT_LENGTH] =&gt; 262
    [CONTENT_TYPE] =&gt; application/json; charset=UTF-8
    [HTTP_HOST] =&gt; myhost.com
    [HTTP_CONNECTION] =&gt; Keep-Alive
    [HTTP_USER_AGENT] =&gt; Apache-HttpClient/4.5.1 (Java/1.7.0_55)
    [PATH] =&gt; /sbin:/usr/sbin:/bin:/usr/bin
    [SERVER_SIGNATURE] =&gt; &lt;address&gt;Apache/2.2.31 (Amazon) Server at myhost.com Port 80&lt;/address&gt;

    [SERVER_SOFTWARE] =&gt; Apache/2.2.31 (Amazon)
    [SERVER_NAME] =&gt; myhost.com
    [SERVER_ADDR] =&gt; 0.0.0.0
    [SERVER_PORT] =&gt; 80
    [REMOTE_ADDR] =&gt; 0.0.0.1
    [DOCUMENT_ROOT] =&gt; /var/www/vhosts/myhost.com/httpdocs
    [SERVER_ADMIN] =&gt; info@myhost.com
    [SCRIPT_FILENAME] =&gt; /var/www/vhosts/myhost.com/httpdocs/clearslide.php
    [REMOTE_PORT] =&gt; 47400
    [GATEWAY_INTERFACE] =&gt; CGI/1.1
    [SERVER_PROTOCOL] =&gt; HTTP/1.1
    [REQUEST_METHOD] =&gt; POST
    [QUERY_STRING] =&gt; emailpitchsent
    [REQUEST_URI] =&gt; /clearslide.php?emailpitchsent
    [SCRIPT_NAME] =&gt; /clearslide.php
    [PHP_SELF] =&gt; /clearslide.php
    [REQUEST_TIME] =&gt; 1447318205
)
</code></pre>

<p>This i the content of clearslide.php</p>

<pre><code>&lt;?php
$req_dump = print_r($_REQUEST, TRUE);
$ser_dump = print_r($_SERVER,TRUE);
$fp = fopen('request.log', 'a');
fwrite($fp, $req_dump);
fwrite($fp, $ser_dump);
fclose($fp);
</code></pre>

<p>What i have to do now to get this thing working, How can i authenticate that request and get the data?.</p>

<p>Thanks</p>
","<p>You can get the raw json body with <code>file_get_contents('php://input')</code> or <code>$HTTP_RAW_POST_DATA</code>. Here is a sample of how to verify the signature from the headers. Also, here is a script that can generate a fake request for testing. Let me know if you have any more trouble. :)  </p>

<p><strong>Verify the signature</strong></p>

<pre><code>&lt;?php
// https://developers.google.com/api-client-library/java/google-http-java-client/reference/1.20.0/com/google/api/client/util/Base64#encodeBase64URLSafeString(byte[])
function urlsafe_b64encode($string) {
    $data = base64_encode($string);
    $data = str_replace(array('+','/', '='), array('-','_',''), $data);       
    return $data;
}

function extract_message(){
  $verb = $_SERVER[""REQUEST_METHOD""];
  $sha1 = $_SERVER[""HTTP_SHA1""];
  $content_type = $_SERVER[""CONTENT_TYPE""];
  $request_time = $_SERVER[""HTTP_DATE""];
  $path = parse_url($_SERVER[""REQUEST_URI""], PHP_URL_PATH);     
  return ""$verb\n$sha1\n$content_type\n$request_time\n$path"";
}

function calculate_signature($to_sign, $api_key) {
  return urlsafe_b64encode(hash_hmac('sha256', $to_sign, $api_key, true));
}

function get_recieved_signature() { return $_SERVER[""HTTP_HMAC""]; }

function verify_signature($recieved, $calculated) { return $recieved == $calculated; }

$api_key = ""apikey"";

$to_sign = extract_message();
$calculated_signature = calculate_signature($to_sign, $api_key);
$recieved_signature = get_recieved_signature();
$matched = verify_signature($recieved_signature, $calculated_signature);

$json_obj = json_decode(file_get_contents('php://input'), TRUE);

$fp = fopen('request.log', 'a');
fwrite($fp, print_r(array(
  '$_SERVER' =&gt; $_SERVER, 
  ""JSON"" =&gt; $json_obj,
  ""SIGNATURE INFO"" =&gt;  array(
    ""To Sign"" =&gt; str_replace(""\n"", ""\\n"", $to_sign),
    ""Received"" =&gt; $recieved_signature,
    ""Calculated"" =&gt; $calculated_signature,
    ""Matched"" =&gt; $matched ? ""TRUE"" : ""FALSE""
  )
), TRUE));
fclose($fp);
</code></pre>

<p><strong>Make a sample request</strong></p>

<pre><code>&lt;?php
// https://developers.google.com/api-client-library/java/google-http-java-client/reference/1.20.0/com/google/api/client/util/Base64#encodeBase64URLSafe(byte[])
function urlsafe_b64encode($string) {
    $data = base64_encode($string);
    $data = str_replace(array('+','/','='), array('-','_',''), $data);
    return $data;
}

$sample_json = '{""company"":""Example, Inc"",""pitchDetailsLink"":""https://dev.clearslideng.com/manage/email/details?userVID=6YSZ9BBJWVM3H87PUAPE"",""senderEmail"":""tester@clearslide.com"",""time"":""Fri, 11/13/2015, 10:19 AM PST"",""recipients"":[""my@example.com""],""decks"":[""testing""]}';

$api_endpoint = 'http://localhost';

$verb = ""POST"";
$sha1 = base64_encode(sha1($sample_json));
$content_type = ""application/json; charset=UTF-8"";
$request_time = date(""D, d M Y H:i:s T"");
$path = ""/emailpitchsent"";

$to_sign = ""$verb\n$sha1\n$content_type\n$request_time\n$path"";
$api_key = ""apikey"";
$signature = urlsafe_b64encode(hash_hmac('sha256', $to_sign, $api_key, true));

$ch = curl_init(""$api_endpoint$path"");
curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
// curl_setopt($ch, CURLOPT_VERBOSE, 1);
curl_setopt($ch, CURLOPT_HEADER, 1);
curl_setopt($ch, CURLOPT_HTTPHEADER, array(
 ""CONTENT-TYPE: $content_type"",
 ""HMAC: $signature"",
 ""DATE: $request_time"",
 ""SHA1: $sha1""
));
curl_setopt($ch, CURLOPT_POST, true);
curl_setopt($ch, CURLOPT_POSTFIELDS, $sample_json);
$result = curl_exec($ch);
curl_close($ch);

echo ""To Sign: "". str_replace(""\n"", ""\\n"", $to_sign) .""\n\n"";
echo ""Response: \n\n$result"";
</code></pre>

<p><strong>Example Log</strong></p>

<pre><code>Array
(
    [$_SERVER] =&gt; Array
        (
            [USER] =&gt; vagrant
            [HOME] =&gt; /home/vagrant
            [FCGI_ROLE] =&gt; RESPONDER
            [QUERY_STRING] =&gt; event=emailpitchsent
            [REQUEST_METHOD] =&gt; POST
            [CONTENT_TYPE] =&gt; application/json; charset=UTF-8
            [CONTENT_LENGTH] =&gt; 270
            [SCRIPT_FILENAME] =&gt; /vagrant/public/index.php
            [SCRIPT_NAME] =&gt; /index.php
            [REQUEST_URI] =&gt; /index.php?event=emailpitchsent
            [DOCUMENT_URI] =&gt; /index.php
            [DOCUMENT_ROOT] =&gt; /vagrant/public
            [SERVER_PROTOCOL] =&gt; HTTP/1.1
            [GATEWAY_INTERFACE] =&gt; CGI/1.1
            [SERVER_SOFTWARE] =&gt; nginx/1.1.19
            [REMOTE_ADDR] =&gt; 10.0.0.10
            [REMOTE_PORT] =&gt; 61094
            [SERVER_ADDR] =&gt; 10.0.0.200
            [SERVER_PORT] =&gt; 80
            [SERVER_NAME] =&gt; 192.168.22.10.xip.io
            [HTTPS] =&gt; off
            [REDIRECT_STATUS] =&gt; 200
            [LARA_ENV] =&gt; local
            [HTTP_HMAC] =&gt; vnQM9g41jE--rJvvwymezRY5VU9pf52Vu9sGhe_Gy-4
            [HTTP_DATE] =&gt; Thu, 19 Nov 2015 06:24:49 PST
            [HTTP_SHA1] =&gt; X7hjTy8DUzIUNO05JiuXp1DT3Js=
            [HTTP_CONTENT_LENGTH] =&gt; 270
            [HTTP_CONTENT_TYPE] =&gt; application/json; charset=UTF-8
            [HTTP_HOST] =&gt; 10.0.0.200
            [HTTP_CONNECTION] =&gt; Keep-Alive
            [HTTP_USER_AGENT] =&gt; Apache-HttpClient/4.5.1 (Java/1.7.0_91)
            [PHP_SELF] =&gt; /index.php
            [REQUEST_TIME] =&gt; 1447943089
        )

    [JSON] =&gt; Array
        (
            [company] =&gt; ClearSlide
            [pitchDetailsLink] =&gt; https://dev.clearslideng.com/manage/email/details?userVID=YGCD4WNJT377FQ6FTUFH
            [senderEmail] =&gt; tester@clearslide.com
            [time] =&gt; Thu, 11/19/2015, 6:24 AM PST
            [recipients] =&gt; Array
                (
                    [0] =&gt; test@example.com
                )

            [decks] =&gt; Array
                (
                    [0] =&gt; RockyBeach-720
                )

        )

    [SIGNATURE INFO] =&gt; Array
        (
            [Path] =&gt; /index.php
            [To Sign] =&gt; POST\nX7hjTy8DUzIUNO05JiuXp1DT3Js=\napplication/json; charset=UTF-8\nThu, 19 Nov 2015 06:24:49 PST\n/index.php
            [Received] =&gt; vnQM9g41jE--rJvvwymezRY5VU9pf52Vu9sGhe_Gy-4
            [Calculated] =&gt; vnQM9g41jE--rJvvwymezRY5VU9pf52Vu9sGhe_Gy-4
            [Matched] =&gt; TRUE
        )

)
</code></pre>

<p><strong>Example of Server Side toSign</strong></p>

<pre><code>POST
X7hjTy8DUzIUNO05JiuXp1DT3Js=
application/json; charset=UTF-8
Thu, 19 Nov 2015 06:24:49 PST
/index.php
</code></pre>
","33702046","1151","<php><authentication><hmac><hmacsha1>","0","2","2","2015-11-19 14:33:46","33702046","0","1","","","","2015-11-12 10:20:18","","2015-11-19 14:33:46","2015-11-13 21:26:58"
"33669133","How to authenticate a post request in php","<p>I am trying to implement the HTTP Post Authentication, Which mentioned on this document <a href=""https://www.clearslide.com/view/mail?iID=YS7LCS8XDPCABFR453DE"" rel=""nofollow"">https://www.clearslide.com/view/mail?iID=YS7LCS8XDPCABFR453DE</a> , I am not able to understand what exactly i have to do to get this working, I tried to dump <em>$_REQUEST</em> and <em>$_SERVER</em> variables.</p>

<p>This is the output i am getting for this $_REQUEST</p>

<pre><code>Array
(
    [emailpitchsent] =&gt;
)
</code></pre>

<p>And this the output for $_SERVER</p>

<pre><code>Array
(
    [HTTP_HMAC] =&gt; D4L1ICmRMii32PdCryBkpSNdxY5XDxC_OXsDTEucyzU
    [HTTP_DATE] =&gt; Thu, 12 Nov 2015 00:50:05 PST
    [HTTP_SHA1] =&gt; GTRFkX7JYVtDQgvrQeXJmHaCF24=
    [CONTENT_LENGTH] =&gt; 262
    [CONTENT_TYPE] =&gt; application/json; charset=UTF-8
    [HTTP_HOST] =&gt; myhost.com
    [HTTP_CONNECTION] =&gt; Keep-Alive
    [HTTP_USER_AGENT] =&gt; Apache-HttpClient/4.5.1 (Java/1.7.0_55)
    [PATH] =&gt; /sbin:/usr/sbin:/bin:/usr/bin
    [SERVER_SIGNATURE] =&gt; &lt;address&gt;Apache/2.2.31 (Amazon) Server at myhost.com Port 80&lt;/address&gt;

    [SERVER_SOFTWARE] =&gt; Apache/2.2.31 (Amazon)
    [SERVER_NAME] =&gt; myhost.com
    [SERVER_ADDR] =&gt; 0.0.0.0
    [SERVER_PORT] =&gt; 80
    [REMOTE_ADDR] =&gt; 0.0.0.1
    [DOCUMENT_ROOT] =&gt; /var/www/vhosts/myhost.com/httpdocs
    [SERVER_ADMIN] =&gt; info@myhost.com
    [SCRIPT_FILENAME] =&gt; /var/www/vhosts/myhost.com/httpdocs/clearslide.php
    [REMOTE_PORT] =&gt; 47400
    [GATEWAY_INTERFACE] =&gt; CGI/1.1
    [SERVER_PROTOCOL] =&gt; HTTP/1.1
    [REQUEST_METHOD] =&gt; POST
    [QUERY_STRING] =&gt; emailpitchsent
    [REQUEST_URI] =&gt; /clearslide.php?emailpitchsent
    [SCRIPT_NAME] =&gt; /clearslide.php
    [PHP_SELF] =&gt; /clearslide.php
    [REQUEST_TIME] =&gt; 1447318205
)
</code></pre>

<p>This i the content of clearslide.php</p>

<pre><code>&lt;?php
$req_dump = print_r($_REQUEST, TRUE);
$ser_dump = print_r($_SERVER,TRUE);
$fp = fopen('request.log', 'a');
fwrite($fp, $req_dump);
fwrite($fp, $ser_dump);
fclose($fp);
</code></pre>

<p>What i have to do now to get this thing working, How can i authenticate that request and get the data?.</p>

<p>Thanks</p>
","<p>Clearslide.com has free tech support for all of their users. You might want to try shooting them an email at support@clearslide.com - They'll be happy to assist with the setup.</p>
","33787130","1151","<php><authentication><hmac><hmacsha1>","0","0","2","2015-11-19 14:33:46","33702046","0","1","","","","2015-11-12 10:20:18","","","2015-11-18 18:03:10"
"8346202","How do you determine HTTP request parameter order when calculating HMACs?","<p>I'm writing a Web service that is going to use HMAC for authentication. Quick overview: an HMAC is a message digest calculated using the body of a message along with a secret key. The sender calculates the HMAC and attaches it to the request, then the receiver calculates the message digest on receipt using the secret key, which it has on file. If the digests are the same, then the receiver can be sure that the message was sent by the person who they claim to be. </p>

<p>My question is about the parameter order. Let's say the Web service request has three parameters, foo, bar and baz. The body of the HTTP POST will look something like:</p>

<pre><code>foo=1&amp;bar=2&amp;baz=3&amp;hmac=de7c9b85b8b78aa6bc8a7a36f70a90701c9db4d9
</code></pre>

<p>(The HMAC in this case is a fake example.)</p>

<p>Normally HTTP parameter order is not significant, but when it comes to calculating the hash, it is. Should the server take the raw incoming request, drop the ""hmac"" parameter which is, of course, not part of the hash calculation, and hash that? Or should there be an agreed upon order of parameters which must be followed in order for the hash to be calculated correctly?</p>

<p>The former approach puts a bit more of a burden on the implementor on the server side, but it's more robust. What I'm really asking about is the expectation of developers who are building things on the client side. Do they expect that things will just work regardless of what order the parameters?</p>
","<p>I would say that manipulating the body of the request <em>after</em> you have calculated a hash based on that body, which is significant to whether the request is accepted, is generally bad practice (for reasons that, I feel, are obvious). That HMAC should not be appended to the request body, but set in either a GET parameter, a cookie, or a custom header.</p>

<p>This also reduces the <code>burden on the implementor on the server side</code> for your first suggestion, and this is the path I would recommend.</p>

<p>But that's me, others may have differing opinions on all of this...</p>
","8349526","1146","<http><hmac>","3","0","1","2011-12-01 22:57:01","8349526","0","","86932","","2011-12-01 19:07:38","2011-12-01 18:14:29","","","2011-12-01 22:57:01"
"40641912","C# HMAC Sha256 equivalent in Node","<p>I'm trying to port a C# application into Node. 
The app has this C# function to generate a Sha256 </p>

<pre><code>    public static string CreateSHA256Signature(string targetText)
        {
            string _secureSecret = ""E49756B4C8FAB4E48222A3E7F3B97CC3"";
            byte[] convertedHash = new byte[_secureSecret.Length / 2];
            for (int i = 0; i &lt; _secureSecret.Length / 2; i++)
            {
                convertedHash[i] = (byte)Int32.Parse(_secureSecret.Substring(i * 2, 2), System.Globalization.NumberStyles.HexNumber);
            }


            string hexHash = """";
            using (HMACSHA256 hasher = new HMACSHA256(convertedHash))
            {
                byte[] hashValue = hasher.ComputeHash(Encoding.UTF8.GetBytes(targetText));
                foreach (byte b in hashValue)
                {
                    hexHash += b.ToString(""X2"");
                }
            }
            return hexHash;
        }
    Response.Write(CreateSHA256Signature(""TEST STRING""));
    // returns 55A891E416F480D5BE52B7985557B24A1028E4DAB79B64D0C5088F948EB3F52E
</code></pre>

<p>I tried to use node crypto as following:</p>

<pre><code> console.log(crypto.createHmac('sha256', 'E49756B4C8FAB4E48222A3E7F3B97CC3').update('TEST STRING', 'utf-8').digest('hex'))
// returns bc0a28c3f60d323404bca7dfc4261d1280ce46e887dc991beb2c5bf5e7ec6100
</code></pre>

<p>How can I get the same C# result in node?</p>
","<p>Your key is different from the C# version. Try to convert the hex string to raw bytes. This way crypto knows to take the bytes instead of the actual string.</p>

<p>For example:</p>

<pre><code>var crypto = require('crypto');

var key = Buffer.from('E49756B4C8FAB4E48222A3E7F3B97CC3', 'hex');
console.log(crypto.createHmac('sha256', key).update('TEST STRING').digest('hex'))
</code></pre>
","40642240","1139","<c#><node.js><sha256><hmac>","1","2","2","2017-12-30 18:01:09","40642240","0","","","","","2016-11-16 20:41:26","","","2016-11-16 21:02:25"
"40641912","C# HMAC Sha256 equivalent in Node","<p>I'm trying to port a C# application into Node. 
The app has this C# function to generate a Sha256 </p>

<pre><code>    public static string CreateSHA256Signature(string targetText)
        {
            string _secureSecret = ""E49756B4C8FAB4E48222A3E7F3B97CC3"";
            byte[] convertedHash = new byte[_secureSecret.Length / 2];
            for (int i = 0; i &lt; _secureSecret.Length / 2; i++)
            {
                convertedHash[i] = (byte)Int32.Parse(_secureSecret.Substring(i * 2, 2), System.Globalization.NumberStyles.HexNumber);
            }


            string hexHash = """";
            using (HMACSHA256 hasher = new HMACSHA256(convertedHash))
            {
                byte[] hashValue = hasher.ComputeHash(Encoding.UTF8.GetBytes(targetText));
                foreach (byte b in hashValue)
                {
                    hexHash += b.ToString(""X2"");
                }
            }
            return hexHash;
        }
    Response.Write(CreateSHA256Signature(""TEST STRING""));
    // returns 55A891E416F480D5BE52B7985557B24A1028E4DAB79B64D0C5088F948EB3F52E
</code></pre>

<p>I tried to use node crypto as following:</p>

<pre><code> console.log(crypto.createHmac('sha256', 'E49756B4C8FAB4E48222A3E7F3B97CC3').update('TEST STRING', 'utf-8').digest('hex'))
// returns bc0a28c3f60d323404bca7dfc4261d1280ce46e887dc991beb2c5bf5e7ec6100
</code></pre>

<p>How can I get the same C# result in node?</p>
","<p>For Python ninjas</p>

<pre><code>import hmac
import hashlib
import binascii

def create_sha256_signature(key, message):
    byte_key = binascii.unhexlify(key)
    message = message.encode()
    return hmac.new(byte_key, message, hashlib.sha256).hexdigest().upper()
</code></pre>

<p><a href=""http://www.pyscoop.com/generate-hmac-sha256-signature-in-python/"" rel=""nofollow noreferrer"">http://www.pyscoop.com/generate-hmac-sha256-signature-in-python/</a></p>
","47201680","1139","<c#><node.js><sha256><hmac>","1","0","2","2017-12-30 18:01:09","40642240","0","","","","","2016-11-16 20:41:26","","2017-12-30 18:01:09","2017-11-09 12:18:33"
"16098665","hmac sha1 with salt and hash in coldfusion","<p>Now I am doing a penetration testing for my customer.
I have got the administrator's hash(SHA1) ,but i can't decrypt it on the internet, thus I can't access the <code>/CFIDE/administrator/index.cfm</code> </p>

<p>But he video here <a href=""http://www.youtube.com/watch?v=CzXLLZ8ohZU"" rel=""nofollow"">http://www.youtube.com/watch?v=CzXLLZ8ohZU</a>, the author generate a HMAC hash whit the hash found and the salt hidden in the page,and successfully login in the administrator page.</p>

<p>I tried to write a script to do the same thing, but failed. Here is the code:</p>

<pre><code>import hmac
import hashlib

digest_1 = hmac.new('salt here','SHA1 hash here',hashlib.sha1)

result =  digest_1.hexdigest()

print result.upper()
</code></pre>

<p>But I failed!
Does anybody can tell me how to generate a HMAC hash in coldfusion? Much Thanks!</p>
","<p>CF 10+:</p>

<pre><code>HMac(message, key [,algorithm] [,encoding])
</code></pre>

<p><a href=""http://help.adobe.com/en_US/ColdFusion/10.0/CFMLRef/WS932f2e4c7c04df8f744b691e1353e37d519-8000.html"" rel=""nofollow"">http://help.adobe.com/en_US/ColdFusion/10.0/CFMLRef/WS932f2e4c7c04df8f744b691e1353e37d519-8000.html</a></p>

<p>CF 9 or below:</p>

<p>Crypto.cfc - Crypto / Security Methods For ColdFusion</p>

<p><a href=""https://github.com/bennadel/Crypto.cfc"" rel=""nofollow"">https://github.com/bennadel/Crypto.cfc</a></p>
","16099537","1137","<coldfusion><sha1><hmac><penetration-testing>","0","1","1","2013-04-19 07:31:15","","1","","2164262","","2013-04-19 06:39:45","2013-04-19 06:36:27","","","2013-04-19 07:31:15"
"17445525","Hmac Sha256 incorrect result value AWS-Java","<pre><code>public static void main(String[] args) throws SignatureException {
    String data = ""GET""+""\n""+""webservices.amazon.com""+""\n""+""/onca/xml""+""\n""+""AWSAccessKeyId=AKIAIOSFODNN7EXAMPLE&amp;ItemId=0679722769&amp;Operation=ItemLookup&amp;ResponeGroup=ItemAttributes%2COffers%2CImages%2CReviews&amp;Service=AWSECommerceService&amp;Timestamp=2009-01-01T12%3A00%3A00Z&amp;Version=2009-01-06"";
    String key = ""1234567890"";
    String result = calculateRFC2104HMAC(data, key);
    System.out.println(result);

}

private static final String HMAC_SHA_ALGORITHM = ""HmacSHA256"";


public static String calculateRFC2104HMAC(String data, String key)throws java.security.SignatureException{
    String result;
    try {

    // get an hmac_sha256 key from the raw key bytes
    SecretKeySpec signingKey = new SecretKeySpec(key.getBytes(""UTF-8""), HMAC_SHA_ALGORITHM);

    // get an hmac_sha256 Mac instance and initialize with the signing key
    Mac mac = Mac.getInstance(HMAC_SHA_ALGORITHM);
    mac.init(signingKey);

    // compute the hmac256 on input data bytes
    byte[] rawHmac = mac.doFinal(data.getBytes(""UTF-8""));

    // base64-encode the hmac256
    result = Base64.encodeBase64String(rawHmac);

    } catch (Exception e) {
        throw new SignatureException(""Failed to generate HMAC : "" + e.getMessage());
    }
    return result;
    }
</code></pre>

<p>So I am trying to calculate this hmac with sha256 for AWS, but I do not get the excpected result, even though this example is taken from official AWS docs: <a href=""http://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/AuthJavaSampleHMACSignature.html"" rel=""nofollow"">http://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/AuthJavaSampleHMACSignature.html</a> And the only thing changed is the algorithm, which did not break the program, so it should work, but it does not.</p>

<p>The result I get: k1T/qvVoXgEvmdFhTEh71vLDznqEVCyKcslA5RRSB6s=
The result I expect: M/y0+EAFFGaUAp4bWv/WEuXYah99pVsxvqtAuC8YN7I=</p>

<p>Does anyone have any idea what is wrong?</p>
","<p>It may have to do with how the newline character is interpreted.  \n can be a cr, lf, or cr-lf depending on your OS.</p>
","18756163","1115","<java><amazon-web-services><hmac><sha256>","0","0","2","2015-06-12 00:27:07","","0","3","2485334","","2013-07-03 10:33:30","2013-07-03 10:25:11","","","2013-09-12 05:40:01"
"17445525","Hmac Sha256 incorrect result value AWS-Java","<pre><code>public static void main(String[] args) throws SignatureException {
    String data = ""GET""+""\n""+""webservices.amazon.com""+""\n""+""/onca/xml""+""\n""+""AWSAccessKeyId=AKIAIOSFODNN7EXAMPLE&amp;ItemId=0679722769&amp;Operation=ItemLookup&amp;ResponeGroup=ItemAttributes%2COffers%2CImages%2CReviews&amp;Service=AWSECommerceService&amp;Timestamp=2009-01-01T12%3A00%3A00Z&amp;Version=2009-01-06"";
    String key = ""1234567890"";
    String result = calculateRFC2104HMAC(data, key);
    System.out.println(result);

}

private static final String HMAC_SHA_ALGORITHM = ""HmacSHA256"";


public static String calculateRFC2104HMAC(String data, String key)throws java.security.SignatureException{
    String result;
    try {

    // get an hmac_sha256 key from the raw key bytes
    SecretKeySpec signingKey = new SecretKeySpec(key.getBytes(""UTF-8""), HMAC_SHA_ALGORITHM);

    // get an hmac_sha256 Mac instance and initialize with the signing key
    Mac mac = Mac.getInstance(HMAC_SHA_ALGORITHM);
    mac.init(signingKey);

    // compute the hmac256 on input data bytes
    byte[] rawHmac = mac.doFinal(data.getBytes(""UTF-8""));

    // base64-encode the hmac256
    result = Base64.encodeBase64String(rawHmac);

    } catch (Exception e) {
        throw new SignatureException(""Failed to generate HMAC : "" + e.getMessage());
    }
    return result;
    }
</code></pre>

<p>So I am trying to calculate this hmac with sha256 for AWS, but I do not get the excpected result, even though this example is taken from official AWS docs: <a href=""http://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/AuthJavaSampleHMACSignature.html"" rel=""nofollow"">http://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/AuthJavaSampleHMACSignature.html</a> And the only thing changed is the algorithm, which did not break the program, so it should work, but it does not.</p>

<p>The result I get: k1T/qvVoXgEvmdFhTEh71vLDznqEVCyKcslA5RRSB6s=
The result I expect: M/y0+EAFFGaUAp4bWv/WEuXYah99pVsxvqtAuC8YN7I=</p>

<p>Does anyone have any idea what is wrong?</p>
","<p>AWS uses to two different HMAC functions, the first returns the string representation, the other returns the binary representation. This is from my C++ implementation using OpenSSL, hope it helps:</p>

<pre><code>string hmacHex(string key, string msg)
{
    unsigned char hash[32];

    HMAC_CTX hmac;
    HMAC_CTX_init(&amp;hmac);
    HMAC_Init_ex(&amp;hmac, &amp;key[0], key.length(), EVP_sha256(), NULL);
    HMAC_Update(&amp;hmac, (unsigned char*)&amp;msg[0], msg.length());
    unsigned int len = 32;
    HMAC_Final(&amp;hmac, hash, &amp;len);
    HMAC_CTX_cleanup(&amp;hmac);

    std::stringstream ss;
    ss &lt;&lt; std::hex &lt;&lt; std::setfill('0');
    for (int i = 0; i &lt; len; i++)
    {   
        ss &lt;&lt; std::hex &lt;&lt; std::setw(2)  &lt;&lt; (unsigned int)hash[i];
    }

    return (ss.str());
}
</code></pre>

<p>the string implementation</p>

<pre><code>string hmac(string key, string msg)
{
    unsigned char hash[32];

    HMAC_CTX hmac;
    HMAC_CTX_init(&amp;hmac);
    HMAC_Init_ex(&amp;hmac, &amp;key[0], key.length(), EVP_sha256(), NULL);
    HMAC_Update(&amp;hmac, ( unsigned char* )&amp;msg[0], msg.length());
    unsigned int len = 32;
    HMAC_Final(&amp;hmac, hash, &amp;len);
    HMAC_CTX_cleanup(&amp;hmac);

    std::stringstream ss;
    ss &lt;&lt; std::setfill('0');
    for (int i = 0; i &lt; len; i++)
    {
        ss  &lt;&lt; hash[i];
    }

    return (ss.str());
}
</code></pre>

<p>If you are using Java, I'd recommend using the corresponding SDK. I my experience the API's tend to change rather quickly.</p>
","30792872","1115","<java><amazon-web-services><hmac><sha256>","0","0","2","2015-06-12 00:27:07","","0","3","2485334","","2013-07-03 10:33:30","2013-07-03 10:25:11","","2015-06-12 00:27:07","2015-06-11 23:02:07"
"35882476","creating HMAC in Nodejs with base64 encoded secret","<p>I'm trying to generate HMAC of a message. The algo for HMAC generation is SHA256. The issue is i have a base64 encoded key(shared secret). How can i decode this secret to get the required hmac</p>

<p>Sample code:</p>

<pre><code>var hmac = require('crypto').createHmac('SHA256', ""SOME_BASE64_ENCODED_SHARED_SECRET"").update(""MESSAGE"").digest('base64');
</code></pre>

<p>This hmac is sent to a java service. The way it does hmac generation is as follows:</p>

<pre><code>Mac mac = Mac.getInstance(""HmacSha256"");
SecretKey sharedKey = new SecretKeySpec(Base64.getDecoder().decode(""SOME_BASE64_ENCODED_SHARED_SECRET""), ""TlsPremasterSecret"");
mac.init(sharedKey);
byte[] messageBytes = ""MESSAGE"".getBytes(""UTF-8"");
byte[] expectedHmac = mac.doFinal(messageBytes);
String hmac = Base64.getEncoder().encodeToString(expectedHmac));
</code></pre>

<p>Now, the HMACs generated by my nodejs code does not match with Java service code. How do i solve this problem?</p>
","<p>The <code>base64</code>-encoded secret needs to be decoded before passing it to <code>crypto.createHmac()</code>:</p>

<pre><code>var secret = new Buffer('SOME_BASE64_ENCODED_SHARED_SECRET', 'base64');
var hmac = require('crypto').createHmac('SHA256', secret)
                            .update('MESSAGE')
                            .digest('base64');
</code></pre>
","35887436","1106","<java><node.js><sha256><hmac>","0","1","2","2019-07-14 06:03:01","","2","","","","","2016-03-09 03:44:50","","","2016-03-09 09:19:55"
"35882476","creating HMAC in Nodejs with base64 encoded secret","<p>I'm trying to generate HMAC of a message. The algo for HMAC generation is SHA256. The issue is i have a base64 encoded key(shared secret). How can i decode this secret to get the required hmac</p>

<p>Sample code:</p>

<pre><code>var hmac = require('crypto').createHmac('SHA256', ""SOME_BASE64_ENCODED_SHARED_SECRET"").update(""MESSAGE"").digest('base64');
</code></pre>

<p>This hmac is sent to a java service. The way it does hmac generation is as follows:</p>

<pre><code>Mac mac = Mac.getInstance(""HmacSha256"");
SecretKey sharedKey = new SecretKeySpec(Base64.getDecoder().decode(""SOME_BASE64_ENCODED_SHARED_SECRET""), ""TlsPremasterSecret"");
mac.init(sharedKey);
byte[] messageBytes = ""MESSAGE"".getBytes(""UTF-8"");
byte[] expectedHmac = mac.doFinal(messageBytes);
String hmac = Base64.getEncoder().encodeToString(expectedHmac));
</code></pre>

<p>Now, the HMACs generated by my nodejs code does not match with Java service code. How do i solve this problem?</p>
","<pre><code>//include crypto
var crypto = require('crypto');

var yourMessage = 'your signature to be hashed using HMAC SHA256';
var sharedSecret = 'your shared secret key';
//generate hmac sha256 hash
var hmacSignature = crypto.createHmac('SHA256', new Buffer(sharedSecret, 'base64')).update(yourMessage).digest('base64');
</code></pre>

<p>Above worked for me too. </p>

<p>Note: HMAC SHA256 is hash value, it cannot be decoded. Based on unique secret and unique message (generally date-time is used) a unique hash is created. Client sends this hash value and server generates its own hash value using same algorith, if both hash value match then authorization is successful.</p>

<p>I spent lot of time troubleshooting this. Hope above info help others.</p>
","57024969","1106","<java><node.js><sha256><hmac>","0","0","2","2019-07-14 06:03:01","","2","","","","","2016-03-09 03:44:50","","","2019-07-14 06:03:01"
"37788082","what is used of nonce and timestamp in HMAC authentication","<p>I am using HMAC authentication to secure API. I have read that nonce and timestamps can be used to prevent replay attack. </p>

<p>But my question is attacker can modified the nonce and timestamp to current time and resend the API call again then how HMAC will prevent replay attack??</p>

<p>Thanks,</p>
","","","1106","<api><security><hmac>","0","","0","2016-06-13 11:01:45","","7","","","","","2016-06-13 11:01:45","","",""
"32080879","Can't get HMAC Authentication working with API","<p>I'm trying to authenticate using HMAC with the <a href=""https://localbitcoins.com/api-docs/"" rel=""nofollow"">LocalBitcoins API</a>.</p>

<p>Here is the authentication written in Python:</p>

<pre><code>  message = str(nonce) + hmac_auth_key + relative_path + get_or_post_params_urlencoded
  signature = hmac.new(hmac_auth_secret, msg=message, digestmod=hashlib.sha256).hexdigest().upper()
</code></pre>

<p>And the parameters to create the HMAC message:</p>

<pre><code>Nonce. A 63 bit positive integer, for example unix timestamp as milliseconds.

HMAC authentication key. This is the first one of a key/secret pair.

Relative path, for example /api/wallet/.

GET or POST parameters in their URL encoded format, for example foo=bar&amp;baz=quux.
</code></pre>

<p>Here is how I am building the HMAC:</p>

<pre><code>var milliseconds = (new Date).getTime();
var key = config.key;
var secret = config.secret;
var nonce = milliseconds.toString()


var message = nonce + key + 'api/myself';

var hmac_digest = crypto.createHmac(""sha256"", secret).update(message).digest('hex').toUpperCase();
</code></pre>

<p>The signature is sent via 3 HTTP Headers. The options for the call to the api/myself method looks like such (using request):</p>

<pre><code>{ url: 'https://localbitcoins.com/api/myself',
  method: 'GET',
  headers:
   { 'Apiauth-Key': 'my api key',
     'Apiauth-Nonce': 1439925212276,
     'Apiauth-Signature': 'the created signature' },
  timeout: 5000 }
</code></pre>

<p>And the request:</p>

<pre><code>var req = request.get(options, function(error, response, body) {
    console.log(body);
});
</code></pre>

<p>But everytime I get the following error message:</p>

<pre><code>{ error:
   { message: 'HMAC authentication key and signature was given, but they are invalid.',
     error_code: 41 } }
</code></pre>

<p>I've tried lots of different combinations in testing but can't get anything to work. What am I missing?</p>
","<p>I think that <code>(new Date).getTime();</code> is not creating a 63 bit integer.  Per Dr. Axel's <a href=""http://www.2ality.com/2014/02/time-values.html"" rel=""nofollow"">post</a>.  JavaScript has 53 bit integers plus a sign.</p>
","32080997","1105","<node.js><hmac>","3","0","2","2015-08-25 22:39:46","","2","","","","","2015-08-18 19:16:54","","2015-08-18 19:27:14","2015-08-18 19:24:04"
"32080879","Can't get HMAC Authentication working with API","<p>I'm trying to authenticate using HMAC with the <a href=""https://localbitcoins.com/api-docs/"" rel=""nofollow"">LocalBitcoins API</a>.</p>

<p>Here is the authentication written in Python:</p>

<pre><code>  message = str(nonce) + hmac_auth_key + relative_path + get_or_post_params_urlencoded
  signature = hmac.new(hmac_auth_secret, msg=message, digestmod=hashlib.sha256).hexdigest().upper()
</code></pre>

<p>And the parameters to create the HMAC message:</p>

<pre><code>Nonce. A 63 bit positive integer, for example unix timestamp as milliseconds.

HMAC authentication key. This is the first one of a key/secret pair.

Relative path, for example /api/wallet/.

GET or POST parameters in their URL encoded format, for example foo=bar&amp;baz=quux.
</code></pre>

<p>Here is how I am building the HMAC:</p>

<pre><code>var milliseconds = (new Date).getTime();
var key = config.key;
var secret = config.secret;
var nonce = milliseconds.toString()


var message = nonce + key + 'api/myself';

var hmac_digest = crypto.createHmac(""sha256"", secret).update(message).digest('hex').toUpperCase();
</code></pre>

<p>The signature is sent via 3 HTTP Headers. The options for the call to the api/myself method looks like such (using request):</p>

<pre><code>{ url: 'https://localbitcoins.com/api/myself',
  method: 'GET',
  headers:
   { 'Apiauth-Key': 'my api key',
     'Apiauth-Nonce': 1439925212276,
     'Apiauth-Signature': 'the created signature' },
  timeout: 5000 }
</code></pre>

<p>And the request:</p>

<pre><code>var req = request.get(options, function(error, response, body) {
    console.log(body);
});
</code></pre>

<p>But everytime I get the following error message:</p>

<pre><code>{ error:
   { message: 'HMAC authentication key and signature was given, but they are invalid.',
     error_code: 41 } }
</code></pre>

<p>I've tried lots of different combinations in testing but can't get anything to work. What am I missing?</p>
","<p>It turns out that my path was wrong.</p>

<p><code>/path</code> needed to be <code>/path/</code>, which I found out through working with a working Python implementation.</p>

<p>The package is up and running now here: <a href=""https://github.com/mrmayfield/localbitcoins-node"" rel=""nofollow"">https://github.com/mrmayfield/localbitcoins-node</a></p>
","32215261","1105","<node.js><hmac>","3","2","2","2015-08-25 22:39:46","","2","","","","","2015-08-18 19:16:54","","","2015-08-25 22:39:46"
"28845692","Using HMAC with SHA-1","<p>I am attempting to implement HMAC using SHA-1 as the base. Using SHA-1 algorithm from bouncy castle, and implement the HMAC computation. Also to use SHA-1 to hash the input password to get the key for the HMAC algorithm.  I've been trying to do this for a few hours but I really have a poor understanding of HMAC.  If anyone has any tips on how to do this it would be appreciated.  My code below is my implementation of SHA1, via a library function call,  I'm essentially just trying to implement it with HMAC.</p>

<pre><code>public class HMACSHA1 {
static byte[] password;
static byte[] fileName = null;
static byte[] input = new byte[16];
static String File;
public static void main(String[] args) {
    Security.addProvider(Security.getProvider(""BC"")); 
    if(args.length != 2){
        System.out.println(""Invalid input"");
        System.exit(-1);
    }
    File = args[1];
    try {
        password = args[0].getBytes(""UTF-8"");
    } catch (UnsupportedEncodingException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
        System.out.println(""Unable to read password"");
        System.exit(-1);
    }
    InputStream inputstream = null;
    try {
             inputstream = new FileInputStream(File);
    } catch (FileNotFoundException e2) {
        e2.printStackTrace();
        System.out.println(""No input found\n"");
        System.exit(-1);
    }

    MessageDigest hash = null;
    MessageDigest key = null;
    try {
        hash = MessageDigest.getInstance(""SHA-1"", ""BC"");
        key = MessageDigest.getInstance(""SHA-1"", ""BC"");
    } catch (NoSuchAlgorithmException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
    } catch (NoSuchProviderException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
    }
    key.update(password);
    byte[] HMACKey = key.digest();
    byte[] digest = null;
    int reader = 0;
    while (reader != -1){
        try {
            reader = inputstream.read(input);
        } catch (IOException e2) {
            e2.printStackTrace();
        }
        hash.update(input);
        digest = hash.digest();
        System.out.println(new String(Hex.encode(digest)));
    }

}
}
</code></pre>
","<p>I am not familiar with Bouncy Castle, but you can work out the HMAC-SHA1 without external libraries using only what is provided with Java SE:</p>

<pre><code>import java.security.NoSuchAlgorithmException;
import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;

public String getHmacSha1(byte[] key, byte[] input) throws NoSuchAlgorithmException {
    SecretKeySpec signingKey = new SecretKeySpec(key, ""HmacSHA1"");

    Mac mac = null;
    mac = Mac.getInstance(""HmacSHA1"");
    mac.init(signingKey);
    byte[] digest = mac.doFinal(input);

    return Hex.encodeHexString(digest);
}
</code></pre>

<p>This is available since Java 1.4 according to the <a href=""http://docs.oracle.com/javase/7/docs/api/javax/crypto/Mac.html"" rel=""nofollow"">API</a>.</p>
","29602351","1098","<java><bouncycastle><sha1><hmac><hmacsha1>","0","0","1","2015-04-13 09:47:27","","1","2","4088557","","2015-03-04 18:20:38","2015-03-04 02:29:16","","","2015-04-13 09:47:27"
"8773417","Problems with reproducing the same HMAC MD5 on Java and C","<p>I am currently stumped on recreating an HMAC MD5 hash generated by a Java program on C. Any help, suggestions, correction and recommendation would be greatly appreciated.
The Java program creates the HMAC MD5 string (encoded to a base 16 HEX string which is 32 characters long) using UTF16LE and MAC; what I need is to recreate the same result on C program.</p>

<p>I am using the RSA source for MD5 and the HMAC-MD5 code is from RFC 2104 (http://www.koders.com/c/fidBA892645B9DFAD21A2B5ED526824968A1204C781.aspx)</p>

<p>I have ""simulated"" UTF16LE on the C implementation by padding every even byte with 0s. The Hex/Int representation seem to be consistent on both ends when I do this; but is this the correct way to do this? I figured this would be the best way because the HMAC-MD5 function call only allows for a byte array (no such thing as a double byte array call in the RFC2104 implementation but that's irrelevant).</p>

<p>When I run the string to be HMAC'd through - you naturally get ""garbage"". Now my problem is that not even the ""garbage"" is consistent across the systems (excluding the fact that perhaps the base 16 encoding could be inconsistent). What I mean by this is ""�����ԙ���,"" might be the result from Java HMAC-MD5 but C might give ""v ����?��!��{�  "" (Just an example, not actual data).</p>

<p>I have 2 things I would like to confirm:</p>

<ol>
<li>Did padding every even byte with 0 mess up the HMAC-MD5 algorithms? (either because it would come across a null immediately after the first byte or whatever)</li>
<li>Is the fact that I see different ""garbage"" because C and Java are using different character encodings? (same machine running Ubuntu)</li>
</ol>

<p>I am going to read through the HMAC-MD5 and MD5 code to see how they treat the byte array going in (whether or not the null even bytes is causing a problem). I am also having a hard time writing a proper encoding function on the C side to convert the resultant string into a 32 character hex string. Any input/help would be greatly appreciated. </p>

<p>Update (Feb 3rd): Would passing signed/unsigned byte array alter the output of HMAC-MD5? The Java implementation takes a byte array (which is SIGNED); but the C implementation takes an UNSIGNED byte array. I think this might also be a factor in producing different results. If this does affect the final output; what can I really do? Would I pass a SIGNED byte array in C (the method takes an unsigned byte array) or would I cast the SIGNED byte array as unsigned?</p>

<p>Thanks!
Clement</p>
","<p>The problem is probably due to your naive creation of the UTF-16 string.   Any character greater than 0x7F (<a href=""http://en.wikipedia.org/wiki/UTF-16"" rel=""nofollow"">see unicode explanation</a>) needs to be expanded into the UTF encoding scheme.</p>

<p>I would work on first getting the same byte string between the C and Java implementation as that is probably where your problem lies -- so I would agree with your assumption (1)</p>

<p>Have you tried to calculate the MD5 without padding the C-string, but rather just converting it to UTF -- you can use iconv to make experiments with the encoding.</p>
","8773988","1096","<java><c><character-encoding><md5><hmac>","1","0","2","2012-02-21 21:54:45","9385808","0","1","1092440","","2012-02-03 18:00:40","2012-01-07 21:54:34","","","2012-01-07 23:26:11"
"8773417","Problems with reproducing the same HMAC MD5 on Java and C","<p>I am currently stumped on recreating an HMAC MD5 hash generated by a Java program on C. Any help, suggestions, correction and recommendation would be greatly appreciated.
The Java program creates the HMAC MD5 string (encoded to a base 16 HEX string which is 32 characters long) using UTF16LE and MAC; what I need is to recreate the same result on C program.</p>

<p>I am using the RSA source for MD5 and the HMAC-MD5 code is from RFC 2104 (http://www.koders.com/c/fidBA892645B9DFAD21A2B5ED526824968A1204C781.aspx)</p>

<p>I have ""simulated"" UTF16LE on the C implementation by padding every even byte with 0s. The Hex/Int representation seem to be consistent on both ends when I do this; but is this the correct way to do this? I figured this would be the best way because the HMAC-MD5 function call only allows for a byte array (no such thing as a double byte array call in the RFC2104 implementation but that's irrelevant).</p>

<p>When I run the string to be HMAC'd through - you naturally get ""garbage"". Now my problem is that not even the ""garbage"" is consistent across the systems (excluding the fact that perhaps the base 16 encoding could be inconsistent). What I mean by this is ""�����ԙ���,"" might be the result from Java HMAC-MD5 but C might give ""v ����?��!��{�  "" (Just an example, not actual data).</p>

<p>I have 2 things I would like to confirm:</p>

<ol>
<li>Did padding every even byte with 0 mess up the HMAC-MD5 algorithms? (either because it would come across a null immediately after the first byte or whatever)</li>
<li>Is the fact that I see different ""garbage"" because C and Java are using different character encodings? (same machine running Ubuntu)</li>
</ol>

<p>I am going to read through the HMAC-MD5 and MD5 code to see how they treat the byte array going in (whether or not the null even bytes is causing a problem). I am also having a hard time writing a proper encoding function on the C side to convert the resultant string into a 32 character hex string. Any input/help would be greatly appreciated. </p>

<p>Update (Feb 3rd): Would passing signed/unsigned byte array alter the output of HMAC-MD5? The Java implementation takes a byte array (which is SIGNED); but the C implementation takes an UNSIGNED byte array. I think this might also be a factor in producing different results. If this does affect the final output; what can I really do? Would I pass a SIGNED byte array in C (the method takes an unsigned byte array) or would I cast the SIGNED byte array as unsigned?</p>

<p>Thanks!
Clement</p>
","<p>The problem was that I used the RSA implementation. After I switched to OpenSSL all my problems were resolved. RSA implementation did not take into consideration all the necessary details of cross platform support (including 32bit/64bit processors).</p>

<p>Always use OpenSSL because they have already resolved all the cross platform issues.</p>
","9385808","1096","<java><c><character-encoding><md5><hmac>","1","0","2","2012-02-21 21:54:45","9385808","0","1","1092440","","2012-02-03 18:00:40","2012-01-07 21:54:34","","","2012-02-21 21:54:45"
"23820128","Is this API signed request methodology secure?","<p>I'm working on authentication for my <code>JSON-RPC API</code> and my current working strategy is using signed requests sent via <code>POST</code> over <code>SSL</code>.</p>

<p>I'm wondering if anyone can see any vulnerabilities that I haven't taken into consideration with the following signature method.</p>

<p>All communication between the client and the server is done via <code>POST</code> requests sent over <code>SSL</code>. Insecure <code>http</code> requests are denied outright by the API server.</p>

<p><strong>Dependencies</strong></p>

<pre><code>var uuid = require('node-uuid');
var crypto = require('crypto');
var moment = require('moment');
var MyAPI = require('request-json').newClient('https://api.myappdomain.com');
</code></pre>

<p>Dependency Links: <a href=""https://www.npmjs.org/package/node-uuid"" rel=""nofollow"">node-uuid</a>, <a href=""https://www.npmjs.org/package/crypto"" rel=""nofollow"">crypto</a>, <a href=""https://www.npmjs.org/package/moment"" rel=""nofollow"">moment</a>, <a href=""https://www.npmjs.org/package/request-json"" rel=""nofollow"">request-json</a></p>

<p><strong>Vars</strong></p>

<pre><code>var apiVersion = '1.0';
var publicKey = 'MY_PUBLIC_KEY_UUID';
var secretKey = 'MY_SECRET_KEY_UUID';
</code></pre>

<p><strong>Request Object</strong></p>

<pre><code>var request = {
    requestID : uuid.v4(),
    apiVersion : apiVersion,
    nonce : uuid.v4(),
    timestamp : moment.utc( new Date() ),
    params : params
}
</code></pre>

<p><strong>Signature</strong></p>

<pre><code>var signature = crypto.createHmac('sha512',secretKey).update(JSON.stringify(request)).digest('hex');
</code></pre>

<p><strong>Payload Packaging</strong> (Sent as cleartext via <code>POST</code> over <code>SSL</code>)</p>

<pre><code>var payload = {
    request: request,
    publicKey : publicKey,
    signature : signature
}
</code></pre>

<p><strong>Resultant Payload JSON Document</strong></p>

<pre><code>{
  ""request"" : {
    ""requestID"" : ""687de6b4-bb02-4d2c-8d3a-adeacd2d183e"",
    ""apiVersion"" : ""1.0"",
    ""nonce"" : ""eb7e4171-9e23-408a-aa2b-cd437a78af22"",
    ""timestamp"" : ""2014-05-23T01:36:52.225Z"",
    ""params"" : {
      ""class"" : ""User""
      ""method"" : ""getProfile"",
      ""data"" : {
        ""id"" : ""SOME_USER_ID""
      }
    }
  },
  ""publicKey"" : ""PUBLIC_KEY"",
  ""signature"" : ""7e0a06b560220c24f8eefda1fda792e428abb0057998d5925cf77563a20ec7b645dacdf96da3fc57e1918950719a7da70a042b44eb27eabc889adef95ea994d1"",
}
</code></pre>

<p><strong>POST Request</strong></p>

<pre><code>MyAPI.post('/', payload, function(response){
    /// Handle any errors ...
    /// Do something with the result ...
    /// Inspect the request you sent ...
});
</code></pre>

<p><strong>Server-Side</strong></p>

<p>And then on the server-side the following occurs to authenticate the request:</p>

<ol>
<li><code>PUBLIC_KEY</code> is used to lookup the <code>SECRET_KEY</code> in the DB.</li>
<li><code>SECRET_KEY</code> is used to create an HMAC of the <code>request</code> object from the payload.</li>
<li>The <code>signature</code> hash sent in the payload is compared to the hash of the <code>request</code> object  created on the server. If they match, we move on to authenticating the <code>timestamp</code>.</li>
<li>Given that we can now trust the <code>timestamp</code> sent in the cleartext <code>request</code> object since it was included in the <code>signature</code> hash sent from the client, the <code>timestamp</code> is evaluated and the authentication is rejected if the request is too old. Otherwise, the request is authenticated.</li>
</ol>

<p>So far as I understand, this is a secure method for signing and authentication requests sent over <code>SSL</code>. Is this correct?</p>

<p>Thanks in advance for any help.</p>

<p><strong>Update on JSON Property Order</strong></p>

<blockquote>
  <p>The order of properties when using <code>JSON.stringify</code> is essentially random, which could cause signature mis-matches.</p>
</blockquote>

<p>Using this signing process over the past few weeks I haven't run into any hash mis-match issues due to the order of the properties in the JSON <code>request</code> object. I believe it's because I only stringify the <code>request</code> object literal once, right before the client-side hash is calculated. Then, the <code>request</code> object is in JSON format as part of the <code>payload</code>. Once received by the server, the hash is created directly from the JSON object received in the payload, there's no second <code>JSON.stringify</code> method invoked, so the signature always matches because the order of the properties is determined once, by the client. I'll keep looking into this though as it seems like a weak point, if not a security concern.</p>
","<p><code>JSON.stringify</code> does not guarantee order of properties. For example, object</p>

<pre><code>{
  a: 1,
  b: 2
}
</code></pre>

<p>could be serialized in two ways: <code>{""a"":1,""b"":2}</code> or <code>{""b"":2,""a"":1}</code>. They are the same from JSON point of view but they will result it different HMACs.</p>

<p>Imaging, that for signings your <code>JSON.stringify</code> produced first form, but for checking signature second one. Your signature check will fail although signature was valid.</p>
","23887073","1089","<node.js><api><digital-signature><hmac>","4","3","2","2015-03-12 16:34:19","","3","4","361037","","2014-06-14 22:25:59","2014-05-23 02:37:18","","","2014-05-27 10:29:01"
"23820128","Is this API signed request methodology secure?","<p>I'm working on authentication for my <code>JSON-RPC API</code> and my current working strategy is using signed requests sent via <code>POST</code> over <code>SSL</code>.</p>

<p>I'm wondering if anyone can see any vulnerabilities that I haven't taken into consideration with the following signature method.</p>

<p>All communication between the client and the server is done via <code>POST</code> requests sent over <code>SSL</code>. Insecure <code>http</code> requests are denied outright by the API server.</p>

<p><strong>Dependencies</strong></p>

<pre><code>var uuid = require('node-uuid');
var crypto = require('crypto');
var moment = require('moment');
var MyAPI = require('request-json').newClient('https://api.myappdomain.com');
</code></pre>

<p>Dependency Links: <a href=""https://www.npmjs.org/package/node-uuid"" rel=""nofollow"">node-uuid</a>, <a href=""https://www.npmjs.org/package/crypto"" rel=""nofollow"">crypto</a>, <a href=""https://www.npmjs.org/package/moment"" rel=""nofollow"">moment</a>, <a href=""https://www.npmjs.org/package/request-json"" rel=""nofollow"">request-json</a></p>

<p><strong>Vars</strong></p>

<pre><code>var apiVersion = '1.0';
var publicKey = 'MY_PUBLIC_KEY_UUID';
var secretKey = 'MY_SECRET_KEY_UUID';
</code></pre>

<p><strong>Request Object</strong></p>

<pre><code>var request = {
    requestID : uuid.v4(),
    apiVersion : apiVersion,
    nonce : uuid.v4(),
    timestamp : moment.utc( new Date() ),
    params : params
}
</code></pre>

<p><strong>Signature</strong></p>

<pre><code>var signature = crypto.createHmac('sha512',secretKey).update(JSON.stringify(request)).digest('hex');
</code></pre>

<p><strong>Payload Packaging</strong> (Sent as cleartext via <code>POST</code> over <code>SSL</code>)</p>

<pre><code>var payload = {
    request: request,
    publicKey : publicKey,
    signature : signature
}
</code></pre>

<p><strong>Resultant Payload JSON Document</strong></p>

<pre><code>{
  ""request"" : {
    ""requestID"" : ""687de6b4-bb02-4d2c-8d3a-adeacd2d183e"",
    ""apiVersion"" : ""1.0"",
    ""nonce"" : ""eb7e4171-9e23-408a-aa2b-cd437a78af22"",
    ""timestamp"" : ""2014-05-23T01:36:52.225Z"",
    ""params"" : {
      ""class"" : ""User""
      ""method"" : ""getProfile"",
      ""data"" : {
        ""id"" : ""SOME_USER_ID""
      }
    }
  },
  ""publicKey"" : ""PUBLIC_KEY"",
  ""signature"" : ""7e0a06b560220c24f8eefda1fda792e428abb0057998d5925cf77563a20ec7b645dacdf96da3fc57e1918950719a7da70a042b44eb27eabc889adef95ea994d1"",
}
</code></pre>

<p><strong>POST Request</strong></p>

<pre><code>MyAPI.post('/', payload, function(response){
    /// Handle any errors ...
    /// Do something with the result ...
    /// Inspect the request you sent ...
});
</code></pre>

<p><strong>Server-Side</strong></p>

<p>And then on the server-side the following occurs to authenticate the request:</p>

<ol>
<li><code>PUBLIC_KEY</code> is used to lookup the <code>SECRET_KEY</code> in the DB.</li>
<li><code>SECRET_KEY</code> is used to create an HMAC of the <code>request</code> object from the payload.</li>
<li>The <code>signature</code> hash sent in the payload is compared to the hash of the <code>request</code> object  created on the server. If they match, we move on to authenticating the <code>timestamp</code>.</li>
<li>Given that we can now trust the <code>timestamp</code> sent in the cleartext <code>request</code> object since it was included in the <code>signature</code> hash sent from the client, the <code>timestamp</code> is evaluated and the authentication is rejected if the request is too old. Otherwise, the request is authenticated.</li>
</ol>

<p>So far as I understand, this is a secure method for signing and authentication requests sent over <code>SSL</code>. Is this correct?</p>

<p>Thanks in advance for any help.</p>

<p><strong>Update on JSON Property Order</strong></p>

<blockquote>
  <p>The order of properties when using <code>JSON.stringify</code> is essentially random, which could cause signature mis-matches.</p>
</blockquote>

<p>Using this signing process over the past few weeks I haven't run into any hash mis-match issues due to the order of the properties in the JSON <code>request</code> object. I believe it's because I only stringify the <code>request</code> object literal once, right before the client-side hash is calculated. Then, the <code>request</code> object is in JSON format as part of the <code>payload</code>. Once received by the server, the hash is created directly from the JSON object received in the payload, there's no second <code>JSON.stringify</code> method invoked, so the signature always matches because the order of the properties is determined once, by the client. I'll keep looking into this though as it seems like a weak point, if not a security concern.</p>
","<p>The only fishy thing I see here would be the JSON.stringify as posted in other comments, but you can use: </p>

<p><a href=""https://www.npmjs.com/package/json-stable-stringify"" rel=""nofollow"">https://www.npmjs.com/package/json-stable-stringify</a></p>

<p>That way you can have a deterministic hash for you signs.</p>
","29015335","1089","<node.js><api><digital-signature><hmac>","4","2","2","2015-03-12 16:34:19","","3","4","361037","","2014-06-14 22:25:59","2014-05-23 02:37:18","","","2015-03-12 16:34:19"
"18105285","HMAC in client side JavaScript and identity spoofing","<p>CryptoJS has functions to create HMAC from a message and the secret key.</p>

<p>How can this be secure considering that the secret key must be stored in plain sight in the JavaScript source deployed on the client ?</p>

<p>Anyone can take the key and issue similar requests to the server under the identity of the original client of the API. Isn't ""identity"" the problem that HMAC is supposed to solve ?</p>

<p>All in all, I do not understand the purpose of HMAC in client side JS since the key can't be kept secret. </p>

<p>Is there a use case to computing HMAC in JavaScript ?</p>
","<p>JavaScript now has WebRTC where two clients can communicate peer-to-peer, this would be a scenario where clients can generate and use their own ""secret"".</p>

<p>There are some cases where client -> server could be usable as well. If your server was ""dynamically"" serving the JavaScript then it could insert a ""secret"" based on the clients current session/login. Assuming you are using HTTPS (if not there could be a man in the middle slurping up the ""secret"") then it's not unreasonable to assume that communication to the server signed with that specific ""secret"" (even over unsecured HTTP) belongs to only that client.</p>
","18105421","1087","<javascript><hmac><cryptojs>","2","4","2","2015-05-31 17:41:09","18105421","0","","867395","","2013-08-08 07:37:13","2013-08-07 13:52:44","","2013-08-07 14:04:01","2013-08-07 13:57:54"
"18105285","HMAC in client side JavaScript and identity spoofing","<p>CryptoJS has functions to create HMAC from a message and the secret key.</p>

<p>How can this be secure considering that the secret key must be stored in plain sight in the JavaScript source deployed on the client ?</p>

<p>Anyone can take the key and issue similar requests to the server under the identity of the original client of the API. Isn't ""identity"" the problem that HMAC is supposed to solve ?</p>

<p>All in all, I do not understand the purpose of HMAC in client side JS since the key can't be kept secret. </p>

<p>Is there a use case to computing HMAC in JavaScript ?</p>
","<blockquote>
  <p>How can this be secure considering that the secret key must be stored in plain sight in the JavaScript source deployed on the client ?</p>
</blockquote>

<p>Each client should get their own key/secret which enables them access to the resources they are supposed to have access to.  This is effectively no different than a user knowing their own username and password.  Their user/pass combo only allows access to the resources they need.  The same should go for the key pair.</p>

<blockquote>
  <p>Anyone can take the key and issue similar requests to the server under the identity of the original client of the API. Isn't ""identity"" the problem that HMAC is supposed to solve ?</p>
</blockquote>

<p>Yes, of course if someone gets your key and secret they can issue requests as if they came from you.  Simply don't give out your secret to others.  Having it in JavaScript doesn't matter at all.  Sure, the user can see it but unless they take that key and secret and put it somewhere else, it isn't a problem.</p>

<p>I have a system where a user logs in through normal means (username/password, OAuth, OpenID, etc.) and is immediately issued a key/secret for making API calls.  The client-side application uses this key/secret to actually do its work.  The issuance of this key/secret is done over HTTPS.  I wanted to use HMAC for my API since I wanted the user to be able to pre-sign requests to be used in the open.  This method enables me to keep HMAC for the usual administrative GUI as well.</p>
","30560548","1087","<javascript><hmac><cryptojs>","2","1","2","2015-05-31 17:41:09","18105421","0","","867395","","2013-08-08 07:37:13","2013-08-07 13:52:44","","","2015-05-31 17:41:09"
"30464720","API Authentication using HMAC","<p>I am looking for a decent method of authentication to use when writing a simple API for use within our internal systems. Other questions on Stack Overflow have suggested HMAC along with links to tutorials, which I went ahead and decided to implement.</p>

<p>After setting this up, I realized I am not exactly sure how significant this is for actual authentication. The tutorial used <a href=""http://websec.io/2013/02/14/API-Authentication-Public-Private-Hashes.html"" rel=""nofollow"">Here</a> lists a public hash on the client which is never used in the server side code. It just hashes the content and privateHash values together and compares them on the server. As this is all being passed through the headers, I am wondering how secure this actually is? What is the publicHash value for as it does not even seem to be used?</p>

<p>Client:</p>

<pre><code>&lt;?php

$publicHash = '3441df0babc2a2dda551d7cd39fb235bc4e09cd1e4556bf261bb49188f548348';
$privateHash = 'e249c439ed7697df2a4b045d97d4b9b7e1854c3ff8dd668c779013653913572e';

$content = json_encode( array( 'test' =&gt; 'content' ) );

$hash = hash_hmac('sha256', $content, $privateHash);

$headers = array(
    'X-Public: '.$publicHash,
    'X-Hash: '.$hash
);

$ch = curl_init('http://domain.com/api2/core/device/auth');
curl_setopt($ch,CURLOPT_HTTPHEADER,$headers);
curl_setopt($ch,CURLOPT_RETURNTRANSFER,true);
curl_setopt($ch,CURLOPT_POSTFIELDS,$content);

$result = curl_exec($ch);
curl_close($ch);

echo ""RESULT\n======\n"".print_r($result, true).""\n\n"";

?&gt;
</code></pre>

<p>Server</p>

<pre><code>function auth()
{
    $app = \Slim\Slim::getInstance();

    $request = $app-&gt;request();
    $publicHash = $request-&gt;headers('X-Public');
    $contentHash = $request-&gt;headers('X-Hash');
    $privateHash = 'e249c439ed7697df2a4b045d97d4b9b7e1854c3ff8dd668c779013653913572e';
    $content = $request-&gt;getBody();

    $hash = hash_hmac('sha256', $content, $privateHash);

    if ($hash == $combinedHash)
    {
        $data = array('status' =&gt; ""success"");
        response($data);
    }
    else
    {
        $data = array('status' =&gt; ""failed"");
        response($data);
    }
}
</code></pre>
","<p>I think the article you posted uses the term <code>hash</code> in confusing way. In the article <code>$publicHash</code> is an username and <code>$privateHash</code> is secret key used to sign the payload. </p>

<p>In other words, like the article says the value of <code>X-Public</code> header is supposed to be used for querying the user specific secret key from database. This secret key is then used to to create an hash from the payload. This hash is then compared to value of <code>X-Hash</code> header.</p>

<p>If the values match then you can be sure the payload has not been tampered and/or the sender of the payload knows the secret key.</p>

<p>This approach is not stateless. It requires you to hit database for each request to find out the secret key for current user. It is also bit problematic if your client is untrusted (ie. JavaScript enabled browser). Works well for machine to machine communication though.</p>

<h2>Alternative</h2>

<p>You might want to check article called <a href=""https://auth0.com/blog/2014/12/02/using-json-web-tokens-as-api-keys/"" rel=""nofollow"">Using JSON Web Tokens as API Keys</a>. JSON Web Tokens provide stateless solution. They are also tamper proof because tokens are signed / hashed with HMAC.</p>
","30467921","1086","<authentication><hash><oauth-2.0><slim><hmac>","0","0","1","2015-05-26 20:06:50","30467921","0","","","user470760","2015-05-26 17:33:31","2015-05-26 17:02:24","","","2015-05-26 20:06:50"
"25492833","What key is used by openssl (command) for HMAC if key is not passed in as argument","<p>I am writing a program using Java to generate HMAC for given String using javax.crypto.Mac.</p>

<p>But in order to troubleshoot and experiment, I use openssl dgst to generate HAMC (using SHA256). I have observed that the command successfully executes even if the key is not passed. For example,</p>

<p>standard way of generating HMAC using openssl on shell,</p>

<pre><code>echo -n ""data"" | opnessl dgst -sha256 -hmac ""KEY1""
</code></pre>

<p>However I can execute following as well,</p>

<pre><code>echo -n ""data"" | opnessl dgst -sha256 -hmac
</code></pre>

<p>and both commands run successfully with different output.</p>

<p>I assume the non-existence of key can be perceived by openssl as '\0' (null) key.</p>

<p>Actually my problem is I am unable to generate similar results using javax.crypto.Mac and providing SecretKey with byte[0] = 0; (single byte key having 0 as value).</p>
","<p><strong>EDIT</strong>: According to Rich Salz on the OpenSSSL mailing list, the key is <em>not</em> optional with the <code>-hmac</code> option. Expect the behavior of the <code>openssl dgst</code> command to change in the future.</p>

<p>The change will probably occur with OpenSSL 1.0.2 or 1.1.0. It may be back ported to lesser version like 1.0.1, but there are no guarantees.</p>

<hr>

<blockquote>
  <p>Actually my problem is I am unable to generate similar results using javax.crypto.Mac and providing SecretKey with byte[0] = 0;</p>
</blockquote>

<p>Just use a SHA-256 hash, and not an HMAC. If this is TLDR; then jump to the end ;)</p>

<p>The source file of interest is <code>&lt;openssl src&gt;/apps/dgst.c</code>. Line 225 is where the key is (or should be) set, but its not because there's no following argument:</p>

<pre><code>else if (!strcmp(*argv,""-hmac""))
{
    if (--argc &lt; 1)
        break;
    hmac_key=*++argv;
}
</code></pre>

<hr>

<blockquote>
  <p>What key is used by openssl (command) for HMAC if key is not passed in as argument</p>
</blockquote>

<p>To answer this question, we need to look at the source in <code>&lt;openssl src&gt;/apps/dgst.c</code>.</p>

<p>The <code>-hamc</code> switch populates variable <code>hmac_key</code>, but its <code>NULL</code> so its skipped. The other variable of interest is <code>sigkey</code>, buts its also <code>NULL</code> so its skipped, too.</p>

<p>Line 513 or so is where things get interesting. Nearly everything else is skipped in <code>dgst.c</code> (from under <code>lldb</code>):</p>

<pre><code>   513      if (argc == 0)
   514      {
-&gt; 515          BIO_set_fp(in,stdin,BIO_NOCLOSE);
   516          err=do_fp(out, buf,inp,separator, out_bin, sigkey, sigbuf,
   517                    siglen,NULL,NULL,""stdin"",bmd);
   518      }
(lldb) p sigkey
(EVP_PKEY *) $25 = 0x0000000000000000
</code></pre>

<p>So all we need to do is look at <code>do_fp</code>, and its shown below. The line of interest is 627, where this is executed:</p>

<pre><code>len=BIO_gets(bp,(char *)buf,BUFSIZE);
</code></pre>

<p>The <code>BIO bp</code> is a chain, and its got your hash chained to it. So whatever you put into it gets hashed. And the hash is not keyed because <code>hmac_key</code> and <code>sigkey</code> were <code>NULL</code>.</p>

<p>At line 654, this is encountered:</p>

<pre><code>BIO_printf(out, ""(%s)= "", file);
</code></pre>

<p>At lines 655 - 660, the loop that performs hex encoding is encountered.</p>

<p>Combined, they produce something like:</p>

<pre><code>(stdin)= 6667b2d1aab6a00caa5aee5af8ad9f1465e567abf1c209d15727d57b3e8f6e5f
</code></pre>

<hr>

<pre><code>int do_fp(BIO *out, unsigned char *buf, BIO *bp, int sep, int binout,
          EVP_PKEY *key, unsigned char *sigin, int siglen,
          const char *sig_name, const char *md_name,
          const char *file,BIO *bmd)
{
    size_t len;
    int i;

    for (;;)
    {
        i=BIO_read(bp,(char *)buf,BUFSIZE);
        if(i &lt; 0)
        {
            BIO_printf(bio_err, ""Read Error in %s\n"",file);
            ERR_print_errors(bio_err);
            return 1;
        }
        if (i == 0) break;
    }
    if(sigin)
    {
        EVP_MD_CTX *ctx;
        BIO_get_md_ctx(bp, &amp;ctx);
        i = EVP_DigestVerifyFinal(ctx, sigin, (unsigned int)siglen);
        if(i &gt; 0)
            BIO_printf(out, ""Verified OK\n"");
        else if(i == 0)
        {
            BIO_printf(out, ""Verification Failure\n"");
            return 1;
        }
        else
        {
            BIO_printf(bio_err, ""Error Verifying Data\n"");
            ERR_print_errors(bio_err);
            return 1;
        }
        return 0;
    }
    if(key)
    {
        EVP_MD_CTX *ctx;
        BIO_get_md_ctx(bp, &amp;ctx);
        len = BUFSIZE;
        if(!EVP_DigestSignFinal(ctx, buf, &amp;len))
        {
            BIO_printf(bio_err, ""Error Signing Data\n"");
            ERR_print_errors(bio_err);
            return 1;
        }
    }
    else
    {
        len=BIO_gets(bp,(char *)buf,BUFSIZE);
        if ((int)len &lt;0)
        {
            ERR_print_errors(bio_err);
            return 1;
        }
    }

    if(binout) BIO_write(out, buf, len);
    else if (sep == 2)
    {
        for (i=0; i&lt;(int)len; i++)
            BIO_printf(out, ""%02x"",buf[i]);
        BIO_printf(out, "" *%s\n"", file);
    }
    else
    {
        if (sig_name)
        {
            BIO_puts(out, sig_name);
            if (md_name)
                BIO_printf(out, ""-%s"", md_name);
            BIO_printf(out, ""(%s)= "", file);
        }
        else if (md_name)
            BIO_printf(out, ""%s(%s)= "", md_name, file);
        else
            BIO_printf(out, ""(%s)= "", file);
        for (i=0; i&lt;(int)len; i++)
        {
            if (sep &amp;&amp; (i != 0))
                BIO_printf(out, "":"");
            BIO_printf(out, ""%02x"",buf[i]);
        }
        BIO_printf(out, ""\n"");
    }
    return 0;
}
</code></pre>

<hr>

<p>If you want to step it yourself, then download and unpack the OpenSSL sources. Then, configure with a debug build:</p>

<pre><code>cd openssl-1.0.1h
./Configure debug-darwin64-x86_64-cc no-ssl2 enable-ec_nistp_64_gcc_128
make depend &amp;&amp; make
</code></pre>

<p>Open it up under a debugger:</p>

<pre><code>cd openssl-1.0.1h
lldb apps/openssl
</code></pre>

<p>And finally run it:</p>

<pre><code>(lldb) b dgst.c:513
(lldb) r dgst -sha256 -hmac
</code></pre>

<p>The debugger should snap near <code>do_fp</code>:</p>

<pre><code>Process 27371 stopped
* thread #1: tid = 0x286a3, 0x000000010000ba99 openssl`dgst_main(argc=0, argv=0x00007fff5fbffa60) + 5961 at dgst.c:513, queue = 'com.apple.main-thread', stop reason = breakpoint 1.1
    frame #0: 0x000000010000ba99 openssl`dgst_main(argc=0, argv=0x00007fff5fbffa60) + 5961 at dgst.c:513
   512      
-&gt; 513      if (argc == 0)
   514      {
   515          BIO_set_fp(in,stdin,BIO_NOCLOSE);
   516          err=do_fp(out, buf,inp,separator, out_bin, sigkey, sigbuf,
(lldb) 
</code></pre>

<p>The trick is: when you enter <code>do_fp</code>, the program will start reading from <code>stdin</code>. Enter your string (i.e., <code>data</code>) and then do a <kbd>CTRL</kbd>+<kbd>D</kbd> to EOF it.</p>

<hr>

<p>Now, after all of that, here's the short answer :)</p>

<pre><code>$ echo -n ""data"" | openssl dgst -sha256 -hmac
(stdin)= 3a6eb0790f39ac87c94f3856b2dd2c5d110e6811602261a9a923d3bb23adc8b7
$ echo -n ""data"" | openssl dgst -sha256 
(stdin)= 3a6eb0790f39ac87c94f3856b2dd2c5d110e6811602261a9a923d3bb23adc8b7
</code></pre>
","25497415","1080","<java><openssl><hmac>","2","4","1","2014-08-26 14:17:13","25497415","1","1","","","","2014-08-25 19:11:33","","2014-08-26 14:17:13","2014-08-26 03:08:51"
"15007035","Equivalent Hashing in C# and Objective-C using HMAC256","<p>I'm working with a partner and we're not able to get C# and Objective-C to produce the same hashes using what we think are the same tools in the respective languages.  In C#, I'm doing this:  </p>

<pre><code>byte[] noncebytes=new byte[32];
//We seed the hash generator with a new 32 position array.  Each position is 0.
//In prod code this would be random, but for now it's all 0s.
HMACSHA256 hmac256 = new HMACSHA256(noncebytes);          
string plaintext = ""hello"";
string UTFString = Convert.ToBase64String(
    System.Text.Encoding.UTF8.GetBytes(plaintext));  
string HashString = Convert.ToBase64String(
    hmac256.ComputeHash(System.Text.Encoding.UTF8.GetBytes(plaintext)));  //Convert that hash to a string.
</code></pre>

<p>This produces the following base64string hash:</p>

<blockquote>
  <p>Q1KybjP+DXaaiSKmuikAQQnwFojiasyebLNH5aWvxNo=</p>
</blockquote>

<p>What is the equivalent Objective-C code to do this?  We need the client and the server to be able to generate matching hashes for matching data.</p>

<p>Here is the Objective-C code we are currently using:</p>

<pre><code>   ...

    NSData *zeroNumber = [self zeroDataWithBytes:32]; //empty byte array
    NSString *nonceTest = [zeroNumber base64String];  // using MF_Base64Additions.h here
    NSData *hashTest = [self hmacForKeyAndData:nonceTest withData:@""hello""]; //creating hash
    NSString *hashTestText = [hashTest base64String]; 
    NSLog(@""hello hash is %@"",  hashTestText);

...

    //functions for zeroing out the byte.  I'm sure there's a better way

    - (NSData *)zeroDataWithBytes: (NSUInteger)length {
   NSMutableData *mutableData = [NSMutableData dataWithCapacity: length];
    for (unsigned int i = 0; i &lt; length; i++) {
       NSInteger bits = 0;
      [mutableData appendBytes: (void *) &amp;bits length: 1];
    } return mutableData;
}

//hash function

-(NSData *) hmacForKeyAndData:(NSString *)key withData:(NSString *) data {
    const char *cKey  = [key cStringUsingEncoding:NSASCIIStringEncoding];
    const char *cData = [data cStringUsingEncoding:NSASCIIStringEncoding];
    unsigned char cHMAC[CC_SHA256_DIGEST_LENGTH];
    CCHmac(kCCHmacAlgSHA256, cKey, strlen(cKey), cData, strlen(cData), cHMAC);
    return [[NSData alloc] initWithBytes:cHMAC length:sizeof(cHMAC)];
}
</code></pre>
","<p><strong>UPDATE</strong>:</p>

<p>There is a pretty good <a href=""https://github.com/rnapier/RNCryptor"" rel=""nofollow noreferrer"">project on GitHub</a> that seems to accomplish everything you want, plus a lot more encryption related options; includes unit tests.</p>

<hr>

<pre><code>NSData *hmacForKeyAndData(NSString *key, NSString *data)
{
    const char *cKey  = [key cStringUsingEncoding:NSASCIIStringEncoding];
    const char *cData = [data cStringUsingEncoding:NSASCIIStringEncoding];
    unsigned char cHMAC[CC_SHA256_DIGEST_LENGTH];
    CCHmac(kCCHmacAlgSHA256, cKey, strlen(cKey), cData, strlen(cData), cHMAC);
    return [[NSData alloc] initWithBytes:cHMAC length:sizeof(cHMAC)];
}
</code></pre>

<p>(<a href=""https://stackoverflow.com/a/8459123/620197"">Source</a>)</p>

<p>With the above, I think you will have import <code>&lt;CommonCrypto/CommonHMAC.h&gt;</code>. The next step for encoding to Base64:</p>

<pre><code>+ (NSString *)Base64Encode:(NSData *)data
{
    //Point to start of the data and set buffer sizes
    int inLength = [data length];
    int outLength = ((((inLength * 4)/3)/4)*4) + (((inLength * 4)/3)%4 ? 4 : 0);
    const char *inputBuffer = [data bytes];
    char *outputBuffer = malloc(outLength);
    outputBuffer[outLength] = 0;

    //64 digit code
    static char Encode[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"";

    //start the count
    int cycle = 0;
    int inpos = 0;
    int outpos = 0;
    char temp;

    //Pad the last to bytes, the outbuffer must always be a multiple of 4
    outputBuffer[outLength-1] = '=';
    outputBuffer[outLength-2] = '=';

    /* http://en.wikipedia.org/wiki/Base64
     Text content   M           a           n
     ASCII          77          97          110
     8 Bit pattern  01001101    01100001    01101110

     6 Bit pattern  010011  010110  000101  101110
     Index          19      22      5       46
     Base64-encoded T       W       F       u
     */


    while (inpos &lt; inLength){
        switch (cycle) {
            case 0:
                outputBuffer[outpos++] = Encode[(inputBuffer[inpos]&amp;0xFC)&gt;&gt;2];
                cycle = 1;
                break;
            case 1:
                temp = (inputBuffer[inpos++]&amp;0x03)&lt;&lt;4;
                outputBuffer[outpos] = Encode[temp];
                cycle = 2;
                break;
            case 2:
                outputBuffer[outpos++] = Encode[temp|(inputBuffer[inpos]&amp;0xF0)&gt;&gt; 4];
                temp = (inputBuffer[inpos++]&amp;0x0F)&lt;&lt;2;
                outputBuffer[outpos] = Encode[temp];
                cycle = 3;                  
                break;
            case 3:
                outputBuffer[outpos++] = Encode[temp|(inputBuffer[inpos]&amp;0xC0)&gt;&gt;6];
                cycle = 4;
                break;
            case 4:
                outputBuffer[outpos++] = Encode[inputBuffer[inpos++]&amp;0x3f];
                cycle = 0;
                break;                          
            default:
                cycle = 0;
                break;
        }
    }
    NSString *pictemp = [NSString stringWithUTF8String:outputBuffer];
    free(outputBuffer); 
    return pictemp;
}
</code></pre>
","15007262","1072","<objective-c><hash><hmac>","2","1","2","2013-03-08 06:14:19","15287849","0","","324586","","2013-03-08 06:14:19","2013-02-21 16:13:26","","2017-05-23 12:06:08","2013-02-21 16:24:12"
"15007035","Equivalent Hashing in C# and Objective-C using HMAC256","<p>I'm working with a partner and we're not able to get C# and Objective-C to produce the same hashes using what we think are the same tools in the respective languages.  In C#, I'm doing this:  </p>

<pre><code>byte[] noncebytes=new byte[32];
//We seed the hash generator with a new 32 position array.  Each position is 0.
//In prod code this would be random, but for now it's all 0s.
HMACSHA256 hmac256 = new HMACSHA256(noncebytes);          
string plaintext = ""hello"";
string UTFString = Convert.ToBase64String(
    System.Text.Encoding.UTF8.GetBytes(plaintext));  
string HashString = Convert.ToBase64String(
    hmac256.ComputeHash(System.Text.Encoding.UTF8.GetBytes(plaintext)));  //Convert that hash to a string.
</code></pre>

<p>This produces the following base64string hash:</p>

<blockquote>
  <p>Q1KybjP+DXaaiSKmuikAQQnwFojiasyebLNH5aWvxNo=</p>
</blockquote>

<p>What is the equivalent Objective-C code to do this?  We need the client and the server to be able to generate matching hashes for matching data.</p>

<p>Here is the Objective-C code we are currently using:</p>

<pre><code>   ...

    NSData *zeroNumber = [self zeroDataWithBytes:32]; //empty byte array
    NSString *nonceTest = [zeroNumber base64String];  // using MF_Base64Additions.h here
    NSData *hashTest = [self hmacForKeyAndData:nonceTest withData:@""hello""]; //creating hash
    NSString *hashTestText = [hashTest base64String]; 
    NSLog(@""hello hash is %@"",  hashTestText);

...

    //functions for zeroing out the byte.  I'm sure there's a better way

    - (NSData *)zeroDataWithBytes: (NSUInteger)length {
   NSMutableData *mutableData = [NSMutableData dataWithCapacity: length];
    for (unsigned int i = 0; i &lt; length; i++) {
       NSInteger bits = 0;
      [mutableData appendBytes: (void *) &amp;bits length: 1];
    } return mutableData;
}

//hash function

-(NSData *) hmacForKeyAndData:(NSString *)key withData:(NSString *) data {
    const char *cKey  = [key cStringUsingEncoding:NSASCIIStringEncoding];
    const char *cData = [data cStringUsingEncoding:NSASCIIStringEncoding];
    unsigned char cHMAC[CC_SHA256_DIGEST_LENGTH];
    CCHmac(kCCHmacAlgSHA256, cKey, strlen(cKey), cData, strlen(cData), cHMAC);
    return [[NSData alloc] initWithBytes:cHMAC length:sizeof(cHMAC)];
}
</code></pre>
","<p>Note the second line of code in the objective-c portion of the question.</p>

<pre><code>NSString *nonceTest = [zeroNumber base64String]; 
</code></pre>

<p>but it should be this:</p>

<pre><code>NSString *nonceTest = [[NSString alloc] initWithData:zeroNumber encoding:NSASCIIStringEncoding];
</code></pre>

<p>It was a case of converting the string to base64 when we didn't need to for the hmac seeeding.</p>

<p>We now get: Q1KybjP+DXaaiSKmuikAQQnwFojiasyebLNH5aWvxNo= as the hash on both platforms.</p>
","15287849","1072","<objective-c><hash><hmac>","2","1","2","2013-03-08 06:14:19","15287849","0","","324586","","2013-03-08 06:14:19","2013-02-21 16:13:26","","","2013-03-08 06:13:09"
"30126720","RESTful way to upload file along with some data in django","<p>I am creating a webservice with django using <a href=""http://www.django-rest-framework.org/"" rel=""nofollow"">django rest framework</a>. 
Users are able to upload some images and videos. Uploading media is a two step action, first user uploads the file and receives an ID then in a separate request uses that ID to refer to the media (for example (s)he can use it as profile picture or use it in a chat message). </p>

<p>I need to know <em>who</em> is uploading the media for both HMAC authentication middleware and setting owner of media in database. All other requests are in JSON format and include a <code>username</code> field that it used by HMAC middleware to retrieve the secret shared key.</p>

<p>It first came to my mind that media upload api may look like this:</p>

<pre><code>{
  ""username"":""mjafar"",
  ""datetime"":""2015-05-08 19:05"",
  ""media_type"":""photo"",
  ""media_data"": /* base64 encoded image file */
}
</code></pre>

<p>But i thought that base64 encoding may have significant overhead for larger files like videos; or there may be some restrictions on size of data that can be parsed in json or be created in user side. (This webservice is supposed to communicate with a Android/iOS app, they have limited memory)! Is this a good solution? Are my concerns real problems or i shouldn't worry? Better solutions?</p>
","<p>You could separate the two. Meta data at one interface with a URL pointing to the actual file.  Depending on how you store the actual file you could then reference the file directly via URL at a later point.</p>

<p>You could then have the POST API directly accept the file and simply return the JSON meta data</p>

<pre><code>{
  ""username"":""mjafar"", // inferred from self.request.user
  ""datetime"":""2015-05-08 19:05"", // timestamp on server
  ""media_type"":""photo"", // inferred from header content-type?
  // auto-generated hashed location for file
  ""url"": ""/files/1dde/2ecf/4075/f61b/5a9c/1cec/53e0/ca9b/4b58/c153/09da/f4c1/9e09/4126/271f/fb4e/foo.jpg""
}
</code></pre>

<p>Creating such an interface using DRF would be more along the lines of implementing <a href=""http://www.django-rest-framework.org/api-guide/views/"" rel=""nofollow noreferrer""><code>rest_framework.views.APIView</code></a></p>

<p>Here's what I'm doing for one of my sites:</p>

<pre><code>class UploadedFile(models.Model):
    creator = models.ForeignKey(auth_models.User,blank=True)
    creation_datetime = models.DateTimeField(blank=True,null=True)
    title = models.CharField(max_length=100)
    file = models.FileField(max_length=200, upload_to=FileSubpath)
    sha256 = models.CharField(max_length=64,db_index=True)
    def save(self,*args,**kw_args):
        if not self.creation_datetime:
            self.creation_datetime = UTC_Now()
        super(UploadedFile,self).save(*args,**kw_args)
</code></pre>

<p>serializer:</p>

<pre><code>class UploadedFileSerializer(serializers.HyperlinkedModelSerializer):
    class Meta:
        model = UploadedFile
        fields = ('url', 'creator','creation_datetime','title','file')
</code></pre>

<p>And the view to use this:</p>

<pre><code>from rest_framework.views import APIView
from qc_srvr import serializers,models
from rest_framework.response import Response
from rest_framework import status
from rest_framework import parsers
from rest_framework import renderers
import django.contrib.auth.models as auth_models
import hashlib


class UploadFile(APIView):
    '''A page for uploading files.'''

    throttle_classes = ()
    permission_classes = ()
    parser_classes = (parsers.FormParser, parsers.JSONParser,)
    renderer_classes = (renderers.JSONRenderer,)
    serializer_class = serializers.UploadedFileSerializer

    def calc_sha256(self,afile):
        hasher = hashlib.sha256()
        blocksize=65536
        hasher.update('af1f9847d67300b996edce88889e358ab81f658ff71d2a2e60046c2976eeebdb') # salt
        buf = afile.read(blocksize)
        while len(buf) &gt; 0:
            hasher.update(buf)
            buf = afile.read(blocksize)
        return hasher.hexdigest()


    def post(self, request):
        if not request.user.is_authenticated():
            return Response('User is not authenticated.', status=status.HTTP_401_UNAUTHORIZED)

        uploaded_file = request.FILES.get('file',None)
        if not uploaded_file:
            return Response('No upload file was specified.', status=status.HTTP_400_BAD_REQUEST)


        # calculate sha
        sha256 = self.calc_sha256(uploaded_file)  

        # does the file already exist?
        existing_files = models.UploadedFile.objects.filter(sha256=sha256)
        if len(existing_files):
            serializer = self.serializer_class(instance=existing_files[0],context={'request':request})
        else:
            instance = models.UploadedFile.objects.create(
                creator = request.user,
                title= uploaded_file.name,
                file = uploaded_file,
                sha256 = sha256)
            serializer = self.serializer_class(instance=instance,context={'request':request})
        #import rpdb2; rpdb2.start_embedded_debugger('foo')
        #serializer.is_valid()
        return Response(serializer.data)
</code></pre>

<p>FYI, this is a bit of security-through-obscurity since all the uploaded files are retrievable if you have the URL to the file.</p>

<p>I'm still using DRF 2.4.4, so this may not work for you on 3+. I haven't upgraded due to the dropped nested-serializers support.</p>
","30129408","1070","<python><django><rest><django-rest-framework><hmac>","1","1","1","2019-02-22 18:38:10","30129408","0","","1823497","","2015-05-08 16:47:02","2015-05-08 14:49:21","","2019-02-22 18:38:10","2015-05-08 17:19:17"
"17160896","Binary Output from Google Script HMAC encription","<p>I am current working with Google Apps script and am attempting to write &amp; sign an HTTP request to AWS CloudWatch.</p>

<p>On the Amazon API documentation <a href=""http://docs.aws.amazon.com/general/latest/gr/sigv4-calculate-signature.html"" rel=""nofollow"">here</a> regarding how to create a signing key, they use pseudo to explain that the HMAC algorithm is to return binary format.</p>

<pre><code>HMAC(key, data) represents an HMAC-SHA256 function 
that returns output in binary format.
</code></pre>

<p>Google apps script offers a method to do such a hash,</p>

<pre><code>Utilities.computeHmacSignature(Utilities.MacAlgorithm.HMAC_SHA_256,
                                            data,
                                            key);
</code></pre>

<p>but the return type is always a byte array.</p>

<pre><code>Byte[]
</code></pre>

<p>How do I convert the Byte[] to the binary data AWS wants? Or is there a vanilla javascript function I can use in Google Apps Script to compute the hash?</p>

<p>Thanks</p>
","<p>The conversion from byte array to the binary data required should be simple:</p>

<pre><code>kDate = Utilities.computeHmacSignature(Utilities.MacAlgorithm.HMAC_SHA_256,
             '20130618', 'AWS4' + kSecret);
kDate = Utilities.newBlob(kDate).getDataAsString();
kRegion = Utilities.computeHmacSignature(Utilities.MacAlgorithm.HMAC_SHA_256, 
             'eu-west-1', kDate);
</code></pre>

<p>BUT you have to look onto <a href=""https://code.google.com/p/google-apps-script-issues/issues/detail?id=2227"" rel=""nofollow"">this open issue in the bugtracker</a> - there could be some issues in conversion.</p>

<p>maybe you could try to make a String.fromCharCode() loop and avoid negative numers:</p>

<pre><code>kDateB = Utilities.computeHmacSignature(Utilities.MacAlgorithm.HMAC_SHA_256,
             '20130618', 'AWS4' + kSecret);
kDate = '';
for (var i=0; i&lt;kDateB.length; i++)
  kDate += String.fromCharCode(kDateB[i]&lt;0?256+kDateB[i]:0+kDateB[i]);
kRegion = Utilities.computeHmacSignature(Utilities.MacAlgorithm.HMAC_SHA_256, 
             'eu-west-1', kDate);
</code></pre>
","17163284","1065","<amazon-web-services><google-apps-script><hmac><amazon-cloudwatch>","6","1","2","2016-03-11 05:11:37","17163284","2","","2495753","","2013-06-18 05:13:22","2013-06-18 05:05:35","","2013-06-18 09:12:54","2013-06-18 07:46:45"
"17160896","Binary Output from Google Script HMAC encription","<p>I am current working with Google Apps script and am attempting to write &amp; sign an HTTP request to AWS CloudWatch.</p>

<p>On the Amazon API documentation <a href=""http://docs.aws.amazon.com/general/latest/gr/sigv4-calculate-signature.html"" rel=""nofollow"">here</a> regarding how to create a signing key, they use pseudo to explain that the HMAC algorithm is to return binary format.</p>

<pre><code>HMAC(key, data) represents an HMAC-SHA256 function 
that returns output in binary format.
</code></pre>

<p>Google apps script offers a method to do such a hash,</p>

<pre><code>Utilities.computeHmacSignature(Utilities.MacAlgorithm.HMAC_SHA_256,
                                            data,
                                            key);
</code></pre>

<p>but the return type is always a byte array.</p>

<pre><code>Byte[]
</code></pre>

<p>How do I convert the Byte[] to the binary data AWS wants? Or is there a vanilla javascript function I can use in Google Apps Script to compute the hash?</p>

<p>Thanks</p>
","<p>I am quite sure it is a bug that Utilities.computeHmacSignature take key as an ASCII. But there was no way to parse byte[] to ASCII correctly in GAS</p>

<p>And the library writer is too stupid too just provide function which take key as byte[]</p>

<p>So I use this instead : <a href=""http://caligatio.github.com/jsSHA/"" rel=""nofollow"">http://caligatio.github.com/jsSHA/</a></p>

<p>Just copy SHA.js and SHA-256.js then it work fine</p>

<p>PS. it waste my time for whole 2 days so I'm very annoying</p>
","35932700","1065","<amazon-web-services><google-apps-script><hmac><amazon-cloudwatch>","6","2","2","2016-03-11 05:11:37","17163284","2","","2495753","","2013-06-18 05:13:22","2013-06-18 05:05:35","","","2016-03-11 05:11:37"
"16860371","HMAC MD5 with meteor","<p>I need to generate an HMAC MD5 hash in my meteor app. I've already looked at crypto-base and crypto-md5 and both don't have HMAC implemented. I've tried copying hmac.js from <a href=""https://code.google.com/p/crypto-js/"" rel=""nofollow"">https://code.google.com/p/crypto-js/</a> but I get an error about ""this"" being undefined.</p>

<p>Does an HMAC implementation exist or do I have to create/port one for meteor ?</p>
","<p>On the server, I believe you can use Node's <a href=""http://nodejs.org/api/crypto.html#crypto_crypto_createhmac_algorithm_key"" rel=""noreferrer"">Crypto module</a>:</p>

<pre><code>if (Meteor.isServer) {
  var crypto = Npm.require('crypto');
  crypto.createHmac('md5', secretKey).update(message).digest('base64');
}
</code></pre>

<p>Does that work for you?</p>
","16861034","1064","<meteor><md5><hmac>","1","9","1","2013-05-31 15:39:30","16861034","1","1","","","","2013-05-31 15:03:49","","","2013-05-31 15:39:30"
"41190948","Validating HMAC-SHA256 signature in Node.js","<p>I am trying to validate HMAC-SHA256 signature against Node.js server with a simple Python client which validates against Python server. For some reason, I am unable to properly validate it in Node.</p>

<pre><code>##
# client.py
##
import json
import time
from urllib import error
from urllib import request
import hmac
from hashlib import sha256

USER = 'testuser'
KEY = 'xxwMXEqOGiY2TssVZ9hvOB4x6EVW3RW75hjAKEai4UBlxG0ts8Js8dsWOzDvAVq4'


if __name__ == '__main__':
    now = int(time.time())

    payload = {'firstname': 'john', 'lastname': 'doe'}
    payload_json = json.dumps(payload)
    payload_bytes = bytes(payload_json, 'utf-8')

    sig = hmac.new(bytes(KEY, 'utf-8'), b'', sha256)
    sig.update(bytes(str(now), 'utf-8'))
    sig.update(payload_bytes)
    signature = sig.hexdigest()

    headers = {
        'Authorization': '{}:{}'.format(USER, signature),
        'timestamp': str(now),
        'Content-Type': 'application/json',
    }

    req = request.Request('http://localhost:8080/', payload_bytes, headers, method='POST')
    try:
        with request.urlopen(req) as response:
            response_code, response_reason, r = response.code, response.reason, response.read()
    except error.HTTPError as e:
        response_code, response_reason, r = e.code, e.reason, e

    print('RESPONSE: {} {}\n{}'.format(response_code, response_reason, r))
</code></pre>

<p>In Python, I validate the request (successfully) like this:</p>

<pre><code>##
# snippet from server.py
##
user = {'user': 'testuser', 'secret_key': 'xx...'}  # usually queries the database
if user:
    check_sig = hmac.new(bytes(user['secret_key'], 'utf8'), b'', sha256)
    check_sig.update(bytes(headers['TIMESTAMP'], 'utf-8'))  # timestamp sent in request header
    check_sig.update(data)  # data is binary json-formatted string
    check_signature = check_sig.hexdigest()

    if hmac.compare_digest(check_signature, hmac_hash):  # hmac_hash is user's signature from request
        time_diff = int(time.time()) - int(headers['TIMESTAMP'])
        if 0 &lt;= time_diff &lt;= 30:
            print('kewl!')
            return True
</code></pre>

<p>In Node, I tried to use <a href=""http://restify.com/"" rel=""nofollow noreferrer"">node-restify</a> and have a simple code like this:</p>

<pre><code>/*
* server.js
*/
var restify = require('restify');
var crypto = require('crypto');
var bufferEq = require('buffer-equal-constant-time');
var _ = require('lodash');
var nconf = require('nconf').file({file: 'config.json'});


var server = restify.createServer();
server.use(restify.acceptParser(server.acceptable));
// server.use(require(path.join(__dirname, 'auth'))());
server.use(restify.dateParser());
server.use(restify.queryParser());
server.use(restify.jsonp());
server.use(restify.gzipResponse());
server.use(restify.bodyParser());
// server.use(restify.requestExpiry());
server.use(restify.throttle({
    burst: 100,
    rate: 50,
    ip: true,
    overrides: {
        '192.168.1.1': {
            rate: 0,        // unlimited
            burst: 0
        }
    }
}));
server.use(restify.conditionalRequest());


server.use(function authenticate(req, res, next) {
    console.log('checking auth...');

    var user = req.headers.authorization.split(':')[0];
    var key = req.headers.authorization.split(':')[1];
    console.log(key);

    var credentials = nconf.get('Security:Users');
    var dbUser = _.filter(credentials, {user: user}).pop();

    var checkSignature = crypto.createHmac('sha256', dbUser.key)
        .update(req.headers.timestamp, 'utf8')
        .update(JSON.stringify(req.body), 'utf8')
        .digest('hex');

    console.log(checkSignature);
    if (!bufferEq(new Buffer(checkSignature), new Buffer(key))) {
        return next(new restify.UnauthorizedError('Authorization error.'));
    }

    return next();
});


function respond(req, res, next) {
    res.send('hello!');
    next();
}

server.get('/', respond);
server.post('/', respond);

server.listen(8080, function() {
    console.log('%s listening at %s', server.name, server.url);
});
</code></pre>

<p>...but comparing signatures always fails.</p>

<p>Is this the correct way to create HMAC-SHA256 signature in Node? I was following <a href=""https://nodejs.org/api/crypto.html#crypto_class_hmac"" rel=""nofollow noreferrer"">crypto's documentation</a> and it seems pretty straightforward...</p>
","","","1038","<javascript><node.js><validation><authentication><hmac>","0","","0","2016-12-16 19:08:14","","5","","","","","2016-12-16 19:08:14","","",""
"24401623","Equivalent HMAC SHA-512 key","<p>what is the equivalent HMAC SHA-512 key for the following one? <strong>01c17afc4be444d9f27ff3b11cd206f79cbcd0fa7e262d90587338f7d5a70f92</strong></p>

<p>What is the code use to get for this in ruby? I found no online converters to check this with HMAC.</p>
","<p>You can use following code to create signature using HMAC and sha512 in ruby,</p>

<pre><code>digest = OpenSSL::Digest.new('sha512')
signature = OpenSSL::HMAC.digest(digest, private_key, data)
</code></pre>

<p>The ""data"" is data that you you want to sign. if you just want to create instance then you can use <code>instance = OpenSSL::HMAC.new(private_key, digest)</code> and then update method.</p>

<p>For more information on HMAC using ruby with sample code -</p>

<p><a href=""http://ruby-doc.org/stdlib-2.1.0/libdoc/openssl/rdoc/OpenSSL/HMAC.html"" rel=""nofollow"">http://ruby-doc.org/stdlib-2.1.0/libdoc/openssl/rdoc/OpenSSL/HMAC.html</a></p>
","24406400","1037","<ruby-on-rails><ruby-on-rails-4><hmac><digest>","2","2","1","2014-06-25 11:33:57","","1","","","","","2014-06-25 06:25:17","","2014-06-25 11:33:57","2014-06-25 10:38:14"
"45027112","Hmac Signing in Google Apps Script, When Secret and Digest are base64 encoded","<p>Given this code in nodejs:</p>

<pre><code>const crypto = require('crypto');
const message = 'message to sign';
const secret = 'mysecret';
const signature = crypto.createHmac('sha256', secret).update(message).digest('hex');
console.log(signature);
</code></pre>

<p>The output is <code>40d4c57eed56968de0f3a22e73ebf8abc6ab4c38bba95fd2c85dd4dc90bf36b9</code></p>

<p>With the help of the answers <a href=""https://stackoverflow.com/questions/16216868/get-back-a-string-representation-from-computedigestalgorithm-value-byte"">here</a>, I have exactly replicated this behavior in Google Apps Script, with this function:</p>

<pre><code>//conversion from byte array taken from: https://stackoverflow.com/a/27933459
function makeHmacSignature(macAlg, message, secret) {
  return Utilities.computeHmacSignature(macAlg, message, secret).reduce(function(str,chr){
    chr = (chr &lt; 0 ? chr + 256 : chr).toString(16);
    return str + (chr.length==1?'0':'') + chr;
  },'');
}
</code></pre>

<p>HOWEVER, suppose the signing is changed slightly, such that the secret is a base64 encoded string, and we expect the digest in base64. In the nodejs code, the changes are trivial:</p>

<pre><code>const crypto = require('crypto');
const message = 'message to sign';
const secret = 'mysecret';
const decodedSecret = Buffer(secret, 'base64');
const signature = crypto.createHmac('sha256', decodedSecret).update(message).digest('base64');
console.log(signature);
</code></pre>

<p>Giving the output <code>bBLhyGY61BPEbPiFKknX1g9eXv9r98uvwwgVy7YMYDY=</code></p>

<p>I've been trying for hours, I cannot figure out how to replicate this behavior in Google Apps Script!</p>
","<p>I never successfully figured out how to do this purely with Google Apps Script native functions.</p>

<p>I used <a href=""https://github.com/Caligatio/jsSHA"" rel=""nofollow noreferrer"">jsSHA</a>. I pasted in the <a href=""https://github.com/Caligatio/jsSHA/blob/master/src/sha256.js"" rel=""nofollow noreferrer"">optimized sha256.js</a> file, and with that inline, using the example data above, this test function returns the correct output:</p>

<pre><code>function testHmacSigs() {
  var message = 'message to sign';
  var secret = 'mysecret';
  var shaObj = new jsSHA(""SHA-256"", ""TEXT"");
  shaObj.setHMACKey(secret, ""B64"");
  shaObj.update(message);
  var sig = shaObj.getHMAC(""B64"");

  Logger.log(sig);
}
</code></pre>
","46511679","1036","<javascript><node.js><google-apps-script><base64><hmac>","1","1","2","2017-12-31 12:59:58","","0","","","","","2017-07-11 06:40:05","","","2017-10-01 10:53:10"
"45027112","Hmac Signing in Google Apps Script, When Secret and Digest are base64 encoded","<p>Given this code in nodejs:</p>

<pre><code>const crypto = require('crypto');
const message = 'message to sign';
const secret = 'mysecret';
const signature = crypto.createHmac('sha256', secret).update(message).digest('hex');
console.log(signature);
</code></pre>

<p>The output is <code>40d4c57eed56968de0f3a22e73ebf8abc6ab4c38bba95fd2c85dd4dc90bf36b9</code></p>

<p>With the help of the answers <a href=""https://stackoverflow.com/questions/16216868/get-back-a-string-representation-from-computedigestalgorithm-value-byte"">here</a>, I have exactly replicated this behavior in Google Apps Script, with this function:</p>

<pre><code>//conversion from byte array taken from: https://stackoverflow.com/a/27933459
function makeHmacSignature(macAlg, message, secret) {
  return Utilities.computeHmacSignature(macAlg, message, secret).reduce(function(str,chr){
    chr = (chr &lt; 0 ? chr + 256 : chr).toString(16);
    return str + (chr.length==1?'0':'') + chr;
  },'');
}
</code></pre>

<p>HOWEVER, suppose the signing is changed slightly, such that the secret is a base64 encoded string, and we expect the digest in base64. In the nodejs code, the changes are trivial:</p>

<pre><code>const crypto = require('crypto');
const message = 'message to sign';
const secret = 'mysecret';
const decodedSecret = Buffer(secret, 'base64');
const signature = crypto.createHmac('sha256', decodedSecret).update(message).digest('base64');
console.log(signature);
</code></pre>

<p>Giving the output <code>bBLhyGY61BPEbPiFKknX1g9eXv9r98uvwwgVy7YMYDY=</code></p>

<p>I've been trying for hours, I cannot figure out how to replicate this behavior in Google Apps Script!</p>
","<p>Google Apps Script actually has a utility function for this. </p>

<p>See: <a href=""https://developers.google.com/apps-script/reference/utilities/utilities#computehmacsha256signaturevalue-key"" rel=""nofollow noreferrer"">https://developers.google.com/apps-script/reference/utilities/utilities#computehmacsha256signaturevalue-key</a></p>

<p>So instead of </p>

<pre><code>const signature = crypto.createHmac('sha256', secret).update(message).digest('hex');
</code></pre>

<p>you could do this:</p>

<pre><code>var byteSignature = Utilities.computeHmacSha256Signature(message, secret);
// convert byte array to hex string
var signature = byteSignature.reduce(function(str,chr){
  chr = (chr &lt; 0 ? chr + 256 : chr).toString(16);
  return str + (chr.length==1?'0':'') + chr;
},'');
</code></pre>
","48042350","1036","<javascript><node.js><google-apps-script><base64><hmac>","1","1","2","2017-12-31 12:59:58","","0","","","","","2017-07-11 06:40:05","","2017-12-31 12:59:58","2017-12-31 12:16:08"
"39290443","AES + HMAC Encryption in .Net","<p>I'm trying to serialise and encrypt simple dto's as a means to securely hand them around as strings.</p>

<p>It seems that most people point me at <a href=""https://stackoverflow.com/questions/202011/encrypt-and-decrypt-a-string/10366194#10366194"">Encrypt and decrypt a string</a> when asking about this.
@jbtule took the time to provide a really detailed answer with 2 possible solutions.</p>

<p>I have taken a copy of the second example from his gist <a href=""https://gist.github.com/jbtule/4336842#file-aesthenhmac-cs"" rel=""nofollow noreferrer"">https://gist.github.com/jbtule/4336842#file-aesthenhmac-cs</a> (the file named ""AESThenHMAC.cs"" and put that in to my project.</p>

<p>I then thought it might be good practice to wrap up and quickly test this solution but I can't seem to get it working. </p>

<p>Could someone explain what I am doing wrong here?</p>

<p>Here's my wrapper round @jbtule's code:</p>

<pre><code>using Newtonsoft.Json;
using System.Text;

namespace Core.Data
{
    public class AesCrypto&lt;T&gt; : ICrypto&lt;T&gt;
    {
        public string Encrypt(T source, string salt)
        {
            var enc = Encoding.Unicode;
            var rawData = JsonConvert.SerializeObject(source);
            return enc.GetString(AESThenHMAC.SimpleEncryptWithPassword(enc.GetBytes(rawData), salt));
        }

        public T Decrypt(string source, string salt)
        {
            var enc = Encoding.Unicode;
            var decryptedBytes = AESThenHMAC.SimpleDecryptWithPassword(enc.GetBytes(source), salt);
            return JsonConvert.DeserializeObject&lt;T&gt;(enc.GetString(decryptedBytes));
        }
    }
}
</code></pre>

<p>And then a simple unit test to confirm this all works:</p>

<pre><code>public void TestAesCrypto()
{
    var testInput = new EncryptableObject { Id = 123, Name = ""Victim"", When = DateTimeOffset.UtcNow };
    var crypto = new AesCrypto&lt;EncryptableObject&gt;();

    var saltBytes = new byte[32];
    new Random().NextBytes(saltBytes);
    var testSalt = Encoding.Unicode.GetString(saltBytes);

    var magicString = crypto.Encrypt(testInput, testSalt);
    var testOutput = crypto.Decrypt(magicString, testSalt);

    Assert.AreEqual(testInput.Id, testOutput.Id);
    Assert.AreEqual(testInput.Name, testOutput.Name);
    Assert.AreEqual(testInput.When, testOutput.When);
}
</code></pre>

<p>For some reason the decryption method returns null because the check performed on line 261 of jbtule's gist compares the value 255 to 0.</p>

<p>This is a follow on from my attempts to talk to the .NET types directly (see <a href=""https://stackoverflow.com/questions/39255395/aesencryption-doesnt-appear-to-decrypt-right"">AesEncryption doesn&#39;t appear to decrypt right?</a>), I just need a solution that consistently works at this point.</p>
","<p>There we go, thanks to @dbc ... how I didn't spot that I don't know!</p>

<pre><code>using Newtonsoft.Json;
using System;
using System.Text;

namespace Core.Data
{
    public class AesCrypto&lt;T&gt; : ICrypto&lt;T&gt;
    {
        public string Encrypt(T source, string salt)
        {
            var e = Encoding.UTF8;
            var rawData = e.GetBytes(JsonConvert.SerializeObject(source));
            var cipherData = AESThenHMAC.SimpleEncryptWithPassword(rawData, salt);
            return Convert.ToBase64String(cipherData);
        }

        public T Decrypt(string source, string salt)
        {
            var e = Encoding.UTF8;
            var decryptedBytes = AESThenHMAC.SimpleDecryptWithPassword(Convert.FromBase64String(source), salt);
            return JsonConvert.DeserializeObject&lt;T&gt;(e.GetString(decryptedBytes));
        }
    }
}
</code></pre>
","39290863","1035","<c#><encryption><aes><hmac>","1","0","1","2016-09-02 11:04:11","39290863","3","","-1","","2017-05-23 12:32:50","2016-09-02 10:42:47","","","2016-09-02 11:04:11"
"48733839","C#.NET - Signing HTTP POST message with HMAC-SHA512 produces inconsistent result in some systems","<p>I'm building a program that interacts with a cryptocurrency exchange's API to place buy/sell order, etc.</p>

<p>In order to use the exchange's private API methods, I have to include a sign in the http header, which is the POST message body, encrypted with HMACSHA512 by using a secret key.</p>

<p>The code below works totally fine in my system, but some of my users reported that the server always returns a signing error when they try to use some of the private API methods.</p>

<p>I've tried to reproduce the bug in several system setups, but to no avail.</p>

<p>I'm wondering if any part of the code below is prone to inconsistency when being used in different system setups.</p>

<pre><code>    public string SendQuery(string apiKey, string secretKey, string method, string[] param, string url)
    {
        // nonce
        string nonceStr = Utility.CurrentTimeMillis().ToString() + ""0000000000"";

        // generate the POST message
        string postString = ""method="" + method + ""&amp;nonce="" + nonceStr;
        if (param != null) 
        {
            foreach (string item in param) postString += ""&amp;"" + item;
        }            
        byte[] postData = Encoding.ASCII.GetBytes(postString);

        // sign POST message
        HMACSHA512 hMACSHA512 = new HMACSHA512(Encoding.ASCII.GetBytes(secretKey));
        byte[] sign = hMACSHA512.ComputeHash(postData);
        string signString = string.Empty;
        for (int i = 0; i &lt; sign.Length; i++)
        {
            signString += sign[i].ToString(""X2"");
        }
        signString = signString.ToLower();   //　must use lower case

        // generate headers
        HttpWebRequest request = (HttpWebRequest)WebRequest.Create(url);
        request.Headers.Add(""Key"", apiKey);
        request.Headers.Add(""Sign"", signString);
        request.ContentType = ""application/x-www-form-urlencoded"";
        request.ContentLength = postData.Length;
        request.KeepAlive = true;
        request.Proxy = null;
        request.Method = ""POST"";
        request.Timeout = 5000;

        string message = string.Empty;

        try
        {
            using (Stream st = request.GetRequestStream())
                st.Write(postData, 0, postData.Length);

            Stream responseStream = request.GetResponse().GetResponseStream();
            StreamReader objReader = new StreamReader(responseStream);

            string line = """";

            while (line != null)
            {
                line = objReader.ReadLine();
                if (line != null) message += line;
            }
        }
        catch (Exception ex)
        {

        }

        return message;
    }
</code></pre>
","<p>So answering my own question,</p>

<p>Turns out the problem doesn't lie within my SendQuery method, but a function that calls it uses Double.ToString(""F8"") to produce a parameter value, which results in varying decimal separator character depending on the local formatting.</p>

<p>For example:</p>

<pre><code>double val = 1000.5;

string str = val.ToString(""F8"");
</code></pre>

<p>Depending on the formatting will produces either
""1000.50000000"" or 
""1000,50000000"".</p>

<p>So you have to provide the IFormatProvider argument when using the Double.ToString method,
or just use a dirty-but-works-like-a-charm trick like:</p>

<pre><code>ToString(""F8"").Replace("","", ""."");
</code></pre>
","48903913","1016","<c#><.net><post><httpwebrequest><hmac>","1","0","1","2018-02-21 10:44:05","","2","1","8936510","","2018-02-11 16:48:01","2018-02-11 16:42:02","","","2018-02-21 10:44:05"
"6956829","HMAC MD5 on Windows Phone 7 / Silverlight","<p>I'm trying to generate a HMAC_MD5 algorithm on Windows Phone 7. As as I discovered , HMACMD5 class in not implemented in WP7. On the other hand, I found a MD5 Silverlight library ( <a href=""http://archive.msdn.microsoft.com/SilverlightMD5"" rel=""nofollow"">http://archive.msdn.microsoft.com/SilverlightMD5</a> ), but I cannot generate a new MD5 signature based on <strong>predefined key</strong>. Any hints ?
Thanks,
Alex</p>
","<p>If the Silverlight library won't work (though as Matt points out, without code it's hard to say what might be going wrong), <a href=""http://www.bouncycastle.org/csharp/"" rel=""nofollow"">Bouncy Castle</a> supports just about every encryption type out there and it has <a href=""http://blog.opennetcf.com/ctacke/2011/07/28/BouncyCastleCryptoInTheCompactFramework.aspx"" rel=""nofollow"">Compact Framework</a> support, so it's likely to work fine in Windows Phone.</p>
","6958626","1016","<silverlight><windows-phone-7><md5><hmac>","2","1","1","2011-08-05 15:17:16","","1","","","","","2011-08-05 13:12:06","","","2011-08-05 15:17:16"
"38623335","AES-Encrypt-then-MAC a large file with .NET","<p>I want to encrypt a large file (lets say 64 GB) in the most efficient way in .NET.</p>

<p>How I would implement this:</p>

<ol>
<li>Create an instance of <code>AesManaged</code> to encrypt the stream of the file (read 64 GB)</li>
<li>Save this stream to disk (because it is to big to hold in memory) (write 64 GB)</li>
<li>Create an instance of <code>HMACSHA512</code> to compute hash of the saved file (read 64 GB)</li>
<li>Save encrypted data with iv to disk (read &amp; write 64 GB)</li>
</ol>

<p>Simplified C# Code:</p>

<pre><code>using (var aesManaged = new AesManaged())
{
    using (var msEncrypt = File.OpenWrite(@""C:\Temp\bigfile.bin.tmp""))
    {
        using (var csEncrypt = new CryptoStream(msEncrypt, encryptor, CryptoStreamMode.Write))
        {
            File.OpenRead(@""C:\Temp\bigfile.bin"").CopyTo(csEncrypt);
            new MemoryStream(iv).CopyTo(csEncrypt);
        }
    }
}

using (var hmac = new HMACSHA512(hmacKey))
{
    hmacHash = hmac.ComputeHash(File.OpenRead(@""C:\Temp\bigfile.bin.tmp""));
}

byte[] headerBytes;
using (var memoryStream = new MemoryStream())
{
    var header = new Header
    {
        IV = iv,
        HmacHash = hmacHash
    };
    Serializer.Serialize(memoryStream, header);
    headerBytes = memoryStream.ToArray();
}

using (var newfile = File.OpenWrite(@""C:\Temp\bigfile.bin.enc""))
{
    new MemoryStream(MagicBytes).CopyTo(newfile);
    new MemoryStream(BitConverter.GetBytes(headerBytes.Length)).CopyTo(newfile);
    new MemoryStream(headerBytes).CopyTo(newfile);
    File.OpenRead(@""C:\Temp\bigfile.bin.tmp"").CopyTo(newfile);
}
</code></pre>

<p>This implementation has the <strong>disadvantage</strong> that I <strong>created a second file</strong> and that I <strong>read multiple times 64 GB</strong> from disk.</p>

<p>Is the necessary? How to minimize disk IO and ram allocation? </p>
","<p>I always get <code>CryptoStream</code>s wrong, so please excuse my pseudocode. The basic idea is to ""chain"" streams, so that plaintext gets copied to a cryptostream which does the encryption, which in turn writes data to a cryptostream that does the MACing, which then writes to plain old file stream:</p>

<pre><code>using(var encryptedFileStream = File.OpenWrite(""...""))        
using(var macCryptoStream = new CryptoStream(encryptedFileStream, mac, CryptoStreamMode.Write))
using(var encryptCryptoStream = new CryptoStream(macCryptoStream, encryptor, CryptoStreamMode.Write))
using(var inputFileStream = File.OpenRead(""...""))
    inputFileStream.CopyTo(encryptCryptoStream);
</code></pre>

<p>This way, you only need a single pass through your 64 Gb.</p>

<p>Now, you'll have to somehow store the IV and MAC in the beginning of your encrypted file, so first ""resize"" it:</p>

<pre><code>using(var encryptedFileStream = File.OpenWrite(""...""))   
{
    var offset = YourMagicHeaderLength + IvLength + MacLength;
    encryptedFileStream.SetLength(offset);
    encryptedFileStream.Position = offset;

    // The rest of the code goes here
}
</code></pre>

<p>and then, after encrypting and computing MAC, rewind to the very beginning and write them out.</p>
","38629596","1014","<c#><encryption><aes><hmac>","2","4","1","2016-07-28 07:21:23","38629596","1","1","1776231","","2016-07-28 07:06:09","2016-07-27 21:16:45","","","2016-07-28 07:21:23"
"29214234","What is SHA256 OID used for?","<p>I have found a great SSL library which is easy to understand (for me) and more importantly which is easy to take apart in order to just get the cryptographic primitives I want to use.</p>

<p>However there is one thing i do not understand:</p>

<pre><code>//HMAC with SHA-256 OID (1.2.840.113549.2.9)
   58 const uint8_t HMAC_WITH_SHA256_OID[8] = {0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x02, 0x09};
</code></pre>

<p>This line <a href=""http://www.oryx-embedded.com/doc/hmac_8c_source.html#l00058"" rel=""nofollow"">can be found here</a>
I have downloaded the complete source and demo's for cyclone but nothing seems to use this, it also makes no difference to speed or outcome when I remove it.</p>

<p>does anyone know what it is used for?</p>
","<blockquote>
  <p>does anyone know what it is used for?</p>
</blockquote>

<p>That is <a href=""http://oid-info.com/get/1.2.840.113549.2.9"" rel=""nofollow""><code>hmacWithSHA256</code></a>. Its used to identify the algorithm for system interconnect.</p>

<p>The other OIDs/HMACs in that arc are:</p>

<ul>
<li>MD2 - 2</li>
<li>MD4 - 4</li>
<li>MD5 - 5</li>
<li>hmacWithSHA1 - 7</li>
<li>hmacWithSHA224 - 8</li>
<li>hmacWithSHA256 - 9</li>
<li>hmacWithSHA384 - 10</li>
<li>hmacWithSHA512 - 11</li>
</ul>
","29214763","1004","<c><hmac>","1","0","1","2015-03-23 15:58:58","29214763","1","","608639","","2015-03-23 15:54:14","2015-03-23 15:34:08","","","2015-03-23 15:58:58"
"16092584","Perl alternative to hash_hmac('ripemd160', $data, $key) in PHP","<p>I need to produce same result in Perl that <code>hash_hmac('ripemd160', $data, $key)</code> produces in PHP</p>

<p>Managed to trace it down to two perl modules, just cant get them working together...</p>

<p>Digest::HMAC and Crypt::RIPEMD160</p>

<pre><code>use Crypt::RIPEMD160;

use Digest::HMAC;
$hmac = Digest::HMAC-&gt;new('bar', 'Crypt::RIPEMD160');

$hmac-&gt;add('foo');
$digest = $hmac-&gt;digest;
</code></pre>

<p>anyone got any ideas what am i doing wrong?</p>

<p>If i use the code above i get following error:
Can't call method ""add"" on an undefined value at /usr/lib64/perl5/vendor_perl/5.12.4/Digest/HMAC.pm line 28.</p>

<p>Since i was unable to pass the hash function reference in the code above, after looking at the HMAC module at the hmac function i thought i could write it in my code direct:</p>

<pre><code>my $data = 'bar';
my $key = 'foo';
$block_size = 160;
$block_size ||= 64;
$key = Crypt::RIPEMD160-&gt;hash($key) if length($key) &gt; $block_size;
my $k_ipad = $key ^ (chr(0x36) x $block_size);
my $k_opad = $key ^ (chr(0x5c) x $block_size);
my $digest =  Crypt::RIPEMD160-&gt;hash($k_opad, Crypt::RIPEMD160-&gt;hash($k_ipad, $data));
</code></pre>

<p>this does produce a hash but still a wrong one</p>

<p>PHP generated hash: isceebbf5cd5e34c888b493cf7f7c39a7b181b65a3</p>

<p>The perl hash: hash21a2fa2bf39fd99d4c9cdf147added69c32d45f9e</p>

<p>To be honest i dont care how its done and what modules are used as long as I get same hash as the php function produces...  at this point I am tempted writing a php script that i call from perl just to get that hash... :( as I am runing out of ideas...</p>
","<p>The <code>Digest::HMAC</code> only includes <code>Digest::HMAC_MD5</code> and <code>Digest::HMAC_SHA1</code>. However, I took a look at the Perl code for <code>Digest::HMAC_MD5</code>. The whole thing is about 20 lines of code. It basically creates two <em>methods</em>:</p>

<pre><code>sub hmac_md5 {
    hmac($_[0], $_[1], \&amp;md5, 64);
}
</code></pre>

<p>and</p>

<pre><code>sub hmac_md5_hex {
    unpack(""H*"", &amp;hmac_md5);
}
</code></pre>

<p>That's pretty much the entire program.</p>

<p>If you forget about the object oriented style of the package, and use the <em>functional</em> style, it looks like this might work for you:</p>

<pre><code>hmac($data, $key, \&amp;ripemd160, 160);
</code></pre>

<p>or maybe just:</p>

<pre><code>hmac($data, $key \&amp;ripemd160);
</code></pre>

<p>In fact, that's documented on the CPAN <a href=""http://search.cpan.org/~gaas/Digest-HMAC/lib/Digest/HMAC.pm"" rel=""nofollow"">Digest::HMAC</a> page itself.</p>
","16093735","1004","<perl><hmac>","2","3","3","2013-09-09 11:58:17","16095819","2","1","2022754","","2013-04-19 07:56:26","2013-04-18 20:36:34","","","2013-04-18 21:51:33"
"16092584","Perl alternative to hash_hmac('ripemd160', $data, $key) in PHP","<p>I need to produce same result in Perl that <code>hash_hmac('ripemd160', $data, $key)</code> produces in PHP</p>

<p>Managed to trace it down to two perl modules, just cant get them working together...</p>

<p>Digest::HMAC and Crypt::RIPEMD160</p>

<pre><code>use Crypt::RIPEMD160;

use Digest::HMAC;
$hmac = Digest::HMAC-&gt;new('bar', 'Crypt::RIPEMD160');

$hmac-&gt;add('foo');
$digest = $hmac-&gt;digest;
</code></pre>

<p>anyone got any ideas what am i doing wrong?</p>

<p>If i use the code above i get following error:
Can't call method ""add"" on an undefined value at /usr/lib64/perl5/vendor_perl/5.12.4/Digest/HMAC.pm line 28.</p>

<p>Since i was unable to pass the hash function reference in the code above, after looking at the HMAC module at the hmac function i thought i could write it in my code direct:</p>

<pre><code>my $data = 'bar';
my $key = 'foo';
$block_size = 160;
$block_size ||= 64;
$key = Crypt::RIPEMD160-&gt;hash($key) if length($key) &gt; $block_size;
my $k_ipad = $key ^ (chr(0x36) x $block_size);
my $k_opad = $key ^ (chr(0x5c) x $block_size);
my $digest =  Crypt::RIPEMD160-&gt;hash($k_opad, Crypt::RIPEMD160-&gt;hash($k_ipad, $data));
</code></pre>

<p>this does produce a hash but still a wrong one</p>

<p>PHP generated hash: isceebbf5cd5e34c888b493cf7f7c39a7b181b65a3</p>

<p>The perl hash: hash21a2fa2bf39fd99d4c9cdf147added69c32d45f9e</p>

<p>To be honest i dont care how its done and what modules are used as long as I get same hash as the php function produces...  at this point I am tempted writing a php script that i call from perl just to get that hash... :( as I am runing out of ideas...</p>
","<p>The reason your code doesn't work is that, while the interface provided by <a href=""http://search.cpan.org/perldoc?Crypt%3a%3aRIPEMD160"" rel=""nofollow"">Crypt::RIPEMD160</a> looks similar to the standard <a href=""http://search.cpan.org/perldoc?Digest"" rel=""nofollow"">Digest</a> interface, it's not quite compatible: in particular, the <code>reset()</code> method of Crypt::RIPEMD160 apparently doesn't return a reference to the object it's called on, and the code in <a href=""http://search.cpan.org/perldoc?Digest%3a%3aHMAC"" rel=""nofollow"">Digest::HMAC</a> happens to rely on that detail.</p>

<p>This incompatibility would be a trivial things to fix by slightly tweaking either module, either to add the missing return value to Crypt::RIPEMD5 or to make Digest::HMAC less reliant on needless method chaining.  The latter would be as easy as changing the line:</p>



<pre class=""lang-perl prettyprint-override""><code>$self-&gt;{hasher}-&gt;reset-&gt;add($self-&gt;{k_opad}, $inner_digest);
</code></pre>

<p>in Digest::HMAC to:</p>

<pre class=""lang-perl prettyprint-override""><code>$self-&gt;{hasher}-&gt;reset;
$self-&gt;{hasher}-&gt;add($self-&gt;{k_opad}, $inner_digest);
</code></pre>

<p>(Of course, I'm not suggesting that you do this yourself, although you <em>could</em> report the issue to the maintainers of those modules.)</p>

<p>However, with both modules as they currently are, it just won't work.  The solutions I'd recommend would be to either use the non-OO interface, as David W. suggests, or try the newer <a href=""http://search.cpan.org/perldoc?Crypt%3a%3aDigest%3a%3aRIPEMD160"" rel=""nofollow"">Crypt::Digest::RIPEMD160</a> module, which properly implements the Digest interface and should play nicer with Digest::HMAC.</p>

<hr>

<p><strong>Edit:</strong>
Actually, David W.'s suggestion won't work as given, because Crypt::RIPEMD160 doesn't export a non-OO <code>ripemd160()</code> function.  You could, however, easily create one:</p>

<pre class=""lang-perl prettyprint-override""><code>use Crypt::RIPEMD160;
sub ripemd160 {
    return Crypt::RIPEMD160-&gt;hash( join """", @_ );
}
</code></pre>

<p>and then use it like this:</p>

<pre class=""lang-perl prettyprint-override""><code>use Digest::HMAC qw( hmac );
sub hmac_ripemd160 {
    return hmac( @_[0, 1], \&amp;ripemd160, 64 );
}
</code></pre>

<p>(Yes, 64 bytes is the correct block size from HMAC-RIPEMD160, since the input block length of RIPEMD160 is 16 32-bit words, which equals 512 bits or 64 bytes.  In practice, using the wrong input block size is very unlikely to cause any issues, other than for interoperability of course, but the security proof of the HMAC construction assumes, for simplicity, that the key is padded to be exactly one input block long.  Thus, and in order to ensure that all implementations of HMAC-RIPEMD160 produce the same output for the same key and message, it's best to stick to this rule.)</p>

<hr>

<p><strong>Edit 2:</strong> OK, I tried to test the code I posted above against the <a href=""http://tools.ietf.org/html/rfc2286"" rel=""nofollow"">HMAC-RIPEMD160 test vectors from RFC 2286</a>, and just could not get the results to match.  What I finally realized was two things:</p>

<ol>
<li><p>The non-OO <code>hmac()</code> function exported by Digest::HMAC assumes that the custom hash function passed to it will accept multiple parameters and concatenate them.  My original implementation of the <code>ripemd160()</code> wrapper above did not (but I fixed it so that now it does).  This is arguably a bug in Digest::HMAC, or at least in its documentation.</p></li>
<li><p>The Crypt::RIPEMD160 module comes with the submodule <a href=""http://search.cpan.org/perldoc?Crypt%3a%3aRIPEMD160%3a%3aMAC"" rel=""nofollow"">Crypt::RIPEMD160::MAC</a>, which already implements HMAC-RIPEMD160, even though, for some perverse reason, <em>the documentation doesn't actually use the name HMAC.</em>  If you look at the code, though, or just compare the output to the official test vectors, that's indeed exactly what it does.</p></li>
</ol>
","16095819","1004","<perl><hmac>","2","1","3","2013-09-09 11:58:17","16095819","2","1","2022754","","2013-04-19 07:56:26","2013-04-18 20:36:34","","2013-04-19 14:25:22","2013-04-19 01:31:09"
"16092584","Perl alternative to hash_hmac('ripemd160', $data, $key) in PHP","<p>I need to produce same result in Perl that <code>hash_hmac('ripemd160', $data, $key)</code> produces in PHP</p>

<p>Managed to trace it down to two perl modules, just cant get them working together...</p>

<p>Digest::HMAC and Crypt::RIPEMD160</p>

<pre><code>use Crypt::RIPEMD160;

use Digest::HMAC;
$hmac = Digest::HMAC-&gt;new('bar', 'Crypt::RIPEMD160');

$hmac-&gt;add('foo');
$digest = $hmac-&gt;digest;
</code></pre>

<p>anyone got any ideas what am i doing wrong?</p>

<p>If i use the code above i get following error:
Can't call method ""add"" on an undefined value at /usr/lib64/perl5/vendor_perl/5.12.4/Digest/HMAC.pm line 28.</p>

<p>Since i was unable to pass the hash function reference in the code above, after looking at the HMAC module at the hmac function i thought i could write it in my code direct:</p>

<pre><code>my $data = 'bar';
my $key = 'foo';
$block_size = 160;
$block_size ||= 64;
$key = Crypt::RIPEMD160-&gt;hash($key) if length($key) &gt; $block_size;
my $k_ipad = $key ^ (chr(0x36) x $block_size);
my $k_opad = $key ^ (chr(0x5c) x $block_size);
my $digest =  Crypt::RIPEMD160-&gt;hash($k_opad, Crypt::RIPEMD160-&gt;hash($k_ipad, $data));
</code></pre>

<p>this does produce a hash but still a wrong one</p>

<p>PHP generated hash: isceebbf5cd5e34c888b493cf7f7c39a7b181b65a3</p>

<p>The perl hash: hash21a2fa2bf39fd99d4c9cdf147added69c32d45f9e</p>

<p>To be honest i dont care how its done and what modules are used as long as I get same hash as the php function produces...  at this point I am tempted writing a php script that i call from perl just to get that hash... :( as I am runing out of ideas...</p>
","<p>I am perhaps a bit late in this discussion but when talking about <a href=""https://metacpan.org/module/Crypt%3a%3aDigest%3a%3aRIPEMD160"" rel=""nofollow"">Crypt::Digest::RIPEMD160</a> (I am the author of this module :) you can easily create HMAC with <a href=""https://metacpan.org/module/Crypt%3a%3aMac%3a%3aHMAC"" rel=""nofollow"">Crypt::Mac::HMAC</a> from the same family of modules.</p>

<p>It is as simple as:</p>

<pre><code>use Crypt::Mac::HMAC 'hmac';
$hmac_raw = hmac('RIPEMD160', $key, $data);
</code></pre>
","18697727","1004","<perl><hmac>","2","2","3","2013-09-09 11:58:17","16095819","2","1","2022754","","2013-04-19 07:56:26","2013-04-18 20:36:34","","","2013-09-09 11:58:17"
"47347950","shopify hmac verification php","<p>This is my code :</p>

<pre><code>function verifyRequest($request, $secret) {
  // Per the Shopify docs:
  // Everything except hmac and signature...

  $hmac = $request['hmac'];
  unset($request['hmac']);
  unset($request['signature']);

  // Sorted lexilogically...
  ksort($request);

  // Special characters replaced...
  foreach ($request as $k =&gt; $val) {
    $k = str_replace('%', '%25', $k);
    $k = str_replace('&amp;', '%26', $k);
    $k = str_replace('=', '%3D', $k);
    $val = str_replace('%', '%25', $val);
    $val = str_replace('&amp;', '%26', $val);
    $params[$k] = $val;
  }

  echo $http = ""protocol="". urldecode(""https://"").http_build_query( $params) ;
  echo $test = hash_hmac(""sha256"", $http , $secret);

  // enter code hereVerified when equal
  return $hmac === $test;
}
</code></pre>

<p>The hmac from shopi and hmac created from my code is not matching.</p>

<p>What am I doing wrong?</p>
","<p>You only need to include the request parameters when creating the list of key-value pairs - don't need ""protocol=https://"".</p>

<p><a href=""https://help.shopify.com/api/getting-started/authentication/oauth#verification"" rel=""nofollow noreferrer"">https://help.shopify.com/api/getting-started/authentication/oauth#verification</a></p>

<p>You'll need to urldecode() the result of http_build_query(). It returns a url-encoded query string.</p>

<p><a href=""http://php.net/manual/en/function.http-build-query.php"" rel=""nofollow noreferrer"">http://php.net/manual/en/function.http-build-query.php</a></p>

<p>Instead of:</p>

<pre><code> echo $http = ""protocol="". urldecode(""https://"").http_build_query( $params) ;
 echo $test = hash_hmac(""sha256"", $http , $secret);
</code></pre>

<p>Something like this:</p>

<pre><code> $http = urldecode(http_build_query($params));
 $test = hash_hmac('sha256', $http, $secret);
</code></pre>
","47360609","1001","<php><validation><shopify><hmac>","1","1","2","2019-06-20 08:49:15","","0","","5947043","","2017-11-17 11:13:52","2017-11-17 10:02:05","","","2017-11-17 23:09:17"
"47347950","shopify hmac verification php","<p>This is my code :</p>

<pre><code>function verifyRequest($request, $secret) {
  // Per the Shopify docs:
  // Everything except hmac and signature...

  $hmac = $request['hmac'];
  unset($request['hmac']);
  unset($request['signature']);

  // Sorted lexilogically...
  ksort($request);

  // Special characters replaced...
  foreach ($request as $k =&gt; $val) {
    $k = str_replace('%', '%25', $k);
    $k = str_replace('&amp;', '%26', $k);
    $k = str_replace('=', '%3D', $k);
    $val = str_replace('%', '%25', $val);
    $val = str_replace('&amp;', '%26', $val);
    $params[$k] = $val;
  }

  echo $http = ""protocol="". urldecode(""https://"").http_build_query( $params) ;
  echo $test = hash_hmac(""sha256"", $http , $secret);

  // enter code hereVerified when equal
  return $hmac === $test;
}
</code></pre>

<p>The hmac from shopi and hmac created from my code is not matching.</p>

<p>What am I doing wrong?</p>
","<p>hmac can be calculated in any programming language using sha256 cryptographic algorithm.</p>

<p>However the doc for hmac verification is provided by shopify but still there is confusion among app developers how to implement it correctly.</p>

<p>Here is the code in php for hmac verification.
Ref. <a href=""http://code.codify.club"" rel=""nofollow noreferrer"">http://code.codify.club</a></p>

<pre><code>&lt;?php

function verifyHmac()
{
  $ar= [];
  $hmac = $_GET['hmac'];
  unset($_GET['hmac']);

  foreach($_GET as $key=&gt;$value){

    $key=str_replace(""%"",""%25"",$key);
    $key=str_replace(""&amp;"",""%26"",$key);
    $key=str_replace(""="",""%3D"",$key);
    $value=str_replace(""%"",""%25"",$value);
    $value=str_replace(""&amp;"",""%26"",$value);

    $ar[] = $key.""="".$value;
  }

  $str = join('&amp;',$ar);
  $ver_hmac =  hash_hmac('sha256',$str,""YOUR-APP-SECRET-KEY"",false);

  if($ver_hmac==$hmac)
  {
    echo 'hmac verified';
  }

}
?&gt;
</code></pre>
","50256127","1001","<php><validation><shopify><hmac>","1","1","2","2019-06-20 08:49:15","","0","","5947043","","2017-11-17 11:13:52","2017-11-17 10:02:05","","","2018-05-09 14:42:19"
"19887799","EXC_BAD_ACCESS on CCHmac","<p>i am doing HMAC-SHA256 encoding . Tried but didn't find any solutions. </p>

<pre><code>#include &lt;CommonCrypto/CommonHMAC.h&gt;

- (NSString *)hmacWithKey:(NSString *)key andData:(NSString *)data
{
const char *cKey  = [key cStringUsingEncoding:NSASCIIStringEncoding];
const char *cData = [data cStringUsingEncoding:NSASCIIStringEncoding];
unsigned char cHMAC[CC_SHA256_DIGEST_LENGTH];

///////////////////////////////////////////////////////////////
////but on below line of code i am getting EXC_BAD_ACCESS//////
///////////////////////////////////////////////////////////////

CCHmac(kCCHmacAlgSHA256, cKey, strlen(cKey), cData, strlen(cData), cHMAC);

//////////////////////////////////////////////

NSData *out = [NSData dataWithBytes:cHMAC length:CC_SHA256_DIGEST_LENGTH];

// description converts to hex but puts &lt;&gt; around it and spaces every 4 bytes
NSString *hash = [out description];
hash = [hash stringByReplacingOccurrencesOfString:@"" "" withString:@""""];
hash = [hash stringByReplacingOccurrencesOfString:@""&lt;"" withString:@""""];
hash = [hash stringByReplacingOccurrencesOfString:@""&gt;"" withString:@""""];
// hash is now a string with just the 40char hash value in it
NSLog(@""%@"",hash);
return hash;
}
</code></pre>

<p>Please tell me whats wrong i am doing here.
Thanks </p>
","<p><code>cStringUsingEncoding:NSASCIIStringEncoding</code> can return <code>NULL</code> if the string contains non-ASCII characters.
Therefore you should check if <code>cKey == NULL</code> or <code>cData == NULL</code>.</p>

<p>Or better, convert to UTF-8 strings:</p>

<pre><code>const char *cKey  = [key UTF8String];
const char *cData = [data UTF8String];
</code></pre>
","19887956","990","<iphone><objective-c><encoding><exc-bad-access><hmac>","2","9","2","2013-11-10 12:33:18","19887956","4","","","","","2013-11-10 08:42:28","","","2013-11-10 09:04:11"
"19887799","EXC_BAD_ACCESS on CCHmac","<p>i am doing HMAC-SHA256 encoding . Tried but didn't find any solutions. </p>

<pre><code>#include &lt;CommonCrypto/CommonHMAC.h&gt;

- (NSString *)hmacWithKey:(NSString *)key andData:(NSString *)data
{
const char *cKey  = [key cStringUsingEncoding:NSASCIIStringEncoding];
const char *cData = [data cStringUsingEncoding:NSASCIIStringEncoding];
unsigned char cHMAC[CC_SHA256_DIGEST_LENGTH];

///////////////////////////////////////////////////////////////
////but on below line of code i am getting EXC_BAD_ACCESS//////
///////////////////////////////////////////////////////////////

CCHmac(kCCHmacAlgSHA256, cKey, strlen(cKey), cData, strlen(cData), cHMAC);

//////////////////////////////////////////////

NSData *out = [NSData dataWithBytes:cHMAC length:CC_SHA256_DIGEST_LENGTH];

// description converts to hex but puts &lt;&gt; around it and spaces every 4 bytes
NSString *hash = [out description];
hash = [hash stringByReplacingOccurrencesOfString:@"" "" withString:@""""];
hash = [hash stringByReplacingOccurrencesOfString:@""&lt;"" withString:@""""];
hash = [hash stringByReplacingOccurrencesOfString:@""&gt;"" withString:@""""];
// hash is now a string with just the 40char hash value in it
NSLog(@""%@"",hash);
return hash;
}
</code></pre>

<p>Please tell me whats wrong i am doing here.
Thanks </p>
","<p>I ran the OPs code with sample strings with no error so the error must be in the input. Either one or more of the inputs is nil or non-ascii.</p>

<p>Please provide sample input that fails.</p>

<p>BTW, it is not necessary to use char strings, here is an example using NSData:</p>

<pre><code>NSData *cKey  = [key  dataUsingEncoding:NSUTF8StringEncoding];
NSData *cData = [data dataUsingEncoding:NSUTF8StringEncoding];
NSMutableData *out = [NSMutableData dataWithLength:CC_SHA256_DIGEST_LENGTH];

CCHmac(kCCHmacAlgSHA256, cKey.bytes, cKey.length, cData.bytes, cData.length, out.mutableBytes);
NSLog(@""out: %@"", out);
</code></pre>
","19889727","990","<iphone><objective-c><encoding><exc-bad-access><hmac>","2","1","2","2013-11-10 12:33:18","19887956","4","","","","","2013-11-10 08:42:28","","","2013-11-10 12:33:18"
"28142206","C HMAC Implementation output check","<p>I'm attempting to implement <code>HMAC</code> via <code>sha256</code>, but my output differs from Wikipedia examples.  </p>

<p>Expected output: </p>

<pre><code>0xf7bc83f430538424b13298e6aa6fb143ef4d59a14946175997479dbc2d1a3cd8
</code></pre>

<p>Actual output:</p>

<pre><code>0x18615993cb350238e00f3c9858befb04160c85b8b05d797486cc47d0d864c04b
</code></pre>

<p>Code:</p>

<pre><code>#include &lt;openssl/conf.h&gt;
#include &lt;openssl/evp.h&gt;
#include &lt;openssl/err.h&gt;

#include &lt;string.h&gt;

unsigned char *hash(unsigned char *input, unsigned int in_len, unsigned int *out_len);
unsigned char *hmac(unsigned char *key, unsigned int key_len,
        unsigned char *data, unsigned int data_len,
        unsigned char *output, unsigned int *out_len);
void debug(unsigned char *in, unsigned int len);

int main(int argc, char **argv)
{
        unsigned int asdf;

        unsigned char *h = hmac(""key"", 3, ""The quick brown fox jumps over the lazy dog"",
                strlen(""The quick brown fox jumps over the lazy dog""),
                NULL, NULL);
}

void debug(unsigned char *in, unsigned int len)
{
        int i;

        for(i=0;i&lt;len;i++) {

                printf(""%02x"", in[i]);

        }

        printf(""\n"");
}

unsigned char *hmac(unsigned char *key, unsigned int key_len,
        unsigned char *data, unsigned int data_len,
        unsigned char *output, unsigned int *out_len)
{
        #define BLOCK_SIZE 32

        int i, nkey, o_len;
        char i_pad[BLOCK_SIZE], o_pad[BLOCK_SIZE];

        /* Key init */

        if(key_len &gt; BLOCK_SIZE)
                key = hash(key, key_len, &amp;nkey);
        else if(key_len &lt; BLOCK_SIZE) {
                // zero pad to the right
                char *n_key = malloc(BLOCK_SIZE);
                memset(n_key, '\0', BLOCK_SIZE);
                memcpy(n_key, key, key_len);
                key = n_key;
        }

        printf(""key:\n"");
        debug(key, BLOCK_SIZE);

        /* Padding init */

        for(i=0;i&lt;BLOCK_SIZE;i++) {
                o_pad[i] = key[i] ^ 0x5c;
                i_pad[i] = key[i] ^ 0x36;
        }

        printf(""o_pad:\n"");
        debug(o_pad, BLOCK_SIZE);

        printf(""i_pad:\n"");
        debug(i_pad, BLOCK_SIZE);

        /* Stage 1: calculate hash(i_pad . data)*/

        unsigned char *stg1 = malloc(BLOCK_SIZE+data_len);
        memcpy(stg1, i_pad, BLOCK_SIZE);
        memcpy(stg1+BLOCK_SIZE, data, data_len);

        printf(""stg1 input:\n""); debug(stg1, BLOCK_SIZE+data_len);
        stg1 = hash(stg1, BLOCK_SIZE+data_len, &amp;o_len);
        printf(""stg1 hashed:\n""); debug(stg1, BLOCK_SIZE);

        /* Stage 2: calculate hash(o_pad . stg1) */

        unsigned char *stg2 = malloc(BLOCK_SIZE+o_len);
        memcpy(stg2, o_pad, BLOCK_SIZE);
        memcpy(stg2+BLOCK_SIZE, stg1, o_len);

        printf(""stg2 input:\n""); debug(stg2, BLOCK_SIZE+o_len);
        stg2 = hash(stg2, BLOCK_SIZE*2+data_len, &amp;o_len);
        printf(""stg2 hashed:\n""); debug(stg2, BLOCK_SIZE);

}

unsigned char *hash(unsigned char *input, unsigned int in_len, unsigned int *out_len)
{
        EVP_MD_CTX ctx;
        int i;
        unsigned char *ret = malloc(EVP_MAX_MD_SIZE);

        EVP_MD_CTX_init(&amp;ctx);
        EVP_DigestInit_ex(&amp;ctx, EVP_sha256(), NULL);

        EVP_DigestUpdate(&amp;ctx, input, in_len);
        EVP_DigestFinal_ex(&amp;ctx, ret, out_len);
        EVP_MD_CTX_cleanup(&amp;ctx);

        return ret;
}
</code></pre>

<p>Can anyone spot any obvious flaws? Thanks.</p>
","<p>You are doing it all right with stg1, but in final stage you should make EVP_DigestUpdate twice instead of memcpy.</p>

<pre><code>39c39
&lt;         #define BLOCK_SIZE 32
---
&gt;         #define BLOCK_SIZE 64
85,90d84
&lt;         memcpy(stg2, o_pad, BLOCK_SIZE);
&lt;         memcpy(stg2+BLOCK_SIZE, stg1, o_len);
&lt; 
&lt;         printf(""stg2 input:\n""); debug(stg2, BLOCK_SIZE+o_len);
&lt;         stg2 = hash(stg2, BLOCK_SIZE*2+data_len, &amp;o_len);
&lt;         printf(""stg2 hashed:\n""); debug(stg2, BLOCK_SIZE);
91a86,96
&gt;         EVP_MD_CTX ctx;
&gt;         EVP_MD_CTX_init(&amp;ctx);
&gt;         EVP_DigestInit_ex(&amp;ctx, EVP_sha256(), NULL);
&gt;         EVP_DigestUpdate(&amp;ctx, o_pad, BLOCK_SIZE);
&gt;         EVP_DigestUpdate(&amp;ctx, stg1, o_len);
&gt;         EVP_DigestFinal_ex(&amp;ctx, stg2, &amp;o_len);
&gt;         EVP_MD_CTX_cleanup(&amp;ctx);
&gt; 
&gt;         printf(""output:\n"");
&gt;         debug(stg2, o_len);
&gt;         return stg2;
</code></pre>

<p>output:</p>

<p>f7bc83f430538424b13298e6aa6fb143ef4d59a14946175997479dbc2d1a3cd8</p>
","28195543","981","<c><openssl><hmac><sha256>","0","0","1","2015-01-28 15:05:17","","2","","3933332","","2015-01-25 22:17:04","2015-01-25 22:15:34","","","2015-01-28 15:05:17"
"39304751","Fetching data from API with HMAC SHA512 - Swift","<p>I'm trying to use API described <a href=""https://github.com/bitmarket-net/api"" rel=""nofollow"">here</a>. It uses HMAC SHA512 authorization based on a secret key.</p>

<p>There is an example of implementation in PHP: </p>

<pre><code>function bitmarket_api($method, $params = array())
{
  $key = ""klucz_jawny"";
  $secret = ""klucz_tajny"";

  $params[""method""] = $method;
  $params[""tonce""] = time();

  $post = http_build_query($params, """", ""&amp;"");
  $sign = hash_hmac(""sha512"", $post, $secret);
  $headers = array(
      ""API-Key: "" . $key,
      ""API-Hash: "" . $sign,
  );

  $curl = curl_init();
  curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);
  curl_setopt($curl, CURLOPT_URL, ""https://www.bitmarket.pl/api2/"");
  curl_setopt($curl, CURLOPT_POST, true);
  curl_setopt($curl, CURLOPT_POSTFIELDS, $post);
  curl_setopt($curl, CURLOPT_HTTPHEADER, $headers);
  $ret = curl_exec($curl);

  return json_decode($ret);
}
</code></pre>

<p>Then I was trying to implement it in Swift:</p>

<pre><code>import Alamofire
import CryptoSwift

func getRawJSON(method: String, params: [String]) -&gt; String {
    let publicKey = ""publicKeyHere""
    let secretKey = ""secretKeyHere""
    let APIURL = ""https://www.bitmarket.pl/api2/""

    var params = [
        ""method"": method,
        ""tonce:"": NSDate().timeIntervalSince1970
        ] as [String : Any]

    let hmac: Array&lt;UInt8&gt; = try! HMAC(key: secretKey.utf8.map({$0}), variant: .sha512).authenticate(params)

    var headers = [
        ""API-Key"": publicKey,
        ""API-Hash"": hmac
    ] as [String : Any]
}
</code></pre>

<p>As you may noticed, there is no Alamofire usage for fetching data yet because I have a problem with preparing data to send. I mean I've messed up something with CryptoSwift because I'm getting this error: <code>Cannot convert value of type '[String : Any]' to expected argument type 'Array&lt;UInt8&gt;'</code> when I'm trying to declare <code>hmac</code> variable.</p>

<p>How to solve it? 
I probably have to convert <code>params</code> array to <code>Array&lt;UInt8</code> somehow, but I don't know how to do that. I'm not sure is everything correct too.</p>

<p><strong>Edit:</strong>
Thanks to Martin R, the actual code is:</p>

<pre><code>func getRawJSON(method: String, paramether: String) {
    let publicKey = ""publicKeyHere""
    let secretKey = ""secretKeyHere""
    let APIURL = ""https://www.bitmarket.pl/api2/""

    let query = NSURLComponents()
    query.queryItems = [NSURLQueryItem(name: ""method"", value: method) as URLQueryItem,
                        NSURLQueryItem(name: ""tonce"", value: String(Int(NSDate().timeIntervalSince1970))) as URLQueryItem]

    let requestString = query.query!
    let requestData = Array(requestString.utf8)

    let params = [
        ""method"": method,
        ""tonce:"": String(Int(NSDate().timeIntervalSince1970))
        ] as [String : Any]

    let hmac: Array&lt;UInt8&gt; = try! HMAC(key: secretKey.utf8.map({$0}), variant: .sha512).authenticate(requestData)

    let hmacData = Data(bytes: hmac)
    let hmacString = hmacData.base64EncodedString()

    let headers = [
        ""API-Key"": publicKey,
        ""API-Hash"": hmacString
    ] as [String : String]

    Alamofire.request(APIURL, withMethod: .post, parameters: params, encoding: .url, headers: headers)
        .responseJSON { response in
        print(response)
    }
}
</code></pre>

<p>Unfortunately, after calling the function (<code>getRawJSON(method: ""info"", paramether: """")</code>), I'm fetching a JSON with an error:</p>

<pre><code>{
error = 502;
errorMsg = ""Invalid message hash"";
time = 1472910139;
}
</code></pre>

<p>What's wrong with my hash?</p>
","<p>Your Swift code is missing what</p>

<pre><code>$post = http_build_query($params, """", ""&amp;"");
</code></pre>

<p>does in the PHP version: Create a query string from the given parameters.
You can either ""manually"" build that string, or use <code>NSURLComponents</code>:</p>

<pre><code>let comps = NSURLComponents()
comps.queryItems = [ NSURLQueryItem(name: ""method"",
                                    value: ""YOUR_METHOD""),
                     NSURLQueryItem(name: ""tonce"",
                                    value: String(Int(NSDate().timeIntervalSince1970))) ]
let requestString = comps.query!
print(requestString) // method=YOUR_METHOD&amp;tonce=1472893376
</code></pre>

<p>Finally convert this string to an <code>[UInt8]</code> array for the HMAC
function:</p>

<pre><code>let requestData = Array(requestString.utf8)
print(requestData) // [109, 101, 116, ..., 54]
</code></pre>
","39305185","975","<swift><hmac><sha512>","1","0","1","2016-09-03 13:48:30","","0","","5132293","","2016-09-03 13:48:30","2016-09-03 08:12:09","","","2016-09-03 09:06:31"
"6986457","IIS dumps Authorization header on redirect after WCF service call without trailing slash","<p>I'm putting together a WCF REST service running in an IIS 7 website instance, and I'm using an <a href=""http://en.wikipedia.org/wiki/Hmac"" rel=""nofollow"">HMAC</a> authentication scheme which inserts a token and the HMAC into the Authentication header. An example header list on a typical request might look like this:</p>

<pre><code>GET http://api.mydomain.com/Contacts HTTP/1.1
Authorization: 774F035C-FRTB-4207-DDDD-31BF1534AD96:9h0Whke9Bgi3XSHPo/YSXw==
Content-Type: application/xml; charset=utf-8
Host: api.mydomain.com
Connection: Keep-Alive
</code></pre>

<p>I have the service set up using routing instead of a .svc file, so my Global.asax looks like this:</p>

<pre><code>    protected void Application_Start(object sender, EventArgs e)
    {
        RouteTable.Routes.Add(new ServiceRoute(""Users"", new WebServiceHostFactory(), typeof(UsersService)));
        RouteTable.Routes.Add(new ServiceRoute(""Widgets"", new WebServiceHostFactory(), typeof(WidgetsService)));
    }
</code></pre>

<p>The problem is that when the service is declared with routing like that, if IIS receives a call to a <code>WebGet</code> uri <em>without a trailing slash</em>, it does a 307 redirect to the uri <em>with</em> a trailing slash. Helpful, you'd think, <strong>but the problem is that the redirect dumps the Authorization header.</strong></p>

<p>My service classes are all kosher and work great in every other respect. <strong>Is there a way for me to be able to have that Authorization header be maintained in the event of a redirect?</strong> I suspect the solution is going to be an IIS configuration thing, though I guess I could put all kinds of routing hacks in place to pick up the no-slash version of the uri.</p>

<p><strong>Update:</strong><br>
I found <a href=""http://blogs.msdn.com/b/paulking/archive/2011/03/31/how-to-lose-your-authorization-head-er-with-a-bad-url.aspx"" rel=""nofollow"">this article</a> that verifies this behavior, but doesn't really give any fix.</p>
","<p>So I'm not entirely sure why IIS is getting in the middle of things here. When you say ""dumps the Authorization header"" what do you mean? You mean it's re-sending it as part of the redirect or it's not sending it?</p>

<p>WCF wise you can probably keep the redirect from happening. This is one of those things where you'll want to slap someone at Microsoft for <em>almost</em> getting it right. The <code>UriTemplate</code> class itself has the ability to ignore trailing slashes via the aptly named <a href=""http://msdn.microsoft.com/en-us/library/system.uritemplate.ignoretrailingslash.aspx"" rel=""nofollow noreferrer""><code>IgnoreTrailingSlash</code> property</a>. Unfortunately, the WCF <code>WebInvoke/Get</code> attributes don't actually map this property through in any way and therefore always create templates that are bound exactly to whatever you type into the <code>UriTemplate</code> property.</p>

<p>So the simplest workaround, which is nasty I admit, is to overload the method on the WCF contract with a second signature that has the trailing slash. For example:</p>

<pre><code>[OperationContract]
[WebGet(UriTemplate=""/Users"")]
public List&lt;User&gt; GetUsers()
{
   .... some code here ...
}

[OperationContract]
[WebGet(UriTemplate=""/Users/"")]
public List&lt;User&gt; GetUsersSlash()
{
   return this.GetUsers();
}
</code></pre>

<p>Fugly, right? Especially bad if this is a pattern you want to repeat over and over. So another semi-but-less-hacky option is to write custom operation selector logic which you apply to your service via a custom behavior. There's more details on doing this in <a href=""https://stackoverflow.com/questions/6073581/uritemplate-wcf/6074192#6074192"">this StackOverflow answer</a>.</p>
","6987962","974","<wcf><rest><iis-7><hmac>","0","0","1","2011-08-08 20:11:57","","0","","240439","","2011-08-08 19:10:44","2011-08-08 18:03:19","","2017-05-23 12:04:17","2011-08-08 20:11:57"
"24691762","Equivalent HMAC SHA512 key of ruby code for Python","<p>What is the equivalent HMAC SHA512 key of ruby code for the following python code?</p>

<p><strong>Python</strong>:</p>

<pre><code> import hmac
 import hashlib
 response = hmac.new(PRIVATE_KEY, post_data, hashlib.sha512).hexdigest()
</code></pre>

<p>I have added a code in ruby as follows. But does not yield the same response as in python</p>

<p><strong>Ruby</strong>:</p>

<pre><code> require 'digest/hmac'
 response = Digest::HMAC.hexdigest(post_data, PRIVATE_KEY ,Digest::SHA512)
</code></pre>

<p>url_request_object = urllib2.Request(""%s/%s"" % (BASE_API_URL,url_suffix),
                                         post_data,
                                         headers)
response = urllib2.urlopen(url_request_object)</p>

<p><strong>The following is working for me:</strong></p>

<pre><code>   digest = OpenSSL::Digest.new('sha512')

    sign = OpenSSL::HMAC.hexdigest(digest, PRIVATE_KEY, post_data)
</code></pre>
","<p>FYI digest/hmac shouldn't be used. From the Ruby docs</p>

<blockquote>
  <p>CAUTION: Use of this library is discouraged, because this implementation was meant to be experimental but somehow got into the 1.9 series without being noticed.</p>
</blockquote>

<p>The docs suggest using openssl, but I had better luck with ruby-hmac.  Also, is SHA512 absolutely necessary for you? Here is a solution that works using SHA1.</p>

<p><strong>Python</strong>:</p>

<pre><code>import hmac
import hashlib
response = hmac.new(""PRIVATE_KEY"", ""Stack OverFlow Funtime"", hashlib.sha1).hexdigest()
</code></pre>

<p>gives 203bf02ea1c71df39a1a6b8ad00db836ec89113c</p>

<p><strong>Ruby</strong>:</p>

<pre><code>require 'rubygems'
require 'hmac-sha1'

key = 'PRIVATE_KEY'
signature = ""Stack OverFlow Funtime""
hmac = HMAC::SHA1.new(key)
hmac.update(signature)
puts ""#{hmac.hexdigest}\n""
</code></pre>

<p>gives 203bf02ea1c71df39a1a6b8ad00db836ec89113c</p>

<p>So using SHA1 and ruby-hmac you can get the same hash in both languages. Hope that helps.</p>
","24692704","971","<python><ruby-on-rails><hmac><hmacsha1>","1","1","1","2014-07-11 11:35:30","","0","1","2541366","","2014-07-11 11:35:30","2014-07-11 06:56:34","","","2014-07-11 07:53:29"
"4118541","Preventing ""padding oracle"" attack if data is streamed or too large for HMAC?","<p>I know that the best solution against the padding oracle attack is to wrap and append a HMAC to the complete encrypted message. But what other solutions are there? What if my data is so large that I need to stream it? I can check the HMAC at the very end, but I cannot afford loading the whole file twice and check the HMAC first and then stream and decrypt it to the user?</p>

<p>Are there different ways?</p>

<p>Can an attacker also do padding oracle attacks if I use AES_CBC(zlib(data))? zlib will emit errors if the compressed data is garbled eventually. Can an attacker use that error of zlib to get one bit of information, too?</p>
","<p>The suggested fix for the padding oracle attacks is to Encrypt-Then-MAC.  This means that you can break the ciphertext up into conveniently-sized blocks (say, 4096 bytes) and MAC each individually.</p>
","4124472","967","<encryption><padding><hmac><padding-oracle-attack>","1","2","1","2015-08-16 12:19:44","4124472","0","","1816580","","2015-08-16 12:19:44","2010-11-07 16:14:46","","","2010-11-08 13:55:45"
"21279618","When is an ELF .text segment not an ELF .text segment?","<p>I'm having trouble finding appropriate documentation for the problem I'm having generating consistent HMACS in the kernel and user space. According to R. Love in LKD, the Memory Descriptor mm->start_code and mm->end_code are supposed to contain the .text segment. Finding the .text segment in a static executable is well defined in the ELF documentation and is easy to get at. So,given the following two code snippets, one would expect to get a matching HMAC:</p>

<p>Kernel:</p>

<pre><code>__mm = get_task_mm(__task);

__retcode = ntru_crypto_hmac_init(__crypto_context);
if(__retcode != NTRU_CRYPTO_HMAC_OK)
    return 1;

__retcode = ntru_crypto_hmac_update(__crypto_context, (const uint8_t*)__mm-&gt;start_code, 
                                    __mm-&gt;end_code - __mm-&gt;start_code);
if(__retcode != NTRU_CRYPTO_HMAC_OK)
   return 1;

__retcode = ntru_crypto_hmac_final(__crypto_context, __hmac);
if(__retcode != NTRU_CRYPTO_HMAC_OK)
    return 1;

return 0;
</code></pre>

<p>Userland:</p>

<pre><code>for (j = 0; j &lt; file_hdr32.e_shnum; j++)
{
   if (!strcmp("".text"", strIndex + section_hdr32[j]-&gt;sh_name))
   {
       retcode = ntru_crypto_hmac_init(__crypto_context());
       if(retcode != NTRU_CRYPTO_HMAC_OK)
       {
            syslog(LOG_ERR, ""ntru_crypto_hmac_init error: retcode = %d, TID(0x%lx)"",
                                     retcode,pthread_self());
            return 0;
        }       

       retcode = ntru_crypto_hmac_update(__crypto_context(), 
                 filebuf + section_hdr32[j]-&gt;sh_offset, section_hdr32[j]-&gt;sh_size);
       if(retcode != NTRU_CRYPTO_HMAC_OK)
       {
           syslog(LOG_ERR, ""Internal crypto error (%d)"", retcode);
           return 0;
       }

       retcode = ntru_crypto_hmac_final(__crypto_context(), _hmac);
       if(retcode != NTRU_CRYPTO_HMAC_OK)
       {
           syslog(LOG_ERR, ""Failed to finalize HMAC, TID(0x%lx)"", pthread_self());
           return 0;
       }

       return 1;
   }
}
</code></pre>

<p>In both cases the .text segment is exactly where its documented to be but they never match. I've generated userland HMACS for all 17,000 executable files on the system so even if the code segment in the kernel memory descriptor were pointing to a dependency, rather than the primary executable, I still should get a match, but no dice. There's something fundamentally different between the two "".text"" segments and I was wondering if anyone out there knew what it was so I can save some time--any clues?   Thanks in advance, pete.;1</p>
","<blockquote>
  <p>There's something fundamentally different between the two "".text"" segments</p>
</blockquote>

<p>Your problem is that you are ignoring the difference between <em>segments</em> and <em>sections</em>.</p>

<p>The <code>ELF</code> format is an <em>executable</em> and <em>linking</em> format. Segments are used for the former, sections for the latter (and linking here means static linking, i.e. build-time). Once the binary is linked, sections can be completely discarded from it, and only segments are needed at runtime. Segments are <code>mmap</code>ed, not sections.</p>

<p>Now let's look at the difference between the two.</p>

<pre><code>readelf -l /bin/date

Elf file type is EXEC (Executable file)
Entry point 0x402000
There are 9 program headers, starting at offset 64

Program Headers:
  Type           Offset             VirtAddr           PhysAddr
                 FileSiz            MemSiz              Flags  Align
  PHDR           0x0000000000000040 0x0000000000400040 0x0000000000400040
                 0x00000000000001f8 0x00000000000001f8  R E    8
  INTERP         0x0000000000000238 0x0000000000400238 0x0000000000400238
                 0x000000000000001c 0x000000000000001c  R      1
      [Requesting program interpreter: /lib64/ld-linux-x86-64.so.2]
  LOAD           0x0000000000000000 0x0000000000400000 0x0000000000400000
                 0x000000000000d5ac 0x000000000000d5ac  R E    200000
  LOAD           0x000000000000de10 0x000000000060de10 0x000000000060de10
                 0x0000000000000440 0x0000000000000610  RW     200000
  DYNAMIC        0x000000000000de38 0x000000000060de38 0x000000000060de38
                 0x00000000000001a0 0x00000000000001a0  RW     8
  NOTE           0x0000000000000254 0x0000000000400254 0x0000000000400254
                 0x0000000000000044 0x0000000000000044  R      4
  GNU_EH_FRAME   0x000000000000c700 0x000000000040c700 0x000000000040c700
                 0x00000000000002a4 0x00000000000002a4  R      4
  GNU_STACK      0x0000000000000000 0x0000000000000000 0x0000000000000000
                 0x0000000000000000 0x0000000000000000  RW     8
  GNU_RELRO      0x000000000000de10 0x000000000060de10 0x000000000060de10
                 0x00000000000001f0 0x00000000000001f0  R      1

 Section to Segment mapping:
  Segment Sections...
   00
   01     .interp
   02     .interp .note.ABI-tag .note.gnu.build-id .gnu.hash .dynsym .dynstr .gnu.version .gnu.version_r .rela.dyn .rela.plt .init .plt .text .fini .rodata .eh_frame_hdr .eh_frame
   03     .ctors .dtors .jcr .dynamic .got .got.plt .data .bss
   04     .dynamic
   05     .note.ABI-tag .note.gnu.build-id
   06     .eh_frame_hdr
   07
   08     .ctors .dtors .jcr .dynamic .got
</code></pre>

<p>Above you can see that <em>multiple</em> sections (<code>.interp</code>, <code>.note.ABI-tag</code>, ... <code>.text</code>, ...) all got mapped into a single <code>PT_LOAD</code> <em>segment</em>. All these sections have the same protections, and all are ""covered"" by a single <code>[mm-&gt;start_core, mm-&gt;end_code)</code> region.</p>

<p>Compare this to the <code>.text</code> section:</p>

<pre><code>readelf -WS /bin/date | grep '\.text'
  [13] .text             PROGBITS        0000000000401900 001900 0077f8 00  AX  0   0 16
</code></pre>

<p>You'll note that the section is smaller and begins at a different offset.</p>

<p>No wonder you get different HMAC then. Try computing HMAC in user-land over segments, and you should get a match.</p>
","21288114","967","<linux-kernel><elf><hmac>","2","2","1","2014-01-22 16:11:22","21288114","0","1","","","","2014-01-22 09:59:32","","","2014-01-22 16:11:22"
"44493401","Android Java and PHP HASH HMAC SHA256 different result","<p>I saw some same questions in stack-overflow but it doesn't find answer.</p>

<p>Android Java:</p>

<pre><code>import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.util.Base64;
import android.util.Log;
import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;

private String hash_hmac(String str, String secret) throws Exception{
    Mac sha256_HMAC = Mac.getInstance(""HmacSHA256"");
    byte[] string = str.getBytes();
    String stringInBase64 = Base64.encodeToString(string, Base64.DEFAULT);
    SecretKeySpec secretKey = new SecretKeySpec(secret.getBytes(), ""HmacSHA256"");
    sha256_HMAC.init(secretKey);
    String hash = Base64.encodeToString(sha256_HMAC.doFinal(stringInBase64.getBytes()), Base64.DEFAULT);
    return hash;
}

    String str = ""1234"";
    String key = ""1234"";

    try {

        Log.d(""HMAC:"", hash_hmac(str,key));

    } catch (Exception e) {
        Log.d(""HMAC:"",""stop"");
        e.printStackTrace();
    }
</code></pre>

<p>Result:</p>

<pre><code>UHWlHiPrOxxncJTagnlvVcln3xKZ1PKaojFeTMDLXws=
</code></pre>

<p>And in <strong>PHP</strong> code:</p>

<pre><code>$str=base64_encode('1234');
$key='1234';
print(base64_encode(hash_hmac('sha256', $str, $key,true)));
</code></pre>

<p>Result:</p>

<pre><code>FBp7PnSG4MQNgcFWAjjlkxNdiqivrmNfnRZur1Dko2Q=
</code></pre>

<p>As you can see, i have different results. What i do wrong?</p>

<p>PS. I edit code, as we say, but it not helped me. Please, explain, why i have different results?</p>
","<p>You have 2 ways to solve it:</p>

<ol>
<li><p>Remove the base_encode in line 1</p>

<p>$str='eyJoYXNoIjoic29tZVJlcUhhc2hTdHIiLCJhbnN3ZXIiOnRydWV9';</p></li>
<li><p>Remove the base_encode in print</p>

<p>print(hash_hmac('sha256', $str, $key,true));</p></li>
</ol>
","44494334","961","<java><php><base64><hmac>","2","0","3","2017-06-13 08:38:51","44516333","3","3","5110031","","2017-06-12 21:02:46","2017-06-12 07:14:31","","","2017-06-12 08:05:05"
"44493401","Android Java and PHP HASH HMAC SHA256 different result","<p>I saw some same questions in stack-overflow but it doesn't find answer.</p>

<p>Android Java:</p>

<pre><code>import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.util.Base64;
import android.util.Log;
import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;

private String hash_hmac(String str, String secret) throws Exception{
    Mac sha256_HMAC = Mac.getInstance(""HmacSHA256"");
    byte[] string = str.getBytes();
    String stringInBase64 = Base64.encodeToString(string, Base64.DEFAULT);
    SecretKeySpec secretKey = new SecretKeySpec(secret.getBytes(), ""HmacSHA256"");
    sha256_HMAC.init(secretKey);
    String hash = Base64.encodeToString(sha256_HMAC.doFinal(stringInBase64.getBytes()), Base64.DEFAULT);
    return hash;
}

    String str = ""1234"";
    String key = ""1234"";

    try {

        Log.d(""HMAC:"", hash_hmac(str,key));

    } catch (Exception e) {
        Log.d(""HMAC:"",""stop"");
        e.printStackTrace();
    }
</code></pre>

<p>Result:</p>

<pre><code>UHWlHiPrOxxncJTagnlvVcln3xKZ1PKaojFeTMDLXws=
</code></pre>

<p>And in <strong>PHP</strong> code:</p>

<pre><code>$str=base64_encode('1234');
$key='1234';
print(base64_encode(hash_hmac('sha256', $str, $key,true)));
</code></pre>

<p>Result:</p>

<pre><code>FBp7PnSG4MQNgcFWAjjlkxNdiqivrmNfnRZur1Dko2Q=
</code></pre>

<p>As you can see, i have different results. What i do wrong?</p>

<p>PS. I edit code, as we say, but it not helped me. Please, explain, why i have different results?</p>
","<blockquote>
  <p>Difference is in <strong>PHP</strong> <code>$str</code> initialized with <code>base64_encode</code> but in <strong>JAVA</strong> you didn't <strong>encode</strong> during <code>hash_mac</code></p>
</blockquote>

<p>All you need to encode in base64 the <code>str</code> in <strong>JAVA</strong> before <strong>hash_mac</strong></p>

<pre><code>private String hash_hmac(String str, String secret) {
        String ss = Base64.encodeToString(str.getBytes(""UTF-8""));
        Mac sha256_HMAC = Mac.getInstance(""HmacSHA256"");
        SecretKeySpec secretKey = new SecretKeySpec(secret.getBytes(""UTF-8""), ""HmacSHA256"");
        sha256_HMAC.init(secretKey);
        String hash1 = Base64.encodeToString(sha256_HMAC.doFinal(ss.getBytes(""UTF-8"")));
        return hash1;
}
</code></pre>

<blockquote>
  <p>Or just change in <strong>PHP</strong> code to remove <code>base64</code> in <code>str</code> initialization</p>
</blockquote>

<p><code>$str='eyJoYXNoIjoic29tZVJlcUhhc2hTdHIiLCJhbnN3ZXIiOnRydWV9';</code></p>
","44496867","961","<java><php><base64><hmac>","2","0","3","2017-06-13 08:38:51","44516333","3","3","5110031","","2017-06-12 21:02:46","2017-06-12 07:14:31","","","2017-06-12 10:11:09"
"44493401","Android Java and PHP HASH HMAC SHA256 different result","<p>I saw some same questions in stack-overflow but it doesn't find answer.</p>

<p>Android Java:</p>

<pre><code>import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.util.Base64;
import android.util.Log;
import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;

private String hash_hmac(String str, String secret) throws Exception{
    Mac sha256_HMAC = Mac.getInstance(""HmacSHA256"");
    byte[] string = str.getBytes();
    String stringInBase64 = Base64.encodeToString(string, Base64.DEFAULT);
    SecretKeySpec secretKey = new SecretKeySpec(secret.getBytes(), ""HmacSHA256"");
    sha256_HMAC.init(secretKey);
    String hash = Base64.encodeToString(sha256_HMAC.doFinal(stringInBase64.getBytes()), Base64.DEFAULT);
    return hash;
}

    String str = ""1234"";
    String key = ""1234"";

    try {

        Log.d(""HMAC:"", hash_hmac(str,key));

    } catch (Exception e) {
        Log.d(""HMAC:"",""stop"");
        e.printStackTrace();
    }
</code></pre>

<p>Result:</p>

<pre><code>UHWlHiPrOxxncJTagnlvVcln3xKZ1PKaojFeTMDLXws=
</code></pre>

<p>And in <strong>PHP</strong> code:</p>

<pre><code>$str=base64_encode('1234');
$key='1234';
print(base64_encode(hash_hmac('sha256', $str, $key,true)));
</code></pre>

<p>Result:</p>

<pre><code>FBp7PnSG4MQNgcFWAjjlkxNdiqivrmNfnRZur1Dko2Q=
</code></pre>

<p>As you can see, i have different results. What i do wrong?</p>

<p>PS. I edit code, as we say, but it not helped me. Please, explain, why i have different results?</p>
","<p>I solved this! The small parameter: Base64.NO_WRAP when i encode base64 byte to base64 to hmac.
Tha Android Java code is:</p>

<pre><code>private String hash_hmac_test(String base_string, String key) throws Exception {

    try {
        Mac mac = Mac.getInstance(""HmacSHA256"");
        SecretKeySpec secret = new SecretKeySpec(key.getBytes(""UTF-8""), mac.getAlgorithm());
        mac.init(secret);

        String base_string_base64 = Base64.encodeToString(base_string.getBytes(), Base64.NO_WRAP);

        byte[] digest = mac.doFinal(base_string_base64.getBytes());
        //android.util.Base64.encodeT
        String retVal = Base64.encodeToString(digest,Base64.DEFAULT);

        Log.v(TAG, ""String: "" + base_string);


        Log.v(TAG, ""String in Base64: "" + base_string_base64);

        Log.v(TAG, ""key: "" + key);
        Log.v(TAG, ""result: "" + retVal);
    } catch (Exception e) {
        System.out.println(e.getMessage());
    }

    return ""ok"";
}
</code></pre>

<p>And in PHP code is:</p>

<pre><code>base64_encode(hash_hmac('sha256', base64_encode($str), $key,true))
</code></pre>

<p>Both result works fine!
Thank you for all!</p>
","44516333","961","<java><php><base64><hmac>","2","0","3","2017-06-13 08:38:51","44516333","3","3","5110031","","2017-06-12 21:02:46","2017-06-12 07:14:31","","","2017-06-13 08:38:51"
"7591967","C++ OpenSSL HMACSHA1 works but not how I want it to","<p>This HMACSHA1 code below works for converting ""Password"" and ""Message"" to <code>AFF791FA574D564C83F6456CC198CBD316949DC9</code> as evidence by <a href=""http://buchananweb.co.uk/security01.aspx"" rel=""nofollow"">http://buchananweb.co.uk/security01.aspx</a>.  </p>

<p>My question is, Is it possible to have:</p>

<pre><code>BYTE HMAC[] = {0x50,0x61,0x73,0x73,0x77,0x6F,0x72,0x64};
BYTE data2[] = {0x4D,0x65,0x73,0x73,0x61,0x67,0x65};
</code></pre>

<p>And still get the same value: <code>AFF791FA574D564C83F6456CC198CBD316949DC9</code>.</p>

<p>For example, if I was on a server and received the packet:</p>

<pre><code>[HEADER] 08 50 61 73 73 77 6F 72 64 00
[HEADER] 07 4D 65 73 73 61 67 65 00
</code></pre>

<p>And I rip <code>50 61 73 73 77 6F 72 64</code> &amp; <code>4D 65 73 73 61 67 65</code> from the packet and used this for my HMACSHA1.  How would I go about doing that to get the correct HMACSHA1 value?</p>

<pre><code>    BYTE HMAC[] = ""Password"";
    BYTE data2[] = ""Message"";
    //BYTE HMAC[] = {0x50,0x61,0x73,0x73,0x77,0x6F,0x72,0x64};
    //BYTE data2[] = {0x4D,0x65,0x73,0x73,0x61,0x67,0x65};
    HMAC_CTX ctx;
    result = (unsigned char*) malloc(sizeof(char) * result_len);
    ENGINE_load_builtin_engines();
    ENGINE_register_all_complete();
    HMAC_CTX_init(&amp;ctx);
    HMAC_Init_ex(&amp;ctx, HMAC, strlen((const char*)HMAC), EVP_sha1(), NULL);
    HMAC_Update(&amp;ctx, data2, strlen((const char*)(data2)));
    HMAC_Final(&amp;ctx, result, &amp;result_len);
    HMAC_CTX_cleanup(&amp;ctx);

    std::cout &lt;&lt; ""\n\n"";


 for(int i=0;i&lt;result_len;i++)
    std::cout &lt;&lt; setfill('0') &lt;&lt; setw(2) &lt;&lt; hex &lt;&lt; (int)result[i];

    int asd;
    std::cin &gt;&gt; asd;
// AFF791FA574D564C83F6456CC198CBD316949DC9
</code></pre>

<p>EDIT:</p>

<p>It works by doing this:</p>

<pre><code>BYTE HMAC[] = {0x50,0x61,0x73,0x73,0x77,0x6F,0x72,0x64, 0x00};
BYTE data2[] = {0x4D,0x65,0x73,0x73,0x61,0x67,0x65, 0x00};
</code></pre>

<p>By adding 0x00, at the end.  But, my question is more towards ripping it from data, and using it... would it still be fine?</p>
","<p>The issue is the relation ship between arrays, strings, and the null char.</p>

<p>When you declare ""Password"", the compiler logically treats the string literal as a nine byte array, {0x50,0x61,0x73,0x73,0x77,0x6F,0x72,0x64, 0x00}.  When you call strlen, it will count the number of bytes until it encounters the first 0x00.  strlen(""Password"") will return 8 even though there are technically nine characters in the array of characters.</p>

<p>So when you declare an array of 8 bytes as follows without a trailing null byte:</p>

<pre><code>BYTE HMAC[] = {0x50,0x61,0x73,0x73,0x77,0x6F,0x72,0x64};
</code></pre>

<p>The problem is that ""strlen(HMAC)"" will count at least 8 bytes, and keep counting while traversing undefined memory until it finally (if ever) hits a byte that is zero.  At best, you might get lucky because the stack memory always has a zero byte padding your array declaration.  More likely it will return a value much larger than 8.  Maybe it will crash.</p>

<p>So when you parse the HMAC and MESSAGE field from your protocol packet, you count the number of bytes actually parsed (not including the terminating null).  And pass that count into the hmac functions to indicate the size of your data.</p>

<p>I don't know your protocol code, but I hope you aren't using strlen to parse the packet to figure out where the string inside the packet ends.  A clever attacker could inject a packet with no null terminator and cause your code do bad things.  I hope you are parsing securely and carefully.  Typical protocol code doesn't include the null terminating byte in the strings packed inside.  Usually the ""length"" is encoded as an integer field followed by the string bytes.  Makes it easier to parse and determine if the length would exceed the packet size read in.</p>
","7592881","958","<c++><visual-c++><packet-capture><hmac><hmacsha1>","0","2","1","2012-02-28 16:29:23","7592881","0","","505893","","2012-02-28 16:29:23","2011-09-29 02:53:12","","","2011-09-29 05:34:29"
"26808362","Validating JWT signed with hmac-sh256","<p>I am working on a project to use the Katana OpenID Connect middleware to authenticate with a third party (OpenAM) provider. The provider is signing the JWT with hmac-sh256. When the OpenID middleware is validating the JWT via a call to ValidateToken it is throwing the following exception: </p>

<p>{""IDX10503: Signature validation failed. Keys tried: 'System.IdentityModel.Tokens.X509AsymmetricSecurityKey\r\n'.\nExceptions caught:\n 'System.InvalidOperationException: IDX10618: AsymmetricSecurityKey.GetHashAlgorithmForSignature( ... ) threw an exception.\nAsymmetricSecurityKey: 'System.IdentityModel.Tokens.X509AsymmetricSecurityKey'\nSignatureAlgorithm: ...hmac-sha256', check to make sure the SignatureAlgorithm is supported.\nException: 'System.NotSupportedException: Crypto algorithm '<a href=""http://www.w3.org/2001/04/xmldsig-more#hmac-sha256"" rel=""nofollow"">http://www.w3.org/2001/04/xmldsig-more#hmac-sha256</a>' not supported in this context.\r\n at System.IdentityModel.Tokens.X509AsymmetricSecurityKey.GetHashAlgorithmForSignature(String algorithm)\r\n at ...... </p>

<p>What am I missing or does the default SecurityTokenHandler really not support that algorithm? </p>

<p>Thanks, </p>

<p>Gordon </p>
","<p>I'm not familiar with Katana but to me it looks like the wrong code path is triggered: the exception complains about an assymetric security key but the hmac-sha256 algorithm is based on a symmetric key (i.e. the client secret)</p>

<p>also note that you need a relatively recent version of OpenAM because it contained an HMAC related bug before: <a href=""https://bugster.forgerock.org/jira/browse/CAF-112"" rel=""nofollow"">https://bugster.forgerock.org/jira/browse/CAF-112</a>; something at least more recent than OpenAM-12.0.0-SNAPSHOT_20140417</p>
","26814736","956","<hmac><sha256><jwt>","0","0","1","2014-11-08 07:05:47","","0","","","","","2014-11-07 19:10:04","","","2014-11-08 07:05:47"
"32565052","HMAC-SHA256 issue in Shopify oauth (Output does not match)","<p>I'm trying to publish an app on Shopify marketplace by following <a href=""https://docs.shopify.com/api/authentication/oauth"" rel=""nofollow"">this</a> documentation. And I'm stuck on step-3 of the oauth documentation wherein you have to do 'HMAC Signature Validation'.</p>

<p>Documentation states that you have to process the string (specified below) through HMAC-SHA256 using app's shared secret key.</p>

<pre><code>String = ""shop=some-shop.myshopify.com&amp;timestamp=1337178173""
</code></pre>

<p>I'm trying to implement the steps using Java. Following is gist of the code that I have used.</p>

<pre><code>        private static final String HMAC_ALGORITHM = ""HmacSHA256"";
        String key = ""hush"";
        String data = ""shop=some-shop.myshopify.com&amp;timestamp=1337178173"";    
        SecretKeySpec keySpec = new SecretKeySpec(key.getBytes(),HMAC_ALGORITHM);
        Mac mac = Mac.getInstance(HMAC_ALGORITHM);
        mac.init(keySpec);
        byte[] rawHmac = mac.doFinal(data.getBytes());
        System.out.println(Hex.encodeHexString(rawHmac));
</code></pre>

<p>The code produces the following string:</p>

<pre><code>c2812f39f84c32c2edaded339a1388abc9829babf351b684ab797f04cd94d4c7
</code></pre>

<p>Through some random search on Shopify developer forum I found the link to a <a href=""https://ecommerce.shopify.com/c/shopify-apis-and-technology/t/hmac-verification-using-php-278811"" rel=""nofollow"">question</a>.</p>

<p>The last message from <a href=""https://ecommerce.shopify.com/users/367749"" rel=""nofollow"">@Shayne</a> suggests that we have to make changes in <code>data</code> variable by adding <code>protocol</code> field.</p>

<p>But it didn't work out :(</p>

<p>Can anyone tell me what should be done?Do I have to make modifications in my code or the process in the documentation have changed.
Please help.</p>
","<p>The example is wrong apparently. Your hash code is OK. You'll need to make sure you include all parameters from the Shopify response e.g. the input for verification of a response would look like:</p>

<pre><code>code={code}&amp;protocol=https://&amp;store={store}&amp;timestamp={timestamp}
</code></pre>

<p>See: <a href=""https://ecommerce.shopify.com/c/shopify-apis-and-technology/t/you-broke-my-build-hmac-verification-broken-282951"" rel=""nofollow"">https://ecommerce.shopify.com/c/shopify-apis-and-technology/t/you-broke-my-build-hmac-verification-broken-282951</a></p>
","32572612","954","<java><oauth><shopify><sha256><hmac>","1","1","3","2018-12-19 03:31:42","32572612","0","2","","","","2015-09-14 12:39:12","","","2015-09-14 19:39:59"
"32565052","HMAC-SHA256 issue in Shopify oauth (Output does not match)","<p>I'm trying to publish an app on Shopify marketplace by following <a href=""https://docs.shopify.com/api/authentication/oauth"" rel=""nofollow"">this</a> documentation. And I'm stuck on step-3 of the oauth documentation wherein you have to do 'HMAC Signature Validation'.</p>

<p>Documentation states that you have to process the string (specified below) through HMAC-SHA256 using app's shared secret key.</p>

<pre><code>String = ""shop=some-shop.myshopify.com&amp;timestamp=1337178173""
</code></pre>

<p>I'm trying to implement the steps using Java. Following is gist of the code that I have used.</p>

<pre><code>        private static final String HMAC_ALGORITHM = ""HmacSHA256"";
        String key = ""hush"";
        String data = ""shop=some-shop.myshopify.com&amp;timestamp=1337178173"";    
        SecretKeySpec keySpec = new SecretKeySpec(key.getBytes(),HMAC_ALGORITHM);
        Mac mac = Mac.getInstance(HMAC_ALGORITHM);
        mac.init(keySpec);
        byte[] rawHmac = mac.doFinal(data.getBytes());
        System.out.println(Hex.encodeHexString(rawHmac));
</code></pre>

<p>The code produces the following string:</p>

<pre><code>c2812f39f84c32c2edaded339a1388abc9829babf351b684ab797f04cd94d4c7
</code></pre>

<p>Through some random search on Shopify developer forum I found the link to a <a href=""https://ecommerce.shopify.com/c/shopify-apis-and-technology/t/hmac-verification-using-php-278811"" rel=""nofollow"">question</a>.</p>

<p>The last message from <a href=""https://ecommerce.shopify.com/users/367749"" rel=""nofollow"">@Shayne</a> suggests that we have to make changes in <code>data</code> variable by adding <code>protocol</code> field.</p>

<p>But it didn't work out :(</p>

<p>Can anyone tell me what should be done?Do I have to make modifications in my code or the process in the documentation have changed.
Please help.</p>
","<p>Here's the java code you need to verify Shopify HMAC. The protocol parameter isn't required unless it was in the result from shopify, which it wasn't from me.</p>

<pre><code>@Override
protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
    String HMAC_ALGORITHM = ""HmacSHA256"";
    resp.setContentType(""text/html;charset=UTF-8"");
    Map&lt;String,String[]&gt; parameters = req.getParameterMap();
    String data = null;
    SortedSet&lt;String&gt; keys = new TreeSet&lt;String&gt;(parameters.keySet());
    for (String key : keys) {
        if (!key.equals(""hmac"")&amp;&amp;!key.equals(""signature"")){
        if (data == null){
            data = key + ""="" +req.getParameter(key);
        }
            else {
            data = data + ""&amp;"" + key + ""="" + req.getParameter(key);
        }
    }
    }
    SecretKeySpec keySpec = new SecretKeySpec(SHARED_KEY.getBytes(),HMAC_ALGORITHM);
    Mac mac = null;
    try {
        mac = Mac.getInstance(HMAC_ALGORITHM);
        mac.init(keySpec);
        byte[] rawHmac = mac.doFinal(data.getBytes());
        if (Hex.encodeHexString(rawHmac).equals(req.getParameter(""hmac""))){
            //THE HMAC IS VERIFIED
        } else {
            //THE HMAC IS NOT VERIFIED
        }
    } catch (NoSuchAlgorithmException | InvalidKeyException e) {
        e.printStackTrace();
    }
}
</code></pre>

<p>Interestingly, the timestamp parameter in data turns into</p>

<pre><code>×tamp=1459537704
</code></pre>

<p>instead of </p>

<pre><code>&amp;timestamp=1459537704
</code></pre>
","36364230","954","<java><oauth><shopify><sha256><hmac>","1","1","3","2018-12-19 03:31:42","32572612","0","2","","","","2015-09-14 12:39:12","","","2016-04-01 19:17:50"
"32565052","HMAC-SHA256 issue in Shopify oauth (Output does not match)","<p>I'm trying to publish an app on Shopify marketplace by following <a href=""https://docs.shopify.com/api/authentication/oauth"" rel=""nofollow"">this</a> documentation. And I'm stuck on step-3 of the oauth documentation wherein you have to do 'HMAC Signature Validation'.</p>

<p>Documentation states that you have to process the string (specified below) through HMAC-SHA256 using app's shared secret key.</p>

<pre><code>String = ""shop=some-shop.myshopify.com&amp;timestamp=1337178173""
</code></pre>

<p>I'm trying to implement the steps using Java. Following is gist of the code that I have used.</p>

<pre><code>        private static final String HMAC_ALGORITHM = ""HmacSHA256"";
        String key = ""hush"";
        String data = ""shop=some-shop.myshopify.com&amp;timestamp=1337178173"";    
        SecretKeySpec keySpec = new SecretKeySpec(key.getBytes(),HMAC_ALGORITHM);
        Mac mac = Mac.getInstance(HMAC_ALGORITHM);
        mac.init(keySpec);
        byte[] rawHmac = mac.doFinal(data.getBytes());
        System.out.println(Hex.encodeHexString(rawHmac));
</code></pre>

<p>The code produces the following string:</p>

<pre><code>c2812f39f84c32c2edaded339a1388abc9829babf351b684ab797f04cd94d4c7
</code></pre>

<p>Through some random search on Shopify developer forum I found the link to a <a href=""https://ecommerce.shopify.com/c/shopify-apis-and-technology/t/hmac-verification-using-php-278811"" rel=""nofollow"">question</a>.</p>

<p>The last message from <a href=""https://ecommerce.shopify.com/users/367749"" rel=""nofollow"">@Shayne</a> suggests that we have to make changes in <code>data</code> variable by adding <code>protocol</code> field.</p>

<p>But it didn't work out :(</p>

<p>Can anyone tell me what should be done?Do I have to make modifications in my code or the process in the documentation have changed.
Please help.</p>
","<p>here is my prod code:</p>

<pre><code>public class HMACValidator {

   public static String sha256HMAC(String key, String data) throws NoSuchAlgorithmException, InvalidKeyException, UnsupportedEncodingException, DecoderException {
    Mac hmac = Mac.getInstance(""HmacSHA256"");
    System.out.println(""data ""+data);
    SecretKeySpec secret_key = new SecretKeySpec(key.getBytes(""UTF-8""), ""HmacSHA256"");
    hmac.init(secret_key);
    return Hex.encodeHexString(hmac.doFinal(data.getBytes(""UTF-8"")));
    }

    public static boolean validateShopifyAskForPermission(String key, String hmac, String shop, String timestamp) throws Exception {
        return (sha256HMAC(key, ""shop=""+shop+""&amp;timestamp=""+timestamp).compareTo(hmac) == 0);
    }
}
</code></pre>
","53844199","954","<java><oauth><shopify><sha256><hmac>","1","0","3","2018-12-19 03:31:42","32572612","0","2","","","","2015-09-14 12:39:12","","","2018-12-19 03:31:42"
"22113758","HMAC implementation in C with SHA384","<p>I need an HMAC implementation with SHA384 in C. It is needed for some API I'm writing.
If anyone can provide at least a starting point I would be happy. Thanks!</p>
","<p>Use the <code>openssl</code> library.</p>

<p>An example of using openssl to generate an SHA384 hash is here: <a href=""http://www.askyb.com/cpp/openssl-sha384-hashing-example-in-cpp/"" rel=""nofollow"">http://www.askyb.com/cpp/openssl-sha384-hashing-example-in-cpp/</a></p>

<p>It claims to be in C++ but it's pretty much straight C.</p>
","22114765","947","<c><sha><hmac>","1","3","1","2014-03-01 13:05:58","22114765","0","","","","","2014-03-01 11:27:38","","","2014-03-01 13:05:58"
"47307282","CryptoJS HmacSHA256 Encryption results differ from Python","<p>CryptoJS encrypted string can pass different parameters in python can only pass a string? How to implement the second CryptoJS implementation in python
 ,how to get clientKey2,This will only give the first result.Thanks!</p>

<pre><code>&gt; saltedPassword=CryptoJS.PBKDF2(""key"", ""salt"", {keySize: 8,iterations:500,hasher: CryptoJS.algo.SHA256});    
&gt; clientKey1=CryptoJS.HmacSHA256(saltedPassword.toString(), ""Client Key"")
&gt; clientKey2=CryptoJS.HmacSHA256(saltedPassword, ""Client Key"")
&gt; clientKey1.toString()
&gt; ""857ef8988876a3bb6bcadb85ca257787074e73e830d7dc14c1f838ba46aef1f5""
&gt; clientKey2.toString()
&gt; ""9a8574da9b276ee1162dcb92071df587f4513bc03060bda1e9b3897d46233416""
&gt; saltedPassword.toString()
&gt; ""6e441ccd26e6b35198b4b17457dc0266d36b751d0062b5850b0e302ceb1d6dcc""
</code></pre>

<p>i use this way can get clientKey1,</p>

<pre><code>import hashlib
import hmac

def HmacSHA256(k,v):
    message = bytes(k).encode('utf-8')
    secret = bytes(v).encode('utf-8')
    signature = hmac.new(secret, message, digestmod=hashlib.sha256).hexdigest()
    return signature

signature = HmacSHA256(""6e441ccd26e6b35198b4b17457dc0266d36b751d0062b5850b0e302ceb1d6dcc"",""Client Key"")

print signature
</code></pre>

<p>How to get the second result in Python,Thanks!</p>
","<p>To get the desired <code>clientKey2</code> you need to encode the hex digits of your <code>saltedPassword</code> string to bytes. One way to do that which works on both Python 2 &amp; Python 3 is to use <a href=""https://docs.python.org/3/library/binascii.html#binascii.unhexlify"" rel=""nofollow noreferrer""><code>binascii.unhexlify</code></a>.</p>

<p>Your <code>HmacSHA256</code> function is a bit odd. It won't work on Python 3, since <code>bytes</code> objects don't have an <code>.encode</code> method. In Python 2, <code>bytes</code> is just a synonym for <code>str</code>.</p>

<p>Anyway, here's some code that works on both Python 2 &amp; Python 3.</p>

<pre><code>from __future__ import print_function
import hashlib
import hmac
import binascii

key = ""Client Key"".encode()
salted = ""6e441ccd26e6b35198b4b17457dc0266d36b751d0062b5850b0e302ceb1d6dcc""
raw = binascii.unhexlify(salted)

signature = hmac.new(key, salted.encode(), digestmod=hashlib.sha256).hexdigest()
print(signature)

signature = hmac.new(key, raw, digestmod=hashlib.sha256).hexdigest()
print(signature)
</code></pre>

<p><strong>output</strong></p>

<pre><code>857ef8988876a3bb6bcadb85ca257787074e73e830d7dc14c1f838ba46aef1f5
9a8574da9b276ee1162dcb92071df587f4513bc03060bda1e9b3897d46233416
</code></pre>

<p>The output is identical on Python 2 &amp; Python 3.</p>

<p>BTW, it would be simpler to do this task in Python 3, which makes a clean distinction between text and byte strings. Also, the Python 3 <code>hashlib</code> module has a <a href=""https://docs.python.org/3/library/hashlib.html#hashlib.pbkdf2_hmac"" rel=""nofollow noreferrer""><code>pbkdf2</code> function</a>.</p>
","47308168","946","<python><hmac><cryptojs>","2","2","1","2017-11-15 13:04:24","47308168","1","","8944964","","2017-11-15 12:45:06","2017-11-15 12:21:08","","","2017-11-15 13:04:24"
"46995407","How do I generate a signed Stripe rest webhook request locally?","<p>I tried to create a webhook request to test locally, the library
gave an error. I generated the body of the request by sending a test
balance.available webhook here:
<a href=""https://dashboard.stripe.com/test/webhooks/we_1BI2E2IYOmXNPhc1uOyyRvHg"" rel=""nofollow noreferrer"">https://dashboard.stripe.com/test/webhooks/we_1BI2E2IYOmXNPhc1uOyyRvHg</a>
I copied the body and put it into a file /tmp/stripe.webhook.json.tmp.
The docs describe how to generate a signature:
<a href=""https://stripe.com/docs/webhooks#signatures"" rel=""nofollow noreferrer"">https://stripe.com/docs/webhooks#signatures</a></p>

<hr>

<pre><code>$ date +%s
1509229775
$ cat /tmp/stripe.webhook.tmp | openssl dgst -hmac whsec_nRZzpzBajM5zBLxnyFAHNZLkLLEu5Xlj -sha256
(stdin)= de2da72d739f0bdf0e2289eab5ac131f51cdd35af8f9c1f1224333b53abde9f7
$ curl -s -X POST http://localhost:3000/stripe/webhook -H ""Stripe-Signature: t=1509229775,v1=de2da72d739f0bdf0e2289eab5ac131f51cdd35af8f9c1f1224333b53abde9f7"" -d @/tmp/stripe.webhook.json.tmp | head -2         
Invalid signature.
$ head -2 /tmp/stripe.webhook.tmp
1509229775.{
  ""created"": 1326853478,
$ head -2 /tmp/stripe.webhook.json.tmp
{
  ""created"": 1326853478,
</code></pre>

<hr>

<pre><code>  def webhook
    payload = request.body.read
    sig_header = request.env['HTTP_STRIPE_SIGNATURE']
    endpoint_secret = ENV['STRIPE_WEBHOOK']
    event = nil
    begin
      event = Stripe::Webhook.construct_event(payload, sig_header,
endpoint_secret)
    rescue JSON::ParserError =&gt; e
      # Invalid payload
      render plain: ""Invalid JSON."", status: 400
      return
    rescue Stripe::SignatureVerificationError =&gt; e
      # Invalid signature
      render plain: ""Invalid signature."", status: 400
      return
    end
</code></pre>

<hr>
","<p>I think the issue has to do with the <code>curl</code> call. The <code>-d</code>/<code>--data</code> argument is stripping any line breaks from your <code>json</code> and the resulting digest computed by <code>Stripe::Webhook.construct_event</code> is different than what you've computed in the terminal. </p>

<p>After generating a digest I curled at my webhook endpoint:</p>

<p>Using the standard <code>-d</code>, threw an error saying the signature was invalid</p>

<pre><code>curl -s -X POST http://localhost:3000/webhook  -H ""Stripe-Signature: t=1509309309,v1=a2e2776cd5a57ba60355f7cfa3bcdd1d69e773373a0da"" -d @./webhook.json.tmp
</code></pre>

<p>Whereas, specifying the <code>--data-binary</code> returned a valid signature</p>

<pre><code>curl -s -X POST http://localhost:3000/webhook  -H ""Stripe-Signature: t=1509309309,v1=a2e2776cd5a57ba60355f7cfa3bcdd1d69e773373a0da"" --data-binary @./webhook.json.tmp
</code></pre>
","47005074","935","<ruby-on-rails><curl><stripe-payments><webhooks><hmac>","5","3","2","2019-09-10 14:26:13","47005074","0","","148844","","2017-10-31 07:26:12","2017-10-28 23:12:31","","","2017-10-29 20:45:46"
"46995407","How do I generate a signed Stripe rest webhook request locally?","<p>I tried to create a webhook request to test locally, the library
gave an error. I generated the body of the request by sending a test
balance.available webhook here:
<a href=""https://dashboard.stripe.com/test/webhooks/we_1BI2E2IYOmXNPhc1uOyyRvHg"" rel=""nofollow noreferrer"">https://dashboard.stripe.com/test/webhooks/we_1BI2E2IYOmXNPhc1uOyyRvHg</a>
I copied the body and put it into a file /tmp/stripe.webhook.json.tmp.
The docs describe how to generate a signature:
<a href=""https://stripe.com/docs/webhooks#signatures"" rel=""nofollow noreferrer"">https://stripe.com/docs/webhooks#signatures</a></p>

<hr>

<pre><code>$ date +%s
1509229775
$ cat /tmp/stripe.webhook.tmp | openssl dgst -hmac whsec_nRZzpzBajM5zBLxnyFAHNZLkLLEu5Xlj -sha256
(stdin)= de2da72d739f0bdf0e2289eab5ac131f51cdd35af8f9c1f1224333b53abde9f7
$ curl -s -X POST http://localhost:3000/stripe/webhook -H ""Stripe-Signature: t=1509229775,v1=de2da72d739f0bdf0e2289eab5ac131f51cdd35af8f9c1f1224333b53abde9f7"" -d @/tmp/stripe.webhook.json.tmp | head -2         
Invalid signature.
$ head -2 /tmp/stripe.webhook.tmp
1509229775.{
  ""created"": 1326853478,
$ head -2 /tmp/stripe.webhook.json.tmp
{
  ""created"": 1326853478,
</code></pre>

<hr>

<pre><code>  def webhook
    payload = request.body.read
    sig_header = request.env['HTTP_STRIPE_SIGNATURE']
    endpoint_secret = ENV['STRIPE_WEBHOOK']
    event = nil
    begin
      event = Stripe::Webhook.construct_event(payload, sig_header,
endpoint_secret)
    rescue JSON::ParserError =&gt; e
      # Invalid payload
      render plain: ""Invalid JSON."", status: 400
      return
    rescue Stripe::SignatureVerificationError =&gt; e
      # Invalid signature
      render plain: ""Invalid signature."", status: 400
      return
    end
</code></pre>

<hr>
","<p>The best is to use Stripe CLI :
<a href=""https://github.com/stripe/stripe-cli"" rel=""nofollow noreferrer"">https://github.com/stripe/stripe-cli</a></p>

<p>You can forward the request to localhost address.</p>
","57872939","935","<ruby-on-rails><curl><stripe-payments><webhooks><hmac>","5","0","2","2019-09-10 14:26:13","47005074","0","","148844","","2017-10-31 07:26:12","2017-10-28 23:12:31","","","2019-09-10 14:26:13"
"51259453","HmacSha256 signature generated is different in Java than in Go","<p>I'm converting code from Go to Java. The source to convert is at <a href=""https://github.com/h2non/imaginary#url-signature"" rel=""nofollow noreferrer"">https://github.com/h2non/imaginary#url-signature</a> and this is my current code converted to Java.</p>

<p>The problem is that I'm missing something, since the signature generated in Java is different than the one in Go.</p>

<p>Expected result (as in source in Go):</p>

<blockquote>
  <p>ruEWRoFO-ic-L38vTsjqIYE6DLZ532CTaZXOh1gwuVo</p>
</blockquote>

<p>Actual result in Java:   </p>

<blockquote>
  <p>x2clz4ynSxcFPNc6h3W832vyrIQ=</p>
</blockquote>

<p>My code in Java:</p>

<pre><code>@Test
public void testSomeString() throws Exception {
    String signKey = ""4f46feebafc4b5e988f131c4ff8b5997"";
    String urlPath = ""/resize"";
    String urlQuery = ""file=image.jpg&amp;height=200&amp;type=jpeg&amp;width=300"";

    byte[] signKeyAsBytes = signKey.getBytes(""UTF-8"");
    SecretKey SHA256_KEY = new SecretKeySpec(signKeyAsBytes, ""HmacSHA256"");

    byte[] hashAsBytes=Hashing.hmacSha1(SHA256_KEY)
            .newHasher()
            .putString(urlPath, UTF_8)
            .putString(urlQuery, UTF_8)
            .hash().asBytes();
    String hash = Base64.getUrlEncoder().encodeToString(hashAsBytes);

    //correct value in GoLang is: ""ruEWRoFO-ic-L38vTsjqIYE6DLZ532CTaZXOh1gwuVo""
    Assert.assertEquals(""ruEWRoFO-ic-L38vTsjqIYE6DLZ532CTaZXOh1gwuVo"", hash);

    /*
    Junit test fails with:
    Expected :ruEWRoFO-ic-L38vTsjqIYE6DLZ532CTaZXOh1gwuVo
    Actual   :x2clz4ynSxcFPNc6h3W832vyrIQ=
    */
}
</code></pre>

<p>And this is the original in Go:</p>

<pre><code>package main

import (
    ""crypto/hmac""
    ""crypto/sha256""
    ""encoding/base64""
    ""fmt""
)

func main() {
    fmt.Println(""Hello, playground"")
    signKey := ""4f46feebafc4b5e988f131c4ff8b5997""
    urlPath := ""/resize""
    urlQuery := ""file=image.jpg&amp;height=200&amp;type=jpeg&amp;width=300""

    h := hmac.New(sha256.New, []byte(signKey))
    h.Write([]byte(urlPath))
    h.Write([]byte(urlQuery))
    buf := h.Sum(nil)

    fmt.Println(""sign="" + base64.RawURLEncoding.EncodeToString(buf))
}
</code></pre>
","<p>I don't know what <code>Hashing</code> class you are using in Java, because it isn't standard, but if I use the standard class <code>javax.crypto.Mac</code> to do HmacSHA256 (NOT HmacSHA1) with that key and data -- and encode with the 'unpadded URLsafe' variant of Base64 promoted by JSON, not the traditional one Java defaults to -- I do get <code>ruEWRoFO-ic-L38vTsjqIYE6DLZ532CTaZXOh1gwuVo</code>.</p>

<p>However, it is very poor practice to sign the path and query without some delimiting -- this may allow a signature to be 'moved' to different data. It is also weird, though not directly dangerous, to use a key that is characters but only hex digit characters. I wouldn't use a scheme designed like this for anything important without extensive investigation. </p>
","51263044","933","<java><go><hmac>","1","1","2","2018-07-10 12:42:45","51263044","9","","1427098","","2018-07-10 12:42:45","2018-07-10 07:28:55","","","2018-07-10 10:35:20"
"51259453","HmacSha256 signature generated is different in Java than in Go","<p>I'm converting code from Go to Java. The source to convert is at <a href=""https://github.com/h2non/imaginary#url-signature"" rel=""nofollow noreferrer"">https://github.com/h2non/imaginary#url-signature</a> and this is my current code converted to Java.</p>

<p>The problem is that I'm missing something, since the signature generated in Java is different than the one in Go.</p>

<p>Expected result (as in source in Go):</p>

<blockquote>
  <p>ruEWRoFO-ic-L38vTsjqIYE6DLZ532CTaZXOh1gwuVo</p>
</blockquote>

<p>Actual result in Java:   </p>

<blockquote>
  <p>x2clz4ynSxcFPNc6h3W832vyrIQ=</p>
</blockquote>

<p>My code in Java:</p>

<pre><code>@Test
public void testSomeString() throws Exception {
    String signKey = ""4f46feebafc4b5e988f131c4ff8b5997"";
    String urlPath = ""/resize"";
    String urlQuery = ""file=image.jpg&amp;height=200&amp;type=jpeg&amp;width=300"";

    byte[] signKeyAsBytes = signKey.getBytes(""UTF-8"");
    SecretKey SHA256_KEY = new SecretKeySpec(signKeyAsBytes, ""HmacSHA256"");

    byte[] hashAsBytes=Hashing.hmacSha1(SHA256_KEY)
            .newHasher()
            .putString(urlPath, UTF_8)
            .putString(urlQuery, UTF_8)
            .hash().asBytes();
    String hash = Base64.getUrlEncoder().encodeToString(hashAsBytes);

    //correct value in GoLang is: ""ruEWRoFO-ic-L38vTsjqIYE6DLZ532CTaZXOh1gwuVo""
    Assert.assertEquals(""ruEWRoFO-ic-L38vTsjqIYE6DLZ532CTaZXOh1gwuVo"", hash);

    /*
    Junit test fails with:
    Expected :ruEWRoFO-ic-L38vTsjqIYE6DLZ532CTaZXOh1gwuVo
    Actual   :x2clz4ynSxcFPNc6h3W832vyrIQ=
    */
}
</code></pre>

<p>And this is the original in Go:</p>

<pre><code>package main

import (
    ""crypto/hmac""
    ""crypto/sha256""
    ""encoding/base64""
    ""fmt""
)

func main() {
    fmt.Println(""Hello, playground"")
    signKey := ""4f46feebafc4b5e988f131c4ff8b5997""
    urlPath := ""/resize""
    urlQuery := ""file=image.jpg&amp;height=200&amp;type=jpeg&amp;width=300""

    h := hmac.New(sha256.New, []byte(signKey))
    h.Write([]byte(urlPath))
    h.Write([]byte(urlQuery))
    buf := h.Sum(nil)

    fmt.Println(""sign="" + base64.RawURLEncoding.EncodeToString(buf))
}
</code></pre>
","<p>For future reference, here is the final WORKING solution</p>

<pre><code>package hashingImaginary;

import org.apache.commons.codec.binary.Base64;
import org.junit.Assert;
import org.junit.Test;

import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;

public class apacheHashingTest {

@Test
public void testWithJavaHmacApacheBase64() throws Exception {
    String urlPath = ""/resize"";
    String urlQuery = ""file=image.jpg&amp;height=200&amp;type=jpeg&amp;width=300"";

    String signKey = ""4f46feebafc4b5e988f131c4ff8b5997"";
    String message = urlPath + urlQuery;

    Mac sha256_HMAC = Mac.getInstance(""HmacSHA256"");
    SecretKeySpec secret_key = new SecretKeySpec(signKey.getBytes(), ""HmacSHA256"");
    sha256_HMAC.init(secret_key);

    String hash = Base64.encodeBase64URLSafeString(sha256_HMAC.doFinal(message.getBytes()));
    System.out.println(hash);

    Assert.assertEquals(""ruEWRoFO-ic-L38vTsjqIYE6DLZ532CTaZXOh1gwuVo"", hash);
}
}
</code></pre>
","51263317","933","<java><go><hmac>","1","0","2","2018-07-10 12:42:45","51263044","9","","1427098","","2018-07-10 12:42:45","2018-07-10 07:28:55","","","2018-07-10 10:49:50"
"23093755","What is the ""secret key"" used in the JWT example in the RFC?","<p>I have been reading the <code>JWT RFC</code>, and in <a href=""http://tools.ietf.org/html/draft-ietf-oauth-json-web-token-19#section-3.1"" rel=""nofollow"">section 3.1</a> they give an example <code>JWT</code> along with the MAC. </p>

<p>I was wondering if: is it known what is the value of the secret key that they used with SHA-256 to generate the example in <code>RFC</code>?</p>

<p>I want to use the example in a test case so I'd like to reproduce it exactly.</p>
","<p>Turns out the key is given in <a href=""http://tools.ietf.org/html/draft-ietf-jose-json-web-signature-25#appendix-A.1.1"" rel=""nofollow"">Appendix 1.1 of the draft for ""JSON Web Signature (JWS)""</a> in the <a href=""http://tools.ietf.org/html/draft-ietf-jose-json-web-key-25"" rel=""nofollow"">JSON Web Key format</a> as:</p>

<pre><code>{
    ""kty"":""oct"",
    ""k"":""AyM1SysPpbyDfgZld3umj1qzKObwVMkoqQ-EstJQLr_T-1qS0gZH75aKtMN3Yj0iPS4hcgUuTwjAzZr1Z9CAow""
}
</code></pre>

<p>I misunderstood that the two links named ""Appendix A.1"" at the end of the ""JWT Example"" section actually go to different locations. Tha passage with the links is reproduced below:</p>

<hr>

<p><em>This computation is illustrated in more detail in <a href=""http://tools.ietf.org/html/draft-ietf-oauth-json-web-token-19#appendix-A.1"" rel=""nofollow"">Appendix A.1</a> of [<a href=""http://tools.ietf.org/html/draft-ietf-oauth-json-web-token-19#ref-JWS"" rel=""nofollow"">JWS</a>].  See <a href=""http://tools.ietf.org/html/draft-ietf-oauth-json-web-token-19#appendix-A.1"" rel=""nofollow"">Appendix A.1</a> for an example of an encrypted JWT.</em></p>
","23094305","931","<hmac><sha256><jwt>","-3","2","1","2014-06-30 14:18:26","23094305","0","","254477","","2014-04-15 20:33:08","2014-04-15 20:23:02","","2014-06-30 14:18:26","2014-04-15 20:52:19"
"23077420","How does an HMAC work, and why isn't this code generating the right response?","<p>I'm trying to figure out how HMAC's work. Here is the documentation from <a href=""http://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html"" rel=""nofollow"">AWS-S3</a></p>

<pre><code>signing key = HMAC-SHA256(
  HMAC-SHA256(
    HMAC-SHA256(
      HMAC-SHA256(""AWS4"" + ""&lt;YourSecretAccessKey&gt;"",""20130524"")
      , ""us-east-1""
    )
    , ""s3""
  )
  ,""aws4_request""
)
</code></pre>

<p>The documentation says,</p>

<blockquote>
  <p>You can use this example as a test case to verify the signature that your code calculates; however, you must use the same bucket name, object key, time stamp, and the following example credentials:</p>
</blockquote>

<p>I don't understand how the Node core <a href=""http://nodejs.org/api/crypto.html"" rel=""nofollow"">crypto module</a> works or how to read the HMAC spec.</p>

<p>Would it be right to describe the above like,</p>

<pre><code>var h1 = crypto.createHmac( 'sha256', ""AWS4"" + 'wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY' );
  h1.setEncoding('hex');
  h1.write( '20130524' );
  h1.end();
var h2 = crypto.createHmac( 'sha256', h1.read() );
  h2.setEncoding('hex');
  h2.write( 'us-east-1' );
  h2.end();
var h3 = crypto.createHmac( 'sha256', h2.read() );
  h3.setEncoding('hex');
  h3.write( 's3' );
  h3.end();
var h4 = crypto.createHmac( 'sha256', h3.read() );
  h4.setEncoding('hex');
  h4.write('aws4_request');
  h4.end();
console.log( h4.read() )
</code></pre>

<p>And, if so.. Why do I get back,</p>

<blockquote>
  <p>d949da6fe2897897d73557446db35c06dc34feb7f74e7d949c6fe9d674a02103</p>
</blockquote>

<p>And, not that which is given in the docs:</p>

<blockquote>
  <p>aeeed9bbccd4d02ee5c0109b86d86835f995330da4c265957d157751f604d404</p>
</blockquote>

<p>I've also tried to write this a different way too, because I'm not sure how subsequent calls to <code>.write()</code> are handled</p>

<pre><code>var h1 = crypto.createHmac( 'sha256', ""AWS4"" + 'wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY' );
  h1.setEncoding('hex');
  h1.write( '20130524' );
  h1.write( 'us-east-1' );
  h1.write( 's3' );
  h1.write('aws4_request');
  h1.end();
  console.log( h1.read() );
</code></pre>

<p>So I guess I have two questions</p>

<ol>
<li>Based on <a href=""http://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html"" rel=""nofollow"">the AWS docs</a> what code does it take to get the signature given in the examples... </li>
<li>What is the function of successive calls to .write() on a crypto stream? It doesn't append. And, it doesn't wrap in a new HMAC-SHA256.</li>
</ol>
","<p>[This is more of a comment, but since I can't comment as a guest:]</p>

<p>Not sure if you need the setEncoding() call at that point. Just let it process, and call:</p>

<pre><code>signature = hmac.read().toString('base64');
</code></pre>

<p>as the return output from <code>hmac.read()</code> is of type <code>Buffer</code>, so the <code>toString()</code> works fine on it.</p>
","24346664","926","<node.js><amazon-web-services><amazon-s3><hmac><sha256>","0","0","2","2015-01-07 20:01:39","","0","1","","","","2014-04-15 07:40:46","","2014-07-26 01:33:40","2014-06-21 23:08:36"
"23077420","How does an HMAC work, and why isn't this code generating the right response?","<p>I'm trying to figure out how HMAC's work. Here is the documentation from <a href=""http://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html"" rel=""nofollow"">AWS-S3</a></p>

<pre><code>signing key = HMAC-SHA256(
  HMAC-SHA256(
    HMAC-SHA256(
      HMAC-SHA256(""AWS4"" + ""&lt;YourSecretAccessKey&gt;"",""20130524"")
      , ""us-east-1""
    )
    , ""s3""
  )
  ,""aws4_request""
)
</code></pre>

<p>The documentation says,</p>

<blockquote>
  <p>You can use this example as a test case to verify the signature that your code calculates; however, you must use the same bucket name, object key, time stamp, and the following example credentials:</p>
</blockquote>

<p>I don't understand how the Node core <a href=""http://nodejs.org/api/crypto.html"" rel=""nofollow"">crypto module</a> works or how to read the HMAC spec.</p>

<p>Would it be right to describe the above like,</p>

<pre><code>var h1 = crypto.createHmac( 'sha256', ""AWS4"" + 'wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY' );
  h1.setEncoding('hex');
  h1.write( '20130524' );
  h1.end();
var h2 = crypto.createHmac( 'sha256', h1.read() );
  h2.setEncoding('hex');
  h2.write( 'us-east-1' );
  h2.end();
var h3 = crypto.createHmac( 'sha256', h2.read() );
  h3.setEncoding('hex');
  h3.write( 's3' );
  h3.end();
var h4 = crypto.createHmac( 'sha256', h3.read() );
  h4.setEncoding('hex');
  h4.write('aws4_request');
  h4.end();
console.log( h4.read() )
</code></pre>

<p>And, if so.. Why do I get back,</p>

<blockquote>
  <p>d949da6fe2897897d73557446db35c06dc34feb7f74e7d949c6fe9d674a02103</p>
</blockquote>

<p>And, not that which is given in the docs:</p>

<blockquote>
  <p>aeeed9bbccd4d02ee5c0109b86d86835f995330da4c265957d157751f604d404</p>
</blockquote>

<p>I've also tried to write this a different way too, because I'm not sure how subsequent calls to <code>.write()</code> are handled</p>

<pre><code>var h1 = crypto.createHmac( 'sha256', ""AWS4"" + 'wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY' );
  h1.setEncoding('hex');
  h1.write( '20130524' );
  h1.write( 'us-east-1' );
  h1.write( 's3' );
  h1.write('aws4_request');
  h1.end();
  console.log( h1.read() );
</code></pre>

<p>So I guess I have two questions</p>

<ol>
<li>Based on <a href=""http://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html"" rel=""nofollow"">the AWS docs</a> what code does it take to get the signature given in the examples... </li>
<li>What is the function of successive calls to .write() on a crypto stream? It doesn't append. And, it doesn't wrap in a new HMAC-SHA256.</li>
</ol>
","<p>I just spent 16 hours trying to figure this out and I got a working solution, based on your initial steps. Not the most elegant code but it works! See below.</p>

<p>Also, this is my first Stack Overflow post! So pardon any formatting mistakes!</p>

<pre><code>var policy = {
  ""expiration"": ""2020-12-01T12:00:00.000Z"",
  ""conditions"": [
    {""bucket"": ""XXXTHISISYOURBUCKETXXX""},
    [""starts-with"", ""$key"", """"],
    {""x-amz-credential"": ""XXXTHISISYOURPUBLICKEYXXX/20150107/us-west-1/s3/aws4_request""},
    {""x-amz-algorithm"": ""AWS4-HMAC-SHA256""},
    {""x-amz-date"": ""20150107T000000Z""}
  ]
};

var base64Policy = Buffer( JSON.stringify( policy ) , 'utf-8' ).toString( 'base64' );

var a = crypto.createHmac( 'sha256' , 'AWS4' + 'XXXTHISISYOURSECRETKEYXXX' );

a.write( '20150107' );

a.end();

var b = crypto.createHmac( 'sha256' , a.read() );

b.write( 'us-west-1' );

b.end();

var c = crypto.createHmac( 'sha256' , b.read() );

c.write( 's3' );

c.end();

var d = crypto.createHmac( 'sha256' , c.read() );

d.write( 'aws4_request' );

d.end();

var e = crypto.createHmac( 'sha256' , d.read() );

e.write( new Buffer( base64Policy , 'utf-8') );

e.end();

var signature = e.read().toString( 'hex' );

console.log( signature );

var credentials = {

  policy : base64Policy,
  signature : signature

};
</code></pre>
","27827688","926","<node.js><amazon-web-services><amazon-s3><hmac><sha256>","0","1","2","2015-01-07 20:01:39","","0","1","","","","2014-04-15 07:40:46","","","2015-01-07 20:01:39"
"34279099","Cannot get rid of Invalid HMAC","<p>It seems I have similar issue as north (<a href=""http://www.frostjedi.com/phpbb3/viewtopic.php?f=46&amp;t=19553"" rel=""nofollow"">http://www.frostjedi.com/phpbb3/viewtopic.php?f=46&amp;t=19553</a>) with regards to incompatibility of ciphers and authentication.</p>

<p>I get :
PHP Notice:  Invalid HMAC in /usr/share/pear/Net/SSH2.php on line 3037
PHP Notice:  Connection closed by server in /usr/share/pear/Net/SSH2.php on line 2015</p>

<p>I've traced a PUTTY log to determine that the key exchange hash is Diffie-Hellman SHA-1 and encryption is AES.256 CBC.</p>

<p>So I've commented out the algorithnms that I do not wish to use in SSH2.php. However it does not seem to have any effect and I keep getting the same error</p>

<p>-----------------ENCRYPTION ALGORITH SECTION------------------------</p>

<pre><code>   static $encryption_algorithms = false;
    if ($encryption_algorithms === false) {
        $encryption_algorithms = array(
            // from &lt;http://tools.ietf.org/html/rfc4345#section-4&gt;:
    //        'arcfour256',
    //        'arcfour128',

            //'arcfour',      // OPTIONAL          the ARCFOUR stream cipher with a 128-bit key

            // CTR modes from &lt;http://tools.ietf.org/html/rfc4344#section-4&gt;:
    //        'aes128-ctr',     // RECOMMENDED       AES (Rijndael) in SDCTR mode, with 128-bit key
   //         'aes192-ctr',     // RECOMMENDED       AES with 192-bit key
   //         'aes256-ctr',     // RECOMMENDED       AES with 256-bit key

    //        'twofish128-ctr', // OPTIONAL          Twofish in SDCTR mode, with 128-bit key
    //        'twofish192-ctr', // OPTIONAL          Twofish with 192-bit key
    //        'twofish256-ctr', // OPTIONAL          Twofish with 256-bit key

            'aes128-cbc',     // RECOMMENDED       AES with a 128-bit key
            'aes192-cbc',     // OPTIONAL          AES with a 192-bit key
            'aes256-cbc',     // OPTIONAL          AES in CBC mode, with a 256-bit key

            'twofish128-cbc', // OPTIONAL          Twofish with a 128-bit key
            'twofish192-cbc', // OPTIONAL          Twofish with a 192-bit key
            'twofish256-cbc',
            'twofish-cbc',    // OPTIONAL          alias for ""twofish256-cbc""
                              //                   (this is being retained for historical reasons)

            'blowfish-ctr',   // OPTIONAL          Blowfish in SDCTR mode

            'blowfish-cbc',   // OPTIONAL          Blowfish in CBC mode

            '3des-ctr',       // RECOMMENDED       Three-key 3DES in SDCTR mode

            '3des-cbc',       // REQUIRED          three-key 3DES in CBC mode
             'none'         // OPTIONAL          no encryption; NOT RECOMMENDED
        );
</code></pre>

<p>-------------- MAC algorithm section -----------------------------</p>

<pre><code>        $mac_algorithms = array(
            // from &lt;http://www.ietf.org/rfc/rfc6668.txt&gt;:
//            'hmac-sha2-256',// RECOMMENDED     HMAC-SHA256 (digest length = key length = 32)

 //           'hmac-sha1-96', // RECOMMENDED     first 96 bits of HMAC-SHA1 (digest length = 12, key length = 20)
             'hmac-sha1',    // REQUIRED        HMAC-SHA1 (digest length = key length = 20)
           'hmac-md5-96',  // OPTIONAL        first 96 bits of HMAC-MD5 (digest length = 12, key length = 16)
           'hmac-md5',     // OPTIONAL        HMAC-MD5 (digest length = key length = 16)
            'none'          // OPTIONAL        no MAC; NOT RECOMMENDED
        );
</code></pre>

<hr>

<p><strong>I'm at my wits end here. Any help will be VERY appreciated. I´m on a Fedora (Linux 3.6.11-1.fc16.x86_64 x86_64) BTW.</strong></p>

<p>Cheers,
Andres</p>

<h2>Following is the PUTTY output:</h2>

<p>Event Log: Doing Diffie-Hellman key exchange with hash SHA-1
Outgoing packet #0x2, type 32 / 0x20 (SSH2_MSG_KEX_DH_GEX_INIT)</p>

<p>....Text omitted for brevity.......</p>

<pre><code>Event Log: Host key fingerprint is:
Event Log: ssh-rsa 1024 f4:a0:9f:17:a0:3d:74:60:4d:da:60:39:97:a0:07:9a
Outgoing packet #0x3, type 21 / 0x15 (SSH2_MSG_NEWKEYS)
Event Log: Initialised AES-256 CBC client-&gt;server encryption
Event Log: Initialised HMAC-SHA1 client-&gt;server MAC algorithm
Incoming packet #0x3, type 21 / 0x15 (SSH2_MSG_NEWKEYS)
Event Log: Initialised AES-256 CBC server-&gt;client encryption
Event Log: Initialised HMAC-SHA1 server-&gt;client MAC algorithm
Outgoing packet #0x4, type 2 / 0x02 (SSH2_MSG_IGNORE)
  00000000  00 00 00 00                                      ....
Outgoing packet #0x5, type 5 / 0x05 (SSH2_MSG_SERVICE_REQUEST)
  00000000  00 00 00 0c 73 73 68 2d 75 73 65 72 61 75 74 68  ....ssh-userauth
Incoming packet #0x4, type 6 / 0x06 (SSH2_MSG_SERVICE_ACCEPT)
  00000000  00 00 00 0c 73 73 68 2d 75 73 65 72 61 75 74 68  ....ssh-userauth
Outgoing packet #0x6, type 2 / 0x02 (SSH2_MSG_IGNORE)
  00000000  00 00 00 00                                      ....
Outgoing packet #0x7, type 50 / 0x32 (SSH2_MSG_USERAUTH_REQUEST)
  00000000  00 00 00 05 61 64 6d 69 6e 00 00 00 0e 73 73 68  ....admin....ssh
  00000010  2d 63 6f 6e 6e 65 63 74 69 6f 6e 00 00 00 04 6e  -connection....n
  00000020  6f 6e 65                                         one
Incoming packet #0x5, type 51 / 0x33 (SSH2_MSG_USERAUTH_FAILURE)
  00000000  00 00 00 27 70 75 62 6c 69 63 6b 65 79 2c 70 61  ...'publickey,pa
  00000010  73 73 77 6f 72 64 2c 6b 65 79 62 6f 61 72 64 2d  ssword,keyboard-
  00000020  69 6e 74 65 72 61 63 74 69 76 65 00              interactive.
Outgoing packet #0x8, type 2 / 0x02 (SSH2_MSG_IGNORE)
  00000000  00 00 00 00                                      ....
Outgoing packet #0x9, type 50 / 0x32 (SSH2_MSG_USERAUTH_REQUEST)
  00000000  00 00 00 05 61 64 6d 69 6e 00 00 00 0e 73 73 68  ....admin....ssh
  00000010  2d 63 6f 6e 6e 65 63 74 69 6f 6e 00 00 00 14 6b  -connection....k
  00000020  65 79 62 6f 61 72 64 2d 69 6e 74 65 72 61 63 74  eyboard-interact
  00000030  69 76 65 00 00 00 00 00 00 00 00                 ive........
Event Log: Attempting keyboard-interactive authentication
Incoming packet #0x6, type 51 / 0x33 (SSH2_MSG_USERAUTH_FAILURE)
  00000000  00 00 00 27 70 75 62 6c 69 63 6b 65 79 2c 70 61  ...'publickey,pa
  00000010  73 73 77 6f 72 64 2c 6b 65 79 62 6f 61 72 64 2d  ssword,keyboard-
  00000020  69 6e 74 65 72 61 63 74 69 76 65 00              interactive.
Event Log: Server refused keyboard-interactive authentication
Outgoing packet #0xa, type 2 / 0x02 (SSH2_MSG_IGNORE)
  00000000  00 00 00 00                                      ....
Outgoing packet #0xb, type 50 / 0x32 (SSH2_MSG_USERAUTH_REQUEST)
  00000000  00 00 00 05 61 64 6d 69 6e 00 00 00 0e 73 73 68  ....admin....ssh
  00000010  2d 63 6f 6e 6e 65 63 74 69 6f 6e 00 00 00 08 70  -connection....p
  00000020  61 73 73 77 6f 72 64 00 XX XX XX XX XX XX XX XX  assword.XXXXXXXX
  00000030  XX XX XX XX XX                                   XXXXX
Outgoing packet #0xc, type 2 / 0x02 (SSH2_MSG_IGNORE)
  00000000  00 00 00 90 7d 5f 2a c8 1f ad ee 38 a1 2e ec ae  ....}_*....8....
  00000010  ec 1a 21 1b b4 2d b3 df 81 f9 38 c2 b6 40 bb 6b  ..!..-....8..@.k
  00000020  84 f2 31 fa af da d2 dc dd b4 3c 41 43 2d e4 b2  ..1.......&lt;AC-..
  00000030  8c c6 8e 38 ce 3d 1c 52 9c 80 4d 79 1f 37 ab d0  ...8.=.R..My.7..
  00000040  73 34 c2 5f 99 2c 5d 40 57 50 4f 5e df 3a d0 3f  s4._.,]@WPO^.:.?
  00000050  9d 38 28 7b 1f 8b ca 71 39 82 5f 91 cf f4 62 29  .8({...q9._...b)
  00000060  48 cc 8b f1 8f dc 7d 8c 4d 54 d5 61 f2 b5 f5 1d  H.....}.MT.a....
  00000070  7c 67 66 43 96 c9 9c 5d 0d 83 a6 62 61 0e 6c 4d  |gfC...]...ba.lM
  00000080  e7 57 28 1a e6 c6 56 63 f4 52 ad 66 9c d5 16 c4  .W(...Vc.R.f....
  00000090  b4 66 34 5b                                      .f4[
Event Log: Sent password
Incoming packet #0x7, type 52 / 0x34 (SSH2_MSG_USERAUTH_SUCCESS)
Event Log: Access granted
</code></pre>

<p>----------- FULL LOG OUTPUT-------------------------------</p>

<pre><code>PHP Notice:  Invalid HMAC in /usr/share/pear/Net/SSH2.php on line 3037
PHP Notice:  Connection closed by server in /usr/share/pear/Net/SSH2.php on line 2015
LOG: &lt;-
00000000  53:53:48:2d:32:2e:30:2d:4f:70:65:6e:53:53:48:5f  SSH-2.0-OpenSSH_
00000010  33:2e:34:70:31:0a                                3.4p1.

-&gt;
00000000  53:53:48:2d:32:2e:30:2d:70:68:70:73:65:63:6c:69  SSH-2.0-phpsecli
00000010  62:5f:30:2e:33:20:28:6f:70:65:6e:73:73:6c:2c:20  b_0.3 (openssl, 
00000020  67:6d:70:29:0d:0a                                gmp)..

&lt;- NET_SSH2_MSG_KEXINIT (since last: 3.7292, network: 0.7724s)
00000000  1f:ed:9c:61:32:1e:70:f1:16:d0:99:37:6d:d3:7a:8d  ...a2.p....7m.z.
00000010  00:00:00:3d:64:69:66:66:69:65:2d:68:65:6c:6c:6d  ...=diffie-hellm
00000020  61:6e:2d:67:72:6f:75:70:2d:65:78:63:68:61:6e:67  an-group-exchang
00000030  65:2d:73:68:61:31:2c:64:69:66:66:69:65:2d:68:65  e-sha1,diffie-he
00000040  6c:6c:6d:61:6e:2d:67:72:6f:75:70:31:2d:73:68:61  llman-group1-sha
00000050  31:00:00:00:0f:73:73:68:2d:72:73:61:2c:73:73:68  1....ssh-rsa,ssh
00000060  2d:64:73:73:00:00:00:66:61:65:73:31:32:38:2d:63  -dss...faes128-c
00000070  62:63:2c:33:64:65:73:2d:63:62:63:2c:62:6c:6f:77  bc,3des-cbc,blow
00000080  66:69:73:68:2d:63:62:63:2c:63:61:73:74:31:32:38  fish-cbc,cast128
00000090  2d:63:62:63:2c:61:72:63:66:6f:75:72:2c:61:65:73  -cbc,arcfour,aes
000000a0  31:39:32:2d:63:62:63:2c:61:65:73:32:35:36:2d:63  192-cbc,aes256-c
000000b0  62:63:2c:72:69:6a:6e:64:61:65:6c:2d:63:62:63:40  bc,rijndael-cbc@
000000c0  6c:79:73:61:74:6f:72:2e:6c:69:75:2e:73:65:00:00  lysator.liu.se..
000000d0  00:66:61:65:73:31:32:38:2d:63:62:63:2c:33:64:65  .faes128-cbc,3de
000000e0  73:2d:63:62:63:2c:62:6c:6f:77:66:69:73:68:2d:63  s-cbc,blowfish-c
000000f0  62:63:2c:63:61:73:74:31:32:38:2d:63:62:63:2c:61  bc,cast128-cbc,a
00000100  72:63:66:6f:75:72:2c:61:65:73:31:39:32:2d:63:62  rcfour,aes192-cb
00000110  63:2c:61:65:73:32:35:36:2d:63:62:63:2c:72:69:6a  c,aes256-cbc,rij
00000120  6e:64:61:65:6c:2d:63:62:63:40:6c:79:73:61:74:6f  ndael-cbc@lysato
00000130  72:2e:6c:69:75:2e:73:65:00:00:00:55:68:6d:61:63  r.liu.se...Uhmac
00000140  2d:6d:64:35:2c:68:6d:61:63:2d:73:68:61:31:2c:68  -md5,hmac-sha1,h
00000150  6d:61:63:2d:72:69:70:65:6d:64:31:36:30:2c:68:6d  mac-ripemd160,hm
00000160  61:63:2d:72:69:70:65:6d:64:31:36:30:40:6f:70:65  ac-ripemd160@ope
00000170  6e:73:73:68:2e:63:6f:6d:2c:68:6d:61:63:2d:73:68  nssh.com,hmac-sh
00000180  61:31:2d:39:36:2c:68:6d:61:63:2d:6d:64:35:2d:39  a1-96,hmac-md5-9
00000190  36:00:00:00:55:68:6d:61:63:2d:6d:64:35:2c:68:6d  6...Uhmac-md5,hm
000001a0  61:63:2d:73:68:61:31:2c:68:6d:61:63:2d:72:69:70  ac-sha1,hmac-rip
000001b0  65:6d:64:31:36:30:2c:68:6d:61:63:2d:72:69:70:65  emd160,hmac-ripe
000001c0  6d:64:31:36:30:40:6f:70:65:6e:73:73:68:2e:63:6f  md160@openssh.co
000001d0  6d:2c:68:6d:61:63:2d:73:68:61:31:2d:39:36:2c:68  m,hmac-sha1-96,h
000001e0  6d:61:63:2d:6d:64:35:2d:39:36:00:00:00:09:6e:6f  mac-md5-96....no
000001f0  6e:65:2c:7a:6c:69:62:00:00:00:09:6e:6f:6e:65:2c  ne,zlib....none,
00000200  7a:6c:69:62:00:00:00:00:00:00:00:00:00:00:00:00  zlib............
00000210  00                                               .

-&gt; NET_SSH2_MSG_KEXINIT (since last: 0.0008, network: 0.0002s)
00000000  8b:79:c0:7d:2a:c1:e6:36:d7:bf:e0:52:d3:7d:42:0a  .y.}*..6...R.}B.
00000010  00:00:00:7e:64:69:66:66:69:65:2d:68:65:6c:6c:6d  ...~diffie-hellm
00000020  61:6e:2d:67:72:6f:75:70:31:2d:73:68:61:31:2c:64  an-group1-sha1,d
00000030  69:66:66:69:65:2d:68:65:6c:6c:6d:61:6e:2d:67:72  iffie-hellman-gr
00000040  6f:75:70:31:34:2d:73:68:61:31:2c:64:69:66:66:69  oup14-sha1,diffi
00000050  65:2d:68:65:6c:6c:6d:61:6e:2d:67:72:6f:75:70:2d  e-hellman-group-
00000060  65:78:63:68:61:6e:67:65:2d:73:68:61:31:2c:64:69  exchange-sha1,di
00000070  66:66:69:65:2d:68:65:6c:6c:6d:61:6e:2d:67:72:6f  ffie-hellman-gro
00000080  75:70:2d:65:78:63:68:61:6e:67:65:2d:73:68:61:32  up-exchange-sha2
00000090  35:36:00:00:00:0f:73:73:68:2d:72:73:61:2c:73:73  56....ssh-rsa,ss
000000a0  68:2d:64:73:73:00:00:00:8a:61:65:73:31:32:38:2d  h-dss....aes128-
000000b0  63:62:63:2c:61:65:73:31:39:32:2d:63:62:63:2c:61  cbc,aes192-cbc,a
000000c0  65:73:32:35:36:2d:63:62:63:2c:74:77:6f:66:69:73  es256-cbc,twofis
000000d0  68:31:32:38:2d:63:62:63:2c:74:77:6f:66:69:73:68  h128-cbc,twofish
000000e0  31:39:32:2d:63:62:63:2c:74:77:6f:66:69:73:68:32  192-cbc,twofish2
000000f0  35:36:2d:63:62:63:2c:74:77:6f:66:69:73:68:2d:63  56-cbc,twofish-c
00000100  62:63:2c:62:6c:6f:77:66:69:73:68:2d:63:74:72:2c  bc,blowfish-ctr,
00000110  62:6c:6f:77:66:69:73:68:2d:63:62:63:2c:33:64:65  blowfish-cbc,3de
00000120  73:2d:63:74:72:2c:33:64:65:73:2d:63:62:63:2c:6e  s-ctr,3des-cbc,n
00000130  6f:6e:65:00:00:00:8a:61:65:73:31:32:38:2d:63:62  one....aes128-cb
00000140  63:2c:61:65:73:31:39:32:2d:63:62:63:2c:61:65:73  c,aes192-cbc,aes
00000150  32:35:36:2d:63:62:63:2c:74:77:6f:66:69:73:68:31  256-cbc,twofish1
00000160  32:38:2d:63:62:63:2c:74:77:6f:66:69:73:68:31:39  28-cbc,twofish19
00000170  32:2d:63:62:63:2c:74:77:6f:66:69:73:68:32:35:36  2-cbc,twofish256
00000180  2d:63:62:63:2c:74:77:6f:66:69:73:68:2d:63:62:63  -cbc,twofish-cbc
00000190  2c:62:6c:6f:77:66:69:73:68:2d:63:74:72:2c:62:6c  ,blowfish-ctr,bl
000001a0  6f:77:66:69:73:68:2d:63:62:63:2c:33:64:65:73:2d  owfish-cbc,3des-
000001b0  63:74:72:2c:33:64:65:73:2d:63:62:63:2c:6e:6f:6e  ctr,3des-cbc,non
000001c0  65:00:00:00:23:68:6d:61:63:2d:73:68:61:31:2c:68  e...#hmac-sha1,h
000001d0  6d:61:63:2d:6d:64:35:2d:39:36:2c:68:6d:61:63:2d  mac-md5-96,hmac-
000001e0  6d:64:35:2c:6e:6f:6e:65:00:00:00:23:68:6d:61:63  md5,none...#hmac
000001f0  2d:73:68:61:31:2c:68:6d:61:63:2d:6d:64:35:2d:39  -sha1,hmac-md5-9
00000200  36:2c:68:6d:61:63:2d:6d:64:35:2c:6e:6f:6e:65:00  6,hmac-md5,none.
00000210  00:00:04:6e:6f:6e:65:00:00:00:04:6e:6f:6e:65:00  ...none....none.
00000220  00:00:00:00:00:00:00:00:00:00:00:00              ............

-&gt; NET_SSH2_MSG_KEXDH_INIT (since last: 0.0058, network: 0s)
00000000  00:00:00:81:00:ed:d4:d0:ea:a0:20:8e:cf:c0:4f:fc  .......... ...O.
00000010  d6:bd:9b:a1:1d:4f:26:0e:a1:1e:30:8a:1d:93:36:48  .....O&amp;...0...6H
00000020  de:0d:c9:dd:3c:f6:a9:92:84:ef:f2:0f:3c:e1:6b:b2  ..............k.
00000030  f4:a1:3d:07:93:ed:21:c4:1a:d5:1e:b9:fd:20:aa:b3  ..=...!...... ..
00000040  a3:a6:94:20:ff:f4:eb:19:08:03:07:52:e7:b6:c5:16  ... .......R....
00000050  4e:2e:6b:89:cc:34:17:03:d9:bf:5d:44:7c:6f:1d:2b  N.k..4....]D|o.+
00000060  68:1e:4a:69:32:84:a1:3d:59:53:20:b4:12:79:8e:06  h.Ji2..=YS ..y..
00000070  3b:c7:a7:2f:1e:75:ed:ba:ee:ae:9a:6f:cd:80:8e:e7  ;../.u.....o....
00000080  9f:a5:97:b1:51                                   ....Q

&lt;- NET_SSH2_MSG_KEXDH_REPLY (since last: 1.9064, network: 1.9063s)
00000000  00:00:00:95:00:00:00:07:73:73:68:2d:72:73:61:00  ........ssh-rsa.
00000010  00:00:01:23:00:00:00:81:00:b9:91:2c:ea:95:9c:34  ...#.......,...4
00000020  00:86:a0:f5:58:40:ff:44:d4:6a:9c:5c:05:1d:eb:ec  ....X@.D.j.\....
00000030  8a:96:61:21:e5:98:c3:23:06:15:1e:46:55:39:60:90  ..a!...#...FU9`.
00000040  e7:3d:89:cb:b4:04:48:54:d8:0a:62:11:08:83:3c:8d  .=....HT..b.....
00000050  eb:b3:5b:3d:fa:c3:d2:e5:89:ca:bf:ef:ea:a7:d9:38  ..[=...........8
00000060  04:10:ca:36:90:d1:57:1d:55:ec:b3:eb:40:17:ba:60  ...6..W.U...@..`
00000070  45:a0:f7:90:b0:f8:f2:52:4b:21:57:d9:91:d7:1a:0b  E......RK!W.....
00000080  a4:7d:4a:85:e2:ac:e2:cd:2b:e3:f1:b5:31:9a:98:fe  .}J.....+...1...
00000090  fd:3d:76:da:9d:23:cc:89:57:00:00:00:80:3d:e9:8c  .=v..#..W....=..
000000a0  92:42:9c:ba:16:a6:64:e6:f7:41:fd:b0:90:c2:c1:37  .B....d..A.....7
000000b0  02:a4:12:15:e0:59:88:87:64:d4:33:49:ed:b1:df:d0  .....Y..d.3I....
000000c0  80:c6:fd:f0:af:7f:b9:40:fb:58:0c:2e:4f:29:1f:35  .......@.X..O).5
000000d0  74:93:fe:3b:c1:61:df:33:a0:90:ea:bb:da:02:34:16  t..;.a.3......4.
000000e0  a0:f2:49:49:49:80:ab:b5:fb:bb:96:9e:6f:8f:2a:be  ..III.......o.*.
000000f0  f0:f7:5d:27:a0:02:5a:83:6b:4a:e6:5d:cc:0e:25:44  ..]'..Z.kJ.]..%D
00000100  9f:f6:35:d5:00:51:d0:e4:d3:ab:a0:41:3d:d7:b6:7c  ..5..Q.....A=..|
00000110  c2:c4:85:50:19:70:f0:8c:2d:33:21:3e:2c:00:00:00  ...P.p..-3!&gt;,...
00000120  8f:00:00:00:07:73:73:68:2d:72:73:61:00:00:00:80  .....ssh-rsa....
00000130  92:6a:9a:3a:b0:ff:bf:6d:ed:69:a1:40:e2:d1:7c:ac  .j.:...m.i.@..|.
00000140  b9:21:ed:40:2c:66:f1:4f:d8:f2:07:6a:25:ef:a0:3b  .!.@,f.O...j%..;
00000150  56:ed:00:e6:31:3b:e6:e9:8d:46:56:4e:87:73:6b:88  V...1;...FVN.sk.
00000160  f8:a2:52:cf:78:dd:22:37:31:37:68:09:35:c4:92:6d  ..R.x.""717h.5..m
00000170  23:40:6d:9e:31:99:6a:a9:75:c4:0b:0e:47:20:20:34  #@m.1.j.u...G  4
00000180  02:2b:66:d5:ce:1b:bd:b0:83:f3:c9:ef:bd:d2:31:c6  .+f...........1.
00000190  9a:6a:32:fa:22:31:48:74:e5:60:ae:c4:ce:d1:9a:2f  .j2.""1Ht.`...../
000001a0  e7:13:20:a9:75:3b:e1:8a:5b:18:37:e0:1e:c7:4a:05  .. .u;..[.7...J.

-&gt; NET_SSH2_MSG_NEWKEYS (since last: 0.001, network: 0.0002s)


&lt;- NET_SSH2_MSG_NEWKEYS (since last: 0.0001, network: 0s)


-&gt; NET_SSH2_MSG_SERVICE_REQUEST (since last: 0.0039, network: 0s)
00000000  00:00:00:0c:73:73:68:2d:75:73:65:72:61:75:74:68  ....ssh-userauth
</code></pre>
","","","926","<ssh><hmac><phpseclib>","0","","0","2016-01-07 15:45:52","","4","1","","","","2015-12-15 00:32:56","","",""
"26538670","How do I truncate HmacSHA256 to 128 bits?","<p>Java supports three MAC algorithms:</p>

<ul>
<li>HmacMD5</li>
<li>HmacSHA1</li>
<li>HmacSHA256</li>
</ul>

<p>I however need to sign someting using HMAC-SHA256-128, which is HmacSHA256 but truncated to 128 bits.</p>

<p>This example and variants of has circulated on stackoverflow:</p>

<pre><code>String MAC = hmacHelper.calculatePlainMAC(""00000000"", ""HmacSHA256"");

String bgSecretKey=""1234567890ABCDEF1234567890ABCDEF"";

public String calculatePlainMAC(String ascii, String algorithm)
{
  Mac mac = null;
  final Charset asciiCs = Charset.forName(""US-ASCII"");
  try
  {
    SecretKeySpec signingKey = new SecretKeySpec(bgcSecretKey.getBytes(), algorithm);
    mac = Mac.getInstance(algorithm);
    mac.init(signingKey);
    byte[] rawHmac = mac.doFinal(asciiCs.encode(ascii).array());

    String result = """";
    for (final byte element : rawHmac)
    {
      result += Integer.toString((element &amp; 0xff) + 0x100, 16);//.substring(1);
    }
    log.debug(""Result: "" + result);
    return result;
  }
  catch (NoSuchAlgorithmException e)
  {
    e.printStackTrace();
    return null;
  }
  catch (InvalidKeyException e)
  {
    e.printStackTrace();
    return null;
  }
}
</code></pre>

<p>Result:</p>

<pre><code>1051cd18118219e1261f41401891fd1911a91cf1bc1751db13e10617c1221131231c31ab15613f14412c1681d7132178
</code></pre>

<p>This is all good, except that I need a 128-bit result, which I know is</p>

<pre><code>FF365893D899291C3BF505FB3175E880
</code></pre>

<p>I have no idea how they reached this result. What I do know is that the HMAC algorithm used is HmacSHA256-128. From what I understand this algorithm will generate a 256-bit result, question is, how do I truncate this into a 128-bits result, returning the known result above?</p>
","<p>The following line always adds 3 characters to the string, starting with '1'. The commented substring(1) removes the 1. It is used so that single character results get a zero pre-pended.</p>

<pre><code>result += Integer.toString((element &amp; 0xff) + 0x100, 16);//.substring(1);
</code></pre>

<p>However, even when you fix this, the result does not contain the truncated result you are expecting.</p>

<pre><code>05cd81829e26f44089fd91a9cfbc75db3e067c221323c3ab563f442c68d73278
</code></pre>

<p>This of course depends on the value of bgcSecretKey.</p>

<p>You need to use the same key/algorithm/truncation you used to derive the expected result.</p>
","26539107","923","<java><hmac><sha256><javax.crypto>","0","0","1","2014-10-23 23:39:26","","2","3","3251434","","2014-10-23 23:39:26","2014-10-23 22:38:50","","","2014-10-23 23:20:07"
"9826214","Reference External JavaScript File in Function","<p>Is it possible to reference a JavaScript file inside of a JavaScript function?</p>

<p>Therefore i am wanting to convert this:</p>

<pre><code>&lt;script type=""text/javascript"" src=""http://crypto-js.googlecode.com/files/2.5.3-crypto-sha1-hmac.js""&gt;&lt;/script&gt;
&lt;script type=""text/javascript""&gt;

var hmacString = Crypto.HMAC(Crypto.SHA1, ""Message"", ""Secret Passphrase"", { asString: true });

&lt;/script&gt;
</code></pre>

<p>In to:</p>

<pre><code>function hmac (input){

  var hmacString = Crypto.HMAC(Crypto.SHA1, ""Message"", ""KEY"", { asString: true });

  return hmacString;

}
</code></pre>

<p>I am using a tool called Cast Iron, which therefore restricts JavaScript down to only a function, but i need to call an external file, to load the needed functionality.</p>

<p>Is this even possible?</p>
","<p>If I understand correctly, yes you can access functions and classes from one JS file as long as the other class was loaded before you attempt to access it.</p>

<p>So, if <code>some-javascript-file.js</code> has a function named <code>getThings()</code>, then you can do this:</p>

<pre><code>&lt;script type=""text/javascript"" src=""http://cdn.example.com/js/some-javascript-file.js""&gt;&lt;/script&gt;
&lt;script type=""text/javascript""&gt;
    var things = getThings(); // getThings is a publicly accessible function in an external class.
&lt;/script&gt;
</code></pre>
","9826295","922","<javascript><hmac>","0","0","3","2013-02-01 21:24:35","","6","","13578","","2013-02-01 21:24:35","2012-03-22 16:10:17","","","2012-03-22 16:15:38"
"9826214","Reference External JavaScript File in Function","<p>Is it possible to reference a JavaScript file inside of a JavaScript function?</p>

<p>Therefore i am wanting to convert this:</p>

<pre><code>&lt;script type=""text/javascript"" src=""http://crypto-js.googlecode.com/files/2.5.3-crypto-sha1-hmac.js""&gt;&lt;/script&gt;
&lt;script type=""text/javascript""&gt;

var hmacString = Crypto.HMAC(Crypto.SHA1, ""Message"", ""Secret Passphrase"", { asString: true });

&lt;/script&gt;
</code></pre>

<p>In to:</p>

<pre><code>function hmac (input){

  var hmacString = Crypto.HMAC(Crypto.SHA1, ""Message"", ""KEY"", { asString: true });

  return hmacString;

}
</code></pre>

<p>I am using a tool called Cast Iron, which therefore restricts JavaScript down to only a function, but i need to call an external file, to load the needed functionality.</p>

<p>Is this even possible?</p>
","<p>OK the screenshot kind of helps. It seems you want something from an external JS file, and to manipulate it inside this function.</p>

<p>So you could have one javascript file with:</p>

<pre><code>var foo = 'foo'; //this is in the global scope
</code></pre>

<p>and then your other file has:</p>

<pre><code>function hmac(key){
    alert(document.foo);
}
</code></pre>

<p>should access what you want</p>
","9826342","922","<javascript><hmac>","0","0","3","2013-02-01 21:24:35","","6","","13578","","2013-02-01 21:24:35","2012-03-22 16:10:17","","2012-03-22 16:33:18","2012-03-22 16:17:56"
"9826214","Reference External JavaScript File in Function","<p>Is it possible to reference a JavaScript file inside of a JavaScript function?</p>

<p>Therefore i am wanting to convert this:</p>

<pre><code>&lt;script type=""text/javascript"" src=""http://crypto-js.googlecode.com/files/2.5.3-crypto-sha1-hmac.js""&gt;&lt;/script&gt;
&lt;script type=""text/javascript""&gt;

var hmacString = Crypto.HMAC(Crypto.SHA1, ""Message"", ""Secret Passphrase"", { asString: true });

&lt;/script&gt;
</code></pre>

<p>In to:</p>

<pre><code>function hmac (input){

  var hmacString = Crypto.HMAC(Crypto.SHA1, ""Message"", ""KEY"", { asString: true });

  return hmacString;

}
</code></pre>

<p>I am using a tool called Cast Iron, which therefore restricts JavaScript down to only a function, but i need to call an external file, to load the needed functionality.</p>

<p>Is this even possible?</p>
","<p>Yes, you can load other js files with javascript. Depending on the load state where your function is executed, you may either use</p>

<pre><code>document.write('&lt;script type=""text/javascript"" src=""http://crypto-js.googlecode.com/files/2.5.3-crypto-sha1-hmac.js""'+'&gt;&lt;'+'/script&gt;""');
// loads synchronouly and executes
Crypto.HMAC(...); // is available here
</code></pre>

<p>Watch out that document.write breaks the whole page once your DOM is loaded. You can also use:</p>

<pre><code>var s = document.createElement(""script"");
s.type = ""text/javascript"";
s.src = ""http://crypto-js.googlecode.com/files/2.5.3-crypto-sha1-hmac.js"";
s.onload = function() {
    // the file should be executed now so
    Crypto.HMAC(...); // is available here
};
document.head.appendChild(s); // load asychronously
</code></pre>

<p>See also <a href=""https://stackoverflow.com/q/5415886/1048572"">Load js from external site on fly</a></p>
","9826366","922","<javascript><hmac>","0","0","3","2013-02-01 21:24:35","","6","","13578","","2013-02-01 21:24:35","2012-03-22 16:10:17","","2017-05-23 11:56:26","2012-03-22 16:19:49"
"35314629","How to sign data in PHP with HMAC using a PEM private key","<p>I have seen a lot of posts about how to create a HMAC in PHP, but the used secret was always a simple string (eg. ""secret""). What I need to do is create a HMAC with the secret being a private key, loaded for example from a file containing private key in PEM format. I have been unable to find any information on whether this is possible in PHP (using hash_hmac) or not.</p>

<h2>Usage</h2>

<p>A HmacSHA256 signature using a private key is created in Java and I would like to recreate this signature in PHP (from my understanding using hash_hmac with sha256 hashing algorithm) with the same private key loaded from a file.</p>

<p>To clarify: 
the private key in this scenario is used as a shared secret key, meaning that two parties have the key. The message verification process consists of sending a HMAC with the message, calculated with the private key, while the recipient calculates HMAC with an identical private key and verifies it against the sent signature. </p>

<h2>Code</h2>

<p>Java:</p>

<pre><code>byte[] data = getDataForSignature();
PrivateKey key = getPrivateKey(); // loaded from a file
Mac mac = Mac.getInstance(""HmacSHA256"");
mac.init(key);
byte[] hmac = mac.doFinal(data);
// compare hmac with received signature bytes
</code></pre>

<p>PHP:</p>

<pre><code>$key = openssl_pkey_get_private(""private.key"");
$sig = hash_hmac(""sha256"", $data, $key??, true);
</code></pre>

<p>Sample private key</p>

<pre><code>-----BEGIN RSA PRIVATE KEY-----
MIICXgIBAAKBgQCSWro05ZKVGxMTCqAyNZRAXp8Gd7wf6vywXRsFckm9MHOAWZL0
SvFAhM6tlCthuPkQb0c+Hx9PWH1+4sW2u3O+VDvjQEB0ZILd79LraBEshK/36Oux
yyw2K+ghk9Yh00nJOzkkonmdZmVxr0AAzw5el2h9yDjlUa1E8BH/1LzBBwIDAQAB
AoGANtwXbHiZh5bMgZi8D9YRqkdNqOj89aHp8loUJOiAR5B/2x64fSYSZLLjniEq
WckyYzyzIdActmtfL07l+ecuLRipsHoHuzjPiiRRnzJQbgBstnB8rHkuN275YSbC
3gE7nyyX0JPEviwqHv++Uig0RCD1ZbrG0SBMKBlGVrFMddECQQDmVguRhRScTJHH
RaXY/zjZtHp0L1dtzzSLM75+ji2UoRy1yK9z+rnE1PM5QC8PQixbwocGwpRIwGQn
hIg1YAM9AkEAoqk+VNbJ9ykoP9r+8o1PrPR1Ff+EIhpTthRyFngHNbNnOFB0D314
+V4wyO+a/gbiIAmvTuOXV/GwOlgnfVDJkwJBAJNHd5QvxPL/3sLNXPN4ljBWP2pl
DwFO2Wkcx/SCEtETh5kQ3mdJbVlXVMJJsQ2PoW923gHLjydJpYDDNJj0cH0CQQCW
8txHOvQ+C9GwQHirenvgExO9EFv8kdXxeNPPCiAWs6AsYGz0Gwpyz/gR4FlDN/wM
ozAu04IVONLDsh8jah9FAkEAsSUvlo7Nh1ITd75kUsStv7Tjxma3SuKViewWCprD
olDNtncfcZC5SrilHAJEabVxGy1fJL3hYvTYfqNkeB1TcA==
-----END RSA PRIVATE KEY-----
</code></pre>
","<p>Usually a private key is used to perform <em>signature generation</em> which is the asymmetric equivalent to creating a MAC with a symmetric secret key.</p>

<p>Note that a HMAC key can consist of any binary string, so in principle it would be possible to use HMAC with a binary encoded private key. That said, it doesn't make sense to use a asymmetric private key for HMAC. Only the person holding the private key would be able to verify the resulting authentication tag. In comparison, digital signatures can be verified using the public key of the key pair.</p>

<hr>

<p>Now if you have a <em>secret</em> key that was used within Java then you need to create the same (binary) <code>key</code> parameter for the PHP <code>hash_hmac</code> function.</p>
","35364498","906","<java><php><hash><signature><hmac>","3","1","1","2016-02-12 19:57:26","","15","","3035553","","2016-02-12 19:57:26","2016-02-10 11:58:29","","","2016-02-12 14:02:38"
"49216459","How to generate HMAC SHA 256 using hmacutils in java","<p>I've been trying to generate an HMAC for an API using code like so:</p>

<pre><code>public static void main(String[] args) {

    byte[] hmacSha256 = HmacUtils.hmacSha256(API_SECRET, ""totalParams"");

    System.out.println((Base64.getEncoder().encodeToString(hmacSha256)));
}
</code></pre>

<p>But when I use the string I get in my API call I receive the error:</p>

<blockquote>
  <p>{""code"":-1100,""msg"":""Illegal characters found in parameter
  'signature'; legal range is '^[A-Fa-f0-9]{64}$'.""}</p>
</blockquote>

<p>I thought that it meant I had to convert to hex, but the hex is not working either.</p>

<p>I don't care about the implementation, I just want a valid signature. Anyone know how to generate a valid signature in any way?</p>
","<p>See <a href=""https://stackoverflow.com/a/27817617/195833"">this answer</a> to a similar question, and then <a href=""https://stackoverflow.com/questions/9655181/how-to-convert-a-byte-array-to-a-hex-string-in-java"">this answer</a> to convert your <code>byte[]</code> to hex instead of using Base64.</p>

<p>(Short version: You've got 256 bits of hash, and the API is expecting 64 characters. Base64 gives you 44(ish), but hex should give you 64)</p>
","49218018","886","<java><hmac><sha>","0","2","1","2018-03-11 09:13:39","49218018","6","","","","","2018-03-11 03:48:57","","2018-03-11 09:13:39","2018-03-11 08:14:27"
"20760115","How to automatically set Date on http header in jquery, manually set header sends me a Refused to set unsafe header ""Date"" error","<p>I am using the HMAC for authentication, but        </p>

<pre><code> $.ajax({
            type: ""POST"",
            url: baseURL + ""/test/hmac"",
            contentType: ""application/json"",
            dataType: ""json"",
            beforeSend: function (request) {                    
                request.setRequestHeader('authorization', 'AuthHMAC '+client.key +"":"" + CryptoJS.HmacSHA1(canonical_string, client.secret).toString(CryptoJS.enc.Base64));
                request.setRequestHeader('content-md5', md5);
                request.setRequestHeader('Dates', date);         //Refused to set unsafe header ""Date""      
            },    
            data: JSON.stringify(data),
            success: function (data) {
                alert(data.message);
            },
            error: function (errorMessage) {
               if(errorMessage.status == 401)
                   alert('Access denied');
            }
        });
</code></pre>

<p>however the code gets a error on <code>request.setRequestHeader('Date', date);</code>
that the browser says to me 'Refused to set unsafe header ""Date"" '</p>

<p>this is problematic since Date header is important for HMAC against replay attack, so as I can't change much on the server , how can I do it on the client side to let it automatically add Date to the header</p>
","","","885","<jquery><authentication><hmac>","7","","0","2013-12-24 12:47:40","","3","","824624","","2013-12-24 12:47:40","2013-12-24 11:29:06","","",""
"36223062",".Net HMAC and base64 Encoding Issue","<p>I am trying to create a base64-encoded HMAC SHA512 hash using a secret of <code>secret</code> and a payload of <code>foo</code>. I am unable to make my .NET code produce the correct value. I am wondering if the encoding is the underlying issue.</p>

<p>Code:</p>

<pre class=""lang-cs prettyprint-override""><code>UTF8Encoding encoding = new UTF8Encoding();
HMACSHA512 hmac = new HMACSHA512(encoding.GetBytes(""secret"")); // init the HMAC hash with ""secret"" as a byte array
byte[] hash = hmac.ComputeHash(encoding.GetBytes(""foo"")); // hash the payload
String result = Convert.ToBase64String(hash); // Base64 encode the payload
</code></pre>

<p>The incorrect hash &amp; base64 result:</p>

<p><code>gt9xA96Ngt5F4BxF/mQrXRPGwrR97K/rwAlDHGZcb6Xz0a9Ol46hvekUJmIgc+vqxho0Ye/UZ+CXHHiLyOvbvg==</code></p>

<p>The expected hash &amp; base64 result:</p>

<p><code>ODJkZjcxMDNkZThkODJkZTQ1ZTAxYzQ1ZmU2NDJiNWQxM2M2YzJiNDdkZWNhZmViYzAwOTQzMWM2NjVjNmZhNWYzZDFhZjRlOTc4ZWExYmRlOTE0MjY2MjIwNzNlYmVhYzYxYTM0NjFlZmQ0NjdlMDk3MWM3ODhiYzhlYmRiYmU=</code></p>
","<p>Since second version is just Base64 of Hex representation you need to convert byte array to hex first and than Base64 ASCII version of the string.</p>

<p>Steps:</p>

<ul>
<li><a href=""https://stackoverflow.com/questions/311165/how-do-you-convert-byte-array-to-hexadecimal-string-and-vice-versa"">How do you convert Byte Array to Hexadecimal String, and vice versa?</a></li>
<li><a href=""https://stackoverflow.com/questions/12490507/c-sharp-convert-a-string-to-ascii-bytes"">C# Convert a string to ASCII bytes</a></li>
<li><a href=""https://stackoverflow.com/questions/11634237/conversion-from-byte-array-to-base64-and-back"">Conversion from byte array to base64 and back</a></li>
</ul>
","36223227","884","<c#><.net><hash><base64><hmac>","1","2","1","2016-03-25 15:49:57","36223227","2","","","","","2016-03-25 15:40:35","","2017-05-23 10:27:32","2016-03-25 15:49:57"
"9441498","Why am I getting the wrong signature for the Amazon Product Advertising API?","<p>I'm following the directions on the API documentation precisely, and after some frustration I finally put together something directly from their examples on <a href=""http://docs.amazonwebservices.com/AWSECommerceService/2011-08-01/DG/rest-signature.html"" rel=""nofollow"">http://docs.amazonwebservices.com/AWSECommerceService/2011-08-01/DG/rest-signature.html</a></p>

<p>I've tried this python script on a few machines and have gotten the same result on all of them.</p>

<pre><code>import hmac
from base64 import b64encode
from hashlib import sha256

secret_key = '1234567890'

to_sign = """"""GET
webservices.amazon.com
/onca/xml
AWSAccessKeyId=AKIAI44QH8DHBEXAMPLE&amp;ItemId=0679722769&amp;Operation=ItemLookup&amp;ResponseGroup=ItemAttributes%2COffers%2CImages%2CReviews&amp;Service=AWSECommerceService&amp;Timestamp=2009-01-01T12%3A00%3A00Z&amp;Version=2009-01-06""""""

print b64encode(hmac.new(secret_key, to_sign, sha256).digest())
</code></pre>

<p>The instructions say that the signature using this request, and this key, is <code>Nace+U3Az4OhN7tISqgs1vdLBHBEijWcBeCqL5xN9xg=</code> but I get <code>O6UTkH+m4zAQUvB+WXUZJeA8bZcKAdkc4crKgHtbc6s=</code></p>

<p>(Before anyone says anything: The example page displays the requests wrapped at 65 characters; I've already tried it. This doesn't provide a solution, and is not stated in the instructions for signature creation.)</p>

<hr>

<p>EDIT: I found the answer, see below.</p>
","<p>You might check out the Bottlenose library, <a href=""https://github.com/dlo/bottlenose"" rel=""nofollow"">https://github.com/dlo/bottlenose</a>, I have found that it makes dealing with AWS Product API much more friendly.</p>
","9441985","875","<python><hmac><amazon-product-api>","2","1","2","2013-04-12 15:02:31","9473576","1","1","294082","","2013-04-12 15:02:31","2012-02-25 05:19:56","","","2012-02-25 06:46:13"
"9441498","Why am I getting the wrong signature for the Amazon Product Advertising API?","<p>I'm following the directions on the API documentation precisely, and after some frustration I finally put together something directly from their examples on <a href=""http://docs.amazonwebservices.com/AWSECommerceService/2011-08-01/DG/rest-signature.html"" rel=""nofollow"">http://docs.amazonwebservices.com/AWSECommerceService/2011-08-01/DG/rest-signature.html</a></p>

<p>I've tried this python script on a few machines and have gotten the same result on all of them.</p>

<pre><code>import hmac
from base64 import b64encode
from hashlib import sha256

secret_key = '1234567890'

to_sign = """"""GET
webservices.amazon.com
/onca/xml
AWSAccessKeyId=AKIAI44QH8DHBEXAMPLE&amp;ItemId=0679722769&amp;Operation=ItemLookup&amp;ResponseGroup=ItemAttributes%2COffers%2CImages%2CReviews&amp;Service=AWSECommerceService&amp;Timestamp=2009-01-01T12%3A00%3A00Z&amp;Version=2009-01-06""""""

print b64encode(hmac.new(secret_key, to_sign, sha256).digest())
</code></pre>

<p>The instructions say that the signature using this request, and this key, is <code>Nace+U3Az4OhN7tISqgs1vdLBHBEijWcBeCqL5xN9xg=</code> but I get <code>O6UTkH+m4zAQUvB+WXUZJeA8bZcKAdkc4crKgHtbc6s=</code></p>

<p>(Before anyone says anything: The example page displays the requests wrapped at 65 characters; I've already tried it. This doesn't provide a solution, and is not stated in the instructions for signature creation.)</p>

<hr>

<p>EDIT: I found the answer, see below.</p>
","<p>Well, look at that...  The docs were wrong.</p>

<p>I stumbled on an old (nearly) duplicate of this question: <a href=""https://stackoverflow.com/questions/1306550/calculating-a-sha-hash-with-a-string-secret-key-in-python"">Calculating a SHA hash with a string + secret key in python</a></p>

<p>It looks like the <code>AWSAccessKeyId</code> value changed from <code>00000000000000000000</code> to <code>AKIAI44QH8DHBEXAMPLE</code> in the example requests page.</p>

<p>Updating this in the script prints the expected key, <code>Nace+U3Az4OhN7tISqgs1vdLBHBEijWcBeCqL5xN9xg=</code></p>

<pre><code>import hmac
from base64 import b64encode
from hashlib import sha256

secret_key = '1234567890'

to_sign = """"""GET
webservices.amazon.com
/onca/xml
AWSAccessKeyId=00000000000000000000&amp;ItemId=0679722769&amp;Operation=ItemLookup&amp;ResponseGroup=ItemAttributes%2COffers%2CImages%2CReviews&amp;Service=AWSECommerceService&amp;Timestamp=2009-01-01T12%3A00%3A00Z&amp;Version=2009-01-06""""""

print b64encode(hmac.new(secret_key, to_sign, sha256).digest())
</code></pre>
","9473576","875","<python><hmac><amazon-product-api>","2","2","2","2013-04-12 15:02:31","9473576","1","1","294082","","2013-04-12 15:02:31","2012-02-25 05:19:56","","2017-05-23 11:50:43","2012-02-27 22:44:59"
"17792869","Intercept HTTP Request that needs authorization Header with AngularJS ngResource","<p>Hello I'm doing a REST API client with AngularJS using ngResource plugin and my implementation of HMAC authentication.</p>

<p>I wrote an HttpIntercept Service that intercepts the http requests and calculate and attach the Authorization Header with HMAC sign. But with this implementation it calculates and attaches the sign to all requests, that's bad.</p>

<pre><code>.factory('authInterceptor', function($q) {
    return {
        request: function(request) {
                #sign calculation...
                request.headers['Authorization'] = sign;
            }
            return request || $q.when(request);
        }
    };
})

.controller('HomeCtrl', function ($scope,$resource) {
    var Articles = $resource('/api/articles');
    $scope.articles = Articles.query();
})
</code></pre>

<p>Do you have a suggestion to intercept only requests that needs authentication or all requests that came from ngResource plugin?</p>

<p>I thought to three workrounds:
1. an array list of the private requests
2. different subdomain for public and private APIs
3. attach supply http Header to the requests that need authentication</p>
","<p>See <a href=""https://docs.angularjs.org/api/ng/service/$http#overriding-the-default-transformations-per-request"" rel=""nofollow noreferrer"">$http and overriding transformations</a> and also <a href=""https://docs.angularjs.org/api/ngResource/service/$resource"" rel=""nofollow noreferrer"">$resource</a> </p>

<p>Each $resource action takes an $http.config like object which has transformRequest: </p>

<pre><code>var Articles = $resource(
    '/api/articles',
    {

    },
    {
        'query': { 
            method: 'GET', 
            isArray: true,
            transformRequest: function (config) {
                config.headers['Authentication']: 'sign';
                return config;
            }
        }
    });
</code></pre>
","44019365","874","<api><rest><authentication><angularjs><hmac>","2","0","1","2017-05-17 08:24:02","","1","","","","","2013-07-22 16:36:08","","","2017-05-17 08:24:02"
"24557854","hash_hmac analog for Java","<p>I need to get string's hash in Java, same as for PHP's hash_hmac.</p>

<p>Here's my PHP sample:</p>

<pre><code>$secret_key = 'foo';
$sig_str = 'bar';
$hash = hash_hmac('md5', $sig_str, $secret_key); 
</code></pre>

<p>And that's what I found for Java:</p>

<pre><code>SecretKeySpec keySpec = new SecretKeySpec(""foo"".getBytes(), ""HmacMD5"");
Mac mac = Mac.getInstance(keySpec.getAlgorithm());
mac.init(keySpec);
String result = new BASE64Encoder().encode(mac.doFinal(""bar"".getBytes()));
</code></pre>

<p>But results are different. What am I missing?</p>
","<p>Found solution here: <a href=""https://stackoverflow.com/questions/1609899/java-equivalent-to-phps-hmac-sha1"">java equivalent to php&#39;s hmac-SHA1</a> </p>

<p>The problem was in BASE64Encoder. Use </p>

<pre><code>for (byte b : digest) {
    System.out.format(""%02x"", b);
}
System.out.println();
</code></pre>

<p>or</p>

<pre><code>new BigInteger(digest).toString(16);
</code></pre>

<p>instead.</p>
","24558172","870","<java><php><md5><hmac>","0","0","1","2014-07-03 15:51:35","24558172","4","2","","","","2014-07-03 15:31:33","","2017-05-23 10:32:22","2014-07-03 15:46:34"
"49831860","Signing a message with hmac and sha256 in dart","<p>I try to generate a sha256 HMAC using a base64-decoded secret key on a message. I would like to use the dart language. In python, I could do it with the following code:</p>

<pre><code># PYTHON CODE
import hmac, hashlib, base64
...
message = 'blabla'
secret = 'DfeRt[...]=='
secret_b64 = base64.b64decode(secret)
signature = hmac.new(secret_b64, message, hashlib.sha256)
signature_b64 = signature.digest().encode('base64').rstrip('\n')
</code></pre>

<p>Here is what I tried with dart:</p>

<pre><code>// DART CODE
import 'package:crypto/crypto.dart';
import 'dart:convert';
...
String message = 'blabla';
String secret = 'DfeRt[...]=='
var secret_b64 = BASE64.decode(secret);
var hmac = new Hmac(sha256, secret_b64);
// what now?
</code></pre>

<p>But then I don't know how to go on. I found some old example code which looks like the following</p>

<pre><code>var message_byte = UTF8.encode(message);
hmac.add(message_byte);
</code></pre>

<p>However, the method ""add"" does not exist any more in the Hmac class. I also tried this, but I am not sure if this is correct</p>

<pre><code>var message_byte = UTF8.encode(message);    
var signature = hmac.convert(message_byte);
var signature_b64 = BASE64.encode(signature.bytes);
</code></pre>

<p>Can someone help me out?</p>
","<p>If you have the whole 'message' available then just call convert(). If the message is large or in pieces then deal with it in chunks.</p>

<p>Your example is simple, when spelled out step by step.</p>

<pre><code>  String base64Key = 'DfeRt...';
  String message = 'blabla';

  List&lt;int&gt; messageBytes = utf8.encode(message);
  List&lt;int&gt; key = base64.decode(base64Key);
  Hmac hmac = new Hmac(sha256, key);
  Digest digest = hmac.convert(messageBytes);

  String base64Mac = base64.encode(digest.bytes);
</code></pre>

<p>Please read the <a href=""https://www.dartlang.org/guides/language/effective-dart"" rel=""nofollow noreferrer"">Effective Dart</a> guide. Note how constants are now lower case, variables in Dart use camel case, etc</p>
","49836010","869","<dart><base64><sha256><hmac>","1","2","1","2018-04-14 20:42:55","49836010","4","","6280224","","2018-04-14 15:08:09","2018-04-14 13:16:07","","","2018-04-14 20:42:55"
"42956922","How to give hex string to Hmac SHA256 objective C?","<p>I am trying to generate hmac SHA256 in objective C in the following way:</p>

<pre><code>const char *cKey  = [key cStringUsingEncoding:NSUTF8StringEncoding];
const char *cData = [data cStringUsingEncoding:NSUTF8StringEncoding];
unsigned char cHMAC[CC_SHA256_DIGEST_LENGTH];
CCHmac(kCCHmacAlgSHA256, cKey, strlen(cKey), cData, strlen(cData), cHMAC);
</code></pre>

<p>This works fine as long as the <strong>key</strong> is a string. Problem is on the external server command used to generate mac is:</p>

<pre><code>openssl dgst -binary -sha256 -mac HMAC -macopt hexkey:$key 
</code></pre>

<p>There hmac is getting generated considering key as <strong>hexkey</strong> . So obviously hmac generated is different.</p>

<p>How do i tell the CCMac function in objective C to consider the key as hex key? I already tried converting the string key to byte array and passing it to CCMAC but still didn't work.</p>

<p>In android I have achieved the same by converting the hex number to a Big Integer and then doing getBytes on it, use it to create the secret key.
Hope some of you will be able to guide me.  </p>
","<p>Is this what you're looking for?</p>

<pre><code>- (NSData *)dataFromHexString:(NSString *)sHex {
    const char *chars = [sHex UTF8String];
    int i = 0;
    NSUInteger len = sHex.length;

    NSMutableData *data = [NSMutableData dataWithCapacity:len / 2];
    char byteChars[3] = {'\0','\0','\0'};
    unsigned long wholeByte;

    while (i &lt; len) {
        byteChars[0] = chars[i++];
        byteChars[1] = chars[i++];
        wholeByte = strtoul(byteChars, NULL, 16);
        [data appendBytes:&amp;wholeByte length:1];
    }

    return data;
}

- (NSData *)hmacForHexKey:(NSString *)hexkey andStringData:(NSString *)data
{

    NSData *keyData = [self dataFromHexString:hexkey];

    const char *cKey  = [keyData bytes];
    const char *cData = [data cStringUsingEncoding:NSUTF8StringEncoding];

    unsigned char cHMAC[CC_SHA256_DIGEST_LENGTH];

    CCHmac(kCCHmacAlgSHA256, cKey, keyData.length, cData, strlen(cData), cHMAC);

    return [[NSData alloc] initWithBytes:cHMAC length:sizeof(cHMAC)];

}

- (NSData *)hmacForKey:(NSString *)key andStringData:(NSString *)data
{

    const char *cKey  = [key cStringUsingEncoding:NSUTF8StringEncoding];
    const char *cData = [data cStringUsingEncoding:NSUTF8StringEncoding];

    unsigned char cHMAC[CC_SHA256_DIGEST_LENGTH];

    CCHmac(kCCHmacAlgSHA256, cKey, strlen(cKey), cData, strlen(cData), cHMAC);

    return [[NSData alloc] initWithBytes:cHMAC length:sizeof(cHMAC)];

}

- (void)testIt {

    NSString *key = @""This is my random key."";
    NSString *hexKey = @""54686973206973206d792072616e646f6d206b65792e"";

    NSString *data = @""This is a data string."";

    NSData *hmac1 = [self hmacForKey:key andStringData:data];
    NSLog(@""hmacForKey   : %@"", hmac1);

    NSData *hmac2 = [self hmacForHexKey:hexKey andStringData:data];
    NSLog(@""hmacForHexKey: %@"", hmac2);
}
</code></pre>
","42961779","869","<ios><objective-c><xcode><sha256><hmac>","0","3","1","2017-03-22 20:13:53","42961779","3","","799369","","2017-03-22 16:13:34","2017-03-22 16:00:59","","","2017-03-22 20:13:53"
"7245157","python equivalent of perl hmac_sha1_hex","<p>i need to reproduce in python what perl does </p>

<pre><code>  # perl
  perl -e'use Digest::HMAC_SHA1 qw(hmac_sha1_hex); my $hmac = hmac_sha1_hex(""string1"", ""string2""); print $hmac . ""\n"";'
  25afd2da17e81972b535d15ebae464e291fb3635


  #python
  python -c 'import sha; import hmac; print hmac.new(""string1"", ""string2"", sha).hexdigest()'
  3953fa89b3809b8963b514999b2d27a7cdaacc77
</code></pre>

<p>as you can see the hex digest is not the same ... how can I reproduce the perl code in python ?</p>

<p>thanks !</p>
","<p>Python's HMAC constructor just takes the key and the message in the opposite order -- Python's <code>hmac</code> takes the key first, Perl's <code>Digest::HMAC</code> takes the key second.</p>

<pre><code>python -c 'import sha; import hmac; print hmac.new(""string2"", ""string1"", sha).hexdigest()'
25afd2da17e81972b535d15ebae464e291fb3635
</code></pre>

<p>Matches your Perl example just fine :)</p>
","7245222","864","<python><perl><sha1><hmac>","2","9","1","2018-12-04 08:28:46","7245222","1","","","","","2011-08-30 14:52:02","","","2011-08-30 14:57:09"
"1625607","Best way to generate a hash signature (HMAC) for XMLSerialized objects in .NET?","<p>I need to generate a HMAC for objects that I am serializing using the XMLSerializer found in the .NET framework. Each object will contain a property called ""HMAC"" that will contain a hash of the object's values itself but excluding the ""HMAC"" field. I've found <a href=""https://stackoverflow.com/questions/1331081/how-to-serialize-an-object-in-c-and-prevent-tampering"">this question</a> that mentions a built-in solution within the CLR but doesn't elaborate on exactly what its called or how I go about using it?</p>

<p>A sample object would look something like this:</p>

<pre><code>[Serializable]
[XmlRoot(""request"", IsNullable = false)]
public class Request
{

    [XmlElement(ElementName = ""hmac"")]
    public string Hmac { get; set; } 

    [XmlElement(ElementName = ""nonce"")]
    public string Nonce { get; set; }

    [XmlElement(ElementName = ""expiration"")]
    public DateTime Expiration { get; set; }

    /* A bunch of other properties to be serialized */

    private Request() { }

    public Request(string hmac, string nonce, DateTime expiration)
    {
        Hmac = hmac;
        Nonce = nonce;
        Expiration = expiration;
    }
}
</code></pre>

<p>The HMAC property will need to be set as a serialization of the entire object, excluding the HMAC object itself. My first thoughts are setting up some sort of two-pass serialization, which involves:</p>

<ol>
<li>Setting an xmlignore property to the HMAC object on the first pass</li>
<li>Serializing the entire object</li>
<li>Hashing the result, and setting the value of the HMAC property</li>
<li>Re-serializing the whole thing again, ready for transmission.</li>
</ol>

<p>Is this the best way to go about it? Has anyone done anything like this before, and what have you found to be the cleanest way of going about it???</p>
","<p>I think you will have to serialize it twice to get the exact effect you described. One way to make that easier would be to not use XmlIgnore but instead add a public specified property (which .NET XML serialization treats specially to programmatically control whether to emit the similarly named property):</p>

<pre><code> [XmlIgnore]
 public bool HmacSpecified
 {
     get { return !String.IsNullOrEmpty(this.Hmac); }
     set { }
 }
</code></pre>

<p>What this will do is only emit the <code>hmac</code> XML node if one exists. A similar effect could be achieved with the <code>DefaultValueAttribute</code> but I've found some inconsistencies with it (e.g. <code>null</code> is sometimes replaced with <code>""""</code> during compilation). Plus if your logic was more complex than a single contant sentinel value you could handle that in the property but not in a static attribute.</p>

<pre><code>get { return !this.IsCalculatingHmac(); }
</code></pre>

<p>This would be the way I would do it if the format had to exactly match what you've described.</p>

<hr>

<p>If you have flexibility in the output format, another approach you might consider is having a message container which contains the message body (your current XML doc) and an HMAC Signature value. This way you would only need to serialize the document once.</p>

<p>Even if the envelope were part of a larger serialization document you could implement an <code>IXmlSerializable.WriteXml</code> interface on the envelope. This would allow you to carefully serialize the message to a string, then perform the hash, then write out the HMAC and message elements all in one via <code>XmlWriter.WriteRaw</code>.</p>

<p>This would be the way I would do it if performance was important.</p>
","1654689","864","<.net><xml-serialization><hmac>","2","2","1","2009-11-23 07:16:05","","0","","-1","","2017-05-23 10:27:36","2009-10-26 15:56:34","","","2009-10-31 15:19:14"
"42874489","How to generate hash_hmac sha1 php?","<p>I have two problem with hmac</p>

<p>First:</p>

<pre><code>$klucz = """"; 
$url = """"; 
$nazwaUsera = """";
$nazwaKlucza = ""faktura"";

$curlHandle = curl_init($url);

$hashWiadomosci = hmac($klucz, $url .$nazwaUsera.$nazwaKlucza);
$headers = array(
'Accept: application/pdf',
'Content-type: application/pdf; charset = UTF-8',
'Authentication: IAPIS user='.$nazwaUsera.', hmac-
sha1='.$hashWiadomosci
);
</code></pre>

<p>if is hmac problem is: Fatal error: Uncaught Error: Call to undefined function hmac()</p>

<p>Bat if is </p>

<pre><code>$klucz = """"; 
$url = """"; 
$nazwaUsera = """";
$nazwaKlucza = ""faktura"";

$curlHandle = curl_init($url);

$hashWiadomosci = hash_hmac($klucz, $url, $nazwaUsera.$nazwaKlucza);
$headers = array(
'Accept: application/pdf',
'Content-type: application/pdf; charset = UTF-8',
'Authentication: IAPIS user='.$nazwaUsera.', hmac-
sha1='.$hashWiadomosci
);
</code></pre>

<p>problem is: Warning: hash_hmac(): Unknown hashing algorithm: EC8A18CEC9D1F1B2</p>

<p>how solved this?</p>
","<p>Try this:</p>

<pre><code>hashWiadomosci = hash_hmac('sha256', $klucz . $url, $nazwaUsera.$nazwaKlucza);
</code></pre>

<p>First parameter must be the hash algorithm you need to be used (you can call <a href=""http://php.net/manual/en/function.hash-algos.php"" rel=""nofollow noreferrer""><code>hash_algos</code></a> to inspect supported algorithms in your platform. I.E. md5"", ""sha256"", ""haval160,4"".</p>
","42874521","863","<php><curl><hmac>","0","0","1","2017-03-18 12:37:56","42874521","1","","","","","2017-03-18 12:35:22","","","2017-03-18 12:37:56"
"52964323","How to generate secret key to get TOTP for HMAC SHA512 comply with RFC6238 and RFC4086?","<p>I have to make an HTTP POST request to the URL <a href=""http://example.com/test"" rel=""nofollow noreferrer"">http://example.com/test</a> which contains the JSON string as a body part, headers ""Content-Type:application/json"" and ""Authorization: Basic userid:password"". userid is abc@example.com and password must be 10-digit time-based one time password comply with RFC6238 TOTP using HMAC-SHA-512 for the hash function.</p>

<p>Token shared secret should be ""abc@example.comTEXT5"" without double quotations.</p>

<p>So, to achieve above I modified the Java code of RFC6238 <a href=""https://tools.ietf.org/html/rfc6238"" rel=""nofollow noreferrer"">RC6238 TOTP Algo</a></p>

<p>To get TOTP, I converted the shared secret ""abc@example.comTEXT5"" to HMAC-SHA512 using <a href=""https://www.freeformatter.com/hmac-generator.html"" rel=""nofollow noreferrer"">online converter tool</a>  as well some codes which generate the same 128 character length HEX code</p>

<p>Making the request always responses that ""TOTP is wrong"".</p>

<p>I noticed that I generated the wrong secret key, so there is the wrong TOTP. So, how can I generate the correct secret key that complies HMAC-SHA512 with Java code of RFC6238 algorithm?</p>

<p>There is default key as seed on the algorithm:</p>

<pre><code>String seed64 = ""3132333435363738393031323334353637383930"" +
         ""3132333435363738393031323334353637383930"" +
         ""3132333435363738393031323334353637383930"" +
         ""31323334"";
</code></pre>

<p>How can I get such seed64 for my shared secret ""abc@example.comTEXT5""?
My modified code is <a href=""https://gist.github.com/sah-arjun/2507a0b097f4917603ef4cf7c4be12b4"" rel=""nofollow noreferrer"">10 digit TOTP</a></p>

<p>I appreciate help from everyone!</p>
","<p>The example 64 byte seed in <a href=""https://tools.ietf.org/html/rfc6238#appendix-A"" rel=""nofollow noreferrer"">Appendix A of RFC 6238</a> is the HEX encoded version of the ASCII secret <code>12345678901234567890</code> provided in <a href=""https://tools.ietf.org/html/rfc6238#appendix-B"" rel=""nofollow noreferrer"">Appendix B</a> which contains the truth table. </p>

<pre><code>ASCII 1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0
HEX   31 32 33 34 35 36 37 38 39 30 31 32 33 34 35 36 37 38 39 30
</code></pre>

<p>If you want to convert your shared secret using the same pattern, you would convert <code>abc@example.comTEXT5</code> to HEX in string format if you're using the example code provided in Appendix A.</p>

<p>This would come out to the following HEX string :</p>

<p><code>616263406578616D706C652E636F6D5445585435</code></p>

<p>To build the example 64 byte seed used for the SHA-512 hash the initial 20 bytes are repeated to make 64 bytes total to achieve an optimal key length for the SHA-512 hash. </p>

<p>Doing the same with your example string would produce the following seed:</p>

<pre><code>String seed64 = ""616263406578616D706C652E636F6D5445585435"" +
         ""616263406578616D706C652E636F6D5445585435"" +
         ""616263406578616D706C652E636F6D5445585435"" +
         ""61626340"";
</code></pre>

<p>If you use the rest of the example code to calculate the time step and request a 10 digit TOTP code, I assume it will work for you. </p>

<p>If you are using something like this in production, you may wish to use a more randomly generated secret. </p>

<p>For example, to generate a 64 byte secret for SHA-512, you could do something like:</p>

<pre><code>  public static String generateRawSecret(int length) {
    byte[] buf = new byte[length];
    new SecureRandom().nextBytes(buf);
    String rawSecret = Base64.getEncoder().encodeToString(buf);
    return rawSecret.substring(1, length + 1);
  }

  // Random 64 byte secret
  String secret = generateRawSecret(64);
</code></pre>

<p>It looks like you've already got most of this coded, but if you're looking for some additional Java examples, the following link is a GitHub project that has a simple utility class with a bunch of tests. <a href=""https://github.com/FusionAuth/fusionauth-2FA"" rel=""nofollow noreferrer"">https://github.com/FusionAuth/fusionauth-2FA</a></p>
","53888771","860","<java><hmac><totp>","0","1","1","2018-12-21 19:16:07","","0","0","","","","2018-10-24 08:31:28","","2018-12-21 19:16:07","2018-12-21 17:33:21"
"18842682","php is converting base 16 to base 2 incorrectly","<p>Why am I getting this output from my function?</p>

<pre><code>echo $var = hash_hmac('ripemd160', 'http://www.weburlhere.org', 0, 0);
echo ""\r\n"";
echo $converted = base_convert($var, 16, 2);
echo ""\r\n"";
</code></pre>

<p>Outputs: </p>

<pre><code>407a9d8868a678e12d9fc0264f9ae11e8761b557
0000000000000000000000000000000000000000000000000000000000000000
</code></pre>

<p>Whereas <code>base_convert($var, 16, 10)</code> outputs</p>

<p><code>1421821959848150668406846884086820088622688484226</code> correctly.</p>

<p>Also, as a side-question (bonus points for this!) I'm assuming ripemd160 gives me a unique identifier for each input preimage. I'm attempting to make a url-shortening service that shortens a URL from any length to its hash digest (I'm assuming converting the binary to base64 with <code>base64_encode($converted)</code> will shorten the URL even more). Is this correct, and is this a good idea?</p>
","<p>The PHP document on <a href=""http://php.net/manual/en/function.base-convert.php"" rel=""nofollow"">base_convert</a> said</p>

<blockquote>
  <p>base_convert() may lose precision on large numbers due to properties
  related to the internal ""double"" or ""float"" type used. Please see the
  Floating point numbers section in the manual for more specific
  information and limitations.</p>
</blockquote>

<p>So, you cannot rely on this function to convert a large numbers. However, it is very easy manually write a function to convert from base 16 to base 2.</p>

<pre><code>function hex2bin($hex) {
    $table = array('0000', '0001', '0010', '0011', 
                   '0100', '0101', '0110', '0111',
                   '1000', '1001', '1010', 'a' =&gt; '1011', 
                   'b' =&gt; '1100', 'c' =&gt; '1101', 'e' =&gt; '1110', 
                   'f' =&gt; '1111');
    $bin = '';

    for($i = 0; $i &lt; strlen($hex); $i++) {
        $bin .= $table[strtolower(substr($hex, $i, 1))];
    }

    return $bin;
}
echo hex2bin('407a9d8868a678e12d9fc0264f9ae11e8761b557');
</code></pre>

<blockquote>
  <p>I'm assuming converting the binary to base64 with
  base64_encode($converted) will shorten the URL even more). Is this
  correct, and is this a good idea</p>
</blockquote>

<p>Yes, it is shorter. It is 32 times shorter than binary, and 4 times shorter than base-16. However, ripemd160 does not guarantee to give an unique identifier for every link. There are still some collisions (which I don't even know how rare it will be).</p>
","18842911","858","<php><encoding><hash><base><hmac>","1","3","2","2013-09-17 07:01:33","18842911","5","","","","","2013-09-17 06:28:08","","2013-09-17 06:52:37","2013-09-17 06:41:20"
"18842682","php is converting base 16 to base 2 incorrectly","<p>Why am I getting this output from my function?</p>

<pre><code>echo $var = hash_hmac('ripemd160', 'http://www.weburlhere.org', 0, 0);
echo ""\r\n"";
echo $converted = base_convert($var, 16, 2);
echo ""\r\n"";
</code></pre>

<p>Outputs: </p>

<pre><code>407a9d8868a678e12d9fc0264f9ae11e8761b557
0000000000000000000000000000000000000000000000000000000000000000
</code></pre>

<p>Whereas <code>base_convert($var, 16, 10)</code> outputs</p>

<p><code>1421821959848150668406846884086820088622688484226</code> correctly.</p>

<p>Also, as a side-question (bonus points for this!) I'm assuming ripemd160 gives me a unique identifier for each input preimage. I'm attempting to make a url-shortening service that shortens a URL from any length to its hash digest (I'm assuming converting the binary to base64 with <code>base64_encode($converted)</code> will shorten the URL even more). Is this correct, and is this a good idea?</p>
","<p>According to the PHP manual, the <a href=""http://php.net/manual/en/function.base-convert.php"" rel=""nofollow""><code>base_convert()</code></a> is limited to <code>double</code> or <code>float</code> 32-bit precision. You can use <code>gmp</code> library to deal with numbers of arbitrary length.</p>

<p>A <a href=""http://www.php.net/manual/en/function.base-convert.php#51077"" rel=""nofollow"">sample code</a> also from the PHP manual page:</p>

<pre><code>/* use gmp library to convert base. gmp will convert numbers &gt; 32bit
 * @author lindsay at bitleap dot com
 * @link you can execute this code at http://ideone.com/FT29qo
 */
function gmp_convert($num, $base_a, $base_b)
{
    return gmp_strval ( gmp_init($num, $base_a), $base_b );
}
</code></pre>
","18843167","858","<php><encoding><hash><base><hmac>","1","3","2","2013-09-17 07:01:33","18842911","5","","","","","2013-09-17 06:28:08","","2013-09-17 07:01:33","2013-09-17 06:56:01"
"8523124","Does a Message authentication code (MAC) ensure authenticity of the key used?","<p>I have to protects confidentiality, integrity and authenticity of a file of records with a password. The number of records can potentially be more then 32^2 and each record can be accessed independently.</p>

<p>One way to implement it is</p>

<ol>
<li>Generate a 256-bit random salt and store it in the file header.</li>
<li>Generate a derived key from the password and the salt using PBKDF2 with HMAC-SHA256 from PKCS #5.</li>
<li>For each record generate a 96-bit random initialization vector.</li>
<li>Encrypt each record's content using AES-256 in GCM mode using the derived key, the initialization vector, and (as additional authenticated data) the position of the record in a file.</li>
<li>As a result, each record will store an initialization vector, an encrypted content, and a MAC.</li>
</ol>

<p>But the <a href=""http://csrc.nist.gov/publications/nistpubs/800-38D/SP-800-38D.pdf"" rel=""nofollow"">NIST Special Publication SP800-38D defining GCM and GMAC</a> requires the number of records to be less than 32^2 for the initialization vectors to be unique.</p>

<p>So I devised another solution: create a key for each record with HMAC-SHA256 using the derived key as a key and the position of the record in a file as a message to be authenticated (salt).</p>

<p>So the question is do I need to provide the position of the record in a file to the authenticated encryption algorithm
as an additional authenticated data since I've already taken care of it when generating the key?</p>

<p>Additionally do I really need to use initialization vectors at all since all the records will be encrypted and
authenticated using supposedly different keys generated by HMAC-SHA256(PBKDF2(HMAC-SHA256, password, salt, iterationCount, 256), blockAddress) ?</p>

<p>I don't know what the size of the file will be, so I presume it can be very large.</p>
","<p>If I understood you correctly (bit of a disclaimer, sorry) then you should be fine without adding the position within the record in the file.</p>

<p>No you don't need a random IV if you only use a (session) key once. Using an IV consisting of zero's would be enough (deterministic construction, using one device and a counter set to zero, if we keep with the NIST nomenclature).</p>
","8543968","852","<security><encryption><hmac><password-encryption><authenticity>","0","0","1","2011-12-17 10:00:03","8543968","0","","","","","2011-12-15 16:14:26","","","2011-12-17 10:00:03"
"40538727","Why is this HMAC SHA256 hash I'm creating using the wrong character encoding?","<p>I'm doing this in C# to create a hash:</p>

<pre><code>        using (var hmacsha256 = new HMACSHA256(Encoding.ASCII.GetBytes(secret)))
        {
            return System.Text.Encoding.UTF8.GetString(hmacsha256.ComputeHash(Encoding.ASCII.GetBytes(message)));
        }
</code></pre>

<p>I use the following JSON:</p>

<pre><code>{
    ""client_id"": ""26075235"",
    ""client_version"": ""1.0.0"",
    ""event"": ""app.uninstall"",
    ""timestamp"": ""1478741247"",
    ""data"": {
        ""user_id"": ""62581379"",
        ""site_id"": ""837771289247593785"",
        ""domain"": """"
    }
}
</code></pre>

<p>and I get this: </p>

<p>sX�m�.-�n�0�v@�i!S��IEC,�56</p>

<p>I'm expecting the hash to look like this:</p>

<p>960aff6c335a87e6077f41066358980a88db54062505875e5a8c363ded9d027e</p>

<p>If I do the hashing like this:</p>

<pre><code>        using (var hmacsha256 = new HMACSHA256(Encoding.UTF8.GetBytes(secret)))
        {
            return System.Text.Encoding.UTF8.GetString(hmacsha256.ComputeHash(Encoding.UTF8.GetBytes(message)));
        }
</code></pre>

<p>I get the same thing. How do I return what I'm expecting?</p>

<p>What am I not understanding about this?</p>
","<p>An arbitrary binary data can not be converted to string... Seems like you want <a href=""https://msdn.microsoft.com/en-us/library/system.bitconverter.tostring(v=vs.110).aspx"" rel=""nofollow noreferrer""><code>BitConverter.ToString</code></a> ,  <a href=""https://msdn.microsoft.com/en-us/library/system.convert.tobase64string(v=vs.110).aspx"" rel=""nofollow noreferrer""><code>Convert.ToBase64String</code></a> or <a href=""https://msdn.microsoft.com/en-us/library/system.runtime.remoting.metadata.w3cxsd2001.soapbase64binary(v=vs.110).aspx"" rel=""nofollow noreferrer""><code>System.Runtime.Remoting.Metadata.W3cXsd2001.SoapBase64Binary</code></a>, instead of <code>System.Text.Encoding.UTF8.GetString</code></p>
","40538788","849","<c#><encoding><sha><hmac>","0","2","2","2016-11-11 01:36:44","40538788","0","","3996167","","2016-11-10 23:26:19","2016-11-10 23:21:16","","2016-11-10 23:39:04","2016-11-10 23:27:02"
"40538727","Why is this HMAC SHA256 hash I'm creating using the wrong character encoding?","<p>I'm doing this in C# to create a hash:</p>

<pre><code>        using (var hmacsha256 = new HMACSHA256(Encoding.ASCII.GetBytes(secret)))
        {
            return System.Text.Encoding.UTF8.GetString(hmacsha256.ComputeHash(Encoding.ASCII.GetBytes(message)));
        }
</code></pre>

<p>I use the following JSON:</p>

<pre><code>{
    ""client_id"": ""26075235"",
    ""client_version"": ""1.0.0"",
    ""event"": ""app.uninstall"",
    ""timestamp"": ""1478741247"",
    ""data"": {
        ""user_id"": ""62581379"",
        ""site_id"": ""837771289247593785"",
        ""domain"": """"
    }
}
</code></pre>

<p>and I get this: </p>

<p>sX�m�.-�n�0�v@�i!S��IEC,�56</p>

<p>I'm expecting the hash to look like this:</p>

<p>960aff6c335a87e6077f41066358980a88db54062505875e5a8c363ded9d027e</p>

<p>If I do the hashing like this:</p>

<pre><code>        using (var hmacsha256 = new HMACSHA256(Encoding.UTF8.GetBytes(secret)))
        {
            return System.Text.Encoding.UTF8.GetString(hmacsha256.ComputeHash(Encoding.UTF8.GetBytes(message)));
        }
</code></pre>

<p>I get the same thing. How do I return what I'm expecting?</p>

<p>What am I not understanding about this?</p>
","<p>Solved now. I use this string extension method, so to get a lowercase HMAC SHA 256 Hash for a string, I can just do:</p>

<p>mymessage.HmacSha256Digest(mysecret)</p>

<pre><code>public static string HmacSha256Digest(this string message, string secret)
{
    ASCIIEncoding encoding = new ASCIIEncoding();
    byte[] keyBytes = encoding.GetBytes(secret);
    byte[] messageBytes = encoding.GetBytes(message);
    System.Security.Cryptography.HMACSHA256 cryptographer = new System.Security.Cryptography.HMACSHA256(keyBytes);

    byte[] bytes = cryptographer.ComputeHash(messageBytes);

    return BitConverter.ToString(bytes).Replace(""-"", """").ToLower();
}
</code></pre>
","40539881","849","<c#><encoding><sha><hmac>","0","2","2","2016-11-11 01:36:44","40538788","0","","3996167","","2016-11-10 23:26:19","2016-11-10 23:21:16","","","2016-11-11 01:36:44"
"12265035","Linkedin API Error Invalid Signature in iPhone Starter Kit","<p>I've tried to run the OAuthStarterKit xcode project out of the box, entered the correct api key/secret and oauth user token/secret. When I get to authorizing with this code:</p>

<pre><code>    OAMutableURLRequest *request = 
        [[[OAMutableURLRequest alloc] initWithURL:requestTokenURL
                                         consumer: self.consumer
                                            token: self.requestToken   
                                         callback:linkedInCallbackURL
                                signatureProvider:sha] autorelease];
</code></pre>

<p>It returns the error ""signature_invalid"", which seems to indicate an incorrect signature. the clear text and secret have a mix of upper and lower case chars, I'm not sure that that should make a difference.</p>

<p>If I use </p>

<pre><code>requestTokenURLString = @""https://api.linkedin.com/uas/oauth/requestToken?scope=r_basicprofile+r_emailaddress"";
</code></pre>

<p>It returns invalid sig... but if I use a basic permissions call</p>

<pre><code>requestTokenURLString = @""https://api.linkedin.com/uas/oauth/requestToken;
</code></pre>

<p>It works fine, but it means I only have basic profile permissions, where I need things like the email address.</p>

<p>Entering all of the same data in the test console seems to work fine here: </p>

<pre><code>https://developer.linkedin.com/oauth-test-console
</code></pre>

<p>Anyone know what I should be doing, thinking, or where I should be looking?
Further log info:</p>

<pre><code>oauth_problem=signature_invalid
oauth_problem_advice=com.linkedin.security.auth.pub.LoginDeniedInvalidAuthTokenException while obtaining request token for: POST https://api.linkedin.com/uas/oauth/requestToken/oauth_callback:hdlinked://linkedin/oauth 
oauth_consumer_key: XXX
oauth_nonce
oauth_signature_method: 3DHMACSHA1

2012-09-04 23:36:07.054 OAuthStarterKit[31952:c07] secret: TIDi9XXXXXXX
2012-09-04 23:36:07.054 OAuthStarterKit[31952:c07] base64EncodedResult: JXW6ZWUpXv7ba98o2hcUXodDhmg=
</code></pre>

<p>I'm using the code sample from here <a href=""https://github.com/synedra/LinkedIn-OAuth-Sample-Client"" rel=""nofollow"">https://github.com/synedra/LinkedIn-OAuth-Sample-Client</a></p>

<p>Edit: Will be trying to get to the bottom of this tomorrow and answer my own question if no one beats me to it.</p>
","<p>After much wrangling with the Linkedin API Beast, I found the issue to be in the way things are encoded, a long story, in OAuthLoginView.m in method 'requestTokenFromProvider' I needed to include the param 'scope' with the relevant permissions in a OARequestParameter object.</p>

<p>(based off the github repo -> <a href=""https://github.com/synedra/LinkedIn-OAuth-Sample-Client"" rel=""nofollow"">https://github.com/synedra/LinkedIn-OAuth-Sample-Client</a>) </p>

<p>After that, wherever you're making your api call, (in OAuthStarterKit for example) like in ProfileTabView::profileApiCall you can fire off URL posts like this: <a href=""http://api.linkedin.com/v1/people/~:(id,first-name,last-name,industry"" rel=""nofollow"">http://api.linkedin.com/v1/people/~:(id,first-name,last-name,industry</a>)""]; 
or if you need their email address, it appears (as long as you've got permission to access email, you can grab that too as simply as this:</p>

<pre><code>NSURL *url = [NSURL URLWithString:@""http://api.linkedin.com/v1/people/~:(id,first-name,last-name,industry,email-address)""];
</code></pre>

<p>See the code for using a OARequestParameter in the URL request below...</p>

<pre><code>- (void)requestTokenFromProvider
{
    OAMutableURLRequest *request = 
            [[[OAMutableURLRequest alloc] initWithURL:requestTokenURL
                                             consumer:self.consumer
                                                token:nil   
                                             callback:linkedInCallbackURL
                                    signatureProvider:nil] autorelease];

    [request setHTTPMethod:@""POST""];

    OARequestParameter * scopeParameter=[OARequestParameter requestParameter:@""scope"" value:@""r_fullprofile r_contactinfo r_emailaddress""];

    [request setParameters:[NSArray arrayWithObject:scopeParameter]];

    OADataFetcher *fetcher = [[[OADataFetcher alloc] init] autorelease];
    [fetcher fetchDataWithRequest:request
                         delegate:self
                didFinishSelector:@selector(requestTokenResult:didFinish:)
                  didFailSelector:@selector(requestTokenResult:didFail:)];    
}
</code></pre>

<p>And for a more in depth short cut to using linkedin's API I'll keep some quicktips on my blog here ->http://techrantnz.blogspot.com.au/2012/09/the-linkedin-api-with-oauthstarterkit.html</p>

<p>If you wish to check things are working, check the method which is called if it succeeds</p>

<pre><code>- (void)profileApiCallResult:(OAServiceTicket *)ticket didFinish:(NSData *)data
</code></pre>

<p>If you output the response body you might see something like:</p>

<pre><code>2012-09-05 21:40:55.109 OAuthStarterKit[12244:c07] profile: {
    emailAddress = ""[my email]@gmail.com"";
    firstName = Dave;
    id = XXXXXX;
    industry = ""Information Technology and Services"";
    lastName = ""XXXXXXXX"";
}
</code></pre>
","12280481","847","<iphone><api><oauth><linkedin><hmac>","0","1","1","2012-09-12 03:52:22","12280481","0","1","297201","","2012-09-04 14:32:03","2012-09-04 13:54:23","","2012-09-05 11:42:59","2012-09-05 11:31:55"
"15947057","HMAC-MD5 using openSSL","<p>I'm trying to study NTLMv2 response, <a href=""http://davenport.sourceforge.net/ntlm.html#theNtlmv2Response"" rel=""nofollow noreferrer"">Eric Glass's work</a>.<br>
but stuck at HMAC-MD5 section. (using function like <a href=""https://stackoverflow.com/questions/13555962/md5-hmac-with-openssl"">this</a>)</p>

<p>I got the right NTLM hash, and unicode username &amp; domain.<br>
(he only emphasize the ""USERDOMAIN"" but no username, so I suppose it's ""USER"")  </p>

<pre><code>unsigned char v1hash[16];  // ""0xcd06ca7c7e10c99b1d33b7485a2ed808""
unsigned short udata[14];
// concated unicode USER+USERDOMAIN ""0x550053004500520044004f004d00410049004e00""
unsigned char v2hash[16];
int iLen;

HMAC(EVP_md5(), v1hash, 16, udata, sizeof(udata), v2hash, &amp;iLen);
</code></pre>

<p>but the result is:  </p>

<pre><code>v2hash(16): 23 d2 3c a4 dd 1a 20 81 35 cf 3a 42 1c e1 5a 17
</code></pre>

<p>which should be ""0x04b8e0ba74289cc540826bab1dee63ae""</p>

<p>am I doing something wrong here?</p>
","<p>I'm not a C programmer but...</p>

<p>From my reading of that article USERDOMAIN should be just that - NOT USER+USERDOMAIN ie the uppercase username = ""USER"" concat with the target = ""DOMAIN"" to give USERDOMAIN which gives the unicode bytes beginning 55005300...</p>

<p>Then it would appear your udata array is the wrong size. You're only processing 20 bytes of information so don't set the array to 28 otherwise the HMAC/MD5 functions will be processing extra random data at the end of the input array.</p>
","15947462","843","<c><openssl><md5><ntlm><hmac>","0","1","1","2013-04-11 11:35:29","15947462","0","","-1","","2017-05-23 11:57:46","2013-04-11 11:01:17","","","2013-04-11 11:21:54"
"41305420","Unable to find EVP_sha256 during compilation","<p>I have to generate a hash of 256 bit length for a given input. I am making use of ‘EVP_sha256’.</p>

<blockquote>
  <p>error: ‘EVP_sha256’ was not declared in this scope</p>
</blockquote>

<p>Below is my code ---</p>

<pre><code>HMAC_Init_ex(&amp;hmac, key, keyLength, EVP_sha256(), NULL);
</code></pre>

<p>I have included openssl/evp.h in my cpp file.</p>

<p>Using openssl version
OpenSSL 1.0.1e-fips 11 Feb 2013.</p>

<p>Any pointers?</p>

<hr>

<p>Program below</p>

<p>File name : Generatehash.cpp</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;string.h&gt;
#include &lt;openssl/rand.h&gt;
#include &lt;openssl/hmac.h&gt;
#include &lt;openssl/evp.h&gt;
#include &lt;sstream&gt;
#include &lt;iomanip&gt;
#include &lt;bitset&gt;

using namespace std;
int KEY_SIZE = 256;
int AES_BLOCK_SIZE = 16;
int IV_SIZE = 16;

void hmac(unsigned char* key, int keyLength, string msg, unsigned char*         hash)
{

  HMAC_CTX hmac;
  HMAC_CTX_init(&amp;hmac);
  HMAC_Init_ex(&amp;hmac, key, keyLength, EVP_sha256(), NULL);
  if(HMAC_Update(&amp;hmac, ( unsigned char* )&amp;msg[0], msg.length()))
    cout&lt;&lt;""Update success""&lt;&lt;endl;

  unsigned int len = 0;
  if(HMAC_Final(&amp;hmac, hash, &amp;len))
    cout&lt;&lt;""Final success""&lt;&lt;endl;
  HMAC_CTX_cleanup(&amp;hmac);
}

int GenerateHashValue(unsigned char* encryptionKey, int keyLength, string     uri, unsigned char* iv)
{
  unsigned char hashBuffer[32] = {'\0'};
  hmac(encryptionKey, keyLength, uri, hashBuffer);
}

int main()
{
  std::cout&lt;&lt;""TEST START =====&gt;&gt;\n"";

  string key = ""Jwe9#z+IND.niSNDJwe9#z+IND.niSND"";

  string strData = ""www.format@imminent.com"";

  unsigned char iv[16] = {'\0'};

  GenerateHashValue((unsigned char*)key.c_str(),key.length(),strData, iv);

  std::cout&lt;&lt;""TEST END =====&gt;&gt;\n"";
  return 0;
}
</code></pre>

<p>Command used for compilation</p>

<p>g++ Generatehash.cpp -lssl -lcrypto</p>
","","","843","<c++><openssl><hmac>","0","","0","2016-12-27 17:58:39","","2","","562082","","2016-12-27 17:58:39","2016-12-23 17:15:46","","",""
"4330180","Generate a printable HMAC Shared key in .Net","<p>I'm using HMACSHA512 to hash data using a shared key. Since the key is shared I'd like for it to be all printable characters for ease of transport. I'm wondering what the best approach is to generating these keys.</p>

<p>I'm currently using the GetBytes() method of RNGCryptoServiceProvider to generate a key, but the byte array it returns contains non-printable characters. So I'm wondering if it is secure to base64 encode the result or does that erode the randomness too much and make things much less secure? If that isn't a good approach can you suggest one?</p>

<p>I do understand that by limiting the keys to printable characters I am limiting the overall breadth of the key space (ie: lopping off 1 of the 8 bits), but I am OK with that.</p>
","<p>If you can handle not auto-generating the key then <a href=""http://www.grc.com/passwords"" rel=""nofollow"">http://www.grc.com/passwords</a> is a good source of VERY random key material.</p>

<p>Base64 wouldn't reduce the underlying entropy of the byte array.  You could generate the key and use it in its raw form, but Base64 encode it to transport it to where you need it to be.  You'd then Base64 decode it back to the raw form before you use it in the new location.  There is no loss of entropy in this operation.  The Base64 encoding reduces the entropy to 6-bits per byte instead of 8, but the result of the coding is longer, so overall the entropy is the same.</p>

<p>The other way you could do it would be to get 24 random bytes for 192-bits worth of entropy.  Base64 encoding this would give you a 32 character string (256-bits) which still has the original randomness and 192-bits of entropy.  You could use this as your shared key directly.</p>
","4330232","841","<c#><security><encryption><hmac>","0","3","2","2010-12-01 23:39:54","4330232","0","","","","","2010-12-01 23:23:56","","2010-12-01 23:39:54","2010-12-01 23:31:38"
"4330180","Generate a printable HMAC Shared key in .Net","<p>I'm using HMACSHA512 to hash data using a shared key. Since the key is shared I'd like for it to be all printable characters for ease of transport. I'm wondering what the best approach is to generating these keys.</p>

<p>I'm currently using the GetBytes() method of RNGCryptoServiceProvider to generate a key, but the byte array it returns contains non-printable characters. So I'm wondering if it is secure to base64 encode the result or does that erode the randomness too much and make things much less secure? If that isn't a good approach can you suggest one?</p>

<p>I do understand that by limiting the keys to printable characters I am limiting the overall breadth of the key space (ie: lopping off 1 of the 8 bits), but I am OK with that.</p>
","<p>BASE64 transforms a byte sequence so it uses only certain printable characters.</p>

<p>This transformation does not change the information in any way, just how it is stored. It is also reversible: you can get the original byte sequence by decoding the BASE64 output.</p>

<p>So using BASE64 does not ""erode the randomness"" or limit the key space in any way.</p>
","4330252","841","<c#><security><encryption><hmac>","0","3","2","2010-12-01 23:39:54","4330232","0","","","","","2010-12-01 23:23:56","","","2010-12-01 23:34:18"
"52518872","Implementing SHA1-HMAC with Python","<p>I am implementing SHA1-HMAC generation for python (v 3.7) to be able to create HMAC code.</p>

<p>I have used an <a href=""https://www.freeformatter.com/hmac-generator.html"" rel=""nofollow noreferrer"">online generator to create SHA1-HMAC</a> with the following data:</p>

<ul>
<li>string: <code>'123'</code>  </li>
<li>Secret Key: <code>'secret'</code></li>
<li>Digest algorithm: <code>SHA1</code></li>
</ul>

<p>I am getting this result:</p>

<pre><code>b14e92eb17f6b78ec5a205ee0e1ab220fb7f86d7
</code></pre>

<p>However when I try to do this same with Python I am getting different results which are wrong.</p>

<pre><code>import hashlib
import hmac
import base64

def make_digest(message, key):
    key = bytes(key, 'UTF-8')
    message = bytes(message, 'UTF-8')

    digester = hmac.new(key, message, hashlib.sha1)
    signature1 = digester.digest()

    signature2 = base64.urlsafe_b64encode(signature1)    
    return str(signature2, 'UTF-8')


result = make_digest('123', 'secret')
print(result)
</code></pre>

<p>This code gives result:</p>

<pre><code>sU6S6xf2t47FogXuDhqyIPt_htc=
</code></pre>

<p>What could be wrong with this code?</p>
","<p>You should not use Base64 here. The site you link to gives you the <em>hex values</em> of the digest bytes. Use the <a href=""https://docs.python.org/3/library/hmac.html#hmac.HMAC.hexdigest"" rel=""nofollow noreferrer""><code>HMAC.hexdigest()</code> method</a> to get the same value in hex in Python:</p>

<pre><code>&gt;&gt;&gt; key = b'secret'
&gt;&gt;&gt; message = b'123'
&gt;&gt;&gt; digester = hmac.new(key, message, hashlib.sha1)
&gt;&gt;&gt; digester.hexdigest()
'b14e92eb17f6b78ec5a205ee0e1ab220fb7f86d7'
</code></pre>

<p>put differently, your code outputs the correct value, but as Base64-encoded data:</p>

<pre><code>&gt;&gt;&gt; digester.digest()
b'\xb1N\x92\xeb\x17\xf6\xb7\x8e\xc5\xa2\x05\xee\x0e\x1a\xb2 \xfb\x7f\x86\xd7'
&gt;&gt;&gt; base64.urlsafe_b64encode(digester.digest())
b'sU6S6xf2t47FogXuDhqyIPt_htc='
</code></pre>

<p>and the value you generated online contains the exact same bytes as the hex digest, so we can generate the same base64 output for that:</p>

<pre><code>&gt;&gt;&gt; bytes.fromhex('b14e92eb17f6b78ec5a205ee0e1ab220fb7f86d7')
b'\xb1N\x92\xeb\x17\xf6\xb7\x8e\xc5\xa2\x05\xee\x0e\x1a\xb2 \xfb\x7f\x86\xd7'
&gt;&gt;&gt; base64.urlsafe_b64encode(bytes.fromhex('b14e92eb17f6b78ec5a205ee0e1ab220fb7f86d7'))
b'sU6S6xf2t47FogXuDhqyIPt_htc='
</code></pre>
","52519003","836","<python><sha1><hmac>","3","3","1","2018-09-26 13:41:34","52519003","0","1","100297","","2018-09-26 13:38:31","2018-09-26 13:24:51","","2018-09-26 13:41:34","2018-09-26 13:32:13"
"13036675","Preparing a string for HMAC","<p>I am writing a webservice which uses HMAC for message authentication.  I am having some issues preparing the 'data' for digest, and am getting different digests for the same 'data' in Python vs NodeJS.</p>

<p>I am fairly sure that this issue is due to encoding, but I am not sure how to best approach this.</p>

<p>Python code:</p>

<pre><code>import hmac
from hashlib import sha1

f = open('../test.txt')
raw = f.read()

raw = raw.strip()

hm = hmac.new('12345', raw, sha1)
res = hm.hexdigest()
print res

&gt;&gt; 5bff447a0fb82f3e7572d9fde362494f1ee2c25b
</code></pre>

<p>NodeJS (coffee) code:</p>

<pre><code>fs = require 'fs'
http = require 'http'
{argv} = require 'optimist'
crypto = require 'crypto'

# Load the file
file = fs.readFileSync argv.file, 'utf-8'
file = file.trim()

# Create the signature
hash = crypto.createHmac('sha1', '12345').update(file).digest('hex')
console.log(hash)

&gt;&gt; a698f82ea8ff3c4e9ffe0670be2707c104d933aa
</code></pre>

<p>Edit:  Also, the length of raw is 2 characters longer than file, but I cant work out where these two characters come from.</p>
","<p>Some ideas to try:</p>

<ul>
<li>Check that <code>raw</code> has the same length as <code>file</code></li>
<li>Open <code>f</code> as binary</li>
<li><code>import codecs</code> and use <code>codecs.open</code> with an encoding</li>
<li><code>strip</code> will remove all whitespace from start and end of a string in Python - I think <code>trim</code> only removes from the end. So you may want <code>rstrip()</code> possibly with explicit characters set to get the same behaviour</li>
</ul>
","13036821","835","<python><node.js><hmac>","2","1","2","2012-10-23 19:02:58","13037379","0","","527749","","2012-10-23 18:47:07","2012-10-23 18:16:42","","","2012-10-23 18:26:18"
"13036675","Preparing a string for HMAC","<p>I am writing a webservice which uses HMAC for message authentication.  I am having some issues preparing the 'data' for digest, and am getting different digests for the same 'data' in Python vs NodeJS.</p>

<p>I am fairly sure that this issue is due to encoding, but I am not sure how to best approach this.</p>

<p>Python code:</p>

<pre><code>import hmac
from hashlib import sha1

f = open('../test.txt')
raw = f.read()

raw = raw.strip()

hm = hmac.new('12345', raw, sha1)
res = hm.hexdigest()
print res

&gt;&gt; 5bff447a0fb82f3e7572d9fde362494f1ee2c25b
</code></pre>

<p>NodeJS (coffee) code:</p>

<pre><code>fs = require 'fs'
http = require 'http'
{argv} = require 'optimist'
crypto = require 'crypto'

# Load the file
file = fs.readFileSync argv.file, 'utf-8'
file = file.trim()

# Create the signature
hash = crypto.createHmac('sha1', '12345').update(file).digest('hex')
console.log(hash)

&gt;&gt; a698f82ea8ff3c4e9ffe0670be2707c104d933aa
</code></pre>

<p>Edit:  Also, the length of raw is 2 characters longer than file, but I cant work out where these two characters come from.</p>
","<p>This is the problem with encoding of the data you read from the filesystem and has nothing with algorithms you use.</p>

<p>When you work with string data both in Python and JavaScript, you should be very careful about encoding which your data is stored in. Try to work with data either as with strings (which, in particular have such a property as encoding), or as with ""raw data"". When reading and signing data, you shouldn't probably care about the encoding, and try to use data as ""raw"" as much as you can in your language.</p>

<p>Some points to note:</p>

<ul>
<li>Filesystem stores ""raw"" bytes, and knows nothing about the contents and the encoding of your file. Furthermore, for some files (like, jpegs, for example), the ""encoding"" concept is worthless</li>
<li>The same is valid for crypto algorithms. They work with raw bytes and know nothing about its ""character representation"". That's why digital signatures work so well with all sorts of binary documents, etc.</li>
<li><code>trim()</code> in javascript or <code>strip()</code> in python work with strings, and their behaviour can vary depending on the underlying encoding (try <code>u's '.encode('utf-16').strip().decode('utf-16')</code> in python, for example). If possible, I'd rather avoid using trimming, to not to mix the way you work with data.</li>
<li>Python 2.x (and, I suppose, Javascript too) have set of rules for implicit conversion between strings and raw data.  </li>
</ul>

<p>Here in your code you work with binary data in Python, but do conversion to string in JavaScript, when you define the encoding of the file to read. Apparently, there is a sort of implicit converting from utf-8 back to raw string in crypto module, but I don't know what it does.</p>

<p>As described in <a href=""http://nodejs.org/api/buffer.html#buffer_buffer"" rel=""nofollow"">here</a>, the most kosher way of handing raw strings in node.js is to use buffers. You could read buffer from filesystem, but unfortunately, nodejs crypto library doesn't support them yet. As described <a href=""http://nodejs.org/api/crypto.html#crypto_proposed_api_changes_in_future_versions_of_node"" rel=""nofollow"">here</a>:</p>

<blockquote>
  <p>The Crypto module was added to Node before there was the concept of a
  unified Stream API, and before there were Buffer objects for handling
  binary data.</p>
  
  <p>As such, the streaming classes don't have the typical methods found on
  other Node classes, and many methods accept and return Binary-encoded
  strings by default rather than Buffers.</p>
</blockquote>

<p>That's said, to make the example work, current approach is to read data by passing ""binary"" as the second argument to the call:</p>

<pre><code>file = fs.readFileSync argv.file, ""binary""
</code></pre>

<p>Also, as I said, I'd rather avoid stripping data I just read from the file.</p>
","13037379","835","<python><node.js><hmac>","2","4","2","2012-10-23 19:02:58","13037379","0","","527749","","2012-10-23 18:47:07","2012-10-23 18:16:42","","","2012-10-23 19:02:58"
"24521227","Error with HMAC and newlines in R ""digest"" package","<p>I am attempting to implement R code to interface with Amazon's Alexa Web Information Service. The authentication system requires HMAC hashing of text against a secret key, but there seems to be a problem with the ""digest"" package when the text contains newlines.</p>

<p>Minimal example in R:</p>

<pre><code>library(digest)
hmac(""foo"", ""Hello"", algo=""sha256"")
</code></pre>

<p>returns <code>fa687477a49ebadb72eb1103db6128061437a2501db7ee7f0cbbb79ceaa2fcfc</code>, while</p>

<pre><code>hmac(""foo"", ""Hello\nGoodbye"", algo=""sha256"")
</code></pre>

<p>returns <code>eaf58b106ffdbb4af976b6b87e14d231e090f7bc144f0b56f06980c827444288</code>.</p>

<p>If I check against <a href=""http://www.freeformatter.com/hmac-generator.html"" rel=""nofollow"">http://www.freeformatter.com/hmac-generator.html</a>, the first case gives the same hash, but the second gives <code>967b28392b2ddc871bb69417e916fa619c935840cc2b9507ecf4da3f748bd1ba</code>.</p>

<p>Am I missing something obvious?</p>

<p>Thanks in advance!!!</p>
","<p>Welcome to the wonderful world of newlines! It appears that the website uses windows style line endings when you include a newline in the text. So you can get that ""967b"" value if you do</p>

<pre><code>hmac(""foo"",""Hello\r\nGoodbye"",algo=""sha256"")
# [1] ""967b28392b2ddc871bb69417e916fa619c935840cc2b9507ecf4da3f748bd1ba""
</code></pre>

<p>I'm guessing you might be on a Mac or a linux machine. I think the <code>\n</code> character is supposed to resolve to the correct value depending on OS. Perhaps doing</p>

<pre><code>hmac(""foo"",""Hello\x0D\x0AGoodbye"",algo=""sha256"")
</code></pre>

<p>might be better to be explicit about the line ending you need to do in the file on all systems.</p>
","24521295","827","<r><hmac>","4","2","2","2014-07-02 11:31:33","24521295","0","1","","","","2014-07-02 00:36:22","","","2014-07-02 00:46:37"
"24521227","Error with HMAC and newlines in R ""digest"" package","<p>I am attempting to implement R code to interface with Amazon's Alexa Web Information Service. The authentication system requires HMAC hashing of text against a secret key, but there seems to be a problem with the ""digest"" package when the text contains newlines.</p>

<p>Minimal example in R:</p>

<pre><code>library(digest)
hmac(""foo"", ""Hello"", algo=""sha256"")
</code></pre>

<p>returns <code>fa687477a49ebadb72eb1103db6128061437a2501db7ee7f0cbbb79ceaa2fcfc</code>, while</p>

<pre><code>hmac(""foo"", ""Hello\nGoodbye"", algo=""sha256"")
</code></pre>

<p>returns <code>eaf58b106ffdbb4af976b6b87e14d231e090f7bc144f0b56f06980c827444288</code>.</p>

<p>If I check against <a href=""http://www.freeformatter.com/hmac-generator.html"" rel=""nofollow"">http://www.freeformatter.com/hmac-generator.html</a>, the first case gives the same hash, but the second gives <code>967b28392b2ddc871bb69417e916fa619c935840cc2b9507ecf4da3f748bd1ba</code>.</p>

<p>Am I missing something obvious?</p>

<p>Thanks in advance!!!</p>
","<p>So, while MrFlick did answer my specific question, the real issue was deeper. The whole question was prompted by a disagreement between Perl's <code>hmac_sha256_base64()</code> and R.</p>

<p>It turned out that I was using R incorrectly. <code>hmac()</code> returns hex code, not base64, so an additional step is needed. However, it seems that the <code>base64()</code> function in <code>RCurl</code> requires a vector of bytes, not a concatenated string. I illustrate below.</p>

<p>What I was doing (WRONG):</p>

<pre><code>require(digest)
require(RCurl)

&gt; hmac(""foo"", ""Hello"", algo=""sha256"")
[1] ""fa687477a49ebadb72eb1103db6128061437a2501db7ee7f0cbbb79ceaa2fcfc""

&gt; base64(hmac(""foo"", ""Hello"", algo=""sha256""))
[1] ""ZmE2ODc0NzdhNDllYmFkYjcyZWIxMTAzZGI2MTI4MDYxNDM3YTI1MDFkYjdlZTdmMGNiYmI3OWNlYWEyZmNmYw==""
attr(,""class"")
[1] ""base64""
</code></pre>

<p>What I should have done (CORRECT):</p>

<pre><code>&gt; hmac(""foo"", ""Hello"", algo=""sha256"", raw = T)
[1] fa 68 74 77 a4 9e ba db 72 eb 11 03 db 61 28 06 14 37 a2 50 1d b7 ee 7f 0c bb b7 9c ea a2 fc fc

&gt; base64(hmac(""foo"", ""Hello"", algo=""sha256"", raw = T))
[1] ""+mh0d6Seutty6xED22EoBhQ3olAdt+5/DLu3nOqi/Pw=""
attr(,""class"")
[1] ""base64""
</code></pre>

<p>Rather different, no?</p>

<p>The latter agrees with the Perl, and (more importantly) it actually authenticates correctly on Amazon Web Services. :-)</p>
","24529891","827","<r><hmac>","4","11","2","2014-07-02 11:31:33","24521295","0","1","","","","2014-07-02 00:36:22","","2014-07-02 11:31:33","2014-07-02 11:25:47"
"7646193","Password Reset policy in OpenSSO","<p>I had to implement Password Reset policy....For which I had OpenSSO deployed on Glassfish server and OpenDS as the Data Store...I followed Indira's blog... </p>

<p><a href=""http://blogs.oracle.com/indira/entry/password_reset_with_opends"" rel=""nofollow"">Password Reset With OpenDS</a></p>

<p>And executed all commands....Since I did not configure SMTP, when I try to Reset the Password of a particular User (Note: I hav specified a Gmail ID as the email Address of that user) after answering the Question, I get confirmation saying </p>

<p>""Your password has been reset but we are unable to send it to you. Contact your administrator."" </p>

<p>How do I configure SMTP in OpenSSO and OpenDS? </p>
","<p>OpenDS (and OpenDJ, the continuing open source project) has some global properties to point to the SMTP server.
Note that it doesn't support authentication at this point.</p>

<p>$ dsconfig set-global-configuration-prop --port 4444 --hostname <code>hostname</code> --bindDN ""cn=Directory Manager"" --bindPassword password --set smtp-server:smtp.example.com --trustAll --no-prompt</p>

<p>Kind regards,</p>

<p>Ludovic</p>
","7993482","822","<smtp><hmac><opensso><hmacsha1><opends>","0","1","2","2012-10-23 03:16:41","","0","","","","","2011-10-04 10:02:22","","","2011-11-03 10:40:08"
"7646193","Password Reset policy in OpenSSO","<p>I had to implement Password Reset policy....For which I had OpenSSO deployed on Glassfish server and OpenDS as the Data Store...I followed Indira's blog... </p>

<p><a href=""http://blogs.oracle.com/indira/entry/password_reset_with_opends"" rel=""nofollow"">Password Reset With OpenDS</a></p>

<p>And executed all commands....Since I did not configure SMTP, when I try to Reset the Password of a particular User (Note: I hav specified a Gmail ID as the email Address of that user) after answering the Question, I get confirmation saying </p>

<p>""Your password has been reset but we are unable to send it to you. Contact your administrator."" </p>

<p>How do I configure SMTP in OpenSSO and OpenDS? </p>
","<p>I just had this problem, so for the record I think it's probably because you need to replace <code>&lt;Password-Administrator&gt;</code> in the WEB-INF/classes/amPasswordResetModuleMsgs*.properties files with a real email address.</p>

<p>I found that my <em>Authentication</em> debug log file had this error in it:</p>

<pre><code>ERROR: Could not send email to user [Ljava.lang.String;@30720e48
com.sun.mail.smtp.SMTPSendFailedException: 553 5.5.4 &lt;Password-Administrator&gt;... Domain name required for sender address Password-Administrator
;
  nested exception is:
        com.sun.mail.smtp.SMTPSenderFailedException: 553 5.5.4 &lt;Password-Administrator&gt;... Domain name required for sender address Password-Administrator

        at com.sun.mail.smtp.SMTPTransport.issueSendCommand(SMTPTransport.java:2057)
</code></pre>

<p>I found the solution on the OpenAM mailing list originally: <a href=""http://lists.forgerock.org/pipermail/openam/2012-April/005912.html"" rel=""nofollow"">http://lists.forgerock.org/pipermail/openam/2012-April/005912.html</a></p>

<p>I used this sed command to do update all the files at once:</p>

<pre><code>sed -i -e 's/\&lt;Password-Administrator\&gt;/user@address\.com\.au/g' amPasswordResetModuleMsgs*.properties
</code></pre>
","13023067","822","<smtp><hmac><opensso><hmacsha1><opends>","0","0","2","2012-10-23 03:16:41","","0","","","","","2011-10-04 10:02:22","","","2012-10-23 03:16:41"
"23428375","TLS 1.0 - calculating the master key","<p>The RFC gives the formula </p>

<pre><code>PRF(secret, label, seed) = P_MD5(S1, label + seed) XOR
                          P_SHA-1(S2, label + seed);
</code></pre>

<p>for doing this.P_hash in turn has the following formula:</p>

<pre><code>P_hash(secret, seed) = HMAC_hash(secret, A(1) + seed) +
                          HMAC_hash(secret, A(2) + seed) +
                          HMAC_hash(secret, A(3) + seed) + ...
</code></pre>

<p>The RFC also says </p>

<blockquote>
  <p>P_hash can be iterated as many times as is necessary to produce the
     required quantity of data. For example, if P_SHA-1 was being used to
     create 64 bytes of data, it would have to be iterated 4 times
     (through A(4)), creating 80 bytes of output data; the last 16 bytes
     of the final iteration would then be discarded, leaving 64 bytes of
     output data.</p>
</blockquote>

<p>I find ""P_hash can be iterated as many times as is necessary to produce the required quantity of data"" confusing.Just how many times is necessary?Is there a threshold after which it doesn't matter how much it is? If so, what is this threshold?</p>
","<p>I'm pretty sure that in TLS 1.0, the premaster secret and the master secret are always 48bytes long, but then when you create your key block further down the line, it can be longer than 48 bytes. i.e. if your cipher uses sha1 and aes256, you will need 136 bytes.</p>
","32377108","819","<ssl><hmac><handshake><hmacsha1>","1","0","1","2015-09-03 13:32:05","","5","","","","","2014-05-02 12:37:28","","","2015-09-03 13:32:05"
"32855245","AWS SignatureDoesNotMatch: The request signature we calculated does not match the signature you provided","<p>I am getting this response to GET request to amazon product api.</p>

<pre><code>    &lt;?xml version=""1.0""?&gt;
&lt;ItemSearchErrorResponse xmlns=""http://ecs.amazonaws.com/doc/2011-08-01/""&gt;&lt;Error&gt;&lt;Code&gt;SignatureDoesNotMatch&lt;/Code&gt;&lt;Message&gt;The request signature we calculated does not match the signature you provided. Check your AWS Secret Access Key and signing method. Consult the service documentation for details.&lt;/Message&gt;&lt;/Error&gt;&lt;RequestId&gt;9aff7feb-7f9b-4efb-aece-b595b1b7b0e5&lt;/RequestId&gt;&lt;/ItemSearchErrorResponse&gt;
</code></pre>

<p>In my javascript, I am generating signature as:</p>

<pre><code>  var paramO = {
    Service:'AWSECommerceService',
    Operation:'ItemSearch',
    AWSAccessKeyId:AccessKeyId,
    AssociateTag:AssociateTag,
    Version:'2011-08-01',
    SearchIndex:'All',
    Keywords:name,
    ResponseGroup:'ItemAttributes,OfferSummary',
    Timestamp:timestamp
  };
  var string='GET\nwebservices.amazon.in\n/onca/xml\n';
  console.log(string+$.param(paramO));
  var hash = CryptoJS.HmacSHA256(string+$.param(paramO), SecretAccessKey);
  var signature = CryptoJS.enc.Base64.stringify(hash);
</code></pre>
","","","816","<javascript><amazon-web-services><hmac>","1","","0","2015-09-29 23:16:02","","5","","","","","2015-09-29 23:16:02","","",""
"20766988","Inspecting the body of an HTTP request with gocraft Middleware","<p>I've been using the <a href=""https://github.com/gocraft/web"" rel=""nofollow"" title=""gocraft-web"">gocraft-web</a> package so far to do some development on an HTTP service. It's really great because you can stick middleware in it to check for stuff like the presence of a Cookie in the header.</p>

<p>At the moment I am wanting to implement request signing. Getting the client to sign the request is easy enough, but I am wanting to check it for all endpoints with a common piece of middleware. Basically the middleware needs to find the key to check against, compute the request HMAC, and check it against the supplied HMAC (presumably in the <code>Authorization</code> Header). </p>

<p>Computing the actual HMAC is really easy in go.</p>

<p>The problem is: reading the message in middleware makes it unavailable to the final endpoint.</p>

<p>The best solution I have come up with (example shown below) is to read everything from the <code>Request</code> in the middleware and stuffing it back into a <code>bytes.Buffer</code> for later reading. Is there a better way to do this? The current implementation seems a bit hackish.</p>

<p>Reading everything into memory sucks, but I can probably just put my service behind a proxy and limit the size of requests anyways. The actual content will always be pretty small(under 5 kilobytes). The extra copy introduced by this approach is likely to be quite slow, but computing the HMAC of a message is not exactly cheap to begin with.</p>

<p>The advantage to this is that it is transparent: it will work with any other go http code that just expects to read from <code>Request.Body</code> without any magic.</p>

<p>I suppose I could be a bit slicker and use a <code>io.TeeReader</code>.</p>

<p>This is my solution so far. If you post to localhost:3300 some JSON it prints the sha512 to the terminal in the server process, but also the response is able to contain a listing of the keys &amp; values in it.</p>

<pre><code>package main

import ""fmt""
import ""github.com/gocraft/web""
import ""net/http""
import ""bytes""
import ""crypto/sha512""
import ""io""
import ""encoding/hex""
import ""encoding/json""

type Context struct{}

type echoer struct {
    *bytes.Buffer
}

func (e echoer) Close() error {
    //Just do nothing to make the interface happy
    return nil
}

func middlewareThatLooksAtBody(rw web.ResponseWriter, req *web.Request, next web.NextMiddlewareFunc) {
    var replacement echoer
    replacement.Buffer = &amp;bytes.Buffer{}

    hash := sha512.New()

    hash.Write([]byte(req.Method))
    reader := req.Body

    var bytes []byte = make([]byte, 64)
    for {
        amount, err := reader.Read(bytes)

        fmt.Printf(""Read %d bytes\n"", amount)

        if err != nil {
            if err == io.EOF {
                break
            }
            panic(err)
        }
        if amount == 0 {
            break
        }

        hash.Write(bytes)
        replacement.Write(bytes)
    }
    //Is this needed?
    reader.Close()

    //replacement.Seek(0, 0)
    req.Body = replacement

    fmt.Printf(""%v\n"", hex.EncodeToString(hash.Sum(nil)))

    next(rw, req)
}

func echoJson(rw web.ResponseWriter, req *web.Request) {
    dec := json.NewDecoder(req.Body)
    var obj map[string]interface{}
    err := dec.Decode(&amp;obj)

    if err != nil {
        rw.WriteHeader(http.StatusBadRequest)
        fmt.Fprintf(rw, ""%v\n"", err)
        return
    }

    for k, v := range obj {
        fmt.Fprintf(rw, ""%v = %v\n"", k, v)
    }
}

func main() {
    router := web.New(Context{})

    router.Middleware(middlewareThatLooksAtBody)
    router.Post(""/"", echoJson)
    http.ListenAndServe(""localhost:3300"", router)

}
</code></pre>
","<p>From your description, it looks like you need to read all the bytes from the request body, regardless of what your handlers will do.</p>

<p>If so, then you have at least a couple of options that would avoid the extra copy:</p>

<p>1) Store the read contents inside your gocraft context.</p>

<p>2) Do all body data processing and validation in the middleware and store the results of the processing in the context.</p>

<p>Granted, this means that your handlers now must know that they should look for the contents in the context instead of the req.Body.</p>

<p>I think it's a decent trade-off though, given your requirements.</p>
","29893753","810","<http><go><hmac>","2","0","1","2015-04-27 10:53:33","","7","2","964466","","2013-12-24 21:50:10","2013-12-24 21:35:27","","","2015-04-27 10:53:33"
"25911334","C# HMAC SHA-256-128 Calculation result not as expected","<p>I'm trying to create a signature to our bank from a specified key but my results is not the same as the info I got from the bank. Can anyone see what I am doing wrong?</p>

<p>Link to <a href=""http://www.nordea.se/F%C3%B6retag/Betala/Programleverant%C3%B6rer/1603132.html#39674be4-f520-445a-a9c6-3a3053f9dcfa"" rel=""nofollow"">bank</a> for reference (text in Swedish)</p>

<p>Example data are inside the citationmarks .. :)</p>

<p><strong>Filedata:</strong>           ""00000000""</p>

<p><strong>Key:</strong>                ""1234567890ABCDEF1234567890ABCDEF""</p>

<p><strong>Expected result:</strong>    ""FF365893D899291C3BF505FB3175E880""</p>

<p><strong>My result:</strong>          ""05CD81829E26F44089FD91A9CFBC75DB""</p>

<p><strong>My code:</strong></p>

<pre><code>        // Using ASCII teckentabell
        System.Text.ASCIIEncoding encoding = new System.Text.ASCIIEncoding();

        // Using HMAC-SHA256
        byte[] keyByte = encoding.GetBytes(""1234567890ABCDEF1234567890ABCDEF"");
        HMACSHA256 hmacsha256 = new HMACSHA256(keyByte);

        byte[] messageBytes = encoding.GetBytes(""00000000"");
        byte[] hashmessage = hmacsha256.ComputeHash(messageBytes);

        byte[] truncArray = new byte[16];
        Array.Copy(hashmessage, truncArray, truncArray.Length);

        // conversion of byte to string            
        string sigill = ByteArrayToString(truncArray);

        // show sigill
        MessageBox.Show(""Sigill:\n"" + sigill, ""Sigill"", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
</code></pre>
","<p><code>Key</code> is a string of hexadecimal digits representing a binary key, not a string of individual characters.</p>

<p>For the correct output you need to convert it to an array of bytes:</p>

<pre><code>var key = ""1234567890ABCDEF1234567890ABCDEF"";
byte[] keyByte = new byte[key.Length / 2];

for (int i = 0; i &lt; key.Length; i += 2)
{
   keyByte[i / 2] = Convert.ToByte(key.Substring(i, 2), 16);
}

HMACSHA256 hmacsha256 = new HMACSHA256(keyByte);

byte[] messageBytes = encoding.GetBytes(""00000000"");
byte[] hashmessage = hmacsha256.ComputeHash(messageBytes);

byte[] truncArray = new byte[16];
Array.Copy(hashmessage, truncArray, truncArray.Length);
</code></pre>
","25911485","795","<c#><hmac><sha256>","4","4","1","2014-09-18 11:28:59","25911485","2","1","","","","2014-09-18 11:21:58","","","2014-09-18 11:28:59"
"18993675","Nodejs equivalent of Python HMAC signature?","<p>I want to generate a signature in Node.js.  Here is a python example:</p>

<p><code>signature = hmac.new(SECRET, msg=message, digestmod=hashlib.sha256).hexdigest().upper()</code></p>

<p>I have this:</p>

<p><code>signature = crypto.createHmac('sha256', SECRET).update(message).digest('hex').toUpperCase()</code></p>

<p>What am I doing wrong?</p>
","<p>Checked the node manuals as well. It looks correct to me. What about the <code>;</code> in the end of the chain?</p>
","18993775","791","<python><node.js><hmac><digest>","0","0","1","2013-09-24 23:27:18","18993775","0","1","","","","2013-09-24 23:15:24","","","2013-09-24 23:27:18"
"44664267","Calculate hmac value with base64 encode using sha256 python","<p>I'm trying to transform a php code into python language.</p>

<p>the php function calculates the hmac value using sha256 and base64 encoding.</p>

<p><strong>My Php function:</strong></p>

<pre><code>&lt;?php

define('SHOPIFY_APP_SECRET', 'some_key');

function verify_webhook($data)
{
$calculated_hmac = base64_encode(hash_hmac('sha256', $data, 
SHOPIFY_APP_SECRET, true));
echo $calculated_hmac;
}

$data = ""some_data"";
$verified = verify_webhook($data);
?&gt;
</code></pre>

<p><strong>My Python function:</strong></p>

<pre><code>import base64
import hmac
import binascii
from hashlib import sha256

API_SECRET_KEY = ""some_key""
data = ""some_data""

def verify_webhook():
    dig = hmac.new(
        API_SECRET_KEY,
        msg=data,
        digestmod=sha256
        ).digest()
    calculated_hmac = base64.b64encode(bytes(binascii.hexlify(dig)))
    print(calculated_hmac)

verify_webhook()
</code></pre>

<p>I got different outputs even I have the same key and data. I still don't know what I'm missing here. please help!</p>

<p><strong>Python output:</strong></p>

<blockquote>
  <p>YWM3NjlhMDZjMmViMzdmM2E3YjhiZGY4NjhkNTZhOGZhMDgzZDM4MGM1OTkyZTM4YjA5MDNkMDEwNGEwMzJjMA==</p>
</blockquote>

<p><strong>Php output:</strong></p>

<blockquote>
  <p>N7JyAyKocoDx/Opx36nGqAuUKdyGH+ROX+J5AJgQ+/g=</p>
</blockquote>
","<p>I was able to match your php output using Python 3:</p>

<pre><code>&gt;&gt;&gt; dig = hmac.new( bytes(API_SECRET_KEY,'ascii'), 
                    msg=bytes(data, 'ascii'), digestmod=sha256 )
&gt;&gt;&gt; dig.digest()
b'7\xb2r\x03""\xa8r\x80\xf1\xfc\xeaq\xdf\xa9\xc6\xa8\x0b\x94)\xdc\x86\x1f\xe4N_\xe2y\x00\x98\x10\xfb\xf8'
&gt;&gt;&gt; base64.b64encode(dig.digest())
b'N7JyAyKocoDx/Opx36nGqAuUKdyGH+ROX+J5AJgQ+/g='
</code></pre>
","44664397","789","<php><python><base64><sha256><hmac>","3","0","1","2017-09-23 20:18:27","","0","0","4017403","","2017-09-23 20:18:27","2017-06-20 22:56:54","","","2017-06-20 23:11:56"
"46306938","HMAC SHA256 Function in VBA on Mac","<p>I'm trying to generate a base64 hash based on two inputs - a message and a key, both being strings, using HMAC SHA256. I've spent hours looking for answers and did come across a few sites or other posts on Stack Overflow, but unfortunately none seem to be what I need.</p>

<p>Is it possible to code a function myself on VBA? I'm using Mac so those CreateObject commands I saw elsewhere won't be available.</p>

<p>Here is what I found so far that I think could be relevant - hope it helps others who are trying to achieve the same using other languages or Windows.</p>

<p><a href=""https://www.jokecamp.com/blog/examples-of-creating-base64-hashes-using-hmac-sha256-in-different-languages/#csharp"" rel=""nofollow noreferrer"">https://www.jokecamp.com/blog/examples-of-creating-base64-hashes-using-hmac-sha256-in-different-languages/#csharp</a></p>

<p><a href=""http://www.vbforums.com/showthread.php?635398-VB6-HMAC-SHA-256-HMAC-SHA-1-Using-Crypto-API"" rel=""nofollow noreferrer"">http://www.vbforums.com/showthread.php?635398-VB6-HMAC-SHA-256-HMAC-SHA-1-Using-Crypto-API</a></p>
","","","787","<vba><macos><excel-vba><sha256><hmac>","0","","0","2017-09-19 17:54:47","","3","","","","","2017-09-19 17:54:47","","",""
"38508522","Why is a JWT signature not unique for a specific payload","<p>My application is using JWT and should prevent replay attacks. I was testing this an ran into the following. </p>

<p>When I have a valid JWT and change the last character of the token/signature the JWT is still valid. E.g. the following token do all validate correctly:
<code>eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJTb21lIFRlc3QiLCJjbGFpbSI6IlNvbWUgQ2xhaW0ifQ.UkFYSK7hSSeiqUOSMdbXgbOErMFnuK0Emk1722ny-r4
eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJTb21lIFRlc3QiLCJjbGFpbSI6IlNvbWUgQ2xhaW0ifQ.UkFYSK7hSSeiqUOSMdbXgbOErMFnuK0Emk1722ny-r5
eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJTb21lIFRlc3QiLCJjbGFpbSI6IlNvbWUgQ2xhaW0ifQ.UkFYSK7hSSeiqUOSMdbXgbOErMFnuK0Emk1722ny-r6
eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJTb21lIFRlc3QiLCJjbGFpbSI6IlNvbWUgQ2xhaW0ifQ.UkFYSK7hSSeiqUOSMdbXgbOErMFnuK0Emk1722ny-r7</code></p>

<p>I have checked this on <a href=""http://jwt.io/"" rel=""nofollow"">http://jwt.io/</a> and can be reproduced in my .Net application as well. </p>

<p>Can someone explain how it is possible that the signature is not unique for a given payload? I understand that collisions can occur, but I cannot explain that they are consecutive sequences.</p>
","<p>In this special case <strong>you are changing the base64 url encoding of the signature, not the signature itself</strong></p>

<p>The fourth base64 values encode the same binary value. Try converting to hexadecimal at <a href=""http://kjur.github.io/jsjws/tool_b64udec.html"" rel=""nofollow noreferrer"">http://kjur.github.io/jsjws/tool_b64udec.html</a> </p>

<p>The value you will see is</p>

<pre><code>52415848aee14927a2a9439231d6d781b384acc167b8ad049a4d7bdb69f2fabe
</code></pre>

<p>If you change the suffix to <code>-r1</code> or <code>-r8</code> then the binary value changes and signature validation  will fail</p>

<p><a href=""https://stackoverflow.com/questions/13449595/can-two-different-base-64-encoded-strings-result-into-same-string-if-decoded/38513081#38513081"">Can two different BASE 64 encoded strings result into same string if decoded?</a></p>
","38511951","784","<base64><digital-signature><jwt><hmac>","1","3","2","2016-08-03 00:20:48","38511951","0","","6371459","","2016-07-21 20:19:44","2016-07-21 15:36:52","","2017-05-23 11:51:32","2016-07-21 18:37:23"
"38508522","Why is a JWT signature not unique for a specific payload","<p>My application is using JWT and should prevent replay attacks. I was testing this an ran into the following. </p>

<p>When I have a valid JWT and change the last character of the token/signature the JWT is still valid. E.g. the following token do all validate correctly:
<code>eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJTb21lIFRlc3QiLCJjbGFpbSI6IlNvbWUgQ2xhaW0ifQ.UkFYSK7hSSeiqUOSMdbXgbOErMFnuK0Emk1722ny-r4
eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJTb21lIFRlc3QiLCJjbGFpbSI6IlNvbWUgQ2xhaW0ifQ.UkFYSK7hSSeiqUOSMdbXgbOErMFnuK0Emk1722ny-r5
eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJTb21lIFRlc3QiLCJjbGFpbSI6IlNvbWUgQ2xhaW0ifQ.UkFYSK7hSSeiqUOSMdbXgbOErMFnuK0Emk1722ny-r6
eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJTb21lIFRlc3QiLCJjbGFpbSI6IlNvbWUgQ2xhaW0ifQ.UkFYSK7hSSeiqUOSMdbXgbOErMFnuK0Emk1722ny-r7</code></p>

<p>I have checked this on <a href=""http://jwt.io/"" rel=""nofollow"">http://jwt.io/</a> and can be reproduced in my .Net application as well. </p>

<p>Can someone explain how it is possible that the signature is not unique for a given payload? I understand that collisions can occur, but I cannot explain that they are consecutive sequences.</p>
","<p>When you change the signature (the last part) you can still decode the JWT to see the header and payload. However, if you attempt to validate the JWT with the changed signature, that validation will fail.</p>
","38732459","784","<base64><digital-signature><jwt><hmac>","1","0","2","2016-08-03 00:20:48","38511951","0","","6371459","","2016-07-21 20:19:44","2016-07-21 15:36:52","","","2016-08-03 00:20:48"
"14150124","How to get HMAC key in OpenSSL","<p>I am using OpenSSL and I want to extract my HMAC key and AES key from the session, so that I can accelerate HMAC and AES encryption with GPU in application.</p>

<p>Where can I get the keys after <code>SSL_accept</code>?
Is the AES key stored in <code>SSLHandle-&gt;enc_write_ctx-&gt;cipher_data</code>?
Where is the HMAC key stored?</p>
","<p>If you have the <code>SSL*</code> called <code>ssl</code>, then look at <code>ssl-&gt;session</code> for the master key and <code>ssl-&gt;s3</code> for the current hamc key.</p>

<p><code>ssl.h</code> has a <code>struct ssl_session_st</code>, and that's the <code>ssl-&gt;session</code> above. The master key is stored in <code>struct ssl_session_st</code>.</p>

<pre><code>struct ssl_session_st
{
  int ssl_version;   /* what ssl version session info is
                      * being kept in here? */

  /* only really used in SSLv2 */
  unsigned int key_arg_length;
  unsigned char key_arg[SSL_MAX_KEY_ARG_LENGTH];
  int master_key_length;
  unsigned char master_key[SSL_MAX_MASTER_KEY_LENGTH];
  ...
}
</code></pre>

<p>Some derivation goes on, and you can see it in, for example, <code>s3_clnt.c</code>. SSL2 uses two session keys - one in each direction (client to server; and server to client). The key is used for both privacy and integrity protection. SSLv3 and above uses 6 keys - three in each direction (client to server; and server to client). One key is used for privacy, the second is used for integrity, and the third is used as a nonce or iv.</p>

<p>To see what the HMAC key is, take a look at, for example, <code>n_ssl3_mac</code> in <code>s3_enc.c</code> around line 700. You will see something like:</p>

<pre><code>int n_ssl3_mac(SSL *ssl, unsigned char *md, int send)
{
  SSL3_RECORD *rec;
  unsigned char *mac_sec,*seq;
  EVP_MD_CTX md_ctx;
  ...

  if (send)
  {
    rec= &amp;(ssl-&gt;s3-&gt;wrec);
    mac_sec= &amp;(ssl-&gt;s3-&gt;write_mac_secret[0]);
    seq= &amp;(ssl-&gt;s3-&gt;write_sequence[0]);
    hash=ssl-&gt;write_hash;
  }
  else
  {
    rec= &amp;(ssl-&gt;s3-&gt;rrec);
    mac_sec= &amp;(ssl-&gt;s3-&gt;read_mac_secret[0]);
    seq= &amp;(ssl-&gt;s3-&gt;read_sequence[0]);
    hash=ssl-&gt;read_hash;
  }
  ...
</code></pre>

<p>TLS also uses the <code>ssl-&gt;s3</code> member. For example, from <code>t1_enc.c</code> around line 445:</p>

<pre><code>mac_secret= &amp;(s-&gt;s3-&gt;write_mac_secret[0]);
mac_secret_size = &amp;(s-&gt;s3-&gt;write_mac_secret_size);
</code></pre>

<p>You might also be able to get a good look at the data in the <code>SSL*</code> object with <code>SSL_SESSION_print</code> using a <code>BIO</code> or <code>SSL_SESSION_print_fp</code>.</p>
","20261722","784","<openssl><aes><sha1><hmac>","3","0","1","2013-11-28 09:12:59","","1","","411022","","2013-11-03 15:21:43","2013-01-04 02:04:41","","2013-11-28 09:12:59","2013-11-28 09:05:34"
"21444078","Calculating Amazon MWS Signature using Java / Filemaker","<p>We've been trying to calculate the Amazon Signature for the past few days using the Java code provided on Amazon's site.</p>

<p>I'm not a seasoned Java developer, but we've managed to use the basis of their code found at <a href=""http://docs.developer.amazonservices.com/en_US/dev_guide/DG_ClientLibraries.html#DG_OwnClientLibrary__Signatures"" rel=""nofollow"">http://docs.developer.amazonservices.com/en_US/dev_guide/DG_ClientLibraries.html#DG_OwnClientLibrary__Signatures</a> to generate a signature but we keep getting a ""signature doesn't match"" error that we're running into a wall debugging. Here is our current Java code with account specific information omitted:</p>

<pre><code>import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URLEncoder;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.security.SignatureException;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Map.Entry;
import java.util.TreeMap;
import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;
import org.apache.commons.codec.binary.Base64;
import java.sql.*;
import java.util.Date;
import java.sql.Timestamp;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.TimeZone;
import java.util.Date;

public class Main {
    private static final String CHARACTER_ENCODING = ""UTF-8"";
    final static String ALGORITHM = ""HmacSHA256"";

    public static void main(String[] args) throws Exception {

        // Change this secret key to yours
        String secretKey = ""XXXXXXXXXXXXXXXXXXXXXX""; // This secret key does have a forward slash in it (3rd to last character), would that adversely affect anything?

        // Use the endpoint for your marketplace
        String serviceUrl = ""https://mws.amazonservices.com/Orders/2011-01-01"";

        // Create set of parameters needed and store in a map
        HashMap&lt;String, String&gt; parameters = new HashMap&lt;String,String&gt;();

        // Add required parameters. Change these as needed.
        parameters.put(""AWSAccessKeyId"", urlEncode(""XXXXXXXXXXX""));
        parameters.put(""Action"", urlEncode(""ListOrders""));
        parameters.put(""MarketplaceId.Id.1"", urlEncode(""ATVPDKIKX0DER""));
        parameters.put(""Merchant"", urlEncode(""ALZYDHGPLQNLD""));
        parameters.put(""OrderStatus.Status.1"", urlEncode(""PartiallyShipped""));
        parameters.put(""OrderStatus.Status.2"", urlEncode(""Unshipped""));
        parameters.put(""SignatureMethod"", urlEncode(ALGORITHM));
        parameters.put(""SignatureVersion"", urlEncode(""2""));
        parameters.put(""Timestamp"", urlEncode(""2014-01-29T22:11:00Z""));
        parameters.put(""Version"", urlEncode(""2011-01-01""));
        //parameters.put(""SubmittedFromDate"", urlEncode(""2014-01-28T15:05:00Z""));

        // Format the parameters as they will appear in final format
        // (without the signature parameter)
        String formattedParameters = calculateStringToSignV2(parameters, serviceUrl);
        //System.out.println(formattedParameters);

        String signature = sign(formattedParameters, secretKey);
        System.out.println(urlEncode(signature));

        // Add signature to the parameters and display final results
        parameters.put(""Signature"", urlEncode(signature));
        System.out.println(calculateStringToSignV2(parameters, serviceUrl));

        // TEST AREA
        // Signiture sig = new Signiture();
        // String HMAC = sig.calculateRFC2104HMAC(parameters, secretKey);
        // TEST AREA
    }

    /* If Signature Version is 2, string to sign is based on following:
    *
    *    1. The HTTP Request Method followed by an ASCII newline (%0A)
    *
    *    2. The HTTP Host header in the form of lowercase host,
    *       followed by an ASCII newline.
    *
    *    3. The URL encoded HTTP absolute path component of the URI
    *       (up to but not including the query string parameters);
    *       if this is empty use a forward '/'. This parameter is followed
    *       by an ASCII newline.
    *
    *    4. The concatenation of all query string components (names and
    *       values) as UTF-8 characters which are URL encoded as per RFC
    *       3986 (hex characters MUST be uppercase), sorted using
    *       lexicographic byte ordering. Parameter names are separated from
    *       their values by the '=' character (ASCII character 61), even if
    *       the value is empty. Pairs of parameter and values are separated
    *       by the '&amp;' character (ASCII code 38).
    *
    */
    private static String calculateStringToSignV2(Map&lt;String, String&gt; parameters, String serviceUrl)
            throws SignatureException, URISyntaxException {
        // Sort the parameters alphabetically by storing
        // in TreeMap structure
        Map&lt;String, String&gt; sorted = new TreeMap&lt;String, String&gt;();
        sorted.putAll(parameters);

        // Set endpoint value
        URI endpoint = new URI(serviceUrl.toLowerCase());

        // Create flattened (String) representation
        StringBuilder data = new StringBuilder();
        /*data.append(""POST\n"");
        data.append(endpoint.getHost());
        data.append(""\n/"");
        data.append(""\n"");*/

        Iterator&lt;Entry&lt;String, String&gt;&gt; pairs = sorted.entrySet().iterator();

        while (pairs.hasNext()) {
            Map.Entry&lt;String, String&gt; pair = pairs.next();
            if (pair.getValue() != null) {
                data.append( pair.getKey() + ""="" + pair.getValue());
            }
            else {
                data.append( pair.getKey() + ""="");
            }

            // Delimit parameters with ampersand (&amp;)
            if (pairs.hasNext()) {
                data.append( ""&amp;"");
            }
        }

        return data.toString();
    }

    /*
     * Sign the text with the given secret key and convert to base64
     */
    private static String sign(String data, String secretKey)
            throws NoSuchAlgorithmException, InvalidKeyException,
                   IllegalStateException, UnsupportedEncodingException {
        Mac mac = Mac.getInstance(ALGORITHM);
        //System.out.println(mac);//
        mac.init(new SecretKeySpec(secretKey.getBytes(CHARACTER_ENCODING), ALGORITHM));
        //System.out.println(mac);//
        byte[] signature = mac.doFinal(data.getBytes(CHARACTER_ENCODING));
        //System.out.println(signature);//
        String signatureBase64 = new String(Base64.encodeBase64(signature), CHARACTER_ENCODING);
        System.out.println(signatureBase64);
        return new String(signatureBase64);
    }

    private static String urlEncode(String rawValue) {
        String value = (rawValue == null) ? """" : rawValue;
        String encoded = null;

        try {
            encoded = URLEncoder.encode(value, CHARACTER_ENCODING)
                .replace(""+"", ""%20"")
                .replace(""*"", ""%2A"")
                .replace(""%7E"",""~"");
        } catch (UnsupportedEncodingException e) {
            System.err.println(""Unknown encoding: "" + CHARACTER_ENCODING);
            e.printStackTrace();
        }

        return encoded;
    }
}
</code></pre>

<p>Right now we're testing this by hand because I'm trying to submit requests/manage the data through a Filemaker Database, so I may be adding the signature back to the URL query incorrectly. I'm assuming that 1) all of the parameters need to be listed in the query alphabetically and 2) the signature is the only exception that gets appended, last.</p>

<p>For example:</p>

<pre><code>AWSAccessKeyId=AKIAITPQPJO62G4LAE7Q&amp;Action=ListOrders&amp;MarketplaceId.Id.1=XXXXXXXXXXX&amp;Merchant=XXXXXXXXXXX&amp;OrderStatus.Status.1=PartiallyShipped&amp;OrderStatus.Status.2=Unshipped&amp;SignatureMethod=HmacSHA256&amp;SignatureVersion=2&amp;Timestamp=2014-01-29T22%3A11%3A00Z&amp;Version=2011-01-01&amp;Signature=tNufJeONZlscTlHs%2FLAWBs7zwsfpIaQcUK%2B5XIPJpcQ%3D
</code></pre>

<p>But the response I keep getting is this:</p>

<pre><code>&lt;?xml version=""1.0""?&gt;
&lt;ErrorResponse xmlns=""https://mws.amazonservices.com/Orders/2011-01-01""&gt;
  &lt;Error&gt;
    &lt;Type&gt;Sender&lt;/Type&gt;
    &lt;Code&gt;SignatureDoesNotMatch&lt;/Code&gt;
    &lt;Message&gt;The request signature we calculated does not match the signature you provided. Check your AWS Secret Access Key and signing method. Consult the service documentation for details.&lt;/Message&gt;
  &lt;/Error&gt;
  &lt;RequestID&gt;7532e668-c660-4db6-b129-f5fe5d3fad63&lt;/RequestID&gt;
&lt;/ErrorResponse&gt;
</code></pre>

<p>Any insight would be greatly appreciated. Debugging is fun but I need to get past this already!</p>
","","","769","<java><amazon-web-services><base64><digital-signature><hmac>","1","","0","2015-09-10 21:26:13","","0","3","","","","2014-01-29 22:30:11","","",""
"49098943","How and where to store secret key(s) of your REST API with HMAC based signing","<p>I'm building REST API that should be acceseble for other developers. To authenticate clients I decided to use HMAC-SHA256 request signing with <strong>API key</strong> and <strong>secret key</strong>.</p>

<p>So the proccess of authentication looks like this:</p>

<ol>
<li>Along with the request body, client sends headers, containing his <strong>API key</strong> and signature generated using some data (request body/date/etc) + <strong>secret key</strong></li>
<li>Server recieves requests and check if <strong>API key</strong> is valid and not revoked</li>
<li>Server gets <strong>secret key</strong> from somewhere and generates signature by the same algorythm as client did</li>
<li>If both signatures (recieved from client and generated on server) are the same, request is authenticated</li>
</ol>

<p>Everything's here is very clear and simple. But the question is: 
<em>where and how should I store that <strong>secret key</strong> and should it be the only one for all clients or different for each one of them</em>. </p>

<p>I've read tons of articles, with lots of good examples of how to implement this kind of request authentication, but none of them tell how should I store <strong>secret key</strong> - in database, or in some document, located at server's FS. As I understood, both <strong>API key</strong> and <strong>secret key</strong> should not be encrypted. Because first one is used only for identifying or revoking client and second one should be fast accessible for server to create and compare signature.</p>

<p>And returning to the second part of question, should it be the only one <strong>secret key</strong> for all the users or private for each user? If it would be the only one key, it's simple to hide it on server, e.g. in environment variable. But what if it should be compromised on client's side? In this case I should change secret key and it will block my API for all of my other clients...</p>

<p>I found some information about security and effects of compromising here: <a href=""https://stackoverflow.com/questions/5487757/using-hmac-sha1-for-api-authentication-how-to-store-the-client-password-secure"">Using HMAC-SHA1 for API authentication - how to store the client password securely?</a>
But still no useful information about storing.</p>
","","","761","<rest><api><hmac>","3","","0","2018-03-05 19:18:56","","0","","9442424","","2018-03-05 19:18:56","2018-03-04 18:37:21","","",""
"53529347","HMAC SHA256 Powershell convert","<p>Why does the following powershell script:</p>

<pre><code>$privateKey = ""843c1f887b""
$requestData = ""1543448572|d.lastname@firm.com|Firstname Lastname""
function signRequest {
    $hmacsha = New-Object System.Security.Cryptography.HMACSHA256
    $hmacsha.key = [Text.Encoding]::ASCII.GetBytes($privateKey)
    $signature = $hmacsha.ComputeHash([Text.Encoding]::ASCII.GetBytes($requestData))
    $signature = [Convert]::ToBase64String($signature)
    $outi = $signature
    return $signature
}
</code></pre>

<p>convert to hash:</p>

<pre><code>FipK51tOtzb2m2yFQAf5IK6BNthClnqE24luMzYMPuo=
</code></pre>

<p>and other online hmac sha256 generators with the same input to:</p>

<pre><code>162a4ae75b4eb736f69b6c854007f920ae8136d842967a84db896e33360c3eea
</code></pre>

<p>any suggestions what I'm doing wrong in the script?
Thanks!</p>
","<p>Your code produces the correct HMAC, you're just base64-encoding it instead of output a hex string like all the other tools.</p>

<p>Change this line</p>

<pre><code>$signature = [Convert]::ToBase64String($signature)
</code></pre>

<p>to</p>

<pre><code>$signature = [System.BitConverter]::ToString($signature).Replace('-','').ToLower()
</code></pre>

<p>Explanation:</p>

<ul>
<li><a href=""https://docs.microsoft.com/en-us/dotnet/api/system.bitconverter.tostring#System_BitConverter_ToString_System_Byte___"" rel=""nofollow noreferrer""><code>[BitConverter]::ToString($signature)</code></a> produces a hexadecimal string (<code>16-2A-4A-E7...</code>)</li>
<li><a href=""https://docs.microsoft.com/en-us/dotnet/api/system.string.replace#System_String_Replace_System_String_System_String_"" rel=""nofollow noreferrer""><code>String.Replace('-','')</code></a> removes the <code>-</code> (<code>162A4AE7...</code>)</li>
<li><a href=""https://docs.microsoft.com/en-us/dotnet/api/system.string.tolower#System_String_ToLower"" rel=""nofollow noreferrer""><code>String.ToLower()</code></a> lowercases the final string (<code>162a4ae7...</code>)</li>
</ul>
","53529409","760","<powershell><sha256><hmac>","1","3","1","2018-11-28 23:07:09","53529409","0","","","","","2018-11-28 22:55:59","","2018-11-28 23:07:09","2018-11-28 23:01:51"
"26688043","Same HMAC algorithm in obj-c and swift creates different hashes","<p>I have two methods that create a sha1 hash from a string. Using the same input data this algorithms create different hashes, however they should create the same hashes.  </p>

<p>In swift (creates 617fb90f14f2eacecc333d558237bf8bb9fc85f7):</p>

<pre><code>static func sha1FromMessage(message: String) -&gt; String {

    let cKey = RestUtils.API_KEY.cStringUsingEncoding(NSASCIIStringEncoding)!
    let cData = message.cStringUsingEncoding(NSUTF8StringEncoding)!

    var cHMAC = [CUnsignedChar](count: Int(CC_SHA1_DIGEST_LENGTH), repeatedValue: 0)
    CCHmac(CCHmacAlgorithm(kCCHmacAlgSHA1), cKey, UInt(cKey.count), cData, UInt(cData.count), &amp;cHMAC)

    let output = NSMutableString(capacity: Int(CC_SHA1_DIGEST_LENGTH))

    for byte in cHMAC {
        output.appendFormat(""%02hhx"", byte)
    }

    return output
}
</code></pre>

<p>and obj-c (creates d80b816f0b46d5211b6d9487089597e181717ea6)</p>

<pre><code>+(NSString *)sha1FromMessage:(NSString *)message{

    const char *cKey  = [API_KEY cStringUsingEncoding:NSASCIIStringEncoding];
    const char *cData = [message cStringUsingEncoding:NSUTF8StringEncoding];

    unsigned char cHMAC[CC_SHA1_DIGEST_LENGTH];

    CCHmac(kCCHmacAlgSHA1, cKey, strlen(cKey), cData, strlen(cData), cHMAC);
    NSData *HMACData = [NSData dataWithBytes:cHMAC length:sizeof(cHMAC)];

    const unsigned char *buffer = (const unsigned char *)[HMACData bytes];
    NSMutableString *HMAC = [NSMutableString stringWithCapacity:HMACData.length * 2];

    for (int i = 0; i &lt; HMACData.length; ++i){
        [HMAC appendFormat:@""%02hhx"", buffer[i]];
    }

    return HMAC;
}
</code></pre>

<p>I would like the swift method to return the same hash as the obj-c method. Any ideas where the problem is?</p>
","<p>The reason is that <code>cData</code> created by</p>

<pre><code>let cData = message.cStringUsingEncoding(NSUTF8StringEncoding)!
</code></pre>

<p>includes the <em>terminating NUL-character</em> of the message string and that is counted in
<code>UInt(cData.count)</code> as well. You could fix that by using <code>UInt(strlen(cData))</code> instead,
as in your Objective-C code.</p>

<p>But a better solution is to convert the input strings
to <code>NSData</code> objects instead:</p>

<pre><code>let cKey = RestUtils.API_KEY.dataUsingEncoding(NSASCIIStringEncoding)!
let cData = message.dataUsingEncoding(NSUTF8StringEncoding)!

var cHMAC = [CUnsignedChar](count: Int(CC_SHA1_DIGEST_LENGTH), repeatedValue: 0)
CCHmac(CCHmacAlgorithm(kCCHmacAlgSHA1), cKey.bytes, UInt(cKey.length), cData.bytes, UInt(cData.length), &amp;cHMAC)
</code></pre>

<p>With this modification, Swift and Objective-C code produce the same message digest.</p>
","26688739","755","<ios><objective-c><swift><hmac>","1","2","1","2014-11-01 11:43:15","26688739","0","","2617546","","2014-11-01 09:57:44","2014-11-01 09:53:16","","2014-11-01 11:43:15","2014-11-01 11:13:01"
"20433662","CCHmac with kCCHmacAlgSHA1 has inconsistent output length","<p>I'm working on an oauth library for iOS and about 10% to 15% of my requests are failing because the <code>oauth_signature</code> generated by my library is incorrect. I've traced the issue down to <code>CCHmac()</code> returning unexpected results. The signature fails when the hmac hash has an incorrect length. To verify this problem, I ran this code:</p>

<pre><code>NSString *key = @""25f108b539761bd43b6c66b64fb191c8"";

for (int i = 0; i &lt; 25; i++) {
    unsigned int chunks[4] = {
        arc4random() % ((int) pow(256, 4)),
        arc4random() % ((int) pow(256, 4)),
        arc4random() % ((int) pow(256, 4)),
        arc4random() % ((int) pow(256, 4))
    };

    // Generate a random input string of 32 hex chars
    NSString *input = [NSString stringWithFormat:@""%08x%08x%08x%08x"", chunks[0], chunks[1], chunks[2], chunks[3]];

    unsigned char output[CC_SHA1_DIGEST_LENGTH];

    CCHmac(kCCHmacAlgSHA1, key.UTF8String, key.length, input.UTF8String, input.length, output);

    NSLog(@""HMAC Hash Length: %02lu"", strlen(output));
}
</code></pre>

<p>... and got this output:</p>

<pre><code>2013-12-06 16:05:24.596 ODB[98281:70b] HMAC Hash Length: 40
2013-12-06 16:05:24.596 ODB[98281:70b] HMAC Hash Length: 20
2013-12-06 16:05:24.596 ODB[98281:70b] HMAC Hash Length: 41
2013-12-06 16:05:24.596 ODB[98281:70b] HMAC Hash Length: 35
2013-12-06 16:05:24.596 ODB[98281:70b] HMAC Hash Length: 41
2013-12-06 16:05:24.597 ODB[98281:70b] HMAC Hash Length: 41
2013-12-06 16:05:24.597 ODB[98281:70b] HMAC Hash Length: 41
2013-12-06 16:05:24.597 ODB[98281:70b] HMAC Hash Length: 41
2013-12-06 16:05:24.597 ODB[98281:70b] HMAC Hash Length: 41
2013-12-06 16:05:24.597 ODB[98281:70b] HMAC Hash Length: 41
2013-12-06 16:05:24.597 ODB[98281:70b] HMAC Hash Length: 41
2013-12-06 16:05:24.597 ODB[98281:70b] HMAC Hash Length: 41
2013-12-06 16:05:24.598 ODB[98281:70b] HMAC Hash Length: 41
2013-12-06 16:05:24.598 ODB[98281:70b] HMAC Hash Length: 41
2013-12-06 16:05:24.598 ODB[98281:70b] HMAC Hash Length: 41
2013-12-06 16:05:24.598 ODB[98281:70b] HMAC Hash Length: 41
2013-12-06 16:05:24.795 ODB[98281:70b] HMAC Hash Length: 20
2013-12-06 16:05:24.795 ODB[98281:70b] HMAC Hash Length: 41
2013-12-06 16:05:24.795 ODB[98281:70b] HMAC Hash Length: 41
2013-12-06 16:05:24.795 ODB[98281:70b] HMAC Hash Length: 41
2013-12-06 16:05:24.796 ODB[98281:70b] HMAC Hash Length: 41
2013-12-06 16:05:24.796 ODB[98281:70b] HMAC Hash Length: 41
2013-12-06 16:05:24.796 ODB[98281:70b] HMAC Hash Length: 41
2013-12-06 16:05:24.796 ODB[98281:70b] HMAC Hash Length: 24
2013-12-06 16:05:24.797 ODB[98281:70b] HMAC Hash Length: 41
</code></pre>

<p>This method of hmac hashing seems to be pretty universally accepted so I would expect to see consistent output length. What am I missing?</p>
","<p>If I remember correctly, CCHmac outputs its result in binary form, so when this function finishes, output[] should always be filled with <em>exactly</em> 20 bytes.</p>

<p>Recall that strlen() just iterates through memory until it finds a 'null' byte, e.g.</p>

<pre><code>int strlen(char *s)
{
  for(int n = 0; s[n] != 0; s++)
  {
    n++;
  }
  return n;
}
</code></pre>

<p>So, if it happens that one of the bytes in output[] is 0, then your NSLog statement will print out a value less than 20. Otherwise, strlen() will continue searching into undefined regions of memory until it happens to find a value of 0 somewhere. You will get largely unpredictable results, and this could actually make your program crash.</p>

<p>Instead, it looks like you may be expecting a hex-string representation of the HMAC. To get one, you could do something like:</p>

<pre><code>NSMutableString *hexOutput = [NSMutableString string];
for (int i = 0; i &lt; CC_SHA1_DIGEST_LENGTH; i++) {
    [hexOutput appendFormat:@""%02x"", output[i]];
}
</code></pre>
","20433889","752","<objective-c><c><oauth><hmac>","1","1","1","2013-12-06 21:28:15","","0","","","","","2013-12-06 21:13:39","","","2013-12-06 21:28:15"
"12626180","HMAC verification API in javascript","<p>I am successfully implemented HMAC verification from the backend but would like to offer JSONP support.  Since I dont want the client to know about the secret key, what is the best way to take advantage of HMAC and make calls from the client?</p>
","<p>If the attacker knows the secret key then he will always be able to generate a valid HMAC.  An attacker will be able to obtain this HMAC value by <a href=""https://addons.mozilla.org/en-US/firefox/addon/tamper-data/"" rel=""nofollow"">looking at the traffic</a> or <a href=""https://addons.mozilla.org/en-US/firefox/addon/greasemonkey/"" rel=""nofollow"">by modifying the JavaScript</a>.  A JavaScript debugger like firebug could also be used. </p>

<p>In short, this security feature doesn't exist anywhere because its completely and totally worthless.   It sounds like you are very carefully implementing a <a href=""http://cwe.mitre.org/data/definitions/602.html"" rel=""nofollow"">CWE-602</a> violation.</p>

<p>Trusting the client is the worst mistake you could make.  The very foundation of modern web application security is about defending the server from the client.  I think you have a lot to learn. </p>
","12629494","749","<javascript><hmac>","3","3","1","2012-09-30 17:22:51","","3","","183528","","2012-09-30 17:22:51","2012-09-27 16:41:42","","","2012-09-27 20:26:01"
"43278132","Verifying HMAC from Microsoft Teams bot in Python Flask","<p>I am trying to build a Microsoft Teams chat bot using Flask, following the instructions on <a href=""https://msdn.microsoft.com/en-us/microsoft-teams/custombot"" rel=""nofollow noreferrer"">how to build custom bots</a>. However I am unable to verify the HMAC auth which I really want for security.</p>

<p>Based on guides and documentation I've found I am using the following minimial testing app trying to calculate a HMAC for the incoming request. (Bot name and description <code>DevBot</code> and the key/security_token below for testing).</p>

<pre><code>#!/usr/bin/python
# coding=utf-8

from flask import Flask, request, jsonify
import hmac, hashlib, base64, json

app = Flask(__name__)

@app.route('/', methods=['GET', 'POST'])
def webhook():
    if request.method == 'POST':

        # Authenticate
        security_token = b""O5XHU8OSzwx8w9YiM0URkR/Ij4TZZiZUwz7Swc+1hZE=""
        request_data = request.get_data()
        digest = hmac.new(security_token, msg=request_data, digestmod=hashlib.sha256).digest()
        signature = base64.b64encode(digest).decode()


        # TODO: Verify signature = Authorization header HMAC here

        return jsonify({
            'type' : 'message',
            'text' : ""Auth header: {0} &lt;br&gt;Calculated HMAC: {1}"".format(request.headers.get('Authorization'), signature),
        })

    elif request.method == 'GET':
        return ""Hello World""


if __name__ == '__main__':
    app.run(debug=True)
</code></pre>

<p>Upon sending the message <code>@DevBot test</code> I get the following hashes back in the reply from the bot, but they aren't matching as expected:</p>

<pre><code>Auth header: HMAC LuDmz97y/Z2KWLIZ1WZASz3HlOEtDCwk5/lL/fK8GqM= 
Calculated HMAC: eaxTdJSLuU3Z4l94bxFiWvsBhjNG9SPxwq/UHeR7KcA= 
</code></pre>

<p>Any ideas or pointers? I've been trying all sorts of stuff with encoding but I have a feeling that Flask might be doing something that modifies the request body or something?</p>

<p><em>edit 1: small clarification</em></p>

<p><em>edit 2: full Flask app example</em></p>

<p><em>edit 3: sample bot details, input and output examples</em></p>
","<p>Another option rather than interfacing directly with Microsoft Teams may be to use the Microsoft Bot Connector API.</p>

<p><a href=""https://docs.botframework.com/en-us/restapi/connector/"" rel=""nofollow noreferrer"">https://docs.botframework.com/en-us/restapi/connector/</a></p>

<p>I have a bot working with Microsoft Teams using <a href=""https://github.com/Grungnie/microsoftbotframework"" rel=""nofollow noreferrer"">https://github.com/Grungnie/microsoftbotframework</a> which is validating the JWT that is sent from Microsoft.</p>
","43762888","749","<python><flask><hmac><microsoft-teams>","1","1","2","2018-05-11 16:06:35","43932431","0","1","5841008","","2017-04-10 09:19:25","2017-04-07 12:26:33","","","2017-05-03 14:27:09"
"43278132","Verifying HMAC from Microsoft Teams bot in Python Flask","<p>I am trying to build a Microsoft Teams chat bot using Flask, following the instructions on <a href=""https://msdn.microsoft.com/en-us/microsoft-teams/custombot"" rel=""nofollow noreferrer"">how to build custom bots</a>. However I am unable to verify the HMAC auth which I really want for security.</p>

<p>Based on guides and documentation I've found I am using the following minimial testing app trying to calculate a HMAC for the incoming request. (Bot name and description <code>DevBot</code> and the key/security_token below for testing).</p>

<pre><code>#!/usr/bin/python
# coding=utf-8

from flask import Flask, request, jsonify
import hmac, hashlib, base64, json

app = Flask(__name__)

@app.route('/', methods=['GET', 'POST'])
def webhook():
    if request.method == 'POST':

        # Authenticate
        security_token = b""O5XHU8OSzwx8w9YiM0URkR/Ij4TZZiZUwz7Swc+1hZE=""
        request_data = request.get_data()
        digest = hmac.new(security_token, msg=request_data, digestmod=hashlib.sha256).digest()
        signature = base64.b64encode(digest).decode()


        # TODO: Verify signature = Authorization header HMAC here

        return jsonify({
            'type' : 'message',
            'text' : ""Auth header: {0} &lt;br&gt;Calculated HMAC: {1}"".format(request.headers.get('Authorization'), signature),
        })

    elif request.method == 'GET':
        return ""Hello World""


if __name__ == '__main__':
    app.run(debug=True)
</code></pre>

<p>Upon sending the message <code>@DevBot test</code> I get the following hashes back in the reply from the bot, but they aren't matching as expected:</p>

<pre><code>Auth header: HMAC LuDmz97y/Z2KWLIZ1WZASz3HlOEtDCwk5/lL/fK8GqM= 
Calculated HMAC: eaxTdJSLuU3Z4l94bxFiWvsBhjNG9SPxwq/UHeR7KcA= 
</code></pre>

<p>Any ideas or pointers? I've been trying all sorts of stuff with encoding but I have a feeling that Flask might be doing something that modifies the request body or something?</p>

<p><em>edit 1: small clarification</em></p>

<p><em>edit 2: full Flask app example</em></p>

<p><em>edit 3: sample bot details, input and output examples</em></p>
","<p>After lots of trial and error and trying to reproduce the C# code example from MS I managed to solve it myself. Here's the solution:</p>

<pre><code>#!/usr/bin/python
# coding=utf-8

from flask import Flask, request, jsonify
import hmac, hashlib, base64, json

app = Flask(__name__)

@app.route('/', methods=['GET', 'POST'])
def webhook():
    if request.method == 'POST':


        # Reply
        data = request.get_json()
        channel = data['channelId']
        message_type = data['type']
        sender = data['from']['name']
        message_format = data['textFormat']
        message = data['text']

        # Authenticate

        security_token = b""O5XHU8OSzwx8w9YiM0URkR/Ij4TZZiZUwz7Swc+1hZE=""
        request_data = request.get_data()
        digest = hmac.new(base64.b64decode(security_token), msg=request_data, digestmod=hashlib.sha256).digest()
        signature = base64.b64encode(digest).decode()

        # TODO: verify that HMAC header == signature

        return jsonify({
            'type' : 'message',
            'text' : ""auth header: {0} &lt;br&gt;hmac: {1}"".format(request.headers.get('Authorization').split(' ')[1], signature),
        })

    elif request.method == 'GET':
        return ""Hello World""


if __name__ == '__main__':
    app.run(debug=True)
</code></pre>
","43932431","749","<python><flask><hmac><microsoft-teams>","1","2","2","2018-05-11 16:06:35","43932431","0","1","5841008","","2017-04-10 09:19:25","2017-04-07 12:26:33","","2018-05-11 16:06:35","2017-05-12 07:58:52"
"33810889","Read multipart/form-data twice","<p>I have an ASP.NET WebApi, clients are authenticated via HMAC.</p>

<p>Authentication is done in an AuthenticationFilter.<br>
For the comparison of the HMAC key with the one provided by the client I need to read <code>Request.Content</code>. Everything is fine until here.</p>

<p>In ParameterBinding I also need to read from Request.Content. This works fine, until content is not <code>multipart/form-data</code>. <code>StringContent</code> and <code>ByteArrayContent</code> can be read multiple times via <code>content.ReadAsStringAsync()</code> / <code>content.ReadAsByteArrayAsync()</code>, but <code>ReadAsMultipartAsync()</code> can only be called once.</p>

<p>So, after authentication I can not read content again (e.g. in ParamterBinding) for extracting data / images etc from the request content.</p>

<p>I read that <code>ReadAsStringAsync()</code> / <code>ReadAsByteArrayAsync()</code> calls <code>LoadIntoBufferAsync()</code> internally, which loads request content into a memory buffer. But doing this with my multipart content does not solve this problem.</p>

<p>Exception is:</p>

<blockquote>
  <p>Unexpected end of MIME multipart stream. MIME multipart message is not
  complete.</p>
</blockquote>
","<p>You could rewind the input stream after reading it if you have access to <code>HttpContext.Current</code> (not self hosted). Like this:</p>

<pre><code>HttpContext.Current.Request.InputStream.Position=0;
</code></pre>
","33822174","748","<asp.net-web-api><multipartform-data><hmac>","0","0","1","2015-11-20 08:35:07","","0","","4080978","","2015-11-19 18:49:44","2015-11-19 17:47:28","","","2015-11-20 08:35:07"
"49024459","Hashing a csv file in python with a key","<p>I have a csv file with 1000+ emailadreses which I want to hash using a SHA256 HMAC and a shared key, encoded to Base64.</p>

<p>There was a similiar problem <a href=""https://stackoverflow.com/questions/34771268/md5-hashing-a-csv-with-python"">here</a>, but I can't adapt the solution to work for me. I am new to python and I don't know where to change the code in order to make use of the shared key. </p>

<p>This is the slightly adapted code from the answer:</p>

<pre><code>import csv
import hashlib
import hmac
import base64

IN_PATH = 'test.csv'
OUT_PATH = 'test_hashed.csv'
ENCODING = 'utf8'
HASH_COLUMNS = dict(Mail='md5')


def main():
    with open(IN_PATH, 'rt', encoding=ENCODING, newline='') as in_file, \
            open(OUT_PATH, 'wt', encoding=ENCODING, newline='') as out_file:
        reader = csv.DictReader(in_file)
        writer = csv.DictWriter(out_file, reader.fieldnames)
        writer.writeheader()
        for row in reader:
            for column, method in HASH_COLUMNS.items():
                data = row[column].encode(ENCODING)
                digest = hashlib.new(method, data).hexdigest()
                row[column] = '0x' + digest.upper()
            writer.writerow(row)

if __name__ == '__main__':
    main()
</code></pre>

<p>The input file (.csv) looks like this:</p>

<pre><code>Mail
DHSKA@gmail.com
DJÖANw12@gmail.com
JSNÖS83@ymail.com
HDKDLSA@gmail.com
KKKDLAmS19@yamil.com
</code></pre>

<p>And with the code above, the output file looks like this:</p>

<pre><code>0xB6A77B6EB853CC4CC8342B312293FA9C
0xEB439592D8EEC2A38A597350EF80E512
0x833EB6AEC1D03D7D8C94606E0D749B80
0x8007D8D1702E8A749EBD6033A52A7897
0x415E067487C4A5FBDB86AB0F855DB114
</code></pre>

<p>But since I do want to use a HMAC with secret key and sha256, the above solution doesn't work for me and I don't know how to incorporate this approach. </p>

<p>The key would be something like this: </p>

<pre><code>123Abc
</code></pre>

<p>I was trying to do something like this, but for the whole file:</p>

<pre><code>import hmac
import hashlib
import base64

secret = ""123Abc""
secret_bytes = bytes(secret, 'latin-1')
data = ""DHSKA@gmail.com""
data_bytes = bytes(data, 'latin-1')

digest = hmac.new(secret_bytes, msg=data_bytes, digestmod=hashlib.sha256).digest()
signature = base64.b64encode(digest).decode()
</code></pre>

<p>Thus, my question is how I can incorporate the HMAC SHA 256 hashing wile using the a secret key, in the above code? I just can't figure out which parameters to change?</p>
","<p>I don't think you need to trouble yourself with the dictionary; you don't have a variable number of columns here, you are applying your transformation to just one column.</p>

<p>It'll be easier to follow if you just put your working HMAC method into a function:</p>

<pre><code>import hmac
import hashlib
import base64

secret = ""123Abc""
secret_bytes = bytes(secret, 'latin-1')

def create_signature(email, secret_bytes):
    data_bytes = email.encode('latin-1')
    digest = hmac.new(secret_bytes, msg=data_bytes, digestmod=hashlib.sha256).digest()
    signature = base64.b64encode(digest).decode()
    return signature
</code></pre>

<p>This now neatly produces a Base64 string with a HMAC digest from an email address and your (encoded) secret:</p>

<pre><code>&gt;&gt;&gt; create_signature('DHSKA@gmail.com', secret_bytes)
'3KaSw4QeA5l0rz49uutaDGemn4Et4CQnbnngm6mmpjE='
</code></pre>

<p>Now you can apply that to the <code>'Mail'</code> column values, and write out the new CSV with the results:</p>

<pre><code>with open(IN_PATH, 'rt', encoding=ENCODING, newline='') as in_file, \
        open(OUT_PATH, 'wt', encoding=ENCODING, newline='') as out_file:
    reader = csv.DictReader(in_file)
    writer = csv.DictWriter(out_file, reader.fieldnames)
    writer.writeheader()
    for row in reader:
        row['Mail'] = create_signature(row['Mail'], secret_bytes)
        writer.writerow(row)
</code></pre>

<p>Demo:</p>

<pre><code>&gt;&gt;&gt; import sys, csv, io
&gt;&gt;&gt; demo_input = io.StringIO('''\
... Mail
... DHSKA@gmail.com
... DJÖANw12@gmail.com
... JSNÖS83@ymail.com
... HDKDLSA@gmail.com
... KKKDLAmS19@yamil.com
... ''')
&gt;&gt;&gt; demo_output = io.StringIO()
&gt;&gt;&gt; with demo_input as in_file:
...     reader = csv.DictReader(in_file)
...     writer = csv.DictWriter(demo_output, reader.fieldnames)
...     writer.writeheader()
...     for row in reader:
...         row['Mail'] = create_signature(row['Mail'], secret_bytes)
...         writer.writerow(row)
...
46
46
46
46
46
&gt;&gt;&gt; print(demo_output.getvalue())
Mail
3KaSw4QeA5l0rz49uutaDGemn4Et4CQnbnngm6mmpjE=
dP9IU66yKnYP/6mFRZ6TAAAN3lmxAcUPk9o1iFfpGDs=
ajNdCZF8ndw2SrgtSzcVCbeSpFsXI/Z6Ep0IC2fj+WU=
TgeFEj8CgvcQbVcLHTIIY1ULLnYkWAZaia5k01IQiJY=
Xu94abwV/5/HUXY+T3NpUgulGvew+L0UYzkPuRSv/98=
</code></pre>
","49031320","745","<python><python-3.x><sha256><hmac>","1","1","1","2018-02-28 14:12:46","49031320","4","","100297","","2018-02-28 14:12:46","2018-02-28 07:51:27","","2018-02-28 14:11:09","2018-02-28 14:00:49"
"22716659","HmacSHA1 on android side and php side results different","<p>php code:</p>

<pre><code>$secret = ""mtHa5YRivVrQ/ZNtoe2oxg=="";
$var3 = 11112222;
$signature  = hash_hmac('sha1', $var3, $secret, true);
$data = base64_encode($signature);
echo $data;
</code></pre>

<p>Output : Prpji0PmtBsmDo1grDbXMJnJUTs=</p>

<p>Android code:</p>

<pre><code>String data = 11112222;
String secret = mtHa5YRivVrQ/ZNtoe2oxg==
SecretKeySpec key = new SecretKeySpec((secret).getBytes(""UTF-8""), ""HmacSHA1"");
Mac mac = Mac.getInstance(""HmacSHA1"");
mac.init(key);
byte[] bytes = mac.doFinal(data.getBytes(""UTF-8""));
return new String(Base64.encodeToString(bytes, Base64.DEFAULT));
</code></pre>

<p>Output : q85cCMvVB7PX39upoT5/+9J0bWM=</p>

<p>Don't know whats wrong.please help me out</p>
","<p>You have secret key Base64 encoded, so you have first to decode it to plain byte array:</p>

<p>PHP:</p>

<pre><code>$secret64 = ""mtHa5YRivVrQ/ZNtoe2oxg=="";
$secret = base64_decode($secret64);
$data = ""11112222"";
$hmac  = hash_hmac('sha1', $data, $secret, true);
$hmac64 = base64_encode($signature);
echo $hmac64;
</code></pre>

<p>Java:</p>

<pre><code>String data = ""11112222"";
String secret64 = ""mtHa5YRivVrQ/ZNtoe2oxg=="";
byte[] secret = Base64.decode(secret64, Base64.DEFAULT);
SecretKeySpec key = new SecretKeySpec(secret, ""HmacSHA1"");
Mac mac = Mac.getInstance(""HmacSHA1"");
mac.init(key);
byte[] bytes = mac.doFinal(data.getBytes(""UTF-8""));
return Base64.encodeToString(bytes, Base64.DEFAULT);
</code></pre>

<p>Result:</p>

<pre><code>LdKcsVyMX0BAhugGFEr4dAlFfe8=
</code></pre>
","22732982","740","<java><php><base64><hmac>","1","1","1","2014-03-29 19:58:50","22732982","0","1","642653","","2014-03-29 15:27:38","2014-03-28 15:14:22","","2014-03-29 19:58:50","2014-03-29 15:25:35"
"15596157","cannot import name SIGNATURE_HMAC","<p>I am running the <a href=""https://github.com/omab/python-social-auth/tree/master/examples/django_example"" rel=""noreferrer"">django example</a> provided with <a href=""https://python-social-auth.readthedocs.org/en/"" rel=""noreferrer"">python-social-auth</a>, and am getting the following 500 server error.</p>

<pre><code>ImportError at /login/bitbucket/
cannot import name SIGNATURE_HMAC
Request Method: GET
Request URL:    http://localhost:8000/login/bitbucket/
Django Version: 1.4.4
Exception Type: ImportError
Exception Value:    
cannot import name SIGNATURE_HMAC
Exception Location: /usr/local/lib/python2.7/dist-packages/requests_oauthlib/core.py in  &lt;module&gt;, line 3
Python Executable:  /usr/bin/python
Python Version: 2.7.3
</code></pre>

<p>I searched around in Google and StackOverflow and couldnt find any answers. I have just cloned it and havent changed any code. I have both hashlib and hmac libraries installed</p>

<p>[EDIT]
I upgraded both oauthlib and requests_oauthlib and the error got replaced by a new one</p>

<pre><code>AttributeError at /login/bitbucket/
'Request' object has no attribute 'body'
Request Method: GET
Request URL:    http://localhost:8000/login/bitbucket/
Django Version: 1.4.4
Exception Type: AttributeError
Exception Value:    
'Request' object has no attribute 'body'
Exception Location: /usr/local/lib/python2.7/dist-packages/requests_oauthlib/core.py in         __call__, line 46
Python Executable:  /usr/bin/python
Python Version: 2.7.3
</code></pre>
","<p>Just for reference, I solved the issue in the title (came from Google) by reinstalling the oauthlib package via pip.</p>

<pre><code>sudo pip install --upgrade oauthlib
</code></pre>

<p>Due to this problem I wasn't able to open Ubuntu Software Center, after upgrading oauthlib everything works normally.</p>
","22097771","738","<python><django><python-2.7><importerror><hmac>","5","0","1","2014-08-26 05:51:27","22097771","1","","1068511","","2013-03-24 13:20:38","2013-03-24 07:29:30","","","2014-02-28 14:23:58"
"10135108","Authenticating HMAC in MVC3","<p>Im building my own web service on the premise of 2-legged OAuth.</p>

<p>With each authenticated request there will be an included HMAC.</p>

<p>I know it could be done like this:</p>

<pre><code>public ActionResult userInfoExample(string HMAC, string username)
    {
        MyMembership.checkHMAC(HMAC);
        //get user
        return View();
    }
</code></pre>

<p>but that is fairly nasty, because HMAC needs to be included in the parameters for every action. Its weakly typed and crap.</p>

<p>I wanted to do something like this:</p>

<pre><code>[AuthorizeHMAC]
    public ActionResult userInfoExample(string username)
    {
        //get user
        return View();
    }
</code></pre>

<p><a href=""https://stackoverflow.com/questions/2717250/is-it-possible-to-use-data-annotations-to-validate-parameters-passed-to-an-actio"">I found this</a>, and it mentioned I should look at Custom Modal Binders, so then <a href=""http://buildstarted.com/2010/09/12/custom-model-binders-in-mvc-3-with-imodelbinder/"" rel=""nofollow noreferrer"">I found this</a> and after reading it I am unsure how I could make that work.</p>

<p>My goal is to authenticate (/authorise) using a HMAC that (I assume) is placed in the URL parameters i.e.: http:// www.website.com/foo/bar?username=xxx&amp;hmac=xxxxxxxxx  </p>

<p>I would like to know if anyone has any references I can read or a direct solution.<br>
I am also welcome to criticism on my fundamental understanding of API security, or how I am doing things, I am fairly new to this area of </p>
","<p>Check out my code at
<a href=""http://mvcsecurity.codeplex.com/"" rel=""nofollow"">http://mvcsecurity.codeplex.com/</a></p>

<p>I do something similar to validate parameters on the page (it is not an HMAC though). Since you will be generating it on the View Im assuming (or passing it to the view) you can check it the same way a similar way I check it in my attribute.</p>

<p>From:</p>

<pre>
<code>
        public override void OnActionExecuting(ActionExecutingContext filterContext)
        {
            //The hidden form field that contains our hash - for ex. CustomerId is rendered as a hidden input  id=""_CustomerIdToken""
            string encryptedPropertyName = string.Format(""_{0}Token"", _propertyName);

            //grab the token
            string hashToken = filterContext.HttpContext.Request.Form[encryptedPropertyName];

            //The encrypted form data MUST be there. We do not allow empty strings otherwise this could give
            //an attack vector in our filter as a means to bypass checks by simply passing in an empty validation token.
            if (string.IsNullOrEmpty(hashToken))
            {
                throw new MissingFieldException(string.Format(""The hidden form field named value {0} was missing. This is created by the Html.AntiModelInjection methods. Ensure the name used on your [ValidateAntiModelInjectionAttribute(\""!HERE!\"")] matches the field name used in Html.AntiModelInjection method. If this attribute is used on a controller method that is meant for HttpGet, then the form value would not yet exist. This attribute is meant to be used on controller methods accessed via HttpPost."", encryptedPropertyName));
            }


            //Get the plain text value
            string formValue = filterContext.HttpContext.Request.Form[_propertyName];

            //Plain text must be available to compare.
            if (string.IsNullOrEmpty(formValue))
            {
                throw new MissingFieldException(string.Format(""The form value {0} was missing. If this attribute is used on a controller method that is meant for HttpGet, then the form value would not yet exist. This attribute is meant to be used on controller methods accessed via HttpPost."", _propertyName));
            }


            //We cannot encrypt the form value and compare to the previously encrypted form token.
            //Each time you Encrypt() with the MachineKey class even using the same plain text, the end result is difference.
            byte[] plainTextBytes = MachineKey.Decode(hashToken, MachineKeyProtection.Encryption);

            string plainText = Encoding.Unicode.GetString(plainTextBytes);

            //And compare
            if (string.Compare(plainText, formValue , false, CultureInfo.InvariantCulture) != 0)
            {
                throw new HttpAntiModelInjectionException(string.Format(""Failed security validation for {0}. It is possible the data was tampered with as the original value used to create the form field does not match the current property value for this field. Ensure if this is a web farm, the machine keys are the same."",_propertyName));
            }


            filterContext.HttpContext.Trace.Write(""(Logging Filter)Action Executing: "" +
                filterContext.ActionDescriptor.ActionName);

            base.OnActionExecuting(filterContext);
        }
</code>
</pre>
","10135988","735","<asp.net-mvc-3><web-services><authentication><hmac><2-legged>","1","1","1","2012-04-16 10:01:57","","0","1","-1","","2017-05-23 10:08:50","2012-04-13 04:08:15","","2012-04-13 16:35:08","2012-04-13 06:01:22"
"16173642","Internal server with MTGOX api","<p>I have a problem calling the MTGox HTTP api v2.
I wrote a sendrequest function to generally handle all my requests.
It works great for MONEY/INFO or MONEY/ORDERS but I get a 500 internal server error when i try  methods MONEY/ORDER/QUOTE or MONEY/ORDER/ADD.</p>

<p>It seems like when the post_data contains anything besides the nonce, it goes wrong.
What do I have to do to solve this?</p>

<p>The sendrequest function:</p>

<pre><code>private string sendRequest(string action, NameValueCollection query)
    {

        NameValueCollection nvc = new NameValueCollection();
        nvc.Add(""nonce"", DateTime.Now.Ticks.ToString());
        nvc.Add(query);

        String post_data = """";
        for (int i = 0; i &lt; nvc.Count; i++)
        {
            post_data += ""&amp;"";
            post_data += nvc.Keys[i];
            post_data += ""="";
            post_data += nvc[i];
        }
        post_data = post_data.Substring(1);


        action = ""BTCEUR/money/"" + action;
        HttpWebRequest req = (HttpWebRequest)WebRequest.Create(sBasePath + action);
        action += ""\0""+post_data;
        req.Method = ""POST"";

        HMACSHA512 hmac = new HMACSHA512(GetBytes(action));
        hmac.Key = Convert.FromBase64String(secret);
        String sign = Convert.ToBase64String(hmac.ComputeHash(Encoding.UTF8.GetBytes(action)), Base64FormattingOptions.None);


        req.Headers.Add(""Rest-Key"", apikey);
        req.Headers.Add(""Rest-Sign"", sign);

        req.UserAgent = ""Mozilla/4.0 (compatible; MtGoxTradeCLI)"";
        req.ContentType = ""application/x-www-form-urlencoded"";

        StreamWriter reqStream = new StreamWriter(req.GetRequestStream());
        reqStream.Write(post_data);
        reqStream.Close();

        HttpWebResponse resp = (HttpWebResponse)req.GetResponse();

        StreamReader respStream = new StreamReader(resp.GetResponseStream());
        String response = respStream.ReadToEnd();
        respStream.Close();

        return response;
    }
</code></pre>
","<p>Make sure the nonce in your signature comes last in your signature for any request that takes params, e.g. for money/wallet/history with currency USD your signature should be:</p>

<pre><code>money/wallet/history\0currency=USD&amp;nonce=xxxxxxxxxx
</code></pre>

<p>(the \0 is a null character, just in case you're wondering)</p>

<p>Also, MtGox's API seems to be in flux right now - for example, for wallet history above, we used to call:</p>

<pre><code>BTCUSD/money/wallet/history
</code></pre>

<p>as the API endpoint, but this no longer seems to work. Now we call:</p>

<pre><code>money/wallet/history
</code></pre>

<p>So if calls that used to work for you are now failing, take a look at that too.  But I can tell you for sure that having your nonce as the last param in your QS for your signature is critical or your API calls will no longer work.</p>

<p>I also recommend re-creating a new API key in MtGox -we had to do so in order for our code to work properly as well. I have a hunch that this is because MtGox's recent API changes have invalidated old keys (likely to keep trading bots at bay while they figure out how to handle them without having the bots kill their API)</p>
","16182383","733","<c#><api><httpwebrequest><hmac><bitcoin>","1","0","1","2013-04-24 02:29:00","","0","1","","","","2013-04-23 15:42:08","","","2013-04-24 02:29:00"
"39503427","Generating SHA256 in iOS","<p>I tried to generate SHA256 in iOS using <a href=""https://cocoapods.org/pods/Arcane"" rel=""nofollow"">Arcane</a> library with following data:</p>

<p>String: <code>Amount=50&amp;BillerID=59&amp;ChannelID=2&amp;Context=34|check|test&amp;ReturnURL=https://uat.myfatoora.com/ReceiptPOC.aspx&amp;TxnRefNum=000000000020003&amp;UserName=DCS</code></p>

<p>Key: <code>71DD0F73AFFBB47825FF9864DDE95F3B</code>  </p>

<p>Result was <code>409dc622b3bef5c9fc46e45c3210111fcb4536d3a55833316fe0dc8154b3ea34</code></p>

<p>which I thought to be correct. However, the Windows counterpart is generating SHA256 using following code:</p>

<pre><code>Windows Phone Source Code:

public static string HmacSha256(string secretKey, string value)
    {
        var msg = CryptographicBuffer.ConvertStringToBinary(value, BinaryStringEncoding.Utf8);
        byte[] convertedHash = new byte[secretKey.Length / 2];

        for (int i = 0; i &lt; secretKey.Length / 2; i++)
        {
            convertedHash[i] = (byte)Int32.Parse(secretKey.Substring(i * 2, 2), System.Globalization.NumberStyles.HexNumber);
        }

        // Create HMAC.
        var objMacProv = MacAlgorithmProvider.OpenAlgorithm(MacAlgorithmNames.HmacSha256);
        CryptographicHash hash = objMacProv.CreateHash(convertedHash.AsBuffer());

        hash.Append(msg);
        return CryptographicBuffer.EncodeToHexString(hash.GetValueAndReset());

    }
</code></pre>

<p>and the result is: <code>94a20ca39c8487c7763823ec9c918d9e38ae83cb741439f6d129bcdef9edba73</code> which is different from what I got. Can somebody help me with this and let me know what the above code is doing and how can I replicate it in iOS.</p>

<p><strong>Edit:</strong></p>

<pre><code> iOS Source code

 let key = self.md5(string: ""71DD0F73AFFBB47825FF9864DDE95F3B"")

    let hash = HMAC.SHA256(str, key: key)
</code></pre>
","<p>The Windows code takes the string, interprets it as a hexadecimal number, and converts two characters a time into one byte. </p>

<p>Your Mac code most like takes the string <em>as it is</em>. Since the key starts with ""71"", your windows code takes that as a single byte with value 0x71 = 129, your Mac code takes it as two bytes with values '7' = 55 and '1' = 49. </p>

<p>All you need to do is convert the bytes on the Mac exactly as you do it on Windows. You might have to do the unthinkable and look at the source code of the Mac library to see how it does the actual hash calculation. </p>
","39505826","732","<ios><windows-phone><sha256><hmac>","1","1","3","2017-06-15 13:01:46","39737481","2","","2227743","","2017-06-15 13:01:46","2016-09-15 05:00:43","","","2016-09-15 07:57:04"
"39503427","Generating SHA256 in iOS","<p>I tried to generate SHA256 in iOS using <a href=""https://cocoapods.org/pods/Arcane"" rel=""nofollow"">Arcane</a> library with following data:</p>

<p>String: <code>Amount=50&amp;BillerID=59&amp;ChannelID=2&amp;Context=34|check|test&amp;ReturnURL=https://uat.myfatoora.com/ReceiptPOC.aspx&amp;TxnRefNum=000000000020003&amp;UserName=DCS</code></p>

<p>Key: <code>71DD0F73AFFBB47825FF9864DDE95F3B</code>  </p>

<p>Result was <code>409dc622b3bef5c9fc46e45c3210111fcb4536d3a55833316fe0dc8154b3ea34</code></p>

<p>which I thought to be correct. However, the Windows counterpart is generating SHA256 using following code:</p>

<pre><code>Windows Phone Source Code:

public static string HmacSha256(string secretKey, string value)
    {
        var msg = CryptographicBuffer.ConvertStringToBinary(value, BinaryStringEncoding.Utf8);
        byte[] convertedHash = new byte[secretKey.Length / 2];

        for (int i = 0; i &lt; secretKey.Length / 2; i++)
        {
            convertedHash[i] = (byte)Int32.Parse(secretKey.Substring(i * 2, 2), System.Globalization.NumberStyles.HexNumber);
        }

        // Create HMAC.
        var objMacProv = MacAlgorithmProvider.OpenAlgorithm(MacAlgorithmNames.HmacSha256);
        CryptographicHash hash = objMacProv.CreateHash(convertedHash.AsBuffer());

        hash.Append(msg);
        return CryptographicBuffer.EncodeToHexString(hash.GetValueAndReset());

    }
</code></pre>

<p>and the result is: <code>94a20ca39c8487c7763823ec9c918d9e38ae83cb741439f6d129bcdef9edba73</code> which is different from what I got. Can somebody help me with this and let me know what the above code is doing and how can I replicate it in iOS.</p>

<p><strong>Edit:</strong></p>

<pre><code> iOS Source code

 let key = self.md5(string: ""71DD0F73AFFBB47825FF9864DDE95F3B"")

    let hash = HMAC.SHA256(str, key: key)
</code></pre>
","<p>The key here is you need to convert your secret, which is a hex string, into NSData. In other words, <code>NSData</code> byte stream would ""look"" like the secret.</p>

<p>This should do what you want:</p>

<pre><code>    // Hex string to NSData conversion from here http://stackoverflow.com/questions/7317860/converting-hex-nsstring-to-nsdata
    NSString *secret = @""71DD0F73AFFBB47825FF9864DDE95F3B"";
    NSData *dataIn = [@""Amount=50&amp;BillerID=59&amp;ChannelID=2&amp;Context=34|check|test&amp;ReturnURL=https://uat.myfatoora.com/ReceiptPOC.aspx&amp;TxnRefNum=000000000020003&amp;UserName=DCS"" dataUsingEncoding:NSUTF8StringEncoding];
    NSMutableData *macOut = [NSMutableData dataWithLength:CC_SHA256_DIGEST_LENGTH];

    secret = [secret stringByReplacingOccurrencesOfString:@"" "" withString:@""""];
    NSMutableData *secretData = [[NSMutableData alloc] init];
    unsigned char whole_byte;
    char byte_chars[3] = {'\0','\0','\0'};
    int i;
    for (i=0; i &lt; [secret length]/2; i++) {
        byte_chars[0] = [secret characterAtIndex:i*2];
        byte_chars[1] = [secret characterAtIndex:i*2+1];
        whole_byte = strtol(byte_chars, NULL, 16);
        [secretData appendBytes:&amp;whole_byte length:1];
    }

    CCHmac(kCCHmacAlgSHA256, secretData.bytes, secretData.length, dataIn.bytes, dataIn.length, macOut.mutableBytes);

    NSMutableString *stringOut = [NSMutableString stringWithCapacity:macOut.length];
    const unsigned char *macOutBytes = macOut.bytes;

    for (NSInteger i=0; i&lt;macOut.length; ++i) {
        [stringOut appendFormat:@""%02x"", macOutBytes[i]];
    }

    NSLog(@""dataIn: %@"", dataIn);
    NSLog(@""macOut: %@"", macOut);
    NSLog(@""stringOut: %@"", stringOut);
</code></pre>

<p>Output: </p>

<p>2016-09-27 20:18:54.181 JKS[27562:5321334] dataIn: &lt;416d6f75 6e743d35 30264269 6c6c6572 49443d35 39264368 616e6e65 6c49443d 3226436f 6e746578 743d3334 7c636865 636b7c74 65737426 52657475 726e5552 4c3d6874 7470733a 2f2f7561 742e6d79 6661746f 6f72612e 636f6d2f 52656365 69707450 4f432e61 73707826 54786e52 65664e75 6d3d3030 30303030 30303030 32303030 33265573 65724e61 6d653d44 4353></p>

<p>2016-09-27 20:18:54.181 JKS[27562:5321334] macOut: &lt;94a20ca3 9c8487c7 763823ec 9c918d9e 38ae83cb 741439f6 d129bcde f9edba73></p>

<p>2016-09-27 20:18:54.181 JKS[27562:5321334] stringOut: 94a20ca39c8487c7763823ec9c918d9e38ae83cb741439f6d129bcdef9edba73</p>

<blockquote>
  <p>Updated with Swift (code should be cleaned up)</p>
</blockquote>

<pre><code>// http://stackoverflow.com/questions/29799361/generate-a-hmac-swift-sdk8-3-using-cchmac
func generateHMAC(key: String, data: String) -&gt; String {
    let keyData = key.dataFromHexadecimalString()! as NSData
    let dataIn = data.data(using: .utf8)! as NSData
    var result: [CUnsignedChar]
    result = Array(repeating: 0, count: Int(CC_SHA256_DIGEST_LENGTH))
    CCHmac(CCHmacAlgorithm(kCCHmacAlgSHA256), keyData.bytes, keyData.length, dataIn.bytes, dataIn.length, &amp;result)

    let hash = NSMutableString()
    for val in result {
        hash.appendFormat(""%02hhx"", val)
    }

    return hash as String
}
</code></pre>

<p>You can use this extension to convert the hex string to <code>Data</code></p>

<pre><code>// Modified slightly http://stackoverflow.com/questions/26501276/converting-hex-string-to-nsdata-in-swift
extension String {

    func dataFromHexadecimalString() -&gt; Data? {
        var data = Data(capacity: characters.count / 2)

        let regex = try! NSRegularExpression(pattern: ""[0-9a-f]{1,2}"", options: .caseInsensitive)
        regex.enumerateMatches(in: self, options: [], range: NSMakeRange(0, characters.count)) { match, flags, stop in
            let byteString = (self as NSString).substring(with: match!.range)
            var num = UInt8(byteString, radix: 16)
            data.append(&amp;num!, count: 1)
        }

        return data
    }
}
</code></pre>

<p>And to use do something like:</p>

<pre><code>    let secret = ""71DD0F73AFFBB47825FF9864DDE95F3B""
    let value = ""Amount=50&amp;BillerID=59&amp;ChannelID=2&amp;Context=34|check|test&amp;ReturnURL=https://uat.myfatoora.com/ReceiptPOC.aspx&amp;TxnRefNum=000000000020003&amp;UserName=DCS""

    print(""\(generateHMAC(key: secret, data: value))"")
</code></pre>

<p>Your output should be 94a20ca39c8487c7763823ec9c918d9e38ae83cb741439f6d129bcdef9edba73</p>

<p>You will need <code>#import &lt;CommonCrypto/CommonCrypto.h&gt;</code> in your bridging header.</p>
","39737481","732","<ios><windows-phone><sha256><hmac>","1","2","3","2017-06-15 13:01:46","39737481","2","","2227743","","2017-06-15 13:01:46","2016-09-15 05:00:43","","2016-09-28 05:09:55","2016-09-28 03:19:39"
"39503427","Generating SHA256 in iOS","<p>I tried to generate SHA256 in iOS using <a href=""https://cocoapods.org/pods/Arcane"" rel=""nofollow"">Arcane</a> library with following data:</p>

<p>String: <code>Amount=50&amp;BillerID=59&amp;ChannelID=2&amp;Context=34|check|test&amp;ReturnURL=https://uat.myfatoora.com/ReceiptPOC.aspx&amp;TxnRefNum=000000000020003&amp;UserName=DCS</code></p>

<p>Key: <code>71DD0F73AFFBB47825FF9864DDE95F3B</code>  </p>

<p>Result was <code>409dc622b3bef5c9fc46e45c3210111fcb4536d3a55833316fe0dc8154b3ea34</code></p>

<p>which I thought to be correct. However, the Windows counterpart is generating SHA256 using following code:</p>

<pre><code>Windows Phone Source Code:

public static string HmacSha256(string secretKey, string value)
    {
        var msg = CryptographicBuffer.ConvertStringToBinary(value, BinaryStringEncoding.Utf8);
        byte[] convertedHash = new byte[secretKey.Length / 2];

        for (int i = 0; i &lt; secretKey.Length / 2; i++)
        {
            convertedHash[i] = (byte)Int32.Parse(secretKey.Substring(i * 2, 2), System.Globalization.NumberStyles.HexNumber);
        }

        // Create HMAC.
        var objMacProv = MacAlgorithmProvider.OpenAlgorithm(MacAlgorithmNames.HmacSha256);
        CryptographicHash hash = objMacProv.CreateHash(convertedHash.AsBuffer());

        hash.Append(msg);
        return CryptographicBuffer.EncodeToHexString(hash.GetValueAndReset());

    }
</code></pre>

<p>and the result is: <code>94a20ca39c8487c7763823ec9c918d9e38ae83cb741439f6d129bcdef9edba73</code> which is different from what I got. Can somebody help me with this and let me know what the above code is doing and how can I replicate it in iOS.</p>

<p><strong>Edit:</strong></p>

<pre><code> iOS Source code

 let key = self.md5(string: ""71DD0F73AFFBB47825FF9864DDE95F3B"")

    let hash = HMAC.SHA256(str, key: key)
</code></pre>
","<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-html lang-html prettyprint-override""><code>#import &lt;CommonCrypto/CommonHMAC.h&gt;

+ (NSString *)hmacSHA256EncryptString{


    NSString * parameterSecret = @""input secret key"";
    NSString *plainString = @""input encrypt content string"";
    const char *secretKey  = [parameterSecret cStringUsingEncoding:NSUTF8StringEncoding];
    const char *plainData = [plainString cStringUsingEncoding:NSUTF8StringEncoding];
    unsigned char cHMAC[CC_SHA256_DIGEST_LENGTH];
    CCHmac(kCCHmacAlgSHA256, secretKey, strlen(secretKey), plainData, strlen(plainData), cHMAC);
    NSData *HMACData = [NSData dataWithBytes:cHMAC length:sizeof(cHMAC)];
    const unsigned char *bufferChar = (const unsigned char *)[HMACData bytes];
    NSMutableString *hmacString = [NSMutableString stringWithCapacity:HMACData.length * 2];
    for (int i = 0; i &lt; HMACData.length; ++i){
        [hmacString appendFormat:@""%02x"", bufferChar[i]];
    }
    return hmacString;
    
}</code></pre>
</div>
</div>
</p>
","44563312","732","<ios><windows-phone><sha256><hmac>","1","0","3","2017-06-15 13:01:46","39737481","2","","2227743","","2017-06-15 13:01:46","2016-09-15 05:00:43","","","2017-06-15 09:04:56"
"45320337","Different result HMAC SHA-256 in C++ and PHP","<p>I encode string to base64 and generate HMAC SHA256 with this base64 string.  I encode the result of HMAC(char bytes) to base64.</p>

<p>I use C++: openssl library.</p>

<p>And got a different results in PHP and C++:</p>

<p><strong>C++:</strong></p>

<p><code>JSON: {""req_hash"":""someUniqCodeHash"",""answer"":true}</code></p>

<p><code>BASE64: eyJyZXFfaGFzaCI6InNvbWVVbmlxQ29kZUhhc2giLCJhbnN3ZXIiOnRydWV9</code></p>

<p><code>HMAC: P/p2YlxL8xdhmn+QIAlVLFDS50ai4JE/l1pMMrKZKrE=</code></p>

<p><strong>PHP:</strong></p>

<p><code>JSON: {""req_hash"":""someUniqCodeHash"",""answer"":true}</code></p>

<p><code>BASE64: eyJyZXFfaGFzaCI6InNvbWVVbmlxQ29kZUhhc2giLCJhbnN3ZXIiOnRydWV9</code></p>

<p><code>HMAC: P/p2YlxL8xdhmn+QIAlVLFDS50ai4JE/l1pMMrKZKrE=</code></p>

<p>And if you can see, <strong>HMAC same result</strong>!</p>

<p><code>c++: P/p2YlxL8xdhmn+QIAlVLFDS50ai4JE/l1pMMrKZKrE=</code> </p>

<p><code>php: P/p2YlxL8xdhmn+QIAlVLFDS50ai4JE/l1pMMrKZKrE=</code></p>

<p><strong>But, when I change JSON like this (changed <code>true</code> to <code>false</code>)</strong>:</p>

<p><code>JSON: {""req_hash"":""someUniqCodeHash"",""answer"":false}</code></p>

<p>i got this:</p>

<p><strong>C++:</strong></p>

<p><code>JSON: {""req_hash"":""someUniqCodeHash"",""answer"":false}</code></p>

<p><code>BASE64: eyJyZXFfaGFzaCI6InNvbWVVbmlxQ29kZUhhc2giLCJhbnN3ZXIiOmZhbHNlfQ==</code></p>

<p><code>HMAC: znUOWS2MMLpjIBSpq2GfSNivaL8IUDcZXZs24D0=</code></p>

<p><strong>PHP:</strong></p>

<p><code>JSON: {""req_hash"":""someUniqCodeHash"",""answer"":false}</code></p>

<p><code>BASE64: eyJyZXFfaGFzaCI6InNvbWVVbmlxQ29kZUhhc2giLCJhbnN3ZXIiOmZhbHNlfQ==</code></p>

<p><code>HMAC: znUOWS2MMLpjIBSpq2GfSNivaL8IUDcZXZs24D0AHZA=</code></p>

<p><strong>Why the HMAC result is different?</strong></p>

<p>You can see: </p>

<p><code>C++: znUOWS2MMLpjIBSpq2GfSNivaL8IUDcZXZs24D0=</code></p>

<p><code>PHP: znUOWS2MMLpjIBSpq2GfSNivaL8IUDcZXZs24D0AHZA=</code></p>

<p>In PHP HMAC string added some chars: <code>...AHZA=</code>. 
<strong>What is this?</strong></p>

<p>And my <strong>PHP code</strong>:</p>

<pre><code> &lt;?php
 $b = base64_encode('{""req_hash"":""someUniqCodeHash"",""answer"":false}');
 $hmac =$b.""."".base64_encode(hash_hmac('sha256',$b,'eyJhZGRyZXNzX3RvIjp7JzEnOidjbGll',true));
</code></pre>

<p>My <strong>C++ code</strong>:</p>

<pre><code>std::string sfjson = ""{\""req_hash\"":\""someUniqCodeHash\"",\""answer\"":false}"";
std::cout &lt;&lt; ""JSON: "" &lt;&lt; sfjson &lt;&lt; ""\n"";

std::string fencoded_data = base64_encode_str(sfjson);
std::cout &lt;&lt; ""BASE64: "" &lt;&lt; fencoded_data &lt;&lt; ""\n"";

unsigned char* digest;
std::string key = ""eyJhZGRyZXNzX3RvIjp7JzEnOidjbGll"";

digest = HMAC(EVP_sha256(), reinterpret_cast&lt;const unsigned char*&gt;(key.c_str()), key.length(), reinterpret_cast&lt;const unsigned char*&gt;(fencoded_data.c_str()), fencoded_data.length(), NULL, NULL);

std::string sName(reinterpret_cast&lt;char*&gt;(digest));

std::string hmac_data = base64_encode_str(sName);

std::cout &lt;&lt; ""HMAC: "" &lt;&lt; hmac_data &lt;&lt; ""\n"";
</code></pre>

<p>Base64 from there: <a href=""https://gist.github.com/rustem-art/5f6b510c65bbbfd279386225b978f960"" rel=""nofollow noreferrer"">https://gist.github.com/rustem-art/5f6b510c65bbbfd279386225b978f960</a></p>
","<p>I found the solution! ;)</p>

<p>Never use NULL as:</p>

<pre><code>digest = HMAC(EVP_sha256(),
              reinterpret_cast&lt;const unsigned char*&gt;(key.c_str()), key.length(),
              reinterpret_cast&lt;const unsigned char*&gt;(data.c_str()), data.length(),
              NULL, NULL);
</code></pre>

<p>Use special variable (in my code is: diglen and result) for return function.</p>

<pre><code>unsigned int diglen;

unsigned char result[EVP_MAX_MD_SIZE];

digest = HMAC(EVP_sha256(),
              reinterpret_cast&lt;const unsigned char*&gt;(key.c_str()), key.length(),
              reinterpret_cast&lt;const unsigned char*&gt;(data.c_str()), data.length(),
              result, &amp;diglen);
</code></pre>
","45322729","731","<php><c++><openssl><sha256><hmac>","0","0","1","2017-07-26 09:23:46","45322729","1","","","","","2017-07-26 07:34:07","","","2017-07-26 09:23:46"
"11594587","How to do <xor> in python e.g. enc_price = pad <xor> price","<p>I am new to crypto and I am trying to interpret the below code.  Namely, what does <code>&lt;xor&gt;</code> mean?</p>

<p>I have a secret_key secret key.  I also have a unique_id. I create pad using the below code. </p>

<pre><code>pad = hmac.new(secret_key, msg=unique_id, digestmod=hashlib.sha1).digest()
</code></pre>

<p>Once the pad is created, I have a price e.g. 1000. I am trying to follow this instruction which is pseudocode:</p>

<pre><code>enc_price = pad &lt;xor&gt; price
</code></pre>

<p>In Python, what is the code to implement <code>enc_price = pad &lt;xor&gt; price</code>?  What is the logic behind doing this?</p>

<p>As a note, a complete description of what I want to do here here:
<a href=""https://developers.google.com/ad-exchange/rtb/response-guide/decrypt-price"" rel=""nofollow"">https://developers.google.com/ad-exchange/rtb/response-guide/decrypt-price</a></p>

<p><a href=""https://developers.google.com/ad-exchange/rtb/response-guide/decrypt-price"" rel=""nofollow"">developers.google.com/ad-exchange/rtb/response-guide/decrypt-price</a></p>

<p>Thanks</p>
","<p>You mean ""<a href=""http://docs.python.org/reference/expressions.html#binary-bitwise-operations"" rel=""nofollow"">Binary bitwise operations</a>""?</p>

<blockquote>
  <p>The &amp; operator yields the bitwise AND of its arguments, which must be plain or long integers. The arguments are converted to a common type.</p>
  
  <p>The ^ operator yields the bitwise XOR (exclusive OR) of its arguments, which must be plain or long integers. The arguments are converted to a common type.</p>
  
  <p>The | operator yields the bitwise (inclusive) OR of its arguments, which must be plain or long integers. The arguments are converted to a common type.</p>
</blockquote>

<p>[update]</p>

<p>Since you can't xor a string and a number, you should either:</p>

<ul>
<li>convert the number to a string padded to the same size and xor each byte (may give you all sort of strange ""escape"" problems with some chars, for example, accidentally generating invalid unicode)</li>
<li>use the raw value (20 byte integer?) of the digest to xor and make an hexdigest of the resulting number.</li>
</ul>

<p>Something like this (untested):</p>

<pre><code>pad = hmac.new(secret_key, msg=unique_id, digestmod=hashlib.sha1).digest()
rawpad = reduce(lambda x, y: (x &lt;&lt; 8) + y, 
            [ b for b in struct.unpack('B' * len(pad), pad)])
enc_price = ""%X"" % (rawpad ^ price)
</code></pre>

<p>[update]</p>

<p>The OP wants to implement ""<a href=""https://developers.google.com/ad-exchange/rtb/response-guide/decrypt-price"" rel=""nofollow"">DoubleClick Ad Exchange Real-Time Bidding Protocol</a>"".</p>

<p>This very article tells there are some sample python code available:</p>

<blockquote>
  <p><strong>Initial Testing</strong></p>
  
  <p>You can test your bidding application internally using requester.tar.gz. This is a test python program that sends requests to a bidding application and checks the responses. The program is available on request from your Ad Exchange representative.</p>
</blockquote>
","11594609","731","<python><xor><hmac>","3","0","4","2013-09-30 13:53:19","","4","2","168868","","2013-03-11 18:08:23","2012-07-21 17:56:11","","2012-07-21 18:59:26","2012-07-21 17:59:54"
"11594587","How to do <xor> in python e.g. enc_price = pad <xor> price","<p>I am new to crypto and I am trying to interpret the below code.  Namely, what does <code>&lt;xor&gt;</code> mean?</p>

<p>I have a secret_key secret key.  I also have a unique_id. I create pad using the below code. </p>

<pre><code>pad = hmac.new(secret_key, msg=unique_id, digestmod=hashlib.sha1).digest()
</code></pre>

<p>Once the pad is created, I have a price e.g. 1000. I am trying to follow this instruction which is pseudocode:</p>

<pre><code>enc_price = pad &lt;xor&gt; price
</code></pre>

<p>In Python, what is the code to implement <code>enc_price = pad &lt;xor&gt; price</code>?  What is the logic behind doing this?</p>

<p>As a note, a complete description of what I want to do here here:
<a href=""https://developers.google.com/ad-exchange/rtb/response-guide/decrypt-price"" rel=""nofollow"">https://developers.google.com/ad-exchange/rtb/response-guide/decrypt-price</a></p>

<p><a href=""https://developers.google.com/ad-exchange/rtb/response-guide/decrypt-price"" rel=""nofollow"">developers.google.com/ad-exchange/rtb/response-guide/decrypt-price</a></p>

<p>Thanks</p>
","<p>The binary (I assume that's what you need) <code>xor</code> is <code>^</code> in python:</p>

<pre><code>&gt;&gt;&gt; 6 ^ 12
10
</code></pre>

<p>Binary xor works like this (numbers represented in binary):</p>

<pre><code>     1234

6  = 0110
12 = 1100
10 = 1010
</code></pre>

<p>For every pair of bits, if their sum is <code>1</code> (bits 1 and 3 in my example), the resulting bit is <code>1</code>. Otherwise, it's <code>0</code>.</p>
","11594629","731","<python><xor><hmac>","3","3","4","2013-09-30 13:53:19","","4","2","168868","","2013-03-11 18:08:23","2012-07-21 17:56:11","","","2012-07-21 18:02:33"
"11594587","How to do <xor> in python e.g. enc_price = pad <xor> price","<p>I am new to crypto and I am trying to interpret the below code.  Namely, what does <code>&lt;xor&gt;</code> mean?</p>

<p>I have a secret_key secret key.  I also have a unique_id. I create pad using the below code. </p>

<pre><code>pad = hmac.new(secret_key, msg=unique_id, digestmod=hashlib.sha1).digest()
</code></pre>

<p>Once the pad is created, I have a price e.g. 1000. I am trying to follow this instruction which is pseudocode:</p>

<pre><code>enc_price = pad &lt;xor&gt; price
</code></pre>

<p>In Python, what is the code to implement <code>enc_price = pad &lt;xor&gt; price</code>?  What is the logic behind doing this?</p>

<p>As a note, a complete description of what I want to do here here:
<a href=""https://developers.google.com/ad-exchange/rtb/response-guide/decrypt-price"" rel=""nofollow"">https://developers.google.com/ad-exchange/rtb/response-guide/decrypt-price</a></p>

<p><a href=""https://developers.google.com/ad-exchange/rtb/response-guide/decrypt-price"" rel=""nofollow"">developers.google.com/ad-exchange/rtb/response-guide/decrypt-price</a></p>

<p>Thanks</p>
","<p>The pad, and the plaintext ""price"" are each to be interpreted as a stream of bits. For each corresponding bit in the two streams, you take the ""exclusive OR"" of the pair of bits - if the bits are the same, you emit 0, if the bits are different, you emit 1. This operation is interesting because it's reversible: plaintext XOR pad -> ciphertext, and ciphertext XOR pad -> plaintext. </p>

<p>However, in Python, you won't usually do the XORing yourself because it's tedious and overly complex for a newbie; you want to use a popular encryption library such as <a href=""https://www.dlitz.net/software/pycrypto/"" rel=""nofollow"">PyCrypto</a> to do the work.</p>
","11594649","731","<python><xor><hmac>","3","0","4","2013-09-30 13:53:19","","4","2","168868","","2013-03-11 18:08:23","2012-07-21 17:56:11","","","2012-07-21 18:05:04"
"11594587","How to do <xor> in python e.g. enc_price = pad <xor> price","<p>I am new to crypto and I am trying to interpret the below code.  Namely, what does <code>&lt;xor&gt;</code> mean?</p>

<p>I have a secret_key secret key.  I also have a unique_id. I create pad using the below code. </p>

<pre><code>pad = hmac.new(secret_key, msg=unique_id, digestmod=hashlib.sha1).digest()
</code></pre>

<p>Once the pad is created, I have a price e.g. 1000. I am trying to follow this instruction which is pseudocode:</p>

<pre><code>enc_price = pad &lt;xor&gt; price
</code></pre>

<p>In Python, what is the code to implement <code>enc_price = pad &lt;xor&gt; price</code>?  What is the logic behind doing this?</p>

<p>As a note, a complete description of what I want to do here here:
<a href=""https://developers.google.com/ad-exchange/rtb/response-guide/decrypt-price"" rel=""nofollow"">https://developers.google.com/ad-exchange/rtb/response-guide/decrypt-price</a></p>

<p><a href=""https://developers.google.com/ad-exchange/rtb/response-guide/decrypt-price"" rel=""nofollow"">developers.google.com/ad-exchange/rtb/response-guide/decrypt-price</a></p>

<p>Thanks</p>
","<p>I did it so</p>

<pre><code>def strxor(s1,s2):
    size =  min(len(s1),len(s2))

    res = ''
    for i in range(size):
        res = res + '%c' % (ord(s1[i]) ^ ord(s2[i]))
    return res
</code></pre>
","19096038","731","<python><xor><hmac>","3","0","4","2013-09-30 13:53:19","","4","2","168868","","2013-03-11 18:08:23","2012-07-21 17:56:11","","","2013-09-30 13:53:19"
"33758718","Guacamole with Auth hmac","<p>We try to set up no auth on guacamole but we have some troubles.</p>

<p>Down below, steps we have followed :</p>

<ul>
<li><p>Guacamole 0.9.8 installation through docker with containers :</p>

<ul>
<li>guacamole-0.9.8</li>
<li>mysql</li>
<li>guacd-0.9.8</li>
</ul></li>
<li><p>Guacamole users creation with guacamole interface.</p></li>
<li><p>Adding the script auth hmac from <a href=""https://github.com/aiden0z/guacamole-auth-hmac/"" rel=""nofollow"">https://github.com/aiden0z/guacamole-auth-hmac/</a></p></li>
<li><p>Start file modification on adding properties below :</p>

<p>set_property ""auth-provider"" ""com.stephensugden.guacamole.net.hmac.HmacAuthenticationProvider""</p>

<p>set_property ""secret-key"" ""xxxxxxxxxxxxxxxx""</p>

<p>set_property ""timestamp-age-limit"" ""600000""</p></li>
<li><p>Adding manifest file (guac-manifest.json):</p>

<pre><code>{

   ""guacamoleVersion"" : ""0.9.8"",



   ""name""      : ""HMAC Authentication"",

   ""namespace"" : ""guac-hmac"",



   ""authProviders"" : [

       ""com.stephensugden.guacamole.net.hmac.HmacAuthenticationProvider""

   ]

}
</code></pre></li>
<li><p>Call url guacamole with signed url and parameters below:</p>

<pre><code>id
timestamp
guac.hostname
guac.protocol
guac.usename
guac.password
guac.port
signature
</code></pre></li>
</ul>

<p>This call resulting on white page.</p>

<p>Logs let me things login is correct :</p>

<blockquote>
  <p>15:03:08.026 [http-nio-8080-exec-5] DEBUG
  o.g.g.n.b.rest.auth.TokenRESTService - Login was successful for user
  ""0fd88008-26b9-4003-a310-d3408333e871"".</p>
</blockquote>

<p>However java logs return :</p>

<pre><code>22-Oct-2015 15:03:08.027 SEVERE [http-nio-8080-exec-5] com.sun.jersey.spi.container.ContainerResponse.mapMa
ppableContainerException The exception contained within MappableContainerException could not be mapped to a
 response, re-throwing to the HTTP container
 java.lang.AbstractMethodError: com.stephensugden.guacamole.net.hmac.HmacAuthenticationProvider.getIdentifier()Ljava/lang/String;
        at org.glyptodon.guacamole.net.basic.rest.auth.TokenRESTService.createToken(TokenRESTService.java:510)
        at org.glyptodon.guacamole.net.basic.rest.AuthProviderRESTExceptionWrapper.invoke(AuthProviderRESTExceptionWrapper.java:52)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.lang.reflect.Method.invoke(Method.java:606)
        at com.sun.jersey.spi.container.JavaMethodInvokerFactory$1.invoke(JavaMethodInvokerFactory.java:60)
        at com.sun.jersey.server.impl.model.method.dispatch.AbstractResourceMethodDispatchProvider$TypeOutInvoker._dispatch(AbstractResourceMethodDispatchProvider.java:185)
        at com.sun.jersey.server.impl.model.method.dispatch.ResourceJavaMethodDispatcher.dispatch(ResourceJavaMethodDispatcher.java:75)
        at com.sun.jersey.server.impl.uri.rules.HttpMethodRule.accept(HttpMethodRule.java:302)
        at com.sun.jersey.server.impl.uri.rules.ResourceClassRule.accept(ResourceClassRule.java:108)
        at com.sun.jersey.server.impl.uri.rules.RightHandPathRule.accept(RightHandPathRule.java:147)
        at com.sun.jersey.server.impl.uri.rules.RootResourceClassesRule.accept(RootResourceClassesRule.java:84)
        at com.sun.jersey.server.impl.application.WebApplicationImpl._handleRequest(WebApplicationImpl.java:1511)
        at com.sun.jersey.server.impl.application.WebApplicationImpl._handleRequest(WebApplicationImpl.java:1442)
        at com.sun.jersey.server.impl.application.WebApplicationImpl.handleRequest(WebApplicationImpl.java:1391)
        at com.sun.jersey.server.impl.application.WebApplicationImpl.handleRequest(WebApplicationImpl.java:1381)
        at com.sun.jersey.spi.container.servlet.WebComponent.service(WebComponent.java:416)
        at com.sun.jersey.spi.container.servlet.ServletContainer.service(ServletContainer.java:538)
        at com.sun.jersey.spi.container.servlet.ServletContainer.service(ServletContainer.java:716)
        at javax.servlet.http.HttpServlet.service(HttpServlet.java:725)
        at com.google.inject.servlet.ServletDefinition.doService(ServletDefinition.java:263)
        at com.google.inject.servlet.ServletDefinition.service(ServletDefinition.java:178)
        at com.google.inject.servlet.ManagedServletPipeline.service(ManagedServletPipeline.java:91)
        at com.google.inject.servlet.FilterChainInvocation.doFilter(FilterChainInvocation.java:62)
        at com.google.inject.servlet.ManagedFilterPipeline.dispatch(ManagedFilterPipeline.java:118)
        at com.google.inject.servlet.GuiceFilter.doFilter(GuiceFilter.java:113)
        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239)
        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)
        at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:219)
        at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:106)
        at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:501)
        at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:142)
        at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:79)
        at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:610)
        at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:88)
        at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:516)
        at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1086)
        at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:659)
        at org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler.process(Http11NioProtocol.java:223)
        at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1558)
        at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1515)
        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)
        at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
        at java.lang.Thread.run(Thread.java:745)
</code></pre>

<p>Can someone tell me more about this error ?</p>
","","","724","<authentication><hmac><guacamole>","2","","0","2016-09-24 07:17:33","","0","","5259477","","2015-11-17 14:08:39","2015-11-17 13:54:27","","",""
"36030528","Convert C# HMAC SHA256 to PHP","<p>I've a C# method which I have to convert to PHP. I tried several things, but I still get different results. Unfortunately I cannot change anything on the C# application. It has to be as it is. Maybe one of you could help?</p>

<p><strong>C#:</strong></p>

<pre><code>static public void Main ()
{
    string StringToSign = ""test"";
    string Key = ""123456"";

    //Calculate Signature
    string Signature = CalculateSignature(StringToSign, Key);

    Console.WriteLine (""StringToSign: "" + StringToSign);
    Console.WriteLine (""Key: "" + Key);
    Console.WriteLine (""Signature Caculated: "" + Signature + ""\r\n"");
}

static private string CalculateSignature(String StringToSign, String Key)
{
    Encoding enc = Encoding.GetEncoding(65001);

    byte[] KeyHex = StringHexValuesToByteArray(Key);
    byte[] StringToSign_byte = enc.GetBytes(StringToSign);

    //Check Signature
    HMACSHA256 hmac = new HMACSHA256(KeyHex);
    byte[] hashValue = hmac.ComputeHash(StringToSign_byte);

    return BitConverter.ToString(hashValue).Replace(""-"", """");
}

static public byte[] StringHexValuesToByteArray(string str)
{
    if (str.Length % 2 != 0)
        return null;

    string s = string.Empty;
    byte[] ret = new byte[str.Length / 2];

    for (int run = 0; run &lt; str.Length / 2; run++)
    {
        s = str.Substring(run * 2, 2);
        ret[run] = Convert.ToByte(s, 16);
    }
    return ret;
}
</code></pre>

<p><strong>PHP:</strong></p>

<pre><code>public function send() {

    $stringToSign = 'test';
    $key = '123456';

    //Calculate Signature
    $signature = $this-&gt;calculateSignature($stringToSign, $key);

    print_r(""StringToSign: "" . $stringToSign . PHP_EOL);
    print_r(""Key: "" . $key . PHP_EOL);
    print_r(""Signature Caculated: "" . $signature . PHP_EOL);
}

private function calculateSignature($stringToSign, $key) {

    // check signature
    $hash = strtoupper(hash_hmac('sha256', $stringToSign, $key, false));
    return $hash;
}
</code></pre>

<p>For better understanding, here is the output of the code blocks above:</p>

<p><strong>C#</strong></p>

<blockquote>
  <p>StringToSign: test </p>
  
  <p>Key: 123456 </p>
  
  <p>Signature Caculated:
  DA3617974490FB780F04F06287BF93B0F24A7F15970471146428B943FFDC7850</p>
</blockquote>

<p><strong>PHP</strong></p>

<blockquote>
  <p>StringToSign: test</p>
  
  <p>GroupKey: 123456</p>
  
  <p>Signature Caculated: 9D2BB116E1DF997FFE8A5139FC1D187F976C19579A138414A112BC2E39020EBA</p>
</blockquote>
","<p><strong>If you want to modify the PHP to make it equivalent to C#</strong></p>

<p>Change</p>

<pre><code>$hash = strtoupper(hash_hmac('sha256', $stringToSign, $key, false));
</code></pre>

<p>to</p>

<pre><code>$hash = strtoupper(hash_hmac('sha256', $stringToSign, hex2bin($key), false));
</code></pre>

<p>Be sure to check the code will work for non-ASCII characters like <code>àèéìòù</code>.</p>

<p><a href=""https://ideone.com/5tW6fz"" rel=""nofollow"">ideone here</a>.</p>

<p><strong>If you want to modify the C# code to make it equivalent to PHP</strong></p>

<p>You are complicating everything:</p>

<pre><code>static private string CalculateSignature(String stringToSign, String key)
{
    byte[] key_byte = Encoding.UTF8.GetBytes(key);
    byte[] stringToSign_byte = Encoding.UTF8.GetBytes(stringToSign);

    //Check Signature
    HMACSHA256 hmac = new HMACSHA256(key_byte);
    byte[] hashValue = hmac.ComputeHash(stringToSign_byte);

    return BitConverter.ToString(hashValue).Replace(""-"", """");
}
</code></pre>

<p>There is nothing hex. And instead of using <code>Encoding.GetEncoding(65001)</code> it is normally better to use <code>Encoding.UTF8</code>, because it is clearer for everyone.</p>

<p>Note that there could be problems with the encoding. Try calculating the hmac of something like <code>àèéìòù</code> to see which encoding the PHP is using.</p>
","36030632","723","<c#><php><sha256><hmac>","1","1","1","2016-03-16 09:09:06","36030632","0","0","4991113","","2016-03-16 08:56:37","2016-03-16 08:43:00","","2016-03-16 09:09:06","2016-03-16 08:48:10"
"12021384","Endianness of HMAC-SHA code","<p>I am transmitting AES messages.  My understanding is that:  1. The AES algorithm treats messages as byte-wise and is endian-neutral.  2. The Initialization Vector is endian-neutral as far as transmission and reception is concerned.</p>

<p>I am also calculating an HMAC-SHA384 code for the message.  From my reading it sounds as though HMAC-SHA384 <strong>does</strong> need byte-swapping if the transmission endianness (big-endian in my case) does not match machine endianness.  The swapping should occur from byte 0 and 47, 1 and 46, so on?  Can anyone more knowledgeable in the subject than I confirm or contradict this please?</p>

<p>I am presently using the .NET HMACSHA384 class, but on the other end I will be writing C++ code and don't yet know what library will provide the HMAC code.</p>
","<p>leppie is right, both are send as byte arrays. And you can be pretty sure that the byte array received will conform to NIST specifications and test vectors. So you should not overly worry about endianness in this case.</p>

<p>If there are people that need to worry then it is the implementors of the hash function. E.g. NIST unfortunately specified a little endian machine (Intel processor) as reference platform for SHA-3. The first version of Skein had incorrect test vectors because of a bug regarding endianness in the first iteration (1.0).</p>
","12021643","715","<encryption><sha><hmac><endianness>","2","0","1","2012-08-18 19:30:47","12021643","2","","","","","2012-08-18 18:57:44","","","2012-08-18 19:30:47"
"18241003","How do I write this Objective-C Hmac signature function in Java (Android)?","<p>I am porting part of an iOS app to Android, and I'm having trouble porting the following signature generating code in iOS to Android. The iOS code is:</p>

<pre><code>+ (NSString *)hashedBase64ValueOfData:(NSString *) data WithSecretKey:(NSString*)secret {
    // ascii convirsion
    const char *cKey  = [secret cStringUsingEncoding:NSASCIIStringEncoding];
    const char *cData = [data cStringUsingEncoding:NSASCIIStringEncoding];

    // HMAC Data structure initializtion
    unsigned char cHMAC[CC_SHA256_DIGEST_LENGTH];
    CCHmac(kCCHmacAlgSHA256, cKey, strlen(cKey), cData, strlen(cData), cHMAC);

    // Gerating hased value
    NSData *da =  [[NSData alloc] initWithBytes:cHMAC length:sizeof(cHMAC)];

    return [da base64EncodedString];// conversion to base64 string &amp; returns
}
</code></pre>

<p>The Android Java code I have written and tried is:</p>

<pre><code>private static String hashedBase64ValueOfDataWithSecretKey(String data, String secret) {
    try {
        SecretKeySpec signingKey = new SecretKeySpec(secret.getBytes(), HMAC_SHA1_ALGORITHM);
        Mac mac = Mac.getInstance(HMAC_SHA1_ALGORITHM);
        mac.init(signingKey);
        byte[] rawHmac = mac.doFinal(data.getBytes());
        return Base64.encodeToString(rawHmac, 0);

    } catch (Exception e) {
        e.printStackTrace();
    }

    return null;
}
</code></pre>

<p>Upon testing, the Android function is not outputting the same thing as the iOS function (given the same input), and I'm not sure why. </p>
","<p>You might use extras org.apache.commons.codec.binary.Base64. Google it and find it, then you can fellow the codes below. I think the hashed value will be generated by ""private key"" and appended behind a ""public key"" being sent to server with a ""http-head"" together. If no, you can just remove them. Anyway the codes might give you some suggestions. :)</p>

<pre><code>private String getAppendedHeader(String str) {
    try {
        String hash = getHash(str);

        String signature = new String(Base64.encodeBase64(hash.getBytes()));
        StringBuilder sb = new StringBuilder();
        sb.append(PUBLIC_KEY).append(' ').append(signature);
        return sb.toString();
    } catch (NoSuchAlgorithmException _e) {
        LL.e(""Get mac error: "" + _e.getMessage());
        return null;
    } catch (InvalidKeyException _e) {
        LL.e(""Init mac error: "" + _e.getMessage());
        return null;
    }
}


private String getHash(String str) throws NoSuchAlgorithmException, InvalidKeyException {
    Mac mac = Mac.getInstance(""HmacSHA256"");
    SecretKeySpec secret = new SecretKeySpec(PRIVATE_KEY.getBytes(), ""HmacSHA256"");
    mac.init(secret);
    byte[] digest = mac.doFinal(str.getBytes());
    BigInteger hash = new BigInteger(1, digest);
    String hmac = hash.toString(16);
    if (hmac.length() % 2 != 0) {
        hmac = ""0"" + hmac;
    }
    return hmac;
}
</code></pre>
","18241416","715","<java><android><digital-signature><hmac>","2","0","2","2013-08-14 20:17:57","18241471","0","4","","","","2013-08-14 19:51:35","","","2013-08-14 20:14:49"
"18241003","How do I write this Objective-C Hmac signature function in Java (Android)?","<p>I am porting part of an iOS app to Android, and I'm having trouble porting the following signature generating code in iOS to Android. The iOS code is:</p>

<pre><code>+ (NSString *)hashedBase64ValueOfData:(NSString *) data WithSecretKey:(NSString*)secret {
    // ascii convirsion
    const char *cKey  = [secret cStringUsingEncoding:NSASCIIStringEncoding];
    const char *cData = [data cStringUsingEncoding:NSASCIIStringEncoding];

    // HMAC Data structure initializtion
    unsigned char cHMAC[CC_SHA256_DIGEST_LENGTH];
    CCHmac(kCCHmacAlgSHA256, cKey, strlen(cKey), cData, strlen(cData), cHMAC);

    // Gerating hased value
    NSData *da =  [[NSData alloc] initWithBytes:cHMAC length:sizeof(cHMAC)];

    return [da base64EncodedString];// conversion to base64 string &amp; returns
}
</code></pre>

<p>The Android Java code I have written and tried is:</p>

<pre><code>private static String hashedBase64ValueOfDataWithSecretKey(String data, String secret) {
    try {
        SecretKeySpec signingKey = new SecretKeySpec(secret.getBytes(), HMAC_SHA1_ALGORITHM);
        Mac mac = Mac.getInstance(HMAC_SHA1_ALGORITHM);
        mac.init(signingKey);
        byte[] rawHmac = mac.doFinal(data.getBytes());
        return Base64.encodeToString(rawHmac, 0);

    } catch (Exception e) {
        e.printStackTrace();
    }

    return null;
}
</code></pre>

<p>Upon testing, the Android function is not outputting the same thing as the iOS function (given the same input), and I'm not sure why. </p>
","<p>Not an expert at this, but <code>NSASCIIStringEncoding</code> seems to imply that you want <code>data</code> and <code>secret</code> interpreted as ASCII, whereas <code>String.getBytes()</code> uses the default character set by default (i.e. UTF-8).</p>

<p>You probably need to <a href=""https://stackoverflow.com/questions/5688042/how-to-convert-a-java-string-to-an-ascii-byte-array"">use a different charset</a>:</p>

<pre><code>data.getBytes(StandardCharsets.US_ASCII);
secret.getBytes(StandardCharsets.US_ASCII);
</code></pre>

<p>For Java pre-1.7, you'll need to use this and catch the <code>UnsupportedEncodingException</code>:</p>

<pre><code>data.getBytes(""US-ASCII"");
secret.getBytes(""US-ASCII"");
</code></pre>
","18241471","715","<java><android><digital-signature><hmac>","2","2","2","2013-08-14 20:17:57","18241471","0","4","","","","2013-08-14 19:51:35","","2017-05-23 11:43:59","2013-08-14 20:17:57"
"42327958","Make a custom apache module hook into every requests?","<p>For a project , i needed HMAC authentication at apache level. So i extended the mod_example explained <a href=""https://httpd.apache.org/docs/2.4/developer/modguide.html"" rel=""nofollow noreferrer"">here</a> up to this point:</p>

<pre><code>module AP_MODULE_DECLARE_DATA   hmac_module =
        {
                STANDARD20_MODULE_STUFF,
                NULL,            // Per-directory configuration handler
                NULL,            // Merge handler for per-directory configurations
                NULL,            // Per-server configuration handler
                NULL,            // Merge handler for per-server configurations
                NULL,            // Any directives we may have for httpd
                register_hooks   // Our hook registering function
        };


/* register_hooks: Adds a hook to the httpd process */
static void register_hooks(apr_pool_t *pool)
{

    /* Hook the request handler */
    ap_hook_handler(hmac_handler, NULL, NULL,APR_HOOK_REALLY_FIRST);
}

static int hmac_handler(request_rec *r)
{
    // ...
    // some variable definition
    // ...

    // Check that the ""hmac-handler"" handler is being called.
    if (!r-&gt;handler || strcmp(r-&gt;handler, ""hmac-handler"")) return (DECLINED);

    ap_args_to_table(r, &amp;GET);
    ap_parse_form_data(r, NULL, &amp;POST, -1, 8192);

    timestamp = apr_table_get(r-&gt;headers_in, ""X-EPOCH"");
    claimedHash = apr_table_get(r-&gt;headers_in, ""X-HMAC"");
    if (!timestamp){
        ap_log_rerror(APLOG_MARK,APLOG_ERR,HTTP_FORBIDDEN,r,""Timestamp does not exits in request"");
        return HTTP_FORBIDDEN;
    }
    if(!claimedHash){
        ap_log_rerror(APLOG_MARK,APLOG_ERR,HTTP_FORBIDDEN,r,""There is no claimed hash in the request!"");
        return HTTP_FORBIDDEN;
    }

    //...
    // calculate timestamp's sha1 hash
    //...

    if(strcmp(claimedHash,encoded)){
        ap_log_rerror(APLOG_MARK,APLOG_ERR,HTTP_FORBIDDEN,r,""Claimed hash and digested values does not match,Claimed:%s , Target:%s"",claimedHash,encoded);
        return HTTP_FORBIDDEN;
    }

    // Let Apache know that we responded to this request.
    return OK;
}
</code></pre>

<p>Now, I need to hook this module in apache before it process it further in order to check this request is authenticated or not. </p>

<p>I know that <code>APR_HOOK_REALLY_FIRST</code> parameter in <code>ap_hook_handler</code> function make apache to execute this handler before any other handlers.</p>

<p>But i need to know how to make this handler to execute before ANY requests that happen within a specific directory.</p>
","<p>I finally figured it out my-self. Instead of registering hook at handler phase, I should've registered my module in earlier phase: access_checker.</p>

<p>The final code is available at <a href=""https://github.com/hats0n/apache-hmac-module/"" rel=""nofollow noreferrer"">github</a> if anyone is interested.</p>
","42350889","715","<c><apache><module><hmac>","1","1","1","2017-02-20 17:30:14","42350889","0","","","","","2017-02-19 13:44:18","","","2017-02-20 17:30:14"
"5873332","Is Perl Data::UUID a strong symmetric key source?","<p>I'm considering using Data::UUID Perl module to generate a 256 bit symmetric key for use with the HMAC_SHA256 algorithm. Each call should give me a unique string of 128 bits so I'm thinking of doing something like the following:</p>

<p><code>use Data::UUID;</code></p>

<p><code>my $ug    = new Data::UUID;</code></p>

<p><code>my $uuid1 = $ug-&gt;to_hexstring($ug-&gt;create());</code></p>

<p><code>my $uuid2 = $ug-&gt;to_hexstring($ug-&gt;create());</code></p>

<p><code>my $256_bit_key = $uuid1 . $uuid2;</code></p>

<p>Is this key cryptographically strong?</p>
","<p>No.</p>

<p>Use <a href=""http://search.cpan.org/perldoc?Crypt%3a%3aOpenSSL%3a%3aRandom"" rel=""nofollow"">Crypt::OpenSSL::Random</a> or another crypto-strong random number generator.</p>

<p>To be more precise, you can get some bytes from the CRNG, convert them into an ASCII string, and then use that to do the hash against.</p>
","5873383","706","<perl><key><sha1><uuid><hmac>","1","6","1","2011-05-03 18:28:50","","0","","","","","2011-05-03 17:31:10","","2011-05-03 18:28:50","2011-05-03 17:35:29"
"26287101","Generate Hmac in Javascript from python code","<p>I am trying to generate an hmac hash in javascript. </p>

<p>here is some python code I want to replicate in Javascript:</p>

<pre><code>mac = hmac.new(""33fsfsdgvwrg2g223f4f42gf4f34f43f"", digestmod=hashlib.sha1)
mac.update(method)
mac.update(url)
mac.update(data)
mac.update(str(timestamp))

r = requests.request(method, url, data=data, headers={
    'Content-Type': 'application/json',
    'Authorization': "" signature=""'mac.hexdigest()'"" "",
})
</code></pre>

<p>This is what I have so far, and it does not seem to be what I need:</p>

<pre><code>var message = ""shah me"";
var secret = ""33fsfsdgvwrg2g223f4f42gf4f34f43f"";
var crypto = CryptoJS.HmacSHA1(message, secret).toString(CryptoJS.enc.Base64);

var shaObj = new jsSHA('shah me', ""ASCII"");
var jssha = shaObj.getHMAC('33fsfsdgvwrg2g223f4f42gf4f34f43f', ""ASCII"", ""SHA-1"", ""B64"");
</code></pre>
","<p>It looks like your ""current solution"" is just a copy paste of <a href=""https://stackoverflow.com/questions/13671632/jssha-cryptojs-and-openssl-libraries-giving-different-results"">jsSHA, CryptoJS and OpenSSL libraries giving different results</a> with your key substituted in.</p>

<p>Anyways, you don't need to use both CryptoJS and jsSHA. You should pick one and stick with it.</p>

<p>According to <a href=""https://docs.python.org/2/library/hmac.html#hmac.HMAC.update"" rel=""nofollow noreferrer"">the docs</a>, the python mac.update function is equivalent to appending data to the message. I believe this is the key to your problems, since neither CryptoJS nor jsSHA have an equivalent update function but instead expect you to have the full message to begin with.</p>

<p>The following Python code and the Javascript code that follows it are equivalent:</p>

<pre><code>import hashlib
import hmac

method = 'method'
url = 'url'
data = 'data'
timestamp = 'timestamp'

mac = hmac.new(""33fsfsdgvwrg2g223f4f42gf4f34f43f"", digestmod=hashlib.sha1)
mac.update(method)
mac.update(url)
mac.update(data)
mac.update(timestamp)

print mac.hexdigest()
</code></pre>

<p>Here is the Javascript:</p>

<pre><code>&lt;script src=""sha.js""&gt;&lt;/script&gt;
&lt;script&gt;
  var secret = '33fsfsdgvwrg2g223f4f42gf4f34f43f';
  var message = 'methodurldatatimestamp';
  var shaObj = new jsSHA(message, ""ASCII"");
  document.write(shaObj.getHMAC(secret, ""ASCII"", ""SHA-1"", ""HEX""));
&lt;/script&gt;
</code></pre>

<p>Note that the Javascript code puts the full message (<code>'methodurldatatimestamp'</code>) in the jsSHA constructor. I believe this is the key to your problem. Hope this helps!</p>
","26289093","706","<javascript><python><hmac><hmacsha1>","0","2","1","2014-10-09 22:38:37","26289093","0","","1979087","","2014-10-09 20:28:22","2014-10-09 20:08:04","","2017-05-23 12:07:59","2014-10-09 22:38:37"
"24399465","Perl hmac sha256 different than PHP's using pack","<p>I have to create a hash in Perl using SHA256 HMAC like this PHP example:</p>

<pre><code>&lt;?php
$key = pack('H*','THIS_IS_KEY');
$str ='THIS IS DE ENCODED STRING';
echo strtoupper(hash_hmac('sha256',$str, $key));
?&gt;
</code></pre>

<p>I get:
601B7C81389A37FC83C05275138280E8788CF9108528BC75D5C09CEA75904D5E</p>

<p>But if I do the same in a Perl script:</p>

<pre><code>use Digest::SHA qw(hmac_sha256_hex);
my $key = pack('H*','THIS_IS_KEY');
my $str ='THIS IS DE ENCODED STRING';
print uc(hmac_sha256_hex($str, $key));
exit;
</code></pre>

<p>I get:
C683FD81DEFB7CDA3C031F5280682E80851FDC246310DB8C44057BC6364454E0</p>

<p>If I don't pack key neither Perl or PHP I get the same result, unfortunately I have to generate Perl exactly the same result as the example using PHP ""pack"".</p>

<p>I would appreciate if someone can help me find a solution.</p>

<p>Thanks in advance</p>

<p>Welch</p>
","<p>The code doesn't understand how the <code>pack()</code> function actually works. The key is what is different between the PHP and Perl scripts, so let's reduce it to just that calculation. Here's a simpler PHP program:</p>

<pre><code>&lt;?php
  $key = pack('H*', 'THIS_IS_KEY');
  echo $key;
?&gt;
</code></pre>

<p>If we echo that into <code>php | hexdump</code>, we get:</p>

<pre><code>00000000 0000 0000 000e
</code></pre>

<p>Here's a similar Perl program:</p>

<pre><code>my $key = pack('H*', 'THIS_IS_KEY');
print $key;
</code></pre>

<p>And if we echo that into <code>perl | hexdump</code>, we get:</p>

<pre><code>0000000 2cd1 cff2 204e
</code></pre>

<p>Those are two significantly different keys. In both cases, the <code>pack()</code> call is using an <code>H*</code> format, which means that <code>pack()</code> is expecting to receive an unbounded hex string (a string containing hexadecimal characters 0-9A-F). The problem is that <code>'THIS_IS_KEY'</code> is not a sequence of hex values (with the exception of the 'E'). If you run the test code through the <code>php</code> binary itself, you'll also see these lines:</p>

<pre><code>PHP Warning:  pack(): Type H: illegal hex digit T in - on line 2
PHP Warning:  pack(): Type H: illegal hex digit H in - on line 2
PHP Warning:  pack(): Type H: illegal hex digit I in - on line 2
PHP Warning:  pack(): Type H: illegal hex digit S in - on line 2
PHP Warning:  pack(): Type H: illegal hex digit _ in - on line 2
PHP Warning:  pack(): Type H: illegal hex digit I in - on line 2
PHP Warning:  pack(): Type H: illegal hex digit S in - on line 2
PHP Warning:  pack(): Type H: illegal hex digit _ in - on line 2
PHP Warning:  pack(): Type H: illegal hex digit K in - on line 2
PHP Warning:  pack(): Type H: illegal hex digit Y in - on line 2
</code></pre>

<p>Note that it's every character except for 'E' that throws an error, and note that in your hex output, every character gets converted to a null nibble <em>except</em> for 'E'. Perl actually tries to make something of nonsense characters and converts them to some sort of representation it can use (e.g. 'K' becomes 4, which kind of makes sense since it's the 5th character after F, which would correspond to 14 in hex). Anyway, it's undefined what the behavior should be passed a string that doesn't match the format.</p>

<p>So, what are your solutions?</p>

<p>Well, if you really need to keep <code>'THIS_IS_KEY'</code> as your key, then the equivalent Perl key is <code>'000000000E0'</code>. If your example key is only a representation of the key value, generally replace the non-hex characters from the PHP key with '0' in the Perl script. PHP appears to be treating non-hex characters as '0' in the hex string.</p>

<p>As for a real solution, either convert your string key to a hex representation or use a straight hex value as your key before passing to <code>pack()</code>. I don't know the details of the key selection or why the ""key"" is being packed anyway. The SHA256 portion of the code just takes a byte-string as the key. It could be a straight ASCII key as far as it's concerned, as long as both scripts use the same sequence of bytes.</p>
","24771812","705","<perl><hmac><sha256><digest>","3","1","1","2014-07-16 03:39:44","24771812","3","0","3302863","","2014-06-25 12:53:25","2014-06-25 02:55:25","","","2014-07-16 03:39:44"
"44545577","HMAC and SHA256 - how to validate using nonce","<p>Im trying to integrate with a Web API. Looking at how they use SHA256 and HMAC to generate their signature.  However they also use whats known as an ""nonce"", which I had to look up.  This api generates the ""signature"" using a secret that both of us know, combined with the url of the request.</p>

<p>So, do I use the same nonce they are using to generate a signature on my end to do the validation with?</p>

<p>Im looking at a sample of how they are generating their signature like this on the client end.</p>

<pre><code>        var message = ""https://my.server.com/new-callback?reqID=test&amp;nonce=8cf95201-4d3c-4397-9117-d7ee6ad89d93"";
        var secret = ""g394g732vhsdfiv34"";
        var hash = CryptoJS.HmacSHA256(message, secret);
        var signature = hash.toString(CryptoJS.enc.Base64); 

result of signature...
</code></pre>

<p><br/>
    // ihyCCfTHog7TDQYT4tQM5ISYSjEIaChSeJmIo3UMa+U= <br/></p>

<p>However, I dont get the same result using this tool <br/>
<a href=""http://www.freeformatter.com/hmac-generator.html"" rel=""nofollow noreferrer"">http://www.freeformatter.com/hmac-generator.html</a></p>

<p>So to validate this on my end (within the api), I need to use the same inputs to compute the signature and then simply compare the resulting strings, correct?  </p>

<p>What purpose does this ""nonce"" component serve?  From what Ive read, it more or less serves the same purpose as a GUID.</p>

<p>What am I missing?</p>
","<p>The output I get from <a href=""http://www.freeformatter.com/hmac-generator.html"" rel=""nofollow noreferrer"">http://www.freeformatter.com/hmac-generator.html</a> is hex encoded and the value you provided (<code>ihyCCfTHog7TDQYT4tQM5ISYSjEIaChSeJmIo3UMa+U=</code>) is <a href=""https://en.wikipedia.org/wiki/Base64"" rel=""nofollow noreferrer"">base64</a> encoded.</p>

<p>If you decode the base64 encoded message, convert it to hex and compare it to the result from freeformatter (which is <code>8a1c8209f4c7a20ed30d0613e2d40ce484984a3108682852789988a3750c6be5</code>) - they both match. You might be interested in <a href=""https://stackoverflow.com/a/12987042/3906760"">https://stackoverflow.com/a/12987042/3906760</a> for conversion functions.</p>

<p>And yes: You compute the HMAC on both sides and compare the result. If it matches (no no one else knows the secret) you're safe.</p>

<p>The nonce is a random value in order to prevent replay-attacks (cf. <a href=""https://en.wikipedia.org/wiki/Cryptographic_nonce"" rel=""nofollow noreferrer"">https://en.wikipedia.org/wiki/Cryptographic_nonce</a>).</p>
","44545766","698","<javascript><sha256><hmac>","-1","1","1","2017-06-14 13:15:06","44545766","0","","3906760","","2017-06-14 13:15:06","2017-06-14 13:00:44","","2017-06-14 13:13:52","2017-06-14 13:08:43"
"46946106","HMAC SHA256 base64 encoded","<p>There is a Node.JS code which creates a signature for Azure.</p>

<pre><code>var signature = crypto.createHmac(""sha256"", key).update(body).digest(""base64"");  
</code></pre>

<p>How can I create the same signature using LUA. (I think I need to use Lua-Lockbox for this)</p>

<p><a href=""https://github.com/somesocks/lua-lockbox"" rel=""nofollow noreferrer"">https://github.com/somesocks/lua-lockbox</a></p>

<p>I can see it has Hmac, sha256 and base64 primitives but I'm not sure how I can implement this code as LUA</p>

<p>Is there any clue?</p>
","<p>I don't know lua-lockbox, but it looks like this should work:</p>

<pre><code>local stream = require ""lockbox.util.stream""
local hmac = require ""lockbox.mac.hmac""
local sha256 = require ""lockbox.digest.sha2_256""
local base64 = require ""lockbox.util.base64""

local body = stream.fromString(""thisisthebody"")
local key = {(""thekey""):byte(1,-1)}

local digest = hmac()
    .setBlockSize(64)
    .setDigest(sha256)
    .setKey(key)
    .init()
    .update(body)
    .finish()
    .asBytes()

local base64_digest = base64.fromArray(digest)

print(base64_digest)
</code></pre>
","46972321","690","<lua><base64><sha256><hmac>","0","1","1","2018-03-21 20:57:56","","0","","","","","2017-10-26 04:55:07","","","2017-10-27 09:55:09"
"22820803","Canonical serialization of object","<p>I am looking to transfer an object securely between two servers transitively by use of a 3rd party.  </p>

<p>Both servers and the 3rd party know the structure of the object, and it is up to the 3rd party to format the object (it may be json, xml, form-encoding, etc.).</p>

<pre><code>class MyObject
{
    public int Id { get; set; }
    public string Name { get; set; }
    public int Age { get; set; }
}
</code></pre>

<p>There are many possible representations of this object which will cause problems if I try calculate the HMAC of it.</p>

<p>The following two representations are equivalent from the objects perspective, however, will produce completely different HMAC values:</p>

<p>JSON</p>

<pre><code>{""Id"":12345,Name:""Steve McQueen"",Age:52}
</code></pre>

<p>JSON (but in different order</p>

<pre><code>{Age:52,""Id"":12345,Name:""Steve McQueen""}
</code></pre>

<p>Form Encoding</p>

<pre><code>Age=52&amp;Name=Steve%20McQueen&amp;Id=12345
</code></pre>

<p>Is there any serialization built into .NET that takes the order of the fields into consideration?</p>

<p>I was thinking of using <a href=""http://msdn.microsoft.com/en-us/library/system.runtime.serialization.formatters.binary.binaryformatter%28v=vs.110%29.aspx"" rel=""nofollow"">BinaryFormatter</a>, however, I didn't see any guarantee that if you formatted the same object twice that it would result in the same binary output.  The same can be said for the <code>JavaScriptSerializer</code>, or any other serializer, presumably because order is not relevant to their intended function (which is for serialization, not verification).</p>
","<p>My solution to this was to just serialize it (to say json) and then just hmac the serialized data.</p>

<p>The hmac will only work on the json that was provided.</p>

<p>Trying to get 2 systems to serialize exactly the same is not realistic.</p>
","24784289","685","<c#><.net><security><validation><hmac>","0","0","2","2014-07-16 15:22:03","24784289","5","","","","","2014-04-02 19:10:00","","","2014-07-16 15:07:32"
"22820803","Canonical serialization of object","<p>I am looking to transfer an object securely between two servers transitively by use of a 3rd party.  </p>

<p>Both servers and the 3rd party know the structure of the object, and it is up to the 3rd party to format the object (it may be json, xml, form-encoding, etc.).</p>

<pre><code>class MyObject
{
    public int Id { get; set; }
    public string Name { get; set; }
    public int Age { get; set; }
}
</code></pre>

<p>There are many possible representations of this object which will cause problems if I try calculate the HMAC of it.</p>

<p>The following two representations are equivalent from the objects perspective, however, will produce completely different HMAC values:</p>

<p>JSON</p>

<pre><code>{""Id"":12345,Name:""Steve McQueen"",Age:52}
</code></pre>

<p>JSON (but in different order</p>

<pre><code>{Age:52,""Id"":12345,Name:""Steve McQueen""}
</code></pre>

<p>Form Encoding</p>

<pre><code>Age=52&amp;Name=Steve%20McQueen&amp;Id=12345
</code></pre>

<p>Is there any serialization built into .NET that takes the order of the fields into consideration?</p>

<p>I was thinking of using <a href=""http://msdn.microsoft.com/en-us/library/system.runtime.serialization.formatters.binary.binaryformatter%28v=vs.110%29.aspx"" rel=""nofollow"">BinaryFormatter</a>, however, I didn't see any guarantee that if you formatted the same object twice that it would result in the same binary output.  The same can be said for the <code>JavaScriptSerializer</code>, or any other serializer, presumably because order is not relevant to their intended function (which is for serialization, not verification).</p>
","<p>Yes, there are <a href=""http://msdn.microsoft.com/en-us/library/ms733127%28v=vs.110%29.aspx"" rel=""nofollow"">Data Contracts</a>!<br>
Specifically, the <a href=""http://msdn.microsoft.com/en-us/library/system.runtime.serialization.datamemberattribute%28v=vs.110%29.aspx"" rel=""nofollow"">DataMemberAttribute</a> has an Order property:<br>
""Gets or sets the order of serialization and deserialization of a member.""</p>
","24784586","685","<c#><.net><security><validation><hmac>","0","0","2","2014-07-16 15:22:03","24784289","5","","","","","2014-04-02 19:10:00","","","2014-07-16 15:22:03"
"30543553","API Keys for REST","<p>So I'm developing a RESTful API, but I can't for the life of me understand how API keys work. I'm using PHP, which has an HMAC function, which I've read is a good way to sign requests, but what I don't understand is as follows.</p>

<p>I'm not suppose to send the API key to the client, but the client with HMAC is suppose to take the message, which is usually an array of elements involved in the request and the API key. How is the user/client expected to make a signature including the API key if the user isn't supposed to have the API key?</p>
","<p>Have a look at how this is handled by companies who use APIs extensively. A good example is <a href=""https://developers.google.com/identity/protocols/OAuth2"" rel=""nofollow"">Google</a> or <a href=""https://www.dropbox.com/developers/core/start/php"" rel=""nofollow"">Dropbox</a>.</p>

<p>You will see that there is at some point some information you have to </p>

<ul>
<li>either get from some place (in the case of Google - <a href=""https://console.developers.google.com"" rel=""nofollow"">the API Console</a>) and use as part of the authentication (this is typically the key you are mentioning); this is usually used for application-to-application communication</li>
<li>or use a user-based authentication protocol like <a href=""https://en.wikipedia.org/wiki/OAuth"" rel=""nofollow"">oAuth</a>.</li>
</ul>

<p>In your case the way to go is oAuth, where users do not store anything themselves (there is a cookie stored for them but they are not aware of that). You can then use third-party systems (Google, Twitter, LinkedIn, ...) to handle the authentication on your behalf.</p>
","30543554","683","<hash><php><rest><hmac>","2","1","3","2015-05-30 07:30:41","30543556","9","","","","","2015-05-29 00:03:43","","","2015-05-29 06:49:28"
"30543553","API Keys for REST","<p>So I'm developing a RESTful API, but I can't for the life of me understand how API keys work. I'm using PHP, which has an HMAC function, which I've read is a good way to sign requests, but what I don't understand is as follows.</p>

<p>I'm not suppose to send the API key to the client, but the client with HMAC is suppose to take the message, which is usually an array of elements involved in the request and the API key. How is the user/client expected to make a signature including the API key if the user isn't supposed to have the API key?</p>
","<p>The API Key is usually used to identify the environment/privilages for a particular user in a multi tenant environment.</p>

<p>say, you have an application where you have three customers A,B and C. all the three customers have completely different settings/ use different features etc. </p>

<p>Now say, if you want to create a new user under customer C, the unique API key for customer C will be used to identify the settings/resources/environment/privilages for the users under C.</p>
","30543555","683","<hash><php><rest><hmac>","2","1","3","2015-05-30 07:30:41","30543556","9","","","","","2015-05-29 00:03:43","","","2015-05-29 10:54:26"
"30543553","API Keys for REST","<p>So I'm developing a RESTful API, but I can't for the life of me understand how API keys work. I'm using PHP, which has an HMAC function, which I've read is a good way to sign requests, but what I don't understand is as follows.</p>

<p>I'm not suppose to send the API key to the client, but the client with HMAC is suppose to take the message, which is usually an array of elements involved in the request and the API key. How is the user/client expected to make a signature including the API key if the user isn't supposed to have the API key?</p>
","<p>So unless I'm mistaken, I was misunderstanding the inherent concept of API keys, in that, I should be able to give the API key to a user who has authenticated their username and password and work with the key from there. I assume this isn't even the safest or best way, but after implementing HTTPS as mentioned by Parth Shah, I think most of my problems will be avoided and I can begin implementing the start of a basic authentication procedure for my API calls in which I will not be receiving the username and password.</p>
","30543556","683","<hash><php><rest><hmac>","2","0","3","2015-05-30 07:30:41","30543556","9","","","","","2015-05-29 00:03:43","","","2015-05-29 18:19:25"
"8786802","Convert C# hashing function into PHP","<p>I have the following function in C#, a hashing function which I need converted into PHP. I've tried a few things in PHP but I don't get the same results (I'm not at all good with .NET)</p>

<pre><code>private static string GetSignature(string args, string privatekey)
{
    var encoding = new System.Text.ASCIIEncoding();
    byte[] key = encoding.GetBytes(privatekey);
    var myhmacsha256 = new HMACSHA256(key);
    byte[] hashValue = myhmacsha256.ComputeHash(encoding.GetBytes(args));
    string hmac64 = Convert.ToBase64String(hashValue);
    myhmacsha256.Clear();
    return hmac64;
} 
</code></pre>

<p>One (wrong) attempt in PHP is this:</p>

<pre><code>function encode($data,$key)
{
    return base64_encode( hash_hmac('sha256', $data, $key ) );
}
</code></pre>

<p><strong>The ANSWER</strong></p>

<p>A slight variation of what was suggested below by DampeS8N worked for me. </p>

<pre><code>function encode($data,$key)
{
    iconv_set_encoding(""input_encoding"", ""ASCII"");
    iconv_set_encoding(""internal_encoding"", ""ASCII"");
    iconv_set_encoding(""output_encoding"", ""ASCII"");

    return base64_encode( hash_hmac('sha256', $data, $key, true ) );
}
</code></pre>

<p>Please also not the fourth parameter of hash_hmac - now set to true for raw output as binary data</p>
","<p>I suspect the very first line of your .net code is the culprit. PHP <a href=""http://kore-nordmann.de/blog/php_charset_encoding_FAQ.html#which-charset-encoding-do-strings-have-in-php"" rel=""nofollow"">has no encoding for the string</a> itself and so when it comes time to hash it either is hashing the internal PHP string format's bytes (unlikely, can someone else confirm?) or more than likely is converting to something else first. In this case probably unicode which is decidedly not the same bytes that the string would be in ASCII as .net is requesting.</p>

<p>My advice would be to ensure that PHP is also using ASCII, <a href=""http://www.php.net/manual/en/function.iconv.php"" rel=""nofollow"">with iconv</a>, to allow interoperability.</p>

<pre><code>function encode($data,$key)
{
    return base64_encode( hash_hmac('sha256', iconv( iconv_get_encoding( ""internal_encoding""), ""ASCII"", $data ), iconv( iconv_get_encoding( ""internal_encoding""), ""ASCII"", $key ) ) );
}
</code></pre>

<p>I can't be sure that the above code will output the desired hashes, however, as I don't have .net handy to test the initial code. But this might point you in the right direction.</p>

<p>If this doesn't work, the value inside <code>iconv_get_encoding(</code> might be the culprit, try <code>""output_encoding""</code> or <code>""input_encoding""</code> as well. It is also possible that you'll need to set these same values to ASCII with <code>iconv_set_encoding(</code>.</p>

<p>Good Luck!</p>

<hr>

<p>Update! This is what ultimately worked:</p>

<pre><code>function encode($data,$key)
{
    iconv_set_encoding(""input_encoding"", ""ASCII"");
    iconv_set_encoding(""internal_encoding"", ""ASCII"");
    iconv_set_encoding(""output_encoding"", ""ASCII"");

    return base64_encode( hash_hmac('sha256', $data, $key, true ) );
}
</code></pre>
","8788545","683","<c#><php><hmac>","7","6","1","2012-01-10 13:55:16","8788545","1","","75613","","2012-01-10 09:42:44","2012-01-09 10:13:08","","2012-01-10 13:55:16","2012-01-09 12:37:12"
"5625712","Computing an HMAC-SHA signature","<p>I'm writing a module for Amazon's SimpleDB. They require REST requests to be signed using HMAC-SHA algorithm. (<a href=""http://docs.amazonwebservices.com/AmazonSimpleDB/latest/DeveloperGuide/index.html?HMACAuth.html"" rel=""nofollow"">Details here.</a>)</p>

<p>I'm told that there is a function to computer this signature, but I can't find it in the <a href=""http://docs.kynetx.com/docs/Math#Digest_functions"" rel=""nofollow"">documentation</a>. What is the function called, and what do its arguments look like?</p>
","<p>The HMAC is a standard function that can be found in crypto libraries for most platforms. Amazon shows several examples on the documentaion page you link to. </p>

<p>For Java, you can find it in <a href=""http://download.oracle.com/javase/1.4.2/docs/api/javax/crypto/Mac.html"" rel=""nofollow"">javax.crypto.Mac</a></p>

<p>For .Net, look in <a href=""http://msdn.microsoft.com/en-us/library/system.security.cryptography.hmacsha1.aspx"" rel=""nofollow"">System.Security.Cryptography</a></p>

<p>For <a href=""http://apps.kynetx.com/"" rel=""nofollow"">KRL</a>, I haven't found any built-in stock solution. Since it seems possible to embed javascript, the <a href=""http://jssha.sourceforge.net/"" rel=""nofollow"">jsSHA</a> implemenation could be useful. There is a <a href=""http://docs.kynetx.com/docs/Math#sha1"" rel=""nofollow"">sha1</a> function in the math library, and implementing HMAC according to <a href=""http://www.faqs.org/rfcs/rfc2104.html"" rel=""nofollow"">RFC2104</a> doesn't seem that difficult.</p>
","5625824","683","<amazon-simpledb><krl><hmac>","3","1","3","2011-05-21 02:32:41","5639539","1","","","","","2011-04-11 18:26:22","","2011-04-11 19:27:07","2011-04-11 18:35:36"
"5625712","Computing an HMAC-SHA signature","<p>I'm writing a module for Amazon's SimpleDB. They require REST requests to be signed using HMAC-SHA algorithm. (<a href=""http://docs.amazonwebservices.com/AmazonSimpleDB/latest/DeveloperGuide/index.html?HMACAuth.html"" rel=""nofollow"">Details here.</a>)</p>

<p>I'm told that there is a function to computer this signature, but I can't find it in the <a href=""http://docs.kynetx.com/docs/Math#Digest_functions"" rel=""nofollow"">documentation</a>. What is the function called, and what do its arguments look like?</p>
","<p>EDITED: The following should work:</p>

<pre><code>pre {
  message = ""Four score and seven years ago"";
  key = ""Abe Lincoln"";
  signature = math:hmac_sha256_base64(message, key);
}
notify(""Signature is"", signature);
</code></pre>

<p>The function is <code>math:hmac_sha256_base64(&lt;datastring>,&lt;keystring>)</code> </p>
","5639539","683","<amazon-simpledb><krl><hmac>","3","1","3","2011-05-21 02:32:41","5639539","1","","","","","2011-04-11 18:26:22","","2011-04-15 03:12:30","2011-04-12 17:55:44"
"5625712","Computing an HMAC-SHA signature","<p>I'm writing a module for Amazon's SimpleDB. They require REST requests to be signed using HMAC-SHA algorithm. (<a href=""http://docs.amazonwebservices.com/AmazonSimpleDB/latest/DeveloperGuide/index.html?HMACAuth.html"" rel=""nofollow"">Details here.</a>)</p>

<p>I'm told that there is a function to computer this signature, but I can't find it in the <a href=""http://docs.kynetx.com/docs/Math#Digest_functions"" rel=""nofollow"">documentation</a>. What is the function called, and what do its arguments look like?</p>
","<p>To sign strings with embedded newlines (AWS I'm talking to you!) you have to do the following (based on the AWS S3 example)</p>

<pre><code>pre {
  raw_string = uri:unescape(""GET%0A%0A%0AWed, 28 Mar 2007 01:29:59 +0000%0A/"");
  sample_key = ""uV3F3YluFJax1cknvbcGwgjvx4QpvB+leU8dUj2o"";
  signature = math:hmac_sha1_base64(raw_string, sample_key);
  expected = ""Db+gepJSUbZKwpx1FR0DLtEYoZA="";
  passfail = (signature eq expected) =&gt; ""pass"" | ""fail"";
}
</code></pre>

<p>The <code>uri:decode()</code> function returns a string with proper newlines, where <code>\n\n\n</code> does not. You might have to add trailing '=' to the signature.</p>
","6074898","683","<amazon-simpledb><krl><hmac>","3","1","3","2011-05-21 02:32:41","5639539","1","","","","","2011-04-11 18:26:22","","2011-05-21 02:32:41","2011-05-20 16:24:02"
"48303874","Why Python and Node.js's HMAC result is different in this code?","<p>Recently, I have a task to make HMAC to communicate API server.
I got a sample code of node.js version which makes HMAC of message. Using concept and sample, I've got to make a python code which is equivalent with node.js version but result is different, but I have no idea why.</p>

<p>Please review both code and help finding the difference.</p>

<p><strong>Python 3.0</strong></p>

<pre><code>import hmac
import string
import hashlib
import base64

secret = 'PYPd1Hv4J6'
message = '1515928475.417'
key = base64.b64encode(secret.encode('utf-8'))

hmac_result = hmac.new(key, message.encode('utf-8'), hashlib.sha512)
print(base64.b64encode(hmac_result.digest()))
</code></pre>

<p>Result (Python 3.6)</p>

<pre><code>b'7ohDRJGMGYjfHojnrvNpM3YM9jb+GLJjbQvblzrE17h2yoKfIRGEBSjfOqQFO4iKD7owk+gSciFxFkNB+yPP4g=='
</code></pre>

<p><strong>Node.JS</strong></p>

<pre><code>var crypto = require('crypto');

var secret = 'PYPd1Hv4J6';
var message = '1515928475.417'
var key = Buffer(secret, 'base64');

var hmac = crypto.createHmac('sha512', key);
var hmac_result = hmac.update(message).digest('base64');
console.log(hmac_result)
</code></pre>

<p>Result (Node.JS 6.11)</p>

<pre><code>m6Z/FxI492VXKDc16tO5XDNvty0Tmv0b1uksSbiwh87+4rmg43hEXM0WmWzkTP3aXB1s5rhm05Hu3g70GTrdEQ==
</code></pre>
","<p>I was able to get them to match by stripping out the <code>base64</code>ing of everything:</p>

<p><strong>Python:</strong></p>

<pre><code>import hmac
import string
import hashlib
import base64

secret = 'PYPd1Hv4J6'
message = '1515928475.417'
key = secret.encode('utf-8')

hmac_result = hmac.new(key, message.encode('utf-8'), hashlib.sha512)
print(base64.b64encode(hmac_result.digest()))
</code></pre>

<p>Output:</p>

<pre><code>b'jezLNuBz37FoACm4LdLSqOQ5C93cuGID9a8MQmOZntXklDV3SvWdNfqndzK0a54awKeHY+behFiv4FYyILRoGQ=='
</code></pre>

<p><strong>Javascript</strong>:</p>

<pre><code>var crypto = require('crypto');

var secret = 'PYPd1Hv4J6';
var message = '1515928475.417'

var hmac = crypto.createHmac('sha512', secret);
var hmac_result = hmac.update(message).digest('base64');
console.log(hmac_result)
</code></pre>

<p>Output:</p>

<pre><code>jezLNuBz37FoACm4LdLSqOQ5C93cuGID9a8MQmOZntXklDV3SvWdNfqndzK0a54awKeHY+behFiv4FYyILRoGQ==
</code></pre>
","48304512","682","<python><node.js><hmac>","2","1","3","2018-01-18 03:57:27","48304536","0","","9230121","","2018-01-17 15:16:31","2018-01-17 14:51:24","","","2018-01-17 15:24:07"
"48303874","Why Python and Node.js's HMAC result is different in this code?","<p>Recently, I have a task to make HMAC to communicate API server.
I got a sample code of node.js version which makes HMAC of message. Using concept and sample, I've got to make a python code which is equivalent with node.js version but result is different, but I have no idea why.</p>

<p>Please review both code and help finding the difference.</p>

<p><strong>Python 3.0</strong></p>

<pre><code>import hmac
import string
import hashlib
import base64

secret = 'PYPd1Hv4J6'
message = '1515928475.417'
key = base64.b64encode(secret.encode('utf-8'))

hmac_result = hmac.new(key, message.encode('utf-8'), hashlib.sha512)
print(base64.b64encode(hmac_result.digest()))
</code></pre>

<p>Result (Python 3.6)</p>

<pre><code>b'7ohDRJGMGYjfHojnrvNpM3YM9jb+GLJjbQvblzrE17h2yoKfIRGEBSjfOqQFO4iKD7owk+gSciFxFkNB+yPP4g=='
</code></pre>

<p><strong>Node.JS</strong></p>

<pre><code>var crypto = require('crypto');

var secret = 'PYPd1Hv4J6';
var message = '1515928475.417'
var key = Buffer(secret, 'base64');

var hmac = crypto.createHmac('sha512', key);
var hmac_result = hmac.update(message).digest('base64');
console.log(hmac_result)
</code></pre>

<p>Result (Node.JS 6.11)</p>

<pre><code>m6Z/FxI492VXKDc16tO5XDNvty0Tmv0b1uksSbiwh87+4rmg43hEXM0WmWzkTP3aXB1s5rhm05Hu3g70GTrdEQ==
</code></pre>
","<p>Your input keys are different, so the outputs will be different.</p>

<p>Node:</p>

<pre><code>var secret = 'PYPd1Hv4J6';
var message = '1515928475.417'
var key = Buffer(secret, 'base64'); // buffer of bytes from the base64-encoded string 'PYPd1Hv4J6'
                                    //  &lt;Buffer 3d 83 dd d4 7b f8 27&gt;
</code></pre>

<p>Python:</p>

<pre><code>secret = 'PYPd1Hv4J6'
message = '1515928475.417'
key = base64.b64encode(secret.encode('utf-8')) # did you mean b64decode here?
</code></pre>
","48304536","682","<python><node.js><hmac>","2","3","3","2018-01-18 03:57:27","48304536","0","","9230121","","2018-01-17 15:16:31","2018-01-17 14:51:24","","","2018-01-17 15:25:42"
"48303874","Why Python and Node.js's HMAC result is different in this code?","<p>Recently, I have a task to make HMAC to communicate API server.
I got a sample code of node.js version which makes HMAC of message. Using concept and sample, I've got to make a python code which is equivalent with node.js version but result is different, but I have no idea why.</p>

<p>Please review both code and help finding the difference.</p>

<p><strong>Python 3.0</strong></p>

<pre><code>import hmac
import string
import hashlib
import base64

secret = 'PYPd1Hv4J6'
message = '1515928475.417'
key = base64.b64encode(secret.encode('utf-8'))

hmac_result = hmac.new(key, message.encode('utf-8'), hashlib.sha512)
print(base64.b64encode(hmac_result.digest()))
</code></pre>

<p>Result (Python 3.6)</p>

<pre><code>b'7ohDRJGMGYjfHojnrvNpM3YM9jb+GLJjbQvblzrE17h2yoKfIRGEBSjfOqQFO4iKD7owk+gSciFxFkNB+yPP4g=='
</code></pre>

<p><strong>Node.JS</strong></p>

<pre><code>var crypto = require('crypto');

var secret = 'PYPd1Hv4J6';
var message = '1515928475.417'
var key = Buffer(secret, 'base64');

var hmac = crypto.createHmac('sha512', key);
var hmac_result = hmac.update(message).digest('base64');
console.log(hmac_result)
</code></pre>

<p>Result (Node.JS 6.11)</p>

<pre><code>m6Z/FxI492VXKDc16tO5XDNvty0Tmv0b1uksSbiwh87+4rmg43hEXM0WmWzkTP3aXB1s5rhm05Hu3g70GTrdEQ==
</code></pre>
","<p>Equivalent/Expected python code's is below.</p>

<pre><code>import hmac
import string
import hashlib
import base64

secret = 'PYPd1Hv4J6=='
message = '1515928475.417'
key = base64.b64decode (secret.encode('utf-8'))

hmac_result = hmac.new(key, message.encode('utf-8'), hashlib.sha512)
print(base64.b64encode(hmac_result.digest()))
</code></pre>

<p>Padding '=' to targeted and decoding part was important.
Thank you.</p>
","48313613","682","<python><node.js><hmac>","2","0","3","2018-01-18 03:57:27","48304536","0","","9230121","","2018-01-17 15:16:31","2018-01-17 14:51:24","","","2018-01-18 03:57:27"
"7998240","How to efficiently implement hash validation of a file while using BinaryWriter & Reader?","<p>I'm relatively new to C# so please bear with me.</p>

<p>I am writing a small application in C# (.NET 4.0). For writing files I use some variation of this code:</p>

<pre><code>using (var fStream = new FileStream(filename, FileMode.CreateNew, FileAccess.Write, 
 FileShare.Read))
using (var crypto = new CryptoStream(fStream, encryptor, CryptoStreamMode.Write))
using (var binary = new BinaryWriter(crypto))
</code></pre>

<p>I would like to insure that files aren't corrupted and that they don't get tampered. Thus I thought about using sha256 or hmac with sha256 (if it isn't much slower). <strong>I don't know how to efficiently implement hashing of file content</strong>. </p>

<p>My ideas so far are:</p>

<p>1.) hmac.ComputeHash(stream)
- but it doesn't work on binary stream
-if I use file stream I don't know which parts of the stream it hashes, because I want to append hash to the end of the file. Thus I don't know when reading how to hash filestream without hashing the appended hash.</p>

<p>2.) use binary stream to read / write to / from memory stream and then call memory.ToArray() and hash that byte array
-I think it is quite inefficient</p>

<p>What should I do?</p>

<p>Thank you for your ideas and answers.</p>
","<p>All <code>HashAlgorithm</code>s implement <code>ICryptoTransform</code>.</p>

<p>You can simply read through another <code>CryptoStream</code> around the HashAlgorithm, then check its hash after you finish reading.</p>
","7998295","677","<c#><file><validation><hash><hmac>","2","2","2","2012-02-22 16:26:52","9398801","0","1","","","","2011-11-03 16:16:26","","","2011-11-03 16:19:38"
"7998240","How to efficiently implement hash validation of a file while using BinaryWriter & Reader?","<p>I'm relatively new to C# so please bear with me.</p>

<p>I am writing a small application in C# (.NET 4.0). For writing files I use some variation of this code:</p>

<pre><code>using (var fStream = new FileStream(filename, FileMode.CreateNew, FileAccess.Write, 
 FileShare.Read))
using (var crypto = new CryptoStream(fStream, encryptor, CryptoStreamMode.Write))
using (var binary = new BinaryWriter(crypto))
</code></pre>

<p>I would like to insure that files aren't corrupted and that they don't get tampered. Thus I thought about using sha256 or hmac with sha256 (if it isn't much slower). <strong>I don't know how to efficiently implement hashing of file content</strong>. </p>

<p>My ideas so far are:</p>

<p>1.) hmac.ComputeHash(stream)
- but it doesn't work on binary stream
-if I use file stream I don't know which parts of the stream it hashes, because I want to append hash to the end of the file. Thus I don't know when reading how to hash filestream without hashing the appended hash.</p>

<p>2.) use binary stream to read / write to / from memory stream and then call memory.ToArray() and hash that byte array
-I think it is quite inefficient</p>

<p>What should I do?</p>

<p>Thank you for your ideas and answers.</p>
","<p>I end up using this:</p>

<ol>
<li>binary stream to read / write in memory</li>
<li>convert memory stream to byte array</li>
<li>hash the byte array</li>
</ol>
","9398801","677","<c#><file><validation><hash><hmac>","2","1","2","2012-02-22 16:26:52","9398801","0","1","","","","2011-11-03 16:16:26","","","2012-02-22 16:26:52"
"33232998","HMAC-SHA implementation on JavaCard","<p>I am trying to implement RFC-2104 HMAC on JavaCard smart cards. I seem to be getting the wrong results. Am I missing or misinterpreting something from the RFC-2104 ?</p>

<p>Code:</p>

<pre><code>public class HMACSHA {

private MessageDigest md = null;
private static final byte IPAD = (byte) 0x36;
private static final byte OPAD = (byte) 0x5c;
private byte[] secretIpad;
private byte[] secretOpad;
private byte[] secretKey;
private short outSize = 20;
private short blockSize = 64;
private short ctr = 0;

/**
 * Init HMAC algo from RFC-2104. Setup the blocksize of the algo. Default SHA-1.
 *
 * @param hashAlgo
 * @param hmacKey
 */
public void init(byte hashAlgo, byte[] hmacKey) {
    md = MessageDigest.getInstance(hashAlgo, false);

    if (hashAlgo == 4) {
        outSize = (short) 32; // SHA-256
    } else if (hashAlgo == 5) {
        outSize = (short) 48; // SHA-384            
        blockSize = (short) 128;
    } else if (hashAlgo == 6) {
        outSize = (short) 64; // SHA-512            
        blockSize = (short) 128;
    }

    secretIpad = JCSystem.makeTransientByteArray((short) blockSize, JCSystem.CLEAR_ON_RESET);
    secretOpad = JCSystem.makeTransientByteArray((short) blockSize, JCSystem.CLEAR_ON_RESET);
    secretKey = JCSystem.makeTransientByteArray((short) blockSize, JCSystem.CLEAR_ON_RESET);

    // Block size == key size. Adjust key.
    if ((short) hmacKey.length &gt; blockSize) {
        md.reset();
        md.doFinal(hmacKey, (short) 0, (short) hmacKey.length, secretKey, (short) 0);
    } else {
        ArrayLogic.arrayCopyRepack(hmacKey, (short) 0, (short) hmacKey.length, secretKey, (short) 0);
    }

    // Setup IPAD &amp; OPAD secrets
    for (ctr = (short) 0; ctr &lt; blockSize; ctr++) {
        secretIpad[ctr] = (byte) (secretKey[ctr] ^ IPAD);
        secretOpad[ctr] = (byte) (secretKey[ctr] ^ OPAD);
    }
    ctr = (short) 0;
}

public void doFinal(byte[] msg, short offset, short length, byte[] workBuff, short workOffset, byte[] outMsg, short outOffset) {
    if (md != null) {
        // hash(i_key_pad ∥ message)
        md.reset();
        ArrayLogic.arrayCopyRepack(secretIpad, (short) 0, (short) secretIpad.length, workBuff, workOffset);
        ArrayLogic.arrayCopyRepack(msg, offset, length, workBuff, (short) (workOffset + secretIpad.length));
        md.doFinal(workBuff, workOffset, (short) (secretIpad.length + length), outMsg, outOffset);

        //hash(o_key_pad ∥ i_pad-hashed)
        md.reset();
        ArrayLogic.arrayCopyRepack(secretOpad, (short) 0, (short) secretOpad.length, workBuff, workOffset);
        ArrayLogic.arrayCopyRepack(outMsg, outOffset, (short) outSize, workBuff, (short) (workOffset + secretOpad.length));
        md.doFinal(workBuff, workOffset, (short) (secretOpad.length + outSize), outMsg, outOffset);
    }
}
</code></pre>

<p>}</p>

<p>The usage is to setup a sufficient size buffer or somewhere in the main applet class and then calling like the example below:</p>

<pre><code>byte[] hmacBuff = JCSystem.makeTransientByteArray((short) 128, JCSystem.CLEAR_ON_RESET);
hmac.init(MessageDigest.ALG_SHA_256, hmacKey);
hmac.doFinal(incomingMsg, (short) 0, (short) incomingMsg.length, hmacBuff, (short) 0, outgoingMsg, (short) 0);
</code></pre>

<p>I double checked it with a standard Java implementation with the following parameters:</p>

<pre><code>HMAC Key Bytes(16):8A560AB02C32377FE3D1BEABE666A19B
HMAC Challenge Bytes(16):8B4F35ADB59D27ABFE95A3CAAB0B613B
HMAC Result Bytes(32):646B96BA38B73847D080E25F843C1E1DE3E8D973DBE6AFC6D402604554E7A7F6
</code></pre>

<p>And the card's result is <code>5CB05D1B2CD3F711A853F7166366246743C58509E84D6B8B6C37FF00D6F07619</code>. Assuming the HMAC keys are properly synchronized in the JavaCard and on the sample desktop application. Am I missing something in my HMAC source code ?</p>
","<p>These lines caused the issue:</p>

<pre><code>if (hashAlgo == 4) {
        outSize = (short) 32; // SHA-256
        //!!! missing: blockSize = (short) 64;
} else if (hashAlgo == 5) {
        outSize = (short) 48; // SHA-384            
        blockSize = (short) 128;
} else if (hashAlgo == 6) {
        outSize = (short) 64; // SHA-512            
        blockSize = (short) 128;
}
</code></pre>

<p>For SHA-256 the <code>blockSize</code> remains unchanged, so SHA-256 after SHA-384 or SHA-512 inherits the wrong value (128 instead of 64).</p>

<hr>

<p>There are a few more things to improve:</p>

<ul>
<li><code>outSize</code> is not necessary, use <code>md.getLength()</code> instead. <code>outSize</code> must not be stored in persistent memory, it is rewritten very often. This applies to <code>blockSize</code>, too.</li>
<li>do not create new instances of <code>MessageDigest</code> each time you call <code>init</code>, you will run out of persistent memory. Create all instances you need in the constructor.</li>
<li><code>ctr</code> must not be stored in persistent memory. It is a temporary variable and should be moved to RAM. You rewrite this variable very often and it can damage your card.</li>
<li><code>ArrayLogic.arrayCopyRepack</code> should be replaced with <code>Util.arrayCopyNonAtomic</code> from standard Java Card library - your applet would be faster and more portable</li>
<li>create all buffers you need just once, not each time you call <code>init</code> (<code>secretKey</code>,<code>secretIpad</code>,<code>secretOpad</code>). Btw, you could have just one buffer and keep offsets only...</li>
<li>call <code>md.reset()</code> only when it is necessary, you do not have to call it each time before <code>md.doFinal(...)</code></li>
</ul>

<hr>

<p>The last (obvious) note: If supported by your card, always use <code>Signature.ALG_HMAC_SHA_XXX</code> instead. It will be much faster than any solution you can implement in Java Card on your own.</p>
","33243192","674","<hmac><javacard>","2","4","1","2015-10-20 17:35:28","33243192","6","6","","","","2015-10-20 09:32:19","","","2015-10-20 17:35:28"
"30011035","Unable to reproduce AWS signature from example using HMAC SHA256","<p>I am following this example </p>

<p><a href=""http://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html"" rel=""nofollow"">http://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html</a></p>

<p>and trying to reproduce the 64 character string for the signature which they state as...</p>

<pre><code>aeeed9bbccd4d02ee5c0109b86d86835f995330da4c265957d157751f604d404
</code></pre>

<p>I have successful matched the hex digeset for the Canonical Request and positive that the StringToSign string is correct.</p>

<p>The last piece is calculating the signing_key and signature.  This is where I am hitting a road block using the provided ruby function 'getSignatureKey'</p>

<p><a href=""http://docs.aws.amazon.com/general/latest/gr/signature-v4-examples.html#signature-v4-examples-ruby"" rel=""nofollow"">http://docs.aws.amazon.com/general/latest/gr/signature-v4-examples.html#signature-v4-examples-ruby</a></p>

<pre><code>signing_key = getSignatureKey secret_access_key, current_date, region, aws_service
signature = OpenSSL::HMAC.digest('sha256', signing_key, string_to_sign)


 def getSignatureKey key, dateStamp, regionName, serviceName
  kDate    = OpenSSL::HMAC.digest('sha256', ""AWS4"" + key, dateStamp)
  kRegion  = OpenSSL::HMAC.digest('sha256', kDate, regionName)
  kService = OpenSSL::HMAC.digest('sha256', kRegion, serviceName)
  kSigning = OpenSSL::HMAC.digest('sha256', kService, ""aws4_request"")

  kSigning
end
</code></pre>

<p>The current output for 'signature' is this strange sequence of characters.</p>

<p>��ٻ���.�����h5��3 ��e�}wQ��</p>

<p>What am I missing to get the signature to equal...</p>

<pre><code>aeeed9bbccd4d02ee5c0109b86d86835f995330da4c265957d157751f604d404
</code></pre>
","<p>It's possible that your ""strange sequence of characters"" is in fact the correct output.</p>

<p><code>OpenSSL::HMAC.digest</code> spits out a value represented in binary, and you are comparing that to a value represented in hex </p>

<p>Check to see what happens when you print out the signature after converting it to hex representation like so:</p>

<pre><code>signature.each_byte.map { |b| ""%02x"" % b }.join
</code></pre>
","30011166","672","<ruby><ruby-on-rails-4><amazon-web-services><amazon-s3><hmac>","1","1","2","2015-05-03 17:42:04","","0","","","","","2015-05-03 06:44:53","","2015-05-03 17:42:04","2015-05-03 07:05:33"
"30011035","Unable to reproduce AWS signature from example using HMAC SHA256","<p>I am following this example </p>

<p><a href=""http://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html"" rel=""nofollow"">http://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html</a></p>

<p>and trying to reproduce the 64 character string for the signature which they state as...</p>

<pre><code>aeeed9bbccd4d02ee5c0109b86d86835f995330da4c265957d157751f604d404
</code></pre>

<p>I have successful matched the hex digeset for the Canonical Request and positive that the StringToSign string is correct.</p>

<p>The last piece is calculating the signing_key and signature.  This is where I am hitting a road block using the provided ruby function 'getSignatureKey'</p>

<p><a href=""http://docs.aws.amazon.com/general/latest/gr/signature-v4-examples.html#signature-v4-examples-ruby"" rel=""nofollow"">http://docs.aws.amazon.com/general/latest/gr/signature-v4-examples.html#signature-v4-examples-ruby</a></p>

<pre><code>signing_key = getSignatureKey secret_access_key, current_date, region, aws_service
signature = OpenSSL::HMAC.digest('sha256', signing_key, string_to_sign)


 def getSignatureKey key, dateStamp, regionName, serviceName
  kDate    = OpenSSL::HMAC.digest('sha256', ""AWS4"" + key, dateStamp)
  kRegion  = OpenSSL::HMAC.digest('sha256', kDate, regionName)
  kService = OpenSSL::HMAC.digest('sha256', kRegion, serviceName)
  kSigning = OpenSSL::HMAC.digest('sha256', kService, ""aws4_request"")

  kSigning
end
</code></pre>

<p>The current output for 'signature' is this strange sequence of characters.</p>

<p>��ٻ���.�����h5��3 ��e�}wQ��</p>

<p>What am I missing to get the signature to equal...</p>

<pre><code>aeeed9bbccd4d02ee5c0109b86d86835f995330da4c265957d157751f604d404
</code></pre>
","<p>I can't tell from your post but those are quite possibly exactly the same results, formatted differently. </p>

<p>Your code returns the raw result of the HMAC operation - this is arbitrary binary data so it's not going to print as anything readable. Amazon expect you to provide the hex representation for each byte: your first couple of bytes are ""\xae\xee"" instead of ""aeee""</p>

<p>The easiest way to do this is call <code>hexdigest</code> rather than <code>digest</code>. Note that you should only do this for the final HMAC (when you sign the string to sign with the signing key) not when constructing the signing key</p>
","30011211","672","<ruby><ruby-on-rails-4><amazon-web-services><amazon-s3><hmac>","1","1","2","2015-05-03 17:42:04","","0","","","","","2015-05-03 06:44:53","","","2015-05-03 07:12:21"
"18723391","Why does Amazon require lexicographically ordering query string parameters when signing requests?","<p>AWS' query parameter ordering code <a href=""https://github.com/aws/aws-sdk-java/blob/master/src/main/java/com/amazonaws/auth/AbstractAWSSigner.java#L168"" rel=""nofollow"">can be seen on their Github repository</a>.</p>

<p>I have thought about why they might require API clients to sign requests:</p>

<ul>
<li>intermediate proxies might canonicalize URLs and mess up the original query string order</li>
<li>The <a href=""http://tools.ietf.org/html/rfc3986"" rel=""nofollow"">URI RFC</a> specifies absolutely nothing about the order of the query string parameters, or that it should be preserved</li>
</ul>

<p>My best guess is that, because of the RFC, Amazon reckoned they'd play it safe and require both sides to sign the ORDERED request.</p>

<p>I do, however, would like the final/official word on this. Surely the implementors had a good reason for this requirement.</p>
","<p>The request signature ensures that the sender and receiver can agree on exactly what was sent in the request and that no intermediate parties tampered with it.</p>

<p>Many parts of an HTTP request can change without changing the semantics of the request. For example the HTTP headers can be re-ordered, as can the query parameters as you rightly point out.</p>

<p>So the request must be <a href=""http://en.wikipedia.org/wiki/Canonicalization"" rel=""nofollow"">canonicalized</a> into a form that removes these ambiguities and that both parties will use to sign the request. Otherwise each party could generate different signatures for the same request. Ordering the query parameters is just part of this process. Amazon describes their canonicalization process and their motivation <a href=""http://docs.aws.amazon.com/general/latest/gr/sigv4-create-canonical-request.html"" rel=""nofollow"">in the docs for the AWS V4 signature format</a>.</p>
","18744689","671","<amazon-web-services><hmac>","0","1","1","2013-09-11 14:58:49","","0","","","","","2013-09-10 15:44:20","","","2013-09-11 14:58:49"
"22786686","ASP.NET Web API HMAC Authentication Encryption On Client Side","<p>I am creating an asp.net API and I intend  on using HMAC authentication to validate incoming requests. </p>

<p>Each user will have public and secret key. The secret key is used to add encrypted value of public key in query string named signature and public key also in query string. </p>

<p>When an user makes a request I am encrypting the supplied public key in the query string with the secret key I am getting from the database on server side. </p>

<p>If there is a supplied signature in the query string that matches my encrypted string then I am allowing user to access the API, otherwise I send an unauthorized request error. </p>

<p>However my problem is when calling the web API method using jQuery, the secret key is visible on client side because I am using CryptoJS to encrypt the public key. </p>

<p>So I have to move encryption logic to server side. Best way to avoid secret key on client side JavaScript?</p>
","","","661","<asp.net><encryption><hmac>","0","","0","2016-05-02 18:19:35","","2","","13302","","2016-05-02 18:19:35","2014-04-01 13:00:52","","",""
"12176886","python M2Crypto HMAC SHA1","<p>I have to create a HMAC_SHA1 hash in the way of:</p>

<pre><code>auth_reponse = HMAC_SHA1(key=session_id, data=decypted_challenge)
</code></pre>

<p>How can i do this with M2Crypto ?</p>
","<p>Try:</p>

<pre><code>from M2Crypto.EVP import HMAC
import base64

hmac = HMAC(session_id,'sha1')
hmac.update(decypted_challenge)

auth_response = base64.encodestring(hmac.digest()) #Base64 format
</code></pre>

<p>or:</p>

<pre><code>auth_response = hmac.digest() #Binary format
</code></pre>

<p>Regards!</p>
","12344894","655","<python><openssl><hmac>","2","3","1","2012-10-02 07:44:50","12344894","0","","","","","2012-08-29 11:29:13","","2012-10-02 07:44:50","2012-09-10 02:59:53"
"6685727","Java equivalent of Fantom HMAC using SHA1","<p>I'm having trouble doing the following in Java. Below is the Fantom code from the documentation for the the tool I am using.</p>

<pre><code>// compute salted hmac
hmac := Buf().print(""$username:$userSalt"").hmac(""SHA-1"", password.toBuf).toBase64

// now compute login digest using nonce
digest := ""${hmac}:${nonce}"".toBuf.toDigest(""SHA-1"").toBase64

// our example variables
username: ""jack""
password: ""pass""
userSalt: ""6s6Q5Rn0xZP0LPf89bNdv+65EmMUrTsey2fIhim/wKU=""
nonce:    ""3da210bdb1163d0d41d3c516314cbd6e""
hmac:     ""IjJOApgvDoVDk9J6NiyWdktItl0=""
digest:   ""t/nzXF3n0zzH4JhXtihT8FC1N3s=""
</code></pre>

<p>I've been searching various examples through Google but none of them produce the results the documentation claims should be returned.</p>

<p>Can someone with Fantom knowledge verify if the example in the documentation is correct?</p>

<p>As for the Java side, here is my most recent attempt</p>

<pre><code>    public static String hmacSha1(String value, String key) {
    try {
        // Get an hmac_sha1 key from the raw key bytes
        byte[] keyBytes = key.getBytes(""UTF-8"");           
        SecretKeySpec signingKey = new SecretKeySpec(keyBytes, ""HmacSHA1"");

        // Get an hmac_sha1 Mac instance and initialize with the signing key
        Mac mac = Mac.getInstance(""HmacSHA1"");
        mac.init(signingKey);

        // Compute the hmac on input data bytes
        byte[] rawHmac = mac.doFinal(value.getBytes(""UTF-8""));

        // Convert raw bytes to Hex
        byte[] hexBytes = new Hex().encode(rawHmac);

        //  Covert array of Hex bytes to a String
        return new String(hexBytes, ""UTF-8"");
    } catch (Exception e) {
        throw new RuntimeException(e);
    }
}
</code></pre>

<p>However, when I call the method with the following parameters</p>

<pre><code>jack:6s6Q5Rn0xZP0LPf89bNdv+65EmMUrTsey2fIhim/wKU=
pass
</code></pre>

<p>I get</p>

<pre><code>22324e02982f0e854393d27a362c96764b48b65d
</code></pre>
","<p>Not sure where the docs came from - but they could be out-of-date - or wrong. I would actually run the Fantom code to use as your reference to make sure you're testing the right stuff ;)</p>

<p>You can take a look at the Java source for sys::Buf.hmac: <a href=""http://hg.fantom.org/fan-1.0/file/62f420e187ab/src/sys/java/fan/sys/MemBuf.java#l257"" rel=""nofollow"">MemBuf.java</a></p>

<p>I would also recommend separating out the 3 transformations.  Make sure your raw byte array matches in both Fantom and Java, then verify the digest matches, and finally the Base64 encoding. Be alot easier to verify each stage in your code.</p>
","6685993","655","<java><hmac><fantom>","3","2","2","2011-07-15 18:19:37","6711500","0","2","","","","2011-07-13 21:11:22","","","2011-07-13 21:35:10"
"6685727","Java equivalent of Fantom HMAC using SHA1","<p>I'm having trouble doing the following in Java. Below is the Fantom code from the documentation for the the tool I am using.</p>

<pre><code>// compute salted hmac
hmac := Buf().print(""$username:$userSalt"").hmac(""SHA-1"", password.toBuf).toBase64

// now compute login digest using nonce
digest := ""${hmac}:${nonce}"".toBuf.toDigest(""SHA-1"").toBase64

// our example variables
username: ""jack""
password: ""pass""
userSalt: ""6s6Q5Rn0xZP0LPf89bNdv+65EmMUrTsey2fIhim/wKU=""
nonce:    ""3da210bdb1163d0d41d3c516314cbd6e""
hmac:     ""IjJOApgvDoVDk9J6NiyWdktItl0=""
digest:   ""t/nzXF3n0zzH4JhXtihT8FC1N3s=""
</code></pre>

<p>I've been searching various examples through Google but none of them produce the results the documentation claims should be returned.</p>

<p>Can someone with Fantom knowledge verify if the example in the documentation is correct?</p>

<p>As for the Java side, here is my most recent attempt</p>

<pre><code>    public static String hmacSha1(String value, String key) {
    try {
        // Get an hmac_sha1 key from the raw key bytes
        byte[] keyBytes = key.getBytes(""UTF-8"");           
        SecretKeySpec signingKey = new SecretKeySpec(keyBytes, ""HmacSHA1"");

        // Get an hmac_sha1 Mac instance and initialize with the signing key
        Mac mac = Mac.getInstance(""HmacSHA1"");
        mac.init(signingKey);

        // Compute the hmac on input data bytes
        byte[] rawHmac = mac.doFinal(value.getBytes(""UTF-8""));

        // Convert raw bytes to Hex
        byte[] hexBytes = new Hex().encode(rawHmac);

        //  Covert array of Hex bytes to a String
        return new String(hexBytes, ""UTF-8"");
    } catch (Exception e) {
        throw new RuntimeException(e);
    }
}
</code></pre>

<p>However, when I call the method with the following parameters</p>

<pre><code>jack:6s6Q5Rn0xZP0LPf89bNdv+65EmMUrTsey2fIhim/wKU=
pass
</code></pre>

<p>I get</p>

<pre><code>22324e02982f0e854393d27a362c96764b48b65d
</code></pre>
","<p>Turns out it was just my own lack of knowledge and with enough trial and error I was able to figure it out by doing the following:</p>

<pre><code>//username: ""jack""
//password: ""pass""
//userSalt: ""6s6Q5Rn0xZP0LPf89bNdv+65EmMUrTsey2fIhim/wKU=""
//nonce:    ""3da210bdb1163d0d41d3c516314cbd6e""
//hmac:     ""IjJOApgvDoVDk9J6NiyWdktItl0=""
//digest:   ""t/nzXF3n0zzH4JhXtihT8FC1N3s=""

...
// initialize a Mac instance using a signing key from the password
SecretKeySpec signingKey = new SecretKeySpec(password.getBytes(), ""HmacSHA1"");
Mac mac = Mac.getInstance(""HmacSHA1"");
mac.init(signingKey);

// compute salted hmac
byte[] hmacByteArray = mac.doFinal((username + ':' + userSalt).getBytes());
String hmacString = new String(Base64.encodeBase64(hmacByteArray));
// hmacString == hmac

// now compute login digest using nonce
MessageDigest md = MessageDigest.getInstance(""SHA-1"");
md.update((hmacString + ':' + nonce).getBytes());
byte[] digestByteArray = md.digest();
String digestString = new String(Base64.encodeBase64(digestByteArray));
// digestString == digest
</code></pre>

<p>Used org.apache.commons.codec.binary.Base64 to encode the byte arrays.</p>
","6711500","655","<java><hmac><fantom>","3","1","2","2011-07-15 18:19:37","6711500","0","2","","","","2011-07-13 21:11:22","","","2011-07-15 18:19:37"
"24982158","How to use Delphi to sign REST requests using HMAC-SHA256","<p>I'm attempting to query an REST service with fairly limited idea of how to approach it.
I'm using Delphi XE6 (upd 1)</p>

<p>The company providing the API have said that: ""The API is implemented as JSON via SSL""
 and they go on to say that:</p>

<blockquote>
  <p>Access to any API endpoint requires authentication via signed requests, created with publicand secret API
  keys</p>
</blockquote>

<p>I have the keys defined above.</p>

<blockquote>
  <p>The signature is an HMAC­SHA256 hash of a string containing the request content­type, host,
  URL, date timestamp (matching the request Date header) and request content (eg POST
  parameters) separated by a single newline, and passed with the public key in a custom header
  X­API­Authorization along with the public key, in the format PUBLICKEY:SIGNATURE</p>
</blockquote>

<p>I understand each request needs to be signed.  </p>

<p>How do I sign an <code>http</code> request with Delphi XE6?</p>

<p>The confusion for me at the moment is it seems Delphi has a number of built-in components have accessing RSET servers and parsing the JSON returned. I can't see any obvious way of signing requests using these components. </p>

<p>Specifically is there any help from the built-in Rest components or do I have to provide my own solution?</p>
","","","649","<json><delphi><rest><hmac>","2","","0","2014-07-27 15:07:58","","1","1","2979418","","2014-07-27 15:07:58","2014-07-27 14:54:07","","",""
"10632520","hashlib.sha256 returned some weird characters in python","<p>In javascript the code below returned </p>

<p><strong>eec097af19ad461ac825ccce57a012543da33c986e4607475e1fe5c6dc098d0a</strong> </p>

<pre><code>&lt;script src=""http://crypto-js.googlecode.com/svn/tags/3.0.1/build/rollups/hmac-sha512.js""&gt;&lt;/script&gt;
&lt;script&gt;
   var hash = CryptoJS.HmacSHA256(""Message"", ""Secret"");
&lt;/script&gt;
</code></pre>

<p>In python same logic returned some weird characters like �����F�%��W�T=�&lt;�nFG^���   �</p>

<pre><code>import hmac
import hashlib
import base64
hash = hmac.new('Secret', ""Message"", hashlib.sha256).digest()
</code></pre>

<p>I think they should return same hash as i have used same algorithm for both. Any suggestions ? Thanks</p>
","<p>try hexdigest()</p>

<pre><code>import hmac
import hashlib
import base64
hash = hmac.new('Secret', ""Message"", hashlib.sha256).hexdigest()
</code></pre>
","10632598","647","<python><encryption><sha><hmac>","0","3","1","2012-05-17 08:58:35","10632598","0","","","","","2012-05-17 08:53:19","","","2012-05-17 08:58:25"
"24350427","REST API design with HMAC: How to handle security on first user registration","<p>I would to implement a secure REST web service for a mobile app (using PHP).
The idea is to avoid the complexity of OAuth, so I've decided to use the HMAC approach.
I've read some articles <a href=""http://www.thebuzzmedia.com/designing-a-secure-rest-api-without-oauth-authentication/"" rel=""nofollow"">like this</a>.</p>

<p>Basically what I need to do is this:</p>

<ul>
<li><p>[<strong>CLIENT</strong>] Before making an API request combine a bunch of data it will send (ie. the url params) and hash it with the private key assigned from the server (<strong>HASHED_KEY</strong>). This data is sent along with some sort of id/key which allows the server to identify who is the sender (ie. client id,or some sort of public id of the user, it does not matter, we'll call it <strong>USER_IDENTIFIER</strong>). So at the end we have a request URL with <strong>HASH_KEY</strong>+<strong>USER_IDENTIFIER</strong> (ie. mywebservice/users/list?hash=[<strong>HASH_KEY</strong>]&amp;key=[<strong>USER_IDENTIFIER</strong>]).</p></li>
<li><p>[<strong>SERVER</strong>] Server receive this request, take (using <strong>USER_IDENTIFIER</strong>) the private key assigned to the user and HASH the same data hashed by client. If both hash keys (generated from client and generated from server) matches request can be trusted and executed.</p></li>
</ul>

<p>(We can also avoid replay attacks and add some other security levels but that's the core).</p>

<p>My question is this:</p>

<p>My APIs should also allow user registration.
So there will be a call called /<em>register_user</em> where client should send at least desired username and password.
After that, server should reply with the private key (HASHED_KEY) client will use to encrypt all other requests.
So basically there is a flaw: this first communication is not secure.
How can I handle this?</p>

<p>My idea is to provide a private key for anonymous calls both on server and client which is used to encrypt data when I don't know yet the user identity. It will be used to secure both username+password while making registration call.
Is it okay? Any other solution?</p>
","","","646","<php><security><rest><hmac>","1","","0","2014-06-22 10:41:47","","6","","","","","2014-06-22 10:41:47","","",""
"33667272","HMAC SHA256 in .NET .1.1","<p>I have to dare with a web application developed in <strong>.NET 1.1 Framework</strong>, with no possibilities to upgrade to major versions.</p>

<p>Having said that, I need to encrypt a text using <strong>HMAC SHA256</strong>.</p>

<p>I see that System.Security.Cryptography namespace in .NET 1.1 provides me a way to has a message in SHA256. But I need to use HMAC (Hash-based Message Authentication Code) with SHA256, so I send <strong>not only the text to encrypt, but also a key</strong>.</p>

<p>I see that .NET Framework 2.0 and later has an specific class HMACSHA256 to manage this. But <strong>haven't found an implementation for .NET 1.1.</strong></p>

<p>¿Any help?</p>

<p>Thanks in advance</p>
","<p>You can add to your project the file from <a href=""http://referencesource.microsoft.com/#mscorlib/system/security/cryptography/hmacsha256.cs,fbe807e4ab1f7871,references"" rel=""nofollow"">Microsoft</a>:</p>

<pre><code>namespace System.Security.Cryptography {
    [System.Runtime.InteropServices.ComVisible(true)]
    public class HMACSHA256 : HMAC {
        //
        // public constructors
        //

        public HMACSHA256 () : this (Utils.GenerateRandom(64)) {}

        public HMACSHA256 (byte[] key) {
            m_hashName = ""SHA256"";

#if FEATURE_CRYPTO
            m_hash1 = GetHashAlgorithmWithFipsFallback(() =&gt; new SHA256Managed(), () =&gt; HashAlgorithm.Create(""System.Security.Cryptography.SHA256CryptoServiceProvider""));
            m_hash2 = GetHashAlgorithmWithFipsFallback(() =&gt; new SHA256Managed(), () =&gt; HashAlgorithm.Create(""System.Security.Cryptography.SHA256CryptoServiceProvider""));
#else
            m_hash1 = new SHA256Managed();
            m_hash2 = new SHA256Managed();
#endif // FEATURE_CRYPTO

            HashSizeValue = 256;
            base.InitializeKey(key);
        }
    }
}
</code></pre>

<p>It seems that all calls are based on class that exists in .Net 1.1</p>
","33667649","641","<c#><asp.net><sha256><hmac><.net-1.1>","0","1","1","2015-11-12 09:00:19","","2","","","","","2015-11-12 08:38:13","","","2015-11-12 09:00:19"
"56153113","SHA256 hash the body and base64 encode in Python Vs TypeScript","<p>My goal is to hash the body in <code>SHA256</code> and then encode it with <code>base64</code>. I am converting <code>python</code> code to <code>TypeScript</code>. </p>

<p>Based on google search, what I understood that, <code>crypto</code> can be used against <code>hashlib</code> and <code>base64</code>. Here challenge is, when I use <code>.createHmac</code> then it requires the <code>secret</code> when in python I can directly work with body. Is it another way to achieve <code>python</code> result in <code>typeScript</code>?</p>

<p>NOTE: This is the first time I am seeing python code so please correct me if I am missing something here.</p>

<p><strong>Python Code:</strong></p>

<pre><code>import hashlib
import base64

body = ""johnDoe""
abc =  base64.b64encode(hashlib.sha256(body.encode('utf-8')).digest())
print(abc)
</code></pre>

<p>Output:</p>

<pre><code>b'RnuqbBqTNwQ7v3g3tKsVAi+NUALBCUeoRBEq6Yil6RA='
</code></pre>

<p>This can be verified <a href=""https://repl.it/repls/FrigidPlumObjects"" rel=""nofollow noreferrer"">here</a>.</p>

<p><strong>TypeScript Code:</strong> Using <code>createHmac</code></p>

<pre><code>var crypto = require('crypto');

var secret = ""PYPd1Hv4J6"";
var body = ""johnDoe"";

var hmac = crypto.createHmac(""sha256"",secret);
var hmac_result = hmac.update(body).digest('base64');
console.log(hmac_result);
</code></pre>

<p>Output:</p>

<pre><code>DLZdA1/ULIIECiJ4t+HYDLE+FRPIfcFQNo7Uw/csopU=
</code></pre>

<p>This can be verified <a href=""https://repl.it/repls/SpiffyQueasyGlitch"" rel=""nofollow noreferrer"">here</a>. </p>
","<p>I can achieve this using <code>createHash</code>.</p>

<p><strong>TypeScript Code:</strong> </p>

<pre><code>var crypto = require('crypto');

var body = ""johnDoe"";

var hash = crypto.createHash(""sha256"");
var hash_result = hash.update(body, 'utf8').digest('base64');
console.log(hash_result);
</code></pre>

<p>Output:</p>

<pre><code>RnuqbBqTNwQ7v3g3tKsVAi+NUALBCUeoRBEq6Yil6RA=
</code></pre>

<p>This can be verified <a href=""https://repl.it/repls/ImpartialNeglectedClasslibrary"" rel=""nofollow noreferrer"">here</a>.</p>
","56153493","640","<python><typescript><hmac>","2","0","1","2019-05-15 16:04:06","","0","","4186830","","2019-05-15 16:04:06","2019-05-15 15:39:41","","","2019-05-15 16:02:54"
"44790350","R HMAC-SHA512 signing","<p>I am currently trying to use a HMAC-SHA512 signing to get authentified on a website in order to request through the website api some personal details.</p>

<p>The website displays some code (but not in r!) for users :</p>

<pre><code>$apikey='xxx';
$apisecret='xxx';
$nonce=time();
$uri='https://bittrex.com/api/v1.1/market/getopenorders?apikey='.$apikey.'&amp;nonce='.$nonce;
$sign=hash_hmac('sha512',$uri,$apisecret);
$ch = curl_init($uri);
curl_setopt($ch, CURLOPT_HTTPHEADER, array('apisign:'.$sign));
$execResult = curl_exec($ch);
$obj = json_decode($execResult);
</code></pre>

<p>I have tried to reproduce the code in r :</p>

<pre><code>require(""curl"")
require(""digest"")
require(jsonlite)
require(httr)
require(""RCurl"")
</code></pre>

<p>The first step seems quite easy :</p>

<pre><code>apikey = ""2...XXX...3""
apisecret = ""7...XXX...c""
</code></pre>

<p>First issue : I do not know how to enter the time, I assume that Sys.time() is not suitable here, nor as.numeric(Sys.time()) as it is not an integer (maybe I am already wrong ...)</p>

<pre><code>nonce = floor(as.numeric(Sys.time()))
</code></pre>

<p>Then :</p>

<pre><code>uri = paste0('https://bittrex.com/api/v1.1/market/getopenorders?`apikey=',apikey,'&amp;nonce=',nonce)`
sign = hmac(apisecret,uri,""sha512"")
</code></pre>

<p>For the two last steps, I have tried :</p>

<pre><code>ch = binaryBuffer(uri)
curlSetOpt(ch, .forceHeaderNames = TRUE, sign)
execResult = GET(ch)
</code></pre>

<p>and got the following error message :</p>

<pre><code>Error in as.character.default(url) : 
  no method for coercing this S4 class to a vector
</code></pre>

<p>Does anyone noticed what was wrong with my code ? Any remark / question / suggestion will be highly appreciated !</p>
","<p>The following works for me</p>

<pre><code>library(jsonlite)
library(RCurl)
library(digest)

apikey = ""2...XXX...3"" #insert your key
apisecret = ""7...XXX...c"" #insert your secret
nonce=as.numeric(as.POSIXct(Sys.time()));

uri = paste0('https://bittrex.com/api/v1.1/market/getopenorders?apikey=',apikey,'&amp;nonce=',nonce)
sign = hmac(apisecret,uri,'sha512')

ch = getCurlHandle()
curlSetOpt(.opts=list(httpheader=c(apisign=sign)), .forceHeaderNames = TRUE, curl=ch)
ans = getURL(uri,curl=ch)
response = fromJSON(ans)
response$result #contains the table of orders
</code></pre>
","45048572","640","<r><hmac><rcurl>","1","0","1","2017-07-12 04:39:13","","0","1","4607317","","2017-06-27 22:35:21","2017-06-27 21:37:20","","","2017-07-12 04:39:13"
"44520702","Converting string in Base64 and HMAC sha1","<p>I need help with making a signature in swift 3 with <code>HMAC</code> <code>SHA1</code> for a web request.
I have an example in Java but really do not know how to do it in swift.</p>

<p>Java formula:</p>

<pre><code>signature = Base64.encode(HMAC_SHA1.digest(data,Base64.decode(client_secret))

signature = +t2GOKtZt1hU+C7OGBKZbDOKxds=
</code></pre>
","<p>Solution:</p>

<pre><code>extension Data {

    func hmacsha1(key: String) -&gt; String? {
        guard let keyData = Data(base64Encoded: key, options: .ignoreUnknownCharacters) else {
            return nil
        }
        var digest = [UInt8](repeating: 0, count: Int(CC_SHA1_DIGEST_LENGTH))
        self.withUnsafeBytes({ dataBytes in
            keyData.withUnsafeBytes({ keyDataBytes in
                CCHmac(CCHmacAlgorithm(kCCHmacAlgSHA1), keyDataBytes, keyData.count, dataBytes, self.count, &amp;digest)
            })
        })
        return Data(bytes: digest).base64EncodedString()
    }

}
</code></pre>

<p>Test:</p>

<pre><code>    let data = Data(""Test"".utf8)
    let key = Data(""Key"".utf8).base64EncodedString()
    let hmac = data.hmacsha1(key: key)
</code></pre>

<p>Result: <code>""xIcCRlnXa+IqFtO+9AF3OqeRdAU=""</code></p>
","44523853","638","<java><swift><base64><hmac><hmacsha1>","-1","0","3","2017-06-18 21:35:03","44619755","1","","","user7605325","2017-06-13 12:13:56","2017-06-13 11:49:34","","2017-06-14 11:50:24","2017-06-13 14:03:43"
"44520702","Converting string in Base64 and HMAC sha1","<p>I need help with making a signature in swift 3 with <code>HMAC</code> <code>SHA1</code> for a web request.
I have an example in Java but really do not know how to do it in swift.</p>

<p>Java formula:</p>

<pre><code>signature = Base64.encode(HMAC_SHA1.digest(data,Base64.decode(client_secret))

signature = +t2GOKtZt1hU+C7OGBKZbDOKxds=
</code></pre>
","<p>swift 3 :
first convert the image into data.Then convert this imageData to base64 string.</p>

<pre><code>      imgData = UIImageJPEGRepresentation(image, 0.9)! as Data
    strBase64 = imgData.base64EncodedString(options: .lineLength64Characters) as NSString
</code></pre>

<p>then use this base64 string wherever you want.</p>
","44524015","638","<java><swift><base64><hmac><hmacsha1>","-1","0","3","2017-06-18 21:35:03","44619755","1","","","user7605325","2017-06-13 12:13:56","2017-06-13 11:49:34","","","2017-06-13 14:11:38"
"44520702","Converting string in Base64 and HMAC sha1","<p>I need help with making a signature in swift 3 with <code>HMAC</code> <code>SHA1</code> for a web request.
I have an example in Java but really do not know how to do it in swift.</p>

<p>Java formula:</p>

<pre><code>signature = Base64.encode(HMAC_SHA1.digest(data,Base64.decode(client_secret))

signature = +t2GOKtZt1hU+C7OGBKZbDOKxds=
</code></pre>
","<p>Problem solved</p>

<pre><code>extension String {
    func hmac(algorithm: kCCHmacAlgSHA1, key: NSData) -&gt; String {
        let cKey = key
        let cData = self.cString(using: String.Encoding.ascii)
        var cHMAC = [CC_SHA1_DIGEST_LENGTH]
        CCHmac(CCHmacAlgorithm(kCCHmacAlgSHA1), cKey.bytes, cKey.length, cData, Int(strlen(cData!)), &amp;cHMAC)
        let hmacData:NSData = NSData(bytes: cHMAC, length: cHMAC)
        let hmacBase64 = hmacData.base64EncodedString(options: NSData.Base64EncodingOptions(rawValue: 0))
        return String(hmacBase64)
    }
}

let hmacResult: String = cData.hmac(algorithm: HMACAlgorithm.SHA1, key: keyData)
</code></pre>
","44619755","638","<java><swift><base64><hmac><hmacsha1>","-1","0","3","2017-06-18 21:35:03","44619755","1","","","user7605325","2017-06-13 12:13:56","2017-06-13 11:49:34","","","2017-06-18 21:35:03"
"19195900","Why does hmac use two solid pad paramaters?","<p>Hi I just understand it from a piece of code at wikipedia.
The problem is there're too many implementations that use solid pad parameters,
for eg:
  ipad would be [0x36 * blocksize]
  opad would be [0x5c * blocksize].</p>

<p>The questions are:</p>

<p>Why do people use this two solid pads in the code? Are they the best choice?
<br>
and Since it's solid, is this algorithm really securer than H(H(key+msg)+key)?</p>

<p>By the way, I must say many documents about hashes and authentication are really horrible.
<br>
Is it because the NSA asks them to not be clear?      </p>
","<p>First, HMAC comes from academic researchers Bellare, Rogaway, and Krawczyk.  NSA never touched HMAC, the standard is exactly as defined by the academic researchers.</p>

<p>The rationale for the choices of ipad and opad are explained in their paper <a href=""http://cseweb.ucsd.edu/~mihir/papers/kmd5.pdf"" rel=""nofollow"">Keying Hash Functions for Message Authentication</a> on page 14, but unless you are a cryptographer, you might have difficulty understanding it.</p>

<p>In a nut-shell, there is nothing special about those particular values.  Any constants would have worked.</p>
","24771562","631","<hmac>","2","0","1","2014-08-17 00:16:10","24771562","1","","544075","","2014-08-17 00:16:10","2013-10-05 08:59:57","","","2014-07-16 03:06:09"
"44908713","Converting HMAC Hash from C# to PHP","<p>I've looked at numerous questions around this but can't see the mistake I'm making. I'm trying to generate a Shared Access Signature to access an Azure SB Queue.</p>

<p>My C# code is working correctly:</p>

<pre><code>    var expiry = 1499177142;// GetExpiry();
    string stringToSign = HttpUtility.UrlEncode(resourceUri);// + ""\n"" + expiry;
    HMACSHA256 hmac = new HMACSHA256(Encoding.UTF8.GetBytes(key));

    Console.WriteLine(Encoding.UTF8.GetBytes(stringToSign));

    var signature = Convert.ToBase64String(hmac.ComputeHash(Encoding.UTF8.GetBytes(stringToSign)));
    Console.WriteLine(signature);

    var sasToken = String.Format(CultureInfo.InvariantCulture, ""SharedAccessSignature sr={0}&amp;sig={1}&amp;se={2}&amp;skn={3}"",
    HttpUtility.UrlEncode(resourceUri), HttpUtility.UrlEncode(signature), expiry, keyName);
    return sasToken;
// returns slXBw0u7Dt/YKS1Y+Wot02z730YXJ9NkS599JRzvDQI= for the signature element
</code></pre>

<p>My PHP gives a very different result:</p>

<pre><code>$stringToSign = rawurlencode($resourceURI);// . ""%0A"" . $expiry;

$sig = hash_hmac(""sha256"",utf8_encode($stringToSign),utf8_encode($key),false);
echo $sig.""&lt;br&gt;"";

$token = ""SharedAccessSignature sr="".urlencode($resourceURI)
.""&amp;sig="".rawurlencode(base64_encode($sig)).""&amp;se="".$expiry.""&amp;skn="".$keyName;
return $token; //returns MGNlZWViYWRmMjE2NWJhZGRjNWNhNDZkYWRlOTQyMzc3ODBhMWM2ZjA1OTk4MjI0MGUzMzllZmY4ZTk2OGUxNA==
</code></pre>

<p>I've tried encoding <code>$stringToSign</code> and <code>$key</code> and not in the hash, <code>strtoupper</code> and <code>strtolower</code> on the <code>$stringToSign</code> but can't get the result to be the same as C#</p>
","<p>This code should work in PHP and C#.</p>

<p>PHP:</p>

<pre><code>&lt;?php

$resourceURI = ""http://nifi-eventhub.servicebus.windows.net/hub1"";
$keyName = ""hub-user"";
$key = ""secret"";
$expiry = '1499177142'; // timestamp

// The format for the string is &lt;resourceURI&gt; + \n + &lt;expiry&gt;    
$stringToSign = strtolower(rawurlencode($resourceURI)) . ""\n"" . $expiry;

// Hash the URL encoded string using the shared access key
$sig = hash_hmac(""sha256"", utf8_encode($stringToSign), utf8_encode($key), false);

// Convert hexadecimal string to binary and then to base64
$sig = hex2bin($sig);
$sig = base64_encode($sig);

// 7kS3apSDpJFTYI1vxuo4t7syGG3FTBYI8foamMOtrEE=
echo $sig . ""&lt;br&gt;\n"";

// Generate authorization token
$token = ""SharedAccessSignature sr="" . urlencode($resourceURI) . ""&amp;sig="" . rawurlencode($sig) . ""&amp;se="" . $expiry . ""&amp;skn="" . $keyName;
echo $token . ""&lt;br&gt;\n"";
</code></pre>

<p>In C#</p>

<pre><code>string expiry = ""1499177142"";
string resourceUri = ""http://nifi-eventhub.servicebus.windows.net/hub1"";
string keyName = ""hub-user"";
string secretkey = ""secret"";

string stringToSign = HttpUtility.UrlEncode(resourceUri) + ""\n"" + expiry;

HMACSHA256 hmac = new HMACSHA256(Encoding.UTF8.GetBytes(secretkey));
byte[] hashBytes = hmac.ComputeHash(Encoding.UTF8.GetBytes(stringToSign));

var signature = Convert.ToBase64String(hashBytes);

// 7kS3apSDpJFTYI1vxuo4t7syGG3FTBYI8foamMOtrEE=
Console.WriteLine(signature);

var sasToken = String.Format(CultureInfo.InvariantCulture, ""SharedAccessSignature sr={0}&amp;sig={1}&amp;se={2}&amp;skn={3}"",
HttpUtility.UrlEncode(resourceUri), HttpUtility.UrlEncode(signature), expiry, keyName);

Console.WriteLine(sasToken);
</code></pre>
","44914217","630","<c#><php><hmac>","0","1","1","2017-07-05 07:44:31","44914217","2","","","","","2017-07-04 14:36:17","","2017-07-05 07:44:31","2017-07-04 21:30:52"
"21623857","C# vs PHP - They return different HMACSHA256","<p>This is my PHP code:</p>

<pre><code>&lt;?php
    $sig_string = ""GET&amp;https%3A%2F%2Fapi.pinterest.com%2Fv3%2Fusers%2Farchimede%2Fboards%2F&amp;client_id=987654&amp;timestamp=1391761866"";
    $secret = ""123456"";
    $sig = hash_hmac(""sha256"", $sig_string, $secret);
    echo $sig;
?&gt;
</code></pre>

<p>which returns (correctly) <code>a7918aec50919915f3cefed8622ddbe35448c8f71a54ad115828f07a05930f4c</code></p>

<p>Now, I want to translate this function inside C#. Code:</p>

<pre><code>signature_base_string = ""GET&amp;https%3A%2F%2Fapi.pinterest.com%2Fv3%2Fusers%2Farchimede%2Fboards%2F&amp;client_id=987654&amp;timestamp=1391761866"";
signing_key = ""123456"";
var encoding = new System.Text.ASCIIEncoding();
byte[] keyByte = encoding.GetBytes(signing_key);
byte[] messageBytes = encoding.GetBytes(signature_base_string);
using (var hmacsha256 = new HMACSHA256(keyByte))
{
    byte[] hashmessage = hmacsha256.ComputeHash(messageBytes);
    Response.Write(Convert.ToBase64String(hashmessage));
}
</code></pre>

<p>but it retuns <code>p5GK7FCRmRXzzv7YYi3b41RIyPcaVK0RWCjwegWTD0w=</code></p>

<p>Why two different results? Whats wrong in the C# code?</p>
","<p>They are the same:</p>

<p>The result from .NET C# is <code>p5GK7FCRmRXzzv7YYi3b41RIyPcaVK0RWCjwegWTD0w=</code>. This is a base64 string.</p>

<p>You can convert it to hexadecimal using <a href=""http://tomeko.net/online_tools/base64.php"" rel=""nofollow"">this tool</a> for example. And you'll get the same as PHP after converting:</p>

<p><code>A7918AEC50919915F3CEFED8622DDBE35448C8F71A54AD115828F07A05930F4C</code></p>
","21624032","626","<c#><php><.net><hash><hmac>","0","3","2","2014-02-07 12:21:49","21624080","0","1","","","","2014-02-07 09:27:17","","2014-02-07 10:25:57","2014-02-07 09:35:44"
"21623857","C# vs PHP - They return different HMACSHA256","<p>This is my PHP code:</p>

<pre><code>&lt;?php
    $sig_string = ""GET&amp;https%3A%2F%2Fapi.pinterest.com%2Fv3%2Fusers%2Farchimede%2Fboards%2F&amp;client_id=987654&amp;timestamp=1391761866"";
    $secret = ""123456"";
    $sig = hash_hmac(""sha256"", $sig_string, $secret);
    echo $sig;
?&gt;
</code></pre>

<p>which returns (correctly) <code>a7918aec50919915f3cefed8622ddbe35448c8f71a54ad115828f07a05930f4c</code></p>

<p>Now, I want to translate this function inside C#. Code:</p>

<pre><code>signature_base_string = ""GET&amp;https%3A%2F%2Fapi.pinterest.com%2Fv3%2Fusers%2Farchimede%2Fboards%2F&amp;client_id=987654&amp;timestamp=1391761866"";
signing_key = ""123456"";
var encoding = new System.Text.ASCIIEncoding();
byte[] keyByte = encoding.GetBytes(signing_key);
byte[] messageBytes = encoding.GetBytes(signature_base_string);
using (var hmacsha256 = new HMACSHA256(keyByte))
{
    byte[] hashmessage = hmacsha256.ComputeHash(messageBytes);
    Response.Write(Convert.ToBase64String(hashmessage));
}
</code></pre>

<p>but it retuns <code>p5GK7FCRmRXzzv7YYi3b41RIyPcaVK0RWCjwegWTD0w=</code></p>

<p>Why two different results? Whats wrong in the C# code?</p>
","<p>PHP encodes the result in hexadecimal and c# encodes that in base64. But the are same.</p>

<p>Change this line:</p>

<pre><code>Response.Write(Convert.ToBase64String(hashmessage));
</code></pre>

<p>To this:</p>

<pre><code>Response.Write(BitConverter.ToString(hashmessage).Replace(""-"", """").ToLower());
</code></pre>

<p>to have the result in hexadecimal encoding.</p>
","21624080","626","<c#><php><.net><hash><hmac>","0","4","2","2014-02-07 12:21:49","21624080","0","1","","","","2014-02-07 09:27:17","","2014-02-07 12:21:49","2014-02-07 09:37:56"
"52634129","Hmac-SHA256 not returning expected hash","<p>I realize there are a ton of questions on here about this, but after looking through a good portion of them I haven't really seen anything addressing my issue.</p>

<p>Using SHA256 on the following input I get the correct output:</p>

<pre><code>var canonString = 'GET\n'+
                    '/\n'+
                    'Action=ListUsers&amp;Version=2010-05-08\n'+
                    'content-type:application/x-www-form-urlencoded; charset=utf-8\n'+
                    'host:iam.amazonaws.com\n'+
                    'x-amz-date:20150830T123600Z\n'+
                    '\n'+
                    'content-type;host;x-amz-date\n'+
                    'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855';

console.log(CryptoJS.SHA256(canonString).toString()); //returns the expected value of f536975d06c0309214f805bb90ccff089219ecd68b2577efef23edd43b7e1a59
</code></pre>

<p>So SHA256 is working properly on that. Similarly, using the Hmac-SHA256 on the following input I get the correct response:</p>

<pre><code>var kDate = CryptoJS.HmacSHA256(""20150830"", ""AWS4wJalrXUtnFEMI/K7MDENG+bPxRfiCYEXAMPLEKEY"");
var kRegion = CryptoJS.HmacSHA256('us-east-1', kDate);
var kService = CryptoJS.HmacSHA256('iam', kRegion);
var kSigning = CryptoJS.HmacSHA256(""aws4_request"", kService);

console.log(kSigning.toString()); //returns the expected value of c4afb1cc5771d871763a393e44b703571b55cc28424d1a5e86da6ed3c154a4b9
</code></pre>

<p>So this Hmac-SHA256 function works correctly on this input. However, on the following input, Hmac-SHA256 DOES NOT return the expected output.</p>

<pre><code>var stringToSign = 'AWS4-HMAC-SHA256\n'+
                '20150830T123600Z\n'+
                '20150830/us-east-1/iam/aws4_request\n'+
                CryptoJS.SHA256(canonString).toString();

CryptoJS.HmacSHA256(kSigning.toString(), stringToSign); //Returns 8a96b6691875490d30d05731cc9aa26be1fd64cf611ed929753b6498075aa886
//Expected value is 5d672d79c15b13162d9279b0855cfba6789a8edb4c82c400e06b5924a6f2b5d7
//Trying in opposite order just in case
CryptoJS.HmacSHA256(stringToSign, kSigning.toString()); //Returns fe52b221b5173b501c9863cec59554224072ca34c1c827ec5fb8a257f97637b1
//Still not expected value which is 5d672d79c15b13162d9279b0855cfba6789a8edb4c82c400e06b5924a6f2b5d7
</code></pre>

<p>So, something is clearly going wrong with my stringToSign, and I don't know what it is. I was thinking that the newline character is being interpreted as two different characters and not just a single character. However, escaping it like '\\n' did not fix it either! I am at a loss here. Here are the two docs I've been following (<a href=""https://docs.aws.amazon.com/general/latest/gr/sigv4-create-string-to-sign.html"" rel=""nofollow noreferrer"">doc1</a> <a href=""https://docs.aws.amazon.com/general/latest/gr/sigv4-calculate-signature.html"" rel=""nofollow noreferrer"">doc2</a>). Does anyone know why I can't get the expected output?</p>
","<p>Remember that the sha256 digest is a byte sequence: it is not a ""normal string"". It looks like CryptoJS is converting the true sha256 digest to something else for convenience, so make it not do that and you're good to go.</p>

<p>Using Node's <code>crypto</code> library (which is a built-in API) rather than CryptoJS (which has absolutely terrible documentation, so using it is kind of questionable):</p>

<pre class=""lang-js prettyprint-override""><code>const crypto = require(""crypto"");

function HMAC(key, text) {
    return crypto.createHmac(""sha256"", key).update(text).digest();
}
</code></pre>

<p>And then we form the canonical hash:</p>

<pre class=""lang-js prettyprint-override""><code>const canonString = [
    'GET',
    '/',
    'Action=ListUsers&amp;Version=2010-05-08',
    'content-type:application/x-www-form-urlencoded; charset=utf-8',
    'host:iam.amazonaws.com',
    'x-amz-date:20150830T123600Z',
    '',
    'content-type;host;x-amz-date',
    'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'
].join('\n');

// note: plain hash, not a secret-key-seeded hash
const canonHash = crypto.createHash(""sha256"").update(canonString).digest();
console.log(""Canonical hash is   :"", canonHash.toString('hex'));
</code></pre>

<p>This yields <code>f536975d06c0309214f805bb90ccff089219ecd68b2577efef23edd43b7e1a59</code>. We then continue:</p>

<pre class=""lang-js prettyprint-override""><code>const kSecret = ""wJalrXUtnFEMI/K7MDENG+bPxRfiCYEXAMPLEKEY"";
const kDate = HMAC(""AWS4"" + kSecret,""20150830"");
const kRegion = HMAC(kDate,""us-east-1"");
const kService = HMAC(kRegion,""iam"");
const kSigning = HMAC(kService,""aws4_request"");
console.log(""kSigning hash is    :"", kSigning.toString('hex'));
</code></pre>

<p>Which yields <code>c4afb1cc5771d871763a393e44b703571b55cc28424d1a5e86da6ed3c154a4b9</code>: note that we do <strong>not</strong> do any hex conversion, because the hex digest is <strong>not</strong> the sha256 digest, it's a completely different string. We only convert to hex string to make the digest legible in the console log.</p>

<p>Then finally:</p>

<pre class=""lang-js prettyprint-override""><code>const stringToSign = [
    'AWS4-HMAC-SHA256',
    '20150830T123600Z',
    '20150830/us-east-1/iam/aws4_request',
    canonHash.toString('hex')
].join('\n');

const signed = HMAC(kSigning, stringToSign);
console.log(""Final signed hash is:"", signed.toString('hex'));
</code></pre>

<p>Which yields <code>5d672d79c15b13162d9279b0855cfba6789a8edb4c82c400e06b5924a6f2b5d7</code>. Note that here, we <em>had</em> to turn the canonical hash into a hexadecimal string, as per the instructions in the pages you link to, but we do <strong>not</strong> touch the <code>kSigning</code> digest, that has to stay a real sha256 byte string.</p>
","52635721","625","<javascript><amazon-web-services><hash><sha256><hmac>","1","1","1","2018-10-04 17:15:09","52635721","3","0","5425667","","2018-10-04 17:15:09","2018-10-03 19:10:13","","2018-10-03 21:20:01","2018-10-03 21:08:16"
"15401459","(Not-so)Clever key is causing problems with SHA512 Hmac in Node JS","<p>This is an oddball question, but I have been working on this for hours now and am not making much progress.  I am hoping someone here may be able to advise...</p>

<p>I am porting a script from php to node.  The php script makes use of this function:</p>

<pre><code>hash_hmac('sha512', $text, $key);
</code></pre>

<p>I have reproduced this in node using the crypto module:</p>

<pre><code>var hash = crypto.createHmac( ""sha512"", key );
hash.update( text );
return hash.digest( ""hex"" );
</code></pre>

<p>I have verified that these functions produce the same hash when given the same text and key.</p>

<p>Except...</p>

<p>The string that is being used for a key in php looks similar to this:  (Don't ask)</p>

<pre><code>define(""SITE_KEY"", ""
                                           __
     ,                                   ,' e`---o
    ((                                  (  | ___,'
     \\~-------------------------------' \_;/
     (                                     /
     /) ._______________________________.  )
    (( (                               (( ( 
     ``-'                               ``-'

"");
</code></pre>

<p>I have tried to reproduce this in Javascript like so:</p>

<pre><code>var key = ""\
                                           __\
     ,                                   ,' e`---o\
    ((                                  (  | ___,'\
     \\\\~-------------------------------' \\_;/\
     (                                     /\
     /) ._______________________________.  )\
    (( (                               (( ( \
     ``-'                               ``-'\
\
"";
</code></pre>

<p>But it doesn't work. (I assume it has to have something to do with the linebreaks).</p>

<p>Replacing the newlines with ""\r\n"" or ""\n"" as in the following also does not work:</p>

<pre><code>var key = ""\r\n                                           __\r\n     ,                                   ,' e`---o\r\n    ((                                  (  | ___,'\r\n     \\\\~-------------------------------' \\_;/\r\n     (                                     /\r\n     /) ._______________________________.  )\r\n    (( (                               (( ( \r\n     ``-'                               ``-'\r\n\r\n"";
</code></pre>

<p>Suggestions on how to fix this?  (Getting rid of the dog is not an option, unfortunately.)</p>

<p>Thanks (in advance) for your help.</p>
","<p>Try replacing all of the newlines in the PHP version with <code>\n</code> (and no newline) in the JS version. If that doesn't work, try replacing them all with <code>\r\n</code> — I bet PHP doesn't translate multiline literals in windows-formatted source :)</p>
","15401507","623","<javascript><node.js><hmac><sha512>","8","0","3","2013-03-14 06:49:23","15402913","3","3","1031947","","2013-03-14 05:14:04","2013-03-14 04:53:00","","","2013-03-14 04:57:36"
"15401459","(Not-so)Clever key is causing problems with SHA512 Hmac in Node JS","<p>This is an oddball question, but I have been working on this for hours now and am not making much progress.  I am hoping someone here may be able to advise...</p>

<p>I am porting a script from php to node.  The php script makes use of this function:</p>

<pre><code>hash_hmac('sha512', $text, $key);
</code></pre>

<p>I have reproduced this in node using the crypto module:</p>

<pre><code>var hash = crypto.createHmac( ""sha512"", key );
hash.update( text );
return hash.digest( ""hex"" );
</code></pre>

<p>I have verified that these functions produce the same hash when given the same text and key.</p>

<p>Except...</p>

<p>The string that is being used for a key in php looks similar to this:  (Don't ask)</p>

<pre><code>define(""SITE_KEY"", ""
                                           __
     ,                                   ,' e`---o
    ((                                  (  | ___,'
     \\~-------------------------------' \_;/
     (                                     /
     /) ._______________________________.  )
    (( (                               (( ( 
     ``-'                               ``-'

"");
</code></pre>

<p>I have tried to reproduce this in Javascript like so:</p>

<pre><code>var key = ""\
                                           __\
     ,                                   ,' e`---o\
    ((                                  (  | ___,'\
     \\\\~-------------------------------' \\_;/\
     (                                     /\
     /) ._______________________________.  )\
    (( (                               (( ( \
     ``-'                               ``-'\
\
"";
</code></pre>

<p>But it doesn't work. (I assume it has to have something to do with the linebreaks).</p>

<p>Replacing the newlines with ""\r\n"" or ""\n"" as in the following also does not work:</p>

<pre><code>var key = ""\r\n                                           __\r\n     ,                                   ,' e`---o\r\n    ((                                  (  | ___,'\r\n     \\\\~-------------------------------' \\_;/\r\n     (                                     /\r\n     /) ._______________________________.  )\r\n    (( (                               (( ( \r\n     ``-'                               ``-'\r\n\r\n"";
</code></pre>

<p>Suggestions on how to fix this?  (Getting rid of the dog is not an option, unfortunately.)</p>

<p>Thanks (in advance) for your help.</p>
","<p>There are no line breaks in the original string, to my knowledge.  The backslash at the end tells PHP that the next line is just a continuation of the previous.   To test whether I'm right or not, you could get PHP to print out the string and see if it has line breaks in it.  But I suspect that you can write this in one long, or joined, string in Javascript.</p>
","15402811","623","<javascript><node.js><hmac><sha512>","8","1","3","2013-03-14 06:49:23","15402913","3","3","1031947","","2013-03-14 05:14:04","2013-03-14 04:53:00","","","2013-03-14 06:42:17"
"15401459","(Not-so)Clever key is causing problems with SHA512 Hmac in Node JS","<p>This is an oddball question, but I have been working on this for hours now and am not making much progress.  I am hoping someone here may be able to advise...</p>

<p>I am porting a script from php to node.  The php script makes use of this function:</p>

<pre><code>hash_hmac('sha512', $text, $key);
</code></pre>

<p>I have reproduced this in node using the crypto module:</p>

<pre><code>var hash = crypto.createHmac( ""sha512"", key );
hash.update( text );
return hash.digest( ""hex"" );
</code></pre>

<p>I have verified that these functions produce the same hash when given the same text and key.</p>

<p>Except...</p>

<p>The string that is being used for a key in php looks similar to this:  (Don't ask)</p>

<pre><code>define(""SITE_KEY"", ""
                                           __
     ,                                   ,' e`---o
    ((                                  (  | ___,'
     \\~-------------------------------' \_;/
     (                                     /
     /) ._______________________________.  )
    (( (                               (( ( 
     ``-'                               ``-'

"");
</code></pre>

<p>I have tried to reproduce this in Javascript like so:</p>

<pre><code>var key = ""\
                                           __\
     ,                                   ,' e`---o\
    ((                                  (  | ___,'\
     \\\\~-------------------------------' \\_;/\
     (                                     /\
     /) ._______________________________.  )\
    (( (                               (( ( \
     ``-'                               ``-'\
\
"";
</code></pre>

<p>But it doesn't work. (I assume it has to have something to do with the linebreaks).</p>

<p>Replacing the newlines with ""\r\n"" or ""\n"" as in the following also does not work:</p>

<pre><code>var key = ""\r\n                                           __\r\n     ,                                   ,' e`---o\r\n    ((                                  (  | ___,'\r\n     \\\\~-------------------------------' \\_;/\r\n     (                                     /\r\n     /) ._______________________________.  )\r\n    (( (                               (( ( \r\n     ``-'                               ``-'\r\n\r\n"";
</code></pre>

<p>Suggestions on how to fix this?  (Getting rid of the dog is not an option, unfortunately.)</p>

<p>Thanks (in advance) for your help.</p>
","<p>Why not store the string BASE64 encoded? That way you don't need to worry about line breaks, whitespace, anything like that.</p>

<p>Seeing as your php code is storing the key (apparently) correctly, try a script like:</p>

<pre><code>&lt;?
$doggy_key = ....;
echo base64_encode($doggy_key);
</code></pre>

<p>Run it from the command-line, copy the encoded key, then use it in your javascript.
Decoding base64 strings is a simple problem, for example;
<a href=""https://stackoverflow.com/questions/2820249/base64-encoding-and-decoding-in-client-side-javascript"">Base64 encoding and decoding in client-side Javascript</a></p>
","15402913","623","<javascript><node.js><hmac><sha512>","8","3","3","2013-03-14 06:49:23","15402913","3","3","1031947","","2013-03-14 05:14:04","2013-03-14 04:53:00","","2017-05-23 12:21:52","2013-03-14 06:49:23"
"22113859","PKE REST Auth using SHA-1 Hash","<p>I'm designing my first RESTful API and am trying to figure out how I'm going to authenticate API calls. I've worked with the <a href=""http://developers.gengo.com/v2/authentication/"" rel=""nofollow"">Gengo API (dev docs)</a> in the past and had great luck with it, so admittedly, am basing a lot of my auth design on their algorithm described in that link.</p>

<p>To sum their process up, to create a valid/authenticated API call:</p>

<ol>
<li>Register for an account with them and generate a public/private key set. Then for each API call:</li>
<li>Obtain the UNIX epoch timestamp that the call is being made at.</li>
<li>Calculate the SHA-1 hash of your timestamp ""against"" your private key.</li>
<li>Make sure that your public key, private key and the calculated hash (above) is present as 3 separate HTTP parameters with every single API call.</li>
</ol>

<p>At first this was a little confusing to me, but I was able to get authentication working pretty quickly with their API. But I never fully understood <strong>why</strong> I had to generate this SHA-1 hash, and I had no clue what they were doing on the server-side to actually authenticate my API calls.</p>

<p>Now that I'm writing my own authenticated API, I need to understand these things. So I ask:</p>

<ol>
<li>What purpose does the timestamp and its derived SHA-1 hash serve? Why is it less secure to just require users send me their public/private keys with each API call?</li>
<li>Is this <code>pubkey + privkey + hashed_timestamp</code> method that Gengo is using a standardized practice for API auth? If so, does it have a name/algorithm? Are there other, equally-secure competitors to it?</li>
<li>I'm confused by the whole HMAC/SHA-1 stuff (see the link above for concrete example). I always thought SHA-1 was a one-way function that turned a string into a unqiue, encoded strinig similar to what MD5 offers. But in that example (see link), it looks like it's passing SHA-1 and the string to some HMAC algorithm. What purpose does this HMAC serve and why does it require 3 arguments (SHA-1, the timestamp and the private key)?</li>
<li>Finally, what do I do with the 3 parameters (pub key, priv key, hashed timestamp) on the server-side to perform authentication? If I was designing a system that <em>only</em> used the pub/priv keys, then I would treat them like a username/password combo and would check the database to see if that combo existed or not. But the hashed timestamp is really throwing me off here.</li>
</ol>
","<blockquote>
  <p>What purpose does the timestamp and its derived SHA-1 hash serve? Why is it less secure to just require users send me their public/private keys with each API call?</p>
</blockquote>

<p>To clear any misunderstanding you seem to have up front, the user should <strong>never</strong> send the private key over the network. The private key is to stay private. It is a secret shared between you and the user. Reread the Gengo link, you'll see that it is only used as a <em>parameter</em> to the HMAC function. It is up to the user to find a way to secure it, but your API does not need it to verify calls.</p>

<p>The timestamp serves two purposes. First it is a piece of data for which you will get both the plaintext and the HMAC. You will be recomputing the HMAC on your side with the private key of the user. If the HMAC checks, it means that not only the timestamp was not tampered with, but also that only someone knowing the private key could have sent it. It provides integrity and authenticity for that piece of data.</p>

<p>If it was a simple SHA1, a attacker could have intercepted the message, changed the timestamp, and recomputed the hash. By using a <em>keyed hash</em>, you ensure that the sender is who you think he is.</p>

<p>The second purpose for the timestamp is to prevent replay attacks. Even if using a keyed hash, the attacker could have captured an old request and send it again, possibly triggering unwanted actions. If your users hash the time and you test it and reject requests that are unreasonably old, you can prevent such replay attacks.  </p>

<blockquote>
  <p>Is this pubkey + privkey + hashed_timestamp method that Gengo is using a standardized practice for API auth? If so, does it have a name/algorithm? Are there other, equally-secure competitors to it?</p>
</blockquote>

<p>Again the privkey is not sent through the pipe. Using HMAC for API authentication is quite common. It is used for <a href=""http://docs.aws.amazon.com/AmazonS3/latest/dev/RESTAuthentication.html#ConstructingTheAuthenticationHeader"" rel=""nofollow"">Amazon Web Services</a> for example. When used in the Gengo way, the fact that there is seemingly a public/private key pair can be confusing, it is really still symmetric cryptography, and the private key is used as a shared secret.</p>

<p>However I think it is better to include more than just the timestamp in the data that is HMAC'ed. Otherwise an attacker could tamper with other parts of the request. The headers, the HTTP verb, and a hash of the content of the request should be included as well.</p>

<p>Another scheme is to use the private key on client side to <em>sign</em> (encrypt with the private key) a piece of data, so the server only needs to <em>verify</em> it with the public key of the client and needs not know the private key of the client. Embedding a time information is still needed to prevent replays. I do not know much about this scheme, it might be hard to reliably link clients with a given public key in the first place.</p>

<blockquote>
  <p>What purpose does this
  HMAC serve and why does it require 3 arguments (SHA-1, the timestamp
  and the private key)?</p>
</blockquote>

<p>An HMAC is a keyed hash. Consider the simplest form of message authentication: <code>hash(key + message</code>). It was found that this was not secure (see <a href=""https://en.wikipedia.org/wiki/Length_extension_attack"" rel=""nofollow"">length extension attack</a>) and a nested structure fixes the vulnerability. </p>

<p>HMAC is a generic name of that structure: <code>hash(k1 + hash(k2 + message))</code>, where <code>k1</code> and <code>k2</code> are derived from the actual secret key. So when we do an HMAC we need to pass the name of the actual hash algorithm that will be used (here SHA-1), the message (here, the timestamp), and the secret key.</p>

<blockquote>
  <p>Finally, what do I do with the 3 parameters (pub key, priv key, hashed
  timestamp) on the server-side to perform authentication? If I was
  designing a system that only used the pub/priv keys, then I would
  treat them like a username/password combo and would check the database
  to see if that combo existed or not. But the hashed timestamp is
  really throwing me off here.</p>
</blockquote>

<p>Hopefully clearer by now. You use the public key as an identifier to retrieve the private key. You take the <code>ts</code> header and recompute the HMAC of it with the private key. If it matches with the hmac header sent, the request is authentic. You check the actual timestamp to see if it's not an old request replayed by some attacker. If all checks, the call can go through. I think it's better to embed all the important information in the HMAC, not just a timestamp though.</p>
","22159742","621","<api><rest><authentication><public-key-encryption><hmac>","0","0","2","2014-03-10 15:29:04","","0","","","","","2014-03-01 11:38:29","","2014-03-03 23:31:23","2014-03-03 23:25:16"
"22113859","PKE REST Auth using SHA-1 Hash","<p>I'm designing my first RESTful API and am trying to figure out how I'm going to authenticate API calls. I've worked with the <a href=""http://developers.gengo.com/v2/authentication/"" rel=""nofollow"">Gengo API (dev docs)</a> in the past and had great luck with it, so admittedly, am basing a lot of my auth design on their algorithm described in that link.</p>

<p>To sum their process up, to create a valid/authenticated API call:</p>

<ol>
<li>Register for an account with them and generate a public/private key set. Then for each API call:</li>
<li>Obtain the UNIX epoch timestamp that the call is being made at.</li>
<li>Calculate the SHA-1 hash of your timestamp ""against"" your private key.</li>
<li>Make sure that your public key, private key and the calculated hash (above) is present as 3 separate HTTP parameters with every single API call.</li>
</ol>

<p>At first this was a little confusing to me, but I was able to get authentication working pretty quickly with their API. But I never fully understood <strong>why</strong> I had to generate this SHA-1 hash, and I had no clue what they were doing on the server-side to actually authenticate my API calls.</p>

<p>Now that I'm writing my own authenticated API, I need to understand these things. So I ask:</p>

<ol>
<li>What purpose does the timestamp and its derived SHA-1 hash serve? Why is it less secure to just require users send me their public/private keys with each API call?</li>
<li>Is this <code>pubkey + privkey + hashed_timestamp</code> method that Gengo is using a standardized practice for API auth? If so, does it have a name/algorithm? Are there other, equally-secure competitors to it?</li>
<li>I'm confused by the whole HMAC/SHA-1 stuff (see the link above for concrete example). I always thought SHA-1 was a one-way function that turned a string into a unqiue, encoded strinig similar to what MD5 offers. But in that example (see link), it looks like it's passing SHA-1 and the string to some HMAC algorithm. What purpose does this HMAC serve and why does it require 3 arguments (SHA-1, the timestamp and the private key)?</li>
<li>Finally, what do I do with the 3 parameters (pub key, priv key, hashed timestamp) on the server-side to perform authentication? If I was designing a system that <em>only</em> used the pub/priv keys, then I would treat them like a username/password combo and would check the database to see if that combo existed or not. But the hashed timestamp is really throwing me off here.</li>
</ol>
","<p>You need <em>either</em> public key cryptography <em>or</em> an HMAC, not both.</p>

<p>Let's come back to the timestamp later, and you're confusing authentication with integrity, which we'll also come back to later.</p>

<p>Authentication: in your case this is where the client proves knowledge of some secret to the server. Two common ways to do this are via public key cryptography and using an HMAC.</p>

<ul>
<li><p>PKC: before using the service a public/private key pair is generated. The client has the private key; the server has the public key. Important: the private key never leaves the client. In particular, the server does not have access to the private key. To authenticate, the client encrypts some random value N (called a nonce), and sends N and its encrypted form to the server. The server uses the public key to decrypt the encrypted nonce and confirms that it equals the supplied nonce. This proves to the server that the client has the private key.</p></li>
<li><p>HMAC: client and server agree a shared secret K beforehand. To authenticate, the client creates a nonce N, computes HMAC(K, N), and sends N and HMAC(K, N) to the server. The server also computes HMAC(K, N) since it knows the shared secret and has received N from the client. If the computed and received HMAC(K, N) values are the same then the server knows that the client has the shared secret K.</p></li>
</ul>

<p>The HMAC approach has one significant weakness compared with PKC: if the server is compromised then the attacked gains knowledge of K and can then use that to masquerade as the client.</p>

<p>If using PKC, ideally generate the keypair on the client and send the public key to the server. That way the server <em>never</em> has the private key.</p>

<p>However, unless the communication channel is confidential (e.g. uses SSL/TLS), both approaches have a problem: replay attacks. A passive observer can record the N+encrypted form, or N+HMAC(K,N) and replay them to the server. The server will then think that the observer is a valid client.</p>

<p>Two standard defences are:</p>

<ul>
<li><p>Use a time-based nonce.</p></li>
<li><p>The server remembers previously-seen nonces, and rejects new requests that use a previously-seen nonce.</p></li>
</ul>

<p>That's where the timestamp comes in, and is discussed in more detail here: <a href=""https://stackoverflow.com/questions/22250771/should-i-sign-with-a-public-private-key-a-form-based-authentication-no-ssl/22252959#22252959"">Should I sign (with a public/private key) a form based authentication (no SSL)?</a></p>

<p>Integrity: we've proved to the server that we're a valid client, but we haven't provided any protection of the request itself. An attacker could modify our request in flight: we'd authenticate correctly but then execute the attacker's request rather than the client's original request.</p>

<p>To resolve this we need to protect the integrity of the request. We can do this with the same mechanism as above. Rather than just using a nonce (N) or nonce+timestamp, include the entire request in the data been encrypted or hashed. An important consideration here is that encrypted and hashing operate on bytes, not REST requests. You therefore need a reliable way to convert the REST request (i.e. HTTP method, URL, request parameters) into bytes. This is often called ""canonicalisation"": the client and server must both canonicalise the request in exactly the same way, so that they are encrypting/hashing the same bytes given the request.</p>

<p>This whole process is standardised in things like OAuth, e.g.  <a href=""https://dev.twitter.com/docs/auth/authorizing-request"" rel=""nofollow noreferrer"">https://dev.twitter.com/docs/auth/authorizing-request</a></p>

<p>To answer your specific questions:</p>

<ol>
<li><p>The timestamp defends against replay attacks: passive observers can't reply a client's session. The SHA-1 hash is used as a component of the HMAC.</p></li>
<li><p>Yes, to a point. But I'd use a fully-fledged implementation of it rather than rolling your own, such as something OAuth-based.</p></li>
<li><p>An HMAC is a keyed hash: it's like a standard cryptographic hash (such as SHA-1, except that you also include a shared secret key in the hash. Simply concatenating the key to the data being hashed has cryptographic weaknesses that the HMAC construct avoids. (<a href=""https://en.wikipedia.org/wiki/HMAC"" rel=""nofollow noreferrer"">https://en.wikipedia.org/wiki/HMAC</a>.)</p></li>
<li><p>If you're using PKC then you look up the client's public key on the server (based on some client ID, which ist <strong>not</strong> the client's private key), use that to decrypt the encrypted request, and verify that that request matches the received request. If you're using HMAC then you look up the client's shared secret, canonicalise the request, compute HMAC(K, R) and verify that it matches the received HMAC(K, R). In both cases you must also verify timestamps/nonces to protected against replays.</p></li>
</ol>

<p>BUT: rule #1 of crypto: don't roll your own. Use an established mechanism, such as OAuth. You probably also want to use SSL/TLS, which would then also let you use client certificates as a third authentication option. If you used those then you could also rely on SSL/TLS to give you integrity and replay protection. However, implementing SSL/TLS certificate validation correctly seems to fox many developers...</p>
","22304330","621","<api><rest><authentication><public-key-encryption><hmac>","0","0","2","2014-03-10 15:29:04","","0","","","","","2014-03-01 11:38:29","","2017-05-23 12:21:29","2014-03-10 15:29:04"
"43048532","HMAC for kong API","<p>please...</p>

<p>I need some help with configuration and usage of HMAC for KONG API.</p>

<p>I was following manual published at <a href=""https://getkong.org/plugins/hmac-authentication/"" rel=""nofollow noreferrer"">https://getkong.org/plugins/hmac-authentication/</a>   with demo credentials bob/secret456</p>

<p>The issue is with usage of HMAC auth. I am still getting 403 error - forbiden.</p>

<p>here is my command line output:</p>

<pre><code>root@test.com# curl -v http://X:8000/public4/ -H 'Authorization: hmac username=""bob"", algorithm=""hmac-sha1"", headers=""Date content-md5"", signature=""Base64(HMAC-SHA1(secret456))""'
&gt; GET /public4/ HTTP/1.1
&gt; User-Agent: curl/7.35.0
&gt; Host: XXX:8000
&gt; Accept: */*
&gt; Authorization: hmac username=""bob"", algorithm=""hmac-sha1"", headers=""X-Date content-md5"", signature=""Base64(HMAC-SHA1(secret456))"" &lt;&lt;- IS THIS CORRECT?
&gt;
&lt; HTTP/1.1 403 Forbidden
&lt; Date: Mon, 27 Mar 2017 13:15:07 GMT
&lt; Content-Type: application/json; charset=utf-8
&lt; Transfer-Encoding: chunked
&lt; Connection: keep-alive
* Server kong/0.9.7 is not blacklisted
&lt; Server: kong/0.9.7
&lt;
{""message"":""HMAC signature cannot be verified, a valid date or x-date header is required for HMAC Authentication""}
* Connection #0 to host XXX left intact
</code></pre>

<p>Kong consumer:</p>

<pre><code>{
  ""total"": 1,
  ""data"": [
    {
      ""consumer_id"": ""e98e1ca2-2f13-4430-a658-cabdd4e6cd26"",
      ""created_at"": 1490616124000,
      ""username"": ""bob"",
      ""id"": ""037db653-8b38-4a7e-b139-1040856b7cfb"",
      ""secret"": ""secret456""
    }
  ]
}
</code></pre>

<p>Any hint or guideline would be appreciated. Github issues are closed and comments didn't help. I am still getting same error.</p>

<p>Thank you indeed.</p>
","<p>You are including the string literal ""Base64(HMAC-SHA1(secret456))"" in your authorization header.  You should be calculating the HMAC of the password, base64 encoding it, and including that value instead.</p>
","43075948","620","<api><curl><hmac><kong>","1","2","1","2017-03-28 17:19:55","","1","","","","","2017-03-27 14:01:01","","","2017-03-28 17:19:55"
"28388310","Query string in session data causes HMAC mismatch","<p>Using codeigniter framework version 2.2.1. Attempting to store query string within session data via:</p>

<pre><code>$ci-&gt;session-&gt;set_userdata('parentCrumbs', array(
            '&lt;a href=""/store/items/' . $ci-&gt;input-&gt;server('QUERY_STRING') . '""&gt;Items&lt;/a&gt;'
        ));
</code></pre>

<p>My session is abandoned and I receive a message within the error log stating:</p>

<blockquote>
  <p>Session: HMAC mismatch. The session cookie data did not match what was expected.</p>
</blockquote>

<p>Is it not feasible to store a querystring within a session cookie? Is there something simple I'm missing or don't understand?</p>
","<p>I have not been encrypting my session cookies since this application is currently still in development and it has been useful up to this point to see the values of the session cookie from within the browser...However it turns out that this issue is not present when encrypting the session cookie via:</p>

<pre><code>$config['sess_encrypt_cookie']      = TRUE;
</code></pre>

<p>From within /application/config/config.php</p>
","28388700","619","<php><codeigniter><session-cookies><hmac>","0","0","1","2015-02-07 23:24:55","28388700","1","","","","","2015-02-07 22:39:29","","","2015-02-07 23:24:55"
"11833135","How do I share my mobile app's secret key with the server the first time I generate it?","<p>So I am working on a mobile app right now that will be making requests to a REST API built with Django.</p>

<p>In order to secure the API I plan on using a private/public key pair authentication system.</p>

<p>The workflow I have thought out goes something like this:</p>

<ol>
<li>The user logs in using Facebook</li>
<li>Once the user signs the app generates a private key</li>
<li>The private key is shared between the server and the app so that the server knows to map that private key to a specific user.</li>
<li>Every time the mobile app makes a request the app generates an HMAC/signature using the request parameters and the private key. In addition to the HMAC the app also sends the user_id of the user who sent it (this will act as the public key).</li>
<li>When the server receives the request it generates its own HMAC. Its takes the user_id and looks up the private key in a table. Using the private key it recreates the HMAC with the request parameters and compares it to the HMAC that the mobile app sent. If the server and the mobile have matching HMACs then it performs the request.</li>
</ol>

<p>Now my problem lies in step 3 where the private key has to somehow be shared between the mobile app and the server. How can I securely send the private key?</p>
","<p>I would start by asking why the server part of your app needs to know the private key. If it only wants to authenticate a user, it only needs the public key and the user id, and the user id cannot iself be the public key (you need a way to find out which public key to use).</p>

<p>For instance, the process of sharing the key, your step three, could look something like this:</p>

<ol>
<li>The app generates a public-private key pair.</li>
<li>The app sends the public key to the server, not caring who can intercept it.</li>
<li>The server stores that public key, associating it with the id the user provided.</li>
</ol>

<p>Maybe the integration into Facebook is the part that makes this impossible. I do not quite understand how Facebook comes into this whole process.</p>

<p>One thing that can make the transfer of a key slightly more secure is to use multiple channels to transfer it.</p>

<p>For instance, your application could send the private key that was generated using your REST API but encrypting it with a symmetric encryption scheme. The symmetric encryption key can be sent via some other medium, such as email, or through SMS since this is a mobile app, or maybe even an automated phone call placed to a number provided by the registering user. The key can be a random passphrase that generates the actual symmetric encryption key, to make sure it is something that can be typed in by the user. Then, to unlock the app, the user needs to type in this passphrase into a screen and the secret key is unlocked.</p>

<p>Again, this only improves the security of the transfer by a small margin, especially considering the fact that if you can intercept the transmission of the private key, you can probably intercept the email containing the passphrase. In my opinion, not sending the private key to the server would not only be optimal but required.</p>
","11833498","617","<django><api><rest><hmac>","5","5","1","2012-08-06 18:01:54","11833498","0","","","","","2012-08-06 17:35:47","","","2012-08-06 18:01:54"
"43808961","Hashing passwords and signature with HMAC any security advantages?","<p>I'm getting a bit confused about hashing passwords with a salt and the way of HMAC an password or using as a signature and so on. I've read a lot of articles about it but it seems that i don't got the point of using this or that.</p>

<p>I got this examples of using that ways (questions marked by a number):</p>

<h2>Hashed passwords</h2>

<p>Password from user is hashed with SHA-256 and a unique salt for each user stored in the database. Password and salt is just concatenated like this <code>hash(key + password)</code> and run multiple rounds of hashing.</p>

<ol>
<li>That may be vulnerable for an length extension attack right? </li>
<li>Would changing the order of values make any prevention of length
extension attacks? So changing <code>hash(key + password)</code> to <code>hash(password + key)</code>?</li>
</ol>

<p>A better way of hashing the user password seems to be HMAC. In this case using <code>hmac-sha256(password, salt)</code>. </p>

<ol start=""3"">
<li>But is this really better and more secure to use HMAC here? </li>
</ol>

<p>Some people said it makes no sense to use a salt as a password for HMAC
    but the salt is not visible for the user because it is just stored
    in the database. For me it's nothing other than a password. </p>

<h2>API authentication/validation</h2>

<p>For an API all users got a unique and random <code>api_key</code> and an <code>api_secret</code>.
The <code>api_key</code> is sent in all requests by an header to identify the user. That should be a kind of ""stateless authentication"".</p>

<p>The <code>api_secret</code> will be used in backend to generate a <code>signature</code> using <code>hmac-sha256((api_key + nonce), api_secret)</code>. </p>

<p>The <code>nonce</code> is a random value that is send in another header as plain text and as well as a hashed value to verify that the <code>nonce</code> itself won't be manipulated (well not really needed because it will change the whole <code>signature</code>)... so a kind of nonce-signature: </p>

<pre><code>rand = random();
hash = hmac-sha256(rand, api_secret);
nonce = rand + ""-"" + hash;
</code></pre>

<ol start=""4"">
<li>But is this really more secure than just make something like <code>hash(api_key + nonce + api_secret)</code> and leave the <code>nonce</code> without any nonce-signature?</li>
<li>Is there any security issue by providing multiple HMAC-hashes at the same time that are hashed with the same <code>api_secret</code>?</li>
<li>Any other toughts about that in point of security?</li>
</ol>

<p><em>It's hard for me to understand what the more or less secure ways of creating a secure hash are. Some people said ""ok, this is secure... you should do this"" and then other people said ""oh you forgot this or that attack or vulnerable"". So i try to understand how and why in a simple and ""i-am-a-dummie-way"".</em> </p>
","<p>SHA-256 is not a great hashing method. Use bcrypt, PBKDF2, or scrypt.</p>

<p>Make your salts the same length and put them first</p>

<p>Peppering (HMAC-ing passwords) is useful if you think you have the chance a SQL injection vulnerability down the road, and a lower chance of an application server vulnerability.</p>

<p>Correct peppering means your application server holds the key and it is <strong>not stored in your database</strong>. </p>

<p>If you accidentally have a SQL injection down the road, a hacker might steal all your peppered passwords, but wouldn't be able to steal the key</p>

<p>It sounds like you're going to be doing hashing on every request, which is going to painfully slow. You should hash once and provide a token</p>
","43812054","616","<security><hash><restful-authentication><sha256><hmac>","0","0","1","2017-05-05 18:59:01","","0","","","","","2017-05-05 15:43:31","","","2017-05-05 18:59:01"
"30994886","How to calaculate HMAC-SHA3 in Android using Crypto.js?","<p>I am using Android Studio 1.22 and JRE 1.8 with 64 bit JVM. How to import Crypto,js to Android? </p>

<p>I want to calculate 6 digit OTP from HMAC output. </p>
","<p>Have you checked this from Google code : 
<a href=""https://code.google.com/p/vellum/wiki/GoogleAuthenticator"" rel=""nofollow"">Google Authenticator</a></p>

<p>You can find step-by-step JAVA sample code in there.</p>

<p>Cheers.</p>
","31043340","616","<java><android><hmac><sha-3>","-1","0","2","2015-08-17 08:10:29","","0","","3798498","","2015-06-25 06:05:52","2015-06-23 05:56:50","","","2015-06-25 06:59:42"
"30994886","How to calaculate HMAC-SHA3 in Android using Crypto.js?","<p>I am using Android Studio 1.22 and JRE 1.8 with 64 bit JVM. How to import Crypto,js to Android? </p>

<p>I want to calculate 6 digit OTP from HMAC output. </p>
","<p>You can find implementation in java here :</p>

<p><a href=""https://github.com/romus/sha/blob/master/sha3/src/com/theromus/example/Main.java"" rel=""nofollow"">https://github.com/romus/sha/blob/master/sha3/src/com/theromus/example/Main.java</a> </p>
","32045383","616","<java><android><hmac><sha-3>","-1","0","2","2015-08-17 08:10:29","","0","","3798498","","2015-06-25 06:05:52","2015-06-23 05:56:50","","2015-08-17 08:10:29","2015-08-17 08:02:28"
"18504397","Is HMAC hash over HTTPS enough for my REST API?","<p>I am creating a REST API and am new to authentication.  After researching, is the following scheme safe?  </p>

<p>The user includes a hmac hash of their request along with their secret key.  Then the server takes the request, hashes it with the key, and compares it the user provided hash.  If it checks out, complete their request.  To protect against replays, you can have them include a UTC timestamp with their request and hash.  </p>

<p>I understand the above is pretty much two-legged oauth.</p>
","","","615","<rest><authentication><https><hmac>","1","","0","2013-08-29 07:09:17","","7","","","","","2013-08-29 07:09:17","","",""
"30387437","HMAC SHA-512 generation discrepancies between iOS and javascript libraries","<p>I am trying to replicate the Hmac generation behavior from my iOS app using SHA-512 algorithm referring to this link <a href=""https://stackoverflow.com/questions/756492/objective-c-sample-code-for-hmac-sha1"">Objective-C sample code for HMAC-SHA1</a>.</p>

<p>For this purpose, I have tried using <a href=""https://code.google.com/p/crypto-js/#SHA-2"" rel=""nofollow noreferrer"">CrytoJS</a> and <a href=""http://caligatio.github.io/jsSHA/"" rel=""nofollow noreferrer"">jsSHA</a> libraries to compute the Hmac using javascript code. I have found discrepancies in hmac values generated by these javascript libraries and the one that I have using my iOS code. </p>

<p>Can someone help me understand what could I be doing wrong here? I have a feeling that I am messing up with the format of key and counter values that are being passed to both the methods.</p>

<p>For example:
key = ""The quick brown fox jumps over the lazy dog""
counter = 123</p>

<p>Hmac generated by iOS code- 8d4b0f7c7f800ffd656829b98988048b49b08d0068f6fd33add8a02b6bce8097cdd3a69dc8292ec7cc04e15021afb4499afe4a292f8db082b2d253ddfe7d7015</p>

<p>Hmac generated by javascript libraries-
211935F67D87CBB6A98DE6A6D9D64F9AAF8DA5F09BF17F1B7E5BD46FCD9BEFBCD3585FB859BD042291AF5D79B6D92CF7B348CD6558A18AEF4328FAF344D63266</p>

<p>iOS Code:</p>

<pre><code>NSData *key = [key dataUsingEncoding:NSASCIIStringEncoding];
NSData *rawKeyData = [DataUtil rawDataFromHex:key];

//encode the counter
uint8_t tosign[8];
for (int i = sizeof(tosign) - 1; i &gt;= 0; i--) {
    tosign[i] = counter &amp; 0xff;
    counter &gt;&gt;= 8;
}

unsigned char cHMAC[CC_SHA512_DIGEST_LENGTH];
CCHmac(kCCHmacAlgSHA512, [rawKeyData bytes], [rawKeyData length], tosign, sizeof(tosign), cHMAC);

NSData *hmac = [NSData dataWithBytes:cHMAC length:sizeof(cHMAC)];

return hmac;
</code></pre>

<p>javascript Code:</p>

<pre><code>var hash = CryptoJS.HmacSHA512(""123"", ""The quick brown fox jumps over the lazy dog"");
</code></pre>
","<p>HMAC takes a data key and a key and data parameters which are bytes and returns bytes of a length determined by the hash  function specified.</p>

<p>Example:</p>

<pre><code>+ (NSData *)doHmacSha512:(NSData *)dataIn
                     key:(NSData *)key
{
    NSMutableData *macOut = [NSMutableData dataWithLength:CC_SHA512_DIGEST_LENGTH];

    CCHmac( kCCHmacAlgSHA512,
            key.bytes,
            key.length,
            dataIn.bytes,
            dataIn.length,
            macOut.mutableBytes);

    return macOut;
}
</code></pre>

<p>Test:</p>

<pre><code>NSData *keyData  = [@""MyTestKey"" dataUsingEncoding:NSASCIIStringEncoding];
NSData *data     = [@""Now is the time for all good computers to come to the aid of their masters."" dataUsingEncoding:NSASCIIStringEncoding];
NSData *hamcData = [Crypto doHmacSha512:data key:keyData]; // Where ""Crypto"" is the class ""doHmacSha512"" is defined in.
</code></pre>
","30389207","612","<javascript><ios><hmac><hmacsha1>","2","2","1","2017-07-04 12:29:56","","11","1","-1","","2017-05-23 10:27:06","2015-05-22 02:27:15","","2017-07-04 12:29:56","2015-05-22 05:47:18"
"47569092","HMAC signature in java","<p>I am trying to convert my node js POST call to Java. In doing so, i want to change the logic of HMAC signature generation to a java method. But the signature seems not matching in node js vs in java.  I will paste my node js and java code below for your reference:</p>

<pre><code>const crypto = require('crypto');
const CONTENT_TYPE = 'Content-Type';
const APPLICATION_JSON_UTF8 = 'application/json; charset=utf-8';
const SIGNATURE = 'X-Hub-Signature';


const botConfig = {
    webhookURL: 'WEBHOOK_URL',
    secretKey: 'hP6pFhyqazD3vCuw5wjzGwicqF3nPq1H'
};


function buildSignatureHeader(buf, secret) {
    return 'sha256=' + buildSignature(buf, secret);
}

function buildSignature(buf, secret) {
    const hmac = crypto.createHmac('sha256', Buffer.from(secret, 'utf8'));
    hmac.update(buf);
    return hmac.digest('hex');
}

app.get('/', function (req, res) {
    const recvMessage =  {
                        ""userId"":""USERID"",
                        ""messagePayload"": {
                            ""type"":""agent"",
                            ""text"": ""hi"",
                            ""channelName"":""ENDPOINT""
                        },
                        ""profile"": {""firstName"": 'SOMEUSER'}
                      };




console.log(""Going to Call"");
 const data = Buffer.from(JSON.stringify(recvMessage), 'utf8');
 const headers = {};
    headers[CONTENT_TYPE] = APPLICATION_JSON_UTF8;
    headers[SIGNATURE]    = buildSignatureHeader(data, botConfig.secretKey);
    var interactive = false;
    var oauth=false;
    console.log('signature:'+  buildSignatureHeader(JSON.stringify(recvMessage), botConfig.secretKey));
</code></pre>

<p>In Java my Code for certificate generation looks like :</p>

<pre><code>public class HmacSha1Signature {
  /*  public HmacSha1Signature() {
        super();
    }
*/
  private static final String HMAC_SHA1_ALGORITHM = ""HmacSHA1"";

          private static String toHexString(byte[] bytes) {
                  Formatter formatter = new Formatter();

                  for (byte b : bytes) {
                          formatter.format(""%02x"", b);
                  }

                  return formatter.toString();
          }

          public static String calculateRFC2104HMAC(String data, String key)
                  throws SignatureException, NoSuchAlgorithmException, InvalidKeyException
          {
               SecretKeySpec signingKey = new SecretKeySpec(key.getBytes(), ""HmacSHA256"");
              Mac mac = Mac.getInstance(""HmacSHA256"");
              mac.init(signingKey);

              return toHexString(mac.doFinal(data.getBytes()));
          }

          public static void main(String[] args) throws Exception {

                  String data= ""{\n"" + 
                  ""                        \""userId\"":\""USERID\"",\n"" + 
                  ""                        \""messagePayload\"": {\n"" + 
                  ""                            \""type\"":\""agent\"",\n"" + 
                  ""                            \""text\"": \""hi\"",\n"" + 
                  ""                            \""channelName\"":\""CHANNEL\""\n"" + 
                  ""                        },\n"" + 
                  ""                        \""profile\"": {\""firstName\"": 'SOMEUSER'}\n"" + 
                  ""                      }"";
                  String hmac = calculateRFC2104HMAC(data, ""hP6pFhyqazD3vCuw5wjzGwicqF3nPq1H"");

                  System.out.println(hmac);

          }
} 
</code></pre>

<p>In NODE JS my signature looks like:</p>

<pre><code>2176fd6b050b536f65ac146fb8471f1472098a7cc5e17bc61f85cf82e06e45d7
</code></pre>

<p>While in java it is : </p>

<pre><code>2a899031182deda92c4cf97dd84c246ff65371acb9c41c04c360e1ab512e6038
</code></pre>

<p>Can you guys help me pointing out the mistake i am making here. Why doesnt the signatures match ? </p>
","<p>For me the only way to compute HMAC signature that worked in Java is :</p>

<pre><code>import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;
import javax.xml.bind.DatatypeConverter;
import org.apache.commons.codec.binary.Hex;

final String HMAC_SHA512 = ""HmacSHA512"";
final String CHARSET = ""ISO-8859-1"";
final String HMAC_KEY = ""0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF01..."";

String hmacFootprint = null;
Mac mac = Mac.getInstance(HMAC_SHA512);
mac.init(new SecretKeySpec(DatatypeConverter.parseHexBinary(HMAC_KEY), mac.getAlgorithm()));
final byte[] macData = mac.doFinal(requestParameters.toString().getBytes());
byte[] hex = new Hex().encode(macData);
hmacFootprint = new String(hex, CHARSET).toUpperCase();
</code></pre>

<p>Hope it helps.</p>

<p>Thanks to this answer : <a href=""https://stackoverflow.com/questions/11670542/java-hmac-sha512-generation"">java hmac/sha512 generation</a></p>
","51203858","611","<java><node.js><hmac><hmacsha1>","0","0","1","2018-07-06 05:59:38","","2","","2515211","","2017-11-30 08:49:14","2017-11-30 08:39:48","","","2018-07-06 05:59:38"
"31729163","Clojure (or Java) equivalent to Ruby's HMAC.hexdigest","<p>When setting a webhook with the Github API, I can provide a secret. When Github sends me a POST request, this secret is used <a href=""https://developer.github.com/v3/repos/hooks/#create-a-hook"" rel=""nofollow"">to encode one of the headers</a>:</p>

<blockquote>
  <p>The value of this header is computed as the HMAC hex digest of the body, using the secret as the key.</p>
</blockquote>

<p>On the manual page, they link to <a href=""https://github.com/github/github-services/blob/f3bb3dd780feb6318c42b2db064ed6d481b70a1f/lib/service/http_helper.rb#L77"" rel=""nofollow"">this Ruby example</a></p>

<pre><code>OpenSSL::HMAC.hexdigest(HMAC_DIGEST, secret, body)
</code></pre>

<p>I need a way to reproduce this line in Clojure.</p>

<p>Googling around, I found a number of example functions (<a href=""https://crossclj.info/ns/clj-hmac/0.1.0/clj-hmac.core.html"" rel=""nofollow"">1</a>,<a href=""https://crossclj.info/fun/leiningen.jack-in/hex-digest.html"" rel=""nofollow"">2</a>,<a href=""https://crossclj.info/fun/caribou.auth/hexdigest.html"" rel=""nofollow"">3</a>) for this purpose, but none of them worked. I'm clearly doing something wrong, because they all provide the same result, but it doesn't match the header I receive from Github.</p>

<p>For example, this is the simplest implementation I managed to cook up.</p>

<pre><code>(ns website.test
  (:import javax.crypto.Mac
           javax.crypto.spec.SecretKeySpec
           org.apache.commons.codec.binary.Base64))

;;; Used in core.clj to verify that the payload matches the secret.x
(defn- hmac
  ""Generates a Base64 HMAC with the supplied key on a string of data.""
  [^String data]
  (let [algo ""HmacSHA1""
        signing-key (SecretKeySpec. (.getBytes hook-secret) algo)
        mac (doto (Mac/getInstance algo) (.init signing-key))]
    (str ""sha1=""
         (String. (Base64/encodeBase64 (.doFinal mac (.getBytes data)))
                  ""UTF-8""))))
</code></pre>

<p>Calling it on a particular <code>body</code> with a particular <code>hook-secret</code> set, gives me <code>""sha1=VtNhKZDOHPU4COL2FSke2ArvtQE=""</code>. Meanwhile, the header I get from Github is <code>sha1=56d3612990ce1cf53808e2f615291ed80aefb501</code>.</p>

<p>Clearly, Github is printing in hex, but all my attempt to format the output as hex led to much longer strings than that one. What am I doing wrong?</p>
","<p>Try this, <a href=""https://github.com/dustinconrad/crypto-tutorial/blob/master/test/crypto_tutorial/lib/hmac_test.clj"" rel=""nofollow"">excerpted from my github repo</a>:</p>

<pre><code>(ns crypto-tutorial.lib.hmac-test
  (:require [clojure.test :refer :all]
            [crypto-tutorial.lib.util :refer :all]
            [crypto-tutorial.lib.hmac :as hmac]))

(defn sha-1-hmac-reference-impl [key bytes]
  (let [java-bytes (-&gt;java-bytes bytes)
        java-key (-&gt;java-bytes key)]
    (-&gt;&gt;
      (doto (javax.crypto.Mac/getInstance ""HmacSHA1"")
        (.init (javax.crypto.spec.SecretKeySpec. java-key ""HmacSHA1"")))
      (#(.doFinal % java-bytes))
      (map (partial format ""%02x""))
      (apply str))))
</code></pre>
","31729268","607","<github><clojure><hmac><hmacsha1>","2","4","3","2016-07-27 07:10:09","31729411","0","","","","","2015-07-30 16:23:14","","","2015-07-30 16:28:55"
"31729163","Clojure (or Java) equivalent to Ruby's HMAC.hexdigest","<p>When setting a webhook with the Github API, I can provide a secret. When Github sends me a POST request, this secret is used <a href=""https://developer.github.com/v3/repos/hooks/#create-a-hook"" rel=""nofollow"">to encode one of the headers</a>:</p>

<blockquote>
  <p>The value of this header is computed as the HMAC hex digest of the body, using the secret as the key.</p>
</blockquote>

<p>On the manual page, they link to <a href=""https://github.com/github/github-services/blob/f3bb3dd780feb6318c42b2db064ed6d481b70a1f/lib/service/http_helper.rb#L77"" rel=""nofollow"">this Ruby example</a></p>

<pre><code>OpenSSL::HMAC.hexdigest(HMAC_DIGEST, secret, body)
</code></pre>

<p>I need a way to reproduce this line in Clojure.</p>

<p>Googling around, I found a number of example functions (<a href=""https://crossclj.info/ns/clj-hmac/0.1.0/clj-hmac.core.html"" rel=""nofollow"">1</a>,<a href=""https://crossclj.info/fun/leiningen.jack-in/hex-digest.html"" rel=""nofollow"">2</a>,<a href=""https://crossclj.info/fun/caribou.auth/hexdigest.html"" rel=""nofollow"">3</a>) for this purpose, but none of them worked. I'm clearly doing something wrong, because they all provide the same result, but it doesn't match the header I receive from Github.</p>

<p>For example, this is the simplest implementation I managed to cook up.</p>

<pre><code>(ns website.test
  (:import javax.crypto.Mac
           javax.crypto.spec.SecretKeySpec
           org.apache.commons.codec.binary.Base64))

;;; Used in core.clj to verify that the payload matches the secret.x
(defn- hmac
  ""Generates a Base64 HMAC with the supplied key on a string of data.""
  [^String data]
  (let [algo ""HmacSHA1""
        signing-key (SecretKeySpec. (.getBytes hook-secret) algo)
        mac (doto (Mac/getInstance algo) (.init signing-key))]
    (str ""sha1=""
         (String. (Base64/encodeBase64 (.doFinal mac (.getBytes data)))
                  ""UTF-8""))))
</code></pre>

<p>Calling it on a particular <code>body</code> with a particular <code>hook-secret</code> set, gives me <code>""sha1=VtNhKZDOHPU4COL2FSke2ArvtQE=""</code>. Meanwhile, the header I get from Github is <code>sha1=56d3612990ce1cf53808e2f615291ed80aefb501</code>.</p>

<p>Clearly, Github is printing in hex, but all my attempt to format the output as hex led to much longer strings than that one. What am I doing wrong?</p>
","<p>You are Base64 encoding the digest, whereas you need to convert it to hex.  You can do this as @RedDeckWins recommends <a href=""https://stackoverflow.com/questions/31729163/clojure-or-java-equivalent-to-rubys-hmac-hexdigest/31729268#31729268"">using <code>map</code></a>, but it would probably be more efficient to use a Java library.  <a href=""https://stackoverflow.com/questions/3208160/how-to-generate-an-hmac-in-java-equivalent-to-a-python-example/11102291#11102291"">This answer</a> to a similar question uses <code>org.apache.commons.codec.binary.Hex</code> to do the encoding.</p>
","31729411","607","<github><clojure><hmac><hmacsha1>","2","3","3","2016-07-27 07:10:09","31729411","0","","","","","2015-07-30 16:23:14","","2017-05-23 12:32:42","2015-07-30 16:36:27"
"31729163","Clojure (or Java) equivalent to Ruby's HMAC.hexdigest","<p>When setting a webhook with the Github API, I can provide a secret. When Github sends me a POST request, this secret is used <a href=""https://developer.github.com/v3/repos/hooks/#create-a-hook"" rel=""nofollow"">to encode one of the headers</a>:</p>

<blockquote>
  <p>The value of this header is computed as the HMAC hex digest of the body, using the secret as the key.</p>
</blockquote>

<p>On the manual page, they link to <a href=""https://github.com/github/github-services/blob/f3bb3dd780feb6318c42b2db064ed6d481b70a1f/lib/service/http_helper.rb#L77"" rel=""nofollow"">this Ruby example</a></p>

<pre><code>OpenSSL::HMAC.hexdigest(HMAC_DIGEST, secret, body)
</code></pre>

<p>I need a way to reproduce this line in Clojure.</p>

<p>Googling around, I found a number of example functions (<a href=""https://crossclj.info/ns/clj-hmac/0.1.0/clj-hmac.core.html"" rel=""nofollow"">1</a>,<a href=""https://crossclj.info/fun/leiningen.jack-in/hex-digest.html"" rel=""nofollow"">2</a>,<a href=""https://crossclj.info/fun/caribou.auth/hexdigest.html"" rel=""nofollow"">3</a>) for this purpose, but none of them worked. I'm clearly doing something wrong, because they all provide the same result, but it doesn't match the header I receive from Github.</p>

<p>For example, this is the simplest implementation I managed to cook up.</p>

<pre><code>(ns website.test
  (:import javax.crypto.Mac
           javax.crypto.spec.SecretKeySpec
           org.apache.commons.codec.binary.Base64))

;;; Used in core.clj to verify that the payload matches the secret.x
(defn- hmac
  ""Generates a Base64 HMAC with the supplied key on a string of data.""
  [^String data]
  (let [algo ""HmacSHA1""
        signing-key (SecretKeySpec. (.getBytes hook-secret) algo)
        mac (doto (Mac/getInstance algo) (.init signing-key))]
    (str ""sha1=""
         (String. (Base64/encodeBase64 (.doFinal mac (.getBytes data)))
                  ""UTF-8""))))
</code></pre>

<p>Calling it on a particular <code>body</code> with a particular <code>hook-secret</code> set, gives me <code>""sha1=VtNhKZDOHPU4COL2FSke2ArvtQE=""</code>. Meanwhile, the header I get from Github is <code>sha1=56d3612990ce1cf53808e2f615291ed80aefb501</code>.</p>

<p>Clearly, Github is printing in hex, but all my attempt to format the output as hex led to much longer strings than that one. What am I doing wrong?</p>
","<p>For future reference, here is a complete ring middleware for validating GitHub webhook calls in Clojure based on the answers in this and the cited threads:</p>

<p><a href=""https://gist.github.com/ska2342/4567b02531ff611db6a1208ebd4316e6#file-gh-validation-clj"" rel=""nofollow"">https://gist.github.com/ska2342/4567b02531ff611db6a1208ebd4316e6#file-gh-validation-clj</a></p>

<p>EDIT</p>

<p>The most important parts of the linked code are repeated here as (rightfully) requested in the comments.</p>

<pre><code>;; (c) 2016 Stefan Kamphausen
;; Released under the Eclipse Public License 
(def ^:const ^:private signing-algorithm ""HmacSHA1"")

(defn- get-signing-key* [secret]
  (SecretKeySpec. (.getBytes secret) signing-algorithm))
(def ^:private get-signing-key (memoize get-signing-key*))

(defn- get-mac* [signing-key]
  (doto (Mac/getInstance signing-algorithm)
    (.init signing-key)))
(def ^:private get-mac (memoize get-mac*))

(defn hmac [^String s signature secret]
  (let [mac (get-mac (get-signing-key secret))]
    ;; MUST use .doFinal which resets mac so that it can be
    ;; reused!
    (str ""sha1=""
         (Hex/encodeHexString (.doFinal mac (.getBytes s))))))

(defn- validate-string [^String s signature secret]
  (let [calculated (hmac s signature secret)]
    (= signature calculated)))

;; Warn: Body-stream can only be slurped once. Possible
;; conflict with other ring middleware
(defn body-as-string [request]
  (let [body (:body request)]
    (if (string? body)
      body
      (slurp body))))

(defn- valid-github? [secrets request]
  (let [body (body-as-string request)
        signature (get-in request [:headers ""x-hub-signature""])]
    (log/debug ""Found signature"" signature)
    (cond
      ;; only care about post
      (not (= :post (:request-method request)))
      ""no-validation-not-a-post""

      ;; No secrets defined, no need to validate
      (not (seq secrets))
      ""no-validation-no-secrets""

      ;; we have no signature but secrets are defined -&gt; fail
      (and (not signature) (seq secrets))
      false

      ;; must validate this content
      :else
      (some (partial validate-string body signature) secrets))))

(def default-invalid-response
  {:status  400
   :headers {""Content-Type"" ""text/plain""}
   :body    ""Invalid X-Hub-Signature in request.""})

(defn wrap-github-validation
  {:arglists '([handler] [handler options])}
  [handler &amp; [{:keys [secret secrets invalid-response]
               :or   {secret           nil
                      secrets          nil
                      invalid-response default-invalid-response}}]]
  (let [secs (if secret [secret] secrets)]
    (fn [request]
      (if-let [v (valid-github? secs request)]
        (do
          (log/debug ""Request validation OK:"" v)
          (handler (assoc request
                          :validation {:valid true
                                       :validation v}
                          ;; update body which must be an
                          ;; InputStream
                          :body (io/input-stream (.getBytes body)))))

        (do
          (log/warn ""Request invalid! Returning"" invalid-response)
invalid-response)))))
</code></pre>
","38583365","607","<github><clojure><hmac><hmacsha1>","2","-1","3","2016-07-27 07:10:09","31729411","0","","","","","2015-07-30 16:23:14","","2016-07-27 07:10:09","2016-07-26 07:15:13"
"29612613","Unable to produce Proper Encryption Key in Ruby using HMAC","<p>I am attempting to follow the documentation per <a href=""https://msdn.microsoft.com/en-us/library/azure/dn783368.aspx"" rel=""nofollow"">Access Control</a> and interrogating code like <a href=""https://github.com/Azure/azure-documentdb-node/blob/master/core_sdk/lib/auth.js"" rel=""nofollow"">azure-documentdb-node SDK</a> and I am unable to do so.</p>

<p>I get the following error: 401 Unauthorized: {""code"":""Unauthorized"",""message"":""The input authorization token can't serve the request. Please check that the expected payload is built as per the protocol, and check the key being used. Server used the following payload to sign: 'post\ndbs\n\n13 april 2015 18:21:05 gmt\n\n'\r\nActivityId: ...</p>

<p>My ruby code looks like the following:</p>

<pre><code>require 'openssl'
require 'rest-client'
require 'base64'
require 'uri'
require 'json'
require 'time'

def get_databases url, master_key
  time = Time.now.httpdate
  authorization = get_master_auth_token ""get"", """", ""dbs"", time, master_key
  header = { ""authorization"" =&gt; authorization, ""x-ms-date"" =&gt; time, ""x-ms-version"" =&gt; ""2015-04-08"" }
  RestClient.get url, header
end

def get_master_auth_token verb, resource_id, resource_type, date, master_key
  digest = OpenSSL::Digest::SHA256.new
  key = Base64.decode64 master_key
  text = verb + ""\n"" +
    resource_type + ""\n"" +
    resource_id + ""\n"" +
    date + ""\n"" +
    ""\n""
  hmac = OpenSSL::HMAC.digest digest, key, text.downcase
  auth_string = ""type="" + ""master"" + ""&amp;ver="" + ""1.0"" + ""&amp;sig="" + hmac
  URI.escape auth_string
end
</code></pre>

<p>Thanks!</p>

<p>EDIT: After Ryan's advice and example I've simplified the code down to the following snippit that should be a match for the node code he has posted BUT it still fails in ruby:</p>

<pre><code>def hard_coded_get_databases master_key, url
  verb = ""get""
  resource_type = ""dbs""
  resource_id = """"
  date = Time.now.httpdate
  serv_version = '2014-08-21'
  master_token = ""master""
  token_version = ""1.0""
  key = Base64.decode64 master_key
  text = verb + ""\n"" + resource_type + ""\n"" + resource_id + ""\n"" + date + ""\n\n""
  body = text.downcase.force_encoding ""utf-8""
  signature = OpenSSL::HMAC.digest OpenSSL::Digest::SHA256.new, key, body
  auth_token = URI.escape(""type=""+master_token + ""&amp;ver=""+token_version + ""&amp;sig=""+signature)

  header = { ""accept"" =&gt; ""application/json"", ""x-ms-version"" =&gt; serv_version, ""x-ms-date"" =&gt; date, ""authorization"" =&gt; auth_token }
  RestClient.get url, header
end
</code></pre>

<p>EDIT2: I believe I've isolated the problem to how I am doing the master key authentication.</p>

<p>Taking Ryan's example we can trim his node code down the following:</p>

<pre><code>var crypto = require(""crypto"")

function encode_message(masterKey, message) {
    var key = new Buffer(masterKey, ""base64""); // encode/decode? base64 the masterKey
    var body = new Buffer(message.toLowerCase(), ""utf8""); // convert message to ""utf8"" and lower case
    return crypto.createHmac(""sha256"", key).update(body).digest(""base64""); // encrypt the message using key
 }
</code></pre>

<p>If I call this node code I can produce the following key:</p>

<pre><code>encode_message(""blah"", 'get\ncolls\n\nTue, 14 Apr 2015 13:34:22 GMT\n\n')
'IYlLuyZtVLx5ANkGMAxviDHgC/DJJXSj1gUGLvN0oM8='
</code></pre>

<p>If I produce the equivalent ruby code to create the authentication my ruby code looks like the following:</p>

<pre><code>require 'base64'
require 'openssl'

def encode_message master_key, message
  key = Base64.urlsafe_decode64 master_key
  hmac = OpenSSL::HMAC.digest 'sha256', key, message
  Base64.urlsafe_encode64 hmac
end
</code></pre>

<p>If I call this code I get the following:</p>

<pre><code>2.2.1 :021 &gt; encode_message(""blah"", ""get\ncolls\n\nTue, 14 Apr 2015 13:34:22 GMT\n\n"")
 =&gt; ""N6BL3n4eSvYA8dIL1KzlTIvR3TcYpdqW2UNPtKWrjP8=""
</code></pre>

<p>Clearly the 2 encoded auth tokens are not the same. (Ryan again thanks so much for the help to get this far).</p>
","<p>i'll start off by apologizing for my limited Ruby knowledge but let me try assist here;</p>

<p>in your get_master_auth_token function it appears you are decoding the key before using it. is this correct? if so, why?</p>

<p>here is a node.js sample that uses the master key, builds up the auth header value and does a simple http call to list the collections in a database</p>

<pre><code>var crypto = require(""crypto"");
var https = require(""https"");

https.globalAgent.options.secureProtocol = ""TLSv1_client_method"";

var verb = 'get'; 
var resourceType = 'dbs'; //the resource you are trying to get. dbs, colls, docs etc. 
var resourceId = ''; //the parent resource id. note: not the id, but the _rid. but for you, because you are trying to lookup list of databases there is no parent
var masterKey = '...'; //your masterkey 
var date = new Date().toUTCString();

var auth = getAuthorizationTokenUsingMasterKey(verb, resourceId, resourceType, date, masterKey);

var options = {
hostname: '...', //your hostname (without https://)
port: 443,
path: '/dbs/',
method: 'GET',
    headers: {
        accept: 'application/json',
        'x-ms-version': '2014-08-21',
        'x-ms-date': date,
        authorization: auth,
    }
};

for (var i = 0; i &lt; 1000; i++) {
    var req = https.request(options, function (res) {
        process.stdout.write(new Date().toUTCString() + "" - statusCode: "" + res.statusCode + ""\n"");
        res.on('data', function (d) {
        }).on('error', function (e) {
        })
    });

    //console.log(req);

    req.end();
}

function getAuthorizationTokenUsingMasterKey(verb, resourceId, resourceType, date, masterKey) {
    var key = new Buffer(masterKey, ""base64"");

    var text = (verb || """") + ""\n"" + 
        (resourceType || """") + ""\n"" + 
        (resourceId || """") + ""\n"" + 
        (date || """") + ""\n"" + 
        ("""") + ""\n"";

    var body = new Buffer(text.toLowerCase(), ""utf8"");
    var signature = crypto.createHmac(""sha256"", key).update(body).digest(""base64"");

    var MasterToken = ""master"";    
    var TokenVersion = ""1.0"";

    return encodeURIComponent(""type="" + MasterToken + ""&amp;ver="" + TokenVersion + ""&amp;sig="" + signature);
}
</code></pre>

<p>In your example, the resourceId passed to the getAuthorizationTokenUsingMasterKey method should be """" and the resourceType should be ""dbs"" as you have it. </p>

<p>I did notice that in some cases you have to URI Encode the value, but I think you are doing that already as the very last line of the func. </p>

<p>the only difference I can spot in your code vs my code is that you appear to be decoding the master_key which I don't do. </p>

<p>what I would recommend you do is run this node sample and compare the values of the strings we have in body &amp; signature to the your values. they need to match. </p>
","29617488","606","<ruby><azure><hmac><sha256><azure-cosmosdb>","1","0","2","2015-04-14 16:07:11","29632213","1","","553893","","2015-04-14 15:53:02","2015-04-13 18:37:19","","2015-04-14 01:16:21","2015-04-14 00:59:03"
"29612613","Unable to produce Proper Encryption Key in Ruby using HMAC","<p>I am attempting to follow the documentation per <a href=""https://msdn.microsoft.com/en-us/library/azure/dn783368.aspx"" rel=""nofollow"">Access Control</a> and interrogating code like <a href=""https://github.com/Azure/azure-documentdb-node/blob/master/core_sdk/lib/auth.js"" rel=""nofollow"">azure-documentdb-node SDK</a> and I am unable to do so.</p>

<p>I get the following error: 401 Unauthorized: {""code"":""Unauthorized"",""message"":""The input authorization token can't serve the request. Please check that the expected payload is built as per the protocol, and check the key being used. Server used the following payload to sign: 'post\ndbs\n\n13 april 2015 18:21:05 gmt\n\n'\r\nActivityId: ...</p>

<p>My ruby code looks like the following:</p>

<pre><code>require 'openssl'
require 'rest-client'
require 'base64'
require 'uri'
require 'json'
require 'time'

def get_databases url, master_key
  time = Time.now.httpdate
  authorization = get_master_auth_token ""get"", """", ""dbs"", time, master_key
  header = { ""authorization"" =&gt; authorization, ""x-ms-date"" =&gt; time, ""x-ms-version"" =&gt; ""2015-04-08"" }
  RestClient.get url, header
end

def get_master_auth_token verb, resource_id, resource_type, date, master_key
  digest = OpenSSL::Digest::SHA256.new
  key = Base64.decode64 master_key
  text = verb + ""\n"" +
    resource_type + ""\n"" +
    resource_id + ""\n"" +
    date + ""\n"" +
    ""\n""
  hmac = OpenSSL::HMAC.digest digest, key, text.downcase
  auth_string = ""type="" + ""master"" + ""&amp;ver="" + ""1.0"" + ""&amp;sig="" + hmac
  URI.escape auth_string
end
</code></pre>

<p>Thanks!</p>

<p>EDIT: After Ryan's advice and example I've simplified the code down to the following snippit that should be a match for the node code he has posted BUT it still fails in ruby:</p>

<pre><code>def hard_coded_get_databases master_key, url
  verb = ""get""
  resource_type = ""dbs""
  resource_id = """"
  date = Time.now.httpdate
  serv_version = '2014-08-21'
  master_token = ""master""
  token_version = ""1.0""
  key = Base64.decode64 master_key
  text = verb + ""\n"" + resource_type + ""\n"" + resource_id + ""\n"" + date + ""\n\n""
  body = text.downcase.force_encoding ""utf-8""
  signature = OpenSSL::HMAC.digest OpenSSL::Digest::SHA256.new, key, body
  auth_token = URI.escape(""type=""+master_token + ""&amp;ver=""+token_version + ""&amp;sig=""+signature)

  header = { ""accept"" =&gt; ""application/json"", ""x-ms-version"" =&gt; serv_version, ""x-ms-date"" =&gt; date, ""authorization"" =&gt; auth_token }
  RestClient.get url, header
end
</code></pre>

<p>EDIT2: I believe I've isolated the problem to how I am doing the master key authentication.</p>

<p>Taking Ryan's example we can trim his node code down the following:</p>

<pre><code>var crypto = require(""crypto"")

function encode_message(masterKey, message) {
    var key = new Buffer(masterKey, ""base64""); // encode/decode? base64 the masterKey
    var body = new Buffer(message.toLowerCase(), ""utf8""); // convert message to ""utf8"" and lower case
    return crypto.createHmac(""sha256"", key).update(body).digest(""base64""); // encrypt the message using key
 }
</code></pre>

<p>If I call this node code I can produce the following key:</p>

<pre><code>encode_message(""blah"", 'get\ncolls\n\nTue, 14 Apr 2015 13:34:22 GMT\n\n')
'IYlLuyZtVLx5ANkGMAxviDHgC/DJJXSj1gUGLvN0oM8='
</code></pre>

<p>If I produce the equivalent ruby code to create the authentication my ruby code looks like the following:</p>

<pre><code>require 'base64'
require 'openssl'

def encode_message master_key, message
  key = Base64.urlsafe_decode64 master_key
  hmac = OpenSSL::HMAC.digest 'sha256', key, message
  Base64.urlsafe_encode64 hmac
end
</code></pre>

<p>If I call this code I get the following:</p>

<pre><code>2.2.1 :021 &gt; encode_message(""blah"", ""get\ncolls\n\nTue, 14 Apr 2015 13:34:22 GMT\n\n"")
 =&gt; ""N6BL3n4eSvYA8dIL1KzlTIvR3TcYpdqW2UNPtKWrjP8=""
</code></pre>

<p>Clearly the 2 encoded auth tokens are not the same. (Ryan again thanks so much for the help to get this far).</p>
","<p>I have found the answer.  Thanks to Magnus Stahre ... he is the man for helping me figure it out.</p>

<p>It was the encoding as I thought and the trick is this:</p>

<pre><code>def encode_message master_key, message
  key = Base64.urlsafe_decode64 master_key
  hmac = OpenSSL::HMAC.digest 'sha256', key, message.downcase
  Base64.encode64(hmac).strip
end
</code></pre>

<p>I was downcasing in my code too early AND my Base64.encode64 was failing to strip away a newline character that ruby was adding on the end.</p>
","29632213","606","<ruby><azure><hmac><sha256><azure-cosmosdb>","1","1","2","2015-04-14 16:07:11","29632213","1","","553893","","2015-04-14 15:53:02","2015-04-13 18:37:19","","","2015-04-14 16:07:11"
"33566756","Java Mac HMAC vs C++ OpenSSL hmac","<p>This is going to be a long question but I have a really weird bug. I use OpenSSL in C++ to compute a HMAC and compare them to a simular implementation using javax.crypto.Mac. For some keys the HMAC calculation is correct and for others there is a difference in HMAC. I believe the problem occurs when the keys get to big. Here are the details.</p>

<p>Here is the most important code for C++:</p>

<pre><code>void computeHMAC(std::string message, std::string key){
    unsigned int digestLength = 20;
    HMAC_CTX hmac_ctx_;
    BIGNUM* key_ = BN_new();;

    BN_hex2bn(&amp;key_, key); 

    unsigned char convertedKey[BN_num_bytes(key_)];
    BIGNUM* bn = BN_new();

    HMAC_CTX_init(&amp;hmac_ctx_);

    BN_bn2bin(bn, convertedKey);
    int length = BN_bn2bin(key_, convertedKey);

    HMAC_Init_ex(&amp;hmac_ctx_, convertedKey, length, EVP_sha1(), NULL);

/*Calc HMAC */
    std::transform( message.begin(), message.end(), message.begin(), ::tolower);
    unsigned char digest[digestLength];

    HMAC_Update(&amp;hmac_ctx_, reinterpret_cast&lt;const unsigned char*&gt;(message.c_str()),
      message.length());
    HMAC_Final(&amp;hmac_ctx_, digest, &amp;digestLength);
    char mdString[40];
    for(unsigned int i = 0; i &lt; 20; ++i){
        sprintf(&amp;mdString[i*2], ""%02x"", (unsigned int)digest[i]);
    }
     std::cout &lt;&lt; ""\n\nMSG:\n"" &lt;&lt; message &lt;&lt; ""\nKEY:\n"" + std::string(BN_bn2hex(key_)) + ""\nHMAC\n"" + std::string(mdString) + ""\n\n"";
}
</code></pre>

<p>The java test looks like this:</p>

<pre><code>public String calculateKey(String msg, String key) throws Exception{

    HMAC = Mac.getInstance(""HmacSHA1"");

    BigInteger k = new BigInteger(key, 16);

    HMAC.init(new SecretKeySpec(k.toByteArray(), ""HmacSHA1""));

    msg = msg.toLowerCase();
    HMAC.update(msg.getBytes());
    byte[] digest = HMAC.doFinal();

    System.out.println(""Key:\n"" + k.toString(16) + ""\n"");
    System.out.println(""HMAC:\n"" + DatatypeConverter.printHexBinary(digest).toLowerCase() + ""\n"");

    return DatatypeConverter.printHexBinary(digest).toLowerCase();
}
</code></pre>

<p>Some test runs with different keys (all strings are interpreted as hex):</p>

<hr>

<p>Key1:
736A66B29072C49AB6DC93BB2BA41A53E169D14621872B0345F01EBBF117FCE48EEEA2409CFC1BD92B0428BA0A34092E3117BEB4A8A14F03391C661994863DAC1A75ED437C1394DA0741B16740D018CA243A800DA25311FDFB9CA4361743E8511E220B79C2A3483FCC29C7A54F1EB804481B2DC87E54A3A7D8A94253A60AC77FA4584A525EDC42BF82AE2A1FD6E3746F626E0AFB211F6984367B34C954B0E08E3F612590EFB8396ECD9AE77F15D5222A6DB106E8325C3ABEA54BB59E060F9EA0</p>

<p>Msg:
test</p>

<p>Hmac OpenSSL:
b37f79df52afdbbc4282d3146f9fe7a254dd23b3</p>

<p>Hmac Java Mac:
b37f79df52afdbbc4282d3146f9fe7a254dd23b3</p>

<hr>

<p>Key 2: 636A66B29072C49AB6DC93BB2BA41A53E169D14621872B0345F01EBBF117FCE48EEEA2409CFC1BD92B0428BA0A34092E3117BEB4A8A14F03391C661994863DAC1A75ED437C1394DA0741B16740D018CA243A800DA25311FDFB9CA4361743E8511E220B79C2A3483FCC29C7A54F1EB804481B2DC87E54A3A7D8A94253A60AC77FA4584A525EDC42BF82AE2A1FD6E3746F626E0AFB211F6984367B34C954B0E08E3F612590EFB8396ECD9AE77F15D5222A6DB106E8325C3ABEA54BB59E060F9EA0</p>

<p>Msg:
test</p>

<p>Hmac OpenSSL:
bac64a905fa6ae3f7bf5131be06ca037b3b498d7</p>

<p>Hmac Java Mac:
bac64a905fa6ae3f7bf5131be06ca037b3b498d7</p>

<hr>

<p>Key 3: 836A66B29072C49AB6DC93BB2BA41A53E169D14621872B0345F01EBBF117FCE48EEEA2409CFC1BD92B0428BA0A34092E3117BEB4A8A14F03391C661994863DAC1A75ED437C1394DA0741B16740D018CA243A800DA25311FDFB9CA4361743E8511E220B79C2A3483FCC29C7A54F1EB804481B2DC87E54A3A7D8A94253A60AC77FA4584A525EDC42BF82AE2A1FD6E3746F626E0AFB211F6984367B34C954B0E08E3F612590EFB8396ECD9AE77F15D5222A6DB106E8325C3ABEA54BB59E060F9EA0</p>

<p>Msg:
test</p>

<p>Hmac OpenSSL:
c189c637317b67cee04361e78c3ef576c3530aa7</p>

<p>Hmac Java Mac:
472d734762c264bea19b043094ad0416d1b2cd9c</p>

<p>As the data shows, when the key gets to big, an error occurs. If have no idea which implementation is faulty. I have also tried with bigger keys and smaller keys. I haven't determined the exact threshold. Can anyone spot the problem? Is there anyone capable of telling me which HMAC is incorrect in the last case by doing a simulation using different software or can anyone tell me which 3rd implementation I could use to check mine?</p>

<p>Kind regards,</p>

<p>Roel Storms</p>
","<p>When you convert a hexadecimal string to a <code>BigInt</code> in Java, it assumes the number is positive (unless the string includes a <code>-</code> sign).</p>

<p>But the internal representation of it is twos-complement. Meaning that one bit is used for the sign.</p>

<p>If you are converting a value that starts with a hex between <code>00</code> and <code>7F</code> inclusive, then that's not a problem. It can convert the byte directly, because the leftmost bit is zero, which means that the number is considered positive.</p>

<p>But if you are converting a value that starts with <code>80</code> through <code>FF</code>, then the leftmost bit is 1, which will be considered negative. To avoid this, and keep the <code>BigInteger</code> value exactly as it is supplied, it adds another zero byte at the beginning.</p>

<p>So, internally, the conversion of a number such as <code>7ABCDE</code> is the byte array</p>

<pre><code>0x7a 0xbc 0xde
</code></pre>

<p>But the conversion of a number such as <code>FABCDE</code> (only the first byte is different!), is:</p>

<pre><code>0x00 0xfa 0xbc 0xde
</code></pre>

<p>This means that for keys that begin with a byte in the range 80-FF, the <code>BigInteger.toByteArray()</code> is not producing the same array that your C++ program produced, but an array one byte longer.</p>

<p>There are several ways to work around this - like using your own hex-to-byte-array parser or finding an existing one in some library. If you want to use the one produced by <code>BigInteger</code>, you could do something like this:</p>

<pre><code>BigInteger k = new BigInteger(key, 16);
byte[] kByteArr = k.toByteArray();
if ( kByteArr.length &gt; (key.length() + 1) / 2 ) {
    kByteArr = Arrays.copyOfRange(kByteArr,1,kByteArr.length);
}
</code></pre>

<p>Now you can use the <code>kByteArr</code> to perform the operation properly.</p>

<p>Another issue you should watch out for is keys whose length is odd. In general, you shouldn't have a hex octet string that has an odd length. A string like <code>F8ACB</code> is actually <code>0F8ACB</code> (which is not going to cause an extra byte in BigInteger) and should be interpreted as such. This is why I wrote <code>(key.length() + 1)</code> in my formula - if key is odd-length, it should be interpreted as a one octet longer. This is also important to watch out for if you write your own hex-to-byte-array converter - if the length is odd, you should add a zero at the beginning before you start converting.</p>
","33567770","601","<java><c++><openssl><hmac><hmacsha1>","1","2","1","2015-11-06 13:20:42","33567770","7","","","","","2015-11-06 12:25:15","","","2015-11-06 13:20:42"
"44850789","trying to mock github webhook request, get: ""X-Hub-Signature does not match blob signature""","<p>Here is a little proxy server setup to handle github webhooks:</p>

<pre><code>require('dotenv').config();
var http = require('http');
var createHandler = require('github-webhook-handler');
var handler = createHandler({
  path: '/webhook',
  secret: process.env.GIT_WEBHOOK_SECRET
});

http
  .createServer(function(req, res) {
    handler(req, res, function(err) {
      res.statusCode = 404;
      res.end('no such location');
    });
  })
  .listen(8080);

handler.on('error', function(err) {
  console.error('Error:', err.message);
});

handler.on('push', function(event) {
  console.log(
    'Received a push event for %s to %s',
    event.payload.repository.name,
    event.payload.ref
  );
});

handler.on('issues', function(event) {
  console.log(
    'Received an issue event for %s action=%s: #%d %s',
    event.payload.repository.name,
    event.payload.action,
    event.payload.issue.number,
    event.payload.issue.title
  );
});
</code></pre>

<p>In postman, I have these headers set:</p>

<p><a href=""https://i.stack.imgur.com/8KouL.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/8KouL.png"" alt=""Headers""></a></p>

<p>The raw body is here: <a href=""https://developer.github.com/v3/activity/events/types/#pullrequestreviewevent"" rel=""nofollow noreferrer"">https://developer.github.com/v3/activity/events/types/#pullrequestreviewevent</a></p>

<p>Here is my pre-request script:</p>

<pre><code>var payload = request.data;
console.log(""Using payload as "" + payload)
var hash = CryptoJS.HmacSHA1(payload, environment.secret).toString(CryptoJS.enc.Hex)
postman.setGlobalVariable(""signature"", hash);
</code></pre>

<p>I can confirm that the <code>GIT_WEBHOOK_SECRET</code> in .env is the same as what is set in <code>secret</code> in my Postman environment settings.</p>
","<p>You need to set content of <code>X-Hub-Signature</code> as parameters with <code>sha1</code> field : </p>

<pre><code>var payload = request.data;
console.log(""Using payload as "" + payload)
var hash = CryptoJS.HmacSHA1(payload, environment.secret).toString(CryptoJS.enc.Hex)
postman.setGlobalVariable(""signature"", ""sha1="" + hash);
</code></pre>

<p>From <a href=""https://developer.github.com/webhooks/securing/#validating-payloads-from-github"" rel=""nofollow noreferrer"">validating payloads from Github</a> :</p>

<blockquote>
  <p>No matter which implementation you use, the hash signature starts with
  sha1=, using the key of your secret token and your payload body.</p>
</blockquote>
","45106605","599","<node.js><github><webhooks><hmac><cryptojs>","4","2","1","2017-07-14 15:45:45","45106605","0","2","","","","2017-06-30 16:09:28","","2017-07-14 15:45:45","2017-07-14 15:24:42"
"54458572","Invalid sign error on okex api v3 authenticated request","<p>I try to send authenticated request to new okex api.
part of their <a href=""https://www.okex.com/docs/en/#summary-yan-zheng"" rel=""nofollow noreferrer"">documentation</a>:</p>

<h1>Creating a Request</h1>

<p>All REST requests must contain the following headers:</p>

<p>OK-ACCESS-KEY The api key as a string.</p>

<h2>OK-ACCESS-SIGN The base64-encoded signature (see Signing a Message).</h2>

<p>OK-ACCESS-TIMESTAMP A timestamp for your request.</p>

<p>OK-ACCESS-PASSPHRASE The passphrase you specified when creating the API key.</p>

<p>All request bodies should have content type application/json and be valid JSON.</p>

<h1>Signing a Message</h1>

<p>The OK-ACCESS-SIGN header is generated by creating a sha256 HMAC using the base64-decoded secret key on the prehash string timestamp + method + requestPath + body (where + represents string concatenation), secretKey and base64-encode the output. For example: sign=CryptoJS.enc.Base64.stringify(CryptoJS.HmacSHA256(timestamp + 'GET' + '/users/self/verify', secretKey))</p>

<p>The timestamp value is the same as the OK-ACCESS-TIMESTAMP header and nanometer precision.</p>

<p>The method should be UPPER CASE, like GET/POST.</p>

<p>requestPath is the path of requesting an endpoint, such as：/orders?before=2&amp;limit=30.</p>

<p>The body is the request body string or omitted if there is no request body (typically for GET requests). For example:{""product_id"":""BTC-USD-0309"",""order_id"":""377454671037440""}</p>

<p>secretKey is generated when a user is subscribing to an Apikey. Prehash string:2018-03-08T10:59:25.789ZPOST/orders?before=2&amp;limit=30{""product_id"":""BTC-USD-0309"",""order_id"":""377454671037440""}</p>

<p>So that's what i tried</p>

<pre><code>BASE_URL = 'https://www.okex.com'.freeze

def base_api_endpoint
  url = URI.parse BASE_URL
  ""#{url.scheme}://#{url.host}:#{url.port}""
end

def authenticated_request(method, url, options = {}, paginated: false)
  raise Exceptions::InvalidApiKey if @key.blank? || @secret.blank? || @passphrase.blank?
  response = rest_connection.run_request(method, URI.encode(url), nil, nil) do |req|
    if method == :post
      req.body = options.to_json
    else
      req.params.merge! options
    end
  end
def rest_connection
  @conn ||= new_rest_connection
end

TimestampRequestMiddleware = Struct.new(:app) do
  def call(env)
    env[:request_headers].merge!('OK-ACCESS-TIMESTAMP' =&gt; Time.now.utc.iso8601(3))
    app.call env
  end
end

SignRequestMiddleware = Struct.new(:app, :key, :secret, :passphrase) do
  def call(env)
    request_path = env[:url].path
    if env[:url].query.present?
      request_path += ('?' + env[:url].query)
    end
    timestamp = env[:request_headers]['OK-ACCESS-TIMESTAMP']
    method = env[:method].to_s.upcase
    what = ""#{timestamp} + #{method} + #{request_path} + #{env.body}""
    decoded_secret = Base64.decode64(secret)
    mac  = OpenSSL::HMAC.digest('sha256', decoded_secret, what)
    sign = Base64.strict_encode64(mac)
    env[:request_headers].merge!('OK-ACCESS-KEY' =&gt; key, 'OK-ACCESS-SIGN' =&gt; sign, 'OK-ACCESS-TIMESTAMP' =&gt; timestamp, 'OK-ACCESS-PASSPHRASE' =&gt; passphrase)
    app.call env
  end
end

def new_rest_connection
  Faraday.new( base_api_endpoint, { ssl: { verify: false } }) do |conn|
    conn.use Market::OkexMarket::OkexCustomErrors, api_key: @key
    conn.request :json
    conn.response :json, content_type: /\bjson$/
    conn.response :logger, Logger.new(STDOUT) , bodies: true  if Rails.env.development?
    conn.use FaradayMiddleware::ParseJson, :content_type =&gt; /\bjson$/
    conn.use TimestampRequestMiddleware
    conn.use SignRequestMiddleware, @key, @secret, @passphrase
    conn.headers['Content-Type'] = 'application/json'
    conn.adapter :net_http
  end
end

def complete_balances
  data = authenticated_request(:get, '/api/spot/v3/accounts')
  data.map do |d|
    [
        d['currency'],
        {'available' =&gt; d['available'].to_f, 'onOrders' =&gt; d['hold'].to_f}
    ]
  end.to_h
end
</code></pre>

<p>But when i call complete_balances method, i got an error from okex 
    response: {""code""=>30013, ""message""=>""Invalid Sign""}
and i can't recognize where i'm wrong. Can someone help me with that?</p>
","<p>""... using the base64-decoded secret key ...""
I faced the same problem. After having examined their examples I found out the secret key does not need to be base64-decoded. Maybe we should assume we are already given a base64-decoded key. Anyway, as soon as you stop base64-decoding the secret key your signature generator should start working. Mine did.</p>
","55142849","598","<ruby-on-rails><hmac><faraday>","2","0","1","2019-03-13 13:18:50","","0","","","","","2019-01-31 10:34:05","","","2019-03-13 13:18:50"
"24620540","How to force jQuery Ajax to serialize data","<p><strong>Question:</strong> How do I force jQuery Ajax to serialize the data?</p>

<p>jQuery Ajax <strong>'data'</strong> can be any of the three data types:</p>

<blockquote>
  <p>Type: PlainObject or String or Array</p>
  
  <p>Data to be sent to the server. It is converted to a query string, if
  not already a string. It's appended to the url for GET-requests. See
  processData option to prevent this automatic processing. Object must
  be Key/Value pairs. If value is an Array, jQuery serializes multiple
  values with same key based on the value of the traditional setting
  (described below).</p>
</blockquote>

<p>I believe, when jQuery.ajax ""processes""/""serialize""/""urlencode"" the data, it merges the parameters set in ajaxSetup. However, it doesn't seem like it does this before it gets to the  <strong>beforeSend</strong> hook.</p>

<pre><code>$.ajaxSetup(
    beforeSend: (xhr, settings) -&gt;
         console.log settings.data
)
</code></pre>

<p>will either spit out something like:</p>

<pre><code>timestamp=1404768761739&amp;utf8=%E2%9C%93&amp;_method=put&amp;authenticity_token=EsRpMWMOaQAxJ6XgNJKyh8Yj7WUvkaSkC7n0MmVvjZM%3D&amp;dropdown=true&amp;id=597&amp;name=raise_head&amp;number=0 
</code></pre>

<p>or</p>

<pre><code>{""750"":{""silent"":true},""id"":""597"",""scope"":true}
</code></pre>

<p>it all depends on how ajax is being used in the app, whether it using $.ajax explicitly, or via backbone.js, or hijacking a form submission.</p>

<p><strong>Question (Again):</strong> How do I force jQuery Ajax to serialize the data?</p>

<p><strong>Why? / Context:</strong></p>

<p>The app as a whole needs to sign all requests with HMAC-SHA256.</p>

<pre><code>jQuery -&gt;
  $.ajaxSetup(
    data:
      timestamp: +new Date

    statusCode:
      401: (data) -&gt;
        alert( ""ERROR #839.0: Access Denied"" )
        console.log data.responseText

    beforeSend: (xhr, settings) -&gt;
      xhr.setRequestHeader('x-api-key', SLNAK)

      # Type of request?
      if settings.type == 'GET'

        # At minimum the timestamp param has been set.
        if match = settings.url.match(/\?(.*)/)
          hmac = CryptoJS.HmacSHA256(match[1], SLNAS).toString(CryptoJS.enc.Base64)
          xhr.setRequestHeader('x-api-hmac', hmac)

        else
          alert('ERROR #839.1: Encryption was not able to calculate.')
          #location.reload();

      else
        # la pôsté
        if settings.data &amp;&amp; settings.data.length &gt; 0
          hmac = CryptoJS.HmacSHA256(settings.data, SLNAS).toString(CryptoJS.enc.Base64)
          xhr.setRequestHeader('x-api-hmac', hmac)

        else
          alert('ERROR #839.2: Encryption was not able to calculate.')
          #location.reload();

  )
</code></pre>
","<p>You could always check if data is object in <code>beforeSend</code> and serialize it yourself if it is using <strong><a href=""http://api.jquery.com/jQuery.param/"" rel=""nofollow"">jQuery.param()</a></strong></p>

<pre><code>if( typeof settings.data === 'object' ){
    settings.data = $.param( settings.data ) ;
}
</code></pre>
","24620938","596","<javascript><jquery><ajax><serialization><hmac>","0","0","2","2017-04-07 10:33:00","","1","","","","","2014-07-07 21:53:53","","","2014-07-07 22:28:38"
"24620540","How to force jQuery Ajax to serialize data","<p><strong>Question:</strong> How do I force jQuery Ajax to serialize the data?</p>

<p>jQuery Ajax <strong>'data'</strong> can be any of the three data types:</p>

<blockquote>
  <p>Type: PlainObject or String or Array</p>
  
  <p>Data to be sent to the server. It is converted to a query string, if
  not already a string. It's appended to the url for GET-requests. See
  processData option to prevent this automatic processing. Object must
  be Key/Value pairs. If value is an Array, jQuery serializes multiple
  values with same key based on the value of the traditional setting
  (described below).</p>
</blockquote>

<p>I believe, when jQuery.ajax ""processes""/""serialize""/""urlencode"" the data, it merges the parameters set in ajaxSetup. However, it doesn't seem like it does this before it gets to the  <strong>beforeSend</strong> hook.</p>

<pre><code>$.ajaxSetup(
    beforeSend: (xhr, settings) -&gt;
         console.log settings.data
)
</code></pre>

<p>will either spit out something like:</p>

<pre><code>timestamp=1404768761739&amp;utf8=%E2%9C%93&amp;_method=put&amp;authenticity_token=EsRpMWMOaQAxJ6XgNJKyh8Yj7WUvkaSkC7n0MmVvjZM%3D&amp;dropdown=true&amp;id=597&amp;name=raise_head&amp;number=0 
</code></pre>

<p>or</p>

<pre><code>{""750"":{""silent"":true},""id"":""597"",""scope"":true}
</code></pre>

<p>it all depends on how ajax is being used in the app, whether it using $.ajax explicitly, or via backbone.js, or hijacking a form submission.</p>

<p><strong>Question (Again):</strong> How do I force jQuery Ajax to serialize the data?</p>

<p><strong>Why? / Context:</strong></p>

<p>The app as a whole needs to sign all requests with HMAC-SHA256.</p>

<pre><code>jQuery -&gt;
  $.ajaxSetup(
    data:
      timestamp: +new Date

    statusCode:
      401: (data) -&gt;
        alert( ""ERROR #839.0: Access Denied"" )
        console.log data.responseText

    beforeSend: (xhr, settings) -&gt;
      xhr.setRequestHeader('x-api-key', SLNAK)

      # Type of request?
      if settings.type == 'GET'

        # At minimum the timestamp param has been set.
        if match = settings.url.match(/\?(.*)/)
          hmac = CryptoJS.HmacSHA256(match[1], SLNAS).toString(CryptoJS.enc.Base64)
          xhr.setRequestHeader('x-api-hmac', hmac)

        else
          alert('ERROR #839.1: Encryption was not able to calculate.')
          #location.reload();

      else
        # la pôsté
        if settings.data &amp;&amp; settings.data.length &gt; 0
          hmac = CryptoJS.HmacSHA256(settings.data, SLNAS).toString(CryptoJS.enc.Base64)
          xhr.setRequestHeader('x-api-hmac', hmac)

        else
          alert('ERROR #839.2: Encryption was not able to calculate.')
          #location.reload();

  )
</code></pre>
","<p>This is the <a href=""http://api.jquery.com/jQuery.ajaxPrefilter/"" rel=""nofollow noreferrer"">jQuery.prefilter</a> function i use (better than doing it in the beforeSend), it will match any datatype, and will serialize any object in a post or put request.</p>

<pre><code>$.ajaxPrefilter(function (options, org) {
    var rtype = options.type.toLowerCase();
    if ((rtype === ""post"" || rtype === ""put"") &amp;&amp; org.data !== null &amp;&amp; typeof org.data === 'object') {
        options.data = JSON.stringify(org.data);
    }
});
</code></pre>

<p>hope this helps</p>
","43275892","596","<javascript><jquery><ajax><serialization><hmac>","0","0","2","2017-04-07 10:33:00","","1","","","","","2014-07-07 21:53:53","","","2017-04-07 10:33:00"
"27320436","How to avoid Rest API abuse in Android?","<p>We have developed a service with REST APIs and an Android app that leverages it. We currently don't require our users to authenticate.</p>

<p>We would like to implement a simple mechanism to prevent the random person from invoking the APIs from outside of the scope of the app, mainly to avoid abuses that would spoil the data that we compute.</p>

<p>I stumbled upon <a href=""http://www.thebuzzmedia.com/designing-a-secure-rest-api-without-oauth-authentication/"" rel=""nofollow"">this url</a> where they suggest to have authentication enforced by having the server and Android client to share a secret and use that to compute an <strong>HMAC</strong> to pass along with the request. They claim that they use this approach in Amazon (I have no experience with Amazon AWS yet).</p>

<p>I'm considering to proceed as follows:</p>

<ul>
<li>store a common secret in the Server and in the Android app (any good idea for obfuscating it, besides using ProGuard?) </li>
<li>Have client and server to communicate over plain HTTP (we don't need  confidentiality yet and we will save some CPU) and use the HMAC method to authenticate the calls as ""coming from a legitimate Android client"".</li>
<li>From time to time we can update the secret (perhaps at each new version of the app).</li>
<li>If in future we will need confidentiality we will enable TLS for the relevant REST calls.</li>
</ul>

<p>Do you think that this solution would work? Is anyone using something like this? Alternatives? Advices?</p>

<p>Thanks.</p>
","<p><em>I am not a security expert.</em></p>

<p>Your solution sounds fine to protect you from ""the random person"", but you are still vulnerable to a dedicated attacker. Anything stored on the client can be dug out and used against you. ProGuard will dissuade a casual attacker, but against a dedicated attacker it's just a speed bump.</p>

<p>Nobody here is going to be able to tell you if that level of security is good enough, because it depends a lot on the specifics of your application. The final decision should rest with the product owner.</p>
","27320962","595","<android><rest><authentication><hmac>","2","0","1","2014-12-05 16:58:01","27320962","1","","","","","2014-12-05 16:28:57","","","2014-12-05 16:58:01"
"23525610","HMAC after encryption solution in Java","<p>I want to encrypt a cookie and make sure the cookie is not modified so I use HMAC for encrypted cookie.</p>

<p><strong><em>There are a few ways to implement:</em></strong></p>

<p><strong>1. HMAC on encrypted cookie</strong></p>

<pre><code>String encryptedCookie = AES ( cookie )
String mac = HMAC ( encryptedCookie )
</code></pre>

<p>-- Persist cookie with value: encryptedCookie + "":"" + mac </p>

<p><strong>2. HMAC on encrypted cookie &amp; HMAC's sercet key</strong></p>

<pre><code>String encryptedCookie = AES ( cookie )
String mac = HMAC ( encryptedCookie + "":"" + Hmac's secretKey )
</code></pre>

<p>-- Persist cookie with value: encryptedCookie + "":"" + mac </p>

<p><strong>3. HMAC on encrypted cookie &amp; some unguessable STATIC data</strong></p>

<pre><code>String encryptedCookie = AES ( cookie )
String mac = HMAC ( encryptedCookie + "":"" + java.sql.ResultSet.class.getName() )
</code></pre>

<p>-- Persist cookie with value: encryptedCookie + "":"" + mac </p>

<p>Anyone has any ideas? Which one is better? OR what is your solution? Thank you!</p>
","<p>Options 2 and 3 are effectively the same assuming the static data is truly unguessable (and the same length etc).  If you are seriously concerned about somebody modifying the cookie then option 2 is better as (assuming the secret key is not shared) it would allow you to detect if changes had been made to the cookie and would prevent somebody from changing the cookie and then rerunning the hash to spoof the mac.  In practice, if the AES key is not accessible and the data in the cookie has some semantic meaning, you would likely be able to detect modifications to the encrypted cookie as it would decrypt to something meaningless.  From a security perspective though, option 2 would provide the greatest assurances that the data hadn't been modified.</p>

<p>All of that said, I'm making a number of assumptions about your setup that may or may not be true. </p>

<p><strong>Edit</strong> I evidently misunderstood the question with regards to the key data and did not clearly state enough of my assumptions.  @owlstead's is a better answer.</p>
","23525674","591","<java><encryption><aes><hmac><data-integrity>","1","0","2","2014-05-07 22:13:16","23528442","0","","","","","2014-05-07 18:32:25","","2014-05-07 22:13:16","2014-05-07 18:36:04"
"23525610","HMAC after encryption solution in Java","<p>I want to encrypt a cookie and make sure the cookie is not modified so I use HMAC for encrypted cookie.</p>

<p><strong><em>There are a few ways to implement:</em></strong></p>

<p><strong>1. HMAC on encrypted cookie</strong></p>

<pre><code>String encryptedCookie = AES ( cookie )
String mac = HMAC ( encryptedCookie )
</code></pre>

<p>-- Persist cookie with value: encryptedCookie + "":"" + mac </p>

<p><strong>2. HMAC on encrypted cookie &amp; HMAC's sercet key</strong></p>

<pre><code>String encryptedCookie = AES ( cookie )
String mac = HMAC ( encryptedCookie + "":"" + Hmac's secretKey )
</code></pre>

<p>-- Persist cookie with value: encryptedCookie + "":"" + mac </p>

<p><strong>3. HMAC on encrypted cookie &amp; some unguessable STATIC data</strong></p>

<pre><code>String encryptedCookie = AES ( cookie )
String mac = HMAC ( encryptedCookie + "":"" + java.sql.ResultSet.class.getName() )
</code></pre>

<p>-- Persist cookie with value: encryptedCookie + "":"" + mac </p>

<p>Anyone has any ideas? Which one is better? OR what is your solution? Thank you!</p>
","<p>The HMAC function should already be keyed. So normally HMAC is shown as <code>HMAC(K, M)</code> where <code>K</code> is the key and <code>M</code> is the message. So candidate 2 does not make sense in that regard; it would mean that the key <code>K</code> is included 3 times in the calculation (as the key is used two times in HMAC itself).</p>

<p>Using a cookie with unguessable data does not make sense either, for the same reason. Part of the input of HMAC is the key <code>K</code>, which is already unguessable data. So you would not gain any security, and you would be complicating your protocol.</p>

<p>Now AES should be used in CBC or CTR mode. ECB mode of encryption is unsafe. So that means you require a random IV (CBC) or a unique IV (CTR). This IV <em>should</em> be part of the HMAC, otherwise it is still possible for an attacker to alter the plaintext you get after decryption.</p>
","23528442","591","<java><encryption><aes><hmac><data-integrity>","1","3","2","2014-05-07 22:13:16","23528442","0","","","","","2014-05-07 18:32:25","","","2014-05-07 21:07:24"
"6487755","HMAC-Whirlpool implementation in Android","<p>Has anyone implemented or using Hmac-Whirlpool on Android phone?<br>
I found <a href=""http://www.java2s.com/Open-Source/Java-Document/Web-Framework/rife-1.6.1/com/uwyn/rife/tools/Whirlpool.java.htm"" rel=""nofollow"">whirlpool.java</a> on internet but default security provider in Android SDK seems not to have Whirlpool nor Hmac-Whirlpool.</p>
","<p>Android has cut-down version of Bouncy Castle and seems not to allow access to org.bouncycastle.crypto.macs.HMac class, instead javax.crypto.Mac.getInstance(String algorithm) should be used (<a href=""https://stackoverflow.com/questions/3140650/how-to-generate-hmac-md5-in-android"">here</a>). Again only some MAC algorithms seems to be allowed (I saw ""HMAC-SHA512"" is working). But if you decide to use SpongyCastle library, you can do this (<a href=""https://stackoverflow.com/questions/6488658/can-i-use-latest-bouncycastle-provider-on-android/6501205#6501205"">here</a>):  </p>

<pre><code>        CipherParameters p = new KeyParameter(key.getBytes(""UTF-8""));

        WhirlpoolDigest w = new WhirlpoolDigest();
        HMac hm = new HMac(w);
        hm.init(p);
        hm.update(inbytes, 0, inbytes.length);
        byte[] result = new byte[hm.getMacSize()];
        hm.doFinal(result, 0);
</code></pre>

<p>Including SpongyCastle may be problematic to many becuase it increased app size by 1.84MB in android 2.2. Then only relevant files could be imported into the project:  </p>

<p>// interfaces<br>
org.bouncycastle.crypto.CipherParameters<br>
org.bouncycastle.crypto.Digest<br>
org.bouncycastle.crypto.ExtendedDigest<br>
org.bouncycastle.crypto.Mac  </p>

<p>// classes<br>
org.bouncycastle.crypto.params.KeyParameter<br>
org.bouncycastle.crypto.digests.WhirlpoolDigest<br>
org.bouncycastle.crypto.macs.HMac<br>
org.bouncycastle.crypto.DataLengthException<br>
org.bouncycastle.crypto.RuntimeCryptoException  </p>
","6515602","585","<android><hmac><message-digest>","0","0","1","2011-06-30 00:06:44","6515602","0","","","","","2011-06-27 00:56:49","","2017-05-23 11:48:05","2011-06-29 03:58:43"
"7299294","Is using HMAC to transmit a password OK?","<p>I'm writing a small webapp and I don't want to transmit login passwords as cleartext. As I don't have SSL available I've written a one-time challenge system which sends a random string with the login form which is then used to hash the password using HMAC-SHA256 on the client-side. I use the random challenge string as the message and the user's password as the secret key for HMAC.</p>

<p>I know that self-made solutions are generally a bad idea, so I wanted to ask if I'm making a mistake here.</p>
","<p>To do this, you will need some way of linking the random string sent by the server with the client it has been sent to, otherwise an attacker could simply send the hashed password and the random string back to the server to gain access.</p>

<p>However, if you store the random string in some sort of server session, you then open up session spoofing as a possible attack vector.</p>

<p>Your solution is better than sending the password in plain text then, as an attacker will not be able to discover the user's password, but they could still pose as the user.</p>
","7299340","583","<security><hmac>","0","0","2","2011-09-06 18:33:39","","1","","","","","2011-09-04 12:43:42","","","2011-09-04 12:51:14"
"7299294","Is using HMAC to transmit a password OK?","<p>I'm writing a small webapp and I don't want to transmit login passwords as cleartext. As I don't have SSL available I've written a one-time challenge system which sends a random string with the login form which is then used to hash the password using HMAC-SHA256 on the client-side. I use the random challenge string as the message and the user's password as the secret key for HMAC.</p>

<p>I know that self-made solutions are generally a bad idea, so I wanted to ask if I'm making a mistake here.</p>
","<p>I do not believe this is an acceptable solution. </p>

<p>The purpose of a HMAC is to verify data integrity and authenticity. So you can use it to verify that the information has not changed and you can use it to verify that the user has the secret key (in your case, the password). </p>

<p>What it cannot do is some of the other things that SSL can do, like protect from eaves-dropping by encrypting the channel and verifying the identity of the server for the end user.</p>

<p>Eavesdropping: There would be nothing stopping a man-in-the-middle (MITM) from watching this transaction, intercepting the return response (the HMAC digest) and sending it on as his own request (even stopping the response from the other user). </p>

<p>Verifying the ID of the server: One of the most important parts you are missing here is protecting your users from being duped by a phisher. With a valid SSL cert, your users have no way of verifying if the site is your or an impostor. You are trying to protect yourself by verifying the authenticity of the end-user, which is great, but you are forgetting to protect the end user. </p>

<p>I'd be curious to know why you don't have SSL available. I hear this a lot and find that the usual reason is becuase someone doesn't want to pony up the $50 for the cert. But the cert is worth it and in an environment where security is important there really should not be any technical reason why SSL would not be available. </p>
","7324491","583","<security><hmac>","0","1","2","2011-09-06 18:33:39","","1","","","","","2011-09-04 12:43:42","","","2011-09-06 18:33:39"
"46429683","PHP alternative of ""PBKDF2WithHmacSHA256"" from Java","<p>I need to generate in PHP the same hash as as the <code>PBKDF2WithHmacSHA256</code> algorithm generates in Java.</p>

<p>I did some research and found two functions that seem to be connected to <code>PBKDF2</code> and <code>HMAC</code>:</p>

<ul>
<li>hash_pbkdf2 - <a href=""http://php.net/manual/en/function.hash-pbkdf2.php"" rel=""nofollow noreferrer"">http://php.net/manual/en/function.hash-pbkdf2.php</a></li>
<li>hash_hmac - <a href=""http://php.net/manual/en/function.hash-hmac.php"" rel=""nofollow noreferrer"">http://php.net/manual/en/function.hash-hmac.php</a></li>
</ul>

<p>What PHP functions should I use? Is it even possible with native PHP functions?</p>

<p><strong>Edit #1</strong></p>

<p>My Java code, the same result I need achieve in PHP</p>

<pre><code>public static byte[] derivateKey(char[] password, byte[] salt, int iterations, int keyLengthBits) {
        try {
            SecretKeyFactory skf = SecretKeyFactory.getInstance(""PBKDF2WithHmacSHA256"");
            PBEKeySpec spec = new PBEKeySpec(password, salt, iterations, keyLengthBits);
            SecretKey key = skf.generateSecret(spec);
            byte[] res = key.getEncoded();
            return res;

        } catch (NoSuchAlgorithmException | InvalidKeySpecException e) {
            throw new IllegalStateException(""Could not create hash"", e);
        }
    }
</code></pre>
","<p>The Java code you've provided is basically <a href=""https://secure.php.net/hash_pbkdf2"" rel=""nofollow noreferrer""><code>hash_pbkdf2()</code></a>. You just need to pass the correct params:</p>

<pre><code>function derivateKey($password, $salt, $iterations, $keyLengthBits)
{
    return hash_pbkdf2(
        'sha256',
        $password,
        $salt,
        $iterations,
        $keyLengthBits / 8,
        true
    );
}
</code></pre>

<p>Obviously, PHP's <code>hash_pbkdf2()</code> accepts the hash algorithm as a parameter, but the potentially tricky differences are these:</p>

<ul>
<li>It doesn't comply with <a href=""https://www.ietf.org/rfc/rfc2898.txt"" rel=""nofollow noreferrer"">RFC 2898</a> in that its length is applied <em>after</em> hex-encoding, so that last parameter must be set to <code>true</code> to make it consistent with the spec.</li>
<li>It accepts the output length in bytes instead of bits (hence why we divide by 8 above).</li>
</ul>

<p>The only thing I'm not sure about is what <code>key.getEncoded()</code> does in your sample code ... there's no encoding algorithm specified anywhere.<br>
I found some docs suggesting it is supposed to be RAW, so the example I'm providing should match it. If it doesn't, you'll have to encode it yourself.</p>
","46430311","575","<php><sha256><hmac><pbkdf2>","0","2","1","2017-09-27 08:44:52","46430311","4","","1315357","","2017-09-26 14:59:02","2017-09-26 14:50:14","","2017-09-27 08:44:52","2017-09-26 15:20:54"
"43588139","Algorithms with HMAC key generation","<p>I found those examples for HMAC signature.</p>

<p>Password base key generation:</p>

<pre><code>SecretKeySpec key = new SecretKeySpec(passowrd.getBytes(""UTF-8""), ""HmacSHA256"");
</code></pre>

<p>Random key generation:</p>

<pre><code>KeyGenerator gen = KeyGenerator.getInstance(""HmacSHA256"");
Key key = gen.generateKey;
</code></pre>

<p>Generation HMAC Signature</p>

<pre><code>string passowrd = ""password"";
string data = ""data"";
Mac mac = Mac.getInstance(""HmacSHA256"");
mac.init(key);
byte[] signature = mac.doFinal(data.getBytes(""UTF-8""));
</code></pre>

<p>Do the algorithms in <code>SecretKeySpec</code> or <code>KeyGenerator</code> and <code>Mac</code> need to be matched? I tried with different algorithms like below, but It works.</p>

<pre><code>Key key = new SecretKeySpec(""pass"".getBytes(""UTF-8""), ""HmacSHA1"");
Mac mac = Mac.getInstance(""HmacSHA256"");
mac.init(key);
byte[] signature = mac.doFinal(data.getBytes(""UTF-8""));
</code></pre>

<p>Also this code below works</p>

<pre><code>KeyGenerator gen = KeyGenerator.getInstance(""HmacSHA256"");
gen.init(keysize);
val key = gen.generateKey;
Mac mac = Mac.getInstance(""HmacSHA1"");
mac.init(key);
byte[] signature = mac.doFinal(data.getBytes(""UTF-8""));
</code></pre>

<p>I'm not sure it proper way or not. Actually when I change the algorithm in <code>KeyGenerator</code> it returns different length of key, but I think it's same if I specify key size as <code>init(int keysize)</code>. What if it's same what's the difference between using <code>SecureRandom</code>?</p>
","<p>According to the <a href=""https://docs.oracle.com/javase/7/docs/technotes/guides/security/crypto/CryptoSpec.html#Mac"" rel=""nofollow noreferrer"">JCA reference guide</a>, this is a peculiarity of the implementations of certain HMACs.</p>

<blockquote>
  <p>With some MAC algorithms, the (secret-)key algorithm associated with the (secret-)key object used to initialize the Mac object does not matter (this is the case with the HMAC-MD5 and HMAC-SHA1 implementations of the SunJCE provider). With others, however, the (secret-)key algorithm does matter, and an InvalidKeyException is thrown if a (secret-)key object with an inappropriate (secret-)key algorithm is used.</p>
</blockquote>

<p>As to why, I can't say. I can only guess that with <a href=""https://docs.oracle.com/javase/8/docs/api/javax/crypto/spec/SecretKeySpec.html"" rel=""nofollow noreferrer"">SecretKeySpec</a> changing the algorithm doesn't matter because:</p>

<blockquote>
  <p>This class is only useful for raw secret keys that can be represented as a byte array and <strong>have no key parameters associated with them</strong>, e.g., DES or Triple DES keys.</p>
</blockquote>
","52789367","572","<java><hmac>","1","1","1","2018-10-13 03:51:56","","0","5","","","","2017-04-24 12:30:08","","","2018-10-13 03:51:56"
"24377945","How to use HMAC in Lua - Lightroom plugin","<p>First thing I have to mention is I'm really really new to Lua and please be patient if you think my question is too dumb</p>

<p>Here is my requirement</p>

<ul>
<li>I need to use HMAC-sha256 for Lightroom plugin development as I'm using that for security.</li>
</ul>

<p>I was trying to use this but with no luck
<a href=""https://code.google.com/p/lua-files/wiki/hmac"" rel=""nofollow"">https://code.google.com/p/lua-files/wiki/hmac</a></p>

<p>These are the steps I followed</p>

<ol>
<li>Got the code of
<a href=""https://code.google.com/p/lua-files/source/browse/hmac.lua"" rel=""nofollow"">https://code.google.com/p/lua-files/source/browse/hmac.lua</a> and saved
as 'hmac.lua' file in my plugin directory</li>
<li>Got the code from this
<a href=""https://code.google.com/p/lua-files/source/browse/sha2.lua"" rel=""nofollow"">https://code.google.com/p/lua-files/source/browse/sha2.lua</a> and saved
as 'sha2.lua' file</li>
</ol>

<p>Now in the file I use it like this</p>

<pre><code>local hmac = require'hmac'
local sha2 = require'sha2'

--somewhere doend the line inside a function
local hashvalue = hmac.sha2('key', 'message')
</code></pre>

<p>but unfortunately this does not work and I'm not sure what I'm doing wrong.
Can anyone advice me what I'm doing wrong here? Or is there an easier and better way of doing this with a good example.</p>

<p>EDIT:
I'm doing this to get the result. When I include that code the plugin does stops working. I cannot get the output string when I do this</p>

<pre><code>hashvalue = hmac.sha2('key', 'message')

local LrLogger = import 'LrLogger'
myLogger = LrLogger('FlaggedFiles')
myLogger:enable(""logfile"")
myLogger:trace (""=========================================\n"") 
myLogger:trace ('Winter is coming, ' .. hashvalue)
myLogger:trace (""=========================================\n"")
</code></pre>

<p>and the Lightroom refuses to load the plugin and there is nothing on the log as well</p>

<p>Thank you very much for your help</p>
","<p>I'd first make sure your code works outside of Lightroom. It seems that HMAC module you referenced has some other dependencies: it requires ""glue"", ""bit"", and ""ffi"" modules. Of these, <a href=""http://bitop.luajit.org/"" rel=""nofollow"">bit</a> and <a href=""https://github.com/jmckaskill/luaffi"" rel=""nofollow"">ffi</a> are binary modules and I'm not sure you will be able to load them into Lightroom (unless they are already available there). In any case, you probably won't be able to make it run in LR if you don't have required modules and can't make it run without issues outside of LR.</p>
","24421732","570","<lua><adobe><hmac><sha256><lightroom>","4","2","3","2015-10-14 13:55:09","","0","2","545697","","2014-06-24 23:43:40","2014-06-24 03:38:03","","","2014-06-26 03:04:53"
"24377945","How to use HMAC in Lua - Lightroom plugin","<p>First thing I have to mention is I'm really really new to Lua and please be patient if you think my question is too dumb</p>

<p>Here is my requirement</p>

<ul>
<li>I need to use HMAC-sha256 for Lightroom plugin development as I'm using that for security.</li>
</ul>

<p>I was trying to use this but with no luck
<a href=""https://code.google.com/p/lua-files/wiki/hmac"" rel=""nofollow"">https://code.google.com/p/lua-files/wiki/hmac</a></p>

<p>These are the steps I followed</p>

<ol>
<li>Got the code of
<a href=""https://code.google.com/p/lua-files/source/browse/hmac.lua"" rel=""nofollow"">https://code.google.com/p/lua-files/source/browse/hmac.lua</a> and saved
as 'hmac.lua' file in my plugin directory</li>
<li>Got the code from this
<a href=""https://code.google.com/p/lua-files/source/browse/sha2.lua"" rel=""nofollow"">https://code.google.com/p/lua-files/source/browse/sha2.lua</a> and saved
as 'sha2.lua' file</li>
</ol>

<p>Now in the file I use it like this</p>

<pre><code>local hmac = require'hmac'
local sha2 = require'sha2'

--somewhere doend the line inside a function
local hashvalue = hmac.sha2('key', 'message')
</code></pre>

<p>but unfortunately this does not work and I'm not sure what I'm doing wrong.
Can anyone advice me what I'm doing wrong here? Or is there an easier and better way of doing this with a good example.</p>

<p>EDIT:
I'm doing this to get the result. When I include that code the plugin does stops working. I cannot get the output string when I do this</p>

<pre><code>hashvalue = hmac.sha2('key', 'message')

local LrLogger = import 'LrLogger'
myLogger = LrLogger('FlaggedFiles')
myLogger:enable(""logfile"")
myLogger:trace (""=========================================\n"") 
myLogger:trace ('Winter is coming, ' .. hashvalue)
myLogger:trace (""=========================================\n"")
</code></pre>

<p>and the Lightroom refuses to load the plugin and there is nothing on the log as well</p>

<p>Thank you very much for your help</p>
","<p>If you just need to get SHA256 hash there is a way to do it Lightroom</p>

<p>I posted my question <a href=""https://forums.adobe.com/thread/1233537?tstart=0"" rel=""nofollow"">here</a> and was able to get an answer. But there there was no reference of this on SDK documentation (Lightroom SDK)</p>

<pre><code>local sha = import 'LrDigest'
d = sha.SHA256.digest (""Hello world"")
</code></pre>

<p>but unfortunately there was no HMAC so I decided to use md5 with a salt because this was taking too much of my time</p>
","24443142","570","<lua><adobe><hmac><sha256><lightroom>","4","0","3","2015-10-14 13:55:09","","0","2","545697","","2014-06-24 23:43:40","2014-06-24 03:38:03","","","2014-06-27 02:41:17"
"24377945","How to use HMAC in Lua - Lightroom plugin","<p>First thing I have to mention is I'm really really new to Lua and please be patient if you think my question is too dumb</p>

<p>Here is my requirement</p>

<ul>
<li>I need to use HMAC-sha256 for Lightroom plugin development as I'm using that for security.</li>
</ul>

<p>I was trying to use this but with no luck
<a href=""https://code.google.com/p/lua-files/wiki/hmac"" rel=""nofollow"">https://code.google.com/p/lua-files/wiki/hmac</a></p>

<p>These are the steps I followed</p>

<ol>
<li>Got the code of
<a href=""https://code.google.com/p/lua-files/source/browse/hmac.lua"" rel=""nofollow"">https://code.google.com/p/lua-files/source/browse/hmac.lua</a> and saved
as 'hmac.lua' file in my plugin directory</li>
<li>Got the code from this
<a href=""https://code.google.com/p/lua-files/source/browse/sha2.lua"" rel=""nofollow"">https://code.google.com/p/lua-files/source/browse/sha2.lua</a> and saved
as 'sha2.lua' file</li>
</ol>

<p>Now in the file I use it like this</p>

<pre><code>local hmac = require'hmac'
local sha2 = require'sha2'

--somewhere doend the line inside a function
local hashvalue = hmac.sha2('key', 'message')
</code></pre>

<p>but unfortunately this does not work and I'm not sure what I'm doing wrong.
Can anyone advice me what I'm doing wrong here? Or is there an easier and better way of doing this with a good example.</p>

<p>EDIT:
I'm doing this to get the result. When I include that code the plugin does stops working. I cannot get the output string when I do this</p>

<pre><code>hashvalue = hmac.sha2('key', 'message')

local LrLogger = import 'LrLogger'
myLogger = LrLogger('FlaggedFiles')
myLogger:enable(""logfile"")
myLogger:trace (""=========================================\n"") 
myLogger:trace ('Winter is coming, ' .. hashvalue)
myLogger:trace (""=========================================\n"")
</code></pre>

<p>and the Lightroom refuses to load the plugin and there is nothing on the log as well</p>

<p>Thank you very much for your help</p>
","<p>Spent quite some time trying to find a solution :-/
LrDigest is not documented, <em>thanks Adobe</em>!
Solution:</p>

<pre><code>local LrDigest = import ""LrDigest""
LrDigest.HMAC.digest(string, 'SHA256', key)
</code></pre>
","33127305","570","<lua><adobe><hmac><sha256><lightroom>","4","0","3","2015-10-14 13:55:09","","0","2","545697","","2014-06-24 23:43:40","2014-06-24 03:38:03","","","2015-10-14 13:55:09"
"24542626","Objective-C HMAC-256 To Sign HTTP Request - Seeing different results","<p>I'm working in Objective-C with a REST API that needs to sign each HTTP request according to this spec (<a href=""https://web-payments.org/specs/source/http-signatures/"" rel=""nofollow"">https://web-payments.org/specs/source/http-signatures/</a>). </p>

<p>It all seems straightforward, but I'm having troubles getting what the right ""signature"" value should be. I'm getting different results in Objective-C VS some of these online sha generators (<a href=""http://www.freeformatter.com/hmac-generator.html"" rel=""nofollow"">http://www.freeformatter.com/hmac-generator.html</a>, <a href=""http://hash.online-convert.com/sha256-generator"" rel=""nofollow"">http://hash.online-convert.com/sha256-generator</a>).</p>

<p>I put together some sandboxed test code to get this figured out outside of my project.</p>

<p>Here's my test code:</p>

<pre><code>#import &lt;Foundation/Foundation.h&gt;
#import &lt;CommonCrypto/CommonCrypto.h&gt;

NSString * hmacSHA256(NSString *key, NSString *data) {
    const char *cKey  = [key cStringUsingEncoding:NSASCIIStringEncoding];
    const char *cData = [data cStringUsingEncoding:NSASCIIStringEncoding];
    unsigned char cHMAC[CC_SHA256_DIGEST_LENGTH];
    CCHmac(kCCHmacAlgSHA256, cKey, strlen(cKey), cData, strlen(cData), cHMAC);
    NSMutableString *result = [NSMutableString string];
    for(int i = 0; i &lt; sizeof cHMAC; i++) {
        [result appendFormat:@""%02x"", cHMAC[i]];
    }
    return result;
}

int main(int argc, const char * argv[]) {
    @autoreleasepool {
        NSMutableString * data = [NSMutableString string];
        [data appendString:@""(request-line) get /\n""];
        [data appendString:@""date: Wed, 02 Jul 2014 22:12:37 GMT""];
        NSString * key = @""5a30f5477e2fdea27c5bdef8d5b0b13bfc8c2c77c608169da637a58ac0bff23895b58f8de5ef982a"";
        NSLog(@""%@"",data);
        NSString * signature = hmacSHA256(key,data);
        NSLog(@""signature: %@"",signature);
    }
    return 0;
}
</code></pre>

<p>When I run this test code, I get this as a signature:</p>

<pre><code>8315081c226a7b0a77093cf12ec6ce4e112fedff12ddfcfd752c909b58a9ae5e
</code></pre>

<p>But when I paste in these lines:</p>

<pre><code>(request-line) get /
date: Wed, 02 Jul 2014 22:12:37 GMT
</code></pre>

<p>To one of the online generators (<a href=""http://www.freeformatter.com/hmac-generator.html"" rel=""nofollow"">http://www.freeformatter.com/hmac-generator.html</a>, <a href=""http://hash.online-convert.com/sha256-generator"" rel=""nofollow"">http://hash.online-convert.com/sha256-generator</a>) both of these generators give me the same signature:</p>

<pre><code>71b09a1d0b8cde88f2b0c5bb78a06c4539994435e5e47700aa56d2194b9c2f08
</code></pre>

<p>So how exactly am I supposed to convert the above ""unsigned char cHMAC"" variable into the proper string?</p>

<p>Thanks.</p>
","<p>Your problem is the line endings in your text. In reality, your program is generating the correct hash, but you're entering a <em>different</em> string into the web tool, which is why you're getting a different result. Here's the text you're feeding to your program:</p>

<pre><code>(request-line) get /\ndate: Wed, 02 Jul 2014 22:12:37 GMT
</code></pre>

<p>And here's what you're feeding to the web tool (assuming you're doing so on Windows, which checks out based on my tests):</p>

<pre><code>(request-line) get /\r\ndate: Wed, 02 Jul 2014 22:12:37 GMT
</code></pre>

<p>Note the '\r\n'. By default, Windows (and, most likely, all web browsers) uses a carriage return AND a line feed character as an EOL sequence. Unix/Linux uses only a line feed, and Mac uses only a carriage return.</p>

<p>If you want to check any other hashes, either add a '\r' into your program for testing, or use a program like Notepad++ where you can control the line endings to create files and then upload them to the second site you listed.</p>
","24542755","568","<objective-c><rest><hmac><sha256>","0","1","1","2014-07-02 23:52:33","24542755","3","","","","","2014-07-02 23:22:10","","2014-07-02 23:52:33","2014-07-02 23:37:44"
"44633370","Testing API routes with HMAC-SHA256 authentication in OpenAPI (Swagger)","<p>I am trying to generate OpenAPI (Swagger) documentation for my API routes which require HMAC-SHA256 authentication. This means that I have to include <code>Authorization</code> header for every request which consists of API key and generated HMAC signature separated by colon (e.g. <code>Authorization: API_KEY:GENERATED_SIGNATURE</code>).</p>

<p>I can easily generate the needed signature with JavaScript, but I cannot figure out how to add ""key"" and ""secret"" input fields in Swagger-UI ""Authorize"" pop-up and how to finally add it to <code>Authorization</code> header in each request.</p>

<p>Is something like this possible with OpenAPI Specification v3 at all?</p>
","","","568","<javascript><authorization><swagger><swagger-ui><hmac>","7","","0","2018-04-02 18:20:51","","0","","","","","2017-06-19 14:33:49","","",""
"48141126","SHA512 Hash with Message and Secret Google Sheets","<p>I'm pretty new to google sheets script programming.</p>

<p>I'm trying to compute a SHA512 hash with a message and encrypt it with my secret key.</p>

<p>In PDP equivalent I have: <code>$sign=hash_hmac('sha512',$message,$secret);</code></p>

<p>Thank you in advance!</p>
","<p>How about this?</p>

<h2>Sample script :</h2>

<pre><code>var result = Utilities.computeHmacSignature(Utilities.MacAlgorithm.HMAC_SHA_512, message, secret);
result = result.map(function(e) {
    var v = (e &lt; 0 ? e + 256 : e).toString(16);
    return v.length == 1 ? ""0"" + v : v;
}).join("""");
Logger.log(result)
</code></pre>

<h2>Note :</h2>

<ul>
<li><code>hash_hmac</code> of php is the string of the unsigned hexadecimal.</li>
<li>At Google Apps Script, the data which was encrypted by <code>Utilities.computeHmacSignature()</code> is the bytes array of the signed hexadecimal.</li>
<li>In order to use this at GAS, it is required to convert the bytes array to the unsigned hexadecimal.</li>
</ul>

<p>If this was not what you want, can you tell me a sample input and output values? By this, it will be able to do the debug.</p>
","48142385","563","<google-sheets><google-spreadsheet-api><hmac><sha512><google-apps-script-editor>","0","4","1","2018-09-08 19:28:46","48142385","0","","","","","2018-01-07 20:14:23","","","2018-01-07 23:04:58"
"25098265","ASP.NET WebAPI with HawkNet authentication and multiple users","<p>I am writing an web based application that needs to expose an API to a Windows Forms client. I'm using ASP.Net WebAPI v2, and because I cannot make use of SSL (too expensive for the small scale project it is), I stumbled upon HawkNet and this looks like the best option for securing the communication between my client and server (which I both control).</p>

<p>However, one things gets me confused with the HawkNet configuration on the server side: all the examples shown on sites and blogs, show a hardcoded handler in the WebApiConfig register method like this:</p>

<pre><code>var handler = new HawkMessageHandler(new HttpControllerDispatcher(config),
         (id) =&gt;
         {
             return Task.FromResult(new HawkCredential
             {
                 Id = ""dh37fgj492je"",
                 Key = ""werxhqb98rpaxn39848xrunpaw3489ruxnpa98w4rxn"",
                 Algorithm = ""sha256"",
                 User = ""steve""
             });
         }, 60, true);

        // Web API routes
        config.MapHttpAttributeRoutes();

        config.Routes.MapHttpRoute(
            name: ""DefaultApi"",
            routeTemplate: ""api/{controller}/{id}"",

            constraints: null,
            defaults: new { id = RouteParameter.Optional },
            handler: handler
        );
</code></pre>

<p>However, in my scenario, the Windows Forms client will be used by different users, on different laptops, and each user needs to be able to ""log in"" from this WinForms app in order to use the web API. If I understand correctly, I need to maintain a ""key"" and ""id"" like above for each user (can do that on the server in the database), and the client must also know this key (I guess the key could be something like hashing the username and password combo, so it can be built in the client and on the server without ever needing to pass it on the wire).</p>

<p>But how do I configure that on the server ? In order words, how do I make those values (username, key and id) in the HawkMessageHandler on the server dynamic ?</p>

<p>Or am I totally missing the point here ?</p>

<p>Thanks for replying.</p>
","<p>Looks like I found it.</p>

<p>Can use the (id) parameter to pass it onto another function which can then look it up in the database using this id, and return a hawkcredential object</p>
","25102635","563","<authentication><asp.net-web-api><hmac>","0","0","1","2014-08-03 07:39:04","","0","","","","","2014-08-02 18:41:24","","","2014-08-03 07:39:04"
"20289971","NSString from NSData always null","<p>I would like to sign a request with HMAC SHA512, but I seem to mess up encoding and decoding from and to NSData and NSString. I desperately tried to figure out what is wrong, but I just don't seem to get it right. </p>

<h2> PSEUDOCODE:</h2> 

<pre><code>function hmac_512(msg, sec) {
    sec = Base64Decode(sec);
    result = hmac(msg, sec, sha512);
    return Base64Encode(result);
}


secret = ""7pgj8Dm6"";
message = ""Test\0Message"";

result = hmac_512(message, secret);
if (result == ""69H45OZkKcmR9LOszbajUUPGkGT8IqasGPAWqW/1stGC2Mex2qhIB6aDbuoy7eGfMsaZiU8Y0lO3mQxlsWNPrw=="")
    print(""Success!"");
else
    printf(""Error: %s"", result);
</code></pre>

<p><br /><br /></p>

<h2> My implementation:</h2>

<pre><code>+(void)doSomeMagic{

    NSString *message = @""Test\0Message"";
    NSString *signedRequest = [self signRequestForParameterString:message];

    //checking against CORRECT (from JAVA equivalent) signed request 
    if ([signedRequest isEqualToString:@""69H45OZkKcmR9LOszbajUUPGkGT8IqasGPAWqW/1stGC2Mex2qhIB6aDbuoy7eGfMsaZiU8Y0lO3mQxlsWNPrw=="" ])
        NSLog(@""Success!"");
    else
        NSLog(@""Error!"");
}
</code></pre>

<p>Here is the signing method: </p>

<pre><code>+(NSString *)signRequestForParameterString:(NSString*)paramStr{

    NSString *secret = @""7pgj8Dm6"";

    // secret is base64 encoded, so I decode it 
    NSData *decodedSecret = [secret base64DecodedData];
    NSString *decodedSecretString = [NSString stringWithUTF8String:[decodedSecret bytes]];

    NSData *data = [paramStr dataUsingEncoding:NSUTF8StringEncoding];
    NSString *dataString = [NSString stringWithUTF8String:[data bytes]];


    return [self generateHMACSHA512Hash:decodedSecretString data:dataString];

}
</code></pre>

<p>Here is the hashing function: </p>

<pre><code>+(NSString *)generateHMACSHA512Hash:(NSString *)key data:(NSString *)data{


    const char *cKey = [key cStringUsingEncoding:NSASCIIStringEncoding];
    const char *cData = [data cStringUsingEncoding:NSASCIIStringEncoding];

    unsigned char cHMAC[CC_SHA512_DIGEST_LENGTH];

    CCHmac(kCCHmacAlgSHA512, cKey, strlen(cKey), cData, strlen(cData), cHMAC);

    NSData *HMAC = [[NSData alloc] initWithBytes:cHMAC
                                          length:sizeof(cHMAC)];

    NSString *hash = [HMAC base64EncodedString];

    return hash;

} 
</code></pre>

<p>I am pretty sure it is due to the encoding of the strings (decodedSecretString and dataString). <code>decodedSecretString</code> (decoded base64) after decoding is encoded in ASCII. However, when I call the hashing method, I encode it in ascii again, which will result in a null error. Everything is confusing me right now. </p>
","<p>Your secret doesn't decode to a valid UTF-8 string, and Java allows NUL bytes in strings, but when you're converting ""Test\0Message"" to a C string and using strlen, its length is 4.</p>

<p>Something like this should work:</p>

<pre><code>+(NSString *)signRequestForParameterString:(NSString*)paramStr{
    NSString *secret = @""7pgj8Dm6"";
    NSData *data = [paramStr dataUsingEncoding:NSUTF8StringEncoding];
    return [self generateHMACSHA512Hash:[secret base64DecodedData] data:data];
}

+(NSString *)generateHMACSHA512Hash:(NSData *)key data:(NSData *)data{
    unsigned char cHMAC[CC_SHA512_DIGEST_LENGTH];
    CCHmac(kCCHmacAlgSHA512, key.bytes, key.length, data.bytes, data.length, cHMAC);
    NSData *HMAC = [[NSData alloc] initWithBytes:cHMAC length:sizeof(cHMAC)];
    return [HMAC base64EncodedString];
}
</code></pre>
","20290222","561","<objective-c><macos><sha><hmac><nsstringencoding>","0","2","2","2013-11-29 17:09:58","20290222","3","","","","","2013-11-29 16:27:13","","2013-11-29 16:51:19","2013-11-29 16:42:56"
"20289971","NSString from NSData always null","<p>I would like to sign a request with HMAC SHA512, but I seem to mess up encoding and decoding from and to NSData and NSString. I desperately tried to figure out what is wrong, but I just don't seem to get it right. </p>

<h2> PSEUDOCODE:</h2> 

<pre><code>function hmac_512(msg, sec) {
    sec = Base64Decode(sec);
    result = hmac(msg, sec, sha512);
    return Base64Encode(result);
}


secret = ""7pgj8Dm6"";
message = ""Test\0Message"";

result = hmac_512(message, secret);
if (result == ""69H45OZkKcmR9LOszbajUUPGkGT8IqasGPAWqW/1stGC2Mex2qhIB6aDbuoy7eGfMsaZiU8Y0lO3mQxlsWNPrw=="")
    print(""Success!"");
else
    printf(""Error: %s"", result);
</code></pre>

<p><br /><br /></p>

<h2> My implementation:</h2>

<pre><code>+(void)doSomeMagic{

    NSString *message = @""Test\0Message"";
    NSString *signedRequest = [self signRequestForParameterString:message];

    //checking against CORRECT (from JAVA equivalent) signed request 
    if ([signedRequest isEqualToString:@""69H45OZkKcmR9LOszbajUUPGkGT8IqasGPAWqW/1stGC2Mex2qhIB6aDbuoy7eGfMsaZiU8Y0lO3mQxlsWNPrw=="" ])
        NSLog(@""Success!"");
    else
        NSLog(@""Error!"");
}
</code></pre>

<p>Here is the signing method: </p>

<pre><code>+(NSString *)signRequestForParameterString:(NSString*)paramStr{

    NSString *secret = @""7pgj8Dm6"";

    // secret is base64 encoded, so I decode it 
    NSData *decodedSecret = [secret base64DecodedData];
    NSString *decodedSecretString = [NSString stringWithUTF8String:[decodedSecret bytes]];

    NSData *data = [paramStr dataUsingEncoding:NSUTF8StringEncoding];
    NSString *dataString = [NSString stringWithUTF8String:[data bytes]];


    return [self generateHMACSHA512Hash:decodedSecretString data:dataString];

}
</code></pre>

<p>Here is the hashing function: </p>

<pre><code>+(NSString *)generateHMACSHA512Hash:(NSString *)key data:(NSString *)data{


    const char *cKey = [key cStringUsingEncoding:NSASCIIStringEncoding];
    const char *cData = [data cStringUsingEncoding:NSASCIIStringEncoding];

    unsigned char cHMAC[CC_SHA512_DIGEST_LENGTH];

    CCHmac(kCCHmacAlgSHA512, cKey, strlen(cKey), cData, strlen(cData), cHMAC);

    NSData *HMAC = [[NSData alloc] initWithBytes:cHMAC
                                          length:sizeof(cHMAC)];

    NSString *hash = [HMAC base64EncodedString];

    return hash;

} 
</code></pre>

<p>I am pretty sure it is due to the encoding of the strings (decodedSecretString and dataString). <code>decodedSecretString</code> (decoded base64) after decoding is encoded in ASCII. However, when I call the hashing method, I encode it in ascii again, which will result in a null error. Everything is confusing me right now. </p>
","<p>When doing HMAC or other cryptographic functions, you should build up some fundamental methods/functions that don't deal with strings first. Then you can create wrapper methods that decode/encode string data or digests in a convenient way.</p>

<pre><code>+ (NSData *)dataBySigningData:(NSData *)data withKey:(NSData *)key
{
  unsigned char cHMAC[CC_SHA512_DIGEST_LENGTH];
  CCHmac(kCCHmacAlgSHA512, [key bytes], [key length], [data bytes], [data lenght], cHMAC);
  return [[NSData alloc] initWithBytes:cHMAC length:CC_SHA512_DIGEST_LENGTH];
}

+ (NSData *)dataBySigningMessage:(NSString *)message withKey:(NSData *)key
{
  return [self dataBySigningData:[message dataUsingEncoding:NSUTF8StringEncoding]
                         withKey:[key dataUsingEncoding:NSUTF8StringEncoding]];
}
</code></pre>

<p>(Note: this code is not tested, just hacked together in a text editor)</p>

<p>Don't worry about the string representation of your key or data. Then you can go from there, e.g. getting the base64 encoding of the digest.</p>

<p>Cryptographic functions DO NOT CARE about strings or text encodings. They care about bytes. Strings (in C, since they are null-terminated) are a mere subset of what can be represented in data. So it would be severely limiting to deal with strings.</p>
","20290582","561","<objective-c><macos><sha><hmac><nsstringencoding>","0","0","2","2013-11-29 17:09:58","20290222","3","","","","","2013-11-29 16:27:13","","","2013-11-29 17:09:58"
"47766278","How to pass binary key to openssl","<p>I'm stumped trying to pass the key parameter to <code>openssl dgst</code>. I'm trying to interface to the GDAX trading platform and each request must be signed by HMAC. They clearly say to </p>

<blockquote>
  <p>""first base64-decode the alphanumeric secret string (resulting in 64
  bytes) before using it as the key for HMAC.""</p>
</blockquote>

<p>This results in a 64-byte binary string. But the openssl command line program simply says <code>-hmac key</code> meaning that you supply the key as a parameter on the command line, which is fine if it is simple ASCII. But I see no way to supply a binary string of bytes as the key. Is there a way to do this?</p>

<p>(also any general advice about directing GDAX with <code>curl</code> is welcome too)</p>
","<p>You can specify a binary key in hex format like this:</p>

<pre><code>$ openssl dgst -mac hmac -macopt hexkey:0102030405 myfile
</code></pre>
","47769102","561","<openssl><hmac><gdax-api>","0","4","1","2017-12-12 09:24:41","47769102","1","","","","","2017-12-12 06:06:33","","","2017-12-12 09:24:41"
"28954405","Secure HMAC shared secret by encrypting authorization hash with RSA","<p>I am considering building an API system that uses HMAC.  The server and client will have a shared secret, the client will sign the requests, the server will validate, and proceed if all is well.  The trouble with this sort of system is that the secret has to be stored in a way where it can be retrieved, such as a database.  If someone were to steal the secret, they have the key needed to do basically anything that user is authorized to do.</p>

<p>I was thinking that there must be a more secure alternative.  Are there any flaws with using RSA?</p>

<ol>
<li>Client has the ""public"" key instead of a shared secret.  (The public key must still be kept secret for my use case.)</li>
<li>Client will hash the message with SHA-1 or whatever as normal.</li>
<li>Instead of adding the hash to the message directly, the hash will be encrypted via it's public key, and then sent with the message.</li>
<li>Server has the ""private"" key (to decrypt messages) but has no knowledge of the ""public"" key.  (This is the part that makes this more secure than the normal approach.  If the database is stolen, no keys are stolen that can impersonate a user.)</li>
<li>Server will decrypt the hash and validate the message as normal.</li>
</ol>

<p>Is there anything wrong with this approach?  Are there known implementations of this or something similar?</p>
","<p>It depends on the asymmetric cryptosystem you chose:</p>

<p><strong>(EC)Diffie-Hellman:</strong> It does not work. Publickey is directly derived from the privatekey via the generator, e.g. [d]G = Q</p>

<p><strong>RSA:</strong> Usually people chose fixed publickeys like 0x010001. This is done for efficiency reasons. If you take a large enough, fully random <code>e</code> and derive <code>d</code> from it there is no possibility to calculate <code>p</code> and <code>q</code> given <code>d</code> and <code>N</code> <strong>OR</strong> <code>e</code> and <code>N</code>. Actually they are pretty equally then and the label private and public don't make much sense anymore. All that relies on a smmyetrical property of RSA. Be sure not to walk into textbook RSA issues. And be sure to ask enough clever people about it, this is just my thoughts on it.</p>
","28974643","560","<security><encryption><hash><hmac><hmacsha1>","0","1","2","2015-03-10 22:02:44","28974643","7","","","","","2015-03-10 00:51:39","","","2015-03-10 21:43:05"
"28954405","Secure HMAC shared secret by encrypting authorization hash with RSA","<p>I am considering building an API system that uses HMAC.  The server and client will have a shared secret, the client will sign the requests, the server will validate, and proceed if all is well.  The trouble with this sort of system is that the secret has to be stored in a way where it can be retrieved, such as a database.  If someone were to steal the secret, they have the key needed to do basically anything that user is authorized to do.</p>

<p>I was thinking that there must be a more secure alternative.  Are there any flaws with using RSA?</p>

<ol>
<li>Client has the ""public"" key instead of a shared secret.  (The public key must still be kept secret for my use case.)</li>
<li>Client will hash the message with SHA-1 or whatever as normal.</li>
<li>Instead of adding the hash to the message directly, the hash will be encrypted via it's public key, and then sent with the message.</li>
<li>Server has the ""private"" key (to decrypt messages) but has no knowledge of the ""public"" key.  (This is the part that makes this more secure than the normal approach.  If the database is stolen, no keys are stolen that can impersonate a user.)</li>
<li>Server will decrypt the hash and validate the message as normal.</li>
</ol>

<p>Is there anything wrong with this approach?  Are there known implementations of this or something similar?</p>
","<p>If you base your crypto system on a proof of possession of a secret you need to, well - keep it secret :) </p>

<p>But yes, if you dont need the speed of a symmetric authentication then you can use a assymetric signature. Typically it is done with a signed hash, but you can also use a signed hmac.</p>

<p>The terminology is normally, that you sign with a secret key and validate with the public key (even when the signing operation looks like an encryption).</p>
","28974734","560","<security><encryption><hash><hmac><hmacsha1>","0","1","2","2015-03-10 22:02:44","28974643","7","","","","","2015-03-10 00:51:39","","2015-03-10 22:02:44","2015-03-10 21:48:33"
"50338392","How to: New order Binance API via RStudio","<p>I am trying to create a new order via the Binance API using RStudio.</p>

<p>I found the Binance Official API Docs and figured out that I should use </p>

<pre><code>POST /api/v3/order (HMAC SHA256).
</code></pre>

<p>The following script doesn't work out for me:</p>

<pre><code>url='https://api.binance.com/api/v3/account'

GET(url, 
    add_headers(""X-MBX-APIKEY""= *[my API key]*),
    query=list(""symbol""=""ETHBTC"", 
               ""side""=""BUY"", 
               ""type""=""MARKET"", 
               ""quantity""=1, 
               recvWindow=5000, 
               ""timestamp""=1499827319559, 
               ""signature""=**???**), 
    verbose())
</code></pre>

<p>Does anyone know what I'm doing wrong and how I can create an order via the Binance API using RSTUDIO and how I can create my signature?</p>
","<pre><code>library(httr)

timestamp &lt;-
  as.character(jsonlite::fromJSON(content(
    GET(""https://api.binance.com/api/v1/time""), ""text""
  ))$serverTime + 999)

query &lt;-
  list(
    ""symbol"" = ""VENBTC"",
    ""side"" = ""BUY"",
    ""type"" = ""MARKET"",
    ""quantity"" = 1,
    ""recvWindow"" = 5000,
    ""timestamp"" = timestamp
  )

signature &lt;-
  digest::hmac(
    key = ""*[my secret key]*"",
    object = paste(names(query), query, sep = ""="", collapse = ""&amp;""),
    algo = ""sha256""
  )

POST(
  url,
  add_headers(""X-MBX-APIKEY"" = ""*[my API key]*""),
  query = c(query, signature = signature),
  verbose()
)
</code></pre>
","50415056","560","<r><api><sha256><hmac><binance>","1","1","1","2018-05-18 16:33:12","50415056","13","","3982755","","2018-05-14 20:33:44","2018-05-14 20:17:10","","2018-05-18 16:33:12","2018-05-18 15:49:20"
"12445709","How to use CBC and HMac? Mcrypt PHP","<p>How do you use CBC and HMAC?</p>

<p>I couldn't find enough information on the internet.</p>

<p>How do you get the IV? How would you know what it is when you need to decrypt later? (Wouldn't putting it in the database defeat the purpose?)</p>

<p>What is HMAC, and is it protected from hacking?</p>

<p>The encrypted text stays in the database. If someone hacks into the database, they would probably have access to the file manager too, unless they found a way to do SQL injection. How would the script know which IV and key to use, that the hacker wouldn't know?</p>

<p>What is the best method to use when encrypting multiple paragraphs of text, which will only be seen within the website by the user who wrote it? (The user always views it as plain text.)</p>

<p>I use ECB now (the website has not yet been released for beta) but I've heard that CBC is much more secure.</p>
","<p>The main purpose of an IV is to be different for each encryption. It's not secret. It's standard to create a random IV for each encryption, and store it as a prefix of the ciphertext.</p>

<p>HMAC is a MAC, and it ensures that only messages created by somebody who knows the key are accepted as valid. It's important to apply the MAC after encryption and to include the IV. i.e. <code>HMAC(IV+Encrypt(...))</code>, and thus verify it before decryption. This avoids certain attacks, such as padding oracles.</p>

<p>It's also worth a consideration to use an authenticated encryption mode, such as AES-GCM, which combines authentication and encryption in a secure way. Just make damn sure you never reuse an IV in that case.</p>

<hr>

<p>Where to store the key is a difficult question, and very application dependent. As you noticed, storing the key on the same system as the database does not gain you much.</p>

<p>Sometimes it's a good idea to derive the key from the user's password, using a slow KDF with a salt, such as PBKDF2. Sometimes you can store it on the client. Sometimes you can store it on a different server with smaller attack surface.</p>

<p>To figure out where to store it, you need clear requirements and a threat model.</p>
","12446118","554","<php><security><mcrypt><hmac><cbc-mode>","0","3","1","2012-09-16 10:17:12","","0","","","","","2012-09-16 09:16:21","","","2012-09-16 10:17:12"
"46775391","How long to crack HMAC sha256 digest private key given data","<p>We've built a javascript module which can be embedded in third-party webpages.  When this client module is initialized, it executes a transaction within our web application via a cross-site request.</p>

<p>The transaction consists of an external uuid, an email, and some additional meta properties. This message is signed with an HMAC sha256 digest, using our partner's private API key.</p>

<p>Ruby example:</p>

<pre><code>data = {
  uuid: ""ABCAFAFDS"",
  email: ""email@gmail.com"",
  meta: {}
}

private_key = ""Qd9fe0y2ezqfae4Qj6At""
signature = OpenSSL::HMAC.hexdigest(
  OpenSSL::Digest.new(""sha256""),
  private_key,
  data.to_json
)
</code></pre>

<p>Within the third-party webpage, the javascript client is then initialized with the signature and the data:</p>

<p><code>new Client(signature, data).execute()</code>;</p>

<p>Initially, our plan was to allow the client to create a partial / incomplete transaction within our system and then require a subsequent back-end request via our REST API to confirm / finalize the transaction. Assuming that we can secure the front-end, however, it would be preferential to remove the back-end confirmation requirement.</p>

<p>Can we reasonably secure the client code using signed messages in this fashion? If the data and the signed message is available in the client, how difficult would it be for a bad actor to brute force the API private key length, given the length above?</p>
","<p>most internet traffic has signed tokens on the client these days.  All your gmail logins, facebook logins, etc do this so it is fairly standard.  I'd recommend using an existing standard (and 3rd party library) rather than roll your own token though.  This will let you leverage other people's expertise in this area.</p>

<p>JWT (json web token) is in common use and there are many libraries for working with JWT's.  See <a href=""https://jwt.io"" rel=""nofollow noreferrer"">https://jwt.io</a> for more information.</p>
","46775500","553","<javascript><sha256><hmac>","0","2","1","2017-10-16 17:04:35","46775500","1","","","","","2017-10-16 16:57:42","","","2017-10-16 17:04:35"
"18059913","Hex HMAC MD5 input hex(hmacmd5(input)) javascript","<p>I have tried a few JavaScript libraries but none seem to have this functionality? Does anyone know how to return data <code>hex(hmacmd5(input))</code> with JavaScript ?  </p>
","<p>CryptoJS.HmacMD5(input.toString(), key);</p>
","18066341","552","<javascript><input><hex><md5><hmac>","0","0","1","2013-08-05 19:40:02","18066341","2","1","1892267","","2013-08-05 14:01:25","2013-08-05 13:52:46","","","2013-08-05 19:40:02"
"21589049","How to assure client side data integrity","<p>For our web application, we want the client to be as thick as possible, and keep our server as thin as possible. The idea is to give the client all the necessary data, let the user interact with that data in a snappy Javascript application (currently GWT, but we are considering moving to Angular or Backbone). We would like to make the server completely stateless, which improves scalability and memory usage.</p>

<p>A fundamental problem of course is that there is some data a user is not allowed to alter. For example, when doing a password reset procedure, the user cannot change his username, because then he could alter somebody elses password. There is also a boolean that indicates if the user has passed the captcha, we cannot allow him to set that to true. And many other examples can be thought of.</p>

<p>The solution we thought of is the following: Together with these strings that a user cannot touch (we call them the priviledged information), we also add a signature. This is simply the concatenation of the priviledeg info, HMAC signed on the server with an AES key. When the data from the client returns we concatenate and sign the info again, and if the signatures are identical, we know that the client has not touched our info.</p>

<p>My questions: Does anybody see any weaknesses in this scheme, and can anybody point to resources (books, blogs) where more info about this subject can be found?</p>
","<p>For anyone finding this question after several years: The thing I suggested was basically the same as Json Web Tokens (<a href=""https://en.wikipedia.org/wiki/JSON_Web_Token"" rel=""nofollow noreferrer"">https://en.wikipedia.org/wiki/JSON_Web_Token</a>). The idea I suggested was correct, but of course you should use established libraries instead of rolling your own.</p>
","51299929","550","<javascript><rest><client-side><hmac>","2","0","1","2018-07-12 07:41:36","51299929","6","","","","","2014-02-05 21:36:27","","","2018-07-12 07:41:36"
"38381217","Signed Hmac/sha1 message using Go different result than node.js or Python","<p>I am trying to generate a Hmac/SHA1 signature using Go, but I'm getting different results than when I test with Node.js or Python.</p>

<p>Here's my code in Go:</p>

<pre><code>signature := hmac.New(sha1.New, []byte(signKey))
signature.Write([]byte(buffer))
return hex.EncodeToString(signature.Sum(nil))
</code></pre>

<p>Here's my code in Node.js:</p>

<pre><code>return crypto.createHmac('sha1', signKey).update(buffer).digest('hex');
</code></pre>

<p>Python:</p>

<pre><code>return hmac.new(signKey, buffer, sha1).hexdigest()
</code></pre>

<p>Can you help figure out what I'm doing wrong?</p>

<p>Thanks!</p>
","<p>I am getting identical results in Go and Node.js in my testing. That means that your key and/or buffer <strong>must</strong> different in Go.</p>

<p>Here is my test code for reference:</p>

<p>Go:</p>

<pre><code>package main

import (
    ""crypto/hmac""
    ""crypto/sha1""
    ""encoding/hex""
)

func main() {
    signKey := ""12345""
    buffer := []byte{1, 2, 3}
    signature := hmac.New(sha1.New, []byte(signKey))
    signature.Write([]byte(buffer))
    println(hex.EncodeToString(signature.Sum(nil)))
}
</code></pre>

<p>Node.js:</p>

<pre><code>var crypto = require('crypto');

var signKey = ""12345"";
var buffer  = ""\x01\x02\x03"";
console.log(
    crypto.createHmac('sha1', signKey).update(""\x01\x02\x03"", ""binary"").digest('hex')
);
</code></pre>
","38383086","548","<go><hmac><hmacsha1>","-1","2","1","2016-07-14 19:50:21","","0","","","","","2016-07-14 18:05:24","","","2016-07-14 19:50:21"
"39841363","ColdFusion hmac() returns different values with toBase64 and binaryEncode","<p>I am attempting to use ColdFusion's <a href=""https://helpx.adobe.com/coldfusion/cfml-reference/coldfusion-functions/functions-h-im/hmac.html"" rel=""nofollow noreferrer"">hmac()</a> function to calculate an HMAC value using <code>binaryEncode(binaryObj,'Base64')</code> instead of <a href=""https://helpx.adobe.com/coldfusion/cfml-reference/coldfusion-functions/functions-t-z/tobase64.html"" rel=""nofollow noreferrer"">toBase64()</a> since that function is deprecated. It works perfectly with <code>toBase64()</code> but not with <code>binaryEncode()</code>. The docs are not very informative. Can someone help me understand why I cannot get the same value using <code>binaryEncode</code>?</p>

<p>From what I understand, the <code>hmac()</code> function returns the results in hexadecimal format. <code>binaryEncode()</code> expects a binary value, so the<code>hmac()</code> results must be first converted from hex to binary, before it can be converted to base64.</p>

<pre><code>&lt;cfset string = ""1234567890"" /&gt;
&lt;cfset secretKey = ""abcdefghijklmnopqrstuvwxyz"" /&gt;
&lt;!--- Get Hex results from HMAC() ---&gt;
&lt;cfset hmacHex = hmac(string,secretKey,'HMACSHA256') /&gt;
&lt;!--- Decode the binary value from hex ---&gt;
&lt;cfset hmacAsBinary = binaryDecode(hmacHex,'hex') /&gt;
&lt;!--- Convert binary object to Base64 ---&gt;
&lt;cfset hmacBase64 = binaryEncode(hmacAsBinary, 'base64') /&gt;
&lt;cfoutput&gt;
    &lt;!--- incorrect hmac signature ---&gt;
    hmacBase64: #hmacBase64#&lt;br&gt;
    &lt;!--- correct hmac signature ---&gt;
    toBase64: #toBase64(hmac(string,secretKey,'HMACSHA256'))#&lt;br&gt;
&lt;/cfoutput&gt;
</code></pre>

<p>The results are: </p>

<pre><code>hmacBase64: VEVGNnqg9b0eURaDCsA4yIOz5c+QtoJqIPInEZOuRm4=
toBase64: NTQ0NTQ2MzY3QUEwRjVCRDFFNTExNjgzMEFDMDM4Qzg4M0IzRTVDRjkwQjY4MjZBMjBGMjI3MTE5M0FFNDY2RQ==
</code></pre>

<p>One thing I noticed is the results are much longer when using <code>toBase64()</code>. I can't seem to figure out why I can't use <code>binaryEncode()</code>. However, I would like to, since <code>toBase64()</code> is being deprecated. Any insight is much appreciated. Thanks!</p>
","<p><strong>Update based on comments:</strong></p>

<p>Well using <code>ToBase64(Hmac(...))</code> is <em>not</em> the correct way to convert a hex string to base64 ;-) However, it sounds like the API requires something other than a straight conversion.  If so, just do what the <code>ToBase64(hmac(...))</code> code is doing. ie Decode the hex string as UTF8 and re-encode it as base64: </p>

<p><code>matchingResult = binaryEncode(charsetDecode(hmacHex, ""utf-8""), ""base64"")</code></p>

<hr>

<p><strong>Short answer:</strong></p>

<p>The two methods are encoding totally different values. That is why the results do not match. The correct way to convert the hex string to base64 is using <a href=""https://helpx.adobe.com/coldfusion/cfml-reference/coldfusion-functions/functions-a-b/binaryencode.html"" rel=""nofollow"">BinaryEncode/Decode()</a>.</p>

<p><strong>Longer answer:</strong></p>

<blockquote>
  <p><code>&lt;!--- correct hmac signature ---&gt;</code><br>
  <code>toBase64: #toBase64(hmac(string,secretKey,'HMACSHA256'))#&lt;br&gt;</code></p>
</blockquote>

<p>Actually that is <em>not</em> the correct way to convert hex to base64. </p>

<p>Hexadecimal and Base64 are just different ways of representing a <em>binary</em> value. In order to get the same results, the two methods need to start with the same binary. In this case, are actually encoding totally different values. Hence the difference in the results. </p>

<p>With a hexadecimal string, each byte is represented by two characters. So the <em>binary</em> will be <em>half</em> the size of the original string. In the case of HMAC(HMACSHA256), the resulting hex string is 64 characters long. So the <em>binary</em> value should be 32 bytes. To obtain the correct binary value, the string must be decoded <em>as hex</em>:</p>

<pre><code>original string length = #len(hmacHex)#
binary size = #arrayLen(binaryDecode(hmacHex, ""hex""))#
</code></pre>

<p>The problem with ToBase64 is that it decodes the string incorrectly. It treats the input as UTF8 and decodes the characters in the string <em>individually</em>. So the binary value is double the size it should be. Notice it is 64 bytes, instead of 32? That is why the final string is longer as well. </p>

<pre><code>UTF8 binary size = #arrayLen(charsetDecode(hmacHex, ""utf-8""))# 
ToBase64 binary size = #arrayLen(binaryDecode(toBase64(hmacHex), ""base64""))#
</code></pre>

<p>So again, the two methods produce different results because they are encoding totally different values. However, strictly speaking, only the first method is correct. To re-encode a hex string as base64 use <a href=""https://helpx.adobe.com/coldfusion/cfml-reference/coldfusion-functions/functions-a-b/binaryencode.html"" rel=""nofollow"">binaryEncode/binaryDecode</a>: </p>

<pre><code>correctResult = binaryEncode(binaryDecode(hmacHex, ""hex""), ""base64"")
</code></pre>
","39841764","543","<coldfusion><binary><hex><sha256><hmac>","1","4","1","2019-09-07 23:48:47","39841764","0","","-1","","2019-09-07 23:48:47","2016-10-03 22:25:48","","2016-10-04 06:28:15","2016-10-03 23:06:27"
"41937369","GDAX signature example","<p>I just can’t seem to get the signature right and I think some sample data would help me diagnose the problem. Can anyone offer some sample data to help me “calibrate” and make sure my code is functioning properly?</p>

<ol>
<li>prehash string</li>
<li>base64-encoded secret</li>
<li>base64-decoded secret</li>
<li>sha256 HMAC using the base64-decoded secret key on the prehash string</li>
<li>base64-encoded result</li>
</ol>

<p>I am working in VBA.  Any additional tips/advice would be appreciated.</p>
","<p>The answer is no one will provide you with the sample data you are requesting as that would mean they in a sense would be sharing their own private passphrase, API key and secret with you.  </p>

<ol>
<li>go to gdax.com and click on API.</li>
<li>Generate copy the generated passphrase (do not lose this)</li>
<li>Go thru remaining steps to generate API key and secret (do not lose this)</li>
<li>Use the API reference to create authentication requests (signing, HMAC, Etc.)</li>
<li>Consider an easier way to interact with REST API than VBA.</li>
</ol>
","43033997","529","<base64><sha256><hmac>","-1","0","2","2018-01-30 06:41:12","","1","","3047063","","2017-02-01 14:39:18","2017-01-30 13:42:36","","","2017-03-26 20:13:21"
"41937369","GDAX signature example","<p>I just can’t seem to get the signature right and I think some sample data would help me diagnose the problem. Can anyone offer some sample data to help me “calibrate” and make sure my code is functioning properly?</p>

<ol>
<li>prehash string</li>
<li>base64-encoded secret</li>
<li>base64-decoded secret</li>
<li>sha256 HMAC using the base64-decoded secret key on the prehash string</li>
<li>base64-encoded result</li>
</ol>

<p>I am working in VBA.  Any additional tips/advice would be appreciated.</p>
","<p>Sample data for ""calibration"" of your software can use the following inputs:</p>

<blockquote>
  <p>timestamp: 1517266319.000</p>
  
  <p>method: GET</p>
  
  <p>requestpath: /accounts</p>
  
  <p>secret: D1/0wNj3wsKg8XcTs4KCfZUVzsHXIOW7w38Moj+YximHA5VQS7zAG47bgNSNGIGtFtYQ0vei2JiSPvX3JkBsA==</p>
</blockquote>

<p>The correct signature for the above inputs is:</p>

<blockquote>
  <p>jQxycBtZQKEWUZjtIaFnD1zoUDQebGeHmoIW3KHvmtg=</p>
</blockquote>

<p>This is confirmed by both the NodeJS and Python code samples.</p>
","48515386","529","<base64><sha256><hmac>","-1","0","2","2018-01-30 06:41:12","","1","","3047063","","2017-02-01 14:39:18","2017-01-30 13:42:36","","","2018-01-30 06:41:12"
"22855600","This code is not creating HMAC signature. I have to create HMAC signature through C#.NET, how can I create?","<p>Here is my code, what format of input string should I use or what actual format is there of input string? What should be the prn number? Or can we assume any 10 digit number as prn to get output?</p>

<pre><code>using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Security.Cryptography;
using System.IO;
using System.Web;

namespace HMCApp2
{
    class Sha1HashProgram
    {
        static void Main(string[] args)
        {
            string key = ""&lt;my private key&gt;"";
          //  string data = ""'mrj'.'json'.'539ff0f815ca697c681fe01d32ba52e3'"";

            string data = ""json539ff0f815ca697c681fe01d32ba52e31234567890"";
            string secret = Sha1HashProgram.ShaHash(data, key);
            Console.WriteLine(secret);
            Console.ReadKey();
        }

        static string ShaHash(string value, string key)
        {
            using (var hmac = new HMACSHA1(Encoding.ASCII.GetBytes(key)))
            {
                return ByteToString(hmac.ComputeHash(Encoding.ASCII.GetBytes(value)));
            }
        }

        static string ByteToString(IEnumerable&lt;byte&gt; data)
        {
            return string.Concat(data.Select(b =&gt; b.ToString(""x2"")));
        }
    }
}
</code></pre>

<p>I have also tried it in another way but still not working, Here is my another code,</p>

<pre><code>using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Security.Cryptography;
using System.IO;

namespace ConsoleApplication1
{
    class Program
    {
        public static string Encode(string input, byte[] key)
        {
            HMACSHA1 myhmacsha1 = new HMACSHA1(key);
            byte[] byteArray = Encoding.ASCII.GetBytes(input);
            MemoryStream stream = new MemoryStream(byteArray);
            return myhmacsha1.ComputeHash(stream).Aggregate("""", (s, e) =&gt; s + String.Format(""{0:x2}"", e), s =&gt; s);
        }


        static void Main(string[] args)
        {
            byte[] key = Encoding.ASCII.GetBytes(""my private key"");
            string input = """";
    //        foreach (string s in new string[] { ""Marry"", "" had"", "" a"", "" little"", "" //lamb"" })
    //        {
     //           input =""'mrj'.'json'.'539ff0f815ca697c681fe01d32ba52e3'"";
                input = ""json539ff0f815ca697c681fe01d32ba52e31234567890"";
                System.Console.WriteLine(Encode(input, key));
   //         }
            return;
        }
    }
}
</code></pre>

<p>I tried in that way as told by Martin, now I am getting the HMAC signature but it is not showing me the json when I paste it to URL,</p>

<pre><code>using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Security.Cryptography;
using System.IO;
using System.Web;
using System.Globalization;
using System.Runtime.Remoting.Metadata.W3cXsd2001;

namespace HMCApp2
{
    class Sha1HashProgram
    {
        static void Main(string[] args)
        {
            string key = ""&lt;my private key&gt;"";

         //   string data = ""json539ff0f815ca697c681fe01d32ba52e31234567890"";
            string data = ""539ff0f815ca697c681fe01d32ba52e3"";
            string secret = Sha1HashProgram.ShaHash(data, key);
            Console.WriteLine(secret);
 //           Console.ReadKey();
        }

        static string ShaHash(string value, string key)
        {
           // using (var hmac = new HMACSHA1(Encoding.ASCII.GetBytes(key)))
            using (var hmac = new HMACSHA1(StringToBytes(key)))
            {
               // return ByteToString(hmac.ComputeHash(Encoding.ASCII.GetBytes(value)));
                return ByteToString(hmac.ComputeHash(StringToBytes(value)));
            }
        }

        static string ByteToString(IEnumerable&lt;byte&gt; data)
        {
            return string.Concat(data.Select(b =&gt; b.ToString(""x2"")));
        }

        static Byte[] StringToBytes(String hexString)
        {

            return Enumerable.Range(0, hexString.Length / 2).Select(i =&gt; (Byte)Int32.Parse(hexString.Substring(2 * i, 2), NumberStyles.HexNumber)).ToArray();

        }

    }
}
</code></pre>
","<p>As it has been pointed out by Anton Tykhyy in the comments the code <code>Encoding.ASCII.GetBytes</code> cannot be used to convert a string of hex digits to bytes. Instead you can use this function (it will throw various exceptions if the input is not a valid hex string):</p>

<pre><code>Byte[] StringToBytes(String hexString) {
  return Enumerable
    .Range(0, hexString.Length/2)
    .Select(i =&gt; (Byte) Int32.Parse(hexString.Substring(2*i, 2), NumberStyles.HexNumber))
    .ToArray();
}
</code></pre>

<p>Calling <code>StringToBytes(""539ff0f815ca697c681fe01d32ba52e31234567890"")</code> will return an array of bytes: <code>0x53, 0x9F, 0xF0, ...</code>.</p>
","22856825","519","<c#><hmac><hmacsha1>","0","0","1","2014-05-20 13:09:46","","4","1","15541","","2014-05-20 13:09:46","2014-04-04 06:52:16","","","2014-04-04 07:56:39"
"20518988","Is it possible to use 'ALG_HMAC_SHA1' method from 'Signature' class in javacard framework 2.2.1 version?","<p>I want to use ALG_HMAC_SHA1 method from javacard.security.Signature class. But my javacard framework version is 2.2.1 so Signature class does not include this method for this version. 
it includes this method after 2.2.2. Is it possible to use this method without upgrading framework version? </p>
","<p>You could always just use the value that you find in the 2.2.2 framework for the constant <code>ALG_HMAC_SHA1</code> (= <code>(byte)24</code>) and pass it to the <code>Signature.getInstance()</code> method. So using the <strong>value</strong> is not a problem. However, the smartcard hardware on which you want to run your applet needs to support this algorithm in order for you to be able to use.</p>

<p>So if your smartcard hardware supports JC 2.2.1, calling the <code>getInstance()</code> method with the value of <code>ALG_HMAC_SHA1</code> will typically cause a <code>CryptoException</code> with reason (<code>CryptoException.NO_SUCH_ALGORITHM</code>) indicating that the algorithm is not supported and JC 2.2.1 does not support any HMAC algorithms). Using the public constant directly will likely result in upload or installation failure.</p>

<p>Just to be clear here, I'm not suggesting that compiling for a different framework version might suddenly solve your problem. I'm rather suggesting that you can <strong>not</strong> simply upgrade the functionality that is available on your card.</p>
","20524836","518","<sha1><hmac><otp><javacard><hmacsha1>","3","4","2","2014-03-30 15:21:26","","0","0","2364220","","2013-12-11 14:55:09","2013-12-11 12:19:44","","2014-03-30 15:21:26","2013-12-11 16:39:54"
"20518988","Is it possible to use 'ALG_HMAC_SHA1' method from 'Signature' class in javacard framework 2.2.1 version?","<p>I want to use ALG_HMAC_SHA1 method from javacard.security.Signature class. But my javacard framework version is 2.2.1 so Signature class does not include this method for this version. 
it includes this method after 2.2.2. Is it possible to use this method without upgrading framework version? </p>
","<p>The HMAC algorithm is not a big deal. As long as your card supports SHA-1 you can simply implement the algorithm on your own. 
See <a href=""http://tools.ietf.org/html/rfc2104"" rel=""nofollow"">RFC2104</a> for details and <a href=""http://tools.ietf.org/html/rfc2202"" rel=""nofollow"">RFC2202</a> for test vectors.</p>

<p>BTW: You can not ""upgrade the framework version"" of a JavaCard - the Card OS and the JavaCard framework is usually not changeable (stored in ROM). You can only buy a different card...</p>
","20530385","518","<sha1><hmac><otp><javacard><hmacsha1>","3","3","2","2014-03-30 15:21:26","","0","0","2364220","","2013-12-11 14:55:09","2013-12-11 12:19:44","","","2013-12-11 21:35:57"
"36897843","nodejs crypto hmac produces different hashes if secret is passed as a literal vs variable","<p>I'm trying to use nodejs' createHmac function from its crypto library.</p>

<p>Problem: It produces different hashes when given (seemingly) identical arguments. The only difference being whether the 'secret' parameter is a string variable, or a string literal.</p>

<p>The following SPA isolates the issue. I'm using nwjs (node webkit) SDK flavour v 0.14.2 to run this code on OS X El Cap.</p>

<p>Any help and advice gratefully received.</p>

<p><strong>index.html</strong></p>

<pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;title&gt;Context Menu&lt;/title&gt;
  &lt;link href=""https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css""
    rel=""stylesheet"" 
    integrity=""sha384-1q8mTJOASx8j1Au+a5WDVnPi2lkFfwwEAa8hDDdjZlpLegxhjVME1fgjWPGmkzs7"" 
    crossorigin=""anonymous""&gt;
&lt;/head&gt;
&lt;body style=""width: 100%; height: 100%;""&gt;

&lt;div id=""wrapper""&gt;
&lt;/div&gt;

&lt;script   src=""https://code.jquery.com/jquery-2.2.3.min.js""   
    integrity=""sha256-a23g1Nt4dtEYOj7bR+vTu7+T8VP13humZFBJNIYoEJo=""   
    crossorigin=""anonymous""&gt;&lt;/script&gt;
&lt;script src=""https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/js/bootstrap.min.js"" 
    integrity=""sha384-0mSbJDEHialfmuBBQP6A4Qrprq5OVfW37PRR3j5ELqxss1yVqOtnepnHVP9aJ7xS"" 
    crossorigin=""anonymous""&gt;&lt;/script&gt;
&lt;script type=""text/javascript"" src=""./index.js""&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p><strong>index.js</strong></p>

<pre><code>var nodeCrypto = require('crypto');

var payload = 'twas brillig and the slithy toves did gyre and gimble in the wabe';

//
// simple UI to get a user-entered secret
// and echo the results.
// enter 'wibble' in input element to demo the problem to match hard coded literal
//
$('#wrapper').append (
    $('&lt;div&gt;').addClass('form-group')
        .append (
            $('&lt;label&gt;').attr('for','userinput').text('Tell me a secret:'),
            $('&lt;input&gt;').addClass('form-control').attr('type','text').attr('id','userinput')
        ),
    $('&lt;p&gt;').attr('id', 'hash'),
    $('&lt;p&gt;').attr('id', 'nash')
);

$('input').on('change', function (ev) {

    // compute hash based on user input
    var hash = nodeCrypto.createHmac ('sha256', $(this).val())
        .update (payload)
        .digest ('hex');            
    console.log ('hash: ' + hash);
    $('p[id=hash]').text('secret: ' + $(this).val() + ', hash: ' + hash);
    // logs hash: f7b4ae1aaa35b813571f00bca7c81d08176b56cb3a1d1f8c8ba95a17ba6f6f29
    // as long as user enters 'wibble'

    // compute hash based on string literal
    var nash = nodeCrypto.createHmac ('sha256', 'wibble')
                .update (payload)
                .digest ('hex');            
    console.log ('nash: ' + nash);
    $('p[id=nash]').text('secret: wibble, hash: ' + nash);
    // logs hash: c9592948b3de038c9aa339f94b61928de803417183a6c95b1829a04c69fe6bf6

});
</code></pre>

<p><strong>Screengrab</strong>
<a href=""http://i.stack.imgur.com/cnBIH.png"" rel=""nofollow"">Shows user input together with computed hashes</a></p>

<p><strong>package.json</strong></p>

<pre><code>{
  ""name"": ""hmac"",
  ""main"": ""index.html"",
  ""description"": ""nodejs crypto hmac test"",
  ""author"": ""xxx""
}
</code></pre>
","<p>There's something about the discipline of isolating a problem and writing an explanation for the tough but fair crowd that is stackoverflow that often seems to shake out a solution all by itself. </p>

<p>So with apologies for this 'asked &amp; answered'. I'm just relieved to have a solution.</p>

<p>A little bit of further experimentation yielded these insights:</p>

<ol>
<li>forcing the argument to be a separate object via </li>
</ol>

<blockquote>
  <p>secret = new String(...)</p>
</blockquote>

<p>caused a failure inside of node's crypto library: </p>

<blockquote>
  <p>TypeError: not a buffer.</p>
</blockquote>

<p>This is a clue!</p>

<ol start=""2"">
<li>after converting the user input to a Buffer before passing it as the secret to createHmac results in consistent behaviour between the 2 calls.</li>
</ol>

<p><strong>Updated js</strong></p>

<pre><code>// compute hash based on user input
    var secretStr = $(this).val();
    var hash = nodeCrypto.createHmac ('sha256', secretStr)
        .update (payload)
        .digest ('hex');            
    console.log ('hash: ' + hash);
    $('p[id=hash]').text('secret: ' + $(this).val() + ', hash: ' + hash);
    // logs hash: f7b4ae1aaa35b813571f00bca7c81d08176b56cb3a1d1f8c8ba95a17ba6f6f29
    // as long as user enters 'wibble'

    // compute hash based on string literal
    var nash = nodeCrypto.createHmac ('sha256', 'wibble')
        .update (payload)
        .digest ('hex');            
    console.log ('nash: ' + nash);
    $('p[id=nash]').text('secret: wibble, nash: ' + nash);
    // logs nash: c9592948b3de038c9aa339f94b61928de803417183a6c95b1829a04c69fe6bf6

    // compute hash based on Buffer initialised from user input
    var secretBuf = Buffer.from($(this).val());
    var mash = nodeCrypto.createHmac ('sha256', secretBuf)
        .update (payload)
        .digest ('hex');            
    console.log ('nash: ' + nash);
    $('p[id=mash]').text('secret: wibble, mash: ' + nash);
    // logs mash: c9592948b3de038c9aa339f94b61928de803417183a6c95b1829a04c69fe6bf6
</code></pre>
","36898537","512","<javascript><node.js><hash><node-webkit><hmac>","1","1","1","2016-04-27 18:54:49","","0","","","","","2016-04-27 18:18:06","","","2016-04-27 18:54:49"
"9672910","Allowing any data to be decrypted using AES 256 for the purposes of HMAC","<p>Consider a file that will be encrypted by a C# library that I will write, consisting of a 64 byte HMAC followed immediately by the encrypted data encrypted with AES 256. The 16-byte IV,  32-byte Key and 64-byte HMACSHA512 initialisation key will come from Rfc2898DeriveBytes via a single string password, entered by the user (4096 iterations, and a single salt from random.org).</p>

<ol>
<li><p>Are there any negative security implications of this design?</p></li>
<li><p>Have I gone overboard? (it, with the 64-byte initialisation key or 4096 iterations)</p></li>
<li><p>I want to be able to decrypt any data whatsoever in order to use the embedded HMAC to verify that the password was correct (that is, that the 'decrypted file is the original file'). Specifically, I'm looking to avoid errors such as ""Padding is invalid and cannot be removed."". Any ideas on how to go about this?</p></li>
</ol>
","<ol>
<li><p>Yes, the IV should be prepended to the cipher text and should be random. If you use Rfc2898DeriveBytes you will get the same IV each time, so encrypting different plain texts will result in identical cipher texts, leaking information.</p></li>
<li><p>Yes, the 64 byte initialization key is a bit much. 16 to 32 bytes should be more than enough. That said, it does not make much difference regarding performance, so... 4Ki iterations is fine (why not just 4000, the algorithm does not change).</p></li>
<li><p>Yes, place the HMAC over the encrypted data, and make sure you verify the HMAC <strong>before</strong> you decrypt (the last block). Normally the HMAC is placed after the cipher text (as a streaming implementation will only know the HMAC once it encrypted all the cipher text).</p></li>
</ol>

<p>Alternatively you could use AES in GCM mode so you don't need the HMAC anymore. GCM (or EAX) mode is not always available though.</p>
","9673553","511","<c#><security><encryption><hash><hmac>","2","1","1","2012-03-12 20:08:45","","6","","815724","","2012-03-12 20:08:45","2012-03-12 18:43:04","","","2012-03-12 19:30:36"
"35506005","Emulate github hook with curl with secret","<p>I have a need similar to <a href=""https://stackoverflow.com/questions/10119299/emulate-github-service-hooks-wih-curl"">Emulate github service hooks wih curl</a>, but I'm also using a secret in my webhook, and it's not working properly.</p>

<p>Here is what I'm doing as a post-receive hook:</p>

<pre><code>#!/bin/bash

while read oldrev newrev refname; do
  tmpfile=$(mktemp --suffix=.json)

  cat &lt;&lt; EOF &gt; $tmpfile
  {
    ""ref"": ""${refname}""
  }
EOF

  sig=$(cat ""${tmpfile}"" | openssl dgst -sha1 -hmac ""${WEBHOOK_SECRET}"" | awk '{print ""X-Hub-Signature: sha1=""$2}')

  curl -X POST -H ""Content-Type: application/json"" -H ""${sig}"" --data-urlencode ""payload@${tmpfile}"" http://webhook:9000/hooks/r10k

  rm -f ""${tmpfile}""
done
</code></pre>

<p>The webhook (which works with github) complains that the signature is wrong.</p>

<p>What am I doing wrong?</p>
","<p>The problem was coming from the carriage return at the end of the input stream in the openssl command.</p>

<p>I changed to this instead:</p>

<pre><code>#!/bin/bash

while read oldrev newrev refname; do
  tmpfile=$(mktemp --suffix=.json)

  data=""{\""ref\"": \""${refname}\""}""

  sig=$(echo -n ""${data}"" | openssl dgst -sha1 -hmac ""%{WEBHOOK_SECRET}"" | awk '{print ""X-Hub-Signature: sha1=""$2}')

  curl -X POST -H ""Content-Type: application/json"" -H ""${sig}"" --data ""${data}"" http://webhook:9000/hooks/r10k

  rm -f ""${tmpfile}""
done
</code></pre>

<p>and it worked.</p>
","35555118","511","<curl><github><openssl><hmac><webhooks>","0","2","1","2016-02-22 13:37:12","35555118","0","","-1","","2017-05-23 11:59:35","2016-02-19 13:02:16","","","2016-02-22 13:37:12"
"10099460","Printing NSString from NSData & comparing HMAC hashes","<p>I have a NSData which I hashed using HMAC algorithm. I wanted to print the resulted string &amp; see how it looks but all the time I am getting (null) printed on the screen. I tried 2 methods but they did not work. Can someone suggest how to print the hashed data string? I wanted to compare the hash created this way with hash created on server which is JAVA. Now, JAVA returns a string object. How will that be compared with NSData created by objective C. </p>

<pre><code>NSData *hmac = [aData HMACWithAlgorithm:kCCHmacAlgSHA1];
NSString *hmacStr = [NSString stringWithUTF8String:[hmac bytes]];
NSString *hmacStr1 = [[NSString alloc] initWithData:hmac
                                                encoding:NSUTF8StringEncoding];
NSLog(@""Hashed Data=%@ data2=%@"",hmacStr,hmacStr1);
</code></pre>
","<p>Your second idea (hmacStr1) is fine.  If that string is null, then it casts doubt on your input data.</p>

<p>See what happens when you do this:</p>

<pre><code>NSLog(@""about to hash %@, which is %d bytes long"", aData, [aData length]);
NSData *hmac = [aData HMACWithAlgorithm:kCCHmacAlgSHA1];
NSLog(@""the hash result is %@, which is %d bytes long"", hmac, [hmac length]);
</code></pre>

<p>Null data, right?  The fix needs to happen before the conversion to string.</p>
","10099937","506","<iphone><objective-c><ios><cocoa-touch><hmac>","3","0","2","2012-04-11 09:55:26","10100315","0","1","","","","2012-04-11 03:35:48","","","2012-04-11 04:45:42"
"10099460","Printing NSString from NSData & comparing HMAC hashes","<p>I have a NSData which I hashed using HMAC algorithm. I wanted to print the resulted string &amp; see how it looks but all the time I am getting (null) printed on the screen. I tried 2 methods but they did not work. Can someone suggest how to print the hashed data string? I wanted to compare the hash created this way with hash created on server which is JAVA. Now, JAVA returns a string object. How will that be compared with NSData created by objective C. </p>

<pre><code>NSData *hmac = [aData HMACWithAlgorithm:kCCHmacAlgSHA1];
NSString *hmacStr = [NSString stringWithUTF8String:[hmac bytes]];
NSString *hmacStr1 = [[NSString alloc] initWithData:hmac
                                                encoding:NSUTF8StringEncoding];
NSLog(@""Hashed Data=%@ data2=%@"",hmacStr,hmacStr1);
</code></pre>
","<p>I believe the problem here is that <code>HMACWithAlogorithm:</code> is returning the raw bytes that make up the digest rather than the bytes that make up the string UTF8 encoding of the digest.  This is based on an assumption that <code>HMACWithAlgorithm</code>: is using <code>CCHmac</code> from the <code>CommmonCrypto</code> library under the hood.</p>

<p>I think the following might do what you want, it will take the raw digest returned and convert it to a hex encoded NSString of the digest:</p>

<pre><code>NSData *hmac = [aData HMACWithAlgorithm:kCCHmacAlgSHA1];

// Get a pointer to the raw bytes of the digest
unsigned char *digest = (unsigned char *)[hmac bytes];

// Convert the bytes to their hex representation
NSString *hmacStr = [NSString stringWithFormat:@""%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X"",
                digest[0], digest[1], digest[2], digest[3], digest[4], digest[5], digest[6], digest[7],
                digest[8], digest[9], digest[10], digest[11], digest[12], digest[13], digest[14], digest[15],
                digest[16], digest[17], digest[18], digest[19]];      


NSLog(@""Hashed Data=%@"",hmacStr);
</code></pre>
","10100315","506","<iphone><objective-c><ios><cocoa-touch><hmac>","3","4","2","2012-04-11 09:55:26","10100315","0","1","","","","2012-04-11 03:35:48","","2012-04-11 09:55:26","2012-04-11 05:28:33"
"38787349","Translation from Python to JavaScript: HMAC-SHA256","<p>I'd like to convert the following piece of Python code to JavaScript:</p>

<pre class=""lang-py prettyprint-override""><code>signature_string = self.format(""{apip_id}{identity_id}{method}{uri}{content_hash}{timestamp}{nonce}"") # pyhton unicode string in UTF-8 format
signature_bytes = signature_string.encode('utf-8') # previous string is converted in a python bytes string
apip_key_bytes = base64.b64decode(self.apip_key.encode('utf-8')) # pyhton unicode string is converted in a python bytes string and then in ??
hasher = hmac.new(apip_key_bytes, signature_bytes, hashlib.sha256) # hash is calculated
hash_bytes = hasher.digest() # hash coded in a python bytes string
return base64.b64encode(hash_bytes).decode('utf-8') # the hash in bytes is converted to a base64 string
</code></pre>

<p>I tried to use crypto.JS and developed following code but I don't think I get the correct result, This is my conversion in JavaScript of the above code</p>

<pre><code>function stringToAsciiByteArray(str) {
    var bytes = [];
    for (var i = 0; i &lt; str.length; ++i) {
        var charCode = str.charCodeAt(i);
        if (charCode &gt; 0xFF) // char &gt; 1 byte since charCodeAt returns the    UTF-16 value
        {
        throw new Error('Character ' + String.fromCharCode(charCode) + '  can\'t be represented by a US-ASCII byte.');
        }
       bytes.push(charCode);
    }
    return bytes;
}

var signature_bytes = stringToAsciiByteArray(signature_string);
var apip_key_bytes = stringToAsciiByteArray(apip_key);

CryptoJS.enc.u8array = {
    stringify: function(wordArray) {
        // Shortcuts
        var words = wordArray.words;
        var sigBytes = wordArray.sigBytes;

        // Convert
        var u8 = new Uint8Array(sigBytes);
        for (var i = 0; i &lt; sigBytes; i++) {
            var byte = (words[i &gt;&gt;&gt; 2] &gt;&gt;&gt; (24 - (i % 4) * 8)) &amp; 0xff;
            u8[i] = byte;
        }

        return u8;
    },
    parse: function(u8arr) {
        // Shortcut
        var len = u8arr.length;

        // Convert
        var words = [];
        for (var i = 0; i &lt; len; i++) {
            words[i &gt;&gt;&gt; 2] |= (u8arr[i] &amp; 0xff) &lt;&lt; (24 - (i % 4) * 8);
        }

        return CryptoJS.lib.WordArray.create(words, len);
    }
};

var wordArray1 = CryptoJS.enc.u8array.parse(signature_bytes);
var wordArray2 = CryptoJS.enc.u8array.parse(apip_key_bytes);
var hash_bytes = CryptoJS.HmacSHA256(wordArray1, wordArray2);
return window.btoa(hash_bytes);
</code></pre>

<p>The hash code I get after this procedure I don't think it's correct, it doesn't work, am I doing something wrong?</p>
","","","503","<javascript><python><sha256><hmac><cryptojs>","2","","0","2016-08-05 17:22:31","","7","","1816580","","2016-08-05 17:22:31","2016-08-05 10:46:13","","",""
"32843533","generating signature using base64_encode and hash_hmac in ruby on rails","<p>I am con verting PHP code to Rails code and i am facing issues generating signature using base64_encode and hash_mac. The signature generated in php is 48 in length and while in Rails its in different length but fixed.</p>

<p>For example in PHP the signature is <code>Jth7QaN%2F2eCMZxqjZRP%2FZ%2F%2FtKcHHkGf%2F6XB8xPBvp3I%3D</code></p>

<p>and in rails is <code>4ZC7dPRWHl6%2BzDcw9pDnfo2MMRCMNSvTZ8a7a6iPo6Q%3D%0A</code></p>

<p>How can i convert the below code to Rails</p>

<p>PHP Code:</p>

<pre><code>return base64_encode(
    hash_hmac('sha256', $data, $key, true)
);
</code></pre>

<p>Below is the Rails code i am using, but the singatures generated are of different length</p>

<p>Rails Code:</p>

<pre><code>signature_val = Base64.encode64(OpenSSL::HMAC.digest('sha256', key, data))
</code></pre>

<p>Can anyone help me to convert the PHP code to Correct Rails code, so that i can generate the signature properly.</p>

<p>Thanks.</p>
","<p>You can use the next line if you want to simulate the <code>true</code> part for <code>hmac</code> (the fourth parameter):</p>

<pre><code> OpenSSL::HMAC.digest(digest, key, data)
</code></pre>

<p>and the next line for <code>false</code>:</p>

<pre><code>OpenSSL::HMAC.hexdigest(digest, key, data)
</code></pre>

<p>where</p>

<pre><code>key = 'key'
data = 'The quick brown fox jumps over the lazy dog'
digest = OpenSSL::Digest.new('sha1') # replace sha1 with whatever you want
</code></pre>

<p>resource is <a href=""https://stackoverflow.com/questions/34855049/using-hmac-sha256-in-ruby"">here</a></p>
","55343840","502","<ruby-on-rails><ruby><ruby-on-rails-3><hmac><hmacsha1>","0","0","1","2019-03-25 17:53:55","","9","","1858727","","2015-09-29 13:00:02","2015-09-29 12:02:50","","","2019-03-25 17:53:55"
"30294453","Difference in HMAC signature between python and java","<p>I am trying to take some working python code and convert it to java for my usage. The python code below produces the correct signature. The java code using the same key, salt, produces something different and I am at a loss for why. In the Java code I am using the key generated in python (_key) to create the signature. </p>

<p>What I don't understand is, if I print the value of _key in python I get ""34ee7983-5ee6-4147-aa86-443ea062abf774493d6a-2a15-43fe-aace-e78566927585"". Now if I take that and place it directly into the hmac(new) call I get a different result than if I just leave the _key variable. I assume this has something to do with encoding of some type but I am at a loss. </p>

<pre><code>_s1 = base64.b64decode('VzeC4H4h+T2f0VI180nVX8x+Mb5HiTtGnKgH52Otj8ZCGDz9jRW'
                       'yHb6QXK0JskSiOgzQfwTY5xgLLSdUSreaLVMsVVWfxfa8Rw==')
_s2 = base64.b64decode('ZAPnhUkYwQ6y5DdQxWThbvhJHN8msQ1rqJw0ggKdufQjelrKuiG'
                       'GJI30aswkgCWTDyHkTGK9ynlqTkJ5L4CiGGUabGeo8M6JTQ==')

# bitwise and of _s1 and _s2 ascii, converted to string
_key = ''.join([chr(ord(c1) ^ ord(c2)) for (c1, c2) in zip(_s1, _s2)])

@classmethod
def get_signature(cls, song_id, salt=None):
    """"""Return a (sig, salt) pair for url signing.""""""

    if salt is None:
        salt = str(int(time.time() * 1000))

    mac = hmac.new(cls._key, song_id, sha1)
    mac.update(salt)
    sig = base64.urlsafe_b64encode(mac.digest())[:-1]

    return sig, salt
</code></pre>

<p>This is my Java code. I think ultimately my issue is how I am handling or encoding the AA_KEY but I cannot figure it out.</p>

<pre><code>private static final String AA_KEY = ""34ee7983-5ee6-4147-aa86-443ea062abf774493d6a-2a15-43fe-aace-e78566927585"";

public void someFunc(String songId) {

  salt = ""1431875768596""
  String sig = hmacSha1(songId + salt, AA_KEY);
  sig =  StringUtils.replaceChars(sig, ""+/="", ""-_."");
}

static String hmacSha1(String value, String key) {
    try {
        // Get an hmac_sha1 key from the raw key bytes
        byte[] keyBytes = key.getBytes();           
        SecretKeySpec signingKey = new SecretKeySpec(keyBytes, ""HmacSHA1"");

        // Get an hmac_sha1 Mac instance and initialize with the signing key
        Mac mac = Mac.getInstance(""HmacSHA1"");
        mac.init(signingKey);

        // Compute the hmac on input data bytes
        byte[] rawHmac = mac.doFinal(value.getBytes());

        return Base64.encodeBytes(rawHmac);

    } catch (Exception e) {
        throw new RuntimeException(e);
    }
}
</code></pre>

<p>I found a couple of similar questions but they didn't help me figure it out sadly. Thanks!</p>

<p><a href=""https://stackoverflow.com/questions/17793194/python-hmac-sha256-signature-differs-from-php-signature"">Python HMAC-SHA256 signature differs from PHP signature</a></p>

<p><a href=""https://stackoverflow.com/questions/13019598/python-hmac-sha1-vs-java-hmac-sha1-different-results?rq=1"">Python HMAC-SHA1 vs Java HMAC-SHA1 different results</a></p>
","","","501","<java><python><sha1><hmac><hmacsha1>","2","","0","2015-05-18 03:00:29","","1","1","-1","","2017-05-23 11:59:23","2015-05-18 03:00:29","","",""
"33415783","Token based authentication for PHP","<p>I am trying to implement an authentication for an API with private &amp; public key.</p>

<p>What I want to do is provide a private key, hash some data with it and send the hash in a header, then rehash the same data again on the server for comparison.</p>

<p>What I'm having trouble with it is, what kind of data should I hash, the request URI, the content type and maybe the content itself, but what when the request is GET and there is no content.</p>

<p>Will hashing any data with the private key will be secure enough, or do I need to do something special?</p>
","<ol>
<li><p>As stated in the comment, you don't want public/private key pairs here. What you want is a proof of identity. The client will give you their username/id (they'll claim an identity), and you need additional proof that it's really them. For this purpose they send a <em>secret</em> which only they are supposed to know. That's a simple token.</p></li>
<li><p>You want to avoid sending this token over the wire back and forth. Remember it's a <em>secret</em> and should stay as secret as possible. Instead what you ask the client to send is an indirect proof; you ask them to <em>sign</em> the request.</p></li>
<li><p>Signing a request means they simply <a href=""https://en.wikipedia.org/wiki/Hash-based_message_authentication_code"" rel=""nofollow"">hash the contents of the request with a MAC algorithm</a>, their secret token being the key to the hash.</p>

<ul>
<li>What parts of the request to hash you decide; everything that's included in the hash is unspoofable by 3rd parties, but you should refrain from requiring <em>everything</em> to be hashed since HTTP headers may be added or removed at various stages of the request.</li>
<li>To avoid replay attacks, hash the date of the request (and require the date be sent with the request). Don't accept requests past a certain expiry date. Alternatively include an ever changing token, if that's feasible.</li>
<li>Make sure the hash is easily reproducible, e.g. require sorting of the data to be hashed.</li>
<li>You should include the URL in the hash; if you do, it doesn't matter whether there's body data or not. The URL + the date/token from above is perfectly sufficient already to form a MAC.</li>
</ul></li>
</ol>
","33416424","501","<php><api><security><hash><hmac>","2","2","1","2015-10-29 14:04:54","33416424","3","2","1415724","","2015-10-29 13:45:46","2015-10-29 13:36:51","","","2015-10-29 14:04:54"
"23230269","Decrypting hyperlocal with Signature Mismatch (Google RTB)","<p>Following Google's advice <a href=""https://developers.google.com/ad-exchange/rtb/response-guide/decrypt-hyperlocal"" rel=""nofollow"">here</a> and using their code as a <a href=""https://code.google.com/p/privatedatacommunicationprotocol/downloads/list"" rel=""nofollow"">guide</a>. I've tried using their encrypted hyperlocal string to test the decryption method that I wrote (most of it from Google though as my own attempts at writing such a method caused me much headache).</p>

<p>I'm getting <code>Signature Mismatch</code> for some reason even though I'm providing the proper integrity and encryption keys and I'm using the byte array that they provided in their example decryption (lower down Google's RTB decrypt hyperlocal page).</p>

<p>I have the code here:</p>

<pre><code>package anon.bidder.adx;

import java.io.ByteArrayOutputStream;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.util.Arrays;

import javax.crypto.Mac;
import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;

import org.apache.commons.codec.binary.Hex;
import org.apache.log4j.Logger;

public class AdxBidRequestDecryptor {

    private static final int INITIALIZATION_VECTOR_SIZE = 16;
    private static final int SIGNATURE_SIZE = 4;
    private static final int BLOCK_SIZE = 20;

    public static class DecrypterException extends Exception {
          public DecrypterException(String message) {
            super(message);
          }
        }

    public static byte[] hexStringToByteArray(String s) {
        int len = s.length();
        byte[] data = new byte[len / 2];
        for (int i = 0; i &lt; len; i += 2) {
            data[i / 2] = (byte) ((Character.digit(s.charAt(i), 16) &lt;&lt; 4)
                                 + Character.digit(s.charAt(i+1), 16));
        }
        return data;
    }

    public static void main(String args[]){
        byte[] ciphertext = hexStringToByteArray(""E2014EA201246E6F6E636520736F7572636501414243C0ADF6B9B6AC17DA218FB50331EDB376701309CAAA01246E6F6E636520736F7572636501414243C09ED4ECF2DB7143A9341FDEFD125D96844E25C3C202466E6F6E636520736F7572636502414243517C16BAFADCFAB841DE3A8C617B2F20A1FB7F9EA3A3600256D68151C093C793B0116DB3D0B8BE9709304134EC9235A026844F276797"");
        byte[] encryptionKey = {(byte)0x02, (byte)0xEE, (byte)0xa8, (byte)0x3c, (byte)0x6c, (byte)0x12, (byte)0x11, (byte)0xe1, (byte)0x0b,
                (byte) 0x9f, (byte) 0x88, (byte) 0x96, (byte) 0x6c, (byte) 0xee, (byte) 0xc3, (byte) 0x49, (byte) 0x08, (byte) 0xeb, (byte) 0x94, (byte) 0x6f, (byte) 0x7e,
                (byte) 0xd6, (byte) 0xe4, (byte) 0x41, (byte) 0xaf, (byte) 0x42, (byte) 0xb3, (byte) 0xc0, (byte) 0xf3, (byte) 0x21, (byte) 0x81, (byte) 0x40};
        byte[] integrityKey = {(byte) 0xbf, (byte) 0xFF, (byte) 0xec, (byte) 0x55, (byte) (byte) 0xc3, (byte) 0x01, (byte) 0x30, (byte) 0xc1, (byte) 0xd8,
                (byte) 0xcd, (byte) 0x18, (byte) 0x62, (byte) 0xed, (byte) 0x2a, (byte) 0x4c, (byte) 0xd2, (byte) 0xc7, (byte) 0x6a, (byte) 0xc3, (byte) 0x3b, (byte) 0xc0,
                (byte) 0xc4, (byte) 0xce, (byte) 0x8a, (byte) 0x3d, (byte) 0x3b, (byte) 0xbd, (byte) 0x3a, (byte) 0xd5, (byte) 0x68, (byte) 0x77, (byte) 0x92};
        try {
            byte[] plain = decrypt(ciphertext, new SecretKeySpec(encryptionKey,""HmacSHA1""),new SecretKeySpec(integrityKey,""HmacSHA1""));
        } catch (DecrypterException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }

    public static byte[] decrypt(byte[] ciphertext,
            SecretKey encryptionKey,
            SecretKey integrityKey)
                    throws DecrypterException {
        try {
            // Step 1. find the length of initialization vector and clear text.
            final int plaintext_length =
                    ciphertext.length - INITIALIZATION_VECTOR_SIZE - SIGNATURE_SIZE;
            if (plaintext_length &lt; 0) {
                throw new RuntimeException(""The plain text length can't be negative."");
            }

            byte[] iv = Arrays.copyOf(ciphertext, INITIALIZATION_VECTOR_SIZE);

            // Step 2. recover clear text
            final Mac hmacer = Mac.getInstance(""HmacSHA1"");
            final int ciphertext_end = INITIALIZATION_VECTOR_SIZE + plaintext_length;
            final byte[] plaintext = new byte[plaintext_length];
            boolean add_iv_counter_byte = true;
            for (int ciphertext_begin = INITIALIZATION_VECTOR_SIZE, plaintext_begin = 0;
                    ciphertext_begin &lt; ciphertext_end;) {
                hmacer.reset();
                hmacer.init(encryptionKey);
                final byte[] pad = hmacer.doFinal(iv);

                int i = 0;
                while (i &lt; BLOCK_SIZE &amp;&amp; ciphertext_begin != ciphertext_end) {
                    plaintext[plaintext_begin++] =
                            (byte)(ciphertext[ciphertext_begin++] ^ pad[i++]);
                }

                if (!add_iv_counter_byte) {
                    final int index = iv.length - 1;
                    add_iv_counter_byte = ++iv[index] == 0;
                }

                if (add_iv_counter_byte) {
                    add_iv_counter_byte = false;
                    iv = Arrays.copyOf(iv, iv.length + 1);
                }
            }

            // Step 3. Compute integrity hash. The input to the HMAC is clear_text
            // followed by initialization vector, which is stored in the 1st section
            // or ciphertext.
            hmacer.reset();
            hmacer.init(integrityKey);
            hmacer.update(plaintext);
            hmacer.update(Arrays.copyOf(ciphertext, INITIALIZATION_VECTOR_SIZE));
            final byte[] computedSignature = Arrays.copyOf(hmacer.doFinal(), SIGNATURE_SIZE);
            final byte[] signature = Arrays.copyOfRange(
                    ciphertext, ciphertext_end, ciphertext_end + SIGNATURE_SIZE);
            if (!Arrays.equals(signature, computedSignature)) {
                throw new DecrypterException(""Signature mismatch."");
            }
            return plaintext;
        } catch (NoSuchAlgorithmException e) {
            throw new RuntimeException(""HmacSHA1 not supported."", e);
        } catch (InvalidKeyException e) {
            throw new RuntimeException(""Key is invalid for this purpose."", e);
        }
    }
}
</code></pre>
","<p>The <a href=""https://developers.google.com/ad-exchange/rtb/response-guide/decrypt-hyperlocal#decryption"" rel=""nofollow"">example in the documentation</a> appears to be broken. The test encrypted data embedded in the <a href=""https://code.google.com/p/privatedatacommunicationprotocol/downloads/list"" rel=""nofollow"">example archive</a> at the end of <code>java/Decrypter.java</code> conveniently uses the same encryption and integrity keys, and provides us with known encrypted and plaintext data (all bytes are <code>0xfe</code>).</p>

<p>When I patch your test <code>main</code> with the archive data it passes the signature test and your <code>plaintext</code> result is correct. When I patch Google's program with the data from the documentation page, it fails to match the signature. I believe your code is working but your test data is bad.</p>
","23398016","500","<java><encryption><hmac><hmacsha1>","4","3","1","2014-04-30 21:06:24","23398016","0","","2039736","","2014-04-22 21:14:57","2014-04-22 21:11:10","","","2014-04-30 21:06:24"
"12100611","HMAC message formatting","<p>When using HMAC to authenticate an API call, often the message to be hashed includes a lot of stuff that doesn't seem to add anything. For example, here are the steps for a generating the signature for an API:</p>

<p><code>hmacsha1(HTTP VERB + URI + JSON_REQUEST_CONTENT + DATETIME, ""secret"")</code></p>

<p>Why not just go like:</p>

<p><code>hmacsha1(JSON_REQUEST_CONTENT, ""secret"")</code></p>

<p>This is assuming that JSON_REQUEST_CONTENT is a JSON string that contains all of the relevant request information.</p>

<p>It seems to me like adding the HTTP VERB and URI (or whatever extra non-content-specific info) is just adding to the length of the message, and I don't understand the benefit.</p>

<p>Thanks!</p>
","<p>HMACs are generally used to prevent message tampering, but they are also used to prevent replay of messages.</p>

<p>If the HMAC only included the payload and a secret that would only prevent tampering, if I sent the same message again it would be valid. By garnishing the request with other details (datetime or a nonce especially) that should prevent replay as well as tampering.</p>

<hr>

<p>To use the datetime as salt for the hash, you generally will need to send the datetime with the message in clear text (although it could be roughly inferred from the time the message was received or sent in the request headers external to the payload). If the datetime is too far from what the server believes the time to be, the message will fail (e.g. not within a minute). If when the server does the same hash on the data and it doesn't get the same result, it will also fail the message.</p>

<p>To use a nonce, the most practical way is for the service to say, next time you send me a request, use this nonce. The nonce doesn't need to be sent in clear text with the request. When the server processes a message successfully, it says, next time use this nonce and the previous one becomes invalid.</p>

<p>Datetime prevents replay by ensuring that a message was sent at a specific time, a nonce prevents replay by using a single use password.</p>
","12100681","497","<security><api><http><authentication><hmac>","0","2","1","2012-08-23 22:48:55","12100681","0","","","","","2012-08-23 22:00:07","","2012-08-23 22:48:55","2012-08-23 22:06:28"
"27715162","Go and Python HMAC libraries give different results","<p>I am trying to authenticate using HMAC/sha512 API key scheme.</p>

<p>Here is the example Python code, which works fine:</p>

<pre><code>import urllib, urllib2
import json
import time
import hmac, hashlib
import sys
api_key = ""J88PJQEG-LKKICZLN-3H33GWIB-97OGW8I5""
secret = ""b9f2e97c5c43e8e759c06219b37fce78478985ae4b0176d47182419c434567405a9386a854bca5d068135d1163d3f1cc9b877cd5d95d03c9d100be6ffcaac864""

# cmd = sys.argv[1]
# args = json.loads(sys.argv[2])

def auth_request(command, args):
    args = [(""command"", command), (""nonce"", 3000000000)]
    post_data = urllib.urlencode(args)
    print post_data
    sign = hmac.new(secret, post_data, hashlib.sha512).hexdigest()
    print sign
    headers = {
        'Sign': sign,
        'Key': api_key
    }

    ret = urllib2.urlopen(urllib2.Request('https://poloniex.com/tradingApi', post_data, headers))
    return ret.read()

print auth_request(""returnBalances"", {})
</code></pre>

<p>And now my Go implementation:</p>

<pre><code>const (
    public_api_url  = ""https://poloniex.com/public""
    private_api_url = ""https://poloniex.com/tradingApi""
    pubkey := ""J88PJQEG-LKKICZLN-3H33GWIB-97OGW8I5""
    privkey := ""b9f2e97c5c43e8e759c06219b37fce78478985ae4b0176d47182419c434567405a9386a854bca5d068135d1163d3f1cc9b877cd5d95d03c9d100be6ffcaac864""
)
func CallPrivate(method string, args map[string]string) dynjson.DynNode {

    if args == nil {
        args = make(map[string]string)
    }
    v := make(url.Values)
    v.Set(""nonce"", ""3000000000"") //strconv.Itoa(int((time.Now().Unix()))*1000))
    v.Set(""command"", method)
    for k, val := range args {
        v.Set(k, val)
    }
    final_url := private_api_url + ""?"" + v.Encode()
    log.Println(final_url)
    client := &amp;http.Client{}
    post_data := v.Encode()
    secret_bytes, err := hex.DecodeString(privkey)
    check(err)
    sighash := hmac.New(sha512.New, secret_bytes)
    sighash.Write([]byte(post_data))
    sigstr := hex.EncodeToString(sighash.Sum(nil))
    log.Println(sigstr)
    j, err := json.Marshal(args)
    check(err)
    buf := bytes.NewBuffer(j)
    req, err := http.NewRequest(""POST"", final_url, buf)
    check(err)
    req.Header.Set(""Key"", pubkey)
    req.Header.Set(""Sign"", sigstr)
    res, err := client.Do(req)
    check(err)
    defer res.Body.Close()
    if res.StatusCode != 200 {
        log.Println(""bad status code"")
        log.Printf(""%s"", res)
        panic(errors.New(res.Status))
    }
    res_body, err := ioutil.ReadAll(res.Body)
    check(err)
    //log.Printf(""%v"", res_body)
    return dynjson.NewFromBytes(res_body)

}

CallPrivate(""returnBalances"", nil)
</code></pre>

<p>Right now I am stuck calling out to the python implementation which is not a pretty solution.</p>
","<p>Python <code>dict</code> is an <strong>unordered</strong> mapping type.</p>

<pre><code>&gt;&gt;&gt; args = {}
&gt;&gt;&gt; args['command'] = 'command'
&gt;&gt;&gt; args['nonce'] = 10000
&gt;&gt;&gt; list(args)
['nonce', 'command']  # &lt;--- Iterating dictionary will yield in different order
                      #      with item insertion order
</code></pre>

<p><a href=""https://docs.python.org/2/library/urllib.html#urllib.urlencode"" rel=""nofollow""><code>urllib.urlencode</code></a> not only accepts a dictinoary, but it also accept a sequence of key-value-pair sequences. You can use it to guarantee the order of output:</p>

<pre><code>&gt;&gt;&gt; import urllib
&gt;&gt;&gt; urllib.urlencode({'command': 'command', 'nonce': 10000})
'nonce=10000&amp;command=command'
&gt;&gt;&gt; urllib.urlencode([('command', 'command'), ('nonce', 10000)])
'command=command&amp;nonce=10000'
</code></pre>

<p>Alternatively, instead of <code>dict</code> (<code>{}</code>), you can use <a href=""https://docs.python.org/2/library/collections.html#collections.OrderedDict"" rel=""nofollow""><code>collections.OrderedDict</code></a> which remembers key insertion order.</p>

<p><strong>UPDATE</strong></p>

<p>In the Go code, <code>command</code> post data is set with <code>method</code> instead of <code>command</code> parameter.</p>

<pre><code>v.Set(""command"", method)
                 ^^^^^^
</code></pre>

<p><strong>UPDATE2</strong></p>

<p>Python code uses the hex string <code>secret</code> as is:</p>

<pre><code>sign = hmac.new(secret, post_data, hashlib.sha512).hexdigest()
</code></pre>

<p>while the Go code decode it before use it:</p>

<pre><code>secret_bytes, _ := hex.DecodeString(privkey)
sighash := hmac.New(sha512.New, secret_bytes)
</code></pre>

<p>Do the same way as the Python code:</p>

<pre><code>sighash := hmac.New(sha512.New, []byte(privkey))
</code></pre>

<p><strong>UPDATE3</strong></p>

<ul>
<li>Go code does json marshal for post_data, but Python code does not.</li>
<li>You need to set header in Go code: ""Content-Type=application/x-www-form-urlencoded""</li>
</ul>

<hr>

<p>Here's the modified Go code that will work:</p>

<pre><code>func CallPrivate(method string, args map[string]string) {
    if args == nil {
        args = make(map[string]string)
    }
    v := make(url.Values)
    v.Set(""nonce"", ""3000000000"") //strconv.Itoa(int((time.Now().Unix()))*1000))
    v.Set(""command"", method)
    for k, val := range args {
        v.Set(k, val)
    }
    final_url := private_api_url
    post_data := v.Encode()
    sighash := hmac.New(sha512.New, []byte(privkey))
    sighash.Write([]byte(post_data))
    sigstr := hex.EncodeToString(sighash.Sum(nil))

    client := &amp;http.Client{}
    buf := bytes.NewBuffer([]byte(post_data))
    req, _ := http.NewRequest(""POST"", final_url, buf)
    req.Header.Set(""Key"", pubkey)
    req.Header.Set(""Sign"", sigstr)
    req.Header.Set(""Content-Type"", ""application/x-www-form-urlencoded"")
    res, _ := client.Do(req)
    defer res.Body.Close()

    res_body, _ := ioutil.ReadAll(res.Body)
    log.Printf(""%s"", string(res_body))
}
</code></pre>
","27715196","496","<python><go><hmac>","2","5","1","2015-12-21 12:08:32","27715196","0","","2225682","","2014-12-31 05:00:50","2014-12-31 01:49:50","","2015-12-21 12:08:32","2014-12-31 01:54:07"
"17188729","how to encrypt using hmac within GWT","<p>all.</p>

<p>I was writting a GWT application, at the client side, i need to encrypt the data by hmac and send them to server.</p>

<p>How to encrypte them?
I has google and found the crypto-gwt (<a href=""http://code.google.com/p/crypto-gwt/"" rel=""nofollow"">http://code.google.com/p/crypto-gwt/</a>), but i was not able to make them work, may since i am such a newbie to GWT.</p>

<p>could someone give me hints on how fulfill this requirement?
or, if the crypto-gwt was working, how to introduce it into our GWT project?</p>

<p>Any comments will be appreciated.</p>

<p>thans a lot</p>
","<p>You can add the jar file to your class path and don't forget to inherit it in your gwt.xml file. put</p>

<pre><code>&lt;inherits name=""com.googlecode.gwt.crypto.Crypto""/&gt; 
</code></pre>

<p>for more info click <a href=""http://code.google.com/p/gwt-crypto/wiki/Usage"" rel=""nofollow"">here</a></p>
","17189124","494","<gwt><hmac>","1","0","1","2013-06-19 10:41:17","17189124","0","1","","","","2013-06-19 10:18:18","","","2013-06-19 10:41:17"
"10382385","Rest Approach: for Implementing subsequent api calls after Login","<p>I am trying to implement the Rest approach for designing my Api. </p>

<p>Please go through the work flow below and try to clear my doubts and also point out mistakes-</p>

<ol>
<li><p>Client(Web browser)
Rest call from client ->/post /login username/password</p></li>
<li><p>Server
/login service checks with the DB if the username &amp; password are correct
Responds ok:200 + sends back data-> X</p></li>
<li><p>Client
receives confirmation that user is authenticated + data -> X
Now uses data X for subsequent calls to the server to get User specific info through other service calls</p></li>
</ol>

<p>/get/FirstName_of_User/X
or</p>

<p>/get/LastName_of_User/X</p>

<p><strong>now my doubts are the following(what are the best practices for doing the following)</strong> </p>

<ol>
<li><p>Since for subsequent requests we need to tell the service whose data are we requesting what should the X be ? (Username or temporary token created(does not makes sense since Rest is all about being stateless) or something else ? )</p></li>
<li><p>Once this X is returned where should it be stored on the client side so that it can be sued  for every subsequent requests ? (Cookie or some other way exists) ?</p></li>
<li><p>if this is how i make the subsequent calls<br /> 
<strong>/get/FirstName_of_User/X</strong></p></li>
</ol>

<p>if this call is made by someone else too then it would give the result, i want the person just logged in to get the result only.. </p>

<p>Reg doubt 3 - i found this link on stackoverflow -  <a href=""https://stackoverflow.com/questions/9439553/is-session-used-to-rest-authentication"">Is session used to REST authentication?</a></p>

<p>which suggests using HMAC and found this link - <a href=""http://www.thebuzzmedia.com/designing-a-secure-rest-api-without-oauth-authentication/"" rel=""nofollow noreferrer"">http://www.thebuzzmedia.com/designing-a-secure-rest-api-without-oauth-authentication/</a> which talks about how HMAC can be used for Rest(basically talks about having a private key on both the client and the server and using it to hash the request)..</p>

<p>My doubt regarding this approach is - say i use password as the private key which both the client and server know about.. then on the client side should we just save the password in the cookies fr hashing each subsequent requests ??</p>

<p>Thanks
Any help for any of the doubts is appreciated</p>

<p>PS: i am trying to implement the system using PHP + Mysql </p>
","<pre><code>/user/id?access_token=42342342342423
</code></pre>

<p>rest apis don't need no SEO, so drop the firstname_of_user, just use id, simpler, cleaner, less to maintain.</p>
","10382445","494","<php><rest><restful-authentication><hmac>","0","0","2","2012-05-01 17:25:03","","0","","-1","","2017-05-23 12:11:27","2012-04-30 10:46:40","","","2012-04-30 10:50:20"
"10382385","Rest Approach: for Implementing subsequent api calls after Login","<p>I am trying to implement the Rest approach for designing my Api. </p>

<p>Please go through the work flow below and try to clear my doubts and also point out mistakes-</p>

<ol>
<li><p>Client(Web browser)
Rest call from client ->/post /login username/password</p></li>
<li><p>Server
/login service checks with the DB if the username &amp; password are correct
Responds ok:200 + sends back data-> X</p></li>
<li><p>Client
receives confirmation that user is authenticated + data -> X
Now uses data X for subsequent calls to the server to get User specific info through other service calls</p></li>
</ol>

<p>/get/FirstName_of_User/X
or</p>

<p>/get/LastName_of_User/X</p>

<p><strong>now my doubts are the following(what are the best practices for doing the following)</strong> </p>

<ol>
<li><p>Since for subsequent requests we need to tell the service whose data are we requesting what should the X be ? (Username or temporary token created(does not makes sense since Rest is all about being stateless) or something else ? )</p></li>
<li><p>Once this X is returned where should it be stored on the client side so that it can be sued  for every subsequent requests ? (Cookie or some other way exists) ?</p></li>
<li><p>if this is how i make the subsequent calls<br /> 
<strong>/get/FirstName_of_User/X</strong></p></li>
</ol>

<p>if this call is made by someone else too then it would give the result, i want the person just logged in to get the result only.. </p>

<p>Reg doubt 3 - i found this link on stackoverflow -  <a href=""https://stackoverflow.com/questions/9439553/is-session-used-to-rest-authentication"">Is session used to REST authentication?</a></p>

<p>which suggests using HMAC and found this link - <a href=""http://www.thebuzzmedia.com/designing-a-secure-rest-api-without-oauth-authentication/"" rel=""nofollow noreferrer"">http://www.thebuzzmedia.com/designing-a-secure-rest-api-without-oauth-authentication/</a> which talks about how HMAC can be used for Rest(basically talks about having a private key on both the client and the server and using it to hash the request)..</p>

<p>My doubt regarding this approach is - say i use password as the private key which both the client and server know about.. then on the client side should we just save the password in the cookies fr hashing each subsequent requests ??</p>

<p>Thanks
Any help for any of the doubts is appreciated</p>

<p>PS: i am trying to implement the system using PHP + Mysql </p>
","<p>Somehow your requirement and what we are implementing in our project looks same except different platform, ours is .net.</p>

<p>Follow the same process for login resource with username and password. Once you decide on the mechanism you want to sign this token its not mandatory that it is always appended in the url. </p>

<ol>
<li>Instead of sending the token in the URL try it with the authorization header of http protocol. Use <code>Authorization  = ""Authorization"" "":"" credentials</code> <a href=""http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html"" rel=""nofollow"">Ref</a></li>
</ol>

<p>This way you can keep your url same but based on the authentication you can serve resources.</p>

<ol>
<li><p>You can store this token in cookie for subsequent requests.</p></li>
<li><p>Removing token from url solves your 3rd doubt.</p></li>
</ol>

<p>Hope this helps you up to some extent.</p>
","10401583","494","<php><rest><restful-authentication><hmac>","0","0","2","2012-05-01 17:25:03","","0","","-1","","2017-05-23 12:11:27","2012-04-30 10:46:40","","","2012-05-01 17:25:03"
"45408308","GOST 3411 Algorithm using Bouncy Castle","<p>Am using GOST algorithm to create a hash based on key and input using Bouncy castle libs. Below code generates Hash that doesn't match with the one generated through online tools such as <a href=""http://beautifytools.com/hmac-generator.php"" rel=""nofollow noreferrer"">http://beautifytools.com/hmac-generator.php</a></p>

<pre><code>    HMac gMac= new HMac(new GOST3411Digest());

    byte[] key = ""keyphrase"".getBytes();
    byte[] input = ""macinput"".getBytes();

    gMac.init(new KeyParameter(key));

    gMac.update(input, 0, input.length);
    byte[] mac = new byte[gMac.getMacSize()];

    gMac.doFinal(mac, 0);
    BigInteger in = new BigInteger(1, mac);
    System.out.println(in.toString(16));
</code></pre>

<p>When this works, Need to use inside Mulesoft to call API which validates the Hash and gives authentication. Basically, The encyption is for generation of authentication token.</p>

<p>Have been referring to stackoverflow for a long time but never had an opportunity to post any questions. This is my first :)</p>

<p>Thanks,
Sudeep</p>
","<p>GOST3411 algorithm has several SBox options, so try using different upon initialization. I had some luck with ""D-Test"" SBox, it matches with most if not all online tools. You can initialize different SBox like this:</p>

<pre><code>HMac mac = new HMac(new GOST3411Digest(GOST28147Engine.getSBox(""D-Test"")));
</code></pre>
","47588919","492","<java><encryption><bouncycastle><hmac><digest>","0","0","1","2017-12-01 07:56:24","","1","","","","","2017-07-31 05:49:42","","","2017-12-01 07:56:24"
"32601860","Generate signature in Elixir and PHP using hmac","<p>I try to generate a signature using Elixir, which has a same value as PHP does.</p>

<p>For example the code in PHP is</p>

<pre><code>$signature = base64_encode(hash_hmac(""sha256"", ""abc"", ""def""));
</code></pre>

<p>and the output will be </p>

<p><code>Mzk3ZjQ2NzM0MWU0ZDc4YzQ3NDg2N2VmMzI2MWNkYjQ2YzBlMTAzNTFlOWE5ODk5NjNlNmNiMmRjZTQwZWU1ZA==</code></p>

<p>How should I generate the signature that has the same value in Elixir. I tried something like below</p>

<pre><code>iex(9)&gt; :crypto.hmac(:sha256, ""abc"", ""def"") |&gt; Base.encode64                          │
""IOvA8JNERwE081BA9j6pix2OQUISlJ7lxQBCnRXqsIE=""

iex(10)&gt; :crypto.hash(:sha256, :crypto.hmac(:sha256, ""abc"", ""def"")) |&gt; Base.encode64  │
""dxGiPN6KqBJrtS2wlC4tnJXwUsWf4u1LPDtDFK+VT5A=""
</code></pre>

<p>or I switch the position of <code>abc</code> and <code>def</code></p>

<pre><code>iex(11)&gt; :crypto.hash(:sha256, :crypto.hmac(:sha256, ""def"", ""abc"")) |&gt; Base.encode64  │
""b+3P5oHu8e6HIlJe2MzcGhKm7tCcF/NE5wPIbEhrFGU=""

iex(12)&gt; :crypto.hmac(:sha256, ""def"", ""abc"") |&gt; Base.encode64                         │
""OX9Gc0Hk14xHSGfvMmHNtGwOEDUempiZY+bLLc5A7l0=""
</code></pre>

<p>But none of them has the same value. Can someone tell me how to do it the right way?</p>
","<p>The main problem is that <code>hash_hmac</code> returns a hex string, while <code>:crypto.hmac</code> returns a binary.</p>

<p>The equivalent code in Elixir is:</p>

<pre><code>iex(1)&gt; :crypto.hmac(:sha256, ""def"", ""abc"") |&gt; Base.encode16 |&gt; String.downcase |&gt; Base.encode64
""Mzk3ZjQ2NzM0MWU0ZDc4YzQ3NDg2N2VmMzI2MWNkYjQ2YzBlMTAzNTFlOWE5ODk5NjNlNmNiMmRjZTQwZWU1ZA==""
</code></pre>

<p>We need to use <code>String.downcase</code> because <code>Base.encode16</code> returns a hex string with capital <code>A-F</code> while PHP's <code>hash_hmac</code> returns lower case <code>a-f</code>.</p>
","32602509","489","<php><elixir><hmac>","6","4","1","2015-09-16 07:40:04","32602509","0","1","","","","2015-09-16 07:06:24","","","2015-09-16 07:40:04"
"48221865","How to generate HMAC-SHA1 signature for oAuth","<p>I'm using the code below for generating <code>HMAC-SHA1</code> signature, but I get this error during authentication request:</p>

<blockquote>
  <p>""oauth_signature does not match expected value""</p>
</blockquote>

<p>Can anyone tell me how to generate correct signature? I also checked <a href=""https://github.com/OAuthSwift/OAuthSwift"" rel=""nofollow noreferrer"">oAuthSwift</a> library <code>allHTTPHeaderFields</code> for Tumblr and it works on this code.</p>

<pre><code>Tumblr_oAuth-Bridging-Header.h
#import &lt;CommonCrypto/CommonHMAC.h&gt;
</code></pre>

<p>And</p>

<pre><code>class ViewController: UIViewController {

    let consumerKey = ""SpFweFQePdB1I6GnbX2TKCrnD8sObObExERLtw1RBcaEZPFV26""
    let consumerSecret = ""HCLK7WnNuZM7ohCoSqNixNhCs2YmASfnL8tkYaQvuh9DEj05o3""
    let requestTokenUrl = ""www.tumblr.com/oauth/request_token""
    let authorizeUrl = ""https://www.tumblr.com/oauth/authorize""
    let accessTokenUrl = ""https://www.tumblr.com/oauth/access_token""
    let oauthTokenSecret = """"

    @IBAction func login(_ sender: Any) {

        let oauth_timestamp = String(Int64(Date().timeIntervalSince1970))
        let oauth_nonce = generateNonce()//: CFString = CFUUIDCreateString(nil, uuid)

        let parameters =  [""oauth_timestamp"": ""\(oauth_timestamp)"", ""oauth_callback"": ""oauth-swift://oauth-callback/tumblr"", ""oauth_signature_method"": ""HMAC-SHA1"", ""oauth_version"": ""1.0"", ""oauth_consumer_key"": ""SpFweFQePdB1I6GnbX2TKCrnD8sObObExERLtw1RBcaEZPFV26"", ""oauth_nonce"": ""\(oauth_nonce)""]

        let url = URL(string:""https://www.tumblr.com/oauth/request_token"")
        let method = ""POST""

        let encodedTokenSecret = self.oauthTokenSecret.urlEncoded
        let encodedConsumerSecret = self.consumerSecret.urlEncoded

        let signingKey = ""\(encodedConsumerSecret)&amp;\(encodedTokenSecret)""
        print(parameters)
        var parameterComponents = parameters.urlEncodedQuery.components(separatedBy: ""&amp;"")
        parameterComponents.sort {
            let p0 = $0.components(separatedBy: ""="")
            let p1 = $1.components(separatedBy: ""="")
            if p0.first == p1.first { return p0.last ?? """" &lt; p1.last ?? """" }
            return p0.first ?? """" &lt; p1.first ?? """"
        }

        let parameterString = parameterComponents.joined(separator: ""&amp;"")
        let encodedParameterString = parameterString.urlEncoded
        let encodedURL = url?.absoluteString.urlEncoded

        let signatureBaseString = ""\(method)&amp;\(String(describing: encodedURL))&amp;\(encodedParameterString)""

        let key = signingKey//.data(using: .utf8)!
        let msg = signatureBaseString//.data(using: .utf8)!

        let signature : String = msg.hmac(algorithm: HMACAlgorithm.SHA1, key: key)
        print(""signature"",signature)

        var request = URLRequest(url: URL(string: ""https://www.tumblr.com/oauth/request_token"")!)

        request.allHTTPHeaderFields = [""Authorization"": ""OAuth oauth_callback=\""oauth-swift%3A%2F%2Foauth-callback%2Ftumblr\"", oauth_consumer_key=\""SpFweFQePdB1I6GnbX2TKCrnD8sObObExERLtw1RBcaEZPFV26\"", oauth_nonce=\""\(oauth_nonce)\"", oauth_signature=\""\(signature.urlEncoded)\"", oauth_signature_method=\""HMAC-SHA1\"", oauth_timestamp=\""\(oauth_timestamp)\"", oauth_version=\""1.0\""""]

        request.httpMethod = ""POST""
        let task = URLSession.shared.dataTask(with: request) { data, response, error in
            guard let data = data, error == nil else {                                                 // check for fundamental networking error
                print(""error=\(String(describing: error))"")
                return
            }

            if let httpStatus = response as? HTTPURLResponse, httpStatus.statusCode != 200 {           // check for http errors
                print(""statusCode should be 200, but is \(httpStatus.statusCode)"")
                print(""response = \(String(describing: response))"")
            }

            let responseString = String(data: data, encoding: .utf8)
            print(""responseString = \(String(describing: responseString))"")
        }
        task.resume()
    }

    override func viewDidLoad() {
        super.viewDidLoad()

    }
}
public func generateNonce() -&gt; String {
    let uuidString = UUID().uuidString
    return uuidString.substring(to: 8)
}
enum HMACAlgorithm {
    case MD5, SHA1, SHA224, SHA256, SHA384, SHA512

    func toCCHmacAlgorithm() -&gt; CCHmacAlgorithm {
        var result: Int = 0
        switch self {
        case .MD5:
            result = kCCHmacAlgMD5
        case .SHA1:
            result = kCCHmacAlgSHA1
        case .SHA224:
            result = kCCHmacAlgSHA224
        case .SHA256:
            result = kCCHmacAlgSHA256
        case .SHA384:
            result = kCCHmacAlgSHA384
        case .SHA512:
            result = kCCHmacAlgSHA512
        }
        return CCHmacAlgorithm(result)
    }

    func digestLength() -&gt; Int {
        var result: CInt = 0
        switch self {
        case .MD5:
            result = CC_MD5_DIGEST_LENGTH
        case .SHA1:
            result = CC_SHA1_DIGEST_LENGTH
        case .SHA224:
            result = CC_SHA224_DIGEST_LENGTH
        case .SHA256:
            result = CC_SHA256_DIGEST_LENGTH
        case .SHA384:
            result = CC_SHA384_DIGEST_LENGTH
        case .SHA512:
            result = CC_SHA512_DIGEST_LENGTH
        }
        return Int(result)
    }
}
extension String {
    func hmac(algorithm: HMACAlgorithm, key: String) -&gt; String {
        let cKey = key.cString(using: String.Encoding.utf8)
        let cData = self.cString(using: String.Encoding.utf8)
        var result = [CUnsignedChar](repeating: 0, count: Int(algorithm.digestLength()))
        CCHmac(algorithm.toCCHmacAlgorithm(), cKey!, strlen(cKey!), cData!, strlen(cData!), &amp;result)
        let hmacData:NSData = NSData(bytes: result, length: (Int(algorithm.digestLength())))
        let hmacBase64 = hmacData.base64EncodedString(options: NSData.Base64EncodingOptions.lineLength76Characters)// Encoding76CharacterLineLength)
        return String(hmacBase64)
    }

    var urlEncoded: String {
        let customAllowedSet = CharacterSet(charactersIn: ""abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-._~"")
        return self.addingPercentEncoding(withAllowedCharacters: customAllowedSet)!
    }

    var urlQueryEncoded: String? {
        return self.addingPercentEncoding(withAllowedCharacters: CharacterSet.urlQueryAllowed)
    }

    func substring(to offset: String.IndexDistance) -&gt; String {
        let to = self.index(self.startIndex, offsetBy: offset)
        return String(self[..&lt;to])
    }
}
extension Dictionary {

    var urlEncodedQuery: String {
        var parts = [String]()

        for (key, value) in self {
            let keyString = ""\(key)"".urlEncoded
            let valueString = ""\(value)"".urlEncoded
            let query = ""\(keyString)=\(valueString)""
            parts.append(query)
        }

        return parts.joined(separator: ""&amp;"")
    }

}
</code></pre>
","","","488","<ios><swift><oauth><hmac><hmacsha1>","1","","0","2018-01-12 08:55:25","","5","","4621280","","2018-01-12 08:55:25","2018-01-12 07:57:24","","",""
"49407336","HMAC - C# and JavaScript give different result","<p>My question is similar to <a href=""https://stackoverflow.com/questions/36412535/hmac-c-sharp-and-javascript"">HMAC C# and JavaScript</a>, but because question lack some details and answer is not very helpfull I'm asking it again but with more details.</p>

<p>I've implemented HMAC based security that is based on <a href=""http://bitoftech.net/2014/12/15/secure-asp-net-web-api-using-api-key-authentication-hmac-authentication/"" rel=""nofollow noreferrer"">this tutorial</a>.</p>

<p>I have working C# app that can create correct header (I've set static timestamp and nonce on purpose - just for tests):</p>

<pre><code>private string CreateHeader(string url)
{
    string appId = ""test"";
    string apiKey = ""A93reRTUJHsCuQSHR+L3GxqOJyDmQpCgps102ciuabc="";

    string requestTimeStamp = ""1521622403"";
    string nonce = ""715de35a4bfd4912baaa16daef21992d"";

    url = Uri.EscapeUriString(url.ToLower());

    string signatureRawData = String.Format(""{0}{1}{2}{3}"", appId, url, requestTimeStamp, nonce);

    byte[]secretKeyByteArray = Convert.FromBase64String(apiKey);
    byte[] signature = Encoding.UTF8.GetBytes(signatureRawData);

    using (HMACSHA256 hmac = new HMACSHA256(secretKeyByteArray))
    {
        byte[] signatureBytes = hmac.ComputeHash(signature);
        string requestSignatureBase64String = Convert.ToBase64String(signatureBytes);
        return string.Format(""{0}:{1}:{2}:{3}"", appId, requestSignatureBase64String, nonce, requestTimeStamp);
    }
}
</code></pre>

<p>this calculates this header: <code>test:fhqxcZll+3ZRQi3vRexbNyoT00Yqdoyq3CrAdGQ+4kE=:715de35a4bfd4912baaa16daef21992d:1521622403</code></p>

<p>not I'm trying to create Postman pre-request script that will generate same header. Here is my script:</p>

<pre><code>function getAuthHeader(httpMethod, requestUrl, requestBody) {
    var CLIENT_KEY = 'test';
    var SECRET_KEY = 'A93reRTUJHsCuQSHR+L3GxqOJyDmQpCgps102ciuabc=';

    var requestTimeStamp = ""1521622403"";
    var nonce  = ""715de35a4bfd4912baaa16daef21992d""
    requestUrl = requestUrl.toLowerCase();

    var signatureRawData = CLIENT_KEY+requestUrl+requestTimeStamp+nonce;
    console.log(""signatureRawData: ""+signatureRawData);

    var x = CryptoJS.enc.Utf8.parse(SECRET_KEY);

    var hash = CryptoJS.HmacSHA256(signatureRawData, x);
    var hashInBase64 = CryptoJS.enc.Base64.stringify(hash);

    var header = [CLIENT_KEY, hashInBase64, nonce, requestTimeStamp].join("":"");
    console.log(""header: ""+ header);

    return header;
}

postman.setEnvironmentVariable('hmacAuthHeader', getAuthHeader(request['method'], request['url'], request['data']));
</code></pre>

<p>but I get different header value:
<code>test:2ITrhVxr1/4BOxNVNcECnaSh0cW36LiMZWVQ0DaFncY=:715de35a4bfd4912baaa16daef21992d:1521622403</code></p>

<p>inside C# I'm converting key and data to hash to <code>byte[]</code>, probably this is the problem. How can I do same thing in JavaScript?<br>
C# requires <code>byte[]</code> as arguments in <code>HMACSHA256</code> and <code>ComputeHash</code>.</p>

<p>I'm looking for a way to generate same HMACSHA256 from C# and JavaScript (Postman pre-request script)</p>
","<p>The solution to correct hash in JS was the key. In C# I'm calling:</p>

<pre><code>byte[]secretKeyByteArray = Convert.FromBase64String(apiKey);
</code></pre>

<p>before I use that key, In JS I was passing raw base64 encoded value.</p>

<p>Here is corrected pre-request script:</p>

<pre><code>function S4() {
    return (((1+Math.random())*0x10000)|0).toString(16).substring(1); 
}

function GetNonce() {
    return (S4() + S4() + S4()+ S4() + S4() + S4() + S4()+ S4()).toLowerCase();
}

function GetTimeStamp() {
    var d = new Date();
    return Math.round(d.getTime() / 1000);
}

function getAuthHeader(httpMethod, requestUrl, requestBody) {
    var CLIENT_KEY = postman.getEnvironmentVariable('api_user');
    var SECRET_KEY = postman.getEnvironmentVariable('api_key');
    var AUTH_TYPE = 'HMAC';

    var requestTimeStamp = GetTimeStamp();
    var nonce = GetNonce();
    requestUrl = requestUrl.toLowerCase();

    var signatureRawData = [CLIENT_KEY,requestUrl,requestTimeStamp,nonce].join("""");
    var key = CryptoJS.enc.Base64.parse(SECRET_KEY);

    var hash = CryptoJS.HmacSHA256(signatureRawData, key);
    var hashInBase64 = CryptoJS.enc.Base64.stringify(hash);

    var header = [CLIENT_KEY, hashInBase64, nonce, requestTimeStamp].join("":"");
    console.log(""header: ""+ header);

    return AUTH_TYPE+"" ""+header;
}

postman.setEnvironmentVariable('hmacAuthHeader', getAuthHeader(request['method'], request['url'], request['data']));
</code></pre>

<p>While I was searching for solution I found nice list of hmac sha256 implementations in many languages: <a href=""https://www.jokecamp.com/blog/examples-of-creating-base64-hashes-using-hmac-sha256-in-different-languages/"" rel=""nofollow noreferrer"">https://www.jokecamp.com/blog/examples-of-creating-base64-hashes-using-hmac-sha256-in-different-languages/</a></p>
","49410804","483","<javascript><c#><security><hmac>","1","0","1","2018-03-21 15:47:27","","6","","","","","2018-03-21 13:14:33","","","2018-03-21 15:47:27"
"51680635","401 Unauthorized error Binance API in r","<p>I am trying to create a new order via the Binance API using RStudio.</p>

<p>I found the Binance Official API Docs and figured out that I should use:</p>

<pre><code>POST /api/v3/order (HMAC SHA256).
</code></pre>

<p>The following script doesn't work out and gives a status code: HTTP/1.1 401 Unauthorized</p>

<pre><code>key &lt;- ""*[my key]*""
secret &lt;- ""*[my secret key]*""
url='https://api.binance.com/api/v3/order'
timestamp &lt;- as.character(jsonlite::fromJSON(content(GET('https://api.binance.com/api/v1/time'), ""text""))$serverTime + 999)
query &lt;- list( ""symbol"" = ""XLMBTC"", ""side"" = ""BUY"", ""type"" = ""MARKET"", ""quantity"" = 10, ""recvWindow"" = 5000, ""timestamp"" = timestamp )
signature &lt;- digest::hmac(key = secret, object = paste(names(query), query, sep = ""="", collapse = ""&amp;""), algo = ""sha256"")
POST(url, add_headers(""X-MBX-APIKEY""= key), query = c(query, signature = signature), verbose())
</code></pre>

<p>Is there a bug in my coding? I tried this once before and then it worked perfectly well. However, now I cannot come up with a working script.</p>

<p>Here you can find documentation about the Binance API:
<a href=""https://github.com/binance-exchange/binance-official-api-docs/blob/master/rest-api.md"" rel=""nofollow noreferrer"">https://github.com/binance-exchange/binance-official-api-docs/blob/master/rest-api.md</a> </p>

<p>Can anybody help me out?</p>
","<p>It's already solved. Ik checked this website for the solution:
<a href=""https://gunbot.shop/error-response-code-400-on-binance-how-to-fix/"" rel=""nofollow noreferrer"">https://gunbot.shop/error-response-code-400-on-binance-how-to-fix/</a> </p>

<p>The problem was that my API and SECRET key were broken.</p>
","51683419","479","<r><api><sha256><hmac><binance>","0","1","1","2018-12-04 21:57:38","51683419","0","1","","","","2018-08-03 22:10:00","","","2018-08-04 07:17:00"
"24554581","PKI HSM Simulator","<p>Anyone aware of PKI HSM simulator for windows.Found <strong>openCryptoki</strong>, but it for linux only. 
Need to test digital signature and then validate using the suitable algorithum</p>
","<p>There's <a href=""http://www.opendnssec.org/softhsm/"" rel=""nofollow"">SoftHSM</a>, but I'm not sure you'll be able run on the Windows.</p>
","24555486","478","<algorithm><digital-signature><hmac><pki>","1","2","1","2014-07-03 13:47:51","24555486","0","","1347872","","2014-07-03 13:21:09","2014-07-03 13:08:49","2014-07-04 06:53:01","","2014-07-03 13:47:51"
"15285217","Validating HMAC using SecurityServiceProvider with Silex","<p>I'm sending an hmac within the URL that I want to valid before allowing users access to the system.  There is no user database, so its simply validating the url parameters to verity it was generated by the correct server and users can't change those parameters to access other parts of the system.</p>

<p>I'm wondering if anyone has done something similar with the SecurityServiceProvider.  I can do this using the before middleware which is fired after routing and security firewall rules.  I'd like to stop this request at the firewall though if possible.</p>
","<p>I decided to go with silex's middleware function 'before'.  I'm sure this probably isn't the best way to go about this, but my app doesn't have users or authentication so I just need to check the key is correct and return the response.  If anyone has any comments on improving this I'd love to hear them.</p>

<p>When an external system is generating a url they must use the shared secret key defined in my config file, and accessible through $app['config']['hmac_key'].  the hmac is generated on everything after the hmac in the path.  so if ive got sub folders domain.com/folder/hmac/arg1/arg2/arg3.  The before filter splits the route at the hmac and builds the path after that.</p>

<pre><code>// Before firing the controller check the hmac matches, otherwise return 403.
$app-&gt;before(function (Request $request) use ($app) {
    // 40 chars in a sha1 hmac hash
    if(!preg_match('/^[0-9a-f]{40}$/i', $request-&gt;get('hmac')))
        $app-&gt;abort(403, ""Invalid key."");

    // break the route down to the arguments used in hmac
    $route = explode('hmac_', $request-&gt;get('_route'));
    $route = explode('_',$route[1]);
    // build the path used to generate hmac
    $path = array();
    foreach($route as $r)
        if($v = $request-&gt;get($r))
            $path[] = $v;

    $path = implode('/', $path);

    // Generate hmac hash from path and key
    $hmac = hash_hmac(""sha1"", $path, $app['config']['hmac_key']);

    // If the hmac's don't match return 403
    if($hmac !== $request-&gt;get('hmac'))
        $app-&gt;abort(403, ""Invalid key."");
});
</code></pre>
","15331499","475","<php><symfony><hmac><silex>","0","0","1","2013-03-11 23:01:00","","1","","","","","2013-03-08 01:32:34","","2013-03-11 23:01:00","2013-03-11 05:02:31"
"46826855","adyen HPP integration","<p>I am trying to integrate the adyen hpp pages. I basically use the same code like in their example on github: <a href=""https://github.com/Adyen/adyen-java-sample-code/blob/master/src/com/adyen/examples/hpp/CreatePaymentOnHpp_SHA_256.java"" rel=""nofollow noreferrer"">https://github.com/Adyen/adyen-java-sample-code/blob/master/src/com/adyen/examples/hpp/CreatePaymentOnHpp_SHA_256.java</a></p>

<p>on that example I just set the merchantAccount, skinCode adn the hmac secret code to my data.</p>

<p>Additionally I added some code to create a test url for the hmac calculation:</p>

<pre><code>        String queryString = params.keySet().stream()
            .map(key -&gt; {
                try {
                    return key + ""="" +  URLEncoder.encode(params.get(key), ""UTF-8"");
                } catch (UnsupportedEncodingException e) {
                    e.printStackTrace();
                }
                return ""Error: could not URL-encode value"";
            }).collect(Collectors.joining(""&amp;""));

        String testUrl = ""https://ca-test.adyen.com/ca/ca/skin/checkhmac.shtml"" + ""?"" + queryString;

        System.out.println(testUrl);
</code></pre>

<p>I also created some code to create an url for the hpp. It looks like this:</p>

<pre><code>        URIBuilder b = new URIBuilder(hppUrl);
        for (Map.Entry&lt;String, String&gt; entry : params.entrySet()) {
            b.addParameter(entry.getKey(), URLEncoder.encode(entry.getValue(), ""UTF-8""));
        }

        return b.build().toString();
</code></pre>

<p>So the calculation of the HMAC seems to be correct, because the testUrl is always correct.
But if I click on the generated link for the hpp, then I always get an error that I should check the HMAC calculation.</p>

<p>I hope someone can give me a hint on how to fix it</p>
","<p>The URIBuilder already URL-encodes the parameters for you by default. The implementation you posted encodes your parameters twice, causing parameters such as your merchantReference to be different from the signing string that was used to calculate your merchant signature.</p>

<p>The following code would fix the issue and create a valid HPP link:</p>

<pre><code>URIBuilder b = new URIBuilder(hppUrl);
params.entrySet().forEach(e-&gt; b.addParameter(e.getKey(),e.getValue()));
System.out.println(b.build().toString());
</code></pre>
","46851039","475","<java><hmac><adyen>","1","2","1","2017-10-20 14:14:31","46851039","0","","","","","2017-10-19 09:33:00","","","2017-10-20 14:14:31"
"48596884","JWT Signature HS256 - different result on linux and website","<p>I'm trying to write small linux utility for development purposes that works with JWT signatures. </p>

<p>Problem: linux secret and secret from jwt.io website are different.
I'm using default data from <a href=""https://jwt.io/#debugger-io"" rel=""nofollow noreferrer"">https://jwt.io/#debugger-io</a> and HS256.</p>

<p>Example:</p>

<pre><code> # hmac256
 $ echo -n ""eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9"" | hmac256 secret
 &gt; 4c9540f793ab33b13670169bdf444c1eb1c37047f18e861981e14e34587b1e04

 # openssl
 $ echo -n ""eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9"" | openssl dgst -sha256 -hmac secret   
 &gt; (stdin)= 4c9540f793ab33b13670169bdf444c1eb1c37047f18e861981e14e34587b1e04

 # Key from website
 # TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
</code></pre>
","<p>Found answer, result of hash utilities should be in binary format and also in base64 encoding. </p>

<p>So working commands are:</p>

<ul>
<li><code>echo -n ""{header}.{payload}"" | hmac256 --binary secret | base64</code></li>
<li><code>echo -n ""{header}.{payload}"" | openssl dgst -sha256 -binary -hmac secret | base64</code></li>
</ul>

<p>Example:    </p>

<pre><code>$ echo -n ""eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9"" | hmac256 --binary secret | base64
&gt; TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ=

$ echo -n ""eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9"" | openssl dgst -sha256 -binary -hmac secret | base64
&gt; TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ=
</code></pre>
","48596992","475","<linux><jwt><digital-signature><hmac>","0","0","1","2018-02-03 11:45:54","","0","","","","","2018-02-03 11:33:58","","","2018-02-03 11:45:54"
"7086825","Can a python script decrypt a HASH that was created in a C++ program?","<p><em>I have a competition that people can enter with a secret code they discover in an Android app. The method I have chosen to ensure only people who have purchased the app can enter the competition is to use shared secret encoded(encrypted?) with HMAC SHA256.</em></p>

<p>So my secret will be encrypted in C in the Android app (using Crypto++, do you have any suggestions of a beter SHA library? I am finding Crypto++ really hard to use).</p>

<p>This is just an example:</p>

<pre><code>Unencrypted shared secret = ""my shared secret""  
Unencrypted secret code   = ""abcdef""  
Encrypted shared secret   = ""dsgdfgdfgdfgfdgf""   
Encrypted shared secret   = ""ddffgdgdf""
</code></pre>

<p>So when the user discovers the secret code they will be taken to a webpage(python script) &amp; the HMAC encrypted shared secret will be passed as a CGI parameter:</p>

<p><a href=""http://mysite/competition.py?encodedSecret=3dfdfdg343jkfjk390kl"" rel=""nofollow"">http://mysite/competition.py?encodedSecret=3dfdfdg343jkfjk390kl</a></p>

<p>Then my python script will look at the CGI parameter &amp; decrypt it to get the shared secret(to verify that the competition entry is from a user who has the app) &amp; the secret code(to see if the user has won anything).</p>

<p><strong>My Question is:</strong> Is it possible for a python script(using hashlib module) to decrypt something that was encrypted in C using Crypto++?</p>
","<p>When using a hash that way, normally you would pass the secret code (in plaintext) and the hash of both the secret code and the shared secret to your web site. The web site can then perform the same hash (as it knows the shared secret), and verify that the result is the same.</p>

<p>'Cracking' the hash on your server is a lot of extra work, and I don't see how it adds any security.</p>

<p>If you must not transmit the code in plaintext, it would be much more efficient to use your shared secret as the key in a symmetric encryption algorithm (e.g. <a href=""http://en.wikipedia.org/wiki/Advanced_Encryption_Standard"" rel=""nofollow"">AES</a>).</p>
","7086877","474","<c++><python><encryption><hash><hmac>","-4","0","1","2011-08-17 01:12:38","7086877","6","","57191","","2011-08-17 00:53:39","2011-08-17 00:48:02","","2011-08-17 01:12:38","2011-08-17 00:59:41"
"45283263","Generating HMAC signature with hashed ""password""","<p>I am playing around with authentication methods in my RESTful API project and I really like the idea of generating HMAC-SHA256 signatures as an authentication method.</p>

<p>The client is creating the signature with few simple steps:</p>

<pre><code># example client-side code
sig = hmac.new(bytes('SUPER_SECRET_KEY', 'utf-8'), b'', sha256)
sig.update(request_path)
sig.update(request_body)
# ...other variables needed for generating the signature...

signature = sig.hexdigest()
</code></pre>

<p>and adding it to request header along with his ""user name"" (e.g. <code>Authorization: THE_USER_NAME:abcd1234xyz890</code>).</p>

<p>On server-side, I am trying to re-create it in the same way:</p>

<pre><code># example server-side code
def do_check(request):
    # get user name from request header
    username = request.headers['Authorization'].split(':')[0]

    # some method to retrieve the ""secret key"" from database
    user = db.User().filter(username=username).one()

    # use user's ""secret key"" to generate the signature
    sig = hmac.new(bytes(user.key, 'utf8'), b'', sha256)
    sig.update(bytes(request.path, 'utf-8'))
    sig.update(request.data)
    # ...other variables needed for generating the signature...

    return sig.hexdigest()
    # compare the returned signature with the one client sent us...
</code></pre>

<p>All this works fine as long as I store the user's key as a <strong>plain text</strong> in my database:</p>

<pre><code>| username      | key              |
------------------------------------
| THE_USER_NAME | SUPER_SECRET_KEY |
</code></pre>

<p>We all are aware that this is <strong>absolutely unacceptable</strong>, so I tried to simply hash the <code>SUPER_SECRET_KEY</code> with <code>bcrypt</code> and storing a hashed string instead:</p>

<pre><code>| username      | key                                                          |
--------------------------------------------------------------------------------
| THE_USER_NAME | $2b$12$UOIKEBFBedbcYFhbXBclJOZIEgSGaFmeZYhQtaE4l6WobFW1qvIf6 |
</code></pre>

<p>The problem I am facing now is that client used un-hashed version of the ""secret key"" to generate the signature which I am unable to do on server-side since I don't have it in plain-text anymore.</p>

<p>One of the examples of a similar approach is <a href=""http://docs.aws.amazon.com/general/latest/gr/sigv4-signed-request-examples.html"" rel=""nofollow noreferrer"">generating HMAC signature in Amazon Web Services</a> (also <a href=""http://docs.aws.amazon.com/AWSECommerceService/latest/DG/HMACSignatures.html"" rel=""nofollow noreferrer"">simplified explanation of the same process</a>) which does not require any additional log-ins or authentication, nor does provide any tokens or ""replacements"" for the key/secret combination. I really doubt that AWS is storing the secret in a plain text in database(?)</p>

<p>How can I recreate the HMAC signature on server-side with hashed version of ""secret key"" in database, while not forcing the client-side to change its method of signature generating (e.g. avoid installing <code>bcrypt</code> or even hashing the secret at all)?</p>
","<p>Password hashing does not use a shared secret. The act of hashing the secret is supposed to destroy the actual value, while retaining the ability to authenticate a password. You can't reasonably be expected to recover the password from the hash. </p>

<p>Hmac authentication and validation uses a shared secret. Both parties must know this secret. </p>

<p>For this reason, password hashing is fundamentally different from hmac, and you can't simply hash the hmac key. The hash will not allow you to ever get back to the actual key.</p>

<p>[deleted irrelevant sections after clarification]</p>

<p>So you have to have some kind of secret somewhere, but it does not need to be in the database. The actual hmac shared secret can be encrypted in the database using a symmetric cipher (using a different key that is not in the database). Thus the server reads the encrypted hmac secret key, decrypts it, and uses that.  </p>

<p>The important thing is you have to encrypt it in some way that you can decrypt, and that rules out hashing.</p>
","45286038","469","<python><python-3.x><hash><bcrypt><hmac>","0","1","1","2017-07-25 18:07:53","45286038","0","","175793","","2017-07-25 10:27:48","2017-07-24 14:32:13","","2017-07-25 18:07:53","2017-07-24 16:52:08"
"54051747","TypeError: a bytes-like object is required, not 'str' - hmac","<p>I see this error: </p>

<pre><code>TypeError: a bytes-like object is required, not 'str' 
    python3.6/base64.py"", line 58, in b64encode encoded = binascii.b2a_base64(s, newline=False)`
</code></pre>

<p>Here is the code:</p>

<pre><code>import base64
import hmac
import hashlib
import binascii

....
def post(self,request):
    body = str(request.body).encode()
    sign_signature = base64.b64encode(hmac.new('tester'.encode(), body, hashlib.sha256).hexdigest())
</code></pre>
","<p>Replace that line of your code with this:</p>

<pre><code>sign_signature = base64.b64encode(hmac.new('tester'.encode(), body, hashlib.sha256).digest())
</code></pre>

<blockquote>
  <p><code>digest</code> returns <code>bytes</code> -> we want to b64encode it, and b64encode accepts bytes, so we're good.</p>
</blockquote>
","54051836","465","<python><python-3.x><encoding><base64><hmac>","2","2","1","2019-01-05 13:11:33","54051836","0","","3744747","","2019-01-05 13:11:33","2019-01-05 11:55:38","2019-01-05 12:07:05","","2019-01-05 12:05:32"
"35950162","How to validate the uber webhook api?","<p>The Uber <a href=""https://developer.uber.com/docs/webhooks"" rel=""nofollow"">documentation</a> say </p>

<blockquote>
  <p>The value of this field is a hexadecimal HMAC signature of the webhook HTTP request body, using the client secret as a key and SHA256 as the hash function.</p>
</blockquote>

<p>But what is the HTTP request body? I assume it is the JSON body received from the webhook (<a href=""https://developer.uber.com/docs/webhooks#section-example-post"" rel=""nofollow"">https://developer.uber.com/docs/webhooks#section-example-post</a>). </p>

<p>If it is, then how to validate it in NodeJS as the crypto module for HMAC doesn't accept JSON[I've tried to stringify the JSON, but it generates a different hash]. Or how to I convert the JSON into a buffer, since that is the next best option</p>

<p>If not, then what should I be using?</p>

<p><strong>[UPDATE1]</strong> Code used for the task:</p>

<pre><code>app.post(""/"",function(req,res){
const crypto = require('crypto');
var input = res.body
var str_input=JSON.stringify(input)

const hmac = crypto.createHmac('sha256', '&lt;CLIENT SECRET&gt;');

hmac.update(str_input);
console.log(hmac.digest('hex')); // print same as below
console.log(""e034ac7db29c3c0c10dfeced41a6cd850ed74c1c3c620863d47654cc7390359a"")
})
</code></pre>
","<p><strong>Updated Answer</strong></p>

<p>Uber considered the insertion of backslashes into webhook bodies a bug and released a fix. The workaround below will now break comparisons. As of 4/28/2016, clients written in Node should just perform the comparison without modifying the webhook body. Clients in languages that don't share Node's behavior of ignoring blackslashes in escape sequences are unaffected.</p>

<p><strong>Original Answer</strong></p>

<p>JS <a href=""https://stackoverflow.com/questions/30466581/preserve-all-backslashes-in-a-string?answertab=votes#tab-top"">ignores the backslash when reading escape sequences in a string</a>. The missing backslash is breaking your comparison because it's included in webhook event signatures.</p>

<p>An immediate workaround is to re-insert those backslashes using a regex.</p>

<p><code>var reconstitutedWebhookBody = input.replace(/\//g, '\\' + '/');</code></p>

<p>That regex will need to be extended if webhooks ever start including other escapable characters.</p>
","36192452","463","<json><node.js><hmac><webhooks><uber-api>","4","4","2","2017-09-07 09:59:31","36192452","3","2","1570456","","2016-03-23 09:06:20","2016-03-11 21:22:21","","2017-05-23 12:16:32","2016-03-24 02:51:23"
"35950162","How to validate the uber webhook api?","<p>The Uber <a href=""https://developer.uber.com/docs/webhooks"" rel=""nofollow"">documentation</a> say </p>

<blockquote>
  <p>The value of this field is a hexadecimal HMAC signature of the webhook HTTP request body, using the client secret as a key and SHA256 as the hash function.</p>
</blockquote>

<p>But what is the HTTP request body? I assume it is the JSON body received from the webhook (<a href=""https://developer.uber.com/docs/webhooks#section-example-post"" rel=""nofollow"">https://developer.uber.com/docs/webhooks#section-example-post</a>). </p>

<p>If it is, then how to validate it in NodeJS as the crypto module for HMAC doesn't accept JSON[I've tried to stringify the JSON, but it generates a different hash]. Or how to I convert the JSON into a buffer, since that is the next best option</p>

<p>If not, then what should I be using?</p>

<p><strong>[UPDATE1]</strong> Code used for the task:</p>

<pre><code>app.post(""/"",function(req,res){
const crypto = require('crypto');
var input = res.body
var str_input=JSON.stringify(input)

const hmac = crypto.createHmac('sha256', '&lt;CLIENT SECRET&gt;');

hmac.update(str_input);
console.log(hmac.digest('hex')); // print same as below
console.log(""e034ac7db29c3c0c10dfeced41a6cd850ed74c1c3c620863d47654cc7390359a"")
})
</code></pre>
","<p>I had the same problem. Uber send json with spaces before keys and values. Like this </p>

<pre>
{""event_id"": ""..."", ""resource_href"": ""..."", ""meta"": {""status"": ""..."", ""rider_id"": ""..."", ""user_id"": ""..."", ""resource_id"": ""...""}, ""event_type"": ""..."", ""event_time"": ...}
</pre>

<p>You can do this before activating boryparser. And create hex from this data</p>

<pre><code>app.use(function (req, res, next) {

let data = """";
req.on('data', function(chunk){data += chunk});
req.on('end', function(){
    req.jsonBody = JSON.parse(data);
    req.rawBody = data;
    req.originalUberReq = data;
});
next();
});
</code></pre>
","46051303","463","<json><node.js><hmac><webhooks><uber-api>","4","0","2","2017-09-07 09:59:31","36192452","3","2","1570456","","2016-03-23 09:06:20","2016-03-11 21:22:21","","2017-09-07 09:59:31","2017-09-05 09:16:32"
"47025109","What could cause WebApi with HMAC Authentication to only work once?","<p>I have an C# MVC project to which I recently added WebApi. I've secured the API with HMAC Authentication and am using a CustomDelegatingHandler to add the authorization to the header of the request.</p>

<p>I have done this successfully on another project, using the same code, and it works. But on this new project, the Authentication only works once, then every other call to the API fails due to ""Unauthorized"". This only happens on our development/test server and not on my local machine running the project in Visual Studio 2017.</p>

<p>What might cause this odd behavior?</p>

<p>Here is the CustomDelegatingHandler I'm using:</p>

<pre><code>public class CustomDelegatingHandler : DelegatingHandler
{
    private string APPId = """";
    private string APIKey = """";

    public CustomDelegatingHandler(string appid, string apikey)
    {
        APPId = appid;
        APIKey = apikey;
    }

    protected async override Task&lt;HttpResponseMessage&gt; SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
    {

        HttpResponseMessage response = null;
        string requestContentBase64String = string.Empty;

        string requestUri = System.Web.HttpUtility.UrlEncode(request.RequestUri.AbsoluteUri.ToLower());

        string requestHttpMethod = request.Method.Method;

        //Calculate UNIX time
        DateTime epochStart = new DateTime(1970, 01, 01, 0, 0, 0, 0, DateTimeKind.Utc);
        TimeSpan timeSpan = DateTime.UtcNow - epochStart;
        string requestTimeStamp = Convert.ToUInt64(timeSpan.TotalSeconds).ToString();

        //create random nonce for each request
        string nonce = Guid.NewGuid().ToString(""N"");

        //Checking if the request contains body, usually will be null wiht HTTP GET and DELETE
        if (request.Content != null)
        {
            byte[] content = await request.Content.ReadAsByteArrayAsync();
            MD5 md5 = MD5.Create();
            //Hashing the request body, any change in request body will result in different hash, we'll incure message integrity
            byte[] requestContentHash = md5.ComputeHash(content);
            requestContentBase64String = Convert.ToBase64String(requestContentHash);
        }

        //Creating the raw signature string
        string signatureRawData = String.Format(""{0}{1}{2}{3}{4}{5}"", APPId, requestHttpMethod, requestUri, requestTimeStamp, nonce, requestContentBase64String);

        var secretKeyByteArray = Convert.FromBase64String(APIKey);

        byte[] signature = Encoding.UTF8.GetBytes(signatureRawData);

        using (HMACSHA256 hmac = new HMACSHA256(secretKeyByteArray))
        {
            byte[] signatureBytes = hmac.ComputeHash(signature);
            string requestSignatureBase64String = Convert.ToBase64String(signatureBytes);
            //Setting the values in the Authorization header using custom scheme (amx)
            request.Headers.Authorization = new AuthenticationHeaderValue(""amx"", string.Format(""{0}:{1}:{2}:{3}"", APPId, requestSignatureBase64String, nonce, requestTimeStamp));
        }

        response = await base.SendAsync(request, cancellationToken);

        return response;
    }
}
</code></pre>
","<p>We had a similar issue which turned out to be related to the time stamp of the client vs. the server.</p>

<p>Solved it (server-side) by checking that the request was within the allowed time this way:</p>

<p><code>(a &gt; b ? a-b : b-a) &gt; maxtime</code> vs <code>a - b &gt; maxtime</code></p>

<p>If b > a, being an unsigned long (ulong), the value went to a huge value, thus triggering an invalid request condition.</p>

<p>1522896501 - 1522896502 > 300 (18446744073709551615 is what was calculated)</p>
","49663278","463","<c#><asp.net-web-api><hmac>","0","2","1","2018-04-05 02:47:15","49663278","0","","","","","2017-10-30 22:22:26","","2018-04-05 02:47:15","2018-04-05 02:38:57"
"26806793","Moz API: signed authentication with R","<p>I am trying to access the Moz API with R to get some data but I cannot get the signed authentication right so my requests always get 401 response. I think something is wrong with the signature. Here is my code:</p>

<pre><code>library(rjson)
library(digest)
library(RCurl)

# Construct the url to call the API
api &lt;- 'http://lsapi.seomoz.com/linkscape/url-metrics/'
site &lt;- 'facebook.com'

# that is the cols parameter that I need to get the data required
# there is no issue with it as it works when used with the provided sample call

metrics &lt;- 'Cols=36029458443938976'
ampersand &lt;- '&amp;'

# this is my access id as given by Moz
access_id &lt;- 'member-d8fc642751'

# this gets the current time and adds another 5 minutes as recommended (Unix timestamp format)
expires &lt;- round(as.numeric(as.POSIXct(Sys.time()+300)))

# this concatenates the access id and the expires with a linefeed as explained in the API doc
hash_string &lt;- paste('member-d8fc642751','\n', expires, sep="""")

# this hashes the string from above with my secret key with sha1, don't worry this key is not valid anymore
hmac_hash &lt;- hmac('f74fc2f2a8d5337aaa0550bfa3a9bdaf', hash_string, ""sha1"")

# Encoding with base64
base64_hash &lt;- base64(hmac_hash)

# URL encoding the generated signature
encoded_signature &lt;- URLencode(base64_hash, reserved = TRUE)

# constructing the url for the API call
url &lt;- paste(api, site, '?', metrics, ampersand, 'AccessID=', access_id, ampersand, 'Expires=', expires, ampersand, 'Signature=', encoded_signature, sep="""")


# Get data from API (json format)
Moz_json_data &lt;- fromJSON(file=url, method='C')
</code></pre>

<p>Here is a comparison:</p>

<pre><code>1. http://lsapi.seomoz.com/linkscape/url-metrics/facebook.com?Cols=36029458443938976&amp;AccessID=member-d8fc642751&amp;Expires=1415381495&amp;Signature=YThmYTI1N2I4MDYzY2QxMGQzNDNjOWVlNmIyYTU1MzgzY2FlOWFiOA%3d%3d
2. http://lsapi.seomoz.com/linkscape/url-metrics/facebook.com?Cols=36029458443938976&amp;AccessID=member-d8fc642751&amp;Expires=1415465853&amp;Signature=vyZmngnjiYy5Ns62LCLRHXgQQ6c%3D
</code></pre>

<p>The first one is generated by the code and does not work. The second one is provided as a sample request by Moz and works. As you can see the Signature in the second one much shorter, which makes me think I am generating the wrong signature but I do follow the same steps as outlined in their API doc.</p>

<p>Useful links:</p>

<p><a href=""http://apiwiki.moz.com/signed-authentication"" rel=""nofollow"">http://apiwiki.moz.com/signed-authentication</a></p>

<p><a href=""http://apiwiki.moz.com/anatomy-of-a-mozscape-api-call"" rel=""nofollow"">http://apiwiki.moz.com/anatomy-of-a-mozscape-api-call</a></p>

<p>Any help will be greatly appreciated!</p>
","<p>If you follow the <a href=""https://github.com/seomoz/SEOmozAPISamples/blob/master/php/signed_authentication_sample.php"" rel=""nofollow"">example PHP code</a> they provide, you'll see that they set <code>raw=TRUE</code> when calling <code>hash_hmac</code>. Thus when they encode the data, they are encoding the bytes of the hash, not the character representation of the bytes of the hash. You need to do this in the R version as well. Compare</p>

<pre><code># INCORRECT
(dd &lt;- hmac('f74fc2f2a8d5337aaa0550bfa3a9bdaf', hash_string, ""sha1""))
# [1] ""e521bd74fba9296920efb897a2bc7578d3e8b075""
base64(dd)
# [1] ""ZTUyMWJkNzRmYmE5Mjk2OTIwZWZiODk3YTJiYzc1NzhkM2U4YjA3NQ==""
# attr(,""class"")
# [1] ""base64""
</code></pre>

<p>and</p>

<pre><code># CORRECT
(dd &lt;- hmac('f74fc2f2a8d5337aaa0550bfa3a9bdaf', hash_string, ""sha1"", raw=TRUE))
# [1] e5 21 bd 74 fb a9 29 69 20 ef b8 97 a2 bc 75 78 d3 e8 b0 75
base64(dd)
# [1] ""5SG9dPupKWkg77iXorx1eNPosHU=""
# attr(,""class"")
# [1] ""base64""
</code></pre>
","26806973","463","<r><urlencode><hmac><hmacsha1>","1","0","1","2014-11-07 17:42:38","26806973","0","1","","","","2014-11-07 17:30:48","","","2014-11-07 17:42:38"
"27816297","What is the c# equivalent for progressive HMACSHA256?","<p>In Java we have progressive hmac like so:</p>

<pre><code>Mac mac = Mac.getInstance(""HmacSHA256"");
mac.init(macKey);
mac.update(part(0));
mac.update(part(1));
...
byte[] fullMac = mac.doFinal(part(n))
</code></pre>

<p>Please what is the c# equivalent for progressive HMACSHA256?</p>
","<p>Got it! Microsoft over-cooked the <em>otherwise</em> simple <strong>Update</strong> operation into <strong>TransformBlock</strong> &amp;  <strong>TransformFinalBlock</strong></p>

<pre><code>Mac mac = Mac.getInstance(""HmacSHA256"");
mac.init(macKey);
mac.update(part(0));
mac.update(part(1));
...
byte[] fullMac = mac.doFinal(part(9))
</code></pre>

<p>in .Net this now becomes (vb.net)</p>

<pre><code>dim fullMac as byte()
using mac=New HMACSHA256(macKey)
   mac.TransformBlock(part(0),0,part(0).Length,null,0)
   mac.TransformBlock(part(1),0,part(1).Length,null,0)
   ...
   fullMac=mac.TransformFinalBlock(part(9),0,part(9).Length)
end using
</code></pre>

<p>I don't see how this helps developer-productivity in any way :(</p>
","27817850","463","<java><c#><hmac><equivalent>","2","4","1","2015-01-07 10:55:28","27817850","3","","","","","2015-01-07 09:34:57","","","2015-01-07 10:55:28"
"1629415","How are these 2 lines of PHP different?","<p>Assuming we have a salt that's in the database and that has been generated like this</p>

<p><code>$salt = time();</code> </p>

<p>What is the difference between these 2 lines. </p>

<pre><code>$pass1 = hash('sha1', $password . $salt);

$pass2 = hash_hmac('sha1', $password, $salt);
</code></pre>

<p>They don't produce the same output. The first one, the <code>hash</code> function takes 2 params, while the <code>hash_hmac</code> needs 3 params. You would therefore think that we can get that third extra param by using the <code>$salt</code> separately (to fulfill the third param) as opposed to concatenating it with the password (<code>$password . $salt</code>) like we did in line 2. But it's not that simple, the 2 results are different. Why? What is going on exactly here?</p>
","<p>Because HMAC SHA-1 is not the same as SHA-1 with the message and key concatenated. HMAC is more like <code>sha1($salt . sha1($salt . $password))</code>, but not exactly. Wikipedia has a nice description of <a href=""http://en.wikipedia.org/wiki/HMAC"" rel=""nofollow noreferrer"">HMAC</a>.</p>
","1629424","462","<php><hash><hmac>","3","15","1","2009-10-27 14:25:44","1629424","0","1","60950","","2009-10-27 14:25:44","2009-10-27 08:28:13","","2009-10-27 08:36:43","2009-10-27 08:31:32"
"24730381","HMAC_256 using Message Authentication Code on Solaris","<p>This problem is really leaving me astounded</p>

<ol>
<li>Take a input file and create a HMAC_256 value from it using a private key</li>
<li>Base64 encode HMAC_256 hash</li>
</ol>

<p><strong>Code</strong></p>

<pre><code>#Create HMAC-SHA2 hash from shell parameter
filehash=`echo $1 | mac -a sha256_hmac -k test.key`
echo ""HMAC_SHA256 hash : ""$filehash
#Base64 encode filehash using openssl
filehash_64=`echo ""$filehash"" | /usr/sfw/bin//openssl enc -base64 | tr '\n' ' ' | cut -d "" "" -f2 `
echo ""64 bit encoded hash : ""$filehash_64
</code></pre>

<p>Using a test.key of</p>

<blockquote>
  <p>Bob123</p>
</blockquote>

<p><strong>Shell Input</strong></p>

<blockquote>
  <p>Hello</p>
</blockquote>

<p><strong>Shell Output</strong></p>

<pre><code>SHA256 hash : 411796cfb1e6c30c1b39b589c79d6f8bf1fdde8d58fda4a6ec1e59538ecaa39a

64 bit encoded hash : ZWMxZTU5NTM4ZWNhYTM5YQo=
</code></pre>

<hr>

<p>However if I go to these sites and do a HMAC_256 test they both generate a different hash</p>

<p><a href=""http://asecuritysite.com/encryption/hmac"" rel=""nofollow"">http://asecuritysite.com/encryption/hmac</a></p>

<p><a href=""http://jetcityorange.com/hmac/"" rel=""nofollow"">http://jetcityorange.com/hmac/</a></p>

<p>They both Output a HMAC_256 hash of</p>

<blockquote>
  <p>a30410f584726f32ba3e6e823bfdecbdf28448d64e4ab8f11f6a2e66818b50fe</p>
</blockquote>

<p>Why are they generating a different hash? I am assuming they are correct as they both have the same.</p>

<ul>
<li>Does Solaris 10 have a bug with its MAC (Message Authentication Code)
tool?</li>
<li>Is it UTF8 or ASCII problem?</li>
<li>Is it a server problem, Windows / Unix?</li>
</ul>

<p>I don't understand why I am generating a different hash to them, even though I am using the same hashing algorithm and key.</p>
","<p>I'll guess that the problem is newline characters.  The echo command puts a newline after ""Hello"", so if you don't want it, use ""echo -n"".  Also make sure that there is no newline character in your key file.</p>
","24730605","458","<bash><unix><base64><hmac><sha256>","0","2","1","2014-07-14 06:25:44","24730605","3","","","","","2014-07-14 06:06:51","","","2014-07-14 06:25:44"
"46324178","Exposing AWS S3 Signed URLs in Web App?","<p>I have been trying to find an answer to this question for a couple of hours now, but have not managed to come up with a conclusive answer. I am hoping someone here will be able to shed some light on my question. Consider the following Example AWS S3 URL:</p>

<p><a href=""https://some-bucket.s3-eu-west-2.amazonaws.com/uploads/images/some_image.jpg?X-Amz-Expires=600&amp;X-Amz-Date=20170920T124015Z&amp;X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Credential=AKIAI6CJYFYSSWMXXXXX/20170920/eu-west-2/s3/aws4_request&amp;X-Amz-SignedHeaders=host&amp;X-Amz-Signature=0481296b70633de9efb2fce6e20751df2f55fd79b5ff9570c02ff8f587dce825"" rel=""noreferrer"">https://some-bucket.s3-eu-west-2.amazonaws.com/uploads/images/some_image.jpg?X-Amz-Expires=600&amp;X-Amz-Date=20170920T124015Z&amp;X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Credential=AKIAI6CJYFYSSWMXXXXX/20170920/eu-west-2/s3/aws4_request&amp;X-Amz-SignedHeaders=host&amp;X-Amz-Signature=0481296b70633de9efb2fce6e20751df2f55fd79b5ff9570c02ff8f587dce825</a></p>

<p>In my specific example, the above URL is a request to view an image on S3 which I am exposing directly in a HTML img tag, and the user in Amz-Credential has both read and write permissions. The URL is also set to expire in 10 minutes. </p>

<p>Is is safe to link to the image directly via this URL, or is there any possibility that within these 10 minutes, the signature from this URL could be used in a maliciously crafted REST request to delete or modify the image instead of viewing it?</p>

<p>I do suspect a different action will have a different signature to make this impossible, but given my very limited understanding of AWS auth, I thought it better to ask just in case.</p>

<p>I know I could create a read-only user (extra complexity) or hide the S3 URL behind a controller action on my own web app (requires 2 total requests to load each image, making it inefficient), but I would rather learn whether my current approach is safe or not before resorting to either of these.</p>

<p>Thank you kindly for your time. :)</p>
","<p>If your pre-signed url has PUT or DELETE permission someone could try to get the Signature + AccessKeyId to overwrite or delete your object.</p>

<p>Just <a href=""http://docs.aws.amazon.com/AmazonS3/latest/dev/ShareObjectPreSignedURL.html"" rel=""nofollow noreferrer"">make sure</a> that you are signing the url with a read-only permission and I guess you're good.</p>
","46329952","457","<amazon-web-services><security><amazon-s3><hash><hmac>","5","2","1","2017-09-20 19:05:47","","0","","","","","2017-09-20 14:01:47","","","2017-09-20 19:05:47"
"45019250","powershell Set key in System.Security.Cryptography.HMACSHA512","<p>I have the code below:</p>

<pre><code># Powershell HMAC SHA 256

$message = 'Message'
$secret = 'secret'

$hmacsha = New-Object System.Security.Cryptography.HMACSHA512

$hmacsha.key = [Text.Encoding]::ASCII.GetBytes($secret)


$signature = $hmacsha.ComputeHash([Text.Encoding]::ASCII.GetBytes($message))
$signature = [Convert]::ToBase64String($signature)

echo $signature

# Do we get the expected signature?
echo ($signature -eq 'z12KOCXYQjCZyKf6WP+yYBONCS+IwNuv9oPbRcL4u+WetE4BvAm1Ysy+bEyGxq/QDLAufO0sPnVLUl/ubvPGdQ==')
</code></pre>

<p>When i run this code on my computer, it works fine.
My issue is when i try to run it in my Azure environment. Azure don't like the syntax ""$hmacsha.key = [Text.Encoding]::ASCII.GetBytes($secret)""</p>

<p>This is the error im getting when i try to publish the code:</p>

<blockquote>
  <p>An error occured while publishing the runbook 'HiBob'. Error details:
  BadRequest: The Runbook definition is invalid. This type of assignment
  is not supported. Only variable names (i.e.: $variable) may be used as
  the target of an assignment statement..</p>
</blockquote>

<p>basically I cant set this array column ""key"" using the  "" $hmacsha.key = ""
method.</p>

<p>Anyone has a different idea to do this?</p>

<p>Thanks!</p>
","","","457","<powershell><azure><encryption><hmac>","1","","0","2017-07-10 18:26:17","","4","","","","","2017-07-10 18:26:17","","",""
"35840228","PHP -- calculating correct HMAC signature as nodejs script","<p>So I am working on a PHP script that queries an API which uses HMAC authentication headers. However, I have been banging my head trying to encode the HMAC signature correctly. I have a preexisting nodejs script to work from as a template. </p>

<p>In the nodejs script, the HMAC signature is calculated using the following:</p>

<pre class=""lang-js prettyprint-override""><code>var crypto = require('crypto');
var hmac = [];
hmac.secret = 'ODc0YTM3YzUxODFlMWQ1YTdhMGQwY2NiZmE1N2Y1ODdjYzM5NTgyMDJhZjVkYTE4MmQxYzQ5ODk0M2QzNWQxYw==';
hmac.timestamp = 1457326475000;
hmac.path = '/account/';
hmac.message = hmac.path +'\n' + hmac.timestamp;
var sig = crypto.createHmac('sha512', new Buffer(hmac.secret, 'base64'));
hmac.signature = sig.update(hmac.message).digest('base64');

console.log(hmac);
</code></pre>

<p>This <em>correctly</em> calculates the HMAC signature as:
bWjIFFtFmWnj0+xHLW2uWVa6M6DpbIV81uyUWwRFCJUg+0Xyt40QWZWQjGvfPUB/JbjGZHUoso0Qv5JHMYEv3A==.</p>

<p>Meanwhile, in PHP, I am using:</p>

<pre class=""lang-php prettyprint-override""><code>&lt;?php
$hmac['secret'] = 'ODc0YTM3YzUxODFlMWQ1YTdhMGQwY2NiZmE1N2Y1ODdjYzM5NTgyMDJhZjVkYTE4MmQxYzQ5ODk0M2QzNWQxYw==';
$hmac['nonce'] = '1457326475000';
$hmac['path'] = '/account/';
$hmac['message'] = $hmac['path'].""\n"".$hmac['nonce'] ;
$hmac['signature'] = base64_encode(hash_hmac('sha512',$hmac['message'],
$hmac['secret'], true));

print_r($hmac);
</code></pre>

<p>The above code, will calculate the HMAC signature as:
vqP49m/bk9nA4S3nMqW2r+kc2+yBfwhY/jWGUfz6dlKJUMkC2ktiPnuCcymdSWl4XezZT5VKCATYfus86Hz/Gg==</p>

<p>Working from the principle that ""<em>one million monkeys hacking away at a million keyboards</em>""  might one day be able to encode a valid HMAC signature, I have even tested a loop that iterates through all the permutations of the above PHP code (with/without base64 encoding the message, secret; with/without binary encoding of the HMAC, etc.)... to no avail.</p>

<p>Any suggestions for this here, one exhausted simian?</p>
","<p>The problem is that you're not decoding your <code>$hmac['secret']</code> first before passing it to <code>hash_hmac()</code>.</p>

<p>Try:</p>

<pre><code>$hmac['secret'] = base64_decode($hmac['secret']);
$hmac['signature'] = base64_encode(
  hash_hmac('sha512', $hmac['message'], $hmac['secret'], true)
);
</code></pre>
","35840430","447","<php><node.js><authentication><hmac><cryptojs>","2","2","1","2016-03-07 09:43:16","35840430","0","","","","","2016-03-07 09:31:04","","","2016-03-07 09:43:16"
"44181412","How to access the private file in Amazon S3 storage?","<p>I successfully uploaded files in amazon s3 storage bucket with private mode.I need to access the file with in my default time. Am using luman laravel for my application</p>

<pre><code>Here my code to get file:
$bucket=""liv"";
$resource=""Arsenal-Wallpapers.jpeg""; 
$folde=""testr"";
$AWS_S3_KEY=""AKIAJ7SN435435CGBIEEB3CRLA""; 
$AWS_s3_secret_key=""dJnfWNcKY2A45435ddT4W0NduCdg7+voVnDialbF0dvgr""; 
$expire_seconds=""1000"";



     $expires = time()+$expire_seconds;
     // S3 Signed URL creation
     $string_to_sign = ""GET\n\n\n{$expires}\n/"".str_replace(""s3.ap-south-1.amazonaws.com"","""", $bucket).""/$folder"".""/$resource"";
     $signature = urlencode((hash_hmac(""sha256"", utf8_encode($string_to_sign), $AWS_s3_secret_key, TRUE)));



     $authentication_params = ""AWSAccessKeyId="".$AWS_S3_KEY;
     $authentication_params.= ""&amp;Expires={$expires}"";
     $authentication_params.= ""&amp;Signature={$signature}"";
     return $link = ""https://s3.ap-south-1.amazonaws.com/{$bucket}/{$folder}/{$resource}?{$authentication_params}"";
</code></pre>

<p>When i hit api to get access the file from s3 storage .I got issue</p>

<blockquote>
  <p> <Code>InvalidRequest</Code>  The authorization
  mechanism you have provided is not supported. Please use
  AWS4-HMAC-SHA256.  
  Id>85DAE9708BDF8514 
  zjhhQ+iJ3q3z8goBtMdRLfTdla5QAqaFCqQCdIRVxVjdWtykam3+NzNv/+gMgPmepTLkyi9So+c=
   </p>
</blockquote>

<p>But am using  AWS4-HMAC-SHA256  authorization mechanism to access the file.I dont know where am wrong .kindly help me for this problem.</p>
","","","446","<amazon-web-services><amazon-s3><hash><laravel-5.3><hmac>","0","","0","2017-05-25 16:01:45","","14","0","","","","2017-05-25 13:08:33","","",""
"44941277","HMAC-SHA1 Swift 3 - 403 Forbidden","<p>I'm trying to perform an HMAC-SHA1 signature from Swift 3 to a kong server which inreturn redirects to Twitter host( To enable HMAC on Kong - followed <a href=""https://getkong.org/plugins/hmac-authentication/"" rel=""nofollow noreferrer"">https://getkong.org/plugins/hmac-authentication/</a> )</p>

<p>I use the same secret key, username in my swift. Performing HMAC-SHA1 on current date with the secret key and sending request to <a href=""http://localhost:8000/@foo"" rel=""nofollow noreferrer"">http://localhost:8000/@foo</a></p>

<p>Swift 3 code:</p>

<pre><code>override func viewDidLoad() {
    super.viewDidLoad()
    let date = Date()
    let currentDateF = DateFormatter()
    let localeF = Locale(identifier: ""en_US"")
    let tzone = TimeZone(identifier: ""UTC"")
    currentDateF.dateFormat = ""EEE, dd MMM yyyy HH:mm:ss z""
    currentDateF.timeZone = tzone
    currentDateF.locale = localeF
    let currentDate = currentDateF.string(from: date)
    let dat = ""date: \(currentDate)""
    let username = ""bar""
    let hmacResult: String = dat.getHmac(algorithm: .SHA1, key: ""foo"")
    HTTPrequest(Datestr: currentDate, hmacAuth: hmacResult, username: username)
}

func HTTPrequest(Datestr: String, hmacAuth: String, username: String) {
    let url = URL(string: ""http://localhost:8000/@foo"")
    var request = URLRequest(url: url!)
    request.addValue(Datestr, forHTTPHeaderField: ""date"")
    request.addValue(""twitter.com"", forHTTPHeaderField: ""Host"")
    request.setValue(""hmac username='\(username)', algorithm='hmac-sha1', headers='date', signature='\(hmacAuth)'"", forHTTPHeaderField: ""Authorization"")
    let dataTask = URLSession.shared.dataTask(with: request) {
        (data,response,error) in
        if error != nil {
            print(error!)
        }
        print(""DATA RETURNED: \(data!)"")
        let str = String(data: data!, encoding: .utf8)
        print(""VALUE: \(str!)"")
        print(""RESPONSE: \(response!)"")
    }
    dataTask.resume()
}


enum hmacAlgo {
    case SHA1
    func  toHMACAlgorithm() -&gt; CCHmacAlgorithm {
        var result: Int = 0
        switch self {
        case .SHA1:
            result = kCCHmacAlgSHA1
        }
        return CCHmacAlgorithm(result)
    }

    func digestLength() -&gt; Int {
        var result: CInt = 0
        switch self {
        case .SHA1:
            result = CC_SHA1_DIGEST_LENGTH
        }
        return Int(result)
    }
}

extension String  {
    func getHmac(algorithm: hmacAlgo, key: String) -&gt; String {
        let stringData = self.cString(using: String.Encoding.ascii)
        let keyData = key.cString(using: String.Encoding.ascii)
        var result = [CUnsignedChar](repeating: 0, count: Int(algorithm.digestLength()))
        CCHmac(algorithm.toHMACAlgorithm(), keyData!, Int(strlen(keyData!)), stringData!, Int(strlen(stringData!)), &amp;result)
        let hmacData: NSData = NSData(bytes: result, length: (Int(algorithm.digestLength())))
        let hmacb64 = hmacData.base64EncodedString(options: NSData.Base64EncodingOptions.lineLength76Characters)
        return hmacb64
    }
}
</code></pre>

<p>But I get 403 Status Code - Forbidden with message stating HMAC signature cannot be verified</p>
","<p>Solved,</p>

<pre><code>request.setValue(""hmac username=\""\(username)\"", algorithm=\""hmac-sha1\"", headers=\""date\"", signature=\""\(hmacAuth)\"""", forHTTPHeaderField: ""Authorization"")
</code></pre>

<p>I just wrapped the strings in the authorization header with double quotes and sent the request.
Thank you.</p>
","44978725","446","<ios><swift><digital-signature><hmac><kong>","0","0","1","2017-07-07 19:55:04","44978725","0","0","4447772","","2017-07-06 06:48:25","2017-07-06 06:27:14","","","2017-07-07 19:55:04"
"49495333","NodeJS equivalent of C# code for hmac-sha256 authorization","<p>Im trying to convert the C# code found here:
<a href=""https://developer.allscripts.com/Content/fhir/content/amx_auth_header/index.html"" rel=""nofollow noreferrer"">AMX Authorization Header</a> in order to connect to an external API. The C# code works when trying to connect to the external API but when I convert it to a nodeJS solution it doesnt work.</p>

<p>I dont have access to the external C# API so can't update that side but was hoping someone could look at this and see something Im missing or doing wrong:</p>

<p><strong>My nodejs solution:</strong> </p>

<pre><code>var request = require('request');
var uuid = require('node-uuid');
var CryptoJS = require('crypto-js');

var URL = ""https://urltoexternalAPI.com"";
var itemAPPId = ""testAPPId"";
var APIKey = ""testAPIKey"";

var requestUri = encodeURIComponent(URL.toLowerCase());
var requestHttpMethod = ""GET"";

var requestTimeStamp = Math.floor(new Date().getTime() / 1000).toString();

var nonce = uuid.v1().replace(/-/g, '');

//I excluded the content hashing part as the API Im hitting is a GET request with no body content
var signatureRawData = itemAPPId + requestHttpMethod + requestUri + requestTimeStamp + nonce;

var secretKeyByteArray = CryptoJS.enc.Base64.parse(APIKey);

var signature = CryptoJS.enc.Utf8.parse(signatureRawData);

var signatureBytes = CryptoJS.HmacSHA256(signature, secretKeyByteArray);

var requestSignatureBase64String = signatureBytes.toString(CryptoJS.enc.Base64);

request({
  url: URL,
  headers: {
    'Authorization': ""amx ""+itemAPPId+"":""+requestSignatureBase64String+"":""+nonce+"":""+requestTimeStamp
  }
}, function (error, response, body) {
  if (response.statusCode != 200) {
    console.log(""Fail"");
  } else {
    console.log(""Success"");
  }
});
</code></pre>
","<p>I figured it out! If anyone ever comes across this issue they may find the below helpful:</p>

<p>the following C# code works a little different to nodeJS:
  <code>System.Web.HttpUtility.UrlEncode(request.RequestUri.AbsoluteUri.ToLower());</code></p>

<p>Initially I copied this functionality as is and wrote the nodejs equivalent as such:</p>

<pre><code> var requestUri = encodeURIComponent(URL.toLowerCase());
</code></pre>

<p>The encoding of the URL in C# keeps everything in lowercase - for e.g: <strong>https://</strong> becomes <strong>https%3a%2f%2f</strong> - whereas nodeJS uppercases its encoding characters - <strong>https%3A%2F%2F</strong> - this is what as causing the incorrect hashing.</p>

<p>The solution is to just move the lowercase function to after the encoding has been done on the URL. Like so:</p>

<pre><code>var requestUri = encodeURIComponent(URL).toLowerCase();
</code></pre>

<p>Seems rather simple but when trying to replicate the C# solution you may not pick up that the two URL encoders work differently.</p>

<p>Final solution: (updated to crypto thanks to <a href=""https://stackoverflow.com/users/2446151/yoryo"">Yoryo</a>)</p>

<pre><code>const fetch = require(""node-fetch"");
const uuid = require(""uuid"");
const crypto = require('crypto');

var URL = ""https://urltoapi.com"";

var itemAPPId = config.itemAPPId;
var APIKey = config.itemAPIKey;

var requestUri = encodeURIComponent(URL).toLowerCase();
var requestHttpMethod = ""GET""; //should be dynamic

var requestTimeStamp = Math.floor(new Date().getTime() / 1000).toString();

var nonce = uuid.v1().replace(/-/g, '');
var signatureRawData = itemAPPId + requestHttpMethod + requestUri + requestTimeStamp + nonce;

var key = Buffer.from(APIKey, 'base64');
var requestSignatureBase64String = crypto.createHmac('sha256', key).update(signatureRawData, 'utf8').digest('base64');

const hitExternalAPI = async url =&gt; {
  try {
    const res = await fetch(url, { method: 'GET', headers: { ""Authorization"": ""amx ""+itemAPPId+"":""+requestSignatureBase64String+"":""+nonce+"":""+requestTimeStamp } })
    .then(res =&gt; {
      console.log(res.ok);
    });
  } catch (error) {
    console.log(""Error"",error);
  }
};
hitExternalAPI(URL);
</code></pre>
","49515148","444","<javascript><c#><node.js><hmac>","0","1","1","2018-03-27 14:15:13","","2","","","","","2018-03-26 15:36:04","","2018-03-27 14:15:13","2018-03-27 14:08:49"
"34176869","How to suppress phpseclib ""Invalid HMAC"" warning","<p>I am using phpseclib to transfer files via SFTP, but login fails with</p>

<blockquote>
  <p>Invalid HMAC</p>
</blockquote>

<p>I need to ignore this server warning.</p>

<p>For example with curl command I use the <code>-k</code> option. Can I do the same with phplibsec?</p>

<blockquote>
  <p>-k, --insecure (SSL) This option explicitly allows curl to perform ""insecure"" SSL connections and transfers. All SSL connections are
  attempted to be made secure by using the CA certificate bundle
  installed by default. This makes all connections considered ""insecure""
  fail unless -k, --insecure is used.</p>
</blockquote>
","<p>The ""Invalid HMAC"" is not a warning, it's a fatal error. You cannot suppress it.</p>

<p>The error indicates there's some misunderstanding in communication between the server and the phpseclib client.</p>

<hr>

<p>The error has nothing to do with the ""host key verification"". Contrary to majority of SSH clients, the phpseclib does not actually even verify the host key. You have code this yourself.</p>

<p>See <a href=""http://phpseclib.sourceforge.net/ssh/2.0/examples.html#oneoff,hostkey"" rel=""nofollow noreferrer"">http://phpseclib.sourceforge.net/ssh/2.0/examples.html#oneoff,hostkey</a></p>

<p>(but again, this has nothing to do with the error you are getting)</p>
","34180840","442","<php><sftp><hmac><phpseclib>","0","1","1","2019-09-16 07:04:18","","2","1","850848","","2015-12-09 14:09:58","2015-12-09 10:49:01","","2019-09-16 07:04:18","2015-12-09 14:08:25"
"48662899","HMACSHA512 in Spring OAuth2 doesn't work","<p>can you help me with my code? I am trying to implement OAuth2 in Spring Security for jwt authentication on my website. I have implemented AuthorizationServerConfig and ResourceServerConfig, and some SecurityConfig where I have declared beans. One of the beans is access token converter.</p>

<p>Here is my implementation:</p>

<pre><code>@Bean
@Primary
public JwtAccessTokenConverter accessTokenConverter() {
    JwtAccessTokenConverter jwtAccessTokenConverter = new JwtAccessTokenConverter();
    jwtAccessTokenConverter.setSigner(new MacSigner(""HMACSHA512"", new SecretKeySpec(""secret_password"".getBytes(), ""HMACSHA512"")));
    return jwtAccessTokenConverter;
}
</code></pre>

<p>Token is generated but when I try call some api with this token I got this error in postman:</p>

<pre><code>{
    ""error"": ""invalid_token"",
    ""error_description"": ""Cannot convert access token to JSON""
}
</code></pre>

<p>When I replace this line:</p>

<pre><code>jwtAccessTokenConverter.setSigner(new MacSigner(""HMACSHA512"", new SecretKeySpec(""secret_password"".getBytes(), ""HMACSHA512"")));
</code></pre>

<p>with this line:</p>

<pre><code>jwtAccessTokenConverter.setSigningKey(""secret_password"");
</code></pre>

<p>Token generation and also authorization works as well. But it use default HS256. Can you tell me how to fix my code to work it with HS512? Thanks.</p>
","<p>to make your algo change to 512
you need to set both server / resource JwtAccessTokenConverter setVerifier to the same as what setSigner do, e.g:</p>

<pre><code>jwtAccessTokenConverter.setVerifier(MacSigner(""HMACSHA512"", SecretKeySpec(""secret_password"".toByteArray(), ""HMACSHA512"")))
</code></pre>

<p>remember: IS BOTH need to set </p>
","58551056","442","<java><spring><spring-security><spring-security-oauth2><hmac>","0","0","1","2019-10-25 01:31:51","","4","","","","","2018-02-07 11:39:51","","","2019-10-25 01:31:51"
"39653808","""Authorization"" header passed in HttpWebRequest getting null when transmitting from hmac client to server","<p>We are passing three headers in our <code>HttpWebRequest</code>, </p>

<pre><code>HttpWebRequest request = (HttpWebRequest)WebRequest.Create(""http://localhost/api/xxx?xid=5"");

 private HttpWebRequest SetHeaders(HttpWebRequest request)
        {
            string timestamp = DateTime.Now.Millisecond.ToString();
            request.Headers.Add(""ts"", timestamp);
            request.Headers.Add(""un"", cwUserId);

            string representation = String.Join(""\n"", request.Method, timestamp, cwUserId, request.RequestUri.AbsoluteUri.ToLower());

            var encryptedKey = Sha1Hash(cwSecretKey);
            string signature = Signature(encryptedKey, representation);

            request.Headers.Add(""Authorization"", signature);
            return request;
        }
</code></pre>

<p>When this request hits our <code>api</code> code:
We try to read headers, we are able to read ""ts"", ""un"". But ""Authorization"" is empty string.</p>

<p>On my api side,
I have <code>HttpActionContext</code> actionContext.
When I do:</p>

<pre><code>var headers = _actionContext.Request.Headers;
</code></pre>

<p>The header has:</p>

<pre><code>{Accept-Encoding: gzip
ts: 553
un: cwuser
X-REWRITE-URL: /api/usedcarleads/?dealerid=5
}
</code></pre>

<p>If i change name of header as ""Authorizatio"", i am able to see header value:</p>

<pre><code>{Accept-Encoding: gzip
ts: 858
un: cwuser
Authorizatio: ENsAgXIHql/LJ09D1752SQCIq8Uf8u3xAxLbqr45JG4=
X-REWRITE-URL: /api/usedcarleads/?dealerid=5
}
</code></pre>

<p>Can someone suggest me why i am not able to pass ""Authorization""?</p>
","","","441","<c#><authorization><httpwebrequest><hmac>","0","","0","2016-09-23 06:19:47","","2","","3361708","","2016-09-23 06:19:47","2016-09-23 06:16:32","","",""
"29976179","Hashes not similar between PHP and Paw REST Client","<p>I'm building a HMAC API and I have issues testing the hashing with Paw.</p>

<p>On Paw I have this payload:</p>

<pre><code>GET:/hello/world:"""":9a6e30f2016370b6f2dcfb6880501d7f2305d69bout
</code></pre>

<p>and a custom HMAC-SHA256 variable (actually function <a href=""https://stackoverflow.com/questions/27200290/paw-rest-client-how-to-compute-hmac-sha256-using-absolute-url-as-input"">like this</a> that sets it in the X-Hash header.</p>

<pre><code>X-Hash: 4Cq2yehWumDcUk1dYyfhm6qWjJVBkOCB8o12f5l0WGE=
</code></pre>

<p>In my PHP API I have the same thing:</p>

<pre><code>GET:/hello/world:"""":9a6e30f2016370b6f2dcfb6880501d7f2305d69bout
</code></pre>

<p>and used:</p>

<pre><code>hash_hmac('sha256', $this-&gt;getPayload(), '9a6e30f2016370b6f2dcfb6880501d7f2305d69bout', false);
</code></pre>

<p>So when comparing the hashes:</p>

<pre><code>Paw: 4Cq2yehWumDcUk1dYyfhm6qWjJVBkOCB8o12f5l0WGE=
PHP: 6961b9d1f6e986c49d963cbebd691fa68dfa59b4ce3b7f05320c2d43eae3c7c3
</code></pre>

<p>They are very different. Any idea why is that?</p>

<p><em>Update</em></p>

<p>Paw Code:  </p>

<pre><code>function evaluate(context){
  var loc = getLocation(context.getCurrentRequest().url);

  var payload = """";
  payload += context.getCurrentRequest().method + ':';
  payload += loc.pathname + ':';
  payload += JSON.stringify(context.getCurrentRequest().body) + ':';
    payload += ""9a6e30f2016370b6f2dcfb6880501d7f2305d69bout""; // Private key
  return payload;
};

function getLocation(href) {
    var match = href.match(/^(https?\:)\/\/(([^:\/?#]*)(?:\:([0-9]+))?)(\/[^?#]*)(\?[^#]*|)(#.*|)$/);
    return match &amp;&amp; {
        protocol: match[1],
        host: match[2],
        hostname: match[3],
        port: match[4],
        pathname: match[5],
        search: match[6],
        hash: match[7]
    }
}
</code></pre>

<p>PHP Code (with lots of comments):</p>

<pre><code>if (strpos(strtoupper($authHeader), 'HMAC') !== 0) {
    echo 'out';
    throw new HttpForbiddenException();
}
else {
    $hmacSignature = $app-&gt;request-&gt;headers()-&gt;get('X-Hash');
    $publicKey = $app-&gt;request-&gt;headers()-&gt;get('X-Public');

    if ( empty($hmacSignature) || empty($publicKey) ) {
        echo 'out2';
        throw new HttpForbiddenException();
    }
    else {

        $this-&gt;hmacManager-&gt;setPublicKey($publicKey);
        print '$publickey = ' . $publicKey . '&lt;br&gt;';

        // Validate if base64_encoded or not
        if( base64_decode($hmacSignature, true) !== FALSE ) {
            $binaryString = base64_decode($hmacSignature);
            $hmacSignature = bin2hex($binaryString);
            print 'decoding ' . '&lt;br&gt;';
        }
        $this-&gt;hmacManager-&gt;setHmacSignature($hmacSignature);
        print '$hmacSignature = ' . $hmacSignature . '&lt;br&gt;';

        $this-&gt;hmacManager-&gt;setRequestMethod($app-&gt;request-&gt;getMethod());
        print 'method = ' . $app-&gt;request-&gt;getMethod() . '&lt;br&gt;';
        $this-&gt;hmacManager-&gt;setRequestResourceUri($app-&gt;request-&gt;getResourceUri());
        print 'uri = ' . $app-&gt;request-&gt;getResourceUri() . '&lt;br&gt;';

        $requestBody = $app-&gt;request()-&gt;getBody();
        if (Utils::isJson($requestBody)) {
            $requestBody = json_decode($requestBody);
        }
        $this-&gt;hmacManager-&gt;setRequestBody(json_encode($requestBody));
        print 'body = ' . json_encode($requestBody) . '&lt;br&gt;';

        print 'private key = ' . $this-&gt;hmacManager-&gt;getPrivateKey() . '&lt;br&gt;';

        $payload = '';
        $payload .= $this-&gt;hmacManager-&gt;getRequestMethod() . "":"";
        $payload .= $this-&gt;hmacManager-&gt;getRequestResourceUri() . "":"";
        $payload .= $this-&gt;hmacManager-&gt;getRequestBody() . "":"";
        $payload .= $this-&gt;hmacManager-&gt;getPrivateKey();
        print 'PHP payload [' . $payload . ']';
        $this-&gt;hmacManager-&gt;setPayload($payload);

        $hmacValue = $this-&gt;hmacManager-&gt;generateHmac();
        $isValid = $this-&gt;hmacManager-&gt;isValid($this-&gt;hmacManager-&gt;generateHmac(), $hmacSignature);

        if ($isValid !== true) {
            echo 'out3';
            throw new HttpForbiddenException();
        }
    }
}
</code></pre>

<p>generateHmac from another class:</p>

<pre><code>public function generateHmac()
{
    print 'Generating HMAC' . '&lt;br&gt;';
    $algorithm = $this-&gt;getAlgorithm();
    print 'algo ' . $algorithm . '&lt;br&gt;';
    $privateKey = $this-&gt;getPrivateKey();
    print 'privk ' . $privateKey . '&lt;br&gt;';

    if (empty($algorithm)) {
        throw new \RuntimeException('Algorithm must be set and not empty');
    } elseif (empty($privateKey)) {
        throw new \RuntimeException('Private key must be set and not empty');
    }

    print 'payload ' . $this-&gt;getPayload() . '&lt;br&gt;';
    $hash = hash_hmac($this-&gt;getAlgorithm(), $this-&gt;getPayload(), $this-&gt;getPrivateKey(), false);
    print 'php hasj: ' . $hash . '&lt;br&gt;';

    return $hash;
}
</code></pre>

<p>Finally, here's the output statements:</p>

<pre><code>$publickey = 95f97b93560f951b4cae46c86d03d9b1a81d4ae8
decoding 
$hmacSignature = e02ab6c9e856ba60dc524d5d6327e19baa968c954190e081f28d767f99745861

method = GET
uri = /hello/world
body = """"
private key = 9a6e30f2016370b6f2dcfb6880501d7f2305d69bout
PHP payload [GET:/hello/world:"""":9a6e30f2016370b6f2dcfb6880501d7f2305d69bout]

Generating HMAC
algo sha256
privk 9a6e30f2016370b6f2dcfb6880501d7f2305d69bout
payload GET:/hello/world:"""":9a6e30f2016370b6f2dcfb6880501d7f2305d69bout
php hash: 6961b9d1f6e986c49d963cbebd691fa68dfa59b4ce3b7f05320c2d43eae3c7c3
</code></pre>

<p>Hope it helps!</p>
","<p>The paw hash is base64 encoded while the PHP one is in hexadecimal. So decode the paw hash first:</p>

<pre><code>$binary = base64_decode($pawHash);
$hex = bin2hex($binary);
</code></pre>

<p>And then compare this to your own hash.</p>
","29976249","439","<php><hmac><sha256><paw-app>","5","4","2","2015-05-11 12:36:15","29976249","0","1","-1","","2017-05-23 12:32:58","2015-04-30 19:28:13","","","2015-04-30 19:32:04"
"29976179","Hashes not similar between PHP and Paw REST Client","<p>I'm building a HMAC API and I have issues testing the hashing with Paw.</p>

<p>On Paw I have this payload:</p>

<pre><code>GET:/hello/world:"""":9a6e30f2016370b6f2dcfb6880501d7f2305d69bout
</code></pre>

<p>and a custom HMAC-SHA256 variable (actually function <a href=""https://stackoverflow.com/questions/27200290/paw-rest-client-how-to-compute-hmac-sha256-using-absolute-url-as-input"">like this</a> that sets it in the X-Hash header.</p>

<pre><code>X-Hash: 4Cq2yehWumDcUk1dYyfhm6qWjJVBkOCB8o12f5l0WGE=
</code></pre>

<p>In my PHP API I have the same thing:</p>

<pre><code>GET:/hello/world:"""":9a6e30f2016370b6f2dcfb6880501d7f2305d69bout
</code></pre>

<p>and used:</p>

<pre><code>hash_hmac('sha256', $this-&gt;getPayload(), '9a6e30f2016370b6f2dcfb6880501d7f2305d69bout', false);
</code></pre>

<p>So when comparing the hashes:</p>

<pre><code>Paw: 4Cq2yehWumDcUk1dYyfhm6qWjJVBkOCB8o12f5l0WGE=
PHP: 6961b9d1f6e986c49d963cbebd691fa68dfa59b4ce3b7f05320c2d43eae3c7c3
</code></pre>

<p>They are very different. Any idea why is that?</p>

<p><em>Update</em></p>

<p>Paw Code:  </p>

<pre><code>function evaluate(context){
  var loc = getLocation(context.getCurrentRequest().url);

  var payload = """";
  payload += context.getCurrentRequest().method + ':';
  payload += loc.pathname + ':';
  payload += JSON.stringify(context.getCurrentRequest().body) + ':';
    payload += ""9a6e30f2016370b6f2dcfb6880501d7f2305d69bout""; // Private key
  return payload;
};

function getLocation(href) {
    var match = href.match(/^(https?\:)\/\/(([^:\/?#]*)(?:\:([0-9]+))?)(\/[^?#]*)(\?[^#]*|)(#.*|)$/);
    return match &amp;&amp; {
        protocol: match[1],
        host: match[2],
        hostname: match[3],
        port: match[4],
        pathname: match[5],
        search: match[6],
        hash: match[7]
    }
}
</code></pre>

<p>PHP Code (with lots of comments):</p>

<pre><code>if (strpos(strtoupper($authHeader), 'HMAC') !== 0) {
    echo 'out';
    throw new HttpForbiddenException();
}
else {
    $hmacSignature = $app-&gt;request-&gt;headers()-&gt;get('X-Hash');
    $publicKey = $app-&gt;request-&gt;headers()-&gt;get('X-Public');

    if ( empty($hmacSignature) || empty($publicKey) ) {
        echo 'out2';
        throw new HttpForbiddenException();
    }
    else {

        $this-&gt;hmacManager-&gt;setPublicKey($publicKey);
        print '$publickey = ' . $publicKey . '&lt;br&gt;';

        // Validate if base64_encoded or not
        if( base64_decode($hmacSignature, true) !== FALSE ) {
            $binaryString = base64_decode($hmacSignature);
            $hmacSignature = bin2hex($binaryString);
            print 'decoding ' . '&lt;br&gt;';
        }
        $this-&gt;hmacManager-&gt;setHmacSignature($hmacSignature);
        print '$hmacSignature = ' . $hmacSignature . '&lt;br&gt;';

        $this-&gt;hmacManager-&gt;setRequestMethod($app-&gt;request-&gt;getMethod());
        print 'method = ' . $app-&gt;request-&gt;getMethod() . '&lt;br&gt;';
        $this-&gt;hmacManager-&gt;setRequestResourceUri($app-&gt;request-&gt;getResourceUri());
        print 'uri = ' . $app-&gt;request-&gt;getResourceUri() . '&lt;br&gt;';

        $requestBody = $app-&gt;request()-&gt;getBody();
        if (Utils::isJson($requestBody)) {
            $requestBody = json_decode($requestBody);
        }
        $this-&gt;hmacManager-&gt;setRequestBody(json_encode($requestBody));
        print 'body = ' . json_encode($requestBody) . '&lt;br&gt;';

        print 'private key = ' . $this-&gt;hmacManager-&gt;getPrivateKey() . '&lt;br&gt;';

        $payload = '';
        $payload .= $this-&gt;hmacManager-&gt;getRequestMethod() . "":"";
        $payload .= $this-&gt;hmacManager-&gt;getRequestResourceUri() . "":"";
        $payload .= $this-&gt;hmacManager-&gt;getRequestBody() . "":"";
        $payload .= $this-&gt;hmacManager-&gt;getPrivateKey();
        print 'PHP payload [' . $payload . ']';
        $this-&gt;hmacManager-&gt;setPayload($payload);

        $hmacValue = $this-&gt;hmacManager-&gt;generateHmac();
        $isValid = $this-&gt;hmacManager-&gt;isValid($this-&gt;hmacManager-&gt;generateHmac(), $hmacSignature);

        if ($isValid !== true) {
            echo 'out3';
            throw new HttpForbiddenException();
        }
    }
}
</code></pre>

<p>generateHmac from another class:</p>

<pre><code>public function generateHmac()
{
    print 'Generating HMAC' . '&lt;br&gt;';
    $algorithm = $this-&gt;getAlgorithm();
    print 'algo ' . $algorithm . '&lt;br&gt;';
    $privateKey = $this-&gt;getPrivateKey();
    print 'privk ' . $privateKey . '&lt;br&gt;';

    if (empty($algorithm)) {
        throw new \RuntimeException('Algorithm must be set and not empty');
    } elseif (empty($privateKey)) {
        throw new \RuntimeException('Private key must be set and not empty');
    }

    print 'payload ' . $this-&gt;getPayload() . '&lt;br&gt;';
    $hash = hash_hmac($this-&gt;getAlgorithm(), $this-&gt;getPayload(), $this-&gt;getPrivateKey(), false);
    print 'php hasj: ' . $hash . '&lt;br&gt;';

    return $hash;
}
</code></pre>

<p>Finally, here's the output statements:</p>

<pre><code>$publickey = 95f97b93560f951b4cae46c86d03d9b1a81d4ae8
decoding 
$hmacSignature = e02ab6c9e856ba60dc524d5d6327e19baa968c954190e081f28d767f99745861

method = GET
uri = /hello/world
body = """"
private key = 9a6e30f2016370b6f2dcfb6880501d7f2305d69bout
PHP payload [GET:/hello/world:"""":9a6e30f2016370b6f2dcfb6880501d7f2305d69bout]

Generating HMAC
algo sha256
privk 9a6e30f2016370b6f2dcfb6880501d7f2305d69bout
payload GET:/hello/world:"""":9a6e30f2016370b6f2dcfb6880501d7f2305d69bout
php hash: 6961b9d1f6e986c49d963cbebd691fa68dfa59b4ce3b7f05320c2d43eae3c7c3
</code></pre>

<p>Hope it helps!</p>
","<p>We've just added new <a href=""https://luckymarmot.com/paw/extensions/?q=base64"" rel=""nofollow noreferrer"">Base 64 to Hex conversion dynamic values</a>, this should solve your problem.</p>

<p>Wrap your HMAC signature dynamic value inside the new Base 64 to Hex one, and you'll get a valid hexadecimal signature:</p>

<p><img src=""https://i.stack.imgur.com/iywen.png"" alt=""Hexadecimal HMAC signature with Paw""></p>

<p>You can install this new dynamic value here: <a href=""https://luckymarmot.com/paw/extensions/Base64ToHexDynamicValue"" rel=""nofollow noreferrer"">Base 64 to Hex Dynamic Value</a></p>
","30167826","439","<php><hmac><sha256><paw-app>","5","2","2","2015-05-11 12:36:15","29976249","0","1","-1","","2017-05-23 12:32:58","2015-04-30 19:28:13","","","2015-05-11 12:36:15"
"51883048","Should right padding an HMAC SHA256 secret key with \0 return the same hash?","<p>When using the JavaX HMAC/SHA256 hashing libraries, if I right pad my secret key with non-zero bytes, the hash for the same message is different; as expected. </p>

<pre><code>hmacSHA256digest(  ""secret"".getBytes(""UTF-8""), msg) = ""244d9c89069406d40803722ec6a793e5e04c55234d9ca03039a7b505cb3f8f00""
hmacSHA256digest(""secret\1"".getBytes(""UTF-8""), msg) = ""4f94305c91ca9d8dec13ffcff7e455d6f0c49373e1bbc4035da2b500b11063fb"" 
</code></pre>

<p>However, if I right-pad the secret key with an arbitrary number of \0 bytes, the hash comes back as the same for different byte arrays like:</p>

<ul>
<li><strong>""secret""</strong></li>
<li><strong>""secret\0""</strong></li>
<li><strong>""secret\0\0""</strong></li>
</ul>

<p>So, JavaX HMAC SHA256 is returning the <strong>same hash</strong>, even though the <strong>byte[] array returned from getBytes(""UTF-8"") for the secret just has a few additional zeros at the end</strong> (so it's not a UTF-8 issue):</p>

<pre><code>hmacSHA256digest(   ""secret"".getBytes(""UTF-8""), msg) 
= ""244d9c89069406d40803722ec6a793e5e04c55234d9ca03039a7b505cb3f8f00""

hmacSHA256digest(   ""secret\0"".getBytes(""UTF-8""), msg) 
= ""244d9c89069406d40803722ec6a793e5e04c55234d9ca03039a7b505cb3f8f00""

hmacSHA256digest(   ""secret\0\0"".getBytes(""UTF-8""), msg) 
= ""244d9c89069406d40803722ec6a793e5e04c55234d9ca03039a7b505cb3f8f00""
</code></pre>

<p>Calls to other JavaX methods for MD5 and plain SHA256 do not return the same hash when extra \0 s are appended to the secret, so they pass our security test case for hash uniqueness across different secrets. Is the failure of this zero-padded-secrets case with MAC/SHA256 a possible attack vector?</p>

<p>This is the example code:</p>

<pre><code>import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;
import java.security.InvalidKeyException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.Arrays;

static void testRightZeroPaddedSecretsHaveDifferentHashes() {
    try {
        byte[] msg = ""msg"".getBytes(""UTF-8"");

        // HMAC SHA256
        byte[] b3 = hmacSHA256digest(msg, ""secret"".getBytes(""UTF-8""));
        byte[] b4 = hmacSHA256digest(msg, ""secret\0"".getBytes(""UTF-8""));

        // Plain SHA256
        byte[] b5 = SHA256digest(msg, ""secret"".getBytes(""UTF-8""));
        byte[] b6 = SHA256digest(msg, ""secret\0"".getBytes(""UTF-8""));

        boolean same34 = Arrays.equals(b3, b4);
        boolean same56 = Arrays.equals(b5, b6);
        System.out.println(
                ""\n"" + Arrays.toString(b3) +
                ""\n"" + Arrays.toString(b4) +
                ""\nHMAC SHA256 - identical hash results? = "" + same34 +
                ""\n"" +
                ""\n"" + Arrays.toString(b5) +
                ""\n"" + Arrays.toString(b6) +
                ""\nPlain SHA256 - identical hash results? = "" + same56
        );
    } catch (Throwable e) {
        e.printStackTrace();
    }
}

static byte[] hmacSHA256digest(byte[] msg, byte[] secret) {
    try {
        SecretKeySpec keySpec = new SecretKeySpec(secret, ""HmacSHA256"");
        Mac mac = Mac.getInstance(""HmacSHA256"");
        mac.init(keySpec);
        byte[] hmac = mac.doFinal(msg);
        return hmac;
    } catch (NoSuchAlgorithmException e) {
        e.printStackTrace();
    } catch (InvalidKeyException e) {
        e.printStackTrace();
    }
    return null;
}

static byte[] SHA256digest(byte[] msg, byte[] secret) {
    try {
        MessageDigest digest = MessageDigest.getInstance(""SHA-256"");
        digest.update(msg);
        byte[] hash = digest.digest(secret);
        return hash;
    } catch (NoSuchAlgorithmException e) {
        e.printStackTrace();
    }
    return null;
}
</code></pre>

<p>And sample output:</p>

<pre><code>[-2, 79, -100, 65, -113, 104, 63, 3, 79, 106, -7, 13, 29, -43, -72, 106, -64, 53, 93, -39, 99, 50, -59, -100, -57, 69, -104, -48, 115, 97, 7, -10] 
[-2, 79, -100, 65, -113, 104, 63, 3, 79, 106, -7, 13, 29, -43, -72, 106, -64, 53, 93, -39, 99, 50, -59, -100, -57, 69, -104, -48, 115, 97, 7, -10] 
HMAC SHA256 - identical hash results? = true

[-88, 92, 89, -29, -65, -48, -127, 51, 125, -120, 78, -38, 25, 57, -91, 91, -50, 111, -33, 40, -3, 0, -95, 89, -50, -88, 39, 118, 101, -56, 91, 126] 
[-40, 39, 49, -64, 58, 40, 124, 64, 110, -100, 50, 115, -32, 114, -107, 24, -73, -17, -37, 11, 67, -26, -48, -65, 109, -24, 119, 45, 74, -31, -81, 119]
Plain SHA256 - identical hash results? = false
</code></pre>

<p>Since JavaX HMAC SHA256 failed this zero-padded-secrets test case that passed for the plain SHA256/MD5 algorithms mentioned above, can anyone explain the difference in the behavior and if this can be exploited? </p>
","<p>This is the correct behavior of the HMAC construct, by design.</p>

<p>The secret key should ideally be of the size of the block size of the underlying hash algorithm. For SHA-256, the block size is 512 bits, so your key should be 64 bytes.</p>

<p>From the <a href=""https://tools.ietf.org/html/rfc2104"" rel=""nofollow noreferrer"">RFC 2104</a>, if a key is longer than the block size, it will be shortened by way of passing it through the hash function and using the hash as the key. <strong>If the key is shorter than the block size, it will be extended by appending zeros</strong>.</p>

<p>This is the first step of the HMAC algorithm:</p>

<blockquote>
  <p>(1) append zeros to the end of K to create a B byte string 
  (e.g., if K is of length 20 bytes and B=64, then K will be appended with 44 zero bytes 0x00)</p>
</blockquote>

<p>The recommendation from the RFC is to use keys that are at least the size of the output of the hash function, 32 bytes in your case. Even though this will still fail your test case that the key can be padded with zeroes and produce the same HMAC.</p>
","52188085","431","<security><sha256><hmac><zero-padding>","0","1","1","2018-09-05 14:51:28","52188085","2","","1181073","","2018-08-17 17:40:49","2018-08-16 18:11:37","","","2018-09-05 14:51:28"
"47682005","update openssl, do not work hmac","<p>there is code</p>

<pre><code> #include &lt;stdio.h&gt;
#include &lt;string.h&gt;
#include &lt;openssl/hmac.h&gt;

int main() {
    const char key[] = ""012345678"";
    char data[] = ""hello world"";
    unsigned char* result;
    unsigned int len = 20;
    result = (unsigned char*)malloc(sizeof(char) * len);
    HMAC_CTX ctx;
    HMAC_CTX_init(&amp;ctx);
    HMAC_Init_ex(&amp;ctx, key, strlen(key), EVP_sha1(), NULL);
    HMAC_Update(&amp;ctx, (unsigned char*)&amp;data, strlen(data));
    HMAC_Final(&amp;ctx, result, &amp;len);
    HMAC_CTX_cleanup(&amp;ctx);
    printf(""HMAC digest: "");

    for (int i = 0; i != len; i++)
        printf(""%02x"", (unsigned int)result[i]);

    printf(""\n"");
    free(result);

}
</code></pre>

<p>output HMAC digest: e19e220122b37b708bfb95aca2577905acabf0c0</p>

<p>I can not update this code for openssl 1.1.0.
The new version changed the syntax hmac.</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;string.h&gt;
#include &lt;openssl/hmac.h&gt;


using namespace std;
int main() {
    const char key[] = ""012345678"";
    char data[] = ""hello world"";
    int datalen = strlen(data);
    int keylen = strlen(key);


    unsigned char* result;
    unsigned int len = 20;
    result = (unsigned char*)malloc(sizeof(char) * len);
    cout &lt;&lt; datalen  &lt;&lt; endl;
    cout &lt;&lt; keylen  &lt;&lt; endl;
    cout &lt;&lt; len  &lt;&lt; endl;

    HMAC_CTX *HMAC_CTX_new();
    int HMAC_CTX_reset(HMAC_CTX *ctx);
    int HMAC_Init_ex(HMAC_CTX *ctx, const  char key, int keylen, const EVP_MD  EVP_sha1());
    int HMAC_Update(HMAC_CTX * ctx,  char &amp;data, int datalen);
    int HMAC_Final(HMAC_CTX * ctx, char result, int &amp;len);
    int HMAC_CTX_cleanup(HMAC_CTX * ctx);

    printf(""HMAC digest: "");

    for (int i = 0; i != len; i++)
        printf(""%02x"", (unsigned int)result[i]);

    printf(""\n"");
    free(result);
    return 0;
}
</code></pre>

<p>output HMAC digest: 0000000000000000000000000000000000000000</p>

<p>I will be glad of any help</p>
","","","429","<c++><openssl><hmac>","0","","0","2017-12-07 14:55:32","","6","","8854331","","2017-12-07 14:55:32","2017-12-06 19:24:47","","",""
"43159426","Signing a message with sha512 in python","<p>I'm trying to send a message over a websocket at hitbtc.com. From the api documentation, ""signagure"" needs to be a ""hash-based message authentication code: base64 hmac-sha512 (binary representation of the message)""</p>

<p>I'm getting the error message: 'str' object has no attribute 'hexdigest'</p>

<pre><code>    import time
    import json
    import hmac
    import hashlib
    def sign(payload):
                key = """"
                secret = """"
                """"""
                Signature method which wraps signature and nonce parameters around a
                payload dictionary.
                :param payload:
                :return:
                """"""
                nonce = str(int(time.time() * 1000))
                package = {'apikey': key,
                           'message': {'nonce': nonce, 'payload': payload}}

                signature = hmac.new(secret, json.dumps(payload).hexdigest,
                                     hashlib.sha512).hexdigest()
                package['signature'] = signature

                return json.dumps(package)
payload = {""Login"": {}}
s = sign(payload)
</code></pre>
","","","428","<python><hmac><sha512>","0","","0","2017-04-01 16:41:08","","3","","","","","2017-04-01 16:41:08","","",""
"31492897","Golang - Dropbox webhook signature validation hmac","<p>I am writing a program that needs to use Dropbox's webhooks. I haven't been able to find any Go implementation already in place, so I've decided to write mine. Unfortunately, it doesn't seem to work. </p>

<p>I think the issue here is with <strong>hmac</strong>, as I am most probably doing something wrong, but I just can't seem to understand where exactly the issue here. Any idea?</p>

<p>The following is what I have:</p>

<pre><code>package dboxwebhook

import (
    ""bytes""
    ""crypto/hmac""
    ""crypto/sha256""
    ""errors""
    ""io""
    ""io/ioutil""
    ""log""
)

type Signature struct {
    AppSecret []byte
    Signature []byte
}

func (w *Signature) Check(reqBody io.ReadCloser) error {

    if bytes.Compare(w.Signature, nil) == 0 {
        return errors.New(""DropBox signature doesnt exist"")
    }

    // building HMAC key (https://golang.org/pkg/crypto/hmac/)
    mac := hmac.New(sha256.New, w.AppSecret)
    requestBody, err := ioutil.ReadAll(reqBody)
    if err != nil {
        return err
    }

    mac.Write(requestBody)
    expectedMac := mac.Sum(nil)

    log.Println(w.AppSecret)
    log.Println(expectedMac)
    log.Println(w.Signature)

    // compare if it corresponds with the signature sent by DropBox
    comparison := hmac.Equal(w.Signature, expectedMac)

    if !comparison {
        return errors.New(""Signature Check unsuccessful"")
    }

    return nil

}
</code></pre>

<p>To test this, the only way I know is to use <a href=""https://github.com/dropbox/dropbox_hook"" rel=""nofollow"">this Python script</a> from Dropbox.</p>
","<p>The Dropbox signature is sent as string in the HTTP header <code>X-Dropbox-Signature</code>.</p>

<p>So as to use it with <code>hmac.Equal</code>, you need to decode the hex string representation to a slice of byte first using package <a href=""https://golang.org/pkg/encoding/hex/"" rel=""nofollow noreferrer"">encoding/hex</a>.</p>

<pre><code>    import ""encoding/hex""

    [...]
    hexSignature, err := hex.DecodeString(w.Signature)
    [...]
</code></pre>

<p>Then you can use the hex bytes in the comparison</p>

<pre><code>    [...]
    // compare if it corresponds with the signature sent by DropBox
    comparison := hmac.Equal(hexSignature, expectedMac)
    [...]
</code></pre>
","48063187","421","<go><dropbox-api><hmac><sha256><webhooks>","0","2","1","2018-01-02 14:59:50","","7","","1305693","","2015-07-20 19:35:01","2015-07-18 15:52:24","","","2018-01-02 14:59:50"
"22930754","can hmac be used to authenticate a user from an email link","<p>I am not really sure where the shared secret takes place.</p>

<p>I want users to be authenticated for a distinct page when they login with an action link in their email. After verify the key gets deleted from the database.</p>

<p>A couple of questions</p>

<ol>
<li>is this what I need to send in the email and do I need to randomize the secret also</li>
<li>do I store the hash and keep the secret in a constant</li>
<li><p>compare the hash-received with the database and<br>
second compare the associated userid with the decoded userid</p></li>
<li><p>what length does the db field need to be</p>

<p>$hmac = echo hash_hmac('sha256', 'userid|timestamp|somedata', 'tfjtfkmg');
url?hash=$hmac</p></li>
</ol>

<p>do I verify the email like with the example code from facebook, although facebook uses two hmacs, one for sig and one for payload and base64 it.</p>

<p>is this correct?</p>

<pre><code>function parse_signed_request($signed_request) {
  list($encoded_sig, $payload) = explode('.', $signed_request, 2); 

  $secret = ""appsecret""; // Use your app secret here

  // decode the data
  $sig = base64_url_decode($encoded_sig);
  $data = json_decode(base64_url_decode($payload), true);

  // confirm the signature
  $expected_sig = hash_hmac('sha256', $payload, $secret, $raw = true);
  if ($sig !== $expected_sig) {
    error_log('Bad Signed JSON signature!');
    return null;
  }

  return $data;
}

function base64_url_decode($input) {
  return base64_decode(strtr($input, '-_', '+/'));
}
</code></pre>
","<p>First of all; there is no such thing as a shared secret when generating a hash.</p>

<p>I <a href=""http://en.wikipedia.org/wiki/Hash_function#Description"" rel=""nofollow"">quote</a></p>

<blockquote>
  <p>Hash functions are primarily used to generate fixed-length output data that acts as a shortened reference to the original data. This is useful when the original data is too cumbersome to use in its entirety.</p>
</blockquote>

<p>And I <a href=""http://en.wikipedia.org/wiki/Shared_secret"" rel=""nofollow"">quote again</a></p>

<blockquote>
  <p>The shared secret can be used for authentication (for instance when logging into a remote system) [...]  or it can be fed to a key derivation function to produce one or more keys to use for encryption</p>
</blockquote>

<p>So basically a hash algorithm has a lot of uses, and generating a protected link wasn't the original meaning, but a good use though!</p>

<p>And a shared secret (or public key) is (most commonly) used to generate an encrypted version of a file (or message) that can only be decrypted by the creator of the shared secret using his private secret (private key). Sorry, can't be too extensive, as there is way too much to tell about the subject :) if you want to know more, start with reading the sources of the quotes above.</p>

<hr>

<p>Back to your question now. The first question you'll have to ask yourself when encrypting something is how bad does someone want the encrypted info (or wants to get in in your case). In encryption there is no such thing as 'unbreakable', but the best encryption algorithms take such a long time to crack that people don't even try.</p>

<p>In your case, just make sure it is pretty hard to 'guess' the hash (more precise; guess the parameters used to create it). You can, for example, use the time in milliseconds, a random salt, etc. But make sure every parameter you use can be retrieved later on, eg. by storing it in a database next to the generated hash itself. In example storing a users IP isn't useful here, as the user can request the login hash at his office, go back home, and click on the link there. Then suddenly the link wouldn't be valid anymore as his IP 'changed'.</p>

<p>Long story short, an answer on your questions: basically you'll have to send a string (hash) that can only be reproduced by yourself. For that you - and you only - need to know what kind of parameters where used for creating the hash. So every single parameter needs to be stored in the database or can be reproduced in another way.
So yes, I would advise you the randomize the secret for each link, but remember to store it, eg. next to the hash itself in your database. </p>

<p>The hash you receive should be compared with the one in the database, preferably checking the expiry date/time as well (just store <code>{generation time} + 3600 seconds</code> in your database and compare it against the time the user trys to login your system. In/decrease the 3600 seconds to increase/decrease the time window in which the user can login using the link.</p>

<p>Your last question (compare the associated user id) isn't relevant, as you cannot decode a hash.</p>

<p>The length of a database field depends. For a sha2 you'll need 64 characters, for md5 32 characters, and there are others.</p>
","22931358","420","<php><actionlink><hmac>","1","1","1","2014-04-08 08:16:58","22931358","0","","133418","","2014-04-08 08:06:53","2014-04-08 07:48:10","","","2014-04-08 08:16:58"
"31060347","NSString to String throwing ""fatal error: unexpectedly found nil while unwrapping an Optional value""","<p>The following Swift code is crashing on the return statement with the following error: </p>

<blockquote>
  <p>fatal error: unexpectedly found nil while unwrapping an Optional value</p>
</blockquote>

<p>According to the debugger the result variable has a non-null value. I really want the function to accept Strings and return a String, not NSData. Hoping this is a dumb question and I'm just not seeing it. Been stuck on this for hours!</p>

<pre><code>println(hmac_sha256(""sample_data"", inKey: ""sample_key""))

    func hmac_sha256(inData: String, inKey: String) -&gt; (String) {

         let data: NSData = inData.dataUsingEncoding(NSUTF8StringEncoding, allowLossyConversion: false)!
         let key: NSData = inKey.dataUsingEncoding(NSUTF8StringEncoding, allowLossyConversion: false)!

         var result = NSMutableData(length: Int(CC_SHA256_DIGEST_LENGTH))

         CCHmac(CCHmacAlgorithm(kCCHmacAlgSHA256), key.bytes, size_t(key.length), data.bytes, size_t(data.length), result!.mutableBytes)

         return NSString(data: result!, encoding: NSUTF8StringEncoding) as! String
     }
</code></pre>
","<p>You cannot expect to be able to turn arbitrary data into an NSString with UTF-8 encoding. For example, UTF-8 can never, ever include a byte 0xff and therefore data containing that byte value can never be turned into an NSString. </p>

<p>So no matter how hard you want to get an NSString, you won't get it. </p>
","31060450","420","<ios><swift><hmac><sha256>","0","2","2","2015-06-25 21:12:01","","1","","","","","2015-06-25 20:39:22","","","2015-06-25 20:45:14"
"31060347","NSString to String throwing ""fatal error: unexpectedly found nil while unwrapping an Optional value""","<p>The following Swift code is crashing on the return statement with the following error: </p>

<blockquote>
  <p>fatal error: unexpectedly found nil while unwrapping an Optional value</p>
</blockquote>

<p>According to the debugger the result variable has a non-null value. I really want the function to accept Strings and return a String, not NSData. Hoping this is a dumb question and I'm just not seeing it. Been stuck on this for hours!</p>

<pre><code>println(hmac_sha256(""sample_data"", inKey: ""sample_key""))

    func hmac_sha256(inData: String, inKey: String) -&gt; (String) {

         let data: NSData = inData.dataUsingEncoding(NSUTF8StringEncoding, allowLossyConversion: false)!
         let key: NSData = inKey.dataUsingEncoding(NSUTF8StringEncoding, allowLossyConversion: false)!

         var result = NSMutableData(length: Int(CC_SHA256_DIGEST_LENGTH))

         CCHmac(CCHmacAlgorithm(kCCHmacAlgSHA256), key.bytes, size_t(key.length), data.bytes, size_t(data.length), result!.mutableBytes)

         return NSString(data: result!, encoding: NSUTF8StringEncoding) as! String
     }
</code></pre>
","<p>Got it. I think I was missing the big picture. The goal was to convert NSData to a hex string. I found a nifty method on github for this here: <a href=""https://github.com/CryptoCoinSwift/SHA256-Swift/blob/master/SHA256.swift"" rel=""nofollow"">https://github.com/CryptoCoinSwift/SHA256-Swift/blob/master/SHA256.swift</a></p>
","31060879","420","<ios><swift><hmac><sha256>","0","0","2","2015-06-25 21:12:01","","1","","","","","2015-06-25 20:39:22","","","2015-06-25 21:12:01"
"55718029","Converting crypto hmac to crypto-js hmac string","<p>I'm trying to take the process of converting a secret hmac string to allow me to test my api in postman. Postman comes pre-installed with cryptojs. This is the process I've got on my test server using crypto:</p>

<pre><code>const crypto = require('crypto');
const generateHmac = (privateKey, ts) =&gt; {
    const hmac = crypto.createHmac('sha256', privateKey);
    hmac.update(ts);
    const signature = hmac.digest('hex');
    return signature;
}
</code></pre>

<p>This does not match the string generated with cryptojs within postman:</p>

<pre><code>const createHmacString = (privateKey, ts) =&gt; {
    const hmac = CryptoJS.HmacSHA256(ts, privateKey).toString(CryptoJS.enc.Hex)
    return hmac;
}
</code></pre>

<p>Not sure what I'm doing wrong here. Thanks in advance!</p>
","<p>Okay finally figured it out - crypto-js does not provide actual bytes so encoding everything is necessary:</p>

<pre><code>const createHmacString = (privateKey, ts) =&gt; {
    const key = CryptoJS.enc.Utf8.parse(privateKey)
    const timestamp = CryptoJS.enc.Utf8.parse(ts)
    const hmac = CryptoJS.enc.Hex.stringify(CryptoJS.HmacSHA256(timestamp, key))

    //  const hmac = CryptoJS.HmacSHA256(ts, privateKey).toString(CryptoJS.enc.Hex)
    return hmac;
}

let ts = new Date().getTime();
const signature = createHmacString(""your-private-key"", ts);
</code></pre>
","55774975","419","<javascript><node.js><encryption><hmac><postman-pre-request-script>","1","1","1","2019-04-20 15:30:13","55774975","0","1","","","","2019-04-16 23:50:09","","","2019-04-20 15:30:13"
"33263246","Using Swift, how can I create an OpenSSL HMAC digest using SHA1 and then encode with strict encode64","<p>I need to create a Base64 strict encoded representation of an OpenSSL HMAC digest using SHA1. I have the code in <code>Ruby</code>, but I need the similar code in <code>Swift</code>. Does anybody have that easy?</p>

<p>The code in <code>Ruby</code> is:</p>

<pre><code>digest = OpenSSL::Digest.new('sha1')
hmac_digest = OpenSSL::HMAC.digest(digest, secret_key, canonical_string)
Base64.strict_encode64(hmac_digest)
</code></pre>

<p>As you see above, my inputs are 2 strings (<code>secret_key</code> and <code>canonical_string</code>) and I first create the digest and then I encode it.</p>

<p>So, what would be the correct code in <code>Swift</code> that will give the same result for the same inputs?</p>
","<p>I created a bridging header to import <code>CommonCrypto.h</code>.</p>

<p>And then I extended String with the following function:</p>

<pre><code>enum HMACAlgorithm {
  case MD5, SHA1, SHA224, SHA256, SHA384, SHA512

  func toCCHmacAlgorithm() -&gt; CCHmacAlgorithm {
    var result: Int = 0
    switch self {
    case .MD5:
        result = kCCHmacAlgMD5
    case .SHA1:
        result = kCCHmacAlgSHA1
    case .SHA224:
        result = kCCHmacAlgSHA224
    case .SHA256:
        result = kCCHmacAlgSHA256
    case .SHA384:
        result = kCCHmacAlgSHA384
    case .SHA512:
        result = kCCHmacAlgSHA512
    }
    return CCHmacAlgorithm(result)
  }

  func digestLength() -&gt; Int {
    var result: CInt = 0
    switch self {
    case .MD5:
        result = CC_MD5_DIGEST_LENGTH
    case .SHA1:
        result = CC_SHA1_DIGEST_LENGTH
    case .SHA224:
        result = CC_SHA224_DIGEST_LENGTH
    case .SHA256:
        result = CC_SHA256_DIGEST_LENGTH
    case .SHA384:
        result = CC_SHA384_DIGEST_LENGTH
    case .SHA512:
        result = CC_SHA512_DIGEST_LENGTH
    }
    return Int(result)
  }
}

extension String {
  func hmac(algorithm: HMACAlgorithm, key: String) -&gt; String {
    let cKey = key.cStringUsingEncoding(NSUTF8StringEncoding)
    let cData = self.cStringUsingEncoding(NSUTF8StringEncoding)

    var result = [CUnsignedChar](count: Int(algorithm.digestLength()), repeatedValue: 0)

    CCHmac(algorithm.toCCHmacAlgorithm(), cKey!, Int(strlen(cKey!)), cData!, Int(strlen(cData!)), &amp;result)

    let hmacData:NSData = NSData(bytes: result, length: (Int(algorithm.digestLength())))

    let hmacBase64 = hmacData.base64EncodedStringWithOptions(NSDataBase64EncodingOptions.Encoding76CharacterLineLength)

    return String(hmacBase64)
 }
}
</code></pre>
","33298591","416","<ruby><swift><openssl><hmac>","0","1","1","2015-10-23 09:05:24","33298591","0","","2432317","","2015-10-21 16:55:06","2015-10-21 08:02:27","","","2015-10-23 09:05:24"
"32907829","Gravity Forms Signature - From PHP to Python","<p>I need to translate some existing PHP code to Python. This job connects to gravity forms and queries for certain data. In order to make the query, a signature must be calculated in order to verify the connection.</p>

<p>The Gravity Forms web api gives good PHP directions <a href=""https://www.gravityhelp.com/documentation/article/web-api/#get-forms-form-id-entries"" rel=""nofollow"">here</a>.</p>

<p>The PHP method is as follows:</p>

<pre><code>function calculate_signature( $string, $private_key ) {
    $hash = hash_hmac( 'sha1', $string, $private_key, true );
    $sig = rawurlencode( base64_encode( $hash ) );
    return $sig;
}
</code></pre>

<p>Based on my understanding of Python and the information about hash-hmac and rawurlencoded from php2python.com, I wrote the following:</p>

<pre><code>import hmac, hashlib, urllib, base64
def calculate_signature(string, private_key):
    hash_var = hmac.new(private_key, string, hashlib.sha1).digest()
    sig = urllib.quote(base64.b64encode(hash_var))
    return sig
</code></pre>

<p>However, the two signatures are not equivalent, and thus Gravity Forms returns a HTTP 403: Bad Request response.</p>

<p>Am I missing something within my translation?</p>

<hr>

<p>Update (11/04/15)</p>

<p>I have now matched my php and python urls. However, I still receive a 403 error.</p>
","<p>You're almost there. <a href=""https://docs.python.org/2/library/urllib.html#urllib.quote"" rel=""nofollow""><code>urllib.quote</code></a> does not encode slashes, for example, as PHP's <a href=""http://php.net/manual/en/function.rawurlencode.php"" rel=""nofollow""><code>rawurlencode</code></a> does. You can use <a href=""https://docs.python.org/2/library/urllib.html#urllib.quote_plus"" rel=""nofollow""><code>urllib.quote_plus</code></a> to achieve the desired effect:</p>

<pre><code>import hmac, hashlib, urllib, base64
def calculate_signature(string, private_key):
    hash_var = hmac.new(private_key, string, hashlib.sha1).digest()
    sig = urllib.quote_plus(base64.b64encode(hash_var))
    return sig
</code></pre>
","32909019","414","<php><python><urlencode><hmac><gravity-forms-plugin>","2","0","2","2016-01-15 15:13:02","34814144","2","1","2565651","","2015-11-04 13:58:19","2015-10-02 13:04:33","","","2015-10-02 14:06:34"
"32907829","Gravity Forms Signature - From PHP to Python","<p>I need to translate some existing PHP code to Python. This job connects to gravity forms and queries for certain data. In order to make the query, a signature must be calculated in order to verify the connection.</p>

<p>The Gravity Forms web api gives good PHP directions <a href=""https://www.gravityhelp.com/documentation/article/web-api/#get-forms-form-id-entries"" rel=""nofollow"">here</a>.</p>

<p>The PHP method is as follows:</p>

<pre><code>function calculate_signature( $string, $private_key ) {
    $hash = hash_hmac( 'sha1', $string, $private_key, true );
    $sig = rawurlencode( base64_encode( $hash ) );
    return $sig;
}
</code></pre>

<p>Based on my understanding of Python and the information about hash-hmac and rawurlencoded from php2python.com, I wrote the following:</p>

<pre><code>import hmac, hashlib, urllib, base64
def calculate_signature(string, private_key):
    hash_var = hmac.new(private_key, string, hashlib.sha1).digest()
    sig = urllib.quote(base64.b64encode(hash_var))
    return sig
</code></pre>

<p>However, the two signatures are not equivalent, and thus Gravity Forms returns a HTTP 403: Bad Request response.</p>

<p>Am I missing something within my translation?</p>

<hr>

<p>Update (11/04/15)</p>

<p>I have now matched my php and python urls. However, I still receive a 403 error.</p>
","<p>The reason the php and python signatures did not match had nothing to do with their <code>calculate_signature()</code> methods.</p>

<p>The issue was caused by differing <code>expires</code> variables. Php used <code>strtotime(""+60 mins"")</code> which resulted in a UTC time 60 minutes from now. Whereas Python used <code>datetime.date.now() + timedelta(minutes=60)</code>. This is also 60 minutes from now, but in your current timezone.</p>

<p>I always want to calculate the <code>expire</code> variable in UTC so I replaced my Python calculation with <code>datetime.datetime.utcnow() + timedelta(minutes=60)</code>.</p>
","34814144","414","<php><python><urlencode><hmac><gravity-forms-plugin>","2","1","2","2016-01-15 15:13:02","34814144","2","1","2565651","","2015-11-04 13:58:19","2015-10-02 13:04:33","","","2016-01-15 15:13:02"
"48717976","Yobit api - Invalid Sign","<p>I'm trying to make a request to the Yobit api documented 
<a href=""https://yobit.net/en/api/#"" rel=""nofollow noreferrer"">here</a>. I am getting this as a response.</p>

<pre><code>""{\""success\"":0,\""error\"":\""invalid sign\""}""
</code></pre>

<p>I'm probably making a mistake in hashing the parameters as I don't have much experience with that, but it could be something else. Any help would be greatly appreciated. Thanks</p>

<pre><code>private async Task&lt;T&gt; CallPrivateApi&lt;T&gt;(PrivateApiCall call, IRequest requestData) where T: IResponse
{
  if (String.IsNullOrWhiteSpace(apiKey) || String.IsNullOrWhiteSpace(apiSecret))
    throw new ArgumentNullException(""Api Key and Secret are required for private api calls."");
  if (client == null)
    client = new HttpClient();
  var request = new HttpRequestMessage();
  request.Method = HttpMethod.Post;
  request.RequestUri = new Uri(String.Format(""{0}/"", PrivateUrl));

  var ts = DateTime.Now.Subtract(new DateTime(2018,1,1));
  string nonce = ((int)Math.Round(ts.TotalSeconds * 100)).ToString();

  string parameters = String.Format(""method={0}&amp;{1}&amp;nonce={2}"",call, RequestToString(requestData), nonce);
  request.Content = new StringContent(parameters, Encoding.UTF8, ""application/x-www-form-urlencoded"");
  request.Content.Headers.Add(""Key"", apiKey);

  using (var hmac = new HMACSHA512(Convert.FromBase64String(apiSecret)))
  {
    byte[] paramByte = Encoding.UTF8.GetBytes(parameters);
    string sign = Convert.ToString(hmac.ComputeHash(paramByte));
    request.Content.Headers.Add(""Sign"", sign);
  }

  var response = await client.SendAsync(request);
  if (response.IsSuccessStatusCode)
  {
    string json = Encoding.UTF8.GetString(response.Content.ReadAsByteArrayAsync().Result);
    return JsonConvert.DeserializeObject&lt;T&gt;(json);
  }
  else
  {
    return default(T);
  }
}
</code></pre>
","<p>You want to send your hashed string in the same format they use. Ty changing your using statement to this.</p>

<pre><code>  using(var hmac = new HMACSHA512(Encoding.UTF8.GetBytes(apiSecret)))
  {
    byte[] signHash = hmac.ComputeHash(Encoding.UTF8.GetBytes(parameters));
    string sign = BitConverter.ToString(signHash).ToLower().Replace(""-"", string.Empty);
    request.Content.Headers.Add(""Sign"", sign);
  }
</code></pre>
","48815740","412","<c#><api><.net-core><hmac>","1","1","2","2018-12-31 18:24:41","48815740","0","","47589","","2018-12-31 18:24:41","2018-02-10 06:34:37","","","2018-02-15 20:29:22"
"48717976","Yobit api - Invalid Sign","<p>I'm trying to make a request to the Yobit api documented 
<a href=""https://yobit.net/en/api/#"" rel=""nofollow noreferrer"">here</a>. I am getting this as a response.</p>

<pre><code>""{\""success\"":0,\""error\"":\""invalid sign\""}""
</code></pre>

<p>I'm probably making a mistake in hashing the parameters as I don't have much experience with that, but it could be something else. Any help would be greatly appreciated. Thanks</p>

<pre><code>private async Task&lt;T&gt; CallPrivateApi&lt;T&gt;(PrivateApiCall call, IRequest requestData) where T: IResponse
{
  if (String.IsNullOrWhiteSpace(apiKey) || String.IsNullOrWhiteSpace(apiSecret))
    throw new ArgumentNullException(""Api Key and Secret are required for private api calls."");
  if (client == null)
    client = new HttpClient();
  var request = new HttpRequestMessage();
  request.Method = HttpMethod.Post;
  request.RequestUri = new Uri(String.Format(""{0}/"", PrivateUrl));

  var ts = DateTime.Now.Subtract(new DateTime(2018,1,1));
  string nonce = ((int)Math.Round(ts.TotalSeconds * 100)).ToString();

  string parameters = String.Format(""method={0}&amp;{1}&amp;nonce={2}"",call, RequestToString(requestData), nonce);
  request.Content = new StringContent(parameters, Encoding.UTF8, ""application/x-www-form-urlencoded"");
  request.Content.Headers.Add(""Key"", apiKey);

  using (var hmac = new HMACSHA512(Convert.FromBase64String(apiSecret)))
  {
    byte[] paramByte = Encoding.UTF8.GetBytes(parameters);
    string sign = Convert.ToString(hmac.ComputeHash(paramByte));
    request.Content.Headers.Add(""Sign"", sign);
  }

  var response = await client.SendAsync(request);
  if (response.IsSuccessStatusCode)
  {
    string json = Encoding.UTF8.GetString(response.Content.ReadAsByteArrayAsync().Result);
    return JsonConvert.DeserializeObject&lt;T&gt;(json);
  }
  else
  {
    return default(T);
  }
}
</code></pre>
","<p>Everything works without problems.</p>

<pre><code>Dictionary&lt;string, string&gt; m = new Dictionary&lt;string, string&gt;();
m.Add(""method"", ""getInfo"");
m.Add(""nonce"", nonce.ToString());
var content = new FormUrlEncodedContent(m);
request.Content = content;
</code></pre>
","53990179","412","<c#><api><.net-core><hmac>","1","0","2","2018-12-31 18:24:41","48815740","0","","47589","","2018-12-31 18:24:41","2018-02-10 06:34:37","","","2018-12-31 17:59:58"
"33515969","Create HMAC SHA1 in C using pure linux crypto api","<p>I need to apply HMAC SHA1 on some scatterlists in a C program.
I have a sample code written for <strong>kernel 2.4</strong> hmac crypto api, that uses this function:</p>

<p><code>void crypto_hmac(struct crypto_tfm *tfm, u8 *key, unsigned int *keylen, struct scatterlist *sg, unsigned int nsg, u8 *out)</code></p>

<p>but the crypto API in <strong>kernel 3.13</strong> and after is SO MUCH DIFFERENT than 2.4!</p>

<p>I looked everywhere to find any example of using new strange minimalized function</p>

<pre><code>static int hmac_create(struct crypto_template *tmpl, struct rtattr **tb)
</code></pre>

<p>provided in <strong>hmac.c (source/crypto)</strong>, but I cannot find any topic or examples that uses kernel crypto api <strong>specificly</strong> <strong>hmac</strong> transform.</p>

<p>Any body has any experience using <strong>Linux Crypto API HMAC in C</strong>? Using this procedure will not be more than a few line of C codes.</p>
","","","408","<c><linux><hmac><cryptoapi>","4","","0","2015-11-04 08:21:38","","1","","5523375","","2015-11-04 08:21:38","2015-11-04 07:24:26","","",""
"16718042","Mandrill validation in ruby, lost in translation between php and ruby","<p>I'm trying to follow the steps Mandrill has outlined here <a href=""http://help.mandrill.com/entries/23704122-Authenticating-webhook-requests"" rel=""nofollow"">http://help.mandrill.com/entries/23704122-Authenticating-webhook-requests</a> in order to validate incoming requests. I've setup a test requestb.in with the url seen in the code. I want this method to return the mandrill signature, which in this case is H7Zky1B/GShKH4kuQcfUhNrQq+k= but instead it returns a different value each time. Where am I going wrong?</p>

<p>php code sample as provided by mandrill</p>

<pre><code>function generateSignature($webhook_key, $url, $params) {
    $signed_data = $url;
    ksort($params);
    foreach ($params as $key =&gt; $value) {
        $signed_data .= $key;
        $signed_data .= $value;
    }

    return base64_encode(hash_hmac('sha1', $signed_data, $webhook_key, true));
}
</code></pre>

<p>my ruby code </p>

<pre><code> def valid?(params)
    wh_key = ""Ny_lzk4zxENbNVezqECBxw""
    url = ""http://requestb.in/15wvu0y1""
    signed_data = url
    params.sort.each do |key, value|
      signed_data += (key.to_s + value.to_s)
    end
    digest = OpenSSL::Digest.new('sha1')
    Base64.encode64(""#{OpenSSL::HMAC.digest(digest,signed_data,wh_key)}"") 
  end
</code></pre>
","<p>You'll definitely need the full URL, including the <code>http://</code> at the beginning. It looks like the parameters you're passing in the second to last line may not be in the correct order.  This should work, though, assuming the parameters have already been form-decoded:</p>

<pre><code>def valid?(webhook_key, url, params, signature)
  data = url
  params.sort.each {|k,v| data = url + k + v}
  digest = OpenSSL::Digest::Digest.new('sha1')
  expected = Base64.encode64(OpenSSL::HMAC.digest(digest, webhook_key, data)).strip
  expected == signature
end 
</code></pre>
","17075365","406","<php><ruby><base64><hmac><mandrill>","0","1","2","2013-11-25 16:45:23","","1","1","","","","2013-05-23 15:30:10","","","2013-06-12 21:06:07"
"16718042","Mandrill validation in ruby, lost in translation between php and ruby","<p>I'm trying to follow the steps Mandrill has outlined here <a href=""http://help.mandrill.com/entries/23704122-Authenticating-webhook-requests"" rel=""nofollow"">http://help.mandrill.com/entries/23704122-Authenticating-webhook-requests</a> in order to validate incoming requests. I've setup a test requestb.in with the url seen in the code. I want this method to return the mandrill signature, which in this case is H7Zky1B/GShKH4kuQcfUhNrQq+k= but instead it returns a different value each time. Where am I going wrong?</p>

<p>php code sample as provided by mandrill</p>

<pre><code>function generateSignature($webhook_key, $url, $params) {
    $signed_data = $url;
    ksort($params);
    foreach ($params as $key =&gt; $value) {
        $signed_data .= $key;
        $signed_data .= $value;
    }

    return base64_encode(hash_hmac('sha1', $signed_data, $webhook_key, true));
}
</code></pre>

<p>my ruby code </p>

<pre><code> def valid?(params)
    wh_key = ""Ny_lzk4zxENbNVezqECBxw""
    url = ""http://requestb.in/15wvu0y1""
    signed_data = url
    params.sort.each do |key, value|
      signed_data += (key.to_s + value.to_s)
    end
    digest = OpenSSL::Digest.new('sha1')
    Base64.encode64(""#{OpenSSL::HMAC.digest(digest,signed_data,wh_key)}"") 
  end
</code></pre>
","<p>This worked for me: </p>

<pre><code>data = ""http://my_awesome.com/api/webhook_action""

request.POST.sort_by { |key, value| key.to_i }.each do |key,value|

    data += key.to_s.strip
    data += value.to_s.strip

end

digest = OpenSSL::Digest::Digest.new('sha1')
expected = Base64.encode64(""#{OpenSSL::HMAC.digest(digest,test_key, data)}"").strip
</code></pre>

<p>The strip methods might be overkill though.</p>
","20198484","406","<php><ruby><base64><hmac><mandrill>","0","1","2","2013-11-25 16:45:23","","1","1","","","","2013-05-23 15:30:10","","","2013-11-25 16:45:23"
"49396064","AttributeError: HMAC instance has no attribute '__len__' python","<p>currently working on signing a signature for AWS s3. on my last hash where I compute the signature I am getting the following error: </p>

<pre><code> signature = hmac.new(signingkey, policy, hashlib.sha256).digest()
  File ""/usr/lib/python2.7/hmac.py"", line 136, in new
    return HMAC(key, msg, digestmod)
  File ""/usr/lib/python2.7/hmac.py"", line 71, in __init__
    if len(key) &gt; blocksize:
AttributeError: HMAC instance has no attribute '__len__'
</code></pre>

<p>the code: </p>

<pre><code>datekey = hmac.new(str(""AWS4"") + AWS_UPLOAD_SECRET_KEY,stringdate , hashlib.sha256).digest()
            dateregionkey = hmac.new(datekey, AWS_UPLOAD_REGION, hashlib.sha256).digest()
            dateregionservicekey = hmac.new(dateregionkey,""s3"", hashlib.sha256).digest()
            signingkey = hmac.new(dateregionservicekey, ""aws4_request"")
            signature = hmac.new(signingkey, policy, hashlib.sha256).digest()
</code></pre>

<p>any ideas of what is causing this? Always something like this in coding. we get nothing for free -_-</p>
","<pre><code>signingkey = hmac.new(dateregionservicekey, ""aws4_request"").digest()
</code></pre>

<p>otherwise <strong>signingkey</strong>  is a hmac object</p>
","49396188","404","<amazon-s3><hex><sha256><hmac><attributeerror>","0","0","1","2018-03-21 00:16:14","49396188","0","","","","","2018-03-21 00:02:16","","","2018-03-21 00:16:14"
"38684174","gocardless PHP hmac signature not match","<p>I'm working with gocardless hooks , and i'm stuck on validating hmac signature with sandbox environment.</p>

<p>So I generated webhook test in sandbox and it gives to me the request body and headers as it has sent.</p>

<p>So as far as i understand , i must get the request body and generate a hash with secret key , and compare it with the webhook signature header hash ( not sounds really complicated ) .</p>

<p>So i'm using postman to reproduce it in my local environment, attaching the equal headers and the same body , but signature never match.</p>

<p>Here is what i tried : </p>

<pre><code> $signature = hash_hmac('sha256',$request-&gt;getContent(), 'secret');
</code></pre>

<p>Notice i'm using laravel framework , so my first thinking was maybe the framework is manipulating internally the request , so i tried this : </p>

<pre><code> $request_data = file_get_contents('php://input');
 $signature = hash_hmac('sha256',$request_data, 'secret');
</code></pre>

<p>But still doesn't match , i noticed meany new lines and maybe this could modify the results so i cleaned it ...</p>

<pre><code> $request_data = str_replace(array('.', ' ', ""\n"", ""\t"", ""\r""), '', $request_data);
</code></pre>

<p>But still not match , and also i tried to cast body data in utf8 , and making hmac returning raw and encoding it in base64 ... but no success. </p>

<p>So what can be wrong here? Maybe signatures not working in sandbox environment? Has anyone dealed with it ?</p>

<p>Thank's in advance!</p>
","<p>Finally i found the issue , in the sandbox panel in goocardless they show the request <strong>unminified</strong> , so the length is different , just minify it and you will be able to test ! and now signatures matches!</p>
","38684328","401","<php><sandbox><signature><hmac><gocardless>","1","2","2","2016-09-21 13:11:44","","0","","","","","2016-07-31 12:53:27","","","2016-07-31 13:12:05"
"38684174","gocardless PHP hmac signature not match","<p>I'm working with gocardless hooks , and i'm stuck on validating hmac signature with sandbox environment.</p>

<p>So I generated webhook test in sandbox and it gives to me the request body and headers as it has sent.</p>

<p>So as far as i understand , i must get the request body and generate a hash with secret key , and compare it with the webhook signature header hash ( not sounds really complicated ) .</p>

<p>So i'm using postman to reproduce it in my local environment, attaching the equal headers and the same body , but signature never match.</p>

<p>Here is what i tried : </p>

<pre><code> $signature = hash_hmac('sha256',$request-&gt;getContent(), 'secret');
</code></pre>

<p>Notice i'm using laravel framework , so my first thinking was maybe the framework is manipulating internally the request , so i tried this : </p>

<pre><code> $request_data = file_get_contents('php://input');
 $signature = hash_hmac('sha256',$request_data, 'secret');
</code></pre>

<p>But still doesn't match , i noticed meany new lines and maybe this could modify the results so i cleaned it ...</p>

<pre><code> $request_data = str_replace(array('.', ' ', ""\n"", ""\t"", ""\r""), '', $request_data);
</code></pre>

<p>But still not match , and also i tried to cast body data in utf8 , and making hmac returning raw and encoding it in base64 ... but no success. </p>

<p>So what can be wrong here? Maybe signatures not working in sandbox environment? Has anyone dealed with it ?</p>

<p>Thank's in advance!</p>
","<p>We've updated our developer documentation and you can find an example of verifying webhook signature over at <a href=""https://developer.gocardless.com/getting-started/api/staying-up-to-date-with-webhooks/?lang=php#building-a-webhook-handler"" rel=""nofollow"">https://developer.gocardless.com/getting-started/api/staying-up-to-date-with-webhooks/?lang=php#building-a-webhook-handler</a></p>

<p>You want to do something like</p>

<pre><code>&lt;?php
// We recommend storing your webhook endpoint secret in an environment variable
// for security, but you could include it as a string directly in your code
$token = getenv(""GC_WEBHOOK_SECRET"");

$raw_payload = file_get_contents('php://input');

$headers = getallheaders();
$provided_signature = $headers[""Webhook-Signature""];

$calculated_signature = hash_hmac(""sha256"", $raw_payload, $token);

if ($provided_signature == $calculated_signature) {
  // Process the events

  header(""HTTP/1.1 200 OK"");
} else {
  header(""HTTP/1.1 498 Invalid Token"");
}
</code></pre>
","39534254","401","<php><sandbox><signature><hmac><gocardless>","1","1","2","2016-09-21 13:11:44","","0","","","","","2016-07-31 12:53:27","","2016-09-21 13:11:44","2016-09-16 14:42:52"
"42741071","HMAC for request body does match in Node.js","<p>I am building some RESTful APIs using node.js. I am new to node.js. I literally started 2 days ago. Here is what I am try to do.</p>

<p>Sending the following request using postman.</p>

<pre><code>POST /register HTTP/1.1
Host: localhost:3000
Content-Type: application/json
Authorization: 415952c44ac7de13f01cdf46bac5e590f29ff12211054e16f71098ca8909652b
Cache-Control: no-cache
Postman-Token: 26087979-05c0-1d75-8822-41809272ef46

{
    ""email"":""a@abc.com"", 
    ""name"": ""abc xyz""
}
</code></pre>

<p>The value for Authorization header is computed HMACSHA256 for the request body. For testing, I used <a href=""http://www.freeformatter.com/hmac-generator.html"" rel=""nofollow noreferrer"">http://www.freeformatter.com/hmac-generator.html</a> to compute HMACSHA256 and I made sure that I am using the same secret key to compute hmac.</p>

<p>In Node.js I am using the same request body to compute the HMACSHA256 using the following code</p>

<pre><code>app.use(bodyParser.json({
    verify: function (req, res, buf, encoding) {
        console.log('json encoding: ', encoding);
        var hmac = crypto.createHmac('sha256', 'a secret');
        hmac.update(buf.toString());
        req.hasha = hmac.digest('hex');
        console.log(""hmac: "", req.hasha);

        // get rawBody
        req.rawBody = buf.toString();
        console.log(req.rawBody);

    }
}));
</code></pre>

<p>The problem is, that gives me wrong HMACSHA256 value. It feels like something is being modified before I process the buffer. I am not sure what am I doing wrong or if there is a better way of doing it.</p>
","","","398","<javascript><node.js><express><hmac>","0","","0","2017-03-12 02:06:33","","2","","1484831","","2017-03-12 02:06:33","2017-03-11 21:50:27","","",""
"18262088","""undefined: hmac.Equal"" error while hmac.New in the line before this works fine","<p>I am developing a web server in go,<br>
at the top I have     </p>

<pre><code>import (""net/http""
    ""log""
    ""fmt""
    ""encoding/json""
    ""encoding/hex""
    ""time""
    ""math/rand""
    ""crypto/sha256""
    ""crypto/hmac""
    ""strconv""
    ""strings""
    ""github.com/crowdmob/goamz/aws""
    ""github.com/crowdmob/goamz/dynamodb""
)
</code></pre>

<p>later I have    </p>

<pre><code>func singSomething(someid string) string {
mac := hmac.New(sha256.New, key)
    mac.Write([]byte(id))
    b := mac.Sum(nil)
return hex.EncodeToString(b)
}

func validateSignature(id, signature string) bool {
mac := hmac.New(sha256.New, key)
    mac.Write([]byte(id))
    expectedMAC := mac.Sum(nil)
    signatureMAC, err := hex.DecodeString(signature)
    if err != nil {
    fmt.Println(""PROBLEM IN DECODING HUH!"")
    return false
    }
return hmac.Equal(expectedMAC,signatureMAC)
</code></pre>

<p>}</p>

<p>I get this error when I issue <code>go run CSServer</code><br>
 <code>/CSServer.go:54: undefined: hmac.Equal</code></p>

<p>Why? What is going on? How come <code>hmac.New</code> is fine but <code>hmac.Equals</code> is not?</p>
","<p>Please post minimal, but complete programs when asking. Without that, the only thing I can provide is an example which compiles w/o trouble, ie. the undefined <code>hmac.Equal</code> doesn't demonstrate. There must be some problem elsewhere in the code you didn't show.</p>

<pre><code>package main

import (
        ""crypto/hmac""
        ""crypto/sha256""
        ""encoding/hex""
        ""fmt""
)

func singSomething(someid string) string {
        mac := hmac.New(sha256.New, []byte{})
        mac.Write([]byte(someid))
        b := mac.Sum(nil)
        return hex.EncodeToString(b)
}

func validateSignature(id, signature string) bool {
        mac := hmac.New(sha256.New, []byte{})
        mac.Write([]byte(id))
        expectedMAC := mac.Sum(nil)
        signatureMAC, err := hex.DecodeString(signature)
        if err != nil {
                fmt.Println(""PROBLEM IN DECODING HUH!"")
                return false
        }
        return hmac.Equal(expectedMAC, signatureMAC)
}

func main() {}
</code></pre>

<p><a href=""http://play.golang.org/p/SAf6DNS1cT"" rel=""nofollow"">Playground</a></p>
","18262273","398","<go><hmac>","0","0","2","2013-08-16 00:44:16","18264124","0","","","","","2013-08-15 21:21:16","","","2013-08-15 21:35:08"
"18262088","""undefined: hmac.Equal"" error while hmac.New in the line before this works fine","<p>I am developing a web server in go,<br>
at the top I have     </p>

<pre><code>import (""net/http""
    ""log""
    ""fmt""
    ""encoding/json""
    ""encoding/hex""
    ""time""
    ""math/rand""
    ""crypto/sha256""
    ""crypto/hmac""
    ""strconv""
    ""strings""
    ""github.com/crowdmob/goamz/aws""
    ""github.com/crowdmob/goamz/dynamodb""
)
</code></pre>

<p>later I have    </p>

<pre><code>func singSomething(someid string) string {
mac := hmac.New(sha256.New, key)
    mac.Write([]byte(id))
    b := mac.Sum(nil)
return hex.EncodeToString(b)
}

func validateSignature(id, signature string) bool {
mac := hmac.New(sha256.New, key)
    mac.Write([]byte(id))
    expectedMAC := mac.Sum(nil)
    signatureMAC, err := hex.DecodeString(signature)
    if err != nil {
    fmt.Println(""PROBLEM IN DECODING HUH!"")
    return false
    }
return hmac.Equal(expectedMAC,signatureMAC)
</code></pre>

<p>}</p>

<p>I get this error when I issue <code>go run CSServer</code><br>
 <code>/CSServer.go:54: undefined: hmac.Equal</code></p>

<p>Why? What is going on? How come <code>hmac.New</code> is fine but <code>hmac.Equals</code> is not?</p>
","<p>Don't know what the problem was,<br>
but after striping down the code and puting it in play.golang.org and seeing that it works fine there bun not on my machine, I checked and the my version, it was <code>go1.0.3</code> I installed the latest <code>go1.1.2 darwin/amd64</code> and problem solved, very weird.</p>
","18264124","398","<go><hmac>","0","0","2","2013-08-16 00:44:16","18264124","0","","","","","2013-08-15 21:21:16","","","2013-08-16 00:44:16"
"20552318","HMAC SHA 384 on iOS","<p>My code looks like this (using CommonCrypto/CommonHMAC.h):</p>

<pre><code>- (NSString*) preperingCryptedData: (NSString*) data withKey: (NSString*) key {

    NSData* dataToHash = [data dataUsingEncoding:NSUTF8StringEncoding];

    NSData* keyData = [key dataUsingEncoding:NSUTF8StringEncoding];

    NSLog(@""Utility: preperingCryptedData - Data to Crypt: %@ and key %@\n...\n...\n...\n"",dataToHash,keyData);

    NSMutableData *dataHash = [NSMutableData dataWithLength:CC_SHA384_DIGEST_LENGTH];

    CCHmac(kCCHmacAlgSHA384, keyData.bytes, keyData.length, dataToHash.bytes, dataToHash.length, dataHash.mutableBytes);

    NSString* readyString = [[NSString alloc] initWithData:dataToHash encoding:NSUTF8StringEncoding];

    NSLog(@""Utility: preperingCryptedData call, result :%@\n...\n...\n...\n"",readyString);

    return readyString;
}
</code></pre>

<p>When I used code from: <a href=""https://stackoverflow.com/questions/6444507/using-commoncrypto-commonhmac-to-encrypt-some-data-and-always-comes-back-null"">Here</a> I got my string decoded without the Key. What am I doing wrong? How it's possible to encode message without the key?</p>
","<p>There are two problem with the code:</p>

<p>1) You are using <code>dataToHash</code> as the output instead of <code>dataHash</code>.</p>

<p>2) <code>dataHash</code> is not a UTF8 data representation so it can not be successfully converted into a <code>NSString</code>.</p>
","20703251","397","<ios><objective-c><hmac>","1","5","2","2017-09-13 08:25:40","20703251","0","","-1","","2017-05-23 10:32:18","2013-12-12 19:21:29","","","2013-12-20 12:02:53"
"20552318","HMAC SHA 384 on iOS","<p>My code looks like this (using CommonCrypto/CommonHMAC.h):</p>

<pre><code>- (NSString*) preperingCryptedData: (NSString*) data withKey: (NSString*) key {

    NSData* dataToHash = [data dataUsingEncoding:NSUTF8StringEncoding];

    NSData* keyData = [key dataUsingEncoding:NSUTF8StringEncoding];

    NSLog(@""Utility: preperingCryptedData - Data to Crypt: %@ and key %@\n...\n...\n...\n"",dataToHash,keyData);

    NSMutableData *dataHash = [NSMutableData dataWithLength:CC_SHA384_DIGEST_LENGTH];

    CCHmac(kCCHmacAlgSHA384, keyData.bytes, keyData.length, dataToHash.bytes, dataToHash.length, dataHash.mutableBytes);

    NSString* readyString = [[NSString alloc] initWithData:dataToHash encoding:NSUTF8StringEncoding];

    NSLog(@""Utility: preperingCryptedData call, result :%@\n...\n...\n...\n"",readyString);

    return readyString;
}
</code></pre>

<p>When I used code from: <a href=""https://stackoverflow.com/questions/6444507/using-commoncrypto-commonhmac-to-encrypt-some-data-and-always-comes-back-null"">Here</a> I got my string decoded without the Key. What am I doing wrong? How it's possible to encode message without the key?</p>
","<p>Agree with the accepted answer. Provide working code.</p>

<pre><code> - (NSString *)sha384:(NSString*)data withKey:(NSString *)key {

    NSData* dataToHash = [data dataUsingEncoding:NSUTF8StringEncoding];
    NSData* keyData = [key dataUsingEncoding:NSUTF8StringEncoding];

    unsigned char digest[CC_SHA384_DIGEST_LENGTH];

    CCHmac(kCCHmacAlgSHA384, keyData.bytes, keyData.length, dataToHash.bytes, dataToHash.length, digest);

    NSString *sha384Str;
    NSMutableString *output = [NSMutableString stringWithCapacity:CC_SHA384_DIGEST_LENGTH * 2];
    for(int i = 0; i &lt; CC_SHA384_DIGEST_LENGTH; i++)
        [output appendFormat:@""%02x"", digest[i]];
    sha384Str = output;
    return sha384Str;
}
</code></pre>
","46192533","397","<ios><objective-c><hmac>","1","0","2","2017-09-13 08:25:40","20703251","0","","-1","","2017-05-23 10:32:18","2013-12-12 19:21:29","","","2017-09-13 08:25:40"
"34209823","Verifying Trello Webhook signature","

<p>I am having trouble successfully verifying a webhook request from Trello. Here's what I know.</p>

<p>Trello's webhook documentation <a href=""https://developers.trello.com/apis/webhooks"" rel=""nofollow"">here</a> states:</p>

<blockquote>
  <p>Each webhook trigger contains the HTTP header X-Trello-Webhook. The header is a base64 digest of an HMAC-SHA1 hash. The hashed content is the concatenation of the full request body and the callbackURL exactly as it was provided during webhook creation. The key used to sign this text is your application’s secret.</p>
</blockquote>

<p>Which is understandable. They go on to say</p>

<blockquote>
  <p>Because of certain defaults in the crypto utilities in node, the payloads that we sign are treated as binary strings, not utf-8. For example, if you take the en-dash character (U+2013 or 8211 in decimal), and create a binary buffer out of it in Node, it will show up as a buffer of [19], which are the 8 least significant bits of 8211. That is the value that is being used in the digest to compute the SHA-1.</p>
</blockquote>

<p>This is less clear to me. My understanding is that each character of the payload (body + callbackURL) has been put into an 8-bit integer, with the overflow ignored. (Because 8211 == 0b10000000010011, and 0b00010011 == 19) This is where I think my problem is.</p>

<p>The function I am using to accommodate Trello's node payload issue is:</p>

<pre class=""lang-go prettyprint-override""><code>func bitShift(s string) []byte {
    var byteString []byte

    // For each rune in the string
    for _, c := range s {

        // Create a byte slice
        b := []byte(string(c))

        // Take the sign off the least significant byte
        tmp := b[len(b)-1] &lt;&lt; 1
        tmp = tmp &gt;&gt; 1

        // Append it to the byte string
        byteString = append(byteString, tmp)
    }
    return byteString
}
</code></pre>

<p>It is also very possible that I am doing something wrong with the basic verification step. It looks okay to me, though I am somewhat new to this.</p>

<pre class=""lang-go prettyprint-override""><code>// VerifyNotificationHeader ...
func VerifyNotificationHeader(signedHeader, trelloAPISecret string, requestURL *url.URL, body []byte) bool {

    // Put callbackURL and body into byte slice
    urlBytes := bitShift(requestURL.String())
    bitBody := bitShift(string(body))

    // Sign, hash, and encode the payload
    secret := []byte(trelloAPISecret)
    keyHMAC := hmac.New(sha1.New, secret)
    keyHMAC.Write(append(bitBody, urlBytes...))
    signedHMAC := keyHMAC.Sum(nil)
    base64signedHMAC := base64.StdEncoding.EncodeToString(signedHMAC)

    if comp := strings.EqualFold(base64signedHMAC, signedHeader); !comp {
        return false
    }
    return true
}
</code></pre>

<p>Let me know if you need any more information. Thank you!</p>

<p><strong>Update</strong>: This is solved, check out the answers.</p>
","<p>Why are you throwing away the MSB? You're converting each <code>rune</code> to <code>byte</code>, which is signless (and actually an alias for <code>uint8</code>), so that bit holds information that you're losing. </p>

<p>You might consider using a function like this instead:
</p>

<pre><code>func ascii(s string) []byte {
    var ret []byte
    for _, r := range s {
        ret = append(ret, byte(r))
    }
    return ret
}
</code></pre>

<p>Since <code>rune</code> is an alias for <code>int32</code>, the cast to <code>byte</code> just drops the top 24 bits, which is what you want.</p>

<p>(Caveat: this assumes little-endianness.)</p>
","34215799","396","<security><go><hmac><trello><hmacsha1>","4","2","2","2015-12-11 08:23:12","34215799","2","","4006407","","2015-12-11 08:18:17","2015-12-10 19:10:27","","2015-12-11 04:25:47","2015-12-11 03:49:15"
"34209823","Verifying Trello Webhook signature","

<p>I am having trouble successfully verifying a webhook request from Trello. Here's what I know.</p>

<p>Trello's webhook documentation <a href=""https://developers.trello.com/apis/webhooks"" rel=""nofollow"">here</a> states:</p>

<blockquote>
  <p>Each webhook trigger contains the HTTP header X-Trello-Webhook. The header is a base64 digest of an HMAC-SHA1 hash. The hashed content is the concatenation of the full request body and the callbackURL exactly as it was provided during webhook creation. The key used to sign this text is your application’s secret.</p>
</blockquote>

<p>Which is understandable. They go on to say</p>

<blockquote>
  <p>Because of certain defaults in the crypto utilities in node, the payloads that we sign are treated as binary strings, not utf-8. For example, if you take the en-dash character (U+2013 or 8211 in decimal), and create a binary buffer out of it in Node, it will show up as a buffer of [19], which are the 8 least significant bits of 8211. That is the value that is being used in the digest to compute the SHA-1.</p>
</blockquote>

<p>This is less clear to me. My understanding is that each character of the payload (body + callbackURL) has been put into an 8-bit integer, with the overflow ignored. (Because 8211 == 0b10000000010011, and 0b00010011 == 19) This is where I think my problem is.</p>

<p>The function I am using to accommodate Trello's node payload issue is:</p>

<pre class=""lang-go prettyprint-override""><code>func bitShift(s string) []byte {
    var byteString []byte

    // For each rune in the string
    for _, c := range s {

        // Create a byte slice
        b := []byte(string(c))

        // Take the sign off the least significant byte
        tmp := b[len(b)-1] &lt;&lt; 1
        tmp = tmp &gt;&gt; 1

        // Append it to the byte string
        byteString = append(byteString, tmp)
    }
    return byteString
}
</code></pre>

<p>It is also very possible that I am doing something wrong with the basic verification step. It looks okay to me, though I am somewhat new to this.</p>

<pre class=""lang-go prettyprint-override""><code>// VerifyNotificationHeader ...
func VerifyNotificationHeader(signedHeader, trelloAPISecret string, requestURL *url.URL, body []byte) bool {

    // Put callbackURL and body into byte slice
    urlBytes := bitShift(requestURL.String())
    bitBody := bitShift(string(body))

    // Sign, hash, and encode the payload
    secret := []byte(trelloAPISecret)
    keyHMAC := hmac.New(sha1.New, secret)
    keyHMAC.Write(append(bitBody, urlBytes...))
    signedHMAC := keyHMAC.Sum(nil)
    base64signedHMAC := base64.StdEncoding.EncodeToString(signedHMAC)

    if comp := strings.EqualFold(base64signedHMAC, signedHeader); !comp {
        return false
    }
    return true
}
</code></pre>

<p>Let me know if you need any more information. Thank you!</p>

<p><strong>Update</strong>: This is solved, check out the answers.</p>
","<p>There were two problems with my code. The major issue was my use of <code>requestURL.String()</code> for the <code>callbackURL</code>. </p>

<p>In the <a href=""https://golang.org/pkg/net/http/#Request"" rel=""nofollow noreferrer"">comments</a> above <code>http.Request.URL</code>: </p>

<blockquote>
  <p>For most requests, fields other than Path and RawQuery will be empty.</p>
</blockquote>

<p>It turned out that <code>requestURL.String()</code> was only giving the <code>[Path]</code> portion of <code>[Scheme]://[Host][Path]</code>. The correct callbackURL is </p>

<pre><code>callbackURL := ""https://"" + request.Host + request.URL.String()
</code></pre>

<p>The second problem was pointed out in <a href=""https://stackoverflow.com/a/34215799/4006407"">this answer</a>, where the verification would have failed for any request whose body contained 8th-bit-having characters. </p>
","34218892","396","<security><go><hmac><trello><hmacsha1>","4","1","2","2015-12-11 08:23:12","34215799","2","","4006407","","2015-12-11 08:18:17","2015-12-10 19:10:27","","2017-05-23 12:23:12","2015-12-11 08:16:43"
"24340171","HMAC signing of response","<p>I'm implementing HMAC hashing of incoming messages to my REST Api. The HMAC hash is set in the Authorization header of the request in the form: Authorization: [Scheme] [Hash]</p>

<p>I also want to sign the response. What header is most suitable to place the response hash in?</p>
","","","394","<api><http><hmac>","1","","0","2014-06-21 09:25:12","","8","","842077","","2014-06-21 09:25:12","2014-06-21 09:16:43","","",""
"12151447","tips on hmac function, for login","<p>Hi all i am working on putting together a new login system for my database which will hopeful be more secure than my old  md5 password encryption page.. 
i am just wondering if i could get some tips on this bit of code i am going to be going to use for it... mainly if there are anythings i can or should do to improve the security on this part... Many thanks...</p>

<pre><code>$sql=""SELECT * FROM `users` WHERE username='$user'"";
$result=mysql_query($sql);


while($rows=mysql_fetch_array($result)){
$salt=$rows['salt'];
$site_key=$rows['site_key'];
}

      function hash_password($salt,$pass,$site_key) {
  global $site_key;
  return hash_hmac('sha512',$pass . $salt, $site_key);
}
$password=hash_password();
$hashed= mysql_real_escape_string($password);
</code></pre>
","<p>I hope <code>$user</code> has been escaped? Anyway, switch to PDO or MySQLi instead of using <code>mysql_</code>.</p>

<p>As for hashing passwords, don't just use SHA-512 or something like that; those can be computed too quickly. I would recommend bcrypt:</p>

<pre><code>function hash_password($password, $salt) {
    return crypt($password, '$2y$11$' . $salt);
}
</code></pre>
","12151461","394","<php><mysql><security><login><hmac>","0","0","2","2012-08-28 00:54:09","","4","","","","","2012-08-28 00:50:16","","","2012-08-28 00:53:56"
"12151447","tips on hmac function, for login","<p>Hi all i am working on putting together a new login system for my database which will hopeful be more secure than my old  md5 password encryption page.. 
i am just wondering if i could get some tips on this bit of code i am going to be going to use for it... mainly if there are anythings i can or should do to improve the security on this part... Many thanks...</p>

<pre><code>$sql=""SELECT * FROM `users` WHERE username='$user'"";
$result=mysql_query($sql);


while($rows=mysql_fetch_array($result)){
$salt=$rows['salt'];
$site_key=$rows['site_key'];
}

      function hash_password($salt,$pass,$site_key) {
  global $site_key;
  return hash_hmac('sha512',$pass . $salt, $site_key);
}
$password=hash_password();
$hashed= mysql_real_escape_string($password);
</code></pre>
","<p><code>$sql=""SELECT * FROM</code>users<code>WHERE username='$user'"";</code> This part is open to SQL injection. Use something like PDO or MySQLi</p>
","12151462","394","<php><mysql><security><login><hmac>","0","0","2","2012-08-28 00:54:09","","4","","","","","2012-08-28 00:50:16","","","2012-08-28 00:54:09"
"41495739","Generating HMAC-rsa256 Signature in C# from a Python sample","<p>I've been trying to generate HMAC-rsa256 signature using three parameters; a Unix timestamp in seconds, an API Key and an API Secret, in C#.Net for authentication in a spesific style, but couldn't manage to reverse-engineer the steps from an example code in Python.</p>

<p><strong>The Python code I'm trying to dechiper the steps from is:</strong></p>

<pre><code>import hmac
import hashlib
import datetime
import json

def create_signature_Py27(key, secret):  # (string key, string secret) 
    timestamp = int(datetime.datetime.now().timestamp())  # UNIX timestamp in seconds
    string = ""{}{}"".format(timestamp, key)
    return hmac.new(secret, string, hashlib.sha256).hexdigest()

# Python 2.7 - 3.5+ 
# Note: latest versions of hmac lib requires 'secret' and 'string' as byte strings but not unicode
#
def create_signature(key, secret):  # (string key, string secret) 
    timestamp = int(datetime.datetime.now().timestamp())  # UNIX timestamp in seconds
    string = ""{}{}"".format(timestamp, key)
    return timestamp, hmac.new(secret.encode(), string.encode(), hashlib.sha256).hexdigest()

def auth_request(key, secret):
    timestamp, signature = create_signature(key, secret)
    return json.dumps({'e': 'auth',
        'auth': {'key': key, 'signature': signature, 'timestamp': timestamp,}, 'oid': 'auth', })

auth_request = auth_request('1WZbtMTbMbo2NsW12vOz9IuPM', '1IuUeW4IEWatK87zBTENHj1T17s'):
</code></pre>

<p><strong>What I've tried so far:</strong></p>

<pre><code>       public static string TEST(string timestamp4, string apikey1, string apisecret1)
       {


           HMACSHA256 hmc1 = new HMACSHA256(Encoding.ASCII.GetBytes(apisecret1));
           string mes = timestamp4 + apikey1;
           MessageBox.Show(mes);

           byte[] hmres1 = hmc1.ComputeHash(Encoding.ASCII.GetBytes(mes));
           string hex1 = BitConverter.ToString(hmres1).Replace(""-"", string.Empty);
           string b641 = Convert.ToBase64String(hmres1).Replace(""="", """");
           MessageBox.Show(b641, ""b64"");
           return b641;                   // THIS TEST SIGNITURE RETURNS SOMETHING LIKE ""asdaefcdvcxv/sdfdsfsd/fsd"" , WHERE DOES THE ""/"" COMES FROM?
                                         //TIMESTAMP RETURNS WRONG VALUE WHICH THEN FEED INTO SIGNITURE FUNCTION- GIVING INVALID SIGNITURE( but its unix timestamp in sec's whish is expected)
}
</code></pre>

<p>But with this, I cannot re-generate the correct sample signature. The Sample Apikey,Secret,timestamp and their product signature:</p>

<ul>
<li><p><strong>apiSecret</strong>    1IuUeW4IEWatK87zBTENHj1T17s</p></li>
<li><p><strong>timestamp</strong>    1448034533</p></li>
<li><p><strong>apiKey</strong>   1WZbtMTbMbo2NsW12vOz9IuPM</p></li>
<li><p><strong>signature</strong>    <em>7d581adb01ad22f1ed38e1159a7f08ac5d83906ae1a42fe17e7d977786fe9694</em></p></li>
</ul>

<p>Instead, the signature I end up with is:</p>

<ul>
<li><strong>Generated Signature</strong> 3EHLmGeh0jK9vRLgh/0j5LgQU6h/nijzj4G9KBBjv10</li>
</ul>

<p>I have tried to feed the parameters one by one to the encryption function but that didn't go well.</p>

<p>When I use the <em>real function</em> to generate a signature with the real Api Key and Secret and realtime timestamp, the returned message from the server shows that timestamp is incorrect(but I couldn't see any problem), and that is also feed into the signature, which could have been solely due to the incorrect timestamp but even with the provided sample ApiKey and Secret, <em>the test function</em> generates entirely different structure.(with ""/"" in it and shorter)</p>

<p>There is no problem so far with the Json request function, but, just in case, this is what it should look like(the signature given her differs from the above):</p>

<p><strong>{
    ""e"": ""auth"",
    ""auth"": {
        ""key"": ""1WZbtMTbMbo2NsW12vOz9IuPM."",
        ""signature"": ""02483c01efc26fac843dd34d0342d269bacf4daa906a32cb71806eb7467dcf58"",
        ""timestamp"": 1448034533
    }
}</strong></p>

<p>I apologize in advance if I missed any existing topics explaining this problem, and I'd greatly appreciate if someone could shed some light on this issue.</p>
","<p>Your method returns the base64 representation of the signature.</p>

<p>If you return <code>hex1</code> instead, you get the expected result in upper case. If you want lower case letters, return <code>hex1.ToLower();</code></p>
","41496517","390","<c#><python><signature><hmac>","0","0","1","2017-01-05 23:27:49","41496517","0","","","","","2017-01-05 22:18:32","","","2017-01-05 23:27:49"
"38253904","Python and Java MAC SHA256 encoding generating VERY SIMILAR KEY","<p>I'm creating a signed request (<code>SHA256</code> and <code>base64</code>) using <code>Java</code> and validating this request in <code>Python</code>. The keys that I generated are <strong>really similar</strong>:</p>

<p>Java:</p>

<pre><code>UjuGTll3GF7H8MHWyJc41NAEcd-OZOeJLT9PiAevcsw
</code></pre>

<p>Python :</p>

<pre><code>UjuGTll3GF7H8MHWyJc41NAEcd+OZOeJLT9PiAevcsw
</code></pre>

<p>The only diference happens with char <code>+</code> and char <code>-</code>. I cannot change the java code because I don't have access to it, I only know that it uses <code>javax.crypto.Mac</code>. However, my python code is:</p>

<pre><code>import hmac
import hashlib
hmac.new(api_secret, url, hashlib.sha256).digest().encode('base64')
</code></pre>

<p>The variables <code>api_secret</code> and <code>url</code> have the same input in both languages (<code>Java</code> and <code>Python</code>)</p>

<p>What am I missing?</p>
","<p><code>digest()</code> returns a string, so <code>encode</code> is just the <a href=""https://docs.python.org/2/library/stdtypes.html#str.encode"" rel=""nofollow"">standard <code>encode</code> method</a>. According to the list of <a href=""https://docs.python.org/2/library/codecs.html#standard-encodings"" rel=""nofollow"">standard encodings</a>, specifying <code>base64</code> as the encoding means that <a href=""https://docs.python.org/2/library/base64.html#base64.encodestring"" rel=""nofollow""><code>base64.encodestring</code></a> will be used. The alphabet used by that function includes <code>+</code> and <code>/</code>, which are the last two characters in the standard Base64 alphabet:</p>

<pre><code>&gt;&gt;&gt; base64.encodestring(chr(248))
'+A==\n'
</code></pre>

<p>If you want an encoded string that uses <code>-</code> and <code>_</code> instead of <code>+</code> and <code>/</code>, you need to use <a href=""https://docs.python.org/2/library/base64.html#base64.urlsafe_b64encode"" rel=""nofollow""><code>base64.urlsafe_b64encode</code></a>:</p>

<pre><code>&gt;&gt;&gt; base64.urlsafe_b64encode(chr(248))
'-A=='
</code></pre>

<p>So you'd need to do something like:</p>

<pre><code>base64.urlsafe_b64encode(hmac.new(api_secret, url, hashlib.sha256).digest())
</code></pre>

<p>For this to work, though, you need to check that the Java code is also producing <code>_</code> instead of <code>/</code>, like <code>urlsafe_b64encode</code>.</p>
","38254255","385","<java><python><base64><sha256><hmac>","4","1","1","2016-07-07 20:04:59","38254255","0","","5037341","","2016-07-07 19:40:18","2016-07-07 19:35:09","","2016-07-07 20:04:59","2016-07-07 19:57:45"
"39277315","HMAC encryption in Swift 2","<p>Java provides <a href=""https://docs.oracle.com/javase/7/docs/api/javax/crypto/Mac.html"" rel=""nofollow"">MAC(Message Authentication Code) algorithm API</a> with which I can encrypt <code>data</code> by: </p>

<pre><code>byte[] data = getDataBytes();
Mac mac = Mac.getInstance(""HMAC-SHA256"");
mac.init(new SecretKeySpec(key, ""HMAC-SHA256""));
byte[] encryptedBytes = mac.doFinal(data);
</code></pre>

<p>I am new in Swift, how can I implement the same thing as above with Swift 2 ?</p>
","<pre><code>func hmacSha256(string:String, key:String) -&gt; [UInt8] {
    var mac = [UInt8](count: Int(CC_SHA256_DIGEST_LENGTH), repeatedValue: 0)
    if let dataBytes = string.dataUsingEncoding(NSUTF8StringEncoding) {
        if let keyBytes = key.dataUsingEncoding(NSUTF8StringEncoding) {
            CCHmac(CCHmacAlgorithm(kCCHmacAlgSHA256),
                   keyBytes.bytes,  keyBytes.length,
                   dataBytes.bytes, dataBytes.length,
                   &amp;mac);
        }
    }

    return mac;
}
let hash = hmacSha256(""InputString"", key:""keyString"")
print(""hash: \(hash)"")
</code></pre>

<blockquote>
  <p>hash: [41, 226, 70, 65, 222, 197, 202, 78, 138, 62, 40, 93, 225, 228, 181, 178, 108, 158, 238, 25, 74, 199, 116, 106, 96, 142, 216, 239, 41, 18, 245, 156]</p>
</blockquote>

<p>Notes:</p>

<p>Add <code>Security.framework</code> to the project</p>

<p>For iOS:<br>
Common Crypto must be imported, add<br>
<code>#import &lt;CommonCrypto/CommonCrypto.h&gt;</code><br>
to the bridging header.</p>

<p>For OSX just import<br>
<code>#import &lt;CommonCrypto/CommonCrypto.h&gt;</code>  </p>
","39277823","385","<swift><swift2><hmac>","-2","0","1","2016-09-01 17:50:19","","1","3","","","","2016-09-01 17:10:07","2016-09-01 17:41:47","2016-09-01 17:50:19","2016-09-01 17:43:06"
"38195246","Captcha substitution on mobile devices","<p>We have a service where user can sign-up. This process is protected by reCAPTCHA to prevent automatized sign-ups. The problem is that on mobile devices reCAPTCHA is not a convenience. Therefore we decided that the sign-up API will accept also some special <em>tokens</em> instead of reCAPTCHA response.</p>

<p>Now the question is how to implement this <em>token</em>. Our first approach was to equip the mobile application with some constant secret that would be sent to the server as the <em>token</em>. But this secret can be revealed if a hacker redirects the request to his server (by updating DNS record of the API domain and installing his certificate as trusted to the mobile device).</p>

<p>Now our final approach is to compute the token as HMAC-SHA1 on username+secret (do we need a here secred - maybe just for making the input long enough?). The username will be taken from sign-up input. Then the server would authorize it by validating the hash. In his case it would be possible to do a replay attack but it is OK because duplicate username would be rejected.</p>

<p>Is this approach correct? Maybe there are other alternatives to captcha on mobile devices?</p>

<p>Also is it possible to get and reverse engineer the application from iOS (ipa file) considering it will be hosted in Appstore and to extract the key (and secret)?</p>

<p>In case of android this is possible - is there a way to prevent it?</p>
","<p>You found the disadvantage: you still with a token which doesn't change for the same user. It's ok in your use case (register), but there could be another use cases where is not useful (for example a password recovery feature. In that case, a possible hacker might generate valid tokens for any user is your are asking for the username).</p>

<p>My solution would be:</p>

<ul>
<li>Create an algorithm (on both mobile app and your backend) that takes a ""public token"" and creates a ""secret token"", which solves the captcha. It might be a simple SHA1 hash (I don't recommend), a combination between public token and a salt, the user id and public token, etc...</li>
<li>Create an endpoint on your API that generates public and secret tokens. Store secret token in your backend and return public token to the client (mobile app).</li>
<li>You app then should ask for the public token, generate the secret token and send it to the API. The API verifies that secret token is already stored in your database, and if it's the case then captcha is solved.</li>
</ul>

<p>An improvement would be making stored secret tokens to expire after X seconds.</p>

<p>Hope it helps!</p>
","38577683","385","<android><ios><security><captcha><hmac>","1","0","2","2016-08-17 16:32:22","39001932","0","0","289827","","2016-07-05 05:13:20","2016-07-05 04:36:04","","","2016-07-25 21:24:24"
"38195246","Captcha substitution on mobile devices","<p>We have a service where user can sign-up. This process is protected by reCAPTCHA to prevent automatized sign-ups. The problem is that on mobile devices reCAPTCHA is not a convenience. Therefore we decided that the sign-up API will accept also some special <em>tokens</em> instead of reCAPTCHA response.</p>

<p>Now the question is how to implement this <em>token</em>. Our first approach was to equip the mobile application with some constant secret that would be sent to the server as the <em>token</em>. But this secret can be revealed if a hacker redirects the request to his server (by updating DNS record of the API domain and installing his certificate as trusted to the mobile device).</p>

<p>Now our final approach is to compute the token as HMAC-SHA1 on username+secret (do we need a here secred - maybe just for making the input long enough?). The username will be taken from sign-up input. Then the server would authorize it by validating the hash. In his case it would be possible to do a replay attack but it is OK because duplicate username would be rejected.</p>

<p>Is this approach correct? Maybe there are other alternatives to captcha on mobile devices?</p>

<p>Also is it possible to get and reverse engineer the application from iOS (ipa file) considering it will be hosted in Appstore and to extract the key (and secret)?</p>

<p>In case of android this is possible - is there a way to prevent it?</p>
","<p>We decided to go with <a href=""https://github.com/hueniverse/hawk"" rel=""nofollow"">Hawk</a> to not to send credentials over the wire. It will be used for iOS where it shouldn't be possible to reverse engineer the app and get the secret key. For Android we'll use some reCAPTCHA library for Android.</p>
","39001932","385","<android><ios><security><captcha><hmac>","1","0","2","2016-08-17 16:32:22","39001932","0","0","289827","","2016-07-05 05:13:20","2016-07-05 04:36:04","","","2016-08-17 16:32:22"
"15554190","How to guarantee counter synchronisation between client and server for counter in hmac-based one time password implementation?","<p>We are trying to implement a hmac-based one time password protocol for use authenticating users over our api.</p>

<p>The idea is to encrypt a unique identifier for the user (uid) against a private key and an incremental counter. Then increment the counter for the next call.</p>

<pre><code>encrypt(uid, private_key, counter)
# now increment the counter for the next call
</code></pre>

<p>Then on the server side, decrypt using the private key and the counter to get the user identifier (uid).</p>

<pre><code>decrypt(encrpyted_string, private_key, counter)
# now increment the counter for the next received request
</code></pre>

<p>This works fine. Each call is completely unique (one time) because of the counter.</p>

<p>However how would we handle synchronisation of the counter? What happens if the client generates a request, increments the counter for the next call, and sends the request, but the server is offline and never receives the request, or there is an internet connectivity issue and the request never gets through - now the server and the client are out of sync with each other's counters.</p>

<p>Is this a case of ""you should know if a request has been submitted""? I.e. we could add a response header from the server to say whether the counter has been incremented and <em>only if it has do we increment the counter in the app too</em>... but then the same could be said the other way around - we could send a request, the server receives it, increments its own counter  and sends a response, but the internet connection has been interrupted whilst the server was processing its request and the app never receives the response, never increments its counter and therefore the two are out of sync again.</p>

<p>Thanks for any insight you can give me.</p>
","<p>To synchronize counter between server and client just check some range of OTP. If Client sends OTP for current counter - all is ok, it is nothing to do, if client sends OTP in some range near current counter (~15) - it's mean, that client can be authenticated, but you need update counter on a server.
In a case when there is big desynchnization you should ask two consistent OTP and check if they was correct on wide range of counters. If it was - set your server counter to founded value.</p>
","18720832","380","<hmac><one-time-password>","0","1","1","2013-09-10 13:53:33","","0","","","","","2013-03-21 17:27:10","","","2013-09-10 13:53:33"
"45578622","How to use multiple firewalls in symfony 2.8 for same pattern?","<p>I have a symfony 2.8 application that will be used as a REST API back end</p>

<p>I would like to add security to all end points matching ^/api
I would like to be able to use 3 different authentication method for ^/api</p>

<p>I am using uma/psr7-hmac-bundle, friendsofsymfony/oauth-server-bundle, APIKey authentication.</p>

<p>I defined 3 different firewalls and everything works for each firewalls if I remove the other two.</p>

<pre><code>firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        oauth_token:
            pattern: ^/oauth/v2/token
            security: false

        oauth_authorize:
            pattern: ^/oauth/v2/auth
            security: false

        api_key:
            pattern: ^/api
            stateless: true
            simple_preauth:
                authenticator: api_key_authenticator
            provider: api_key_user_provider

        oauth_api:
            pattern: ^/api
            stateless: true 
            fos_oauth: true
            provider: oauth_user

        hmac_api:
            pattern: ^/api
            stateless: true  
            hmac: 
                apikey_header: 'X-Custom-Header-Key'
            provider: hmac_user 
</code></pre>

<p>How can I use all 3 firewalls together (chain them)? (hmac_api, oauth_api, api_key)</p>

<p>I looked into Guards but I am not sure how to define/implement Authenticators for HMAC and oAuth.</p>

<p>I looked into firewall context but because it is stateless it won't work. </p>

<p>Basically how can I chain multiple firewalls for same pattern? or how can I define one firewall with 3 different authenticators with considering that I am using third part bundles like  friendsofsymfony/oauth-server-bundle, uma/psr7-hmac-bundle?</p>
","<p>Use </p>

<pre><code>guard:
    authenticators:
</code></pre>

<p>for chaining authenticators for your firewall
That's what I have in my app</p>

<pre><code>api:
            pattern:   ^/api         
            guard:
                authenticators:
                    - bor.api_bundle.session_authenticator
                    - lexik_jwt_authentication.jwt_token_authenticator
                    - sergei_k_security.token_authenticator
                entry_point: lexik_jwt_authentication.jwt_token_authenticator
</code></pre>

<p>docs - <a href=""http://symfony.com/doc/current/security/multiple_guard_authenticators.html"" rel=""nofollow noreferrer"">http://symfony.com/doc/current/security/multiple_guard_authenticators.html</a></p>
","45578753","378","<symfony><oauth><hmac><api-key><symfony-security>","0","0","1","2017-08-08 22:28:35","","0","","1341921","","2017-08-08 22:28:35","2017-08-08 21:56:18","","","2017-08-08 22:06:21"
"30905180","Google Web Services HMAC-SHA1 algorithm in JavaScript","<p>I am trying to get a <code>HMAC-SHA1</code> encryption going using JavaScript so I can use it in my <code>Google Web Services For Work</code> <code>GET</code> requests. I've tried several libraries and solutions, such as the following example: </p>

<p><a href=""https://stackoverflow.com/questions/30379084/sign-key-hmac-sha1-with-javascript"">Sign Key HMAC SHA1 with Javascript</a></p>

<p>and this other one:</p>

<p><a href=""https://gist.github.com/ncerminara/11257943#file-base64-js"" rel=""nofollow noreferrer"">https://gist.github.com/ncerminara/11257943#file-base64-js</a></p>

<p>as well as CryptoJS, but all of them give me different results, which none of them work. I was wondering if someone got this to work. I am aware of the python example posted here <a href=""https://developers.google.com/maps/documentation/business/webservices/auth"" rel=""nofollow noreferrer"">https://developers.google.com/maps/documentation/business/webservices/auth</a>, which does work but unfortunately I need to achieve the same functionality in <code>JavaScript</code> to upload it to <code>Cloud Code</code> in <code>Parse</code>. </p>

<p>I would greatly appreciate any advice regarding this matter.</p>

<p>Thank you for your help in advance!</p>

<p>Cheers!</p>
","","","377","<javascript><google-maps><sha><hmac><hmacsha1>","1","","0","2015-06-18 01:43:51","","1","","-1","","2017-05-23 11:43:46","2015-06-18 01:43:51","","",""
"39143264","How to create a valid signature for the mws amazon (javascript)?","<pre><code>var protocol = ""https"";
var method = ""POST"";
var host = ""mws.amazonservices.com"";
var uri = ""/Products/2011-10-01"";
var marketPlaceId = ""ATVPDKIKX0DER"";

function generateRequest(asin, action){
    var today = new Date();
    time = today.toISOString();
    var parameters = {
        // ""ASINList.ASIN.1"":asin,
        ""Query"":asin,
        ""AWSAccessKeyId"":AWSAccessKeyId,
        ""Action"": action,
        ""MarketplaceId"":marketPlaceId,
        ""SellerId"": SellerId,
        ""SignatureMethod"":""HmacSHA256"",
        ""SignatureVersion"":""2"",
        ""Timestamp"":time,
        ""Version"":""2011-10-01""
    };

    parameters = $.param( parameters );
    var messageToEncrypt =  method+""\n""+host+""\n""+uri+""\n""+parameters;
    var sig = CryptoJS.HmacSHA256(messageToEncrypt, SecretKey);
    sig = sig.toString(CryptoJS.enc.Base64);
    sig = encodeURIComponent(sig);
    parameters = parameters+""&amp;Signature=""+sig;
    var mwsRequest = protocol+""://""+host+uri+""?""+parameters;

    return mwsRequest;
}

// var asaUrl = generateRequest('B01I94N9TC','GetMatchingProduct');
var asaUrl = generateRequest('B01I94N9TC','ListMatchingProducts');

$.ajax({
    url:asaUrl,
    method: ""POST"",
    success: function(data){
        console.log(data)
    }
});
</code></pre>

<p>It gives an error
""Check your AWS Secret Access Key and signing method. Consult the service documentation for details""</p>

<p>but if you send to Get Matching Product is operating normally</p>
","","","375","<javascript><amazon-web-services><base64><hmac><cryptojs>","2","","0","2016-08-25 20:18:09","","0","","1816580","","2016-08-25 20:18:09","2016-08-25 10:48:33","","",""
"30392730","Decrypt string in Javascript","<p>I am trying to decrypt these strings <code>WUUVJPVUVJS^J_TJ^RSPVT^S</code> ,  <code>WV^TW^TJQ^VVJSRUJ_TWJ^R^UWU</code> using this code that the developer use to decrypt it</p>

<pre><code>/** ========== \resources\md5.js ========== **/
var CryptoJS = CryptoJS || function(w, i) {
var f = {},
    e = f.lib = {},
    h = function() {},
    o = e.Base = {
        extend: function(a) {
            h.prototype = this;
            var g = new h;
            a &amp;&amp; g.mixIn(a);
            g.hasOwnProperty(""init"") || (g.init = function() {
                g.$super.init.apply(this, arguments);
            });
            g.init.prototype = g;
            g.$super = this;
            return g;
        },
        create: function() {
            var a = this.extend();
            a.init.apply(a, arguments);
            return a;
        },
        init: function() {},
        mixIn: function(a) {
            for (var g in a) {
                a.hasOwnProperty(g) &amp;&amp; (this[g] = a[g]);
            }
            a.hasOwnProperty(""toString"") &amp;&amp; (this.toString = a.toString);
        },
        clone: function() {
            return this.init.prototype.extend(this);
        }
    },
    j = e.WordArray = o.extend({
        init: function(a, g) {
            a = this.words = a || [];
            this.sigBytes = g != i ? g : 4 * a.length;
        },
        toString: function(a) {
            return (a || x).stringify(this);
        },
        concat: function(l) {
            var n = this.words,
                k = l.words,
                p = this.sigBytes;
            l = l.sigBytes;
            this.clamp();
            if (p % 4) {
                for (var m = 0; m &lt; l; m++) {
                    n[p + m &gt;&gt;&gt; 2] |= (k[m &gt;&gt;&gt; 2] &gt;&gt;&gt; 24 - 8 * (m % 4) &amp; 255)   &lt;&lt; 24 - 8 * ((p + m) % 4);
                }
            } else {
                if (65535 &lt; k.length) {
                    for (m = 0; m &lt; l; m += 4) {
                        n[p + m &gt;&gt;&gt; 2] = k[m &gt;&gt;&gt; 2];
                    }
                } else {
                    n.push.apply(n, k);
                }
            }
            this.sigBytes += l;
            return this;
        },
          clamp: function() {
            var a = this.words,
                g = this.sigBytes;
            a[g &gt;&gt;&gt; 2] &amp;= 4294967295 &lt;&lt; 32 - 8 * (g % 4);
            a.length = w.ceil(g / 4);
        },
        clone: function() {
            var a = o.clone.call(this);
            a.words = this.words.slice(0);
            return a;
        },
        random: function(k) {
            for (var l = [], g = 0; g &lt; k; g += 4) {
                l.push(4294967296 * w.random() | 0);
            }
            return new j.init(l, k);
        }
    }),
    z = f.enc = {},
    x = z.Hex = {
        stringify: function(m) {
            var l = m.words;
            m = m.sigBytes;
            for (var n = [], p = 0; p &lt; m; p++) {
                var q = l[p &gt;&gt;&gt; 2] &gt;&gt;&gt; 24 - 8 * (p % 4) &amp; 255;
                n.push((q &gt;&gt;&gt; 4).toString(16));
                n.push((q &amp; 15).toString(16));
            }
            return n.join("""");
        },
        parse: function(l) {
            for (var k = l.length, m = [], n = 0; n &lt; k; n += 2) {
                m[n &gt;&gt;&gt; 3] |= parseInt(l.substr(n, 2), 16) &lt;&lt; 24 - 4 * (n %  8);
            }
            return new j.init(m, k / 2);
        }
    },
    b = z.Latin1 = {
        stringify: function(l) {
            var k = l.words;
            l = l.sigBytes;
            for (var m = [], n = 0; n &lt; l; n++) {
                m.push(String.fromCharCode(k[n &gt;&gt;&gt; 2] &gt;&gt;&gt; 24 - 8 * (n % 4) &amp; 255));
            }
            return m.join("""");
        },
        parse: function(l) {
            for (var k = l.length, m = [], n = 0; n &lt; k; n++) {
                m[n &gt;&gt;&gt; 2] |= (l.charCodeAt(n) &amp; 255) &lt;&lt; 24 - 8 * (n % 4);
            }
            return new j.init(m, k);
        }
    },
    y = z.Utf8 = {
        stringify: function(a) {
            try {
                return decodeURIComponent(escape(b.stringify(a)));
            } catch (k) {
                throw Error(""Malformed UTF-8 data"");
            }
        },
        parse: function(a) {
            return b.parse(unescape(encodeURIComponent(a)));
        }
    },
    c = e.BufferedBlockAlgorithm = o.extend({
        reset: function() {
            this._data = new j.init;
            this._nDataBytes = 0;
        },
        _append: function(a) {
            ""string"" == typeof a &amp;&amp; (a = y.parse(a));
            this._data.concat(a);
            this._nDataBytes += a.sigBytes;
        },
        _process: function(p) {
            var n = this._data,
                q = n.words,
                r = n.sigBytes,
                s = this.blockSize,
                u = r / (4 * s),
                u = p ? w.ceil(u) : w.max((u | 0) - this._minBufferSize, 0);
            p = u * s;
            r = w.min(4 * p, r);
            if (p) {
                for (var t = 0; t &lt; p; t += s) {
                    this._doProcessBlock(q, t);
                }
                t = q.splice(0, p);
                n.sigBytes -= r;
            }
            return new j.init(t, r);
        },
        clone: function() {
            var a = o.clone.call(this);
            a._data = this._data.clone();
            return a;
        },
        _minBufferSize: 0
    });
e.Hasher = c.extend({
    cfg: o.extend(),
    init: function(a) {
        this.cfg = this.cfg.extend(a);
        this.reset();
    },
    reset: function() {
        c.reset.call(this);
        this._doReset();
    },
    update: function(a) {
        this._append(a);
        this._process();
        return this;
    },
    finalize: function(a) {
        a &amp;&amp; this._append(a);
        return this._doFinalize();
    },
    blockSize: 16,
    _createHelper: function(a) {
        return function(k, l) {
            return (new a.init(l)).finalize(k);
        };
    },
    _createHmacHelper: function(a) {
        return function(k, l) {
            return (new d.HMAC.init(a, l)).finalize(k);
        };
    }
});
var d = f.algo = {};
return f;
  }(Math);
  (function(i) {
  function f(n, s, p, q, t, r, u) {
    n = n + (s &amp; p | ~s &amp; q) + t + u;
    return (n &lt;&lt; r | n &gt;&gt;&gt; 32 - r) + s;
}

function d(n, s, p, q, t, r, u) {
    n = n + (s &amp; q | p &amp; ~q) + t + u;
    return (n &lt;&lt; r | n &gt;&gt;&gt; 32 - r) + s;
}

function c(n, s, p, q, t, r, u) {
    n = n + (s ^ p ^ q) + t + u;
    return (n &lt;&lt; r | n &gt;&gt;&gt; 32 - r) + s;
}

function e(n, s, p, q, t, r, u) {
    n = n + (p ^ (s | ~q)) + t + u;
    return (n &lt;&lt; r | n &gt;&gt;&gt; 32 - r) + s;
}
for (var h = CryptoJS, g = h.lib, o = g.WordArray, j = g.Hasher, g = h.algo, b = [], k = 0; 64 &gt; k; k++) {
    b[k] = 4294967296 * i.abs(i.sin(k + 1)) | 0;
}
g = g.MD5 = j.extend({
    _doReset: function() {
        this._hash = new o.init([1732584193, 4023233417, 2562383102, 271733878]);
    },
    _doProcessBlock: function(I, L) {
        for (var l = 0; 16 &gt; l; l++) {
            var J = L + l,
                S = I[J];
            I[J] = (S &lt;&lt; 8 | S &gt;&gt;&gt; 24) &amp; 16711935 | (S &lt;&lt; 24 | S &gt;&gt;&gt; 8) &amp; 4278255360;
        }
        var l = this._hash.words,
            J = I[L + 0],
            S = I[L + 1],
            K = I[L + 2],
            M = I[L + 3],
            N = I[L + 4],
            O = I[L + 5],
            P = I[L + 6],
            Q = I[L + 7],
            R = I[L + 8],
            T = I[L + 9],
            U = I[L + 10],
            V = I[L + 11],
            a = I[L + 12],
            m = I[L + 13],
            p = I[L + 14],
            F = I[L + 15],
            n = l[0],
            E = l[1],
            G = l[2],
            H = l[3],
            n = f(n, E, G, H, J, 7, b[0]),
            H = f(H, n, E, G, S, 12, b[1]),
            G = f(G, H, n, E, K, 17, b[2]),
            E = f(E, G, H, n, M, 22, b[3]),
            n = f(n, E, G, H, N, 7, b[4]),
            H = f(H, n, E, G, O, 12, b[5]),
            G = f(G, H, n, E, P, 17, b[6]),
            E = f(E, G, H, n, Q, 22, b[7]),
            n = f(n, E, G, H, R, 7, b[8]),
            H = f(H, n, E, G, T, 12, b[9]),
            G = f(G, H, n, E, U, 17, b[10]),
            E = f(E, G, H, n, V, 22, b[11]),
            n = f(n, E, G, H, a, 7, b[12]),
            H = f(H, n, E, G, m, 12, b[13]),
            G = f(G, H, n, E, p, 17, b[14]),
            E = f(E, G, H, n, F, 22, b[15]),
            n = d(n, E, G, H, S, 5, b[16]),
            H = d(H, n, E, G, P, 9, b[17]),
            G = d(G, H, n, E, V, 14, b[18]),
            E = d(E, G, H, n, J, 20, b[19]),
            n = d(n, E, G, H, O, 5, b[20]),
            H = d(H, n, E, G, U, 9, b[21]),
            G = d(G, H, n, E, F, 14, b[22]),
            E = d(E, G, H, n, N, 20, b[23]),
            n = d(n, E, G, H, T, 5, b[24]),
            H = d(H, n, E, G, p, 9, b[25]),
            G = d(G, H, n, E, M, 14, b[26]),
            E = d(E, G, H, n, R, 20, b[27]),
            n = d(n, E, G, H, m, 5, b[28]),
            H = d(H, n, E, G, K, 9, b[29]),
            G = d(G, H, n, E, Q, 14, b[30]),
            E = d(E, G, H, n, a, 20, b[31]),
            n = c(n, E, G, H, O, 4, b[32]),
            H = c(H, n, E, G, R, 11, b[33]),
            G = c(G, H, n, E, V, 16, b[34]),
            E = c(E, G, H, n, p, 23, b[35]),
            n = c(n, E, G, H, S, 4, b[36]),
            H = c(H, n, E, G, N, 11, b[37]),
            G = c(G, H, n, E, Q, 16, b[38]),
            E = c(E, G, H, n, U, 23, b[39]),
            n = c(n, E, G, H, m, 4, b[40]),
            H = c(H, n, E, G, J, 11, b[41]),
            G = c(G, H, n, E, M, 16, b[42]),
            E = c(E, G, H, n, P, 23, b[43]),
            n = c(n, E, G, H, T, 4, b[44]),
            H = c(H, n, E, G, a, 11, b[45]),
            G = c(G, H, n, E, F, 16, b[46]),
            E = c(E, G, H, n, K, 23, b[47]),
            n = e(n, E, G, H, J, 6, b[48]),
            H = e(H, n, E, G, Q, 10, b[49]),
            G = e(G, H, n, E, p, 15, b[50]),
            E = e(E, G, H, n, O, 21, b[51]),
            n = e(n, E, G, H, a, 6, b[52]),
            H = e(H, n, E, G, M, 10, b[53]),
            G = e(G, H, n, E, U, 15, b[54]),
            E = e(E, G, H, n, S, 21, b[55]),
            n = e(n, E, G, H, R, 6, b[56]),
            H = e(H, n, E, G, F, 10, b[57]),
            G = e(G, H, n, E, P, 15, b[58]),
            E = e(E, G, H, n, m, 21, b[59]),
            n = e(n, E, G, H, N, 6, b[60]),
            H = e(H, n, E, G, V, 10, b[61]),
            G = e(G, H, n, E, K, 15, b[62]),
            E = e(E, G, H, n, T, 21, b[63]);
        l[0] = l[0] + n | 0;
        l[1] = l[1] + E | 0;
        l[2] = l[2] + G | 0;
        l[3] = l[3] + H | 0;
    },
    _doFinalize: function() {
        var m = this._data,
            q = m.words,
            n = 8 * this._nDataBytes,
            p = 8 * m.sigBytes;
        q[p &gt;&gt;&gt; 5] |= 128 &lt;&lt; 24 - p % 32;
        var r = i.floor(n / 4294967296);
        q[(p + 64 &gt;&gt;&gt; 9 &lt;&lt; 4) + 15] = (r &lt;&lt; 8 | r &gt;&gt;&gt; 24) &amp; 16711935 | (r &lt;&lt; 24 | r &gt;&gt;&gt; 8) &amp; 4278255360;
        q[(p + 64 &gt;&gt;&gt; 9 &lt;&lt; 4) + 14] = (n &lt;&lt; 8 | n &gt;&gt;&gt; 24) &amp; 16711935 | (n &lt;&lt;    24 | n &gt;&gt;&gt; 8) &amp; 4278255360;
        m.sigBytes = 4 * (q.length + 1);
        this._process();
        m = this._hash;
        q = m.words;
        for (n = 0; 4 &gt; n; n++) {
            p = q[n], q[n] = (p &lt;&lt; 8 | p &gt;&gt;&gt; 24) &amp; 16711935 | (p &lt;&lt; 24 | p         &gt;&gt;&gt; 8) &amp; 4278255360;
        }
        return m;
    },
    clone: function() {
        var l = j.clone.call(this);
        l._hash = this._hash.clone();
        return l;
    }
});
h.MD5 = j._createHelper(g);
h.HmacMD5 = j._createHmacHelper(g);
})(Math);
</code></pre>

<p>I read in encryption for more than 4 hours but didn't succeed to decrypt these string
I am beginner on use Java script, How can use this code to decrypt texts above
Thanks</p>
","<p>An HMAC can not be ""decrypted"". Like a hash function, HMAC is a function that can not be inverted. The only difference between a HMAC function and a hash function is that the first one involves a ""secret"" and the second one has a public definition.</p>

<p>If you are planning to use CryptoJS use AES (main difference between hmac/hash and cipher is that the second one can be reversed)</p>
","30392847","375","<javascript><encryption><hash><md5><hmac>","0","1","1","2015-05-22 10:34:01","","4","","1816580","","2015-05-22 10:34:01","2015-05-22 09:10:59","","2015-05-22 10:28:52","2015-05-22 09:16:24"
"10044536","quercus and PHP hmac 256 implementation","<p>I am trying to use hash_hmac in quercus (php emulation under java), but unfortunately it has not been implemented!</p>

<pre><code>Fatal Error: hash_init: 'HmacSHA-256' is an unknown algorithm [hash_hmac] 
</code></pre>

<p>I have 2 options:</p>

<p>1) create a custom php function that will replace the hash_hmac. I found one here, but it's NOT compatible with sha 256:</p>

<p><a href=""http://www.php.net/manual/en/function.hash-hmac.php#93440"" rel=""nofollow"">http://www.php.net/manual/en/function.hash-hmac.php#93440</a></p>

<p>Are you aware of any other custom implementation?</p>

<p>2) let java decode the string and pass it to php. It's doable:</p>

<p><a href=""http://php-apps.appspot.com/hmac-sha-256-signature-for-amazon-product-api-requests.html"" rel=""nofollow"">http://php-apps.appspot.com/hmac-sha-256-signature-for-amazon-product-api-requests.html</a></p>

<p>but It's the first time that I am dealing with php classes and the debugger doesn't accept this php code given in the link:</p>

<pre><code>&lt;?php

import phpgae.HmacSHA256;

$c = new HmacSHA256;

echo $c-&gt;compute( 'your base string' ,  'your key' );

?&gt;
</code></pre>

<p>how am I supposed to implement it?</p>
","<p>I was searching for hours myself to find a solution to this.</p>

<p>Turns out it was reported as a bug and fixed in version 4.0.29.</p>

<p>See <a href=""http://bugs.caucho.com/bug_view_advanced_page.php?bug_id=4833#bugnotes"" rel=""nofollow"">http://bugs.caucho.com/bug_view_advanced_page.php?bug_id=4833#bugnotes</a></p>

<p>Upgrading to a newer version will fix this.</p>
","15856538","375","<php><facebook><hmac><sha>","2","0","1","2013-04-06 22:00:35","","0","","1197544","","2012-04-06 19:06:45","2012-04-06 13:58:31","","","2013-04-06 22:00:35"
"6031683","Does using channel encryption (https) make hashing the secret key redundant?","<p>I'm designing a web service that clients connect to in order to retrieve some private data. Each client has a unique ID and a secret key (generated by the server) that are sent as parameters to the web service in order to authenticate itself. In addition, all communications are done over HTTPS.</p>

<p>I'm also planning to use HMAC-SHA256, in order to avoid sending the secret key over the wire.</p>

<p>However, I'm wondering whether this is strictly necessary. Since HTTPS gives me a secure channel between client and server, why would I really mind sending the secret key over that channel?</p>

<p>The only reason I managed to come up with is that an unknowledgeable developer might add a service in the future and not reject non-HTTPS connections, so hashing the secret key is a sort of insurance against the realities of corporate software development, an extra line of defense if you will. </p>

<p>Am I missing something more significant? Is this a real vulnerability that some attack vector could take advantage of?</p>
","<ul>
<li>An attacker installs a fake trusted certificate into a browser and hijacks the session.</li>
<li>A link to your site is sent, but the redirection to SSL is intercepted and a non-SSL session commences.</li>
</ul>

<p>There are others, but the story is this: SSL is complicated and often attacked in inventive ways. If your connection is secure, then the hashing has little value compared to the complexity in code for humans and the cost in cpu time. However, if the SSL session is compromised, then you've still saved your key. Much as we hash passwords in databases despite the fact that nobody undesirable should have access, hashing your key despite SSL would be wise.</p>
","6031838","373","<security><hmac>","3","2","2","2011-05-17 14:01:51","6031838","0","0","","","","2011-05-17 13:42:43","","","2011-05-17 13:53:53"
"6031683","Does using channel encryption (https) make hashing the secret key redundant?","<p>I'm designing a web service that clients connect to in order to retrieve some private data. Each client has a unique ID and a secret key (generated by the server) that are sent as parameters to the web service in order to authenticate itself. In addition, all communications are done over HTTPS.</p>

<p>I'm also planning to use HMAC-SHA256, in order to avoid sending the secret key over the wire.</p>

<p>However, I'm wondering whether this is strictly necessary. Since HTTPS gives me a secure channel between client and server, why would I really mind sending the secret key over that channel?</p>

<p>The only reason I managed to come up with is that an unknowledgeable developer might add a service in the future and not reject non-HTTPS connections, so hashing the secret key is a sort of insurance against the realities of corporate software development, an extra line of defense if you will. </p>

<p>Am I missing something more significant? Is this a real vulnerability that some attack vector could take advantage of?</p>
","<p>The <em>channel</em> may be secure, but that doesn't tell you anything about <em>endpoints</em>: depending on the browser in question (and its plugins/extensions/...), your key could very well end up in a disk-based cache somewhere on the user's computer, and it could sit there until the end of forever.</p>

<p>That is not a very interesting vulnerability ... until you realize that various malware already goes trawling through the disks, looking for anything valuable - and with the current rates, some of your users <em>will</em> be infected (unless your website only has twenty users ;)).</p>

<p>So: don't throw away a pretty powerful crypto mechanism to save a few CPU cycles; that's a potentially dangerous microoptimization IMNSHO.</p>
","6031956","373","<security><hmac>","3","2","2","2011-05-17 14:01:51","6031838","0","0","","","","2011-05-17 13:42:43","","","2011-05-17 14:01:51"
"34249058","Converting C# to ColdFusion","<p>I have no experience with C# and was wondering if someone can help converting this C# snippet into ColdFusion. </p>

<pre><code>string inputString = ""abccde"";
string securityKey = ""abcdefghijk..."";

// Convert security key into ASCII bytes using utf8 encoding
byte[] securityKeyBytes = UTF8Encoding.ASCII.GetBytes(securityKey);

// Create an HMACSHA1 hashing object that has been seeded with the security key bytes
HMACSHA1 hasher = new HMACSHA1(securityKeyBytes);

// Convert input string into ASCII bytes using utf8 encoding
byte[] inputBytes = UTF8Encoding.ASCII.GetBytes(inputString.ToCharArray());

// Compute the has value
byte[] hash = hasher.ComputeHash(inputBytes);

// Convert back to a base 64 string
string securityToken = Convert.ToBase64String(hash);

return securityToken;
</code></pre>

<p>I found <a href=""https://stackoverflow.com/questions/2959972/hmac-sha1-coldfusion"">this</a> on stackOverFlow and here what I have so far. I'm I going in the right direction? Any insights would be much appreciated!</p>

<pre><code>&lt;cffunction name=""CFHMAC"" output=""false"" returntype=""string""&gt;
  &lt;cfargument name=""signMsg"" type=""string"" required=""true"" /&gt;
  &lt;cfargument name=""signKey"" type=""string"" required=""true"" /&gt;
  &lt;cfset var key = createObject(""java"", ""javax.crypto.spec.SecretKeySpec"").init(signKey.getBytes(), ""HmacSHA1"") /&gt;
  &lt;cfset var mac = createObject(""java"", ""javax.crypto.Mac"").getInstance(""HmacSHA1"") /&gt;
  &lt;cfset mac.init(key) /&gt;
  &lt;cfreturn toBase64(mac.doFinal(signMsg.getBytes())) /&gt;
&lt;/cffunction&gt;

&lt;cfset signMsg= ""abccde""&gt;
&lt;cfset signatureString = ""abcdefghijk...""&gt;
&lt;cfset result = CFHMAC(signMsg=signMsg, signKey=signatureString) /&gt;
&lt;cfdump var=""#result#"" /&gt;
</code></pre>
","<p>(Expanded from the comments) </p>

<p>CF11 has an <a href=""https://helpx.adobe.com/coldfusion/cfml-reference/coldfusion-functions/functions-h-im/hmac.html"" rel=""nofollow noreferrer"">HMAC function</a> already built in, so it is possible you may not need that UDF. I would suggest giving it a try. Take note that the C# code uses <a href=""https://msdn.microsoft.com/en-us/library/system.text.encoding.ascii%28v=vs.110%29.aspx"" rel=""nofollow noreferrer"">UTF8Encoding.ASCII</a>:</p>

<blockquote>
  <p>ASCII characters are limited to the lowest 128 Unicode characters,
  from U+0000 to U+007F.... </p>
  
  <p>Note that the ASCII encoding has an 8th bit ambiguity that can allow
  malicious use, but the UTF-8 encoding removes ambiguity about the 8th
  bit. ... It uses replacement fallback to replace each string that it
  cannot encode and each byte that it cannot decode with a question mark
  (""?"") character.</p>
</blockquote>

<p>Assuming you need to maintain compatibility with some other application, and must keep the same encoding, UTF8Encoding.ASCII <em>should</em> correspond to ""US-ASCII"" encoding in CF/Java, but do some testing to verify the handling of invalid characters.  If you have the flexibility to change the encoding, I would recommend using UTF-8 instead. Keep in mind, the CF function always returns hexadecimal. If you need a base64 string instead, you will have to convert it with <a href=""https://helpx.adobe.com/coldfusion/cfml-reference/coldfusion-functions/functions-by-category/conversion-functions.html"" rel=""nofollow noreferrer"">binaryEncode() and binaryDecode().</a></p>

<p><strong>Example:</strong></p>

<pre><code>&lt;!--- Only required when hard coding UTF8 characters into a script ---&gt;
&lt;cfprocessingdirective pageEncoding=""utf-8""&gt;
&lt;cfset message = ""Pi π and Sigma Σ.""&gt;
&lt;cfset key = ""abcdefghijk""&gt;
&lt;cfset hexHash = hmac(message, key, ""HMACSHA1"", ""US-ASCII"")&gt;
&lt;cfset base64Hash = binaryEncode(binaryDecode(hexHash, ""hex""), ""base64"")&gt;
&lt;cfdump var=""#base64Hash#""&gt;
</code></pre>

<p><strong>Result:</strong></p>

<pre><code>HMACSHA1 = J2AZf+zhrebIA/tK3i5PYb4b/Fo= 
</code></pre>

<p>Side note, about the <a href=""https://stackoverflow.com/questions/2959972/hmac-sha1-coldfusion"">CFHMAC UDF</a>: be very careful with encoding when extracting the bytes of a string. As I noted in the comments, it is best avoid using <code>getBytes()</code> because it assumes the default encoding, whatever that may be. That means it may not always return the desired results, and can vary from one jvm to another. Instead, it is better to always supply a charset explicitly ie <code>getBytes(""UTF-8"")</code> , <code>getBytes(""US-ASCII"")</code>, etcetera.</p>
","34256335","370","<coldfusion><coldfusion-9><sha1><hmac><coldfusion-11>","1","1","1","2015-12-13 22:32:10","34256335","1","","-1","","2017-05-23 10:27:21","2015-12-13 07:55:14","","2017-05-23 12:10:48","2015-12-13 21:05:27"
"49418791","Python 3 - ascii to hex for hmac","<p>I'm having an issue and not quite sure how to explain it but I will try my best.</p>

<p>So I'm attempting to authenticate with an API which requires grabbing a private key that is provided by the website in hex representation (e.g. an example token is ""665c20b3c4517e025311160b7fec3fdb9b4d091f142d308c568d0eec4745f569"") and decode to ascii to create a keyed hash so I may pass it in an http header which is part of the authentication process.</p>

<p>When it comes to python2 I can simply </p>

<pre><code>import hashlib
import hmac
import requests


headers = {
           ""custom header"": hmac.new(""665c20b3c4517e025311160b7fec3fdb9b4d091f142d308c568d0eec4745f569"".decode(""hex""),
                                     msg=""whatever"",
                                     digestmod=hashlib.sha256).hexdigest()
          }
requests.get(""my url"", headers=headers)
</code></pre>

<p>However, I cannot get this working in python3 despite several hours of googling, various SO posts and looking at the official docs for hmac.</p>

<p>This seems to stem from the differences between how python2 and 3 handle strings.</p>

<p>In python2 running <code>""665c20b3c4517e025311160b7fec3fdb9b4d091f142d308c568d0eec4745f569"".decode(""hex"")</code> returns this string of characters ""f\ ��Q~S�?ۛM   -0�V��GE�i"" which is passed to hmac.new()</p>

<p>Somethings I have tried in Python3 after searching around:</p>

<pre><code>bytes.fromhex('665c20b3c4517e025311160b7fec3fdb9b4d091f142d308c568d0eec4745f569').decode('utf-8')

bytes.fromhex('665c20b3c4517e025311160b7fec3fdb9b4d091f142d308c568d0eec4745f569').decode('ascii')

import binascii
binascii.unhexlify(b""665c20b3c4517e025311160b7fec3fdb9b4d091f142d308c568d0eec4745f569"")
</code></pre>

<p>But these all error or output different returns that hmac.new() won't accept. I'm assuming there's a simple fix that I'm just ignorant on since I'm not very knowledgeable about the nuances of how p2 and p3 handle strings.</p>
","<p>One of your attempts is correct:</p>

<pre><code>In [1]: import binascii
   ...: binascii.unhexlify(b""665c20b3c4517e025311160b7fec3fdb9b4d091f142d308c568d0eec4745f569"")
   ...:
Out[1]: b'f\\ \xb3\xc4Q~\x02S\x11\x16\x0b\x7f\xec?\xdb\x9bM\t\x1f\x14-0\x8cV\x8d\x0e\xecGE\xf5i'
</code></pre>

<p>If you get a wrong result from <code>hmac</code> afterwards, you can post a question about that specific scenario, with some examples comparing python2/3.</p>

<p>You may be running into a problem with the message itself, which needs to explicitly use bytes, not a string. These two give the same values:</p>

<p>Python 3:</p>

<pre><code>In [10]: hmac.new(binascii.unhexlify(b""665c20b3c4517e025311160b7fec3fdb9b4d091f142d308c568d0eec4745f569""),
    ...:   msg=""whatever"".encode('utf-8'),
    ...:   digestmod=hashlib.sha256).hexdigest()
Out[10]: '79ca98357629c22a094c67a02638076573ec41d2c5ce8996435656f8488552d0'
</code></pre>

<p>Python 2:</p>

<pre><code>&gt;&gt;&gt; hmac.new(""665c20b3c4517e025311160b7fec3fdb9b4d091f142d308c568d0eec4745f569"".decode(""hex""),
...                                      msg=""whatever"",
...                                      digestmod=hashlib.sha256).hexdigest()
'79ca98357629c22a094c67a02638076573ec41d2c5ce8996435656f8488552d0'
</code></pre>
","49421802","369","<python><hmac>","0","2","1","2018-03-22 06:22:34","49421802","0","","3859599","","2018-03-22 05:34:58","2018-03-22 00:45:38","","2018-03-22 06:22:34","2018-03-22 06:17:11"
"28840052","NodeJS returns other binary result from HMAC than php","<p>I'm running node.js and php on windows and I use the included crypto module in node.js.</p>

<p>Php script:</p>

<pre><code>hash_hmac(""sha256"", ""foo"", ""bar"", true) // the true enables binary output
</code></pre>

<p>outputs:</p>

<blockquote>
  <p>¶y3!è¬╝♂ï►ó│Ñ├Fä╚┘CA╝±G6▄rp¸t↑Q</p>
</blockquote>

<p>Node.js script:</p>

<pre><code>crypto.createHmac(""sha256"", ""bar"").update(""foo"").digest(""binary"");
</code></pre>

<p>outputs:</p>

<blockquote>
  <p>¶y3!?ª¼♂?►¢³¥ÃF?ÈÙCA¼ñG6Ürp÷t↑Q</p>
</blockquote>

<p>I also wonder why some digits are the same but some others not.</p>

<hr>

<p>I also tried getting the hex instead of the binary result, both of them <strong>output the same</strong>.</p>

<pre><code>hash_hmac(""sha256"", ""foo"", ""bar"", false); // false outputs hex data
crypto.createHmac(""sha256"", ""bar"").update(""foo"").digest(""hex""); // notice ""hex""
</code></pre>

<p>This was not a solution because I failed to convert the hex data to binary:</p>

<pre><code>var hmac = crypto.createHmac(""sha256"", ""bar"").update(""foo"").digest(""hex"");
var binary = new Buffer(hmac, ""hex"");
</code></pre>

<p>The variable <code>binary</code> outputs:</p>

<blockquote>
  <p>¶y3!???♂?►????F???CA??G6?rp?t↑Q</p>
</blockquote>
","","","369","<php><node.js><hmac>","2","","0","2015-03-03 19:14:42","","2","","","","","2015-03-03 19:14:42","","",""
"15867423","Creating AWS SQS Request in Javascript with IAM user","<p>I have created an IAM User that has only SendMessage privilege on one SQS queue. I would like to distribute this IAM user's credentials to my client's browser so that messages may be sent to this SQS queue. How can I use these credentials to create a signed request in JavaScript? I have an open source HMAC-SHA256 JS script available, I am just having trouble understanding the documentation on the version 4 signing process and examples are scarce.</p>

<p>I understand cross-domain origin implications and can work around them.</p>
","","","369","<javascript><amazon-web-services><hmac><amazon-sqs>","1","","0","2013-04-07 20:35:27","","1","","1058291","","2013-04-07 20:35:27","2013-04-07 20:26:32","","",""
"29503091","HMAC authenticated API calls with multipart/form-data file uploads","<p>We have an existing API where 3rd parties can push data. The API calls are authenticated with HMAC using the same scheme as described in Ruby's ApiAuth library which I use to verify signed requests. We now need to support multipart/form-data file uploads.</p>

<p>I'm attempting to write a bash script as an example API call using cURL. I already have one that works without file uploads (POST request with only JSON data) here.</p>

<p>The part I'm stuck on is generating the $content_md5 for the multipart request. I understand the content of a multipart request has content sections separated by the boundary string, as described here.</p>

<p>Problem 1: cURL generates it's own boundary string and appends it to my content-type header
Problem 2: Should I MD5 the entire request body with boundary strings and section headers included?</p>

<p>So basically, I need to be able to know what the boundary string is so that I can generate a string that looks like the content sections and boundaries described in the http multipart format, lines 7 through 23 so that I may MD5 it.</p>

<p>Is there a way to do this with only cURL? Is there a better way to construct such an HMAC signed multipart request?</p>

<p>I was hoping to do it with cURL to present as a generalized example to 3rd party devs that will integrate with our API so they can sign their requests in whatever language they're using.</p>
","","","367","<http><authentication><curl><hmac>","5","","0","2016-02-04 13:46:49","","0","3","156746","","2015-04-08 01:16:05","2015-04-07 23:18:08","","",""
"6919290","How long should I make my key for php's hmac, when used with SHA512?","<p>I'm using this code to hash passwords:</p>

<pre><code>hash_hmac('sha512', $password . $salt, $hmac_key);
</code></pre>

<p>Is 4096 bits enough for a key?</p>

<p>Thank you!</p>
","<p>For password hashing? Sure. Just long enough salt will be enough.</p>

<p>You need to realise, what is the purpose of your using hash here. You're hashing passwords, so that if anyone gets hold of these hashes, they cannot infer original passwords from them. We use salts, so that brute force and rainbow table based attacks are less effective, and we make salts unique for each password, so that two users, using same passwords have different hashes. HMAC does not add anything to security here, except acting as kind of salt.</p>

<p>HMAC is relevant, when you use hashing function as a digital signature of message/file (the way <a href=""http://www.php.net/downloads.php"" rel=""nofollow"">php.net uses it one their downloads page</a> for example). You use HMAC key, so that only people that know this key can verify authenticity of hashed content (as contrasted to php.net downloads, where everyone can check md5 of downloaded file) and to make it more difficult to spoof the message that produces same hash (you need to know the key, to know what hash to target)</p>
","7013496","362","<php><hmac>","2","1","1","2011-08-11 07:33:12","7013496","0","0","869912","","2011-08-10 15:15:21","2011-08-02 22:07:07","","2011-08-11 07:33:12","2011-08-10 15:31:54"
"12789389","HMAC URLs instead of login?","<p>In implementing my site (a Rails site if it makes any difference), one of my design priorities is to relieve the user of the need to create yet another username and password while still providing useful per-user functionality.</p>

<p>The way I am planning to do this is:</p>

<ol>
<li>User enters information on the site. Information is associated with the user via server-side session.</li>
<li>User completes entering information, server sends an access URL via e-mail to the user roughly in the form of: <code>http://siteurl/&lt;user identifier&gt;/&lt;signature: HMAC(secret + salt + user identifier)&gt;</code></li>
<li>User clicks URL, site looks up user ID and salt and computes the HMAC with the server-stored secret and authenticates if the computed HMAC and signature match.</li>
</ol>

<p>My question is: is this a reasonably secure way to accomplish what I'm looking to do? Are there common attacks that would render it useless? Is there a compelling reason to abandon my desire to avoid a username/password? Is there a must-read book or article on the subject?</p>

<p>Note that I'm not dealing with credit card numbers or anything exceedingly private, but I would still like to keep the information reasonably secure.</p>
","<p>One word (well, actually two) - <code>Referer</code> header.
The next site your user goes to after visiting yours will see his credentials in this header. Moreover, the user will not be able to change his credentials after they have been compromised that way.</p>

<p>The idea of username/password authentication is that it involves two separate pieces of information - a known user id and an unknown password that can be freely changed on per-user basis. In your system (apart from the Referer thing), there is one single password for all - the ""secret."" I also suspect it will be reasonably easy to bruteforce the signature (since I know my user id) and recover the secret, rendering the whole system useless.</p>
","12792534","361","<ruby-on-rails><security><hmac>","0","5","2","2012-10-09 04:50:23","12792534","1","","826199","","2012-10-08 21:36:27","2012-10-08 20:59:08","","","2012-10-09 03:45:21"
"12789389","HMAC URLs instead of login?","<p>In implementing my site (a Rails site if it makes any difference), one of my design priorities is to relieve the user of the need to create yet another username and password while still providing useful per-user functionality.</p>

<p>The way I am planning to do this is:</p>

<ol>
<li>User enters information on the site. Information is associated with the user via server-side session.</li>
<li>User completes entering information, server sends an access URL via e-mail to the user roughly in the form of: <code>http://siteurl/&lt;user identifier&gt;/&lt;signature: HMAC(secret + salt + user identifier)&gt;</code></li>
<li>User clicks URL, site looks up user ID and salt and computes the HMAC with the server-stored secret and authenticates if the computed HMAC and signature match.</li>
</ol>

<p>My question is: is this a reasonably secure way to accomplish what I'm looking to do? Are there common attacks that would render it useless? Is there a compelling reason to abandon my desire to avoid a username/password? Is there a must-read book or article on the subject?</p>

<p>Note that I'm not dealing with credit card numbers or anything exceedingly private, but I would still like to keep the information reasonably secure.</p>
","<p>I've pondered similar passwordless login for iPhone apps &mdash; the biggest problem for a webapp is that logging in becomes unnecessarily tedious.</p>

<p>That said, here's a simple modification:</p>

<ol>
<li>User enters e-mail address.</li>
<li>Server generates a random authentication (e.g. 128 bits of /dev/urandom, base64-encoded) token and saves <code>H(authtoken)</code> to the DB along with a timestamp, and then sends an email with <code>https://example.com/login/userid?auth=authtoken</code></li>
<li>User clicks URL, server checks that the token is in the DB and not expired, <em>removes the token from the DB</em> and sets a session cookie.</li>
</ol>

<p>Your server needs to store a little more state, but it needed to store state anyway. It works roughly the same as any good password reset flow, which <em>presumably</em> makes it <em>theoretically</em> no less secure. In practice, however, it does not leave as obvious an audit trail as account-hijack-via-password-reset because the ""password reset"" flow is now the normal login flow.</p>

<p>You could also do something similar with a MAC and timestamp <code>(uid,timestamp,MAC_k(uid,timestamp))</code> &mdash; the basic problem there is that anyone with access to the MAC key (e.g. a database backup) can generate arbitrary authentication tokens, and databases are leaked all the time.</p>

<p>When hashing/MACing, beware of ""cryptographic splicing"" attacks.</p>

<p>Additionally, a common mistake is to reveal whether a given email address has an account (often the login says ""invalid email/password"" but the password reset flow gives it away &mdash; the better way is to always send an email, and say ""there's no account associated with this email"" <em>in the email</em>, ideally in the same number of bytes as the success response!).</p>
","12792989","361","<ruby-on-rails><security><hmac>","0","1","2","2012-10-09 04:50:23","12792534","1","","826199","","2012-10-08 21:36:27","2012-10-08 20:59:08","","","2012-10-09 04:50:23"
"49398759","What does doFinal function do in creation of HMac in java","<p>I have a hmac generation method in java which is defined as follows:-</p>

<pre><code>String encStr = ""POST\n"" + timestamp + ""\n"" + message;
    Mac sha256_HMAC = Mac.getInstance(""HmacSHA1"");
    SecretKeySpec secret_key = new SecretKeySpec(secret.getBytes(), ""HmacSHA1"");
    sha256_HMAC.init(secret_key);

    String hash = Base64.getEncoder().encodeToString(sha256_HMAC.doFinal(encStr.getBytes()));

    return hash;
</code></pre>

<p>where secret and function name is my private keys and name.
I just want to know what doFinal function does as the oracle documents say it is resetting the key but they have explicit reset method as well</p>
","<p>Think about when you have a large amount of data, you will do:</p>

<pre><code>sha256_HMAC.init()
while(read more data into buffer) {
    sha256_HMAC.upadte(buffer)
}
result = sha256_HMAC.doFinal()
</code></pre>

<p>So, what <code>doFinal(buffer)</code> do is:</p>

<pre><code>do `update(buffer)` 
calculate the cryptography result
reset the HmacSHA1 instance
return the cryptography result
</code></pre>

<p>The <code>doFinal</code> means this is the last(final) step to calculate the result, and there is no more data.</p>

<p>From Java document (<a href=""https://docs.oracle.com/javase/8/docs/api/javax/crypto/Mac.html"" rel=""nofollow noreferrer"">https://docs.oracle.com/javase/8/docs/api/javax/crypto/Mac.html</a>):</p>

<ul>
<li><p><code>byte[] doFinal()</code> Finishes the MAC operation.</p></li>
<li><p><code>byte[] doFinal(byte[] input)</code> Processes the given array of bytes and finishes the MAC operation.</p></li>
</ul>
","49398846","356","<java><hmac>","0","1","1","2018-03-21 05:32:12","49398846","2","","","","","2018-03-21 05:24:50","","","2018-03-21 05:32:12"
"48774924","api hmac signature in request header doesn't work","<p>I'm trying to use ICOBench API to access ICO data. According to their <a href=""https://icobench.com/developers"" rel=""nofollow noreferrer"">documentation</a> it is necessary to sign every request together with json parameters using hmac sha384. </p>

<p>When I don't use any parameters, the signature works as I'm only hashing the private key. But when I try hashing parameters with the key I get an <code>invalid signature error</code></p>

<p>Code that partially works. Returns data from api endpoint with no parameters:</p>

<pre><code>headers = {'Accept': 'application/json',
           'Content-Type': 'application/json',
           'X-ICObench-Key': PUB_KEY
           }

sig = hmac.new(PR_KEY,digestmod=hashlib.sha384).digest()

headers.update({'X-ICObench-Sig': base64.b64encode(sig)}

response = requests.request('POST', 'https://icobench.com/api/v1/icos/all', headers=headers)
</code></pre>

<p>If i try using parameters at the end of the url:</p>

<pre><code>params = {'page':3}

response = requests.request('POST', 'https://icobench.com/api/v1/icos/all', headers=headers, params=params)
</code></pre>

<p>Returns page 0 as if no parameters we re used.</p>

<p>Code that doesn't work at all. <code>invalid signature error</code>. Here I use <code>PR_KEY</code> to hash json data, same way as in <a href=""https://github.com/ICObench/data-api/blob/master/ICObenchAPI.js"" rel=""nofollow noreferrer"">this ICObench js example</a> :</p>

<pre><code>headers = {'Accept': 'application/json',
           'Content-Type': 'application/json',
           'X-ICObench-Key': PUB_KEY
           }

params = {'page':3}

sig = hmac.new(PR_KEY, json.dumps(params), digestmod=hashlib.sha384).digest()

headers.update({'X-ICObench-Sig': base64.b64encode(sig)}

response = requests.request('POST', 'https://icobench.com/api/v1/icos/all', headers=headers)
</code></pre>

<p>What am I missing?</p>
","","","355","<python-2.7><python-requests><hmac>","1","","0","2018-02-13 21:32:56","","2","","7392527","","2018-02-13 21:32:56","2018-02-13 20:16:57","","",""
"43233746","C# MD5 to CryptoJS and postman","<p>Hi can anyone help me on matching my c# code to cryptojs</p>

<p>heres the method </p>

<pre><code>   private string getRequestBase64content(HttpRequest req)
    {
        byte[] hash = ComputeHash(req.Body);
        var requestContentBase64String = """";
        if (hash != null)
        {
            requestContentBase64String = Convert.ToBase64String(hash);
        }

        return requestContentBase64String;
    }
</code></pre>

<p>and here is the code for computehash</p>

<pre><code>       private byte[] ComputeHash(Stream body)
    {
        using (MD5 md5 = MD5.Create())
        {
            byte[] hash = null;
            var content = ReadFully(body);
            if (content.Length != 0)
            {
                hash = md5.ComputeHash(content);
            }
            return hash;
        }
    }

    private byte[] ReadFully(Stream input)
    {
        byte[] buffer = new byte[16 * 1024];
        using (MemoryStream ms = new MemoryStream())
        {
            int read;
            while ((read = input.Read(buffer, 0, buffer.Length)) &gt; 0)
            {
                ms.Write(buffer, 0, read);
            }
            return ms.ToArray();
        }
    }
</code></pre>

<p>Im trying to match it using postman but no luck the values are different  here is my pre-request script</p>

<pre><code>var requestBody = """";
var firstpass = true;
for(var param in request.data)
{
    if(!firstpass){
        requestBody += ""&amp;"";
    }
    requestBody += param + ""="" + request.data[param];
    firstpass = false;
}

var requestContentBase64String = """";
if(requestBody){
    // MD5 hash and convert the request body string to base 64
    requestContentBase64String = CryptoJS.MD5(requestBody).toString(CryptoJS.enc.Base64);
}

postman.setGlobalVariable(""signatureContent"", requestContentBase64String);
</code></pre>

<p>BTW im using asp.net core 
Any help would be appreciated Thanks</p>
","","","354","<c#><asp.net><postman><hmac><cryptojs>","1","","0","2017-04-05 14:13:05","","2","","","","","2017-04-05 14:13:05","","",""
"31269947","AWS REST API v4, SignatureDoesNotMatch, wrong Signature using example values/algo steps","<p>Why am I getting different values for ""Signature"" from the example here (from which I copied values and algorithm steps)?</p>

<p>Input:     </p>

<pre><code>var YourSecretAccessKey = 'wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY';
var date = '20130524';

var signing_key = getSignatureKey(YourSecretAccessKey, date, 'us-east-1', 's3');

StringToSign: AWS4-HMAC-SHA256
20130524T000000Z
20130524/us-east-1/s3/aws4_request
3bfa292879f6447bbcda7001decf97f4a54dc650c8942174ae0a9121cf58ad04

var Signature = Crypto.HmacSHA256( signing_key, StringToSign );
</code></pre>

<p>Output</p>

<pre><code>Signature: c4b97c8d906d49d5fb7a14479fc69b033cbf2d1b9bb67df6058ec8ab4714ee97
</code></pre>

<p>As you can see, the Signature result is different from the example from Amazon here: <a href=""http://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html"" rel=""nofollow"">http://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html</a></p>

<pre><code>Signature: aeeed9bbccd4d02ee5c0109b86d86835f995330da4c265957d157751f604d404
</code></pre>

<p>Maybe my getSignatureKey function isn't performing the Hmac.Sha256 functions correctly? </p>

<pre><code>function getSignatureKey(key, dateStamp, regionName, serviceName) {

   var hs = Crypto.HmacSHA256;
   var kSigning = hs(hs(hs(hs(""AWS4"" + YourSecretAccessKey,dateStamp),regionName),serviceName),""aws4_request"");

   return kSigning;
}
</code></pre>

<p>I get this signing_key, fwiw:</p>

<pre><code>//signing_key: 582cf07cc7ea5cd0a5c0a1f6422cf32eef38fdae7a4073d17ba0195cbf5c85ce
</code></pre>

<p>The example doesn't show the signing_key result, so I can't know if the signing_key is correct. What I know is the resulting Signature is not like in the example result.</p>

<p>The example url result will give ""Request has expired"", which is expected, but when using a current date, I get SignatureDoesNotMatch.</p>

<p>Something is wrong with the Signature generation.</p>

<p>Thanks for any help!</p>
","","","350","<rest><amazon-web-services><amazon-s3><hmac><sha256>","0","","0","2015-07-07 15:45:15","","2","","2920409","","2015-07-07 15:45:15","2015-07-07 13:29:13","","",""
"27974647","using was cognito identity id to protect my rest end points via hmac?","<p>Can I use AWS Cognito IdentityID as HMAC key on SSL to protect my REST services?</p>

<p>I would like to secure and setup the following application.</p>

<ol>
<li>A HTML/Javascript client using AWS Cognito (future plans to sync across clients) on an SSL Page</li>
<li>A Spring Boot REST app</li>
<li>AWS DynamoDB</li>
</ol>

<p>So the flow would be:</p>

<ol>
<li><p>I setup the javascript buttons for google+, amazon and Facebook logins and grab the AWS Cognito token.</p></li>
<li><p>Once I have the Cognito ID, I make a call to my user service (/user/auth) and see if the user exists using the ID. If they don't I create a profile record in DynamoDB. (cognito id is the key)
If they exist I can look up the user profile in dynamoDB and get their authorisation to be used in Spring Security.</p></li>
<li><p>I want to now secure all calls to my service with HMAC by using the Cognito ID. </p></li>
</ol>

<p>is this safe? </p>

<p>Can I just add spring security on top of Spring boot and implement HMAC checks? If so how? Why isn't this in spring already via OAUTH?</p>

<p>thanks in advance. </p>
","","","348","<javascript><spring><rest><amazon-web-services><hmac>","2","","0","2015-04-22 12:50:58","","0","2","772936","","2015-01-15 23:11:24","2015-01-15 23:05:41","","",""
"31447874","ColdFusion alternative for PHP md5 function","<p>I have tried to HMAC MD5 implementation in Coldfusion. I am having PHP code for the same. I would like find out the best way to convert the same into ColdFusion.</p>

<p><strong><em>PHP</em></strong></p>

<pre><code>  $output = hmac($key, $str);

  function hmac ($key, $data)
  {
    // RFC 2104 HMAC implementation for php.
    // Creates an md5 HMAC.
    // Eliminates the need to install mhash to compute a HMAC

    $b = 64; // byte length for md5
    if (strlen($key) &gt; $b) {
      $key = pack(""H*"",md5($key));
    }
    $key  = str_pad($key, $b, chr(0x00));
    $ipad = str_pad('', $b, chr(0x36));
    $opad = str_pad('', $b, chr(0x5c));
    $k_ipad = $key ^ $ipad ;
    $k_opad = $key ^ $opad;

    return md5($k_opad  . pack(""H*"",md5($k_ipad . $data)));
  }
</code></pre>

<p>I have tried the following in code in ColdFusion.</p>

<p><strong><em>ColdFusion</em></strong></p>

<pre><code>  &lt;cfset outputOld = hmacEncrypt(key, input, 'HmacMD5') /&gt;
  &lt;cfset output = binaryEncode(outputOld, 'hex') /&gt;

  &lt;cffunction name=""hmacEncrypt"" returntype=""binary"" access=""public"" output=""false""&gt;
    &lt;cfargument name=""signKey"" type=""string"" required=""true"" /&gt;
    &lt;cfargument name=""signMessage"" type=""string"" required=""true"" /&gt;
    &lt;cfargument name=""algorithm"" type=""string"" default=""HmacMD5"" /&gt;
    &lt;cfargument name=""charset"" type=""string"" default=""UTF-8"" /&gt;

    &lt;cfset var msgBytes = charsetDecode(arguments.signMessage, arguments.charset) /&gt;
    &lt;cfset var keyBytes = charsetDecode(arguments.signKey, arguments.charset) /&gt;
    &lt;cfset var keySpec = createObject(""java"",""javax.crypto.spec.SecretKeySpec"")  /&gt;
    &lt;cfset var mac = createObject(""java"",""javax.crypto.Mac"") /&gt;

    &lt;cfset key = keySpec.init(keyBytes, arguments.algorithm) /&gt;
    &lt;cfset mac = mac.getInstance(arguments.algorithm) /&gt;
    &lt;cfset mac.init(key) /&gt;
    &lt;cfset mac.update(msgBytes) /&gt;

    &lt;cfreturn mac.doFinal() /&gt;
  &lt;/cffunction&gt;
</code></pre>

<p>But I am getting different values for PHP and ColdFusion. I need to get the same as PHP.</p>

<p>Any help is much appreicated.</p>
","<p>I strongly recommend you use the <a href=""https://github.com/bennadel/Crypto.cfc"" rel=""nofollow noreferrer"">Crypto.cfc</a> by <a href=""http://www.bennadel.com/blog/2412-crypto-cfc-for-hmac-sha1-hmac-sha256-and-hmac-md5-code-generation-in-coldfusion.htm"" rel=""nofollow noreferrer"">Bennadel</a>.It provides methods for generating Hmac values with the SHA-1, SHA-256, and MD5 algorithms and is very cleanly written.</p>

<p>Also, I would prefer to use the <code>hash_hmac()</code> function available in PHP for it's performance and simplicity.</p>

<pre><code>string hash_hmac('md5', $input, $secretKey);
</code></pre>

<p>As far as I can understand, you're comparing a string output with a binary output, which won't match. <code>md5</code> returns a string output but the <code>doFinal()</code> in <code>javax.crypto.Mac</code> returns a <code>byte[]</code> representation. You need to typecast accordingly. Correct it and the result is the same.</p>

<h2>Update</h2>

<p>You can check the base code in both the language:</p>

<p><a href=""http://trycf.com/gist/4da625db07d730198ab3/acf11?theme=monokai"" rel=""nofollow noreferrer"">ColdFusion Code</a></p>

<p><a href=""http://phpfiddle.org/lite/code/411cb5ef0560be3e8441"" rel=""nofollow noreferrer"">PHP Code</a></p>

<p>As you can see, the results are the same. Dude, it's your code only and it's working fine with the addition of only <code>lcase</code> as pointed by <a href=""https://stackoverflow.com/users/104223/leigh"">@Leigh</a>.</p>
","31453912","347","<php><coldfusion><md5><coldfusion-8><hmac>","1","1","1","2015-07-16 17:21:23","31453912","3","","1153449","","2015-07-16 13:26:31","2015-07-16 07:26:35","","2017-05-23 12:29:47","2015-07-16 12:16:52"
"39275323","Wrong HMAC using PHP 5.0.4","<p>I'm trying to enable HMAC Hashing (SHA256) with PHP 5.0.4 and using phpseclib (to my knowledge in this case phpseclib relies on a native PHP spec), the sample code I'm using it's pretty simple:</p>

<pre><code>
    include('Crypt/Hash.php');

    $hash = new Crypt_Hash('sha256');
    $hash->setKey('abcdefg');
    echo bin2hex($hash->hash('something'));
</code></pre>

<p>it generates an HMAC with this string:</p>

<p>e678e33c727ddf7172d3521cf9c0c2a15b66e03eb96d77795fa4adb338dc24a9</p>

<p>But apparently, this string is invalid because doing the same with this online tools:</p>

<p><a href=""http://www.freeformatter.com/hmac-generator.html"" rel=""nofollow"">http://www.freeformatter.com/hmac-generator.html</a></p>

<p><a href=""http://beautifytools.com/hmac-generator.php"" rel=""nofollow"">http://beautifytools.com/hmac-generator.php</a></p>

<p><a href=""http://www.jetcityorange.com/hmac/"" rel=""nofollow"">http://www.jetcityorange.com/hmac/</a></p>

<p>I get this string:</p>

<p>9a43ff294bdfed399e2d5a3d739a4efb7eccc23269b80b3f0d855937d35ae06f</p>

<p>What am I doing wrong?</p>

<p>Note: SHA1 encoding works perfectly.</p>

<p>Thanks in advance.</p>
","<p>It was a problem related to float to int conversions on 32-bit Linux pre-PHP 5.3. Developers of phpseclib fixed the issue on version 1.0.4 &amp; 2.0.4</p>
","39890700","347","<php><hash><sha256><hmac><phpseclib>","0","1","1","2016-10-13 06:41:11","39890700","10","","","","","2016-09-01 15:16:26","","2016-10-13 06:41:11","2016-10-06 08:03:56"
"53405081","Generate HMAC Signature on PHP","<p>how do you apply the system below to php?</p>

<pre><code>StringToSign = HTTPMethod+"":""+RelativeUrl+"":""+AccessToken+"":""+
Lowercase(HexEncode(SHA-256(RequestBody)))+"":""+Timestamp

Signature = HMAC-SHA256(apiSecret, StringToSign)
</code></pre>

<p>my script :</p>

<pre><code>$encoderData = json_encode($bodyToHash, JSON_UNESCAPED_SLASHES);
$hash        = hash(""sha256"", $encoderData);
$stringToSign   = $Method. "":"" .$url . "":"" . $auth_token . "":"" . $hash . "":"" . $Timestamp;
$auth_signature = hash_hmac('sha256', $secret_key, $stringToSign,false);
</code></pre>

<p>Thank you,</p>
","<p>I don't know what you mean but
You can try this;</p>

<pre><code>&lt;?php
    $stringToSign = 'abcd';
    $apiSecret = 'secretkey';

    $hashed = hash_hmac('sha256', $stringToSign, $apiSecret);
?&gt;
</code></pre>
","53405134","345","<php><sha256><hmac>","-3","0","2","2018-12-05 08:42:58","","3","","10683556","","2018-11-21 04:41:53","2018-11-21 03:59:35","","","2018-11-21 04:09:15"
"53405081","Generate HMAC Signature on PHP","<p>how do you apply the system below to php?</p>

<pre><code>StringToSign = HTTPMethod+"":""+RelativeUrl+"":""+AccessToken+"":""+
Lowercase(HexEncode(SHA-256(RequestBody)))+"":""+Timestamp

Signature = HMAC-SHA256(apiSecret, StringToSign)
</code></pre>

<p>my script :</p>

<pre><code>$encoderData = json_encode($bodyToHash, JSON_UNESCAPED_SLASHES);
$hash        = hash(""sha256"", $encoderData);
$stringToSign   = $Method. "":"" .$url . "":"" . $auth_token . "":"" . $hash . "":"" . $Timestamp;
$auth_signature = hash_hmac('sha256', $secret_key, $stringToSign,false);
</code></pre>

<p>Thank you,</p>
","<p>doing some BCA stuff? :p</p>

<p>you can use this function if you wan to use <code>GET</code>:</p>

<pre><code>strtolower(hash('sha256', ''));
</code></pre>
","53628227","345","<php><sha256><hmac>","-3","0","2","2018-12-05 08:42:58","","3","","10683556","","2018-11-21 04:41:53","2018-11-21 03:59:35","","","2018-12-05 08:42:58"
"18654287","Using HMAC-SHA256 Authentication for WCF with HttpModule","<p>I'm trying to do HMAC-SHA256 authentication for my WCF webservices.</p>

<p>After much reading about HMAC-SHA on the web, I started to apply them into my project.</p>

<p>Now that I've successfully encrypt the message on the client-side, but how do I go about authenticating the request before the request entering the WebMethods?</p>

<p>I suppose I should add a HttpModule to tap into the Init() event and do validation there?</p>

<p>But as soon as I added the HttpModule to my WCF project and configure the web.config, I'm getting error saying:</p>

<pre><code>An error occurred while receiving the HTTP response to http://localhost:61884/MyService.svc.
This could be due to the service endpoint binding not using the HTTP protocol.
This could also be due to an HTTP request context being aborted by the server (possibly due to the service shutting down).
See server logs for more details.
</code></pre>

<p>Am I right about using HttpModule in this context?</p>

<p>My web.config, just in-case</p>

<pre><code>&lt;system.web&gt;
    &lt;compilation debug=""true"" targetFramework=""4.0"" /&gt;
    &lt;httpModules&gt;
        &lt;add name=""HttpAuthenticationModule"" type=""WcfService.HttpAuthenticationModule"" /&gt;
    &lt;/httpModules&gt;
&lt;/system.web&gt;
</code></pre>
","<p>I figured that HttpModule doesn't work for self-hosted WCF services that launched from VisualStudio. After I host the WCF service in IIS, HttpModule is hitting breakpoint at BeginRequest() as what I expected now.</p>

<p>Hope this helps those who face the same problem.</p>
","18723554","343","<wcf><hmac>","0","0","1","2013-09-10 15:51:54","","5","","1034816","","2013-09-06 13:34:53","2013-09-06 09:21:28","","","2013-09-10 15:51:54"
"24486456","HMACSHA1 gives different output between JS and VB.Net","<p>I'm trying to translate a JavaScript application of TOTP to VB.Net: <a href=""http://blog.tinisles.com/2011/10/google-authenticator-one-time-password-algorithm-in-javascript/"" rel=""nofollow noreferrer"">http://blog.tinisles.com/2011/10/google-authenticator-one-time-password-algorithm-in-javascript/</a></p>

<p>I have encountered a problem during translation of the HMAC-part:</p>

<pre><code>//Javascript:
var hmacObj = new jsSHA(""Hello World!"", 'HEX');
var hmac = hmacObj.getHMAC(""secret"", 'HEX', 'SHA-1', ""HEX"");
</code></pre>

<p>This is a codesnippet of my translation in VB.Net</p>

<pre><code>'VB.Net:
Dim hmacObjTest As New HMACSHA1(System.Text.Encoding.UTF8.GetBytes(""secret""))
Dim hmacTest As Byte() = hmacObjTest.ComputeHash(System.Text.Encoding.UTF8.GetBytes(""Hello World!""))
Dim hmacHexTest As New StringBuilder()

    For i As Integer = 0 To hmacTest.Length - 1
        hmacHexTest.Append(hmacTest(i).ToString(""x2""))
    Next i

Dim strTest As String = ""HMAC = "" &amp; hmacHexTest.ToString()
</code></pre>

<p>The problem is that i get different output from the two languages:</p>

<pre><code>Output JS: 5efed98b0787c83f9cb0135ba283c390ca49320e //Tested from jsSha demo: http://caligatio.github.io/jsSHA/
Output VB.Net: 87b0154b8420c0b58869ca103f481e824d8876ea
</code></pre>

<p>The outputs are not at all the same like they are in this question: <a href=""https://stackoverflow.com/questions/21615322/hmacsha1-output-hex-strings-different-between-vb-net-and-python"">hmacsha1 output hex strings different between vb.net and python</a></p>

<p>Does anyone know where I might be doing something wrong?</p>
","<p>Hashes don't work on strings - they work on the binary representation of the string. Now you use UTF-8 as encoding for the dotnet version, while the JavaScript version is very likely not to use UTF-8 - so you get different binary representations, resulting in different hashes.</p>

<p>Use either <a href=""http://www.webtoolkit.info/javascript-utf8.html"" rel=""nofollow"">webttolkit</a> or the hackish <code>var utfstring = unescape(encodeURIComponent(rawstring));</code> to convert to UTF-8 before calcualting the hash.</p>
","24486582","342","<vb.net><hmac><hmacsha1>","1","2","1","2014-06-30 11:28:15","","0","","-1","","2017-05-23 12:08:50","2014-06-30 09:02:52","","","2014-06-30 09:10:54"
"38853390","Objective Equivelent to base16().decode(String)","<p>Currently our team is working on an HMAC key but the results on iOS and Android are different. The Java part is working fine but the iOS part appears not to be working.</p>

<p>We have established that the problem is with the HMAC_KEY in java the key first gets converted to a base16 byte[]. What would be the Objective-C equivelent to the following?</p>

<pre><code>        byte[] hmacKey = BaseEncoding.base16().decode(HMAC_KEY);
        SecretKeySpec signingKey = new SecretKeySpec(hmacKey, HMAC_SHA256_ALGORITHM);
        Mac mac = Mac.getInstance(HMAC_SHA256_ALGORITHM);
        mac.init(signingKey);
        byte[] rawHmac = mac.doFinal(data.getBytes(C_UTF8));



        return BaseEncoding.base64().encode(rawHmac);
</code></pre>

<p>curently in ios we have the following:</p>

<pre><code>NSData *saltData = [salt dataUsingEncoding:NSUTF8StringEncoding];
NSData *paramData = [signingData dataUsingEncoding:NSUTF8StringEncoding];
NSMutableData* hash = [NSMutableData dataWithLength:CC_SHA256_DIGEST_LENGTH ];
CCHmac(kCCHmacAlgSHA256, saltData.bytes, saltData.length, paramData.bytes, paramData.length, hash.mutableBytes);
NSString *base64Hash = [hash base64Encoding];
</code></pre>

<p>the problem is withing the <code>BaseEncoding.base16().decode(HMAC_KEY)</code> part how do we do this in Objective-C?</p>
","<p>From your Java code, you need to convert HMAC_KEY(HexDecimalString) to NSData first, then you can do HMAC_SHA256 Calculation. This is my Swift solution</p>

<pre><code>public extension String {

    func sha256(key: NSData) -&gt; String {
        let inputData: NSData = self.dataUsingEncoding(NSUTF8StringEncoding, allowLossyConversion: false)!
        let keyData = UnsafePointer&lt;UInt8&gt;(key.bytes)

        let algorithm = HMACAlgorithm.SHA256
        let digestLen = algorithm.digestLength()
        let result = UnsafeMutablePointer&lt;CUnsignedChar&gt;.alloc(digestLen)

        CCHmac(algorithm.toCCHmacAlgorithm(), keyData, key.length, inputData.bytes, Int(inputData.length), result)
        let data = NSData(bytes: result, length: digestLen)
        result.destroy()
        return data.base64EncodedStringWithOptions(NSDataBase64EncodingOptions.Encoding64CharacterLineLength)
    }

    func dataFromHexadecimalString() -&gt; NSData? {
        let data = NSMutableData(capacity: characters.count / 2)

        let regex = try! NSRegularExpression(pattern: ""[0-9a-f]{1,2}"", options: .CaseInsensitive)
        regex.enumerateMatchesInString(self, options: [], range: NSMakeRange(0, characters.count)) { match, flags, stop in
            let byteString = (self as NSString).substringWithRange(match!.range)
            var num = UInt8(byteString, radix: 16)
            data?.appendBytes(&amp;num, length: 1)
        }

        return data
    }
}

enum HMACAlgorithm {
    case MD5, SHA1, SHA224, SHA256, SHA384, SHA512

    func toCCHmacAlgorithm() -&gt; CCHmacAlgorithm {
        var result: Int = 0
        switch self {
        case .MD5:
            result = kCCHmacAlgMD5
        case .SHA1:
            result = kCCHmacAlgSHA1
        case .SHA224:
            result = kCCHmacAlgSHA224
        case .SHA256:
            result = kCCHmacAlgSHA256
        case .SHA384:
            result = kCCHmacAlgSHA384
        case .SHA512:
            result = kCCHmacAlgSHA512
        }
        return CCHmacAlgorithm(result)
    }

    func digestLength() -&gt; Int {
        var result: CInt = 0
        switch self {
        case .MD5:
            result = CC_MD5_DIGEST_LENGTH
        case .SHA1:
            result = CC_SHA1_DIGEST_LENGTH
        case .SHA224:
            result = CC_SHA224_DIGEST_LENGTH
        case .SHA256:
            result = CC_SHA256_DIGEST_LENGTH
        case .SHA384:
            result = CC_SHA384_DIGEST_LENGTH
        case .SHA512:
            result = CC_SHA512_DIGEST_LENGTH
        }
        return Int(result)
    }
}
</code></pre>

<p>You can simply get base64Hash like this and the result was verified:</p>

<pre><code>print(dataString.sha256(HMAC_KEY.dataFromHexadecimalString()))
</code></pre>
","40290694","341","<java><android><ios><objective-c><hmac>","1","0","1","2016-10-28 02:15:57","","0","3","","","","2016-08-09 14:21:21","","2016-10-28 02:15:57","2016-10-27 17:20:46"
"29457974","Why are REST calls to S3 using the AWS Signature v4 not really using the signature process?","<p>I'm working with the AWS <a href=""https://web-identity-federation-playground.s3.amazonaws.com/index.html"" rel=""nofollow"">Federated Web Identitiy Playground</a> and am wondering about the signature V4 usage to access AWS or specifically S3.</p>

<p>If I look at the <a href=""https://web-identity-federation-playground.s3.amazonaws.com/js/sigv4.js"" rel=""nofollow"">Sig4.js</a> file being loaded, it</p>

<pre><code>/**
  * Contains functions to construct a canonical request, create the string to sign,
  * calcuate the signature, and finally to make a signed sigv4 request. Also contains
  * a function to make REST calls to S3. 
  */
</code></pre>

<p>I'm not sure about the methot allowing to make REST calls to S3 (provided method <code>callS3WithREST</code>). Although the method is included in the sig4, it does not use any of it's logic.</p>

<p>When reading the AWS docs they stress to always use signature V4 for all request to AWS services. So I'm wondering:</p>

<p><strong>Question</strong>:<br>
Should I not use the signature to make REST calls to S3? What is the purpose of the signature process then? Thanks for some clarification.</p>
","<p>You definitely need to sign your REST requests to S3, or they won't won't succeed unless the request involves something available to anonymous users.  And, yes, you ""should"" use Signature Version 4 to interact with S3, because (among other reasons) newer S3 regions don't support the older Signature Version 2.</p>

<p>What's curious, here, is that <code>callS3WithREST</code> appears to actually be an implementation of Signature Version 2.</p>

<p>Why this is there is not at all clear to me, but I have a convincing theory: it's old code copy/pasted and/or left over from a V2 script that's a predecessor to this one.</p>

<p>S3's implementation of Signature Version 2 was almost exactly the same as V2 as supported by other AWS services... but different enough to be incompatible.</p>

<p>(S3's V2 ""string to sign,"" unlike the standard implementation, does not include the <code>Host:</code> header value as the 2nd line, presumably because the bucket name that is required in the ""canonical resource"" section made it resundant, and there are usually multiple variant hostnames for the same bucket).</p>

<p>So, a V2 signing library would have to make an exception for S3, due to the difference in the algorithm.</p>

<p>This isn't true for V4, which is sufficiently comprehensive that the same code can sign requests for S3 as well as other services, if it doesn't make any improper assumptions.</p>

<p>So my suspicion is that this is best explained as some inappropriately left over code from when, in a previous lifetime, this was a Signature V2 script that was transmogrified into a V4 script.</p>
","29462176","340","<javascript><rest><amazon-web-services><amazon-s3><hmac>","0","1","1","2015-04-05 21:01:46","29462176","0","","","","","2015-04-05 13:48:08","","","2015-04-05 21:01:46"
"12519741","Can I use a hashed password as the secret for generating a hmac?","<p>I think it would be very comfortable to use the user's password hash as the secret for generating a hmac. Why is OAuth and others using tokens and nonces?</p>

<p>I think of something like this:</p>

<p>Client enters a password in the ui.
The application registers with the webservice using the hash of that password, which is stored on the server.
Form now on that hash hasn't to be transmitted again.
The client can always regenerate the secret by asking the user to enter the password and hashing it. Every message is signed with this hash, the server can look it up by username or guid and check if the sent mac is valid.</p>

<p>A intruder on the server can get that hash, but doesn't know the users real password, anyway he could send valid request with that hash. But this is not likely to happen, the saved hashes could also be hashed again using a nonce. Anyway because the pwd-file will be on a client's server it should be obfuscated using e.g. base64 to avoid the file looking like {""password"":""a4bd146hashhashhash""}.</p>

<p>Most of all the real password of the user won't ever be transmitted. The request's will be secured with a timestamp/token against replay (I recognize the purpose of the token here).</p>

<p>Sending a hash would be perfectly applicable for me because the client will never be a simple website with a  tag e.g.. The webservice will be used in a ajax-based application and a java desktop application, both of them capable of hashing strings...</p>

<p>What's wrong with that? It's so simple, more RESTFul than anything related to authentication, and i think yet effective. What am I missing?</p>

<p>Greets, kruemel</p>
","","","338","<web-services><security><rest><authentication><hmac>","2","","0","2012-09-20 19:41:25","","11","","183528","","2012-09-20 19:41:25","2012-09-20 19:40:04","","",""
"24794239","Robot in C to access API not working, why?","<p>The authentication process in the <a href=""https://www.bitfinex.com"" rel=""nofollow"">Bitfinex</a> API is:</p>

<p>Say the client wants to make a request to</p>

<pre><code>POST https://api.bitfinex.com/v1/order/new
</code></pre>

<p>with a payload of </p>

<pre><code>{
""request"": ""/v1/order/new"",
""nonce"": ""1234"",
""option1"": ...
} 
</code></pre>

<p>The nonce provided must be strictly increasing.</p>

<p>To authenticate a request, use the following:</p>

<pre><code>payload = parameters-dictionary -&gt; JSON encode -&gt; base64
signature = HMAC-SHA384(payload, api-secret) as hexadecimal
send (api-key, payload, signature) 
</code></pre>

<p>These are encoded as HTTP headers named:</p>

<pre><code>X-BFX-APIKEY
X-BFX-PAYLOAD
X-BFX-SIGNATURE 
</code></pre>

<p>Full documentation in <a href=""https://www.bitfinex.com/pages/api"" rel=""nofollow"">https://www.bitfinex.com/pages/api</a></p>

<p>I want to build a robot, so I researched around and I wrote this code (whith help):</p>

<pre><code>#include&lt;openssl/pem.h&gt;

/* A BASE-64 ENCODER USING OPENSSL (by Len Schulwitz)
 * Parameter 1: A pointer to the data you want to base-64 encode.
 * Parameter 2: The number of bytes you want encoded.
 * Return: A character pointer to the base-64 encoded data (null-terminated for string output).
 * On linux, compile with ""gcc base64_encode.c -o b64enc -lcrypto"" and run with ""./b64enc"".
 * This software has no warranty and is provided ""AS IS"".  Use at your own risk.
 * Published at http://stackoverflow.com/questions/342409/how-do-i-base64-encode-decode-in-c
 */

/*This function will Base-64 encode your data.*/
char * base64encode (const void *b64_encode_me, int encode_this_many_bytes){
    BIO *b64_bio, *mem_bio;   //Declare two BIOs.  One base64 encodes, the other stores     memory.
    BUF_MEM *mem_bio_mem_ptr; //Pointer to the ""memory BIO"" structure holding the base64 data.

    b64_bio = BIO_new(BIO_f_base64());  //Initialize our base64 filter BIO.
    mem_bio = BIO_new(BIO_s_mem());  //Initialize our memory sink BIO.
    BIO_push(b64_bio, mem_bio);  //Link the BIOs (i.e. create a filter-sink BIO chain.)
    BIO_set_flags(b64_bio, BIO_FLAGS_BASE64_NO_NL);  //Don't add a newline every 64 characters.

    BIO_write(b64_bio, b64_encode_me, encode_this_many_bytes); //Encode and write our b64 data.
    BIO_flush(b64_bio);  //Flush data.  Necessary for b64 encoding, because of pad characters.

    BIO_get_mem_ptr(mem_bio, &amp;mem_bio_mem_ptr);  //Store address of mem_bio's memory structure.
    BIO_set_close(mem_bio,BIO_NOCLOSE); //Permit access to mem_ptr after BIOs are destroyed.
    BIO_free_all(b64_bio);  //Destroys all BIOs in chain, starting with b64 (i.e. the 1st one).

    (*mem_bio_mem_ptr).data[(*mem_bio_mem_ptr).length] = '\0';  //Adds a null-terminator.

    return (*mem_bio_mem_ptr).data; //Returns base-64 encoded data. (See: ""buf_mem_st"" struct).
}

#include&lt;stdio.h&gt;
#include&lt;curl/curl.h&gt;
#include&lt;string.h&gt;
#include&lt;malloc.h&gt;
#include&lt;openssl/hmac.h&gt;

int main(){

char key[]=""X-BFX-APIKEY:xxxx"";
char secret[]=""xxxx"";

//preparation of X-BFX-PAYLOAD header
char data[]=""{\""request\"":\""/v1/orders\"",\""nonce\"":\""46\""}"";
char pre_data[]=""X-BFX-PAYLOAD:"";
int bytes_to_encode=sizeof(data)-1; 
char *data_encoded=base64encode(data,bytes_to_encode);
char *payload;
payload=(char *)malloc(strlen(data_encoded)*sizeof(char)+strlen(pre_data)*sizeof(char));
*payload='\0';
strcat(payload,pre_data);
strcat(payload,data_encoded);

//variables related to hmac
HMAC_CTX ctx;
HMAC_CTX_init(&amp;ctx);
unsigned int len=128;
unsigned char *mac;
mac=(unsigned char *)malloc(sizeof(char)*len);
//using sha384
HMAC_Init_ex(&amp;ctx,secret,strlen(secret),EVP_sha384(),NULL);
HMAC_Update(&amp;ctx,(unsigned char *)&amp;data_encoded,strlen(data_encoded));
HMAC_Final(&amp;ctx,mac,&amp;len);

//preparation of X-BFX-SIGNATURE header
int i;
const char *pre_sign=""X-BFX-SIGNATURE:"";
size_t pre_sign_len=strlen(pre_sign);
char sign[pre_sign_len+2*len+1];
strcpy(sign,pre_sign);
char *p=&amp;sign[pre_sign_len];
//mac to hex
for(i=0;i&lt;len;i++){
   sprintf(p,""%02x"",(unsigned int)mac[i]);
   p+=2;  
}

//variables related to CURL
CURL *request;
FILE *answer=fopen(""answer.dat"",""w"");
CURLcode control;
struct curl_slist *headers=NULL;
//CURL preparation
curl_global_init(CURL_GLOBAL_SSL);
request=curl_easy_init();
curl_easy_setopt(request,CURLOPT_WRITEDATA,(void *)answer);
curl_easy_setopt(request,CURLOPT_URL,""https://api.bitfinex.com/v1/orders"");
curl_easy_setopt(request,CURLOPT_TIMEOUT,10);
curl_easy_setopt(request,CURLOPT_POST,1L); 
headers=curl_slist_append(headers,key);
headers=curl_slist_append(headers,payload);
headers=curl_slist_append(headers,sign);
curl_easy_setopt(request,CURLOPT_HTTPHEADER,headers);
curl_easy_setopt(request,CURLOPT_POSTFIELDS,"""");
curl_easy_setopt(request, CURLOPT_SSL_VERIFYPEER,0L);

//do
if((control=curl_easy_perform(request))!=CURLE_OK)printf(""curl error %d\n"",(int)control);

//clean up...
return 0;
}
</code></pre>

<p>But always when I send the request I receive the answer:</p>

<pre><code>{""message"":""Invalid X-BFX-SIGNATURE.""}
</code></pre>

<p>Since that the responses from APIs are not always precise I am not sure exactly what is wrong so I tried to change a lot of things like the string data format and the hmac process, but no result. Probably the problem is not in the hmac process which is working nicely for other API but now I cant figure out what is wrong.</p>

<p>Out of desperation I'm turning here, does anyone know why it is not working?</p>

<p>thanks in advance</p>
","<p>Solved, I tried an online hash encryption and it worked, the problem was in the hmac process but what is wrong is another question.</p>
","24812982","337","<c><json><openssl><base64><hmac>","-2","0","1","2014-09-30 23:37:51","","2","","3847302","","2014-07-17 16:15:37","2014-07-17 03:08:18","","","2014-07-17 20:31:27"
"56340513","How to compute a HMAC SHA256 in c#","<p>Edit: I've fixed the ascii encoding as pointed out by @DavidG</p>

<p>I'm creating an integration towards a vendor and the integration requires me to sign the message with a HMAC-SHA256 algorithm. </p>

<p>The simple test I've got from the vendor is that we're going to use this data:</p>

<pre><code>key: ""1234567890ABCDEF1234567890ABCDEF"" (hex)
data: ""00000000"" (ascii)
expected output (only first 32 chars): FF365893D899291C3BF505FB3175E880 (hex)
</code></pre>

<p>I've checked a number of online hmac generators and found them to return different results for me, some correct and some incorrect.</p>

<pre><code>Correct reply: https://www.liavaag.org/English/SHA-Generator/HMAC/ 
Correct reply: https://cryptii.com/pipes/hmac
Incorrect reply: https://codebeautify.org/hmac-generator
Incorrect reply: http://billatnapier.com/security01.aspx
</code></pre>

<p>Can anyone help me or point me in the right direction here? This is causing me to become bald very soon... </p>

<pre><code>    [TestClass()]
    public class AutogiroConcentFileWriterTests
    {
        [TestMethod()]
        public void ManualKVVTest()
        {
            String key = ""1234567890ABCDEF1234567890ABCDEF"";
            String message = ""00000000"";
            String expected = ""FF365893D899291C3BF505FB3175E880"";

            Encoding ascii = Encoding.ASCII;
            Byte[] key_bytes = this.KeyData(key);

            Byte[] message_bytes = ascii.GetBytes(message);

            System.Security.Cryptography.HMACSHA256 hmacSHA256 = new System.Security.Cryptography.HMACSHA256(key_bytes);
            Byte[] hash = hmacSHA256.ComputeHash(message_bytes);
            String data = this.ByteToString(hash);

            // only compare first 32 chars of the hash
            Assert.AreEqual(expected, data.Substring(0, 32));

            //Assert.AreEqual failed. 
            //Expected:&lt;FF365893D899291C3BF505FB3175E880&gt;. 
            //Actual:&lt;997BBD8C79F0D98FCA6470723CDB65D3&gt;.
        }

        private Byte[] KeyData(String key)
        {
            if (key.Length % 2 == 1)
                throw new Exception(""The binary key cannot have an odd number of digits"");

            byte[] arr = new byte[key.Length &gt;&gt; 1];

            Int32 pos = 0;
            for (int i = 0; i &lt; key.Length; i += 2)
            {
                Int32 b1 = key[i] - (key[i] &lt; 58 ? 48 : 55);
                Int32 b2 = key[i + 1] - (key[i + 1] &lt; 58 ? 48 : 55);
                arr[pos++] = (byte)((b1 &lt;&lt; 4) + b2);
            }

            return arr;
        }

        private String ByteToString(Byte[] buff)
        {
            Char[] retval = new char[buff.Length * 2];
            for (int i = 0; i &lt; buff.Length; i++)
            {
                String t = buff[i].ToString(""X2"");
                retval[i * 2] = t[0];
                retval[i * 2 + 1] = t[1];
            }
            return new String(retval);
        }
    }
</code></pre>
","<p>You are converting your key directly to bytes rather than interpreting it as a hex string. Using a string-to-bytes function from <a href=""https://stackoverflow.com/a/321404/1663001"">here</a>:</p>

<pre><code>public static byte[] StringToByteArray(string hex)
{
    return Enumerable.Range(0, hex.Length)
                     .Where(x =&gt; x % 2 == 0)
                     .Select(x =&gt; Convert.ToByte(hex.Substring(x, 2), 16))
                     .ToArray();
}
</code></pre>

<p>Change your code to this:</p>

<pre><code>Byte[] key_bytes = StringToByteArray(key);
</code></pre>
","56340813","335","<c#><hmac>","2","2","1","2019-05-28 13:20:09","56340813","6","","2135792","","2019-05-28 13:20:09","2019-05-28 10:47:22","","","2019-05-28 11:05:02"
"28488753","How to create a Tamper Evident Seals or Signature for HTML a Document","<p>I want to replace some PDF files with more accessible self contained HTML documents.</p>

<p>Images can be encoded using Data URI
<a href=""http://en.wikipedia.org/wiki/Data_URI_scheme"" rel=""nofollow"">http://en.wikipedia.org/wiki/Data_URI_scheme</a></p>

<p>I need to ensure the documents have not been tempered with For legal reasons
and if possible verify authenticity.</p>

<p>These documents are ""public"" so they don't need to be ""secure"" they need a 
tamper proof ""seal"" or signature which can easily show if a file has been altered.</p>

<p>The file will normally remain on the clients machine for their records.</p>

<p>I was contemplating using a MD5 hash, with my own long salt key word , that 
only I know.  The page will be saved with the hash appended to the file.</p>

<p>To check the page remove the last line and check the hash.</p>

<p>Any suggestions / links for further reading:</p>

<ul>
<li>for simple ways to  to create a secure seal workable solution</li>
<li>is an MD5 Hash suitable or are there better algorithms.</li>
<li>e.g HMAC-MD5 
<a href=""http://en.wikipedia.org/wiki/Hash-based_message_authentication_code"" rel=""nofollow"">http://en.wikipedia.org/wiki/Hash-based_message_authentication_code</a></li>
<li>how much more complicated would it be to use using a public / private key system</li>
</ul>

<p>Thanks
Mike</p>
","<p>MD5 is not good enough anymore. Use HMAC-SHA256 or better. Potentially use a key derivation function such as PBKDF2 to make it even more improbably to forge the MAC.</p>

<p>You could of course use public key signature algorithm like RSA, but you've got to ask yourself the following. If you will be the only one who needs to verify the signature, then you don't need the additional overhead of RSA and you can safely stick to HMAC. Because the problem with HMAC is that the salt has to be known to the ""signing"" and the ""verifying"" party.</p>
","28488943","335","<html><encryption><hash><md5><hmac>","0","0","1","2015-02-12 22:19:07","28488943","0","","","","","2015-02-12 22:07:07","","","2015-02-12 22:19:07"
"16065370","SHA512 client handshake implementation","<p>I'm attempting to make an hmac implementation that interacts with a server api and the only example I have to go off of is a python snippet. Unfortunately I've never touched python and my Java is a bit rusty.</p>

<p>The python example code includes the function:</p>

<pre><code>handshake = str(hmac.new(secret, hash_data, sha512))
</code></pre>

<p>where secret is the decoded hash retrieved from the server being connected to,
hash_data is the data to be sent,
and sha512 is the ""MessageDigest"" type when converted to Java.</p>

<p>I'm just wondering if there is a close java equivalent to this function. It seems like it should be in the Java.Security class but I'm having trouble finding hmac functions and implementations.</p>
","<p>API's and functions related to cryptology are present in <a href=""http://docs.oracle.com/javase/7/docs/api/javax/crypto/package-summary.html"" rel=""nofollow"">javax.crypto</a>, not <a href=""http://docs.oracle.com/javase/7/docs/api/java/security/package-summary.html"" rel=""nofollow"">java.security</a>.</p>

<p>I don't know Python, but given your description and the documentation of the methods shown, you want something along these lines:</p>

<pre><code>final Charset charset = Charset.forName(""ASCII"");
final String secret = ""mykey"";
final String data = ""A message to be turned to gibberish"";
final String algorithm = ""HmacSHA512"";

byte[] keyBytes = secret.getBytes(charset);
SecretKeySpec signingKey = new SecretKeySpec(keyBytes, algorithm);

Mac mac = Mac.getInstance(algorithm);
mac.init(signingKey);

byte[] hashed = mac.doFinal(data.getBytes(charset));
System.out.println(new String(hashed, charset));
</code></pre>

<p>The code assumes byte and string conversions are based on ASCII (which I believe Python uses by default). You will in all likelihood have to tweak the logic, but its a good starting point.</p>
","16065768","334","<java><python><api><hmac><sha512>","1","2","1","2013-04-17 16:51:19","16065768","0","2","","","","2013-04-17 16:28:59","","","2013-04-17 16:51:19"
"18296322","How to verify authorization for client-side embed widget or app","<p>I'm developing both the server api and client-side app.  I'm struggling with the client-side, as to whether to code it up as an app placed on their server or embedded with iframe and hosted on ours.  I need your insights.</p>

<p>Here are our constraints:</p>

<ol>
<li><p>Paid subscription based app.  We want to authorize each request made to the server to ensure it's coming from a paid customer's site.  Currently, we designed the API to accept HMAC Auth in the header and then compared it and the referrer host to what's in our db.</p></li>
<li><p>The API is RESTful.  We do not want cookies or sessions.</p></li>
<li><p>Authorization is only for the client hosted site (our paid customers) and not their audience.</p></li>
<li><p>Resources sent back (if request is validated) will then be embedded into our customers' HTML pages.</p></li>
<li><p>We want to minimize the amount of code sitting on our customers' servers.</p></li>
<li><p>We're open to SSL/HTTPS and Oauth, if needed.</p></li>
</ol>

<p>Given the above parameters, how would you go about the client-side portion?  My first thoughts are to develop server code for generating the HMAC (sits on our customer's server) and then embed pass it to our iframe embedded on their page.</p>

<p>Thank you for your time and insights</p>
","","","333","<php><json><api><restful-authentication><hmac>","2","","0","2013-08-18 06:23:17","","3","","","","","2013-08-18 06:23:17","","",""
"53054161","Generate HMAC SHA256 signature Powershell","<p>For 3commas I tried to generate a HMAC SHA256 signature in Powershell with the example parameters from the documentation:</p>

<pre><code>$secret = 'NhqPtmdSJYdKjVHjA7PZj4Mge3R5YNiP1e3UZjInClVN65XAbvqqM6A7H5fATj0j'
$message = '/public/api/ver1/accounts/new?type=binance&amp;name=binance_account&amp;api_key=XXXXXX&amp;secret=YYYYYY'

$hmacsha = New-Object System.Security.Cryptography.HMACSHA256
$hmacsha.key = [Text.Encoding]::ASCII.GetBytes($secret)
$signature = $hmacsha.ComputeHash([Text.Encoding]::ASCII.GetBytes($message))
$signature = [Convert]::ToBase64String($signature)

$signature
</code></pre>

<p>It generates ""MPZ4oVcjApDgBHXP/8y8kq42WdlMFFosDp0Poo9BwRo=""</p>

<p>As <a href=""https://github.com/3commas-io/3commas-official-api-docs/blob/master/rest-api.md#signed-endpoint-examples-for-post-publicapiver1accountsnew"" rel=""nofollow noreferrer"">described in the documentation</a> it should generate ""30f678a157230290e00475cfffccbc92ae3659d94c145a2c0e9d0fa28f41c11a""</p>

<pre><code>[linux]$ echo -n ""/public/api/ver1/accounts/new?type=binance&amp;name=binance_account&amp;api_key=XXXXXX&amp;secret=YYYYYY"" | openssl dgst -sha256 -hmac ""NhqPtmdSJYdKjVHjA7PZj4Mge3R5YNiP1e3UZjInClVN65XAbvqqM6A7H5fATj0j""
(stdin)= 30f678a157230290e00475cfffccbc92ae3659d94c145a2c0e9d0fa28f41c11a
</code></pre>

<p>Can anyone help me out?</p>
","<p>Use the BitConverter class.</p>

<pre><code>$secret = 'NhqPtmdSJYdKjVHjA7PZj4Mge3R5YNiP1e3UZjInClVN65XAbvqqM6A7H5fATj0j'
$message = '/public/api/ver1/accounts/new?type=binance&amp;name=binance_account&amp;api_key=XXXXXX&amp;secret=YYYYYY'

$hmacsha = New-Object System.Security.Cryptography.HMACSHA256
$hmacsha.key = [Text.Encoding]::ASCII.GetBytes($secret)
$signature1 = $hmacsha.ComputeHash([Text.Encoding]::ASCII.GetBytes($message))
#$signature2 = [Convert]::ToBase64String($signature1)

[System.BitConverter]::ToString($signature1) -replace '-', ''
</code></pre>
","53054659","332","<powershell><hmac><sha>","1","0","1","2018-10-29 22:14:02","53054659","0","","1806025","","2018-10-29 21:56:28","2018-10-29 21:34:07","","","2018-10-29 22:14:02"
"25785632","Getting mac from HMAC value and key","<p>I am looking at this page on how to validate HMAC implementation on a platform: <a href=""http://csrc.nist.gov/groups/STM/cavp/"" rel=""nofollow"">http://csrc.nist.gov/groups/STM/cavp/</a></p>

<pre><code>Test Vectors:
HMAC Test Vectors - These files provide an electronic version of the test vectors
that can be used to informally verify the correctness of an HMAC algorithm 
implementation using the HMACVS. However, use of these vectors does not
take the place of validation obtained through the Cryptographic Algorithm
Validation Program (CAVP).
</code></pre>

<p>So I open up the file and view the test values:
<a href=""http://pastebin.com/phJ4C0Fx"" rel=""nofollow"">http://pastebin.com/phJ4C0Fx</a>
it is thousands of lines long but this is the start.</p>

<p>I focus on the first values:</p>

<pre><code>[L=20]

Count = 0
Klen = 10
Tlen = 10
Key = 82f3b69a1bff4de15c33
Msg = fcd6d98bef45ed6850806e96f255fa0c8114b72873abe8f43c10bea7c1df706f10458e6d4e1c9201f057b8492fa10fe4b541d0fc9d41ef839acff1bc76e3fdfebf2235b5bd0347a9a6303e83152f9f8db941b1b94a8a1ce5c273b55dc94d99a171377969234134e7dad1ab4c8e46d18df4dc016764cf95a11ac4b491a2646be1
Mac = 1ba0e66cf72efc349207
</code></pre>

<p>My understanding is that with a key and value that openssl would get the mac, however I am not getting the same mac as that above?</p>

<pre><code>echo -n ""&lt;Msg here&gt;"" | openssl sha1 -hmac ""82f3b69a1bff4de15c33""
(stdin)= 981c64f70b07634e01b3800447e6431dddb42530
</code></pre>

<p>Any ideas on what I am doing wrong? i am also just guessing sha1, other values don't match either, I don't know how to take from the file what way I should be doing this. The various lengths, and the count. How do I use this information? </p>
","","","332","<encryption><sha><hmac>","1","","0","2014-09-11 10:55:30","","10","","","","","2014-09-11 10:55:30","","",""
"52609841","Generating HMAC SHA3-512 in netcore2.1","<p>I've already found some ways how to generate SHA3 in netcore 2.1. (e.g. SHA3.Net). Is there a way how to generate HMAC using SHA3-512 hash function. AFAIK it should be only some combination of SHA3(secret + content), but I can't find any working solution for HMAC based on SHA3-512. It's requested by 3rd party API I need to use, so there's no other option.</p>

<p>Result must be the same as result provided by this online tool (hash type sha3-512): <a href=""https://wtools.io/generate-hmac-hash"" rel=""nofollow noreferrer"">https://wtools.io/generate-hmac-hash</a></p>

<p>Does anybody know how to generate HMAC properly for SHA3-512 under .netcore 2.1?</p>

<p>Thanks</p>
","","","332","<asp.net-core><.net-core><asp.net-core-2.0><hmac><sha-3>","0","","0","2018-10-02 13:53:52","","3","","","","","2018-10-02 13:53:52","","",""
"56214026","JWT verify signature using HMACSHA256 and show ""Invalid Signature"" by Swift","<p>I have a question about JWT. <br>
I try to create own signature and use hard-code secret key ""hello1234567890987654321test1234"". <br>
And I use my function to create a signature and post to <a href=""https://jwt.io/"" rel=""nofollow noreferrer"">https://jwt.io/</a> to decode.<br>
Then this webside show me ""Invalid Signature"".<br>
What's wrong about me HMACSHA256 function? <br>
And I found the ""-"",""_"" in webside and convert ""+"",""/"" in my output signature. <br>
How to fix my output signature? <br>
Is this signature is correct?<br></p>

<p>I also find two HMACSHA256 methods searching in Google. I don't know which is better one. <br>
please give me some advice about choosing this.<br>
Thanks.<br></p>

<p>Image:
<a href=""https://i.stack.imgur.com/SSKQa.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/SSKQa.png"" alt=""Question Image.""></a></p>

<p>Method1:</p>

<pre><code>enum CryptoAlgorithm {
    case MD5, SHA1, SHA224, SHA256, SHA384, SHA512
    var HMACAlgorithm: CCHmacAlgorithm {
        var result: Int = 0
        switch self {
        case .MD5:      result = kCCHmacAlgMD5
        case .SHA1:     result = kCCHmacAlgSHA1
        case .SHA224:   result = kCCHmacAlgSHA224
        case .SHA256:   result = kCCHmacAlgSHA256
        case .SHA384:   result = kCCHmacAlgSHA384
        case .SHA512:   result = kCCHmacAlgSHA512
        }
        return CCHmacAlgorithm(result)
    }
    var digestLength: Int {
        var result: Int32 = 0
        switch self {
        case .MD5:      result = CC_MD5_DIGEST_LENGTH
        case .SHA1:     result = CC_SHA1_DIGEST_LENGTH
        case .SHA224:   result = CC_SHA224_DIGEST_LENGTH
        case .SHA256:   result = CC_SHA256_DIGEST_LENGTH
        case .SHA384:   result = CC_SHA384_DIGEST_LENGTH
        case .SHA512:   result = CC_SHA512_DIGEST_LENGTH
        }
        return Int(result)
    }
}

extension String {
    func hmac1(algorithm: CryptoAlgorithm, key: String) -&gt; String {
        var result: [CUnsignedChar]
        if let ckey = key.cString(using: String.Encoding.utf8), let cdata = self.cString(using: String.Encoding.utf8) {
            result = Array(repeating: 0, count: Int(algorithm.digestLength))
            CCHmac(algorithm.HMACAlgorithm, ckey, ckey.count-1, cdata, cdata.count-1, &amp;result)
        } else {
            fatalError(""Nil returned when processing input strings as UTF8"")
        }

        return Data(bytes: result, count: result.count).base64EncodedString()
    }
}
</code></pre>

<p>Method2: </p>

<pre><code>enum HMACAlgorithm {
    case MD5, SHA1, SHA224, SHA256, SHA384, SHA512

    func toCCHmacAlgorithm() -&gt; CCHmacAlgorithm {
        var result: Int = 0
        switch self {
        case .MD5:
            result = kCCHmacAlgMD5
        case .SHA1:
            result = kCCHmacAlgSHA1
        case .SHA224:
            result = kCCHmacAlgSHA224
        case .SHA256:
            result = kCCHmacAlgSHA256
        case .SHA384:
            result = kCCHmacAlgSHA384
        case .SHA512:
            result = kCCHmacAlgSHA512
        }
        return CCHmacAlgorithm(result)
    }

    func digestLength() -&gt; Int {
        var result: CInt = 0
        switch self {
        case .MD5:
            result = CC_MD5_DIGEST_LENGTH
        case .SHA1:
            result = CC_SHA1_DIGEST_LENGTH
        case .SHA224:
            result = CC_SHA224_DIGEST_LENGTH
        case .SHA256:
            result = CC_SHA256_DIGEST_LENGTH
        case .SHA384:
            result = CC_SHA384_DIGEST_LENGTH
        case .SHA512:
            result = CC_SHA512_DIGEST_LENGTH
        }
        return Int(result)
    }
}

extension String {
    func hmac2(algorithm: HMACAlgorithm, key: String) -&gt; String {
        let cKey = key.cString(using: String.Encoding.utf8)
        let cData = self.cString(using: String.Encoding.utf8)
        var result = [CUnsignedChar](repeating: 0, count: Int(algorithm.digestLength()))
        CCHmac(algorithm.toCCHmacAlgorithm(), cKey!, strlen(cKey!), cData!, strlen(cData!), &amp;result)
        let hmacData:NSData = NSData(bytes: result, length: (Int(algorithm.digestLength())))
        let hmacBase64 = hmacData.base64EncodedString(options: .lineLength76Characters)
        return String(hmacBase64)
    }
}
</code></pre>

<p>Usage: </p>

<pre><code>class ViewController: UIViewController {

    override func viewDidLoad() {
        super.viewDidLoad()

        let headerString: String = ""eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9""
        let payloadString: String = ""eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ""
        let totalString: String = headerString + ""."" + payloadString

        let signature1 = totalString.hmac1(algorithm: .SHA256, key: ""hello1234567890987654321test1234"")
        let signature2 = totalString.hmac2(algorithm: .SHA256, key: ""hello1234567890987654321test1234"")

        print(""signature1 : \(signature1)"") // signature1 : L9YSDasvO2B5i8FZUczC+MAtSsTuM0Dj+FEpfn6uoRs=
        print(""signature2 : \(signature2)"") // signature2 : L9YSDasvO2B5i8FZUczC+MAtSsTuM0Dj+FEpfn6uoRs=

    }
}
</code></pre>
","<p>The problem is the encoding.
<a href=""https://tools.ietf.org/html/rfc7519#section-3"" rel=""nofollow noreferrer"">JWT uses base64url encoding</a> :</p>

<blockquote>
  <p>A JWT is represented as a sequence of URL-safe parts separated by
     period ('.') characters.  Each part contains a base64url-encoded
     value.</p>
</blockquote>

<p>but you are using base64 encoding in the signature, as shown in your code example. </p>

<p>The difference between <a href=""https://tools.ietf.org/html/rfc4648#page-7"" rel=""nofollow noreferrer"">base64url encoding</a> and base64 encoding is, that the characters '+' and '/' from the normal base64 output will be replaced by '-' and '_' and the trailing '=' (padding) will be omitted.</p>

<p>You say:</p>

<blockquote>
  <p>And I found the ""-"",""_"" in webside and convert ""+"",""/"" in my output signature. </p>
</blockquote>

<p>With '-' and '_' instead of '+' and '/' you have a correct output.</p>

<p>When you have a base64url encoded signature like this</p>

<blockquote>
  <p>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.L9YSDasvO2B5i8FZUczC-MAtSsTuM0Dj-FEpfn6uoRs</p>
</blockquote>

<p>the signature wil be verified.</p>
","56216090","331","<ios><swift><jwt><sha256><hmac>","2","1","1","2019-05-20 08:26:37","56216090","1","","8169327","","2019-05-20 03:57:22","2019-05-20 03:37:11","","2019-05-20 08:26:37","2019-05-20 07:23:59"
"11123427","Is it useful to loop an hmac hash?","<p>I need to store a password in a database, and I used to store an sha1 hash of a salted password alongside a random salt, which was looped, like so:</p>

<pre><code>$salt = sha1(microtime().mt_rand());
for ($i=0; $i &lt; 4000; $i++) {
    $password = sha1($password.$salt);
}
</code></pre>

<p>(In my example, <code>$password</code> and <code>$salt</code> were stored inside the db).</p>

<p>I recently discovered the <code>hash_hmac()</code> function, which apparently is a much more secure function than a simple SHA1 hash. I plan on using it with the same pattern (the salt being the secret key), but I was wondering if it was worthwile to loop it like in my previous example. If anyone could give me some insight, that'd be much appreciated.</p>
","<p>Yes.</p>

<p>What you're doing here is known as <em><a href=""http://en.wikipedia.org/wiki/Key_stretching"" rel=""nofollow noreferrer"">key stretching</em></a> and it multiplies the time an attacker has to take to check each candidate password against a hash.  In your example, it increases the time by 4000x.  The specific threat you are protecting against here is when an attacker gets hold of your hashes (such as what happened with LinkedIn, Last.fm and eHarmony recently) and can devote as much CPU power as he can afford to cracking them.</p>

<p>Rather than rolling your own, if this is anything other than a research project, you should use a well-known and publicly tested function like <a href=""http://en.wikipedia.org/wiki/Bcrypt"" rel=""nofollow noreferrer""><code>bcrypt()</code></a>, <a href=""http://en.wikipedia.org/wiki/PBKDF2"" rel=""nofollow noreferrer""><code>PBKDF2()</code></a> or <a href=""http://www.tarsnap.com/scrypt.html"" rel=""nofollow noreferrer""><code>scrypt()</code></a>.</p>

<p>The number in that loop should be much higher than 4000 and since your attacker will be using a C loop rather than a PHP loop, you won't be able to do as many in a reasonable time as he will.  Even in a PHP loop, I can do 500,000 in 0.3 seconds.  The above hashing algorithms solve this problem since they will be implemented in C.  (<a href=""https://stackoverflow.com/questions/10149554/are-there-any-php-implementations-of-scrypt"">Not all of them may be available in PHP</a>.)  It seems <code>bcrypt</code> is in 5.3 but it's called <code>CRYPT_BLOWFISH</code>.  <a href=""http://php.net/manual/en/function.crypt.php"" rel=""nofollow noreferrer"">Details on how to use it are on the crypt() page</a>.</p>

<hr>

<p><code>hash_hmac()</code> is not a <em>more secure</em> hashing algorithm but rather is used for a different purpose.  See <a href=""https://security.stackexchange.com/questions/10901/openssl-digest-vs-hash-vs-hash-hmac-difference-between-salt-hmac"">the end of Thomas' answer here</a>.  Algorithms like <code>MD5</code> and the <code>SHA</code> family are general purpose hashing algorithms that are normally used as part of a more specific algorithm for a particular purpose.  For instance, some of the above password hashing algorithms use general purpose hashing algorithms many times.  <code>has_hmac()</code> asks you which general purpose hashing algorithm you would like to use.</p>
","11133756","331","<php><security><hmac>","0","2","1","2012-06-21 11:04:31","11133756","0","","","","","2012-06-20 15:55:51","","2017-05-23 10:29:57","2012-06-21 07:49:47"
"48016431","Google Script HMAC SHA512 output differs when adding '\n'","<p>I'm trying to create a google script that generates a HMAC signature using SHA512 for authentication to an API. Here is the code I'm using:</p>

<pre><code>     var SystemTimeMilli = Date.now()

     var InputString = ('Some Text' + '\n' + SystemTimeMilli);

     var PrivateKey = 'bEDtDJnW0y/Ll4YZitxb+D5sTNnEpQKH67EJRCmQCqN9cvGiB8+IHzB7HjsOs3mSlxLmu4aiPDRpe9anuWzylw=='  //sample private key

     var signature = Utilities.base64Encode(Utilities.computeHmacSignature(Utilities.MacAlgorithm.HMAC_SHA_512, InputString, PrivateKey, Utilities.Charset.UTF_8));

     Logger.log(signature);
</code></pre>

<p>This generates a string to the log but when compared to results using web based hash generators the results differ.</p>

<p>However if I use</p>

<pre><code>var InputString = ('Some Text' + SystemTimeMilli);
</code></pre>

<p>without the <code>\n</code> the results generated in my Google Script and the web based hash generators match.</p>

<p>So I'm assuming the way Google Script is handling the new line is different to the web base generators but I can't figure out how to get them match or which one is the correct result.</p>

<p>EDIT</p>

<p>To add some further information:
Lets say <code>SystemTimeMilli = 1234567890123</code> </p>

<p>When I enter <code>('Some Text' + SystemTimeMilli)</code> into my script using
<code>bEDtDJnW0y/Ll4YZitxb+D5sTNnEpQKH67EJRCmQCqN9cvGiB8+IHzB7HjsOs3mSlxLmu4aiPDRpe9anuWzylw==</code> as the <code>PrivateKey</code></p>

<p>I get
<code>oDVJk38b634G9Ykdqm+hVmSb5C8h6/re5/XG+MjyddTKygWcoZjWu0DfNGY/JWu5Be41zLDKfEZnuFcACrvs7w==</code> returned.</p>

<p>Which is the same if I enter <code>/account/balance1234567890123</code> into <a href=""https://quickhash.com"" rel=""nofollow noreferrer"">https://quickhash.com</a> using SHA-512 (SHA2) as the Algorithm and Base64 Encoding as the Output Format.</p>

<p>However if I enter <code>('Some Text' + '\n' + SystemTimeMilli)</code> in my script it returns <code>3sj1jbx1tQ4nc8XOkk3nW8TvG5zvCam2LN51fQWDXOKU5O/1KBAdzdp+YV+aAdYHWCY2x3jqCfbXKoOmfoD0KA==</code></p>

<p>But using </p>

<p><code>/account/balance
1234567890123</code></p>

<p>in quickhash.com returns something different. I've tried a whole bunch of different combinations but I never get the same result as my script. </p>

<p>I having trouble with getting my script to authenticate to the API so I really want to determine if I'm getting the correct HMAC to begin with.</p>
","","","322","<javascript><google-apps-script><sha><hmac><sha512>","1","","0","2017-12-29 06:24:23","","4","","4652706","","2017-12-29 06:24:23","2017-12-29 01:39:54","","",""
"4858825","Verifying caller/server in WCF","<p>My scenario:</p>

<ul>
<li>Many WCF clients which are in environments outside of my control</li>
<li>Server will either be mine OR in an environment outside of my control</li>
</ul>

<p>So worst case the client and the server is outside of my control. More specifically, I might assume that someone hosting this code could try to maliciously impersonate either the server or the client (the server being more likely). However, the client needs to verify that the server is my code and the server needs to verify that the client is my code. I've seen all the recommendations to use certificates; however, is that an option given my scenario?</p>

<p>One approach I've considered is to write an IClientMessageInspector and an IDispatchMessageInspector to set and verify a custom SOAP header on both sides. I would create an HMAC signature based on a secret key contained within the source code (assume I have a way to keep this hidden) and then verify the digest based on the message body.</p>

<p>I feel like this would work; however, I feel like there might be something more out-of-the-box that I'm missing here. Am I close, way off track? Thanks for any guidance!</p>
","<p>I don't think there is anything out of the box to do this, simply because it is an unusual requirement for the server to verify that the code on the client calling the service is <em>authorized</em> code.</p>

<p>Generally, it is sufficient to establish trust as follows:</p>

<ol>
<li>Server has a certificate and service uses SSL - this way clients are confident that they are connecting to the correct server machine.</li>
<li>Clients provide authentication details (eg username/password, certificate etc) to the server so the server knows the connecting client can be trusted.</li>
</ol>

<p>You are attempting to go the extra step to verify that not only are the users/machines verified, but also that the code running is verified - this is simply overkill.  If the code running is <em>not</em> verified, either:</p>

<ol>
<li>One of the machines has been compromised, in which case you have bigger issues to worry about.</li>
<li>One of your users has written code against your service and is using it 'illegally'.  This should not be a problem if your service only allows authorized users to perform 'dangerous' operations.</li>
</ol>
","4859162","322","<wcf><security><soap><hmac>","0","0","2","2011-02-01 06:06:49","","1","","","","","2011-02-01 04:17:52","","2011-02-01 05:19:22","2011-02-01 05:13:33"
"4858825","Verifying caller/server in WCF","<p>My scenario:</p>

<ul>
<li>Many WCF clients which are in environments outside of my control</li>
<li>Server will either be mine OR in an environment outside of my control</li>
</ul>

<p>So worst case the client and the server is outside of my control. More specifically, I might assume that someone hosting this code could try to maliciously impersonate either the server or the client (the server being more likely). However, the client needs to verify that the server is my code and the server needs to verify that the client is my code. I've seen all the recommendations to use certificates; however, is that an option given my scenario?</p>

<p>One approach I've considered is to write an IClientMessageInspector and an IDispatchMessageInspector to set and verify a custom SOAP header on both sides. I would create an HMAC signature based on a secret key contained within the source code (assume I have a way to keep this hidden) and then verify the digest based on the message body.</p>

<p>I feel like this would work; however, I feel like there might be something more out-of-the-box that I'm missing here. Am I close, way off track? Thanks for any guidance!</p>
","<p>Certificates are definitely the way to go in your situation. </p>

<p>Your server will easily be authenticated by clients because it will provide a certificate known to each client, SSL is a good option here.</p>

<p>The server will also be able to authenticate clients by requesting that every client should provide a certificate (server can check for a specific issuer of the certificate - your own issuer in that case). </p>

<p>Now you just need to correctly manage/secure your certificate server to make sure that it won't be compromised.</p>
","4859490","322","<wcf><security><soap><hmac>","0","1","2","2011-02-01 06:06:49","","1","","","","","2011-02-01 04:17:52","","","2011-02-01 06:06:49"
"21672183","HOTP/TOTP client token uniqueness","<p>Is it possible to use <strong>TOTP</strong> to generate tokens from multiple channels (where a channel is defined as a ""user"" using a certain shared key <strong>K_c</strong> for channel <strong>c</strong>), and in so doing identify the channel itself from the OTP?</p>

<p>For example, if two OTP's were generated with the both time sequence constant <strong>i_0</strong>, and shared secret keys <strong>K_1</strong> and <strong>K_2</strong> respectively, then:</p>

<p><code>A = HMAC-SHA-1(K_1, i_0)</code> and
<code>B = HMAC-SHA-1(K_2, i_0)</code></p>

<p>where A and B are the OTP's generated. My question is: would it be possible on the server side during validation to establish without the shadow of a doubt (mathematically speaking) that A is ""linked"" to channel 1 (<strong>K_1</strong>), and B to channel 2? In other words, every OTP generated using <strong>K_1</strong> will be different to those OTP's generated using <strong>K_2</strong> regardless of the truncation of the 160-bit output of HMAC. </p>

<p>My second question would be that if this is the case (the two ""sequences"" are different), can their difference be quantified in terms of say a Hamming distance?</p>
","","","321","<hmac><one-time-password><hamming-distance>","2","","0","2019-12-08 00:19:35","","0","1","409228","","2019-12-08 00:19:35","2014-02-10 08:28:11","","",""
"49244170","Shopify HMAC parameter verification failing in Python","<p>I'm having some trouble verifying the HMAC parameter coming from Shopify. The code I'm using per the <a href=""https://help.shopify.com/api/getting-started/authentication/oauth#verification"" rel=""nofollow noreferrer"">Shopify documentation</a> is returning an incorrect result.</p>

<p>Here's my annotated code:</p>

<pre><code>import urllib
import hmac
import hashlib

qs = ""hmac=96d0a58213b6aa5ca5ef6295023a90694cf21655cf301975978a9aa30e2d3e48&amp;locale=en&amp;protocol=https%3A%2F%2F&amp;shop=myshopname.myshopify.com&amp;timestamp=1520883022""
</code></pre>

<p><strong>Parse the querystring</strong></p>

<pre><code>params = urllib.parse.parse_qs(qs)
</code></pre>

<p><strong>Extract the hmac value</strong></p>

<pre><code>value = params['hmac'][0]
</code></pre>

<p><strong>Remove parameters from the querystring per documentation</strong></p>

<pre><code>del params['hmac']
del params['signature']
</code></pre>

<p><strong>Recombine the parameters</strong></p>

<pre><code>new_qs = urllib.parse.urlencode(params)
</code></pre>

<p><strong>Calculate the digest</strong></p>

<pre><code>h = hmac.new(SECRET.encode(""utf8""), msg=new_qs.encode(""utf8""), digestmod=hashlib.sha256)
</code></pre>

<p><strong>Returns <code>False</code>!</strong></p>

<pre><code>hmac.compare_digest(h.hexdigest(), value)
</code></pre>

<p>That last step should, ostensibly, return true. Every step followed here is outlined as commented in the Shopify docs.</p>
","<p>I'm going to post an answer to my own question, since after combing through Shopify's forums and the rest of SO, I couldn't find anything that would definitively answer this.</p>

<p>At some point, recently, Shopify started including the <code>protocol</code> parameter in the querystring payload. This itself wouldn't be a problem, <em>except</em> for the fact that Shopify neglected to mention in their documentation that <code>:</code> and <code>/</code> are not to be URL-encoded when checking the signature. This is completely nonsensical, given that they themselves <em>do</em> URL-encode these characters in the query string that they provide.</p>

<p>So, to fix the issue, just provide the <code>safe</code> parameter to <code>urllib.parse.urlencode</code> with the value <code>:/</code> (fitting, right?). The full working code looks like this:</p>

<pre><code>params = urllib.parse.parse_qsl(qs)
cleaned_params = []
hmac_value = dict(params)['hmac']

# Sort parameters
for (k, v) in sorted(params):
    if k in ['hmac', 'signature']:
        continue

    cleaned_params.append((k, v))

new_qs = urllib.parse.urlencode(cleaned_params, safe="":/"")
secret = SECRET.encode(""utf8"")
h = hmac.new(secret, msg=new_qs.encode(""utf8""), digestmod=hashlib.sha256)

# Compare digests
hmac.compare_digest(h.hexdigest(), value)
</code></pre>

<p>Hope this is helpful for others running into this issue!</p>

<p><strike>Note that this code is somewhat simplified, as the query params are not lexicographically (alphabetically) sorted. If this could be made clearer I can update the code to do that as well.</strike></p>
","49244224","321","<python><shopify><hmac>","3","4","2","2018-12-29 13:49:45","49244224","1","2","39155","","2018-03-13 15:22:38","2018-03-12 20:48:30","","2018-03-16 20:04:28","2018-03-12 20:52:57"
"49244170","Shopify HMAC parameter verification failing in Python","<p>I'm having some trouble verifying the HMAC parameter coming from Shopify. The code I'm using per the <a href=""https://help.shopify.com/api/getting-started/authentication/oauth#verification"" rel=""nofollow noreferrer"">Shopify documentation</a> is returning an incorrect result.</p>

<p>Here's my annotated code:</p>

<pre><code>import urllib
import hmac
import hashlib

qs = ""hmac=96d0a58213b6aa5ca5ef6295023a90694cf21655cf301975978a9aa30e2d3e48&amp;locale=en&amp;protocol=https%3A%2F%2F&amp;shop=myshopname.myshopify.com&amp;timestamp=1520883022""
</code></pre>

<p><strong>Parse the querystring</strong></p>

<pre><code>params = urllib.parse.parse_qs(qs)
</code></pre>

<p><strong>Extract the hmac value</strong></p>

<pre><code>value = params['hmac'][0]
</code></pre>

<p><strong>Remove parameters from the querystring per documentation</strong></p>

<pre><code>del params['hmac']
del params['signature']
</code></pre>

<p><strong>Recombine the parameters</strong></p>

<pre><code>new_qs = urllib.parse.urlencode(params)
</code></pre>

<p><strong>Calculate the digest</strong></p>

<pre><code>h = hmac.new(SECRET.encode(""utf8""), msg=new_qs.encode(""utf8""), digestmod=hashlib.sha256)
</code></pre>

<p><strong>Returns <code>False</code>!</strong></p>

<pre><code>hmac.compare_digest(h.hexdigest(), value)
</code></pre>

<p>That last step should, ostensibly, return true. Every step followed here is outlined as commented in the Shopify docs.</p>
","<pre><code>import hmac
import hashlib


...

# Inside your view in Django's views.py
params = request.GET.dict()
#

myhmac = params.pop('hmac')
params['state'] = int(params['state'])
line = '&amp;'.join([
    '%s=%s' % (key, value)
    for key, value in sorted(params.items())
])
print(line)
h = hmac.new(
    key=SHARED_SECRET.encode('utf-8'),
    msg=line.encode('utf-8'),
    digestmod=hashlib.sha256
)

# Cinderella ?
print(hmac.compare_digest(h.hexdigest(), myhmac))
</code></pre>
","53970162","321","<python><shopify><hmac>","3","0","2","2018-12-29 13:49:45","49244224","1","2","39155","","2018-03-13 15:22:38","2018-03-12 20:48:30","","","2018-12-29 13:49:45"
"1868525","How to Detect Diferences between GET and POST ViewModel Values in a form?","<p>I have a single view that handles a lot of Models of type VoyagesViewModel, in that view the user can create a new voyage or edit all the active voyages, so i have different instances of the same object type in that view.
each form contains something like:</p>

<pre><code>&lt;% = Html.Hidden(""Voyages[""+ i +""].VoyageDetails["" + i2 + ""].Id"", location.Id)%&gt;
&lt;% = Html.TextBox(""Voyages["" + i + ""].VoyageDetails["" + i2 + ""].ArrivalDate"", location.ArrivalDate, new { @class = ""dates"" })%&gt;&lt;% = Html.ValidationMessage(""Voyages["" + i + ""].VoyageDetails["" + i2 + ""].ArrivalDate"", ""*"")%&gt;
&lt;% = Html.TextBox(""Voyages["" + i + ""].VoyageDetails["" + i2 + ""].DepartureDate"", location.DepartureDate, new { @class = ""dates"" })%&gt;&lt;% = Html.ValidationMessage(""Voyages["" + i + ""].VoyageDetails["" + i2 + ""].DepartureDate"", ""*"")%&gt;
&lt;% = Html.Hidden(""Voyages["" + i + ""].VoyageDetails["" + i2 + ""].LocationID"", location.LocationID)%&gt;
&lt;% = Html.Hidden(""Voyages["" + i + ""].VoyageDetails["" + i2 + ""].LocationName"", location.LocationName)%&gt;
&lt;% = Html.Hidden(""Voyages["" + i + ""].VoyageDetails["" + i2 + ""].VesselName"", location.VesselName)%&gt;
&lt;% = Html.Hidden(""Voyages["" + i + ""].VoyageDetails["" + i2 + ""].VesselID"", location.VesselID)%&gt;
&lt;% = Html.CheckBox(""Voyages["" + i + ""].VoyageDetails["" + i2 + ""].remove"", location.remove)%&gt; (remove)
</code></pre>

<p>I have 8 to 10 of this in that View, when the user POST the form(I have all this fields in a single form), i want to be able to detect if the user change something in a voyage to save it, so i don't have to save that specific voyage if no changes where made.</p>

<p>To check this i have a hidden field and i do this:</p>

<pre><code> &lt;% = Html.Hidden(""Voyages["" + i + ""].hash"", TamperProofing.GetExpiringHMAC(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(Model), DateTime.Now.AddMinutes(15)))%&gt;
</code></pre>

<p>Im using HMAC to get a hashed version of the hole object, but first i serialize the object into a string format (JSON Format):</p>

<pre><code>{""Id"":22,""VesselName"":""CAPTAIN P (CPP)"",""VesselID"":8,""VoyageDetails"":[{""Id"":58,""ArrivalDate"":""\/Date(1259298000000)\/"",""DepartureDate"":""\/Date(1259384400000)\/"",""LocationID"":404,""LocationHash"":null,""LocationName"":""Balboa, Panama (PABLB)"",""VesselName"":""CAPTAIN P (CPP)"",""VesselID"":8,""Order"":0,""Comment"":null,""remove"":false},{""Id"":60,""ArrivalDate"":""\/Date(1260248400000)\/"",""DepartureDate"":""\/Date(1260334800000)\/"",""LocationID"":406,""LocationHash"":null,""LocationName"":""Colon Free Zone, Panama (PACFZ)"",""VesselName"":""CAPTAIN P (CPP)"",""VesselID"":8,""Order"":0,""Comment"":null,""remove"":false},{""Id"":61,""ArrivalDate"":""\/Date(1260421200000)\/"",""DepartureDate"":""\/Date(1260507600000)\/"",""LocationID"":407,""LocationHash"":null,""LocationName"":""Cristobal, Panama (PACTB)"",""VesselName"":""CAPTAIN P (CPP)"",""VesselID"":8,""Order"":0,""Comment"":null,""remove"":false},{""Id"":62,""ArrivalDate"":null,""DepartureDate"":null,""LocationID"":408,""LocationHash"":null,""LocationName"":""Manzanillo, Panama (PAMAN)"",""VesselName"":""CAPTAIN P (CPP)"",""VesselID"":8,""Order"":0,""Comment"":null,""remove"":false},{""Id"":59,""ArrivalDate"":null,""DepartureDate"":null,""LocationID"":405,""LocationHash"":null,""LocationName"":""Coco Solo, Panama (PACSO)"",""VesselName"":""CAPTAIN P (CPP)"",""VesselID"":8,""Order"":0,""Comment"":null,""remove"":true}],""newVoyageDetail"":null,""isComplete"":false,""Code"":""A Code"",""position"":0,""hash"":null}
</code></pre>

<p>So when the user POST the form i check if changes where made to each voyage like this:</p>

<pre><code> var obj = new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(_voyage);
     if (TamperProofing.VerifyChanges(obj, hash) == TamperProofing.HMACChanged.True)
    {
       //UPDATE
    }else
    {
       //DO Nothing, is the exact same object
    }
</code></pre>

<p>Serialize it again and compare both hashes, the one on the hidden against the recently calculated one, if it match it means nothing changed.</p>

<p>All works pretty well, i was just wondering, if there are any other options to do this?</p>

<p>And my other concern is the time that can take the serialization and all the HMAC thing with this large string generated by the Serialization against the time it could take just to Update unchanged object again to the DB.</p>

<p>EDIT: I don't need to know which field changed, just if something changed.</p>
","<p>If server performance is a concern, you might consider creating a ""changed"" field for each record and using Javascript to set it when one of the user-editable field values changes.</p>

<p>To ensure correctness in downlevel browsers or NoScript fringe cases, a common pattern is to use a tri-state value, with one state meaning ""unknown"" or ""JS disabled"".  For example, you initialize the fields on the server to 0 (or empty), have your JS code set them all to 1 on load, and then to 2 when the field is modified.  If your server sees a 0/null/empty on POST, then it falls back on the server-side method, in this case your hash-compare.  If it's set to 1, then it ignores that record, and if it's set to 2, then it automatically triggers an update.</p>

<p>This way, you could avoid computing hashes in 99% of cases, and still correctly handle the outliers.</p>

<p>This doesn't necessarily prevent <em>tampering</em> but you weren't too specific about what kind of tampering you're trying to prevent.  The most effective means of tamper-proofing is really to keep the object or information out of reach in the first place, i.e. in the session state or an encrypted cookie.</p>

<p>Does that help at all?</p>
","1868840","320","<asp.net-mvc><hmac>","2","2","1","2009-12-08 18:15:10","1868840","3","","118447","","2009-12-08 17:36:27","2009-12-08 17:26:57","","","2009-12-08 18:15:10"
"31009358","TLS MAC message verification","<p>I'm developing a SSL de-cipher in python but I'm having some problems on HMAC verification:</p>

<p>I've extracted all keyring related material (client IV, MAC, Key and Server IV, MAC, key). 
When I receive the first Application_Data message (0x17), I am able to decrypt it, but unable to verify message integrity.</p>

<p>On RFC 2246 (<a href=""https://www.ietf.org/rfc/rfc2246.txt"" rel=""nofollow"">https://www.ietf.org/rfc/rfc2246.txt</a>), tells:</p>

<blockquote>
  <p>The MAC is generated as:</p>

<pre><code>   HMAC_hash(MAC_write_secret, seq_num + TLSCompressed.type +
                 TLSCompressed.version + TLSCompressed.length +
                 TLSCompressed.fragment));
</code></pre>
  
  <p>where ""+"" denotes concatenation.</p>
  
  <p>seq_num
         The sequence number for this record.</p>
  
  <p>hash
         The hashing algorithm specified by
         SecurityParameters.mac_algorithm.</p>
</blockquote>

<p>Taking this as an example:</p>

<pre><code>Chosen cipher_suite is TLS_RSA_WITH_AES_256_CBC_SHA256

client_mac = ""some random stuff""
message_type = 0x17
message_version = 0x0303
encrypted_message_length = 1184 (IV|Message|MAC|Offset)
decrypted_message_length = 1122 (removing IV, MAC and offset)
message = ""some message of length 1122""
</code></pre>

<ul>
<li>client_mac is extracted from keyring_material</li>
<li>message_type is 0x17, because as an Application_data message type, the correct value should be 0x17</li>
<li>message version is 0x0303 as it's TLS 1.2</li>
<li>message length is 1122, removing preceding IV, offset and MAC verification, message, gets a final length of 1122</li>
<li>seq_number is 1 as it's the first message</li>
</ul>

<p>HMAC_SHA256 calculation, in python, is as follows:</p>

<pre><code>import hashlib
import hmac
hmac.new(&lt;client_mac&gt;,label+message,hashlib.sha256).digest()
</code></pre>

<p>My question is, how do I calculate label?
As RFC mentions, ""+"" denotes concatenation, but concatenation of what</p>

<ul>
<li>HEX values converted to string

<ul>
<li>""1"" + ""17"" + ""0303"" + ""462""</li>
</ul></li>
<li>INT values converted to strings

<ul>
<li>""1"" + ""23"" + ""771"" + ""1122""</li>
</ul></li>
</ul>

<p>And other thing to mention, TLSCompressed.version means:</p>

<ul>
<li>0x0303</li>
<li>771</li>
<li>""1.2""</li>
<li>""12""</li>
<li>""TLS 1.2""</li>
</ul>

<p>In this maillist (<a href=""http://www.ietf.org/mail-archive/web/tls/current/msg14357.html"" rel=""nofollow"">http://www.ietf.org/mail-archive/web/tls/current/msg14357.html</a>) I found a supposed clarification of MAC values, </p>

<blockquote>
<pre><code>   MAC(MAC_write_key, seq_num +
       TLSCipherText.type +
       TLSCipherText.version +
       length of ENC(content + padding + padding_length) +
       IV +
       ENC(content + padding + padding_length));
</code></pre>
  
  <p>where the length is encoded as two bytes in the usual way.</p>
</blockquote>

<p>but it makes no sense to me, because it's useless to re-encode decrypted values to check to compute MAC. And from last line <em>""where length is encoded as two bytes in the usual way""</em>, does it means that I should use </p>

<blockquote>
  <p>struct.pack(""!H"",length)</p>
</blockquote>

<p>Then remove ""\x"" and use this value? or should I encode this value in HEX and then concatenate it?</p>

<p>I'm a bit lost, because RFC are not clear about how values should be used.</p>

<p>I've been trying several combinations (even brute forcing), but none of them worked, I hope you can light my way.</p>
","<p>Well, after diggin' a bit I've managed to solve the issue.</p>

<p>RFC 5246, in section 6.2.3.1 (<a href=""http://tools.ietf.org/html/rfc5246#section-6.2.3.1"" rel=""nofollow"">http://tools.ietf.org/html/rfc5246#section-6.2.3.1</a>) </p>

<blockquote>
  <p>The MAC is generated as:</p>

<pre><code>  MAC(MAC_write_key, seq_num +
                        TLSCompressed.type +
                        TLSCompressed.version +
                        TLSCompressed.length +
                        TLSCompressed.fragment);
</code></pre>
  
  <p>where ""+"" denotes concatenation.</p>
</blockquote>

<p>But it does not points the data size, either representation format (hex, string...).</p>

<p>The way every field must be represented is as follows:</p>

<ul>
<li><p>seq_num:</p>

<ul>
<li>Description: A int counter, starting in 0, which will be incremented every frame received or sended. For a TCP Session, two seq_numbers must be used, one for the server and other for the client, incrementing everytime each of them sends a frame.</li>
<li>Representation: This value must be represented as <em>Unsigned Long Long</em> with 8 bytes</li>
<li>Representation example: 
<code>struct.pack(""!Q"",seq_num)</code></li>
</ul></li>
<li><p>TLSCompressed.type</p>

<ul>
<li>Description: This field is extracted from TLS Record layer (the encrypted payload). For example, if it's an <em>Application Data</em> frame, we must use 0x17.</li>
<li>Representation: This value must be represented as <em>Signed Char</em>, with 2 bytes.</li>
<li>Representation example:
<code>struct.pack(""!b"",TLSCompressed.type)</code></li>
</ul></li>
<li><p>TLSCompressed.version</p>

<ul>
<li>Description: This field is also extracted from TLS Record layer (the encrypted payload). For example, if the frame is transferred using TLS 1.2, we must use it's hex representation 0x0303.</li>
<li>Representation: This value must be represented as <em>Unsigned Short</em>, with 2 bytes.</li>
<li>Representation example:
<code>struct.pack(""!H"",TLSCompressed.version)</code></li>
</ul></li>
<li><p>TLSCompressed.length</p>

<ul>
<li>Description: This field represents the actual length of the <strong>decrypted</strong> payload.</li>
<li>Representation: This value must be represented as <em>Unsigned Short</em>, with 2 bytes.</li>
<li>Representation example:
<code>struct.pack(""!H"",TLSCompressed.length)</code></li>
</ul></li>
<li><p>TLSCompressed.fragment</p>

<ul>
<li>Description: This field <strong>is the actual **decrypted payload.</strong></li>
<li>Representation: This value must be represented as a string</li>
</ul></li>
</ul>

<p>As a python example, the HMAC hashing will be as follows for our previous example:</p>

<pre><code>hmac_digest = hmac.new(mac_secret,'',digestmod=hashlib.sha256)
hmac_digest.update(struct.pack('!QbHH',seq_num,TLSCompressed.type,TLSCompressed.version, len(decrypted)))
hmac_digest.update(decrypted)
hmac_digest.digest()
</code></pre>
","31334564","320","<python><macos><ssl><hmac><sha256>","1","2","1","2015-07-10 07:07:21","","0","","4370109","","2015-06-23 17:35:10","2015-06-23 17:20:09","","","2015-07-10 07:07:21"
"55247552","PHP: How can I generate a hmac SHA1 signature of a string?","<p>I am trying to connect to an API using PHP and need the correct signature.</p>

<p><strong>Their documentation verbatim:</strong></p>

<blockquote>
  <p>The command string needs to hashed using HMAC SHA-1 hashing algorithm
  against the API secret key. The resulting byte array should be Base64
  encoded in UTF-8 format so that it can be passed via http.</p>
  
  <p>To generate the signature you have to lower case the complete list of
  request parameters and sort them alphabetically via the field for each
  field-value pair. The resulting string to sign from the previous
  example with a secret key VDaACYb0LV9eNjTetIOElcVQkvJck_J_QljX would
  be:</p>
  
  <p>apikey=mivr6x7u6bn_sdahobpjnejpgest35exqjb8cg20&amp;command=deployvirtualmachine&amp;serviceofferingid=21624abb-764e-4def-81d7-9fc54b5957fb&amp;templateid=54c83a5e-c548-4d91-8b14-5cf2d4c081ee&amp;zoneid=1128bd56-b4d9-4ac6-a7b9-c715b187ce11</p>
  
  <p>Resulting in a signature value of:</p>
  
  <p>ahlpA6J1Fq6OYI1HFrMSGgBt0WY%3D</p>
</blockquote>

<p><strong>Example Attempt:</strong></p>

<pre><code>$string = 'apikey=mivr6x7u6bn_sdahobpjnejpgest35exqjb8cg20&amp;command=deployvirtualmachine&amp;serviceofferingid=21624abb-764e-4def-81d7-9fc54b5957fb&amp;templateid=54c83a5e-c548-4d91-8b14-5cf2d4c081ee&amp;zoneid=1128bd56-b4d9-4ac6-a7b9-c715b187ce11
';
$string = utf8_encode(strtolower($string));
$key = 'VDaACYb0LV9eNjTetIOElcVQkvJck_J_QljX';
$signature = hash_hmac('sha1', $string , $key);
print 'SIGNATURE:'.$signature.'&lt;br&gt;';
if($signature=='ahlpA6J1Fq6OYI1HFrMSGgBt0WY%3D'){
    print 'SUCCESS';
}else{
    print 'FAIL';
}
</code></pre>

<p><strong>RESULT:</strong> 9077d90baa7ab8913811b64a50814b640dce60eb</p>

<p>Suppose To Be: ahlpA6J1Fq6OYI1HFrMSGgBt0WY%3D</p>

<p><strong>QUESTION:</strong> Result does NOT match their documentation. Any idea what I did wrong?</p>
","<p>Your signature should be generated like this:</p>

<pre><code>$signature = urlencode(base64_encode(hash_hmac('sha1', $string , $key, true)));
</code></pre>

<p>The last parameter's default value is <code>false</code>. Then it'll return a hex-coded string instead of raw bytes. Then you have to base64_encode the bytes as stated in the documentation. And then you'll have to urlencode it as the <code>=</code> has to be transformed</p>
","55247697","320","<php><hmac><hmacsha1>","3","5","2","2019-03-19 18:34:02","55247697","0","1","","","","2019-03-19 18:15:17","","","2019-03-19 18:23:33"
"55247552","PHP: How can I generate a hmac SHA1 signature of a string?","<p>I am trying to connect to an API using PHP and need the correct signature.</p>

<p><strong>Their documentation verbatim:</strong></p>

<blockquote>
  <p>The command string needs to hashed using HMAC SHA-1 hashing algorithm
  against the API secret key. The resulting byte array should be Base64
  encoded in UTF-8 format so that it can be passed via http.</p>
  
  <p>To generate the signature you have to lower case the complete list of
  request parameters and sort them alphabetically via the field for each
  field-value pair. The resulting string to sign from the previous
  example with a secret key VDaACYb0LV9eNjTetIOElcVQkvJck_J_QljX would
  be:</p>
  
  <p>apikey=mivr6x7u6bn_sdahobpjnejpgest35exqjb8cg20&amp;command=deployvirtualmachine&amp;serviceofferingid=21624abb-764e-4def-81d7-9fc54b5957fb&amp;templateid=54c83a5e-c548-4d91-8b14-5cf2d4c081ee&amp;zoneid=1128bd56-b4d9-4ac6-a7b9-c715b187ce11</p>
  
  <p>Resulting in a signature value of:</p>
  
  <p>ahlpA6J1Fq6OYI1HFrMSGgBt0WY%3D</p>
</blockquote>

<p><strong>Example Attempt:</strong></p>

<pre><code>$string = 'apikey=mivr6x7u6bn_sdahobpjnejpgest35exqjb8cg20&amp;command=deployvirtualmachine&amp;serviceofferingid=21624abb-764e-4def-81d7-9fc54b5957fb&amp;templateid=54c83a5e-c548-4d91-8b14-5cf2d4c081ee&amp;zoneid=1128bd56-b4d9-4ac6-a7b9-c715b187ce11
';
$string = utf8_encode(strtolower($string));
$key = 'VDaACYb0LV9eNjTetIOElcVQkvJck_J_QljX';
$signature = hash_hmac('sha1', $string , $key);
print 'SIGNATURE:'.$signature.'&lt;br&gt;';
if($signature=='ahlpA6J1Fq6OYI1HFrMSGgBt0WY%3D'){
    print 'SUCCESS';
}else{
    print 'FAIL';
}
</code></pre>

<p><strong>RESULT:</strong> 9077d90baa7ab8913811b64a50814b640dce60eb</p>

<p>Suppose To Be: ahlpA6J1Fq6OYI1HFrMSGgBt0WY%3D</p>

<p><strong>QUESTION:</strong> Result does NOT match their documentation. Any idea what I did wrong?</p>
","<p>You should set <code>$raw_output = TRUE</code> in <code>hash_hmac()</code>.
Also you should use <code>strcmp()</code> instead of <code>==</code></p>

<p>So the actual code will be</p>

<pre><code>

$string = 'apikey=mivr6x7u6bn_sdahobpjnejpgest35exqjb8cg20&amp;command=deployvirtualmachine&amp;serviceofferingid=21624abb-764e-4def-81d7-9fc54b5957fb&amp;templateid=54c83a5e-c548-4d91-8b14-5cf2d4c081ee&amp;zoneid=1128bd56-b4d9-4ac6-a7b9-c715b187ce11
';
$string = utf8_encode(strtolower($string));
$key = 'VDaACYb0LV9eNjTetIOElcVQkvJck_J_QljX';
$signature = urlencode(base64_encode(hash_hmac('sha1', $string , $key, $raw_output=TRUE))); 
print 'SIGNATURE:'.$signature.'&lt;br&gt;';
if(strcmp($signature,'ahlpA6J1Fq6OYI1HFrMSGgBt0WY%3D'))
{
    print 'SUCCESS';
}
else
{
    print 'FAIL';
}

</code></pre>
","55247873","320","<php><hmac><hmacsha1>","3","0","2","2019-03-19 18:34:02","55247697","0","1","","","","2019-03-19 18:15:17","","","2019-03-19 18:34:02"
"46465059","signing Access Token and ID Token using HMAC in keycloak","<p>We are trying to configure Keycloak(OIDC) to issue Access Token and ID Token signed using HMAC but not able to achieve the same. Also we are not able to retrieve / generate the HMAC key in Keycloak which would be shared with the clients for signature verification. It would be of great help if anybody can share his/her experience if it's done this before. 
We are able to do all the staff using RSA but we are not able to find out how to configure HMAC to sign the Access Token and ID Tokens.</p>

<p>Thanks,
Upananda</p>
","","","320","<hmac><keycloak>","3","","0","2017-09-28 08:58:38","","0","1","","","","2017-09-28 08:58:38","","",""
"47046641","How to use pagination at api localbitcoin","<p>I'm developing with localbitcoin API and i am using path “/api/dashboard/closed/” and this is my code:</p>

<pre><code>&lt;?php
function localbitcoinsquery($path, $nonce,array $req = Array()) {
    global $random;
    $key='mykey';
    $secret='secretkey';

    if ($req) {
        $get=httpbuildquery($req);
        $path=$path.'?'.$get;
    }

    $postdata=$nonce.$key.$path;
    $sign = strtoupper(hashhmac('sha256', $postdata, $secret));
    $headers = array(
        'Apiauth-Signature:'.$sign,
        'Apiauth-Key:'.$key,
        'Apiauth-Nonce:'.$nonce
    );

    $ch = null;
    $ch = curlinit('https://localbitcoins.com'.$path);
    curlsetopt($ch, CURLOPTRETURNTRANSFER, true);
    curlsetopt($ch, CURLOPTHTTPHEADER, $headers);
    curlsetopt($ch, CURLOPTSSLVERIFYPEER, TRUE);
    curlsetopt($ch, CURLOPTCONNECTTIMEOUT, 20);
    $res = curlexec($ch);
    if ($res === false) throw new Exception('Curl error: '.curlerror($ch));
    $dec = jsondecode($res, true);
    if (!$dec) throw new Exception('Invalid data: '.$res);
    curl_close($ch);

    return $dec;
}

$getinfo = array();
$url='/api/dashboard/closed/';
$mt = explode(' ', microtime());
$random = $mt[1].substr($mt[0], 2, 6);
$getinfo = localbitcoinsquery($url,$random);
echo ""&lt;pre&gt;"";
printr($getinfo); 
echo ""&lt;/pre&gt;"";
?&gt;
</code></pre>

<p>This works OK, but show only 50 trades,
Also I get this at result:</p>

<pre><code>[pagination] =&gt; Array
(
[next] =&gt; https://localbitcoins.com/api/dashboard/closed/?order_by=-closed_at&amp;start_at=2017-10-26+17%3U50%3A49%2B00%9A00
)
</code></pre>

<p>But I don't know how to use pagination, when I try to use this link at my code I get error:</p>

<blockquote>
  <p>[message] => HMAC authentication key and signature was given, but they
  are invalid. Error 41</p>
</blockquote>

<p>I already investigated at google large time but the information is scarce.</p>
","<p>I'm using the python library and had the same issue.  When I spoke to technical support they said the issue was in the way I was calculating the authentication.</p>

<p>Basically you have to include the pagination url as part of the signature.</p>

<p>On the python library at least, you do not have to change the api endpoint since arguments are being delivered as part of the form data.</p>

<p>So you still access for example ""/api/dashboard/closed/"" when getting the second page and the ""?order_by=-closed_at&amp;start_at=2017-10-26+17%3U50%3A49%2B00%9A00"" stuff goes in the form somehow.</p>

<p>The python API does all this for you, you just have to copy the example from the github page.</p>
","53423779","320","<api><pagination><bitcoin><hmac>","1","0","2","2019-09-06 11:45:49","","0","1","7579547","","2017-11-01 02:21:35","2017-11-01 00:49:30","","","2018-11-22 04:10:47"
"47046641","How to use pagination at api localbitcoin","<p>I'm developing with localbitcoin API and i am using path “/api/dashboard/closed/” and this is my code:</p>

<pre><code>&lt;?php
function localbitcoinsquery($path, $nonce,array $req = Array()) {
    global $random;
    $key='mykey';
    $secret='secretkey';

    if ($req) {
        $get=httpbuildquery($req);
        $path=$path.'?'.$get;
    }

    $postdata=$nonce.$key.$path;
    $sign = strtoupper(hashhmac('sha256', $postdata, $secret));
    $headers = array(
        'Apiauth-Signature:'.$sign,
        'Apiauth-Key:'.$key,
        'Apiauth-Nonce:'.$nonce
    );

    $ch = null;
    $ch = curlinit('https://localbitcoins.com'.$path);
    curlsetopt($ch, CURLOPTRETURNTRANSFER, true);
    curlsetopt($ch, CURLOPTHTTPHEADER, $headers);
    curlsetopt($ch, CURLOPTSSLVERIFYPEER, TRUE);
    curlsetopt($ch, CURLOPTCONNECTTIMEOUT, 20);
    $res = curlexec($ch);
    if ($res === false) throw new Exception('Curl error: '.curlerror($ch));
    $dec = jsondecode($res, true);
    if (!$dec) throw new Exception('Invalid data: '.$res);
    curl_close($ch);

    return $dec;
}

$getinfo = array();
$url='/api/dashboard/closed/';
$mt = explode(' ', microtime());
$random = $mt[1].substr($mt[0], 2, 6);
$getinfo = localbitcoinsquery($url,$random);
echo ""&lt;pre&gt;"";
printr($getinfo); 
echo ""&lt;/pre&gt;"";
?&gt;
</code></pre>

<p>This works OK, but show only 50 trades,
Also I get this at result:</p>

<pre><code>[pagination] =&gt; Array
(
[next] =&gt; https://localbitcoins.com/api/dashboard/closed/?order_by=-closed_at&amp;start_at=2017-10-26+17%3U50%3A49%2B00%9A00
)
</code></pre>

<p>But I don't know how to use pagination, when I try to use this link at my code I get error:</p>

<blockquote>
  <p>[message] => HMAC authentication key and signature was given, but they
  are invalid. Error 41</p>
</blockquote>

<p>I already investigated at google large time but the information is scarce.</p>
","<p>I fixed error no. 41. I modified your example to show that works, (read my NOTE: comments to understand better where is the problem) Read my NOTE: comments.</p>

<pre><code>&lt;?php
function localbitcoins_query($path, array $req = Array()) { 
   $key='yourkey';
   $secret='yoursecret';      

   $array_mt = explode(' ', microtime());   
   $nonce = $array_mt[1].substr($array_mt[0], 2, 6);   

   $get = """";
   if ($req) {
      $get=http_build_query($req);
   }
   $postdata=$nonce.$key.$path.$get; // NOTE: here $postdata goes without '?' char before the parameters!

   $sign = strtoupper(hash_hmac('sha256', $postdata, $secret)); 

   $headers = array(
      'Apiauth-Signature:'.$sign,
      'Apiauth-Key:'.$key,
      'Apiauth-Nonce:'.$nonce
   );
   $ch = null;
   $ch = curl_init('https://localbitcoins.com'.$path.( $get=="""" ? """" : ""?"".$get)); // NOTE:  here it's necesary '?' char before the parameters!
   curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
   curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
   curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, TRUE);
   curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 20);

   $res = curl_exec($ch);
   if ($res === false) throw new Exception('Curl error: '.curlerror($ch));
   $dec = json_decode($res, true);   
   if (!$dec) throw new Exception('Invalid data: '.$res);
   curl_close($ch);   
   return $dec;
}

$getinfo = array();
$api_endpoint = '/api/dashboard/closed/';
$array_params = array(    ""order_by"" =&gt; ""-closed_at""
                        , ""start_at"" =&gt; ""2019-08-14 18:00:26+00:00"" 
                        );
$getinfo = localbitcoins_query($api_endpoint,$array_params);
echo ""&lt;pre&gt;""; print_r($getinfo); echo ""&lt;/pre&gt;""; 
?
</code></pre>
","57821398","320","<api><pagination><bitcoin><hmac>","1","0","2","2019-09-06 11:45:49","","0","1","7579547","","2017-11-01 02:21:35","2017-11-01 00:49:30","","","2019-09-06 11:45:49"
"27789310","HMAC with a time-window","<p>I'm doing some tests with HMAC by using a time-window mechanism based on UTC+0 synced time. The server has a special public API call <code>http://myserver.com/api/servertime/</code> that will return the server's exact UTC+0 time. This way the API users can sync their requesting client so it will be able to match the time window my API allows for secure calls. I built in a 30 minute timeslot (<code>-15min</code> - <code>+15min</code>).</p>

<p>My code looks like this:</p>

<pre><code>func GenerateHmac512(message []byte, key []byte) []byte {
    h := hmac.New(sha512.New, key)
    h.Write(message)
    return []byte(base64.StdEncoding.EncodeToString(h.Sum(nil)))
}

func ValidateHmac512(message, messageMAC, key []byte) bool {
    var err error
    decryptedMessageMAC, err := base64.StdEncoding.DecodeString(string(messageMAC))

    if err != nil {
        log.Fatalln(err.Error())
        return false
    }

    mac := hmac.New(sha512.New, key)
    mac.Write(message)
    expectedMAC := mac.Sum(nil)
    return hmac.Equal(decryptedMessageMAC, expectedMAC)
}

func main() {
    timestamp := time.Now().Unix()
    key := []byte(""afad9411468602782fb62d904f623d87"")
    message := []byte(fmt.Sprintf(""SecretHash,Value1,Value2,Value3,TimeStamp:%d"", time.Now().Unix()))
    hmacHash := GenerateHmac512(message, key)
    hmacValid := ValidateHmac512(message, hmacHash, key)
    log.Println(timestamp)
    log.Println(string(hmacHash))
    log.Println(hmacValid)

    requestValid := false

    if timestamp &gt; time.Now().Unix()-(60*15) &amp;&amp; timestamp &lt; time.Now().Unix()+(60+15) {
        requestValid = true
    }

    log.Println(requestValid)
}
</code></pre>

<p>I'm hashing the timestamp that will be publicly provided in the call in my HMAC hash, combined with the secret hash. I'm wondering if this is fool-proof enough, or it would need more work to make it totally solid? The call would be something like this:</p>

<pre><code>POST http://myserver.com/api/users/
Value1 : Data1
Value2 : Data2
Value3 : Data3
Timestamp : 1420497639
</code></pre>

<p><em>Eventually when this is all OK I'm gonna send this data over SSL/TLS. I know SSL is more than enough and HMAC wouldn't be needed, but I like to have these 3 layers of security. And I want to benchmark variations of these layers to see what the performance impact is and how I can tweak it to have a good balance between performance and security.</em></p>
","<p>There's not much to answer here, an HMAC authenticates a message and verifies integrity, and that seems to be what you want. Also, TLS is only ""more than enough"" if you're authenticating the client. If this is an unauthenticated call, then HMAC is still reasonable to prove the knowledge of a shared secret.</p>

<p>Note that <code>SecretHash</code> is superfluous. You already have a secret shared key.</p>
","27799844","319","<security><rest><go><hmac>","0","1","1","2015-01-06 13:38:04","27799844","0","","","","","2015-01-05 22:53:17","","","2015-01-06 13:38:04"
"20671301","Beginner's C++ memory allocation mess","<p>I am trying the code bellow. The thing is: some times work and some times doesn't! I am using the OpenSSL library, but I believe my mistake is something simple, C related.</p>

<pre><code>int test_c(string to_sign, string key)
{
    const void* key_void = (const void*)key.c_str();
    int key_size = key.size();

    const unsigned char* data_char = (const unsigned char*)to_sign.c_str();
    int data_size = to_sign.size();

    unsigned int res_f_len = data_size*8;
    unsigned char* res_f = (unsigned char*) malloc(sizeof(unsigned char)*res_f_len);

    HMAC_CTX ctx;
    HMAC_CTX_init(&amp;ctx);
    HMAC_Init_ex(&amp;ctx, key_void, key_size, EVP_sha256(), NULL);
    HMAC_Update(&amp;ctx, data_char, data_size);
    HMAC_Final(&amp;ctx, res_f, &amp;res_f_len);
    HMAC_CTX_cleanup(&amp;ctx);

    return strlen(res_f);
}
</code></pre>

<p><strong>When I say it doesn't work, I mean, for the same data and key, different results are returned!</strong></p>
","<p>Rather than return <code>strlen(res_f);</code> as the length of the output buffer, you need to return <code>res_f_len</code>.</p>

<p>There are three things that could happen with <code>strlen()</code> in your code:</p>

<ul>
<li>If the HMAC message digest has a byte that equals zero, <code>strlen</code> will return a length that's shorter than the HMAC message digest.</li>
<li>If the HMAC message digest has no zero bytes, then <code>strlen</code> will read beyond the message digest, leading to one of two outcomes:

<ul>
<li><code>strlen</code> reads through garbage in memory after the message digest, eventually stopping on a random 0.  <code>strlen</code> returns a value that's way too large.</li>
<li>If you're exceedingly lucky, the first byte after the message digest is 0, in which case <code>strlen</code> returns the actual length of the message digest.</li>
</ul></li>
</ul>

<p>So, only in the last scenario will you get the right value.  That pretty much seems wrong.</p>

<p>It appears tht <code>HMAC_Final</code> does update the length argument you pass to it.  (<a href=""https://stackoverflow.com/questions/242665/understanding-engine-initialization-in-openssl"">See the example in the top-voted answer to this StackOverflow question</a>.)  That's why you pass a pointer-to-int.  You should just return this updated value.</p>
","20672533","319","<c++><memory-management><openssl><hmac>","1","1","1","2013-12-19 02:42:43","20672533","5","","3104447","","2013-12-19 00:30:57","2013-12-19 00:24:51","","2017-05-23 12:28:40","2013-12-19 02:42:43"
"50110748","How to calculate the HMAC(hsa256) of a text using a public certificate (.pem) as key","<p>I'm working on Json Web Tokens and wanted to reproduce it using python, but I'm struggling on how to calculate the HMAC_SHA256 of the texts using a public certificate (pem file) as a key.<br>
Does anyone know how I can accomplish that!?</p>

<p>Tks</p>
","<p>Ok, I got this after 22 hours of study/google.</p>

<hr>

<p><strong>Spoiler Alert</strong></p>

<p>Since this is one of pentesterlab's pro exercises, I'll not post the code demonstrating how to generate a full JWT using HSA256. 
Instead, it'd be better if I post how to do calculate the HSA256 using a pem file in python, as it was my original question:</p>

<pre><code>import hashlib
import hmac

key = open(""public_cert.pem"",""r"").read()
signature = hmac.new(key, unsignedToken, digestmod=hashlib.sha256).digest()
print signature
</code></pre>

<p>Basically we just need to read the public key file and use the hmac.new(..) function, setting hashlib.sha256 as the digest to be used.
The ""unsignedToken"" is the JWT text (or declarations) that we wanted to calculate the signature.</p>

<p>For those still trying to figure it out how to create a valid JWT for pentesterlab's exercise, the only hint I can give is to urlsafe-base64 encode everything.
There is also a python module, named ""pyjwt"" that can be used, but its source code must be edited to allow public keys to be used as a HMAC key.</p>
","50126835","317","<python><jwt><hmac>","0","1","2","2018-07-16 07:03:51","","1","","","","","2018-05-01 02:43:55","","","2018-05-02 03:43:38"
"50110748","How to calculate the HMAC(hsa256) of a text using a public certificate (.pem) as key","<p>I'm working on Json Web Tokens and wanted to reproduce it using python, but I'm struggling on how to calculate the HMAC_SHA256 of the texts using a public certificate (pem file) as a key.<br>
Does anyone know how I can accomplish that!?</p>

<p>Tks</p>
","<p>In case any one found this question. The answer provided by the host works, but the idea is wrong. You don't use any RSA keys with HMAC method. The RSA key pair (public and private) are used for asymmetric algorithm while HMAC is symmetric algorithm.</p>

<p>In HMAC, the two sides of the communication keep the same secret text(bytes) as the key. It can be a <code>public_cert.pem</code> as long as you keep it secretly. But a <code>public.pem</code> is usually shared publicly, which makes it unsafe.</p>
","51356271","317","<python><jwt><hmac>","0","0","2","2018-07-16 07:03:51","","1","","","","","2018-05-01 02:43:55","","","2018-07-16 07:03:51"
"53696137","HMAC SHA256 Produces Different Result if String vs Variable in Liquid, Shopify","<p>I'm doing some URL verification between a Shopify site and my app. On Shopify, in a .liquid file, I'm creating an HMAC value using Shopify's built in <code>hmac_sha256</code> string filter. I'm using a secret key and a Twitch user ID which I've stored in a customer tag.</p>

<p>The hash value is passed as a query parameter to my app, which uses the crypto module in node.js to generate a hash and compare it with the hash from the url.</p>

<p>Things get strange here: In the .liquid file, when I type the Twitch ID directly into the string filter, the hash value generated by the .liquid file is the same value my app generates, and everything looks good:</p>

<p><code>{{ ""12345678""  | hmac_sha256: ""secret_key"" }}</code></p>

<p>However, when I pass the same Twitch ID as a <em>variable</em> into the string filter, the hash value the liquid file generates is different than the first time:</p>

<p><code>{{ twitchId  | hmac_sha256: ""secret_key"" }}</code></p>

<p>I've already tried removing whitespace and newline characters from the Twitch ID variable just in case there were any. I don't even have a guess as to what the problem could be. Maybe the variable (which is a string) is encoded differently than when I type it in directly?</p>

<p>For reference, the javascript code checking for matching hashes:</p>

<pre><code>    // Get query string params:
    const { hash, twitchId } = req.query;
    console.log('Twitch ID in query: ' + twitchId);

    // Verify user
    const generatedUserHash = crypto
    .createHmac('sha256', userVerifySecret)
    .update(twitchId)
    .digest('hex');

    console.log('Passed hash: ' + hash + ' Generated hash: ' + generatedUserHash);

    if (generatedUserHash == hash) {
        return true;
    } else {
        return false;
    }
</code></pre>
","<p>You need to show how you are assigning the ID to the variable. Without seeing that, there is no way to validate your question.</p>

<p>I did a quick test, and proved I get the same HMAC with a string and a variable, so it must be that you are doing something weird in your assignment:</p>

<pre><code>&lt;h1&gt;{{ ""12345678""  | hmac_sha256: ""secret_key"" }}&lt;/h1&gt;
{% capture fizz %}12345678{% endcapture%}
&lt;h1&gt;{{ fizz   | hmac_sha256: ""secret_key""}}&lt;/h1&gt;
</code></pre>

<p>Produces:</p>

<p>fcfebc0d424982ce8c7a986264beb0d4b1de44507501451e142236404e5b9778
fcfebc0d424982ce8c7a986264beb0d4b1de44507501451e142236404e5b9778</p>
","53697427","317","<node.js><shopify><liquid><sha256><hmac>","0","1","2","2018-12-09 23:20:20","53697698","1","","","","","2018-12-09 19:58:40","","","2018-12-09 22:45:00"
"53696137","HMAC SHA256 Produces Different Result if String vs Variable in Liquid, Shopify","<p>I'm doing some URL verification between a Shopify site and my app. On Shopify, in a .liquid file, I'm creating an HMAC value using Shopify's built in <code>hmac_sha256</code> string filter. I'm using a secret key and a Twitch user ID which I've stored in a customer tag.</p>

<p>The hash value is passed as a query parameter to my app, which uses the crypto module in node.js to generate a hash and compare it with the hash from the url.</p>

<p>Things get strange here: In the .liquid file, when I type the Twitch ID directly into the string filter, the hash value generated by the .liquid file is the same value my app generates, and everything looks good:</p>

<p><code>{{ ""12345678""  | hmac_sha256: ""secret_key"" }}</code></p>

<p>However, when I pass the same Twitch ID as a <em>variable</em> into the string filter, the hash value the liquid file generates is different than the first time:</p>

<p><code>{{ twitchId  | hmac_sha256: ""secret_key"" }}</code></p>

<p>I've already tried removing whitespace and newline characters from the Twitch ID variable just in case there were any. I don't even have a guess as to what the problem could be. Maybe the variable (which is a string) is encoded differently than when I type it in directly?</p>

<p>For reference, the javascript code checking for matching hashes:</p>

<pre><code>    // Get query string params:
    const { hash, twitchId } = req.query;
    console.log('Twitch ID in query: ' + twitchId);

    // Verify user
    const generatedUserHash = crypto
    .createHmac('sha256', userVerifySecret)
    .update(twitchId)
    .digest('hex');

    console.log('Passed hash: ' + hash + ' Generated hash: ' + generatedUserHash);

    if (generatedUserHash == hash) {
        return true;
    } else {
        return false;
    }
</code></pre>
","<p>Turns out my variable <code>twitchId</code> was getting instantiated after I was trying to use it in the sha256 filter. I was instantiating it in my theme.liquid file, and I was trying to access it in a liquid file in my app (the request from the Shopify site is responded to with a liquid file).</p>

<p>I guess I wrongly assumed the theme.liquid file is loaded before the file in my response to Shopify. I assumed this because javascript variables I instantiate in my theme.liquid file <em>are</em> available in my response liquid file (I think this has something to do with liquid variables being created server-side and javascript variables being created client-side).</p>

<p>I am now instantiating the <code>twitchId</code> variable in my response liquid file. So that solved it.</p>
","53697698","317","<node.js><shopify><liquid><sha256><hmac>","0","0","2","2018-12-09 23:20:20","53697698","1","","","","","2018-12-09 19:58:40","","","2018-12-09 23:20:20"
"36412535","HMAC C# and JavaScript","<p>Having trouble getting C# and Javascript to generate the same HMAC:</p>

<p>C#:</p>

<pre><code>string data = String.Format(""{0}{1}{2}{3}{4}{5}"", APPId, requestHttpMethod, requestUri, requestTimeStamp, nonce, requestContentBase64String);

        var secretKeyBytes = Convert.FromBase64String(sharedKey);

        byte[] signature = Encoding.UTF8.GetBytes(data);

        using (HMACSHA256 hmac = new HMACSHA256(secretKeyBytes))
        {
            byte[] signatureBytes = hmac.ComputeHash(signature);                
            return (incomingBase64Signature.Equals(Convert.ToBase64String(signatureBytes), StringComparison.Ordinal));
        }
</code></pre>

<p>Produces: apZUyGrS23BcEd2q5guGS4uQWVvcCvaDXIjCrLn/Hp4=</p>

<p>Javascript:</p>

<pre><code>var signatureRawData = """".concat(appId, requestHttpMethod, requestUri, requestTimeStamp, nonce, requestContentBase64String);

var hash = CryptoJS.HmacSHA256(signatureRawData, apiKey);
var hashInBase64 = CryptoJS.enc.Base64.stringify(hash);
</code></pre>

<p>Produces: mFZyyKT03OOThRnt/9dG/0x+jRde3jCMvI6Rd0eKhEE=</p>
","<p>Where is the apiKey in the c# code? Is it sharedKey? Is sercretKeyBytes a string, char[], or byte[]? I suspect secrtetKeyBytes is being converted to a string which is the cause of the issue.</p>
","36413063","316","<javascript><c#><hmac><cryptojs>","-1","0","1","2016-04-04 21:19:16","36413063","4","","","","","2016-04-04 20:45:07","","","2016-04-04 21:19:16"
"23605869","Any holes in securing a HTTP request with HMAC using ONLY the HTTP method and URL?","<p>I want to redirect my users browser using HTTP code 303 to a GET URL that I secure using HMAC.  Because the request will come from the users browser, I will not have fore-knowledge of the request headers.  So I am generating the HMAC hash using the values of the HTTP method and URL only. For example, the URL I want the browser to do to might be:</p>

<pre><code>GET /download
    ?name=report.pdf
    &amp;include=http://url1
    &amp;include=http://url2
</code></pre>

<p>This create report.pdf for me, containing the contents of all the urls specified using the include query param.</p>

<p>My HMAC code will change this URL to be</p>

<pre><code>GET /download
    ?name=report.pdf
    &amp;include=http://url1
    &amp;include=http://url2
    &amp;hmac-algorithm=simple-hmac
    &amp;hmac-signature=idhihhoaiDOICNK
</code></pre>

<p>I can issue HTTP 303 to the user using this URL, and the user will get their report.pdf.</p>

<p>As I am not including the request headers in the signature, I am wondering two things:</p>

<p>1) Can a would-be attacker take advantage of the fact that I am not signing the request headers?</p>

<p>2) Is there a better way to achieve what I am trying to do?</p>
","<p>When I realised that what I am talking about here is a signed URL, I checked the Amazon Docs and found ""REST Authentication Example 3: Query String Authentication Example"" in this document: <a href=""http://s3.amazonaws.com/doc/s3-developer-guide/RESTAuthentication.html"" rel=""nofollow"">http://s3.amazonaws.com/doc/s3-developer-guide/RESTAuthentication.html</a>.  </p>

<p>This example is about a signed URL for use through a browser.  About signing the headers, the document says:</p>

<blockquote>
  <p>You know that when the browser makes the GET request, it won't provide a Content-Md5 or a Content-Type header, nor will it set any x-amz- headers, so those parts are all kept empty.</p>
</blockquote>

<p>In other words, Amazon leave the headers out of the signature.  </p>

<p>Amazon make no mention of potential security holes, so until I hear otherwise (or get hacked :) ), I will assume my approach above is fine.</p>
","23625542","312","<http><hmac>","1","0","1","2014-05-13 07:48:33","23625542","2","2","","","","2014-05-12 09:50:48","","","2014-05-13 07:48:33"
"15741752","Authentication options for API serving website and mobile app","<p>As part of a wider learning process, I am looking to build a website and mobile application with a common api for data storage and retrieval (think of it as a simple cms). The mobile app will have additional functionality for things like offline storage (of draft articles for example if offline) and accessing media/camera etc. There will be a public facing home page with a secure area for each member to create/modify their own content. </p>

<p>I have done a lot of reading around but would like some feedback on a recommended architecture for this in terms of how to handle authentication (I am comfortable with building the app and website and api itself). Let's say also that at some point in the future I might like to open the api up to third parties. There are a whole host of options out there but I can't seem to find any decent diagrams representing the flows. Pros and cons for this scenario and links to diagrams of the below options would be great. </p>

<p>Would rather not require users to login every time they access app (or website come to that) and am worried about having any private keys on mobile app also.</p>

<p>This must be a very common scenario nowadays and am just wondering what experience people have with each of these.</p>

<p>OAuth 1a
OAuth 2
HMAC
Basic with SSL
Apache Shiro
Hosted services such as StormPath
Any other options</p>

<p>It would be nice for end users to be able to login with their social accounts (Twitter, Facebook et al) as well as being able to create an account with the website/app also.</p>
","","","311","<api><authentication><mobile><oauth><hmac>","2","","0","2013-04-01 10:36:00","","1","1","2231663","","2013-04-01 10:36:00","2013-04-01 10:30:21","","",""
"25358710","Postgresql hmac-sha1 signature differs from python signature","<p><strong>Postgres</strong>:</p>

<p>Code:</p>

<pre><code>SELECT encode(
    hmac(
        E'PUT\n\n1\n1408355972\nx-amz-acl:bucket-owner-full-control\n/1/1', 
        '1sf235123',
        'sha1'
    ),
    'base64'
);
</code></pre>

<p>Result: <code>""h9wRL15mXgwRxXjqLqhbYbnfJ7I=""</code></p>

<p><strong>Python 3</strong></p>

<p>Code:</p>

<pre><code>base64.encodestring(
    hmac.new(
        'PUT\n\n1\n1408355972\nx-amz-acl:bucket-owner-full-control\n/1/1'.encode(),
        '1sf235123'.encode(),
        sha1
    ).digest()
)
</code></pre>

<p>Result: <code>""CrU1V93ggf3QE0ovq686ir/i1ss=\n""</code></p>

<p>I want to signed s3 upload request in postgres, but I can't get the right signature, I have tried a whole day T_T.</p>

<p>Can someone give me a help??? Thanks a lot.</p>
","<p>You are swapping the two first <code>hmac</code> parameters in Python. The <code>hmac</code> constructor takes the secret first</p>

<pre><code>&gt;&gt;&gt; base64.encodestring(
...     hmac.new(
...         '1sf235123'.encode(),
...         'PUT\n\n1\n1408355972\nx-amz-acl:bucket-owner-full-control\n/1/1'.encode(),
...         sha1
...     ).digest()
... )
b'h9wRL15mXgwRxXjqLqhbYbnfJ7I=\n'
</code></pre>
","25361243","311","<python><postgresql><amazon-s3><plpgsql><hmac>","2","2","1","2014-08-18 10:32:22","","0","","1338158","","2014-08-18 08:05:43","2014-08-18 08:01:51","","","2014-08-18 10:32:22"
"47227706","openssl dgst -sha256 -hmac and JAVA solution differ","<p>I want to replicate: </p>

<pre><code>echo -n ""a"" | openssl dgst -binary -sha256 -hmac ""a""
</code></pre>

<p>in Groovy (Java). 
So far I've done this: </p>

<pre><code>def sha = Mac.getInstance(""HmacSHA256"")
SecretKeySpec secret_key = new SecretKeySpec(""a"".getBytes(), ""HmacSHA256"")
sha.init(secret_key)
def shaCrypted = new String(sha.doFinal('a'.getBytes()))
println(shaCrypted)
</code></pre>

<p>but unfortunately I don't get the same results. </p>

<p>Can anyone tell me what I am missing? 
Thanks in advance!</p>
","","","310","<java><command><sha256><hmac><hmacsha1>","1","","0","2017-11-10 17:42:18","","3","2","608639","","2017-11-10 17:42:18","2017-11-10 16:56:42","","",""
"26331463","HMAC implementation failure","<p>I hope this is the right forum; I was not sure if I should ask this in stackoverflow, cryptography or security.</p>

<p>So my problem is that php's hash_hmac function is only available with php >=5.1.2. Because some servers are not updated to this version I wrote my own HMAC-implementaion based on php's hash function. But the code doesn't produce the same output as hash_hmac...</p>

<p>So where is my mistake?</p>

<pre><code>define(""HASH_ALGO"", ""sha512"");
define(""HMAC_BLOCKSIZE"", 64);

function computeHMAC($message, $key) {
    $ikey;
    $okey;
    $zero = hex2bin(""00"");
    $ipad = hex2bin(""36"");
    $opad = hex2bin(""5C"");

    /*
     *  HMAC construction scheme:
     *  $ikey = $key padded with zeroes to blocksize and then each byte xored with 0x36
     *  $okey = $key padded with zeroes to blocksize and then each byte xored with 0x5C
     *  hash($okey . hash($ikey . $message))
     */

    //Hash key if it is larger than HMAC_BLOCKSIZE
    if (strlen($key) &gt; HMAC_BLOCKSIZE) {
        $key = hash(HASH_ALGO, $key, true);
    }
    //Fill ikey with zeroes
    for ($i = 0; $i &lt; HMAC_BLOCKSIZE; $i++) {
        $ikey[$i] = $zero;
    }
    //Fill ikey with the real key
    for ($i = 0; $i &lt; strlen($key); $i++) {
        $ikey[$i] = $key[$i];
    }
    //Until they get xored both keys are equal
    $okey = $ikey;
    //Xor both keys
    for ($i = 0; $i &lt; HMAC_BLOCKSIZE; $i++) {
        $ikey[$i] ^= $ipad;
        $okey[$i] ^= $opad;
   }
   //Build inner hash
   $innerHash = hash(HASH_ALGO, $ikey . $message, true);
   //Build outer hash
   $outerHash = hash(HASH_ALGO, $okey . $innerHash, true);
   return $outerHash;
}
</code></pre>

<p>The function was tested with the following code:</p>

<pre><code>echo hexDump(computeHMAC(""Testolope"", ""Testkeyolope""));
echo hexDump(hash_hmac(HASH_ALGO, ""Testolope"", ""Testkeyolope"", true));

The output is the following:
HexDump (64 Bytes):
65 a8 81 af 49 f2 49 c5 64 7a 7a b7 a6 ac a0 4e 9e 9b 1a 3c 76 fc 48 19 13 33 e0 f8 82 be 48 52 1a 50 49 09 1e fe bf 94 63 5f 9d 36 82 3f 2f a1 43 b4 60 9f 9f e5 d1 64 c6 5b 32 22 45 07 c9 cb 

HexDump (64 Bytes):
d2 e9 52 d2 ab f0 db a7 60 e0 52 b0 5c 23 5a 73 d9 8c 78 8e 9e fb 26 82 54 7e f9 c8 f1 65 df 7f 97 44 fe 2b 1e 2b 6d d5 cb a4 ba c6 73 35 06 9c 0f c8 2d 36 8c b3 9b c4 48 01 5c c2 9f ce b4 08 
</code></pre>
","<p>The problem is that you've mixed up the digest size and block size; SHA-512 has a digest size of 64, but a block size of 128.</p>

<p>Secondly, both <code>$ikey</code> and <code>$okey</code> are arrays and not strings, so you need to convert them both into a string first:</p>

<pre><code>$innerHash = hash(HASH_ALGO, join($ikey) . $message, true);
$outerHash = hash(HASH_ALGO, join($okey) . $innerHash, true);
</code></pre>

<p>That said, both <code>hash()</code> and <code>hash_hmac()</code> are documented as being available since 5.1.2, so I'm not sure what this will achieve :)</p>
","26333605","309","<hash><php><hmac>","5","2","1","2014-10-13 05:44:17","26333605","3","1","","","","2014-10-12 18:17:32","","","2014-10-13 05:44:17"
"34522863","HMAC produces wrong results","<p>All of this is new to me so please forgive my noobish question.</p>

<p>I'm trying to figure out HMAC step by step. </p>

<p>Let's say I have a following SHA-1 method: </p>

<pre><code>public static string SHA_1(string input) 
{
    SHA1CryptoServiceProvider mySha = new SHA1CryptoServiceProvider();
    string temp = BitConverter.ToString(mySha.ComputeHash(Encoding.UTF8.GetBytes(input)));
    temp = temp.Replace(""-"", """").ToUpper();
    return temp;
} 
</code></pre>

<p>It receives a plain text string;</p>

<p>Let's say my secret key is """" (empty string) and so is the message;
The HMAC is supposed to be: fbdb1d1b18aa6c08324b7d64b71fb76370690e1d</p>

<p>Now that's where I am a bit lost. I'll write down the steps as I understand them and please correct me if I am wrong (or where I am wrong rather). </p>

<ol>
<li>If the key is shorter than 64 bytes I need to pad it with 0's. 
So the padded key is 0x00 (x64 - because the key is empty, otherwise it's 64-key.Length);</li>
<li>Two constants each 64 bytes long are:</li>
</ol>

<p>ipad = 0x36 (x64)</p>

<p>opad = 0x5c (x64)</p>

<ol start=""3"">
<li>because the key is empty string XOR results in the same opad and ipad, i.e.</li>
</ol>

<p>ipad XOR key = ipad</p>

<p>opad XOR key = opad</p>

<ol start=""4"">
<li>At this point all left to do is to compute the HMAC itself. </li>
</ol>

<p>So: HMAC = Hash(opad || Hash(ipad || message)) and that should be it. </p>

<p>But I am not sure how to execute this. 
The message is a text string. opad and ipad are uint/byte arrays. I can convert them to ASCII as well and receive respectively:</p>

<p>ipad_str = ""6666666666..."" x64</p>

<p>opad_str = ""\\\\\\\...."" x64</p>

<p>Now my HMAC is supposed to be: </p>

<p>HMAC = SHA_1(""\\\\\\....""+ SHA_1(""6666666....""))</p>

<p>but the result doesn't match. Instead it is: 
4DCF4B8D646EBD77EB704A9240BFA429078131A2 </p>

<p>What am I missing here? Does the empty message have to be padded as well? 
I suspect that I misinterpret the concatenation, but I am not sure what other options I have. Should I leave ipad and opad as hex? SHA1 methods receives string so I must convert to some sort of a string, I just can't figure out what type exactly.  </p>

<p>Any help would be greatly appreciated. 
Thanks in advance and Happy New Year!</p>
","<p>The problem with my method was so obvious, it's not even funny. While appending the result of the opad and inner hash I left the inner hash in hex format but treated it as ASCII, as a result 104 bytes were sent to the outer hash instead of 84. So the solution is something like: HMAC = SHA_1(opad + HexToASCII(SHA_1(ipad)));</p>
","34562035","309","<c#><sha><hmac><hmacsha1>","2","2","1","2016-01-02 02:30:44","","10","","2006048","","2015-12-30 04:53:21","2015-12-30 04:22:51","","","2016-01-02 02:30:44"
"46105421","Google Apps script equivalent of PHP's hash_hmac() with RAW BINARY output?","<p>I have to connect to an API using hash_hmac. In the PHP documentation for hash_hmac, the fourth parameter bool $raw_output controls whether the output is raw binary data (true) or lowercase hexits (false). My program works in PHP by simply setting that parameter to true.</p>

<p>This is what works in PHP:</p>

<pre><code>$signature = base64_encode(hash_hmac('SHA256', $signature_string, $private_key, true))
</code></pre>

<p>In Google Apps I can't use any javascript libraries (or can I?) but there is this function: Utilities.computeHmacSha256Signature <a href=""https://developers.google.com/apps-script/reference/utilities/utilities#computehmacsha256signaturevalue-key"" rel=""nofollow noreferrer"">https://developers.google.com/apps-script/reference/utilities/utilities#computehmacsha256signaturevalue-key</a></p>

<p>However this doesn't have the ""true"" option that PHP has, so it doesn't output the raw binary data.</p>

<p>How can I get the same value using Google Apps as I get in PHP?</p>

<p>This is what I have in Google Apps, but obviously it doesn't output the raw binary data:</p>

<pre><code>var signature = Utilities.computeHmacSha256Signature(signature_string, private_key);
</code></pre>

<p>I did find a way to convert the response to hex (PHP equivalent of FALSE instead of TRUE, but that's not bringing me any closer to the solution.</p>

<pre><code>// convert to hex 
var signature_in_hex = signature.reduce(function(str,chr) {
chr = (chr &lt; 0 ? chr + 256 : chr).toString(16);
return str + (chr.length==1?'0':'') + chr;
},'');
</code></pre>
","<p>What worked for me is just copying these scripts straight into Google Apps:</p>

<p><a href=""https://cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.2/rollups/hmac-sha256.js"" rel=""nofollow noreferrer"">https://cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.2/rollups/hmac-sha256.js</a>
<a href=""https://cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.2/components/enc-base64-min.js"" rel=""nofollow noreferrer"">https://cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.2/components/enc-base64-min.js</a></p>

<p>And then use:</p>

<pre><code>var hash = CryptoJS.HmacSHA256(signature, private_key);
var base64 = hash.toString(CryptoJS.enc.Base64);
</code></pre>

<p>Fiddle:
<a href=""http://jsfiddle.net/c5r78fzm/"" rel=""nofollow noreferrer"">http://jsfiddle.net/c5r78fzm/</a></p>
","46108472","307","<javascript><php><google-apps-script><base64><hmac>","1","0","1","2017-09-08 04:08:17","","3","","5960067","","2017-09-07 22:01:39","2017-09-07 21:33:49","","","2017-09-08 04:08:17"
"9691152","Writing a Hmac function in Vala","<p>I am writing a cross platform application in Vala for Windows and Linux. I need to implement Hmac for security; but unfortunately the GHmac class (<a href=""http://developer.gnome.org/glib/2.30/glib-Data-HMACs.html"" rel=""nofollow"">link</a>) has not been ported to windows yet. I found the algorithm for Hmac on wikipedia (<a href=""http://en.wikipedia.org/wiki/HMAC"" rel=""nofollow"">link</a>) and I believe I implemented it correctly but when compared with the built in class I don't get the same result. Here is my function below if anyone can give me a hand finding the bug(s) that would be amazing.</p>

<pre><code>public static string compute_for_data(ChecksumType type, uint8[] key,
                                                            uint8[] data) {
    int block_size = 64;
    uint8[] mod_key = key;
    uint8[] outer = new uint8[block_size];
    uint8[] inner = new uint8[block_size];

    if (mod_key.length &gt; block_size) {
        mod_key = Checksum.compute_for_data(type, key).data;
    }
    mod_key.resize(block_size);

    for (int i=0; i &lt; mod_key.length; i++) {
        outer[i] = mod_key[i] ^ 0x5c;
        inner[i] = mod_key[i] ^ 0x36;
    }

    int i = inner.length;
    inner.resize(i + data.length);
    for (int j=0; j &lt; data.length; j++) {
        inner[i + j] = data[j];
    }

    inner = Checksum.compute_for_data(type, inner).data;

    i = outer.length;
    outer.resize(i + inner.length);
    for (int j=0; j &lt; inner.length; j++) {
        outer[i + j] = inner[j];
    }

    return Checksum.compute_for_data(type, outer);
}
</code></pre>
","<p>I know its tacky to answer one's own question but I managed to puzzle through it with the help of a friend so here is the solution. Basically when I used the Checksum.compute_for_data function it returned a hex string not hex data and that broke the algorithm. Here is the corrected version:</p>

<pre><code>public static string compute_for_data(ChecksumType type, uint8[] key,
                                                            uint8[] data) {
    int block_size = 64;
    switch (type) {
        case ChecksumType.MD5:
        case ChecksumType.SHA1:
            block_size = 64; /* RFC 2104 */
            break;
        case ChecksumType.SHA256:
            block_size = 64; /* RFC draft-kelly-ipsec-ciph-sha2-01 */
            break;
    }

    uint8[] buffer = key;
    if (key.length &gt; block_size) {
        buffer = Checksum.compute_for_data(type, key).data;
    }
    buffer.resize(block_size);

    Checksum inner = new Checksum(type);
    Checksum outer = new Checksum(type);

    uint8[] padding = new uint8[block_size];
    for (int i=0; i &lt; block_size; i++) {
        padding[i] = 0x36 ^ buffer[i];
    }
    inner.update(padding, padding.length);
    for (int i=0; i &lt; block_size; i++) {
        padding[i] = 0x5c ^ buffer[i];
    }
    outer.update(padding, padding.length);

    size_t length = buffer.length;
    inner.update(data, data.length);
    inner.get_digest(buffer, ref length);

    outer.update(buffer, length);
    return outer.get_string();
}
</code></pre>
","9722957","307","<hmac><vala><hmacsha1>","1","2","1","2012-03-15 15:31:36","","0","","","","","2012-03-13 19:58:20","","","2012-03-15 15:31:36"
"40572472","Generating SHA256 in Swift (iOS)","<p>I am trying to generate SHA256 using the following function:- </p>

<pre><code> func generateHMAC(key: String, data: String) -&gt; String {
    let keyData = key.dataFromHexadecimalString()! as NSData
    let dataIn = data.dataUsingEncoding(NSUTF16StringEncoding)
    var result: [CUnsignedChar]
    result = Array(count: Int(CC_SHA256_DIGEST_LENGTH), repeatedValue: 0)
    CCHmac(CCHmacAlgorithm(kCCHmacAlgSHA256), keyData.bytes, keyData.length, dataIn!.bytes, dataIn!.length, &amp;result)

    let hash = NSMutableString()
    for val in result {
        hash.appendFormat(""%02hhx"", val)
    }

    return hash as String
}
</code></pre>

<p>Input is</p>

<pre><code>AccountNumber: 100195
Amount: 10 
BillerID: 59 
ChannelID: 2 
Context: 11|test
CountryID: 1 
CustomerID: 34
EmailID: ankur.arya@me.com
ReturnURL: https://uat.myfatoora.com/ReceiptPOC.aspx 
SECURITYTOKEN: 6B4A47A6-40A0-4C9D-A925-5CECA2910881 
TxnRefNum: 991107844408242 
UserName: USP
</code></pre>

<p>and the output is </p>

<pre><code>4cd1acc736a9702c8cdb1a546d1c274a67cb285dbdbb972aab39ee51c2a2‌​26c8
</code></pre>

<p>However, this doesn’t match with the output of backend which uses the following algo</p>

<pre><code>private string CreateSHA256POC(bool useRequest)
    {
        // Hex Decode the Secure Secret for use in using the HMACSHA256 hasher
        // hex decoding eliminates this source of error as it is independent of the character encoding
        // hex decoding is precise in converting to a byte array and is the preferred form for representing binary values as hex strings. 
        secureHash = """";
        byte[] convertedHash = new byte[_secureSecret.Length / 2];
        for (int i = 0; i &lt; _secureSecret.Length / 2; i++)
        {
            convertedHash[i] = (byte)Int32.Parse(_secureSecret.Substring(i * 2, 2), System.Globalization.NumberStyles.HexNumber);
        }

        // Build string from collection in preperation to be hashed
        StringBuilder sb = new StringBuilder();
        SortedList&lt;String, String&gt; list = (useRequest ? requestFields : responseFields);
        foreach (KeyValuePair&lt;string, string&gt; kvp in list)
        {
            // if (kvp.Key.StartsWith(""vpc_"") || kvp.Key.StartsWith(""user_""))
            sb.Append(kvp.Key + ""="" + kvp.Value + ""&amp;"");
        }
        // remove trailing &amp; from string
        if (sb.Length &gt; 0)
            sb.Remove(sb.Length - 1, 1);

        // Create secureHash on string
        string hexHash = """";
        using (HMACSHA256 hasher = new HMACSHA256(convertedHash))
        {
            byte[] hashValue = hasher.ComputeHash(Encoding.UTF8.GetBytes(sb.ToString()));
            foreach (byte b in hashValue)
            {
                hexHash += b.ToString(""X2"");
                secureHash = hexHash;
            }
        }
        return hexHash;
    }
</code></pre>

<p>and their output is </p>

<pre><code>41D8E81C128100A76185F24CE00BC6A4FEA30839E6DE3DFFBC3B5814E4FD0C4E
</code></pre>

<p>Secret key is </p>

<pre><code>71DD0F73AFFBB47825FF9864DDE95F3B
</code></pre>

<p>Can you please help me to update my method in Swift to get the same result as backend. </p>

<p>Thanks. </p>
","","","305","<c#><ios><swift><sha256><hmac>","2","","0","2016-11-14 05:53:49","","12","","1960149","","2016-11-14 05:53:49","2016-11-13 09:42:07","","",""
"45843682","Java HmacSHA512","<p>I am trying to mimic the pseudocode as below in Java, but get a different result. Could anyone please advise what I have done wrong here? Very appreciated.</p>

<p>Pseudo code is telling me the resulting hash should be:</p>

<blockquote>
  <p>69H45OZkKcmR9LOszbajUUPGkGT8IqasGPAWqW/1stGC2Mex2qhIB6aDbuoy7eGfMsaZiU8Y0lO3mQxlsWNPrw==</p>
</blockquote>

<p>whereas my code is giving:</p>

<blockquote>
  <p>2pIphF0hOqzHqMlGk8KRYGi+/3OPYg+CF9X+qRdGeUP+zHxXYFzdbX/W+8/LFkUt8Pn1M4lXnwg0pSjDz51F+Q==</p>
</blockquote>

<p>Pseudo Code:</p>

<pre><code>function hmac_512(msg, sec) {
    sec = Base64Decode(sec);
    result = hmac(msg, sec, sha512);
    return Base64Encode(result);
}

secret = ""7pgj8Dm6"";
message = ""Test\0Message"";

result = hmac_512(message, secret);
if (result == ""69H45OZkKcmR9LOszbajUUPGkGT8IqasGPAWqW/1stGC2Mex2qhIB6aDbuoy7eGfMsaZiU8Y0lO3mQxlsWNPrw=="")
    print(""Success!"");
else
    printf(""Error: %s"", result);
Java / Groovy
String sign(String base64Key, byte[] bytes) {
    Mac mac = Mac.getInstance(""HmacSHA512"");
    SecretKey secretKey = new SecretKeySpec(Base64.decode(base64Key.getBytes()), ""HmacSHA512"");
    mac.init(secretKey);
    mac.update(bytes);
    return Base64.encodeBytes(mac.doFinal()).trim();
}

def tonce = (new Date()).time*1000    
def postBody['tonce'] = tonce;
// put other parameters in postBody

String postBodyInJson = new Gson().toJson(postBody)
String path = 'api/3/receive'
String data = path + ""\0"" + postBodyInJson
String sign = sign(secret, data.getBytes())
</code></pre>

<p>My Code:</p>

<pre><code> private static String CreateToken(String message, String secretKey)
{
    message = ""Test\\oMessage"";
    secretKey = ""7pgj8Dm6"";
    String hash = """";
    try {    

        Mac sha512_HMAC = Mac.getInstance(""HmacSHA512"");
        SecretKeySpec secret_key = new SecretKeySpec(Base64.decodeBase64(secretKey), ""HmacSHA512"");
        sha512_HMAC.init(secret_key);
        sha512_HMAC.update(message.getBytes());

        hash = Base64.encodeBase64String(sha512_HMAC.doFinal()).trim();
        System.out.println(hash);

    }
    catch (Exception e){
        System.out.println(""Error"");
    }
    return hash;
}
</code></pre>
","","","304","<java><hmac>","0","","0","2017-08-23 15:45:23","","2","","2813306","","2017-08-23 15:45:23","2017-08-23 15:20:25","","",""
"25874481","create a MAC using key from bytearray","<p>I have a bytearray and want to make a Key-objecct out of it, which is going to be used
to initialize an Mac-object. But I dont know how to make a key-object for this, the right type of key and so on. Some help would be greatly appreciated;</p>

<pre><code>byte[] key2 = rsaDec.doFinal(encKey2); //assume this is correct
Mac mac = Mac.getInstance(""HmacMD5"");

Key macKey = new Key //heres the issue at hand
mac.init(macKey);
byte[] message = ... //this will be retrieved
mac.update(message);
byte[] macVal = mac.doFinal();
</code></pre>

<p>Thank you</p>
","<p>One way to do it could be:</p>

<pre><code> String keyString = ""theKeyImUsing"";
 SecretKeySpec macKey = new SecretKeySpec((keyString).getBytes(""UTF-8""), ""HmacMD5"");
 mac.init(macKey);
</code></pre>

<p>If you already have the byte[] then just pass it:</p>

<pre><code>     SecretKeySpec macKey = new SecretKeySpec(myByteArray, ""HmacMD5"");
</code></pre>
","25874586","303","<java><key><hmac>","0","0","1","2014-09-16 19:17:22","","0","2","185322","","2014-09-16 19:17:22","2014-09-16 16:58:03","","","2014-09-16 17:04:16"
"12784775","I Still don't get HMAC or how Signing a request works","<p>I work on ASP.NET and was just reading this from the amazon directory <a href=""http://docs.amazonwebservices.com/AmazonS3/latest/dev/RESTAuthentication.html"" rel=""nofollow"">http://docs.amazonwebservices.com/AmazonS3/latest/dev/RESTAuthentication.html</a> where it states</p>

<blockquote>
  <p>Informally, we call this process ""signing the request,"" and we call
  the output of the HMAC algorithm the ""signature"" because it simulates
  the security properties of a real signature. Finally, you add this
  signature as a parameter of the request, using the syntax described in
  this section.</p>
  
  <p>When the system receives an authenticated request, it fetches the AWS
  Secret Access Key that you claim to have, and uses it in the same way
  to compute a ""signature"" for the message it received. It then compares
  the signature it calculated against the signature presented by the
  requester.</p>
</blockquote>

<p>But i presume both the requests wont be same right. Request is signed (great!!) but HMAC of the response from the client browser is going to be different since it contains extra data Right? so how come requests can validate even though they are valid</p>
","<p>You need to read the whole of the paragraphs you quoted from. Right before the piece you quoted it says:</p>

<blockquote>
  <p>To authenticate a request, you first concatenate selected elements of the request to form a string. You then use your AWS Secret Access Key to calculate the HMAC of that string.</p>
</blockquote>

<p>So you calculate your HMAC from those selected elements, and when you submit the request, the server calculates an HMAC from those same elements, and then they are compared.</p>
","12784873","300","<asp.net><security><hmac>","2","3","1","2012-10-08 15:34:01","12784873","0","","","","","2012-10-08 15:28:23","","","2012-10-08 15:34:01"
"17444061","SHA256 HMAC does not give the expected answer","<pre><code>String stringToSign = ""GET"" + ""\n"" +
                    ""webservices.amazon.com"" + ""\n"" +
                    ""/onca/xml"" + ""\n"" +
                    ""AWSAccessKeyId=AKIAIOSFODNN7EXAMPLE&amp;ItemId=0679722769&amp;Operation=ItemLookup&amp;ResponeGroup=ItemAttributes%2COffers%2CImages%2CReviews&amp;Service=AWSECommerceService&amp;Timestamp=2009-01-01T12%3A00%3A00Z&amp;Version=2009-01-06"";


    SecretKeySpec keySpec = new SecretKeySpec(
            ""1234567890"".getBytes(),
            ""HmacSHA256"");

    Mac mac = Mac.getInstance(""HmacSHA256"");
    mac.init(keySpec);


    byte[] result = mac.doFinal(stringToSign.getBytes());
    String encodedResult = Base64.encodeBase64String(result);
    System.out.println(""encodedResult: ""+encodedResult);

    String urlEncodedResult = URLEncoder.encode(encodedResult, ""UTF-8"").replace(""+"", ""%2B"").replace(""*"", ""%2A"").replace(""%7E"", ""~"");
    System.out.println(""ulrEncodedResult: ""+urlEncodedResult);
</code></pre>

<p>This is for the REST authentication for AWS. The result I get is:
ulrEncodedResult: k1T%2FqvVoXgEvmdFhTEh71vLDznqEVCyKcslA5RRSB6s%3D</p>

<p>The expected result is:
ulrEncodedResult: M%2Fy0%2BEAFFGaUAp4bWv%2FWEuXYah99pVsxvqtAuC8YN7I%3D</p>

<p>All the exact steps for authentication are show here:<a href=""http://docs.aws.amazon.com/AWSECommerceService/2011-08-01/DG/rest-signature.html"" rel=""nofollow"">http://docs.aws.amazon.com/AWSECommerceService/2011-08-01/DG/rest-signature.html</a></p>

<p>Can anyone spot the mistake that I am making? </p>
","<p>One concern is that this:</p>

<pre><code>""1234567890"".getBytes()
</code></pre>

<p>and this</p>

<pre><code>stringToSign.getBytes()
</code></pre>

<p>don't specify the character encoding used (e.g. UTF8). It'll be dependent on your platform or JVM settings, and that may be different from what you want (which is, I suspect, UTF8). I would prefer to use the <code>getBytes(CharSet)</code> variant.</p>
","17444102","299","<java><hmac><sha256>","0","0","1","2013-07-03 09:15:33","","0","2","","","","2013-07-03 09:13:49","","","2013-07-03 09:15:33"
"1992126","Calculate HMAC for WBXML document with user pin","<p>I have created a WBXML document from my SyncML ota configuration XML document. To send this configuration to cellphone I need to encode this document with user-pin which is by default always taken as ""1234""</p>

<p>This requires me to calculate HMAC of the WBXML document with the pin ""1234"". I'm stuck at this and would appreciate any help on this.</p>

<p>I've googled enough but nothing seems to help straight as I need, may be some code might help me.</p>
","<ul>
<li><a href=""http://discussion.forum.nokia.com/forum/showpost.php?s=0fbf1b467df4709829fef29580d12f89&amp;p=239648&amp;postcount=10"" rel=""nofollow noreferrer"">C# code for HMAC SHA1 Ecoding for userPIN security of OMA Client Provisoning</a><br>
(<a href=""http://discussion.forum.nokia.com/forum/showthread.php?p=239648#post239648"" rel=""nofollow noreferrer"">full thread</a>)</li>
</ul>

<p>Does this help?</p>
","1992166","299","<c#><hmac><wbxml>","0","0","1","2010-01-02 17:18:02","","0","","","","","2010-01-02 17:03:33","","","2010-01-02 17:18:02"
"46796489","HMACSHA256.ComputeHash - Unexpected Result","<p>I'm trying to generate a signature in VB.NET using the following vendor documentation as a reference guide:</p>

<p><a href=""https://shuttle.support.signiant.com/customer/en/portal/articles/2807676-media-shuttle-metadata-developer-s-guide#AppendixA"" rel=""nofollow noreferrer"">https://shuttle.support.signiant.com/customer/en/portal/articles/2807676-media-shuttle-metadata-developer-s-guide#AppendixA</a></p>

<p>They also provide this sample JS code:</p>

<p><a href=""https://github.com/Signiant/mediashuttle-metadata-webtask/blob/master/form.js"" rel=""nofollow noreferrer"">https://github.com/Signiant/mediashuttle-metadata-webtask/blob/master/form.js</a></p>

<p>I'm having trouble getting the correct result from the 2nd time I do HMACSHA256.ComputeHash. I think it has something to do with the way I generate the 'stringToSign', but I'm out of ideas at this point. Any help would be greatly appreciated!</p>

<pre><code>Public Shared Function GenerateSignature() As String
    Dim encoding = New System.Text.UTF8Encoding()
    ' ALSO TRIED
    'Dim encoding = New System.Text.ASCIIEncoding()
    'Dim encoding = New System.Text.UnicodeEncoding()

    ' TEST PARAMS
    Dim registrationKey = ""2e751ce9-5684-4925-9cc3-0665802ebc55""
    Dim requestTimestamp = ""2015-01-20T01:07:18.763Z""
    Dim stringToSign = ""2015-01-20T01:07:18.763Z\nhttps://submit-portal.mediashuttle.com/metadata/v3.0/portal/submit-portal/package/4eMv\nX-Sig-Algorithm%3dSIG1-HMAC-SHA256&amp;X-Sig-Date%3d2015-01-20T01%3a07%3a18.763Z\ne3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855""
    'ALSO TRIED:
    'Dim stringToSign As String = requestTimestamp + ""\r\n"" + requestUrl + ""\r\n"" + canonicalQueryString + ""\r\n"" + requestBodyHash
    'Dim stringToSign As String = requestTimestamp + Environment.NewLine + requestUrl + Environment.NewLine + canonicalQueryString + Environment.NewLine + requestBodyHash

    ' Generate the signing key
    Dim signingKey As Byte()
    Using HMACSHA256 As New System.Security.Cryptography.HMACSHA256(encoding.GetBytes(registrationKey))
        signingKey = HMACSHA256.ComputeHash(encoding.GetBytes(requestTimestamp))
    End Using
    Dim signingKeyString = Replace(BitConverter.ToString(signingKey), ""-"", """").ToLower()
    Console.Write(""signingKeyString: '"" + signingKeyString + ""'"" + Environment.NewLine + Environment.NewLine)

    ' RESULT OK: 'ebf870730d4d914fd8c24761433524171e948cd851830e785343b5f9d0d0f56a'

    ' Generate request signature
    Dim signature As Byte()
    Using HMACSHA256 As New System.Security.Cryptography.HMACSHA256(signingKey)
        signature = HMACSHA256.ComputeHash(encoding.GetBytes(stringToSign))
    End Using
    Dim signatureString = Replace(BitConverter.ToString(signature), ""-"", """").ToLower()
    Console.Write(""signatureString: '"" + signatureString + ""'"" + Environment.NewLine + Environment.NewLine)

    ' RESULT BAD: '5f0b42c5cebf1158d9154586522489884fb642b6e7cc544aff8fa79e4f2c5a57'
    ' According to reference doc, should be: '139319aec19208168aaea515d0110b75d36c73de852c3265fc9758834d1b78ec'

    Return signatureString
End Function
</code></pre>
","<p>Turns out the problem involved multiple issues:</p>

<ol>
<li>New line seperator needed to be ChrW(10). Thanks Hans Passant!</li>
<li>Url Encoding of the original components in the stringToSign needed to use uppercase characters.</li>
<li>Encoding needed to be UTF8.</li>
</ol>

<p>My working function:</p>

<pre><code>Imports Rework '3rd Party Library: https://www.nuget.org/packages/Rework/
Imports System.Web
Imports System.Text
Imports System.Text.RegularExpressions

Public Class Signiant
Public Shared Function GenerateSignedUrl(requestUrl, requestBody, registrationKey) As String
    Dim requestTimestamp = DateTime.UtcNow.ToString(""o"")

    ' TEMP TEST PARAMS
    requestUrl = ""https://submit-portal.mediashuttle.com/metadata/v3.0/portal/submit-portal/package/4eMv""
    requestBody = """"
    registrationKey = ""2e751ce9-5684-4925-9cc3-0665802ebc55""
    requestTimestamp = ""2015-01-20T01:07:18.763Z""

    ' Generate canonical query String
    Dim algorithmParam = ""X-Sig-Algorithm=SIG1-HMAC-SHA256""
    Dim dateParam = ""X-Sig-Date="" + requestTimestamp
    Dim canonicalQueryString = HttpUtility.UrlEncode(algorithmParam) + ""&amp;"" + HttpUtility.UrlEncode(dateParam)
    canonicalQueryString = Regex.Replace(canonicalQueryString, ""(%[0-9a-f][0-9a-f])"", Function(c) c.Value.ToUpper())

    ' Generate the string to sign
    Dim requestBodyHash = Crypto.ToSHA(requestBody, Crypto.SHA_Type.SHA256).ToLower()
    Dim stringToSign As String = requestTimestamp + ChrW(10) + requestUrl + ChrW(10) + canonicalQueryString + ChrW(10) + requestBodyHash

    ' Generate the signing key
    Dim signingKey As Byte()
    Using HMACSHA256 As New System.Security.Cryptography.HMACSHA256(Encoding.UTF8.GetBytes(registrationKey))
        signingKey = HMACSHA256.ComputeHash(Encoding.UTF8.GetBytes(requestTimestamp))
    End Using

    ' Generate request signature
    Dim signature As Byte()
    Using HMACSHA256 As New System.Security.Cryptography.HMACSHA256(signingKey)
        signature = HMACSHA256.ComputeHash(Encoding.UTF8.GetBytes(stringToSign))
    End Using
    Dim signatureHex = Replace(BitConverter.ToString(signature), ""-"", """").ToLower()

    ' Generate the signed URL
    Dim signatureParam = ""X-Sig-Signature="" + signatureHex
    Dim signedUrl = requestUrl + ""?"" + algorithmParam + ""&amp;"" + dateParam + ""&amp;"" + signatureParam

    Return signedUrl
End Function
End Class
</code></pre>
","46816582","298","<.net><hmac>","0","0","1","2017-10-18 18:10:32","","4","","","","","2017-10-17 18:06:50","","","2017-10-18 18:10:32"
"30508889","Cannot reproduce sha512 hmac from PHP in node.js","<p>I have some PHP code that produces a hmac as follows:</p>

<pre><code>&lt;?php
$secret = ""7pgj8Dm6"";
$message = ""Test\0Message"";
echo base64_encode(hash_hmac('sha512', $message, base64_decode($secret), true)).""\n"";
echo ""69H45OZkKcmR9LOszbajUUPGkGT8IqasGPAWqW/1stGC2Mex2qhIB6aDbuoy7eGfMsaZiU8Y0lO mQxlsWNPrw==\n"";
?&gt;
</code></pre>

<p>When I try to produce similar code in node.js, I get a different base64 encoded result than I'd like to have, and I can't figure out why.</p>

<pre><code>var hmac = function(msg, secret){
  var s = (new Buffer(secret, 'base64')).toString('utf8');
  var hmac = require('crypto').createHmac('sha512',s);
  hmac.update(msg);
  return hmac.digest('base64');
};

var secret = ""7pgj8Dm6"";
var message = ""Test\0Message"";
var wanted = ""69H45OZkKcmR9LOszbajUUPGkGT8IqasGPAWqW/1stGC2Mex2qhIB6aDbuoy7eGfMsaZiU8Y0lO3mQxlsWNPrw=="";
var got = hmac(message, secret);
if(wanted === got){
  console.log('All is fine.');
}else{
  console.log('Hash is wrong :(');
}
console.log('wanted:\t'+wanted);
console.log('got:\t'+got);
</code></pre>

<p>My motivation for this is the anxpro <a href=""http://docs.anxv3.apiary.io/#quickstart"" rel=""nofollow"">api</a>, with which I'd like to play a bit.</p>
","<p>Ok, I figured it out. The problem was that I was calling <code>toString</code> on the <code>Buffer</code> created in the <code>hmac</code> function. When I remove that, everything works fine.</p>

<pre><code>var hmac = function(msg, secret){
  var s = new Buffer(secret, 'base64');
  var hmac = require('crypto').createHmac('sha512',s);
  hmac.update(msg);
  return hmac.digest('base64');
};
</code></pre>
","30510616","296","<node.js><hmac>","1","1","1","2015-05-28 15:16:31","30510616","2","1","","","","2015-05-28 14:04:24","","","2015-05-28 15:16:31"
"38002006","Detect if a request comes from within the Shopify Admin Panel","<p>I am using the Embedded APP SDK (for building Shopify App) that allows me to display a webpage inside the admin panel. Lets say the Shopify App has a url of /shopifyApp . Whenever user clicks on the said app, he is redirected to ""/shopifyApp"" .
The get request looks like
/shopifyApp?hmac=b20934d6b66cxxx&amp;protocol=https%3A%2F%2F&amp;shop=dev-store-61.myshopify.com&amp;timestamp=1466715935</p>

<p>I am trying to verify if the hmac is valid. I am using the below piece of code to validation , but unfortunately its not working.</p>

<pre><code>var map = JSON.parse(JSON.stringify(req.query));
    delete map['hmac'];
    var message = querystring.stringify(map);
    var generated_hash = require('crypto').createHmac('sha256', ""myAppSecret"").update(message).digest('hex');
    if (generated_hash === req.query.hmac) {
       //show Authenticated page
    } else {
        //Show unauthenticated page
    }
</code></pre>

<p>The generated has is never equal to hmac for some reason. Can someone advise me as to what I am doing wrong ? </p>
","<p>You need to delete the hmac and signature</p>

<pre><code>function verifyRequest(req, res, next) {
var map = JSON.parse(JSON.stringify(req.query));
delete map['signature'];
delete map['hmac'];

var message = querystring.stringify(map);
var generated_hash = crypto.createHmac('sha256', config.oauth.client_secret).update(message).digest('hex');
if (generated_hash === req.query.hmac) {
    next();
} else {
    return res.json(400);
}
</code></pre>

<p>}</p>
","38002142","295","<node.js><oauth><passport.js><shopify><hmac>","0","0","1","2016-06-24 17:09:44","","0","","19679","","2016-06-24 17:09:44","2016-06-23 21:16:28","","","2016-06-23 21:26:23"
"3653029","HMAC SSL Certificate Question with OAuth","<p>I'm kinda new to this topic so please be gentle ;) I'm attempting to use a 3rd-party Health API called Dossia (<a href=""http://dossia.org"" rel=""nofollow noreferrer"">http://dossia.org</a>).</p>

<p>I setup a test account and have received my OAuth Consumer Key and Secret, in the config there's a line which says </p>

<blockquote>
  <p>define('USER_SIG_METHOD','HMAC-SHA1');</p>
</blockquote>

<p>My question is how do I make my server's ""Signature Method"" HMAC-SHA1?</p>

<p>This is just a non-ssl dev box with Fedora, I do have a production box with SSL on it, but I was hoping to get a sandbox post before moving it to production. </p>

<p>When I curl a post, I get a 404 error and the curl handle's info reads this:</p>

<pre><code> [ssl_verify_result] =&gt; -8179
</code></pre>

<p>So I'm assuming this is the issue, I have scoured their wiki, which is found <a href=""http://docs.dossia.org/index.php/Dossia_Application_Programming_Interface"" rel=""nofollow noreferrer"">here</a> however the only thing it says about the signature method is that they only support HMAC, do I need to include a certificate like the one on my prod box? Or am I going in completely the wrong direction?</p>

<p>Any advice would help me,
Thank you!</p>
","<p>The signature Method was not the issue here, it was an issue with the record ID needed to be consistent in order to post to the right patient, </p>
","3763129","293","<oauth><signature><hmac>","0","0","1","2010-09-21 18:05:39","3763129","0","","242934","","2010-09-07 02:02:47","2010-09-06 16:46:06","","","2010-09-21 18:05:39"
"38966981","Reading HttpContent bytes fails inside DelegatingHandler when multiple content types present","<p>I'm trying to implement HMAC security for an API. Everything works fine until I try to post data values alongside a file in a <code>MultipartFormDataContent</code>.</p>

<p>The <code>HttpClient</code> <code>DelegatingHandler</code> fails silently when the async line of code to read bytes is hit.</p>

<p>Here's the code building the request:</p>

<pre><code>private FileOutputViewModel GetApiOutput(Uri apiResource, string filename, byte[] file, IDictionary&lt;string, string&gt; extraParameters)
{
    FileOutputViewModel result = new FileOutputViewModel();

    if (file != null)
    {
        using (var content = new MultipartFormDataContent())
        {
            if (extraParameters != null)
            {
                foreach (var param in extraParameters)
                {
                    content.Add(new StringContent(param.Value), param.Key); // &lt;- If I don't have this, everything works fine
                }
            }

            var fileContent = new ByteArrayContent(file);
            fileContent.Headers.ContentDisposition = new ContentDispositionHeaderValue(""attachment"")
            {
                FileName = filename
            };
            content.Add(fileContent);

            var response = HttpClient.PostAsync(apiResource.ToString(), content).Result;

            result.Output = JsonConvert.DeserializeObject(response.Content.ReadAsStringAsync().Result);

            result.Filename = Path.GetFileName(filename);
        }
    }

    return result;
}
</code></pre>

<p>If I don't use the <code>DelegatingHandler</code> everything works fine, but the HMAC security isn't implemented for the request so is rejected on the API's end.</p>

<p>If I don't add the data values using <code>StringContent</code> items alongside the file then there's no problem reading the bytes. But I'm left with an incomplete request as I need to pass more info along with the file.</p>

<p>The line of code that fails in the <code>DelegatingHandler</code> is indicated below:</p>

<pre><code>private static async Task&lt;byte[]&gt; ComputeHash(HttpContent httpContent)
{
    using (var md5 = MD5.Create())
    {
        byte[] hash = null;
        if (httpContent != null)
        {
            var ms = new MemoryStream();
            await httpContent.CopyToAsync(ms); // &lt;- Fails here
            ms.Seek(0, SeekOrigin.Begin);

            var content = ms.ToArray();
            if (content.Length != 0)
            {
                hash = md5.ComputeHash(content);
            }
        }
        return hash;
    }
}
</code></pre>

<p>Originally the failing line was:</p>

<pre><code>var content = await httpContent.ReadAsByteArrayAsync();
</code></pre>

<p>but this failed with even just the file on its own (previous <a href=""https://stackoverflow.com/q/38904954/250254"">Stackoverflow question</a>). Using a <code>MemoryStream</code> was one step forward but hasn't got me all the way.</p>

<p>Any ideas how I might be able to work around this issue?</p>
","<p>Seems this was caused by having an async signature for the <code>System.Net.Http.DelegatingHandler.SendAsync</code> method. Originally the delegate override was:</p>

<pre><code>protected async override Task&lt;HttpResponseMessage&gt; SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
</code></pre>

<p>when I adapted the code so I could change it to:</p>

<pre><code>protected override Task&lt;HttpResponseMessage&gt; SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
</code></pre>

<p>everything started to work as expected.</p>

<p>Seems there must be threading issues with this part of the .NET framework. There's some other workarounds described here if you need to try other work-arounds: <a href=""https://social.msdn.microsoft.com/Forums/vstudio/en-US/55f5571d-fe94-4b68-b1d4-bfb91fd721dd/reading-httpcontent-bytes-fails-inside-delegatinghandler-when-multiple-content-types-present?forum=wcf"" rel=""nofollow"">https://social.msdn.microsoft.com/Forums/vstudio/en-US/55f5571d-fe94-4b68-b1d4-bfb91fd721dd/reading-httpcontent-bytes-fails-inside-delegatinghandler-when-multiple-content-types-present?forum=wcf</a></p>
","39694191","293","<c#><httprequest><hmac>","1","1","1","2016-09-27 20:02:33","39694191","0","","-1","","2017-05-23 11:47:15","2016-08-16 05:05:34","","2016-09-27 20:02:33","2016-09-26 03:15:02"
"46505024","Hmac MD5 of a large file","<p>I'm using FileInputStream wrapped with BufferedInputStream for reading in a large file in byte chunks.</p>

<pre><code>public void MD5(BufferedInputStream in, Key pubKey) throws Exception{

        Mac md = Mac.getInstance(""HmacMD5"");
            md.init(pubKey);
            byte[] contents = new byte[1024];
            int readSize;
            while ((readSize = in.read(contents)) != -1) {
                {
                    md.update(contents,0,readSize);
                }
                byte[] hashValue = md.doFinal();

            }
}
</code></pre>

<p>It works perfectly fine for a small file, but takes <strong>insane amounts of time</strong> for a  file 200MB file.</p>

<p>The same approach works perfectly fine while I try to sign the 200MB file using SHA256withRSA.</p>

<p>Is there any specific reason for this?? I have a feeling it is something to do with <strong>md.update().</strong></p>

<p>But I've used the same function while using 'Signature' as well.</p>

<p>Any help would be appreciated.</p>
","<p>You're calling <code>doFinal</code> within the while-loop. That doesn't look right. Try the following:</p>

<pre><code>public void MD5(BufferedInputStream in, Key pubKey) throws Exception{
    Mac md = Mac.getInstance(""HmacMD5"");
    md.init(pubKey);
    byte[] contents = new byte[1024];
    int readSize;
    while ((readSize = in.read(contents)) != -1) {
        md.update(contents, 0, readSize);
    }
    byte[] hashValue = md.doFinal();
}
</code></pre>
","46506328","292","<java><hmac><javax.crypto>","0","4","1","2017-09-30 19:28:14","46506328","1","","","","","2017-09-30 17:02:09","","","2017-09-30 19:28:14"
"36699326","Ruby hmac sha256 hash differs for variable versus literal","<p>HMAC SHA256 hash generated changes when variable is used in the hashing function than using the literal.</p>

<p>I have to concatenate 4 parameters to generate a message string that is hashed using secret key. The concatenated message string generates a different hash than using the value of message as a literal.</p>

<pre><code>require 'base64'
require 'openssl'

securityKey = 'A93reRTUJHsCuQSHR+L3GxqOJyDmQpCgps102ciuabc='
content = 'hello'
id = '1000000855'
tsp = '1460852115'
guid = '75c6016eaa1e43b4807ba25232797714'

contentmd5 = Base64.encode64(OpenSSL::Digest::MD5.digest(content))
inputString = id + tsp + guid + contentmd5
puts inputString
#Input String is 
#'1000000855146085211575c6016eaa1e43b4807ba25232797714XUFAKrxLKna5cZ2REBfFkg=='

digest = OpenSSL::Digest.new('sha256')
hmac = OpenSSL::HMAC.digest(digest, securityKey, inputString)
securityToken = Base64.encode64(hmac)
puts securityToken
#Hash generated is 7ihOEZNeoJMwjLt84I8WfN5b0VwgYNOg8abPA3nZ0SM=

digest = OpenSSL::Digest.new('sha256')
hmac = OpenSSL::HMAC.digest(digest, securityKey, '1000000855146085211575c6016eaa1e43b4807ba25232797714XUFAKrxLKna5cZ2REBfFkg==')
securityToken = Base64.encode64(hmac)
puts securityToken
#Hash generated is gPNytNGMbhg8b27rklqmEK/9xjNAcOq+7nldzyDL4g0=
</code></pre>
","<p>looks like Base64.encode64 appends a ""\n"" to the end of its output so</p>

<p>from <a href=""http://ruby-doc.org/stdlib-2.2.0/libdoc/base64/rdoc/Base64.html#method-i-encode64"" rel=""nofollow"" title=""Docs"">docs</a></p>

<blockquote>
  <p>encode64(bin) Returns the Base64-encoded
  version of bin. This method complies with RFC 2045. Line feeds are
  added to every 60 encoded characters.</p>
</blockquote>

<p>this</p>

<pre><code>contentmd5 = Base64.encode64(OpenSSL::Digest::MD5.digest(content))
</code></pre>

<p>returns</p>

<pre><code>""XUFAKrxLKna5cZ2REBfFkg==\n""
</code></pre>

<p>not</p>

<pre><code> ""XUFAKrxLKna5cZ2REBfFkg==""
</code></pre>

<p>--</p>

<p>you can use <strong>strict_encode64</strong> to not include line feeds so:</p>

<pre><code>contentmd5 = Base64.strict_encode64(OpenSSL::Digest::MD5.digest(content))
</code></pre>

<p>returns</p>

<pre><code> =&gt; ""XUFAKrxLKna5cZ2REBfFkg==""
</code></pre>
","36699426","290","<ruby><hash><string-concatenation><sha256><hmac>","1","2","1","2016-04-18 16:34:16","36699426","0","","","","","2016-04-18 16:19:43","","2016-04-18 16:34:16","2016-04-18 16:25:44"
"47273020","Generate SHA1 HMAC with UTF-8 input on JavaScript (not Node.js)","<p>With that lib : 
<a href=""http://locutus.io/php/misc/pack/"" rel=""nofollow noreferrer"">http://locutus.io/php/misc/pack/</a>
Bufferize secret for hmac:</p>

<pre><code>var packedSecr = pack('H*', $secret);
</code></pre>

<p>Than pack time:</p>

<pre><code>var packedTime = pack('NN', 0, Math.floor((time() + $time_offset) / 30));
</code></pre>

<p>both strings has UTF-8 characters and fully coincide with PHPs packed.
Than I need create hash_hmac and here has a troubles:</p>

<pre><code>function hash_hmac(str,key){
    var hash = CryptoJS.HmacSHA1(str, key);
    var resInUTF8 = convertWordArrayToUint8Array(hash);
    var string = new TextDecoder('utf-8').decode(resInUTF8);
    console.log(hash.toString());
    /* 5cdc66cb8cf2a08b78f149502e05b9538c7a72a9*/
    console.log(string);
    /* \�fˌ�x�IP.�S�zr� */
    return string;
}
</code></pre>

<p>But PHP make defferent hmac:</p>

<pre><code>$hmac = hash_hmac('sha1', $packedTime, $bufferedSecret, true);
echo $hmac;
/* v��j��q����V��� */
$hmac = hash_hmac('sha1', $packedTime, $bufferedSecret, false);
echo $hmac;
/* 17761ff6f06ad0db71f0a588fcf002d756c1d1eb */
</code></pre>

<p>For convert WordArray used that mini lib:
<a href=""https://gist.github.com/getify/7325764"" rel=""nofollow noreferrer"">https://gist.github.com/getify/7325764</a></p>

<p>If I just create hmac with ""A-z"" and ""0-9"" symbols all is coincide.
PHP:</p>

<pre><code>$string = ""aBc059"";
$secret = ""Tcs437"";
echo hash_hmac('sha1', $string, $secret, false); 
/* 00012176b13b26f8fdb9f8dfcaf553e9aa0401ac */
echo hash_hmac('sha1', $string, $secret, true);
/* !v�;&amp;�������S�� */
</code></pre>

<p>JS:</p>

<pre><code>var string = ""aBc059"";
var secret = ""Tcs437"";

hash_hmac(string,secret)

function hash_hmac(str,key){
    var hash = CryptoJS.HmacSHA1(str, key);
    var resInUTF8 = convertWordArrayToUint8Array(hash);
    var string = new TextDecoder('utf-8').decode(resInUTF8);
    console.log(hash.toString());
    /* 00012176b13b26f8fdb9f8dfcaf553e9aa0401ac */
    console.log(string);
    /* !v�;&amp;�������S�� */
    return string;
}
</code></pre>
","","","288","<javascript><utf-8><hmac><cryptojs><hmacsha1>","1","","0","2017-11-13 20:37:58","","0","1","8833582","","2017-11-13 20:37:58","2017-11-13 20:29:32","","",""
"16211638","Rails and PHP encode64 not agreeing","<p>I'm try to create an HMAC in Rails and verify it in PHP.<br>
Rails shell:</p>

<pre><code>       pry(main)&gt;appsecret = '00916893840fe0a29dfdc261efd3a26a&amp;'           
       pry(main)&gt;OpenSSL::HMAC.hexdigest('sha1', appsecret, 'GET&amp;http%3A%2F%2Fopen.tianya.cn%2Foauth%2Frequest_token.php&amp;oauth_consumer_key%3Dfc69b18eb12bab1e9b35d1093c4de9290516cfdc4%26oauth_nonce%3Dc09e4bf167fbc7eb374b1abb02b5268d%26oauth_signature_method%3DHMAC-SHA1%26oauth_timestamp%3D1366882036%26oauth_version%3D1.0')
       =&gt; ""8494f6237ee6042a3da8848db21284be17bf6ade""
</code></pre>

<p>PHP:</p>

<pre><code>      $appsecret = '00916893840fe0a29dfdc261efd3a26a&amp;';
      $signature = base64_encode(hash_hmac('sha1', $appsecret, 'GET&amp;http%3A%2F%2Fopen.tianya.cn%2Foauth%2Frequest_token.php&amp;oauth_consumer_key%3Dfc69b18eb12bab1e9b35d1093c4de9290516cfdc4%26oauth_nonce%3Dc09e4bf167fbc7eb374b1abb02b5268d%26oauth_signature_method%3DHMAC-SHA1%26oauth_timestamp%3D1366882036%26oauth_version%3D1.0',true));
      var_dump($signature);
</code></pre>

<p>Rails result:8494f6237ee6042a3da8848db21284be17bf6ade</p>

<p>PHP result:ayw4/L22fCtXPvPPGaY/Ud8yhMU=
<br>Any help will be great appreciated!</p>
","<p>You have 2 problems:</p>

<ol>
<li>Your ruby output is returned as ascii hex, not raw, and you are not base64 encoding it</li>
<li>You have the argument order for the PHP <a href=""http://php.net/manual/en/function.hash-hmac.php"" rel=""nofollow""><code>hash_hmac()</code></a> function wrong.</li>
</ol>

<p>Ruby:</p>

<pre><code>appsecret = '00916893840fe0a29dfdc261efd3a26a&amp;'
data = 'GET&amp;http%3A%2F%2Fopen.tianya.cn%2Foauth%2Frequest_token.php&amp;oauth_consumer_key%3Dfc69b18eb12bab1e9b35d1093c4de9290516cfdc4%26oauth_nonce%3Dc09e4bf167fbc7eb374b1abb02b5268d%26oauth_signature_method%3DHMAC-SHA1%26oauth_timestamp%3D1366882036%26oauth_version%3D1.0'

digest = OpenSSL::HMAC.digest('sha1', appsecret, data)
Base64.encode64(digest)
</code></pre>

<p>PHP:</p>

<pre><code>$appsecret = '00916893840fe0a29dfdc261efd3a26a&amp;';
$data = 'GET&amp;http%3A%2F%2Fopen.tianya.cn%2Foauth%2Frequest_token.php&amp;oauth_consumer_key%3Dfc69b18eb12bab1e9b35d1093c4de9290516cfdc4%26oauth_nonce%3Dc09e4bf167fbc7eb374b1abb02b5268d%26oauth_signature_method%3DHMAC-SHA1%26oauth_timestamp%3D1366882036%26oauth_version%3D1.0';

$digest = hash_hmac('sha1', $data, $appsecret, true);
echo base64_encode($digest);
</code></pre>

<p>Both produce <code>hJT2I37mBCo9qISNshKEvhe/at4=</code>. Note, however, that the ruby output also has a trailing new-line, so you will need to normalize this (either remove it in ruby or add one in PHP) if you want to compare them directly.</p>
","16212160","287","<php><ruby-on-rails><sha1><hmac>","0","1","2","2013-04-25 10:35:32","16212160","2","","","","","2013-04-25 09:52:18","","","2013-04-25 10:18:23"
"16211638","Rails and PHP encode64 not agreeing","<p>I'm try to create an HMAC in Rails and verify it in PHP.<br>
Rails shell:</p>

<pre><code>       pry(main)&gt;appsecret = '00916893840fe0a29dfdc261efd3a26a&amp;'           
       pry(main)&gt;OpenSSL::HMAC.hexdigest('sha1', appsecret, 'GET&amp;http%3A%2F%2Fopen.tianya.cn%2Foauth%2Frequest_token.php&amp;oauth_consumer_key%3Dfc69b18eb12bab1e9b35d1093c4de9290516cfdc4%26oauth_nonce%3Dc09e4bf167fbc7eb374b1abb02b5268d%26oauth_signature_method%3DHMAC-SHA1%26oauth_timestamp%3D1366882036%26oauth_version%3D1.0')
       =&gt; ""8494f6237ee6042a3da8848db21284be17bf6ade""
</code></pre>

<p>PHP:</p>

<pre><code>      $appsecret = '00916893840fe0a29dfdc261efd3a26a&amp;';
      $signature = base64_encode(hash_hmac('sha1', $appsecret, 'GET&amp;http%3A%2F%2Fopen.tianya.cn%2Foauth%2Frequest_token.php&amp;oauth_consumer_key%3Dfc69b18eb12bab1e9b35d1093c4de9290516cfdc4%26oauth_nonce%3Dc09e4bf167fbc7eb374b1abb02b5268d%26oauth_signature_method%3DHMAC-SHA1%26oauth_timestamp%3D1366882036%26oauth_version%3D1.0',true));
      var_dump($signature);
</code></pre>

<p>Rails result:8494f6237ee6042a3da8848db21284be17bf6ade</p>

<p>PHP result:ayw4/L22fCtXPvPPGaY/Ud8yhMU=
<br>Any help will be great appreciated!</p>
","<p>After trying different trial and error I found out how both the functionality were similar..this will give you the desired resut same as ruby:</p>

<pre><code>$appsecret = '00916893840fe0a29dfdc261efd3a26a&amp;';
$signature = hash_hmac('sha1', 'GET&amp;http%3A%2F%2Fopen.tianya.cn%2Foauth%2Frequest_token.php&amp;oauth_consumer_key%3Dfc69b18eb12bab1e9b35d1093c4de9290516cfdc4%26oauth_nonce%3Dc09e4bf167fbc7eb374b1abb02b5268d%26oauth_signature_method%3DHMAC-SHA1%26oauth_timestamp%3D1366882036%26oauth_version%3D1.0',$appsecret);
var_dump($signature);
</code></pre>

<p>Result:</p>

<pre><code>string(40) ""8494f6237ee6042a3da8848db21284be17bf6ade"" 
</code></pre>

<p>In PHP order of parameters for hash_hmac is inverted in php, first data, then key. 
the ruby output is not base64 encoded so you do not have to base64 encode in your PHP..</p>
","16212494","287","<php><ruby-on-rails><sha1><hmac>","0","0","2","2013-04-25 10:35:32","16212160","2","","","","","2013-04-25 09:52:18","","","2013-04-25 10:35:32"
"39637026","Encrypt-then-MAC, how to afterwards add data to HMAC","<p>I want to <strong>include</strong> <code>iv</code> and <code>salt</code> in the HMACSHA512 calculation <strong>without</strong> add then to the encrypted data.<br>
 At the moment someone could change the <code>iv</code> and a wouldn't noticed that.</p>

<p>I chain different streams to ensure Encrypt-then-MAC, later I want to encrypt large files, so this design is necessary.<br>
So if I add the the <code>iv</code> and <code>salt</code> to a stream, with e.g. <code>new MemoryStream(iv).CopyTo(hmacStream);</code> the result will contain this data.</p>

<p>This is my code so far:</p>

<pre><code>    private static IHmacAndData EncryptInternal(byte[] key, byte[] iv, byte[] plainData, byte[] salt)
    {
        byte[] hmacHash;
        byte[] encryptedBytes;

        using (var aesManaged = CreateAesManaged(iv, key))
        {
            var encryptor = aesManaged.CreateEncryptor(aesManaged.Key, aesManaged.IV);
            var hmacsha512 = new HMACSHA512(key);

            using (var resultStream = new MemoryStream())
            {
                using (var hmacStream = new CryptoStream(resultStream, hmacsha512, CryptoStreamMode.Write))
                {
                    using (var aesStream = new CryptoStream(hmacStream, encryptor, CryptoStreamMode.Write))
                    {
                        using (var plainStream = new MemoryStream(plainData))
                        {
                            plainStream.CopyTo(aesStream);
                        }
                    }
                }
                encryptedBytes = resultStream.ToArray();
            }
            hmacHash = hmacsha512.Hash;
        }

        return new Message {HMAC = hmacHash, Data = encryptedBytes};
    }

    private static AesManaged CreateAesManaged(byte[] iv, byte[] key)
    {
        var aesManaged = new AesManaged
        {
            Mode = CipherMode.CBC,
            Padding = PaddingMode.PKCS7,
            KeySize = KeySize,
            IV = iv,
            Key = key
        };
        return aesManaged;
    }
</code></pre>

<p>My temporary solution is to make a <strong>second HMACSHA512 calculation</strong> at the end.
But this seems not right in any way.</p>

<pre><code>var overallHmac = new HMACSHA512(keyHmac);
hmacHash = overallHmac.ComputeHash(hmacHash.Concat(iv).Concat(saltPassword).Concat(saltHmac).ToArray());
</code></pre>

<p>Here is the full sample, search for <code>CreateOverallHmacKey</code> to find the spot.
<a href=""https://gist.github.com/dhcgn/85b88b516953e8996af8544ee9d7b567"" rel=""nofollow"">https://gist.github.com/dhcgn/85b88b516953e8996af8544ee9d7b567</a></p>
","","","285","<c#><.net><hmac>","0","","0","2016-09-22 20:41:03","","3","","1776231","","2016-09-22 20:41:03","2016-09-22 10:51:07","","",""
"18344828","How to generate HMAC SHA1/MD5 key on Mac/iOS with modern API?","<p>With deprecated API, I can use parameter CSSM_ALGID_SHA1HMAC and CSSM_ALGID_MD5HMAC  in CSSM_CSP_CreateKeyGenContext  to create a key for HMAC usage. While the modern API SecKeyGenerateSymmetric does not support similar HMAC* key class.</p>

<p>Is there any one know how to generate HMAC key with non-deprecated APIs on Mac/iOS?</p>
","","","283","<ios><key><deprecated><sha1><hmac>","0","","0","2013-08-20 20:56:48","","2","","","","","2013-08-20 20:56:48","","",""
"13884803","Why is hash_hmac making different hashes for these two large numbers?","<p>Why are hmac values different ? $a is equal to $b. I'm not sure what kind of error is causing this or if my logic is correct. Hmac_hash should convert any input to string to byte or hex and do it's job, tell me if I'm wrong.</p>

<p>Below example code.</p>

<p>Thank you.</p>

<pre><code>&lt;?php

$a = 1234567890000*1234567890000;
$b = gmp_mul(""1234567890000"",""1234567890000"");
$b = gmp_strval($b);

echo $a.""&lt;br/&gt;"".$b.""&lt;br/&gt;"";

$c = 2525;

echo ($a==$b).""&lt;br/&gt;"";

echo hash_hmac(""SHA512"",$a,$c);
echo ""&lt;br/&gt;"";
echo hash_hmac(""SHA512"",$b,$c);

?&gt; 
</code></pre>

<p>Result</p>

<pre><code>1.5241578750191E+24
1524157875019052100000000
1
973967436d3562150d60769b70a9010db21f89b114b9897430663dd195115b7893b9a6bd0e141cee301d23e2229afd6d39546630cd38f6fe7842073749f9ce3d
8bd1e7c837efaf8d51ed2d40354a020ee3c9663aa6bd4425c02b21ed02343185070216d37e54478ee78332af8e6fdecd51445fcee8cb04d4e51e4cc31283f9a9
</code></pre>
","<p>When you compare <code>$a</code> and <code>$b</code>, the string inside <code>$b</code> is converted into an integer. Because the value is larger than what PHP can represent as an integer, it gets silently converted into a float instead.  <code>$a</code> is a float. The floats are equal, which is why the compare succeeds.  </p>

<p><code>hash_hmac</code> converts the float in <code>$a</code> to a string instead of converting the string in <code>$b</code> into an integer which then overflows into a float.  This is why the hashes differ.</p>

<p>If you want the compare to fail so that the behavior between it and <code>hash_hmac</code> is consistent, you'll want to cast <code>$a</code> into a string first or will want to use <code>===</code> to avoid converting data types.</p>
","13885507","283","<php><type-conversion><gmp><hmac>","0","2","1","2012-12-14 20:40:15","13885507","0","","168868","","2012-12-14 20:40:15","2012-12-14 19:08:04","","2012-12-14 20:39:31","2012-12-14 20:04:29"
"21333117","coldfusion calculating HMAC256 of a getHTTPRequestData","<p>I'm working with Shopify at the moment and using their webhook notifications so I can save stuff to our database.</p>

<p>Within their webhook headers, they provide a header of: <code>X-Shopify-Hmac-Sha256</code></p>

<p>which is: </p>

<blockquote>
  <p>Each Webhook request includes a X-Shopify-Hmac-SHA256 header which is generated using the app's shared secret (looks like: '267bb1719a8e6ff75c4f2d709be0ca11'), along with the data sent in the request.</p>
</blockquote>

<p>This is jolly wonderful; However, I'm really struggling to calculate the value of the <code>X-Shopify-Hmac-Sha256</code>.</p>

<p>I have a <code>.cfm</code> page which the webhook hits and I pass through the <code>getHTTPRequestData</code> to a function like thus:</p>

<pre><code>&lt;cfscript&gt;
variables.stArgs                        = {};
variables.stArgs.stWebHookData          = getHTTPRequestData();
application.stObj.stShopify.oShopifyWebHookBusiness.receiveWebHook(argumentCollection=variables.stArgs);
&lt;/cfscript&gt;
</code></pre>

<p>I then stole some code from StackOverflow and Ben Nadel, but neither seem to end up giving me the value that I want.  Currently I'm using Ben Nadels code like thus:</p>

<pre><code>local.data = arguments.stWebHookData.toString();
local.macClass = createObject( ""java"", ""javax.crypto.Mac"" );
local.secretkeySpec = createObject( ""java"", ""javax.crypto.spec.SecretKeySpec"" ).init(toBinary(toBase64(arguments.key)),'HmacSHA256');
local.mac = local.macClass.getInstance('HmacSHA256');
local.mac.init(local.secretkeySpec );

local.hashedBytes = local.mac.doFinal(toBinary(toBase64(local.data)));
return lcase( binaryEncode( local.hashedBytes, ""base64"" ) );
</code></pre>

<p>(<code>arguments.key</code> is the shared secret)</p>

<p>Somewhere along the way, I am going wrong.  Have I completely misunderstood what I am meant to be doing.  This looks so easy in PHP.</p>
","<p>So, getHTTPRequestData() <a href=""http://livedocs.adobe.com/coldfusion/8/htmldocs/help.html?content=functions_e-g_43.html"" rel=""nofollow"">returns a struct with a number of members</a>. The one we're interested is content, which will be a byte array. </p>

<p>The MAC classes' <a href=""http://docs.oracle.com/javase/7/docs/api/javax/crypto/Mac.html#doFinal%28byte%5B%5D%29"" rel=""nofollow"">doFinal()</a> method  expects an array of bytes (in our case the HTTP request's content) and returns an array of bytes (the HMac of the content)</p>

<p>The returned byte array needs to be base-64 encoded in order to compare it to the one Shopify puts in the webhook's headers. <a href=""http://livedocs.adobe.com/coldfusion/8/htmldocs/help.html?content=functions_t-z_03.html"" rel=""nofollow"">toBase64()</a> will do that for us. </p>

<p>Putting it all together, you get this:
<code>toBase64(local.mac.doFinal(getHTTPRequestData().content))</code></p>
","21336095","282","<java><coldfusion><shopify><hmac>","5","3","1","2014-01-24 15:20:20","21336095","5","","127606","","2014-01-24 15:17:55","2014-01-24 12:46:33","","2014-01-24 15:20:20","2014-01-24 15:14:54"
"54427887","Compute HMAC sha-512 in NodeJS and Java","<p>I am trying to migrate a sha-512 computation from java to node JS and I can't seem to get the same results...</p>

<p>Java code (which looks standard from <a href=""https://stackoverflow.com/questions/33085493/how-to-hash-a-password-with-sha-512-in-java"">what I saw online</a>):</p>

<pre class=""lang-java prettyprint-override""><code>public class Test
{
    private static String get_SecurePassword(String passwordToHash, String salt, String algo) throws NoSuchAlgorithmException
    {
        String generatedPassword = null;

        MessageDigest md = MessageDigest.getInstance(algo);
        md.update(salt.getBytes());
        byte[] bytes = md.digest(passwordToHash.getBytes());
        StringBuilder sb = new StringBuilder();

        for (int i = 0; i&lt; bytes.length; i++) {
            sb.append(Integer.toString((bytes[i] &amp; 0xff) + 0x100, 16).substring(1));
        }

        generatedPassword = sb.toString();

        return generatedPassword;
    }

    public static void main(String[] args) throws NoSuchAlgorithmException
    {
        String res = get_SecurePassword(""test"", ""test"", ""SHA-512"");

        System.out.println(res);
    }
}
</code></pre>

<p>Output:</p>

<pre><code>125d6d03b32c84d492747f79cf0bf6e179d287f341384eb5d6d3197525ad6be8e6df0116032935698f99a09e265073d1d6c32c274591bf1d0a20ad67cba921bc
</code></pre>

<p>NodeJS:</p>

<pre class=""lang-js prettyprint-override""><code>const crypto = require('crypto');

function getSecurePassword(password, salt, algo) {
    const algoFormatted = algo.toLowerCase().replace('-', '');
    const hash = crypto.createHmac(algoFormatted, salt);
    hash.update(password);

    const res = hash.digest('hex');

    return res;
}

console.log(getSecurePassword('test', 'test', 'SHA-512'));
</code></pre>

<p>Output:</p>

<pre><code>9ba1f63365a6caf66e46348f43cdef956015bea997adeb06e69007ee3ff517df10fc5eb860da3d43b82c2a040c931119d2dfc6d08e253742293a868cc2d82015
</code></pre>

<p>What am I doing wrong?</p>

<p><strong>Note</strong>: I am using Java 8 and Node 10.13</p>
","<p>In Node you're using HMAC-SHA-512, but in Java you're just using SHA-512 and concatenating the key and the plaintext. That is not how HMAC works. You need to use HMAC-SHA-512 in Java as well:</p>

<pre><code>import static java.nio.charset.StandardCharsets.*;

import java.math.BigInteger;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;

public class Test {
    private static String getSecurePassword(String password, String salt, String algo)
            throws NoSuchAlgorithmException, InvalidKeyException {
        SecretKeySpec secretKeySpec = new SecretKeySpec(salt.getBytes(UTF_8), algo);
        Mac mac = Mac.getInstance(algo);
        mac.init(secretKeySpec);
        byte[] bytes = mac.doFinal(password.getBytes(UTF_8));

        return new BigInteger(1, bytes).toString(16);
    }

    public static void main(String[] args)
            throws NoSuchAlgorithmException, InvalidKeyException {
        System.out.println(getSecurePassword(""test"", ""test"", ""HmacSHA512""));
    }
}
</code></pre>

<p>Output:</p>

<pre><code>9ba1f63365a6caf66e46348f43cdef956015bea997adeb06e69007ee3ff517df10fc5eb860da3d43b82c2a040c931119d2dfc6d08e253742293a868cc2d82015
</code></pre>
","54428403","280","<java><node.js><hmac><sha512>","0","2","3","2019-10-24 10:35:40","54428403","4","","","","","2019-01-29 18:54:36","","","2019-01-29 19:31:14"
"54427887","Compute HMAC sha-512 in NodeJS and Java","<p>I am trying to migrate a sha-512 computation from java to node JS and I can't seem to get the same results...</p>

<p>Java code (which looks standard from <a href=""https://stackoverflow.com/questions/33085493/how-to-hash-a-password-with-sha-512-in-java"">what I saw online</a>):</p>

<pre class=""lang-java prettyprint-override""><code>public class Test
{
    private static String get_SecurePassword(String passwordToHash, String salt, String algo) throws NoSuchAlgorithmException
    {
        String generatedPassword = null;

        MessageDigest md = MessageDigest.getInstance(algo);
        md.update(salt.getBytes());
        byte[] bytes = md.digest(passwordToHash.getBytes());
        StringBuilder sb = new StringBuilder();

        for (int i = 0; i&lt; bytes.length; i++) {
            sb.append(Integer.toString((bytes[i] &amp; 0xff) + 0x100, 16).substring(1));
        }

        generatedPassword = sb.toString();

        return generatedPassword;
    }

    public static void main(String[] args) throws NoSuchAlgorithmException
    {
        String res = get_SecurePassword(""test"", ""test"", ""SHA-512"");

        System.out.println(res);
    }
}
</code></pre>

<p>Output:</p>

<pre><code>125d6d03b32c84d492747f79cf0bf6e179d287f341384eb5d6d3197525ad6be8e6df0116032935698f99a09e265073d1d6c32c274591bf1d0a20ad67cba921bc
</code></pre>

<p>NodeJS:</p>

<pre class=""lang-js prettyprint-override""><code>const crypto = require('crypto');

function getSecurePassword(password, salt, algo) {
    const algoFormatted = algo.toLowerCase().replace('-', '');
    const hash = crypto.createHmac(algoFormatted, salt);
    hash.update(password);

    const res = hash.digest('hex');

    return res;
}

console.log(getSecurePassword('test', 'test', 'SHA-512'));
</code></pre>

<p>Output:</p>

<pre><code>9ba1f63365a6caf66e46348f43cdef956015bea997adeb06e69007ee3ff517df10fc5eb860da3d43b82c2a040c931119d2dfc6d08e253742293a868cc2d82015
</code></pre>

<p>What am I doing wrong?</p>

<p><strong>Note</strong>: I am using Java 8 and Node 10.13</p>
","<p>If someone is looking to the Node JS fix I made thanks to @DavidConrad, here it is:</p>

<pre class=""lang-js prettyprint-override""><code>const crypto = require('crypto');

function getSecurePassword(password, salt, algo) {
    const algoFormatted = algo.toLowerCase().replace('-', '');
    const hash = crypto.createHash(algoFormatted);
    hash.update(salt + password);

    return hash.digest('hex');
}

console.log(getSecurePassword('test', 'test', 'SHA-512'));
</code></pre>

<p>Output:</p>

<pre><code>125d6d03b32c84d492747f79cf0bf6e179d287f341384eb5d6d3197525ad6be8e6df0116032935698f99a09e265073d1d6c32c274591bf1d0a20ad67cba921bc
</code></pre>
","54428640","280","<java><node.js><hmac><sha512>","0","2","3","2019-10-24 10:35:40","54428403","4","","","","","2019-01-29 18:54:36","","","2019-01-29 19:49:21"
"54427887","Compute HMAC sha-512 in NodeJS and Java","<p>I am trying to migrate a sha-512 computation from java to node JS and I can't seem to get the same results...</p>

<p>Java code (which looks standard from <a href=""https://stackoverflow.com/questions/33085493/how-to-hash-a-password-with-sha-512-in-java"">what I saw online</a>):</p>

<pre class=""lang-java prettyprint-override""><code>public class Test
{
    private static String get_SecurePassword(String passwordToHash, String salt, String algo) throws NoSuchAlgorithmException
    {
        String generatedPassword = null;

        MessageDigest md = MessageDigest.getInstance(algo);
        md.update(salt.getBytes());
        byte[] bytes = md.digest(passwordToHash.getBytes());
        StringBuilder sb = new StringBuilder();

        for (int i = 0; i&lt; bytes.length; i++) {
            sb.append(Integer.toString((bytes[i] &amp; 0xff) + 0x100, 16).substring(1));
        }

        generatedPassword = sb.toString();

        return generatedPassword;
    }

    public static void main(String[] args) throws NoSuchAlgorithmException
    {
        String res = get_SecurePassword(""test"", ""test"", ""SHA-512"");

        System.out.println(res);
    }
}
</code></pre>

<p>Output:</p>

<pre><code>125d6d03b32c84d492747f79cf0bf6e179d287f341384eb5d6d3197525ad6be8e6df0116032935698f99a09e265073d1d6c32c274591bf1d0a20ad67cba921bc
</code></pre>

<p>NodeJS:</p>

<pre class=""lang-js prettyprint-override""><code>const crypto = require('crypto');

function getSecurePassword(password, salt, algo) {
    const algoFormatted = algo.toLowerCase().replace('-', '');
    const hash = crypto.createHmac(algoFormatted, salt);
    hash.update(password);

    const res = hash.digest('hex');

    return res;
}

console.log(getSecurePassword('test', 'test', 'SHA-512'));
</code></pre>

<p>Output:</p>

<pre><code>9ba1f63365a6caf66e46348f43cdef956015bea997adeb06e69007ee3ff517df10fc5eb860da3d43b82c2a040c931119d2dfc6d08e253742293a868cc2d82015
</code></pre>

<p>What am I doing wrong?</p>

<p><strong>Note</strong>: I am using Java 8 and Node 10.13</p>
","<p>For <em>NodeJS</em>, you can append the key with data to get <em>Java</em> equivalent hash.</p>

<pre><code>require('crypto').createHash(algo).update(data + key).digest()
</code></pre>
","58539486","280","<java><node.js><hmac><sha512>","0","0","3","2019-10-24 10:35:40","54428403","4","","","","","2019-01-29 18:54:36","","","2019-10-24 10:35:40"
"49059920","HMAC API authentication issues in Python","<p>I'm attempting to pull JSON data from an API and struggling to nail down the source of my problems. Currently I get accurate data if message = """" but so far any non-empty query parameters return a 403 error. The API documentation asks for parameters to be formatted as ""customerCode=XXX"" and  I've been able to produce valid queries in the API Sandbox. I assume the problem is somewhere in the getSignature function, but I've rewritten it a few ways and .encode() or bytes() gives me the same result. If the code looks coherent and it's a syntax error on my end I can reach out to the support team. Again, when message is an empty string I get valid results back so I'm puzzled. Error occurs on all tested Report pages with multiple different query parameters tested per page. Relevant import functions are not pasted here but are included in the code. </p>

<pre><code>#Current hash
def getSignature(message):
    hashed = hmac.new(key, message.encode('utf-8') , hashlib.sha256)
    return base64.b64encode(hashed.digest())


#Header per API specs
def getData(report, message):
    headers = {
        'Content-Type' : 'application/json',
        'Accept' : 'application/json',
        'api-auth-id' : api_id,
        'api-auth-signature' : getSignature(message)                
    }

    data = requests.get(url + report, headers=headers)
    data = data.json()

    return data
</code></pre>
","<p>EDIT: I just noticed that <code>message</code> is only being used for the signature, and is not being included in the request.  I think you probably need something like <code>data = requests.get(url + report, data=message, headers=headers)</code>.</p>

<p>Old, almost certainly incorrect theory is below:</p>

<p>Since it works for an empty message, my guess is that it has to do with the byte encoding of the message.  The utf-16 or utf-32 encodings of the empty message will be the same as the utf-8, but they will differ for non-empty messages.</p>

<p>So perhaps try <code>message.encode('utf-16')</code> or <code>message.encode('utf-32')</code>?  The API docs should describe this detail of how auth is done.</p>

<p>Is it possible to link to the docs for the API, or is it internal?</p>
","49060273","278","<python><hmac><api-authorization>","0","0","1","2018-03-01 23:20:42","","0","0","","","","2018-03-01 22:46:54","","2018-03-01 23:20:42","2018-03-01 23:17:13"
"47707292","HMAC Auth Approach in WebAPI / Web Applications","<p>I am recently working on a WebAPI project where I will be opening up some endpoints for other intranet web applications to select some of my data within my OracleDB tablespace. One of my top concerns now is securing the WebAPI against invalid calls to my API.  </p>

<p>I am looking at the HMAC approach where I share unique keys with different authorized web apps that can call my API.  </p>

<p>My question is,<br>
Assuming I share Key A with WebApp A and Key B with WebApp B, can the developer of WebApp A use Key A with his another WebApp C to gain access to my API and make 'authorized' calls? The key shared to them is susceptible to abuse in other applications.</p>
","<p>Of course, your keys could be used everywhere. In general, HMAC approach is designed to authenticate messages. In other words, when you are using HMAC, you are 100% sure, that the key owner (except scenario when key was compromised) has sent you a request. Nothing can stop key-owner from sharing this key. But, the main thing is, that from perspective of your ""<strong>host</strong>""-API, all the requests signed with particular key should be considered as the same <strong>client</strong>, independently of are they physically the same application or not.</p>
","47716905","277","<c#><asp.net-mvc><asp.net-web-api><oauth><hmac>","0","0","1","2017-12-08 15:01:09","","0","","","","","2017-12-08 03:31:31","","","2017-12-08 15:01:09"
"37804770","ASP.NET WebApi Security: Confusions with HMAC, OAuth, IdentityServer, Auth0","<p>I trying to build an application which uses the <strong>webapi 2</strong> and 
<strong>angular js 1</strong> at the front end. I have been researching
the security aspects especially <strong>token based security</strong>. </p>

<p>I could find a lot of things and it's really confusing what to implement like: 
OAuth, IdentityServer, HMAC and also Auth0. </p>

<p>I checked on HMAC and consumed the webapi through the console application.
However, I have not been able to find the project where webapi is consumed by 
JS based frameworks in the front end (like angular). There are typically console applications with lots of codes. I wonder how am I suppose to do this using Angular js?</p>

<p>I checked on the IdentityServer and found its learning curve bit frustrating for a newbie like me. I have the existing db with the existing users and roles tables. Instead of using default tables provided by Identity, I would like to use my own and write my own authentication logic. But I am not being able to find the resources for these too. </p>

<p>Now I could see an Auth0. Now before diving in I would like to make 
sure if it is the advisable authentication and authorization framework 
for webapi.</p>

<p>As I have been asked to implement Token based authentication in the project.
I am having hard times figuring out the right approach and the easiest way to do. I have wasted a week and still confused what shall I implement. So, If you have any resources where the webapi security has been performed in an elegant way, please help me out.</p>
","<p>First of all, I would not recommend using HMAC to secure your API. If your private key is compromised. That means an intruder can access your services easily!</p>

<p>IdentityServer4 and Auth0 both work as authentication &amp; authorization framework(Oauth2 and OpenID connect framework). You can also utilize SMAL, WS-federation etc.  </p>

<p>If you approach Identityserver4, you need to maintain the server by yourself. It also involves you need to have an intermediate level of knowledge of Oauth2.0 &amp; OpenID connect protocols. If you are thinking of production application, that means, you also need to host the identityserver4. </p>

<p>Moving to  auth0, they provide the whole authentication &amp; authorization out of the box including Social IDP. You just need to navigate through their dashboard to create the application and resources etc. You can use the generous free tier if you don't have a lot of requirements. </p>

<p>Regarding the security, both Auth0 and Identityserver4 are the great and elegant way to secure your resource(API) and applications. </p>

<p>The following architecture should work for both Identityserver4 and Auth0:</p>

<ul>
<li>Your frontend application will redirect the user to <strong>/authorize</strong> endpoint to authenticate the user( Executing Implicit Grant flow). </li>
</ul>

<p><code>
      GET /authorize?
            client_id=[Client id]&amp;
            scope=[Scopes]&amp;
            response_type=[Response types]&amp;
            audience=[API Identifier]&amp;
            redirect_uri=[Redirect URI]&amp;
            state=abc&amp;
            nonce=xyz
</code></p>

<p><a href=""http://docs.identityserver.io/en/latest/endpoints/authorize.html"" rel=""nofollow noreferrer"">http://docs.identityserver.io/en/latest/endpoints/authorize.html</a></p>

<p><a href=""https://auth0.com/docs/api-auth/tutorials/implicit-grant"" rel=""nofollow noreferrer"">https://auth0.com/docs/api-auth/tutorials/implicit-grant</a></p>

<p>As a result of successful authentication, you application receives idToken and Access token. </p>

<ul>
<li><p>Use the access token as authorization header when making HTTP request from your front-end application to the web API endpoint. </p></li>
<li><p>In your API server, validate the token and return the resources. You can use the ASPNET CORE authentication middleware to validate the token. </p></li>
</ul>

<p><a href=""http://docs.identityserver.io/en/latest/topics/apis.html"" rel=""nofollow noreferrer"">http://docs.identityserver.io/en/latest/topics/apis.html</a></p>

<p><a href=""https://auth0.com/docs/api-auth"" rel=""nofollow noreferrer"">https://auth0.com/docs/api-auth</a></p>
","54031922","275","<angularjs><asp.net-web-api><oauth><hmac><identityserver3>","4","0","1","2019-01-04 01:05:59","","0","","1127428","","2018-12-24 04:50:46","2016-06-14 06:45:08","","","2019-01-04 01:05:59"
"11539140","android HMAC showing unexpected error","<p>I was trying to generate HMAC using md5 , everythings seems to be perfect but it is showing unexpected error</p>

<p>The code is as below</p>

<pre><code>public String calcHmac(String src) throws Exception {

        String key = ""PFhNTD48VUlEPlNYWUFOR0VUPC9VSUQ+PEVUUkFOQVVUSD48WFNQUk9MRT5BbGw8L1hTUFJPTEU+PFhTUFNlY3VyaXR5SUQ+MzMzPC9YU1BTZWN1cml0eUlEPjxYU1BTZWN1cml0eUlEPjk5NzwvWFNQU2VjdXJpdHlJRD48WFNQU2VjdXJpdHlJRD5HQjwvWFNQU2VjdXJpdHlJRD48WFNQU2VjdXJpdHlJRD5YMDM8L1hTUFNlY3VyaXR5SUQ+PFhTUFNlY3VyaXR5SUQ+WDAxPC9YU1BTZWN1cml0eUlEPjxYU1BSZWNpcGllbnQ+NDlBQ0NULVNZQU5HRVRSQU48L1hTUFJlY2lwaWVudD48L0VUUkFOQVVUSD48L1hNTD4="";
        SecretKeySpec keySpec = new SecretKeySpec(
                key.getBytes(),
                ""HmacMD5"");

        Mac mac = Mac.getInstance(""HmacMD5"");
        mac.init(keySpec);
        byte[] result = mac.doFinal(src.getBytes());
        return Hex.encodeHexString(result);   
    }
</code></pre>
","<p>Try this </p>

<pre><code> public static String sStringToHMACMD5(String s, String keyString)
    {
        String sEncodedString = null;
        try
        {
            SecretKeySpec key = new SecretKeySpec((keyString).getBytes(""UTF-8""), ""HmacMD5"");
            Mac mac = Mac.getInstance(""HmacMD5"");
            mac.init(key);

            byte[] bytes = mac.doFinal(s.getBytes(""ASCII""));

            StringBuffer hash = new StringBuffer();

            for (int i=0; i&lt;bytes.length; i++) {
                String hex = Integer.toHexString(0xFF &amp;  bytes[i]);
                if (hex.length() == 1) {
                    hash.append('0');
                }
                hash.append(hex);
            }
            sEncodedString = hash.toString();
        }
        catch (UnsupportedEncodingException e) {}
        catch(InvalidKeyException e){}
        catch (NoSuchAlgorithmException e) {}
        return sEncodedString ;
    }
</code></pre>

<p>This will surely help you.</p>

<p>Thanks</p>
","11539221","273","<java><android><hash><md5><hmac>","1","1","1","2012-07-18 10:43:00","","0","4","","","","2012-07-18 10:18:13","","2012-07-18 10:43:00","2012-07-18 10:23:50"
"31194205","Passing user information in Authorization header to api","<p>I want to allow/prevent access of users to certain actions based on their role (admin, user, maybe something else) and id (users can only modify resources they own).</p>

<p>I do not want to load user profile in every API call, I want this information passed in request headers somehow.</p>

<p>I am considering two approaches:</p>

<ol>
<li><p>User's access token contains both the required user information and time period (aes encrypted). The token is passed in Authorization header in every request. Server decrypts the token and gets all the information from it.</p></li>
<li><p>User's access token has the same information hashed (with HMAC). Authorization header contains both the token and the required user information (ID, role, maybe username). Server hashes user's information together with the current period using the same secret and compares with the passed token. If they are equal the access is granted.</p></li>
</ol>

<p>Which approach is more secure (I feel the 2nd) and more common (probably the 1st)?</p>

<p>If you think the approach 2 is better, is it maybe better to pass user's information in a separate header?</p>
","","","272","<api><rest><encryption><authorization><hmac>","1","","0","2015-07-02 20:37:10","","0","","","","","2015-07-02 20:37:10","","",""
"22851324","API Security with HMAC","<p>I'm trying to build a Restful API with HMAC authentication. I've found a couple of articles (<a href=""http://www.9bitstudios.com/2013/07/hmac-rest-api-security/"" rel=""nofollow"">http://www.9bitstudios.com/2013/07/hmac-rest-api-security/</a>) that have helped me get things started, but there are a few questions I have. </p>

<p>It seems like HMAC authentication relies on a private key which is used to generate a hash on the client side and used to re-create the same hash on the server-side for comparison. </p>

<p>But this raises the question of how the client knows the secret key. It would either have to be sent over the wire when the user logs in - or it would need to be already present in the client application. </p>

<p>It seems that if it gets sent over the wire on login - this opens up a security hole. But if it is already present in the client (a Backbone app in this case) someone could easily find it in the code. </p>

<p>My next question would be, if the secret key is not supposed to be sent over the wire, then how would it get to the client in the first place and be secure?</p>
","","","271","<api><security><authentication><backbone.js><hmac>","1","","0","2014-04-04 00:19:57","","3","","","","","2014-04-04 00:19:57","","",""
"47103277","Amazon MWS - Don't understand how to generate HMAC","<p>In the moment I'm struggling a little bit with the generation of HMAC for Amazon MWS.</p>

<p>I thought I understood how it works.</p>

<p>With the Scratchpad I generated a request. Scratchpad shows the string to sign and also the SHA 256 HMAC and the Base64 HMAC.
The string to sign consists of 4 lines like it's described in the docu.</p>

<p>There are several Onlineconverter for HMAC. I tried:</p>

<p><a href=""https://www.freeformatter.com/hmac-generator.html"" rel=""nofollow noreferrer"">https://www.freeformatter.com/hmac-generator.html</a></p>

<p><a href=""https://codebeautify.org/hmac-generator"" rel=""nofollow noreferrer"">https://codebeautify.org/hmac-generator</a></p>

<p>When I convert the string to sign which Scratchpad generated (the 4 lines), I get an other SHA 256 HMAC then Scratchpad generated.</p>

<p>Also there are several Onlineconverter for Base64. I tried:</p>

<p><a href=""https://www.freeformatter.com/base64-encoder.html"" rel=""nofollow noreferrer"">https://www.freeformatter.com/base64-encoder.html</a></p>

<p><a href=""https://www.base64encode.org"" rel=""nofollow noreferrer"">https://www.base64encode.org</a></p>

<p>When I convert the SHA 256 HMAC which Scratchpad generated, I get an other Base64-String then Scrathpad generated.</p>

<p>This confuses me. What I don't understand?</p>

<p>Other point:</p>

<p>Later I think I want to use GET and not POST. Do I get this right, that the string to sign for GET also has to be in 4 lines and not in one line as it would be executed later? That's how I understand the docu.</p>

<p>I used these links:
<a href=""http://docs.developer.amazonservices.com/en_US/dev_guide/DG_QueryString.html"" rel=""nofollow noreferrer"">http://docs.developer.amazonservices.com/en_US/dev_guide/DG_QueryString.html</a>
<a href=""http://docs.developer.amazonservices.com/en_US/dev_guide/DG_SigningQueryRequest.html"" rel=""nofollow noreferrer"">http://docs.developer.amazonservices.com/en_US/dev_guide/DG_SigningQueryRequest.html</a>
<a href=""https://mws.amazonservices.com/scratchpad/index.html"" rel=""nofollow noreferrer"">https://mws.amazonservices.com/scratchpad/index.html</a></p>
","<p>To answer my own questions.</p>

<hr>

<p>Generate SHA256 with an Onlineconverter:</p>

<p>I suppose the Problem is the LF. The Onlineconverter maybe have problem with it. Maybe they use CRLF. Better don't try to check your SHA256 with Onlineconverters.</p>

<hr>

<p>Generate base64 with an Onlineconverter:</p>

<p>The SHA256 Scratchpad shows is not the value you convert with base64. You have to convert the Hex-Value of the SHA256.</p>

<hr>

<p>Query to sign with GET:</p>

<p>If you want to use GET, the query to sign has to look like the query to sign for POST. Also the four lines. Only swap POST with GET.</p>
","47236309","270","<base64><sha256><hmac><amazon-mws>","0","1","1","2017-11-11 09:19:41","47236309","3","","8882254","","2017-11-03 21:19:16","2017-11-03 19:35:13","","","2017-11-11 09:19:41"
"30226781","Problems with cross-language HMAC / SHA256 / Base64","<p>I'm using a node.js script to create a signature for azure documentDB - the simplified version is (result at the bottom):-</p>

<pre><code>var crypto = require(""crypto"");

var masterKey = ""ABCDE""
var key = new Buffer(masterKey, ""base64"");
var signature = crypto.createHmac(""sha256"", key).update(""FGHIJ"").digest(""base64"");

console.log(""\n\n""+signature)

// RNkID54/1h1H9p3NWPeRA0mOW2L0c0HUJGTTY2GPbDo=
</code></pre>

<p>This works, and does what I need it to. I'm trying to do the same thing in Swift with CommonCrypto</p>

<pre><code>let keyString = ""ABCDE""
let body = ""FGHIJ""

let utf8data = keyString.dataUsingEncoding(NSUTF8StringEncoding)
let key = utf8data!.base64EncodedDataWithOptions(NSDataBase64EncodingOptions(rawValue: 0))

let str = body.cStringUsingEncoding(NSUTF8StringEncoding)
let strLen = body.lengthOfBytesUsingEncoding(NSUTF8StringEncoding)
let digestLen = Int(CC_SHA256_DIGEST_LENGTH)
let result = UnsafeMutablePointer&lt;CUnsignedChar&gt;.alloc(digestLen)

CCHmac(CCHmacAlgorithm(kCCHmacAlgSHA256), key.bytes, key.length, str!, strLen, result);

var hmacData = NSData(bytes: result, length: digestLen)
var hmacBase64 = hmacData.base64EncodedStringWithOptions(NSDataBase64EncodingOptions(rawValue: 0))

result.dealloc(digestLen)

let signature = String(hmacBase64)

let test = ""RNkID54/1h1H9p3NWPeRA0mOW2L0c0HUJGTTY2GPbDo=""
XCTAssert(test == signature, ""Pass"")
</code></pre>

<p>But it returns a completely different result. If I pass the masterKey directly into the javascript hmac, and pass it in as a string into the CCHmac method in Swift, it all works; so it seems to be something to do with finding the equivalent to this:-</p>

<pre><code>var key = new Buffer(masterKey, ""base64"");
</code></pre>

<p>Thoughts?</p>

<hr>

<p>More information - this:-</p>

<pre><code>let keyString = ""ABCDE""
let body = ""FGHIJ""

let keyData = keyString.dataUsingEncoding(NSUTF8StringEncoding)! // .base64EncodedDataWithOptions(NSDataBase64EncodingOptions(rawValue: 0))
let bodyData = body.dataUsingEncoding(NSUTF8StringEncoding)!

let digestLen = Int(CC_SHA256_DIGEST_LENGTH)
let result = UnsafeMutablePointer&lt;CUnsignedChar&gt;.alloc(digestLen)

CCHmac(CCHmacAlgorithm(kCCHmacAlgSHA256), keyData.bytes, keyData.length, bodyData.bytes, bodyData.length, result);

var hmacData = NSData(bytes: result, length: digestLen)
var hmacBase64 = hmacData.base64EncodedStringWithOptions(NSDataBase64EncodingOptions(rawValue: 0))

result.dealloc(digestLen)

let signature = String(hmacBase64)

let test = ""FA372zbobgpTLI5cQWh5YFiFwkNhMI8womX4Cvw68YE="" // ""RNkID54/1h1H9p3NWPeRA0mOW2L0c0HUJGTTY2GPbDo=""
XCTAssert(test == signature, ""Pass"")
</code></pre>

<p>Produces the same result as this:-</p>

<pre><code>var crypto = require(""crypto"");

var masterKey = ""ABCDE""
var signature = crypto.createHmac(""sha256"", masterKey).update(""FGHIJ"").digest(""base64"");

console.log(""\n\n""+signature)

// FA372zbobgpTLI5cQWh5YFiFwkNhMI8womX4Cvw68YE=
</code></pre>
","","","268","<javascript><node.js><swift><base64><hmac>","2","","0","2015-05-13 23:34:05","","1","0","1052002","","2015-05-13 23:34:05","2015-05-13 23:21:58","","",""
"22297560","How to implement HMAC-SHA authentication from scratch?","<p>I would like to implement authentication for a web app api using a similar technique to the AWS Signature Process. The server will render html for user web browser clients. The app will also return json for non-browser clients (iphone, android, blackberry, ipad, etc.) I am trying to write authentication code that will allow a single user to be signed (remembered) in to the app from multiple clients. Logging out from any one client should not revoke the token/cookie for all the other clients. </p>

<ol>
<li><p>When a user sign up or logs in, how does a client (native mobile client or web browser especially) get the private/secret key? My understanding is the key should not be sent over a network? Can it just be sent over ssl?</p></li>
<li><p>For browser clients is the private key stored in a cookie or in some other form of local storage?? I.e. for generic api token authentication would the token be stored in a cookie on the browser and in a db on the phone </p></li>
<li><p>When the client is a browser, how does it sign a request signature with private key? i.e. generate a hash of the id + private key + request. For native mobile clients or server to server communication I believe there are libraries that can be used to generate a signed request. When the request originates from a browser how does this work?</p></li>
<li><p>If a user is required to be remembered on multiple clients (tablet, iphone, work computer, home laptop, etc.) would the user need to have a set of private keys/tokens for each client? </p></li>
</ol>

<p>I would have used Devise with Rails but it requires you to write your own token authentication code.</p>

<p>I am also looking at OAuth, which questions 2 and 4 both apply to, but would really like to investigate the AWS method.</p>
","<p>You start with a solution (HMAC) but I do not think your ""problem"" fits your solution :).</p>

<p>I'll try to answer this to the best of my knowledge.</p>

<ol>
<li>To my understanding ,a private key would be derived of a public key that is shared. Or you could share a private key, but only if authentication is already established (in other words: you already know for sure who you are talking to) and the connection is secured (encrypted). You still will be vulnerable to man in the middle attacks though.</li>
<li>I'm not sure. A cookie is not secure. Steal the cookie, steal the private key. My preference would be a locally stored key(file or storage), <em>encrypted by a password</em>.</li>
<li>You would have to devise some sort of a client side library (in javascript or something like it).</li>
<li>Yes.</li>
</ol>

<p>Why share keys when you could share a token, like oAuth implements. The token is generated by your application and is valid for a limited time. This way you share access, but not the means to aquire access to your application. You login with username and password (or keyfile) and you get a token that grants you access untill the token is revoked.</p>
","25269887","267","<security><authentication><language-agnostic><hmac>","3","0","1","2014-08-12 16:54:24","","1","","1289074","","2014-03-10 14:02:51","2014-03-10 10:23:27","","","2014-08-12 16:54:24"
"9366162","how do I store the HMAC key irretrievably in the database?","<p>I'm trying to build a API service for a system that (due to many reasons) does not have the main database in a completely secured fashion.</p>

<p>So, my question is - how do I salt the HMAC in such a manner such that even if the main database is compromised, you still cannot use the API key. This effectively means that the HMAC key is not preshared in plaintext but in some other way, but I'm not able to figure out how.</p>
","<p>If your storage is insecure, you're going to have an impossible time encrypting it and still being able to decrypt it later unless you either store its encryption key somewhere (which, from your description, would still be insecure), or receive the key from the remote side of your service.</p>
","9366237","267","<hash><digital-signature><salt><hmac>","0","0","1","2012-02-20 18:15:06","","0","","","","","2012-02-20 18:10:13","","","2012-02-20 18:15:06"
"48430211","Python HMAC to CryptoJS","<p>My question is very similar to <a href=""https://stackoverflow.com/questions/38787349/translation-from-python-to-javascript-hmac-sha256"">Translation from Python to JavaScript: HMAC-SHA256</a>, however that question was never answered.</p>

<p>The following Python code produces the correct hash:</p>

<pre><code>def sign_api_request(api_secret, api_key, method, url):
    encoded_url = urllib.parse.quote(url.lower(), '').lower()
    timestamp = int(time.time())print(""timestamp: "" + str(timestamp))
    nonce = str(uuid.uuid4())

    signature = api_key + method + encoded_url + str(timestamp) + nonce

    secret_bytes = base64.b64decode(api_secret)

    signature_bytes = signature.encode('UTF8')

    signature_hash = hmac.new(secret_bytes, signature_bytes, hashlib.sha256).digest()
    base64_signature_hash = base64.b64encode(signature_hash).decode()

    print(base64_signature_hash)
</code></pre>

<p>I'm trying to generate the same hash string using Javascript (as a Postman pre-request script). Here's what I've got:</p>

<pre><code>function epochTime() {
    var d = new Date();
    var t = d.getTime();
    var o = t + """";
    return o.substring(0, 10);
}

function newGuid() {
    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) { var r = Math.random() * 16 | 0, v = c == 'x' ? r : r &amp; 0x3 | 0x8; return v.toString(16); });
}

var uri_path = encodeURIComponent(request.url.toLowerCase()).toLowerCase();
var payload = uri_path; //.toLowerCase();

timestamp = epochTime();
nonce = newGuid();
signature = environment.api_key + ""GET"" + payload + timestamp + nonce;

secret_bytes = atob(environment.api_secret);

var hash = CryptoJS.HmacSHA256(signature, secret_bytes);
var hashInBase64 = CryptoJS.enc.Base64.stringify(hash);
var sig = ""amx "" + environment.api_key + "":"" + hashInBase64 + "":"" + nonce + "":"" + timestamp;
postman.setGlobalVariable(""signature"", sig);
</code></pre>

<p>If I use the same <code>timestamp</code> and <code>nonce</code> (by setting them explicitly rather than generating them at runtime) and the same <code>api_key</code> and <code>api_secret</code> (which are constant across calls) I expect to get the same value in <code>sig</code> (Javascript) as I do in <code>base64_signature_hash</code> (Python), however that's not the case.</p>

<p>I understand that this might be an encoding problem, but my js-fu is weak. Any ideas?</p>

<p>Edit to add: the <code>method</code> and <code>url</code> used for each are also the same.</p>
","<p>Basically, there are two issues. First, in both Python and JS code <strong>secret_bytes</strong> should be base64 encoded string. Second, in JavaScript code <strong>secret_bytes</strong> was not correctly decoded from base64 string. Please find below corrected Python and JavaScript examples.</p>

<p>Python:</p>

<pre class=""lang-py prettyprint-override""><code>import hmac
import time
import uuid
import base64
import hashlib
import urllib.parse


def sign_api_request(api_secret, api_key, method, url):
    encoded_url = urllib.parse.quote(url.lower(), '').lower()
    # timestamp = int(time.time())
    # nonce = str(uuid.uuid4())
    timestamp = str(1569158586);
    nonce = '708b7df1-7494-49fa-812c-e5f6c24aeab6'

    signature = api_key + method + encoded_url + timestamp + nonce
    # print(signature)

    secret_bytes = base64.standard_b64decode(api_secret)
    # print(secret_bytes)

    signature_bytes = signature.encode('UTF8')

    signature_hash = hmac.new(secret_bytes, signature_bytes, hashlib.sha256).digest()
    base64_signature_hash = base64.b64encode(signature_hash).decode()
    return base64_signature_hash 


base64_signature_hash = sign_api_request('MTIzNDU2NzgxMjM0NTY3ODEyMzQ1Njc4MTIzNDU2Nzg=', '0987654321', 'POST', '/signin')
print(base64_signature_hash)
</code></pre>

<p>JavaScript:</p>

<pre class=""lang-js prettyprint-override""><code>const CryptoJS = require('crypto-js');

function epochTime() {
    var d = new Date();
    var t = d.getTime();
    var o = t + """";
    return o.substring(0, 10);
}

function newGuid() {
    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) { var r = Math.random() * 16 | 0, v = c == 'x' ? r : r &amp; 0x3 | 0x8; return v.toString(16); });
}

let api_secret = 'MTIzNDU2NzgxMjM0NTY3ODEyMzQ1Njc4MTIzNDU2Nzg=';
let api_key = '0987654321';
let method = 'POST';
let url_path = '/signin';

let encoded_url = encodeURIComponent(url_path.toLowerCase()).toLowerCase();
let timestamp = '1569158586';
let nonce = '708b7df1-7494-49fa-812c-e5f6c24aeab6';

let signature = api_key + method + encoded_url + timestamp + nonce;
// console.log(signature);

let secret_bytes = new Buffer.from(api_secret, 'base64');
secret_bytes = secret_bytes.toString('ascii');
// console.log(secret_bytes);

let hash = CryptoJS.HmacSHA256(signature, secret_bytes);
let hashInBase64 = CryptoJS.enc.Base64.stringify(hash);
console.log(hashInBase64);
</code></pre>

<p>Output should be same for both:</p>

<pre><code>1Hw92JPDJPFB3Je4MvwapODmn5S6KdIbvot3MAvg0jM=
</code></pre>
","58049211","260","<javascript><python><hmac><cryptojs>","2","0","1","2019-09-22 12:29:08","","0","","","","","2018-01-24 19:28:10","","","2019-09-22 12:29:08"
"47768366","Making a POST HTTP Request To The Poloniex API","<p>I'm using the site <a href=""https://www.hurl.it/#top"" rel=""nofollow noreferrer"">https://www.hurl.it/#top</a> to make a POST HTTP request to the Poloniex Exchange API.</p>

<p>Note that I have generated my <strong>Sign</strong> by going to <a href=""https://www.freeformatter.com/hmac-generator.html#ad-output"" rel=""nofollow noreferrer"">https://www.freeformatter.com/hmac-generator.html#ad-output</a> putting my <strong>SECRET</strong> and <strong>API_KEY</strong> into the given fields, and choosing the <strong>SHA512</strong> algorithm.</p>

<p>I have filled out the fields at <a href=""https://www.hurl.it/#top"" rel=""nofollow noreferrer"">https://www.hurl.it/#top</a> with the following (All fields are verbatim other than <strong>API_KEY</strong> and <strong>SECRET</strong> for obvious reasons):</p>

<p><strong>Destination</strong> </p>

<p>POST: <a href=""https://poloniex.com/tradingApi"" rel=""nofollow noreferrer"">https://poloniex.com/tradingApi</a></p>

<p><strong>Headers</strong> </p>

<p>Key: API_KEY </p>

<p>Sign: SECRET</p>

<p><strong>Parameters</strong> </p>

<p>nonce: 0001 </p>

<p>command: returnBalances</p>

<hr/>

<p>I am then given the error:</p>

<pre><code>{""error"":""Invalid API key\/secret pair.""}
</code></pre>

<p>What am I doing wrong? Am I not following the API requirements for an HTTP request verbatim? <strong>Also</strong> I am not looking for any libraries/programming languages to use. I am looking to make this work using this website or something similar, because once I do, I will have what I'm looking for.</p>
","<blockquote>
  <p>Note that I have generated my Sign by going to <a href=""https://www.freeformatter.com/hmac-generator.html#ad-output"" rel=""nofollow noreferrer"">https://www.freeformatter.com/hmac-generator.html#ad-output</a> <strong>putting my SECRET and API_KEY into the given fields</strong>, and choosing the SHA512 algorithm.</p>
</blockquote>

<p>Api &amp; secret are <strong>very sensitive data</strong>, so take care to:</p>

<p><strong>- Never share your api key and secret on a tier website</strong>. (it could be store and be reuse)</p>

<p><strong>- Never send a request containing your api key and secret in clear.</strong> (it could be intercepted by a <a href=""https://en.wikipedia.org/wiki/Man-in-the-middle_attack"" rel=""nofollow noreferrer"">MIM attack</a> and/or your <a href=""https://en.wikipedia.org/wiki/Internet_service_provider"" rel=""nofollow noreferrer"">ISP</a> and/or <a href=""https://en.wikipedia.org/wiki/Deep_packet_inspection"" rel=""nofollow noreferrer"">DPI</a>)</p>

<p>Finally :</p>

<p>You may compute yourself (locally) the signature using a PHP wrapper recommended on the <a href=""https://poloniex.com/support/api/"" rel=""nofollow noreferrer"">Poloniex Api documentation page</a></p>
","49432093","259","<api><http><post><hmac><poloniex>","0","0","1","2018-03-22 15:06:52","","2","","","","","2017-12-12 08:43:34","","","2018-03-22 15:06:52"
"32401239","Shiros Sha256Hash and alternative algorithms","<p>Is Sha256Hash from Apache Shiro based upon a common specification like PBKDF2WithHmacSHA256?</p>

<p>The following example proves, Shiros Sha256Hash doesn't create a valid PBKDF2WithHmacSHA256 hashes.</p>

<pre class=""lang-java prettyprint-override""><code>public static byte[] getEncryptedPassword(
    String password,
    byte[] salt,
    int iterations,
    int derivedKeyLength
) throws NoSuchAlgorithmException, InvalidKeySpecException {
    KeySpec keySpec = new PBEKeySpec(
        password.toCharArray(),
        salt,
        iterations,
        derivedKeyLength * 8
    );
    SecretKeyFactory f = SecretKeyFactory.getInstance(""PBKDF2WithHmacSHA256"");
    return f.generateSecret(keySpec).getEncoded();
}

@Test
public void testHashing(){
    byte[] salt = new SecureRandomNumberGenerator().nextBytes().getBytes();
    byte[] hash1 = new Sha256Hash(""1234"", salt, 1024).getBytes();
    byte[] hash2 = getEncryptedPassword(""1234"", salt, 1024, 32);
    assertTrue(hash1.equals(hash2));
}
</code></pre>

<p>Is there a common way to use PBKDF2WithHmacSHA256 with shiro, or do I have to implement my own CredentialMatcher?</p>
","<p>Per the <a href=""http://shiro-user.582556.n2.nabble.com/Password-hashing-with-PBKDF2-td7577741.html"" rel=""nofollow"">Shiro user list on nabble</a> no, Shiro does not provide PBKDF2 (or BCrypt or SCrypt).</p>

<p>Note that <a href=""https://docs.oracle.com/javase/8/docs/technotes/guides/security/SunProviders.html"" rel=""nofollow"">Java 8 does have PBKDF2-HMAC-SHA-512 available now</a> as PBKDF2WithHmacSHA512 - use that instead.  SHA-512 in particular has 64-bit operations that reduce the advantage GPU based attackers have.  Use more iterations than just 1024, as well - see what your system can handle comfortably under load!    </p>
","35263405","259","<shiro><hmac><sha256><pbkdf2>","2","1","1","2016-02-08 06:14:17","","0","1","","","","2015-09-04 15:05:28","","","2016-02-08 06:14:17"
"47724359","Publishing with Apple news format","<p>I want to post an article on the apple new publisher API. I am trying to replicate the same python code to create an article in the <a href=""https://developer.apple.com/library/content/documentation/General/Conceptual/News_API_Ref/SecuritySampleCode.html#//apple_ref/doc/uid/TP40015409-CH8-SW1"" rel=""nofollow noreferrer"">apple documentation</a></p>

<pre><code>String body = new ObjectMapper().writeValueAsString(articleModel); //a json model that represents the article
String finalUrl = baseURL + channelId + ""/articles/"";
String date= getCurrentDate();
String canonical_request = ""POST""+finalUrl + date + ""multipart/form-data; boundary=1906ef19a2044180b914d742c37e2ace""+ body;
String authHeader = ""HHMAC; key=""+apiKeyId+"";signature=""+getSignature(secret, canonical_request)+"";date=""+date;


  CloseableHttpClient client = HttpClients.createDefault();
  HttpPost httpPost = new HttpPost(finalUrl);

  StringEntity entity = new StringEntity(new ObjectMapper().writeValueAsString(body));
  httpPost.setEntity(entity);

  httpPost.setHeader(""Content-type"", ""'multipart/form-data; boundary=1906ef19a2044180b914d742c37e2ace'"");
  httpPost.setHeader(""Authorization"", authHeader);

  CloseableHttpResponse response = client.execute(httpPost)
</code></pre>

<p>This is how I am getting my signature:</p>

<pre><code>private static String getSignature(String key, String data) {
 Mac sha256_HMAC = Mac.getInstance(""HmacSHA256"");
 SecretKeySpec secret_key = new SecretKeySpec(Base64.getDecoder().decode(key), ""HmacSHA256"");
 sha256_HMAC.init(secret_key);
 byte [] m = sha256_HMAC.doFinal(data.getBytes(""UTF-8""));
 return Base64.getEncoder().encodeToString(m);
}
</code></pre>

<p>I am always getting a 401: Unauthorized </p>
","<p>Try the following way:</p>

<pre><code>private byte[] decodedKey = Base64.getDecoder().decode(api_key_secret);
private HmacUtils hmacUtils = new HmacUtils(HmacAlgorithms.HMAC_SHA_256, decodedKey);

byte[] base64EncodedMac = Base64.getEncoder().encode(hmacUtils.hmac(outputStream.toByteArray()));

String signature = new String(base64EncodedMac);
String authorization = String.format(""HHMAC; key=%s; signature=%s; date=%s"", api_key_id, signature, date);
</code></pre>
","53378724","258","<java><http><authentication><hmac><apple-news>","0","0","1","2018-11-19 16:16:27","","0","","","","","2017-12-09 01:17:26","","","2018-11-19 16:16:27"
"54170442","Creating a hash of a message in C#","<p>I'm want to use a REST API which requires a signature, which is a hash of the message using a secret key. I have a JavaScript implementation of it which works, but when I try to do the same thing in C#, it produces a different result which, according to the API response, does not seem to be correct.</p>

<p>The JavaScript code that produces the desired signature:</p>

<pre><code>let signature = crypto.createHmac('sha256', secret_key).update(message).digest('hex');
</code></pre>

<p>The C# code that does not produce the same desired signature:</p>

<pre><code>var hash = new HMACSHA256(key);
byte[] signature = hash.ComputeHash(message);
StringBuilder hexDigest = new StringBuilder();
foreach (byte b in signature)
     hexDigest.Append(String.Format(""{0:x2}"", b).ToUpper());
</code></pre>

<p>Would appreciate if someone can tell me what I need to change in the C# code to reproduce the same result.</p>
","<p>I don't know what to change in the code you provided. But let me guide you.</p>

<p>You probably have different keys or messages because of text encoding. For example, with Javascript I've tried the following code:</p>

<pre><code>const secret_key = 'abcdefg';
const message = 'Hello, World!';
let signature = crypto.createHmac('sha256', secret_key).update(message).digest('hex');
</code></pre>

<p>The <code>signature</code> is <code>37c559140f3c04743337019ef0f693ee8a469c9d41a925b8f3b624796dce0ba0</code>.</p>

<p>In C# I used the UTF8 encoding and got the same result.</p>

<pre><code>var key = Encoding.UTF8.GetBytes(""abcdefg"");
var hash = new HMACSHA256(key);
var message = Encoding.UTF8.GetBytes(""Hello, World!"");
byte[] signature = hash.ComputeHash(message);
    StringBuilder hexDigest = new StringBuilder();
    foreach (byte b in signature)
         hexDigest.Append(String.Format(""{0:x2}"", b));
</code></pre>

<p>If I used <code>Encoding.Unicode</code>, I would get different signature  <code>eb2b452cf518dc647a5014b7dd46da2e7bd2300aae394ea9cbb4eba492c093f5</code>.</p>
","54170691","253","<javascript><c#><sha256><hmac>","0","2","1","2019-01-13 16:24:18","54170691","0","1","","","","2019-01-13 15:41:20","","2019-01-13 16:24:18","2019-01-13 16:10:21"
"22941925","get no output from hmac function","<p>I want to use hmac to authenticate a user by email
The hmac will be stored in the database along with the userid.</p>

<ul>
<li>Do I also need to store the <code>$payload</code> for decryption as well?</li>
</ul>

<p>Am I doing it right? </p>

<p>I don't get any string in the url querystring?</p>

<p>This is my testpage with the following</p>

<pre><code>$secret = ""dfjhglkhniuh65645"";
$payload= ""234|somedata"";

$hmac = hash_hmac(""sha2"", $payload, $secret, true);
//$hmac = base64_encode($hmac);
if (! function_exists(""hash_hmac"")) {
    echo ""hmac function does not exist"";
}
$uri=""test.php?hash=$hmac"";

if(!isset($_GET['hash'])){
    header('location: ' . $uri);
    exit();
}
echo ""testpage&lt;br&gt;&lt;br&gt;"";
if(isset($_GET['hash']) &amp;&amp; !empty($_GET['hash']))
{
    $sig = $_GET['hash'];
    $expected_sig = hash_hmac(""sha2"", $payload, $secret, true);
    if($expected_sig === $sig)echo ""verification succeeded"";

}
</code></pre>
","<p>These are the possible values for hashing algorithms. <a href=""http://www.php.net/manual/en/function.hash-algos.php"" rel=""nofollow"">http://www.php.net/manual/en/function.hash-algos.php</a></p>

<p>I moved your code a little bit, and got rid of the raw output for hash_hmac (not sure why you wanted that) and it works for me.</p>

<pre><code>&lt;?php

if (!function_exists(""hash_hmac"")) {
    echo ""hmac function does not exist"";
    die();
}

$secret = ""dfjhglkhniuh65645"";
$payload = ""234|somedata"";

$hmac = hash_hmac('sha256', $payload, $secret);
$uri = ""test.php?hash=$hmac"";

if (!isset($_GET['hash'])) {
    header('location: ' . $uri);
    exit();
}

echo ""testpage&lt;br&gt;&lt;br&gt;"";
if (isset($_GET['hash']) &amp;&amp; !empty($_GET['hash'])) {
    $sig = $_GET['hash'];
    $expected_sig = hash_hmac(""sha256"", $payload, $secret);
    if ($expected_sig === $sig) {
        echo ""verification succeeded"";
    }
}
</code></pre>
","22942544","252","<php><hmac>","0","1","1","2014-04-08 16:12:43","","0","","","","","2014-04-08 15:47:06","","","2014-04-08 16:12:43"
"33814177","How do you supply a specific binary key to the PHP hash_hmac() function?","<p>Assuming one has a <strong>specific set of 128 bits</strong> -- represented in hexadecimal as: <code>A1 B1 C1 D1 E1 F1 10 20 30 40 50 60 70 80 90 55</code> -- how does one specify this value as the <em>key</em> to be used in the PHP 'hash_hmac' function?</p>

<p>That is, what will be the <strong>actual value</strong> typed in for the <em>'key'</em> argument?</p>

<pre><code>hash_hmac('md5', 'The quick brown fox', '&lt;what goes here for the above 128 bit value?&gt;')
</code></pre>

<p>Thanks in advance.</p>
","<p>The <code>hex2bin()</code> function will convert your hex string into a binary representation.  For example:</p>

<pre><code>hash_hmac('md5', 'The quick brown fox', hex2bin('A1B1C1D1E1F110203040506070809055'))
</code></pre>
","33815031","251","<php><hmac>","0","0","1","2015-11-21 23:46:31","33815031","3","","5583105","","2015-11-21 23:46:31","2015-11-19 20:54:15","","","2015-11-19 21:51:56"
"40746016","AWS4 Signature key - is this tutorial wrong?","<p>According to this page: <a href=""http://docs.aws.amazon.com/general/latest/gr/signature-v4-examples.html"" rel=""nofollow noreferrer"">Examples of How to Derive a Signing Key for Signature Version 4</a></p>

<p>The result of this code:</p>

<pre><code>$kSecret = ""wJalrXUtnFEMI/K7MDENG+bPxRfiCYEXAMPLEKEY"";

$kDate = hash_hmac('sha256', ""20120215"", ""AWS4"" . $kSecret);
echo ""date: "" . $kDate . ""&lt;br&gt;"";

$kRegion = hash_hmac('sha256', ""us-east-1"", $kDate);
echo ""region: "" . $kRegion . ""&lt;br&gt;"";

$kService = hash_hmac('sha256', ""iam"", $kRegion);
echo ""service: "" . $kService . ""&lt;br&gt;"";

$kSigning = hash_hmac('sha256', ""aws4_request"", $kService);
echo ""signing: "" . $kSigning . ""&lt;br&gt;"";
</code></pre>

<p>should print:</p>

<pre><code>kDate    = '969fbb94feb542b71ede6f87fe4d5fa29c789342b0f407474670f0c2489e0a0d'

kRegion  = '69daa0209cd9c5ff5c8ced464a696fd4252e981430b10e3d3fd8e2f197d7a70c'

kService = 'f72cfd46f26bc4643f06a11eabb6c0ba18780c19a8da0c31ace671265e3c87fa'

kSigning = 'f4780e2d9f65fa895f9c67b32ce1baf0b0d8a43505a000a1a9e090d414db404d'
</code></pre>

<p>So, kDate I get is correct. kRegion is not correct as I get the value:</p>

<pre><code>a59e30f9d899c47b3dd68ea1c0ab3bb529e03a8f4ed2f54cb64af547330a22a0
</code></pre>

<p>I have tried using this website to calculate the HMAC (<a href=""http://www.freeformatter.com/hmac-generator.html#ad-output"" rel=""nofollow noreferrer"">hmac generator</a>) and I get the same result.</p>

<p><a href=""https://i.stack.imgur.com/FRL0b.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/FRL0b.png"" alt=""enter image description here""></a></p>

<p>I really wonder if the page is wrong. Can anyone explain if it's my fault or AWS fault?</p>

<p>Thank you</p>
","<ol>
<li>You should understand the values are binary and printed in hexadecimal form</li>
<li>You are passing date in hexadecimal. You should convert it to binary and pass it before calling <code>hash_hmac</code>. Or store it in binary and print the same in hexadecimal</li>
<li>You never mentioned the language you are using. I had to google to find out what language you are using. In PHP, you can pass: <strong>$raw_output = true</strong> to get the binary string</li>
<li>Store the strings n binary and convert them to <code>hex</code> before printing.</li>
</ol>

<p>Since I am not familiar with PHP, I tried the same in Python and the output matched the expected output. See how I convert it to hex and print.</p>

<pre><code>import hmac
import hashlib
from base64 import b16encode as b16

def sign(key, msg):
    return hmac.new(key, msg.encode(""utf-8""), hashlib.sha256).digest()

def getSignatureKey(key, dateStamp, regionName, serviceName):
    kDate = sign((""AWS4"" + key).encode(""utf-8""), dateStamp)
    print b16(kDate)
    kRegion = sign(kDate, regionName)
    print b16(kRegion)
    kService = sign(kRegion, serviceName)
    print b16(kService)
    kSigning = sign(kService, ""aws4_request"")
    print b16(kSigning)
    return kSigning

key = 'wJalrXUtnFEMI/K7MDENG+bPxRfiCYEXAMPLEKEY'
dateStamp = '20120215'
regionName = 'us-east-1'
serviceName = 'iam'

getSignatureKey(key, dateStamp, regionName, serviceName)
</code></pre>

<p><strong>Output</strong></p>

<pre><code>969FBB94FEB542B71EDE6F87FE4D5FA29C789342B0F407474670F0C2489E0A0D
69DAA0209CD9C5FF5C8CED464A696FD4252E981430B10E3D3FD8E2F197D7A70C
F72CFD46F26BC4643F06A11EABB6C0BA18780C19A8DA0C31ACE671265E3C87FA
F4780E2D9F65FA895F9C67B32CE1BAF0B0D8A43505A000A1A9E090D414DB404D
</code></pre>

<p><strong>PHP</strong></p>

<pre><code>string hash_hmac ( string $algo , string $data , string $key [, bool $raw_output = false ] )
</code></pre>
","40747190","251","<php><amazon-web-services><hmac><aws-api-gateway>","5","3","1","2016-11-22 17:15:50","40747190","4","","4237701","","2016-11-22 17:15:50","2016-11-22 15:41:11","","","2016-11-22 16:40:21"
"42663932","How to assign a variable to a hash_hmac sha256 string or data in php?","<p>I am using mastercard payment gateway .
All works fine if I hardcode the data or string of the hash_hmac sha256.</p>

<p>the working version:</p>

<pre><code>$vpcURL = 'https://migs.mastercard.com.au/vpcpay?';
$secret = strtoupper(""MYSECRET CODE"");

$data =""vpc_AccessCode=0E5AC9E6&amp;vpc_Amount=1000&amp;vpc_Command=pay&amp;vpc_Locale=en&amp;vpc_MerchTxnRef=TEST_TRN&amp;vpc_Merchant=TESTSITE&amp;vpc_OrderInfo=123&amp;vpc_ReturnURL=https://www.examplesite.com/payment-confirmation/&amp;vpc_Version=1"";

$sha256_hmac = strtoupper(hash_hmac('sha256', $data, pack('H*', $secret)));
header(""Location: "" . $vpcURL . ""&amp;"" . $data . ""&amp;vpc_SecureHash="" . $sha256_hmac.""&amp;vpc_SecureHashType=SHA256"");
</code></pre>

<p>but I can not pass the hardcoded value to the vpc_Amount
I am getting the amount from a form where user can input the amount they wish.</p>

<p>So I am getting the amount from:</p>

<pre><code>$totalAmount = $_POST['totalAmount'];
</code></pre>

<p>Now I want to pass this $totalAmount to the $data.
So I change the $data to this:</p>

<pre><code>$data =""vpc_AccessCode=0E5AC9E6&amp;vpc_Amount=$totalAmount&amp;vpc_Command=pay&amp;vpc_Locale=en&amp;vpc_MerchTxnRef=TEST_TRN&amp;vpc_Merchant=TESTSITE&amp;vpc_OrderInfo=123&amp;vpc_ReturnURL=https://www.examplesite.com/payment-confirmation/&amp;vpc_Version=1"";
</code></pre>

<p>When I use this the payment gateway directly goes to the confirmation page : <code>https://www.examplesite.com/payment-confirmation/</code> and the all the values are empty.</p>

<p>I think it is a simple syntex error..</p>

<p>How can I fix this?
how to pass the <code>$totalAmount</code> to <code>$data</code> correctly?</p>

<pre><code>print_r ($data); gives this:

vpc_AccessCode=0E5AC9E6&amp;vpc_Amount=58,258.00&amp;vpc_Command=pay&amp;vpc_Locale=en&amp;vpc_MerchTxnRef=TEST_TRN&amp;vpc_Merchant=TESTSITE&amp;vpc_OrderInfo=123&amp;vpc_ReturnURL=https://www.examplesite.com/payment-confirmation/?vpc_Version=1
</code></pre>

<p><strong>UPDATE</strong>
if I update the code to </p>

<pre><code>$real_integer_amount = filter_var($totalAmount, FILTER_SANITIZE_NUMBER_INT);

$data =""vpc_AccessCode=0E5BC9E7&amp;vpc_Amount={$real_integer_amount}&amp;vpc_Command=pay&amp;vpc_Locale=en&amp;vpc_MerchTxnRef=TEST_TRN&amp;vpc_Merchant=TESTSITE&amp;vpc_OrderInfo=123&amp;vpc_ReturnURL=https://www.examplesite.com/payment-confirmation/?vpc_Version=1"";
</code></pre>

<p>in confirmation page it shows the real amount and others are empty but still not going to the payment gateway where user can input their card details</p>
","<p>I can't imagine the receiving server wants commas in the value. Also, you should build a query string like this to avoid problems with unescaped values:</p>

<pre><code>&lt;?php
$vpcURL = 'https://migs.mastercard.com.au/vpcpay?';
$secret = strtoupper(""MYSECRET CODE"");
$totalAmount = str_replace("","", """", $_POST[""totalAmount""]);

$data = [
    ""vpc_AccessCode"" =&gt; ""0E5AC9E6"",
    ""vpc_Amount"" =&gt; $totalAmount,
    ""vpc_Command"" =&gt; ""pay"",
    ""vpc_Locale"" =&gt; ""en"",
    ""vpc_MerchTxnRef"" =&gt; ""TEST_TRN"",
    ""vpc_Merchant"" =&gt; ""TESTSITE"",
    ""vpc_OrderInfo"" =&gt; ""123"",
    ""vpc_ReturnURL"" =&gt; ""https://www.examplesite.com/payment-confirmation/"",
    ""vpc_Version"" =&gt; ""1"",
];
$data = http_build_query($data);

$sha256_hmac = strtoupper(hash_hmac('sha256', $data, pack('H*', $secret)));
header(""Location: "" . $vpcURL . ""&amp;"" . $data . ""&amp;vpc_SecureHash="" . $sha256_hmac.""&amp;vpc_SecureHashType=SHA256"");
</code></pre>
","42664426","249","<php><string><sha256><hmac><mastercard>","-1","0","2","2017-03-08 07:26:12","42665324","7","","2767193","","2017-03-08 06:27:07","2017-03-08 05:51:42","","2017-03-08 06:44:14","2017-03-08 06:27:32"
"42663932","How to assign a variable to a hash_hmac sha256 string or data in php?","<p>I am using mastercard payment gateway .
All works fine if I hardcode the data or string of the hash_hmac sha256.</p>

<p>the working version:</p>

<pre><code>$vpcURL = 'https://migs.mastercard.com.au/vpcpay?';
$secret = strtoupper(""MYSECRET CODE"");

$data =""vpc_AccessCode=0E5AC9E6&amp;vpc_Amount=1000&amp;vpc_Command=pay&amp;vpc_Locale=en&amp;vpc_MerchTxnRef=TEST_TRN&amp;vpc_Merchant=TESTSITE&amp;vpc_OrderInfo=123&amp;vpc_ReturnURL=https://www.examplesite.com/payment-confirmation/&amp;vpc_Version=1"";

$sha256_hmac = strtoupper(hash_hmac('sha256', $data, pack('H*', $secret)));
header(""Location: "" . $vpcURL . ""&amp;"" . $data . ""&amp;vpc_SecureHash="" . $sha256_hmac.""&amp;vpc_SecureHashType=SHA256"");
</code></pre>

<p>but I can not pass the hardcoded value to the vpc_Amount
I am getting the amount from a form where user can input the amount they wish.</p>

<p>So I am getting the amount from:</p>

<pre><code>$totalAmount = $_POST['totalAmount'];
</code></pre>

<p>Now I want to pass this $totalAmount to the $data.
So I change the $data to this:</p>

<pre><code>$data =""vpc_AccessCode=0E5AC9E6&amp;vpc_Amount=$totalAmount&amp;vpc_Command=pay&amp;vpc_Locale=en&amp;vpc_MerchTxnRef=TEST_TRN&amp;vpc_Merchant=TESTSITE&amp;vpc_OrderInfo=123&amp;vpc_ReturnURL=https://www.examplesite.com/payment-confirmation/&amp;vpc_Version=1"";
</code></pre>

<p>When I use this the payment gateway directly goes to the confirmation page : <code>https://www.examplesite.com/payment-confirmation/</code> and the all the values are empty.</p>

<p>I think it is a simple syntex error..</p>

<p>How can I fix this?
how to pass the <code>$totalAmount</code> to <code>$data</code> correctly?</p>

<pre><code>print_r ($data); gives this:

vpc_AccessCode=0E5AC9E6&amp;vpc_Amount=58,258.00&amp;vpc_Command=pay&amp;vpc_Locale=en&amp;vpc_MerchTxnRef=TEST_TRN&amp;vpc_Merchant=TESTSITE&amp;vpc_OrderInfo=123&amp;vpc_ReturnURL=https://www.examplesite.com/payment-confirmation/?vpc_Version=1
</code></pre>

<p><strong>UPDATE</strong>
if I update the code to </p>

<pre><code>$real_integer_amount = filter_var($totalAmount, FILTER_SANITIZE_NUMBER_INT);

$data =""vpc_AccessCode=0E5BC9E7&amp;vpc_Amount={$real_integer_amount}&amp;vpc_Command=pay&amp;vpc_Locale=en&amp;vpc_MerchTxnRef=TEST_TRN&amp;vpc_Merchant=TESTSITE&amp;vpc_OrderInfo=123&amp;vpc_ReturnURL=https://www.examplesite.com/payment-confirmation/?vpc_Version=1"";
</code></pre>

<p>in confirmation page it shows the real amount and others are empty but still not going to the payment gateway where user can input their card details</p>
","<p>what I posted in first works very fine.. </p>

<p>if I change <code>vpc_amount</code> to any (hardcoded) values that works.. </p>

<p>the problem was when I assign the <code>$totalAmount</code> to <code>vpc_amount</code> the variable ($totalAmount) holds decimal points and thousand separators.. 
that makes this issue.. </p>

<p>I just wanted to sanitize the variable before passing this <code>totalAmount</code> to the <code>data</code>to make it works..</p>

<p>so I've updated it as:</p>

<pre><code>$real_integer_amount = filter_var($totalAmount, FILTER_SANITIZE_NUMBER_INT);
</code></pre>

<p>and now this works fine..</p>

<p>so the final working code is :</p>

<pre><code>$vpcURL = 'https://migs.mastercard.com.au/vpcpay?';
$secret = strtoupper(""My Secret Code"");

$real_integer_amount = filter_var($totalAmount, FILTER_SANITIZE_NUMBER_INT);

$data =""vpc_AccessCode=0E5AC9E6&amp;vpc_Amount=$real_integer_amount&amp;vpc_Command=pay&amp;vpc_Locale=en&amp;vpc_MerchTxnRef=TEST_TRN&amp;vpc_Merchant=TESTSITE&amp;vpc_OrderInfo=123&amp;vpc_ReturnURL=https://www.trinitycollege.lk/payment-confirmation/&amp;vpc_Version=1"";

$sha256_hmac = strtoupper(hash_hmac('sha256', $data, pack('H*', $secret)));
header(""Location: "" . $vpcURL . ""&amp;"" . $data . ""&amp;vpc_SecureHash="" . $sha256_hmac.""&amp;vpc_SecureHashType=SHA256"");
</code></pre>

<p>@<strong>MagnusEriksson</strong> : thanks for the time and suggestions.. URL encoding did nothing with this issue.</p>

<p>@<strong>pvg</strong> there was no any spelling mistakes.. if I just use <code>{$totalAmount}</code> in the <code>$data</code> it did not work.. but this needed this : <code>FILTER_SANITIZE_NUMBER_INT</code></p>

<p>@<strong>miken32</strong> thank you for your answer. I've tried to use your code just by replacing the params with my actual detail.. but it gave me this error ""<code>HTTP Status - 400 E5000: Cannot form a matching secure hash based on the merchant's request using either of the two merchant's secrets</code>""</p>

<p>I've double checked the spelling and values/params</p>

<p>This may help someone else in future..</p>
","42665324","249","<php><string><sha256><hmac><mastercard>","-1","0","2","2017-03-08 07:26:12","42665324","7","","2767193","","2017-03-08 06:27:07","2017-03-08 05:51:42","","","2017-03-08 07:26:12"
"52893179","How can I do multipart/form-data request with hash key?","<p>There are how I generate options for the request to the server:  </p>

<pre><code>function multipartFormData(params, url, key, nonce, signature) {
var boundary = '----WebKitFormBoundary' + nonce;
var bodyString = [];

bodyString.push(
'--' + boundary,
'Content-Disposition: form-data; name=""document""; filename=""image.png""',
'Content-Type: image/png',
'',
fs.createReadStream('image/image.png')
  );

  bodyString.push('--' + boundary + '--','');

  var content = bodyString.join('\r\n');

  return {
    formData: content,
    url: url + '/',
    headers: {
    'Content-Type': 'multipart/form-data; boundary=' + boundary,
    'Apiauth-Key': key,
    'Apiauth-Nonce': nonce,
    'Apiauth-Signature': signature,
    'Content-Length': content.length
    }
  }
}
</code></pre>

<p>There are the signature hash authentication key: </p>

<pre><code>function getMessageSignature(path, params, nonce) {
    var data_params = params;
    var boundary = '----WebKitFormBoundary' + nonce;
    var postParameters  = querystring.stringify(data_params);
    var path = '/api' + path + '/';

    let message = nonce + config.key + path + 'POSTmultipart/form-data; boundary=' + boundary + 'image.png';


    var auth_hash = crypto.createHmac(""sha256"", config.secret).update(message).digest('hex').toUpperCase();
    return auth_hash;
}
</code></pre>

<p>So then I just do my request:</p>

<pre><code>function Client(key, secret) {
    var nonce = new Date() * 1000;
    var config = {
        url: 'https://somesite/api',
        key: key,
        secret: secret
    };

// there is other all functions, 2 of them i have already written on top

    var signature = getMessageSignature(path, params, nonce);
    var options = multipartFormData(params, config.url, config.key, nonce, signature);

    request.post(options, function(error, response, body) {
    ...
    }
}
</code></pre>

<p>I am getting this error in the request body.error :</p>

<blockquote>
  <p>message: 'HMAC authentication key and signature was given, but they
  are invalid</p>
</blockquote>
","","","248","<node.js><request><hmac>","0","","0","2018-10-20 02:49:25","","2","","8168413","","2018-10-20 02:49:25","2018-10-19 13:19:08","","",""
"33122816","Web API: authorization or/and authentication","<p>I created asp.net web api project. I need to add authorization or/and authentication. I've read a lot about OAuth, SAML, JWT, HMAC etc. and everytime I see author emphasizes that OAuth is not authentication and you need to differ authN from authZ. I'm a bit confusing because I don't understand:</p>

<ol>
<li>when I need to use authentication (SSO, login/password) and when authorization(OAuth, tokens) for API?</li>
<li>are HMAC, JWT for authorization or for authentication? because they are signed and I can add userid to this token use like user identifier</li>
<li>what are real differences between authN workflow and authZ workflow?</li>
</ol>
","<p>OAuth can be also used to <em>authenticate users</em> using a <em>resource owner grant</em> (i.e. a client gets an <em>access token</em> providing an <em>user+password</em> credential). </p>

<p>The resulting <em>access token</em> is what you should call <em>authorization</em>, since it will contain info like claims describing permissions, permission masks or roles (it depends on what authorization scheme you implement in your solution).</p>

<p>A <em>JWT</em> (JSON Web Token) is just a JSON representation of both access token and any other associated info. <em>JWT</em> is the content of some authentication result which can be used to be authorized against some resources. Since the <em>JWT</em> contains an <em>access token</em>, if you're using basic authorization, you'll add an <code>Authorization</code> header to your requests: <code>Authorization: Bearer [your access token]</code>. </p>
","33122955","247","<api><authentication><oauth><authorization><hmac>","0","1","1","2015-10-14 10:30:35","33122955","0","","","","","2015-10-14 10:22:54","","","2015-10-14 10:30:35"
"38827738","Problems with creating HMAC signature","<p>I need to work with my Azure Blob storage in my programs written on C. I didn't found any C library to work with it, so I decide to write my own code using Azure Blob Storage REST API, curl and openssl libraries.</p>

<p>I found some <a href=""https://stackoverflow.com/questions/20103258/accessing-azure-blob-storage-using-bash-curl"">bash</a> script for making simple request to Azure storage what work well and start rewriting it into C.</p>

<p>For now I have some problems with creating HMAC signature for request. I'm newbie in cryptography and after some searching I found <a href=""https://wiki.openssl.org/index.php/EVP_Signing_and_Verifying"" rel=""nofollow noreferrer"">this</a>.</p>

<p>Well, here is my code what will make simple GET request for list of blobs in storage:</p>

<pre><code>#include &lt;errno.h&gt;
#include &lt;string.h&gt;
#include &lt;unistd.h&gt;
#include &lt;time.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;stdio.h&gt;
#include &lt;limits.h&gt;
#include &lt;openssl/evp.h&gt;
#include &lt;curl/curl.h&gt;
#include &lt;stdint.h&gt;
#include &lt;assert.h&gt;

#include ""crypto.h""


#define VERB_GET                               ""GET""
#define VERB_POST                              ""POST""
#define VERB_PUT                               ""PUT""

#define AZURE_API_VERSION                      ""2011-08-18""
#define AZURE_KEY_TYPE                         ""SharedKey""

#define REQUEST_HEADER_X_MS_VERSION            ""x-ms-version: ""AZURE_API_VERSION
#define REQUEST_HEADER_X_MS_DATE_F             ""x-ms-date: %s""
#define REQUEST_HEADER_AUTHORIZATION_F         ""Authorization: ""AZURE_KEY_TYPE \
                                               "" %s:%s""


static const char *account_name = ""&lt;account_name&gt;"";
static const char *container_name = ""&lt;container_name&gt;"";
static const char *account_key = ""&lt;account_key&gt;"";



// at least 30 symbols for result must be allocated
static void get_time_now_gmt(char *result) {
    #define GMT_TIME_FORMAT_STRING ""%s, %02d %s %d %02d:%02d:%02d GMT""

    static const char *nameOfDay[] = {
        ""Sun"", ""Mon"", ""Tue"", ""Wed"", ""Thu"", ""Fri"", ""Sat""
    };

    static const char *nameOfMonth[] = {
        ""Jan"", ""Feb"", ""Mar"", ""Apr"", ""May"", ""Jun"", 
        ""Jul"", ""Aug"", ""Sep"", ""Oct"", ""Nov"", ""Dec""
    };

    time_t t = time(NULL);
    struct tm tm = *gmtime(&amp;t);

    // return something like Thu, 07 Jul 2016 11:07:53 GMT
    sprintf(result, GMT_TIME_FORMAT_STRING,
            nameOfDay[tm.tm_wday],          // Day of week name
            tm.tm_mday,                     // Day
            nameOfMonth[tm.tm_mon],         // Month name
            tm.tm_year + 1900,              // Year
            tm.tm_hour,                     // Hour
            tm.tm_min,                      // Minute
            tm.tm_sec);                     // Second
}


struct MemoryStruct {
  char *memory;
  size_t size;
};

static size_t curl_callback(void *contents, size_t size, size_t nmemb, 
        void* userp) {
    size_t realsize = size * nmemb;
    struct MemoryStruct *mem = (struct MemoryStruct *) userp;

    mem-&gt;memory = realloc(mem-&gt;memory, mem-&gt;size + realsize + 1);
    if (!mem-&gt;memory) {
        /* out of memory! */
        printf(""not enough memory (realloc returned NULL)\n"");
        return 0;
    }

    memcpy(&amp;(mem-&gt;memory[mem-&gt;size]), contents, realsize);
    mem-&gt;size += realsize;
    mem-&gt;memory[mem-&gt;size] = 0;

    return realsize;
}

void make_curl_req(const char *h1, const char *h2, const char *h3) {
    CURL *curl_handle;
    CURLcode res;
    char url[256];
    struct MemoryStruct chunk;
    struct curl_slist *headers = NULL;

    chunk.memory = malloc(1); /* will be grown as needed by the realloc above */
    chunk.size = 0; /* no data at this point */

    curl_global_init(CURL_GLOBAL_ALL);

    /* init the curl session */
    curl_handle = curl_easy_init();

    sprintf(url, ""https://%s.blob.core.windows.net/%s?restype=container&amp;comp=list"",
        account_name, container_name);

    headers = curl_slist_append(headers, ""Accept:"");
    headers = curl_slist_append(headers, h1);
    headers = curl_slist_append(headers, h2);
    headers = curl_slist_append(headers, h3);

    curl_easy_setopt(curl_handle, CURLOPT_HTTPHEADER, headers);

    /* specify URL to get */
    curl_easy_setopt(curl_handle, CURLOPT_URL, url);

    /* send all data to this function  */
    curl_easy_setopt(curl_handle, CURLOPT_WRITEFUNCTION, curl_callback);

    /* we pass our 'chunk' struct to the callback function */
    curl_easy_setopt(curl_handle, CURLOPT_WRITEDATA, (void *) &amp;chunk);

    /* get it! */
    res = curl_easy_perform(curl_handle);

    /* check for errors */
    if (res != CURLE_OK) {
        fprintf(stderr, ""curl_easy_perform() failed: %s\n"",
                curl_easy_strerror(res));
    } else {
        /*
         * Now, our chunk.memory points to a memory block that is chunk.size
         * bytes big and contains the remote file.
         *
         * Do something nice with it!
         */

        printf(""%s\n"", chunk.memory);

    }

    /* cleanup curl stuff */
    curl_easy_cleanup(curl_handle);

    free(chunk.memory);

    /* we're done with libcurl, so clean it up */
    curl_global_cleanup();
}

void print_it(const char* label, const unsigned char* buff, size_t len)
{
    if(!buff || !len)
        return;

    if(label)
        printf(""%s: "", label);

    for(size_t i=0; i &lt; len; ++i)
        printf(""%02X"", buff[i]);

    printf(""\n"");
}

int main(int argc, char **argv) {

    char request_date[31];
    char x_ms_date[45];
    char canonicalized_headers[45 + sizeof(REQUEST_HEADER_X_MS_VERSION)];
    char canonicalized_resources[strlen(account_name) + 
                                strlen(container_name) + 5];
    char string_to_sign[1024];

    unsigned char *decoded_hex_key;
    size_t decoded_hex_key_len;

    unsigned char *signature = NULL;
    size_t signature_len;

    unsigned char *signature_based;

    unsigned char auth_header[256];


    OpenSSL_add_all_algorithms();

    get_time_now_gmt(request_date);
    sprintf(x_ms_date, REQUEST_HEADER_X_MS_DATE_F, request_date);
    sprintf(canonicalized_headers, ""%s\\n%s"", 
            x_ms_date, REQUEST_HEADER_X_MS_VERSION);
    sprintf(canonicalized_resources, ""/%s/%s"", account_name, container_name);
    sprintf(string_to_sign, ""%s\n\n\n\n\n\n\n\n\n\n\n\n%s\n%s\ncomp:list\nrestype:container"",
            VERB_GET, canonicalized_headers, canonicalized_resources);

    printf(""String to sign: %s\n"", string_to_sign);

    base64_decode(account_key, &amp;decoded_hex_key, &amp;decoded_hex_key_len);

    print_it(""Decoded hex key: "", decoded_hex_key, decoded_hex_key_len);

    hmac_sha256(decoded_hex_key, decoded_hex_key_len, &amp;signature,
            &amp;signature_len, decoded_hex_key, decoded_hex_key_len);

    free(decoded_hex_key);

    base64_encode(signature, signature_len, &amp;signature_based);
    free(signature);

    sprintf(auth_header, REQUEST_HEADER_AUTHORIZATION_F, 
            account_name, signature_based);

    printf(""Signature: %s\n"", signature_based);

    free(signature_based);

//    make_curl_req(x_ms_date, REQUEST_HEADER_X_MS_VERSION, auth_header);

    return (EXIT_SUCCESS);
}
</code></pre>

<p>Well, the result of request is incorrect digest. I try to print digest what generates bash script and code what I found and they are different.</p>

<p>Could anyone please help me how to solve this problem, because I have no ideas.</p>

<p>P.S. Created HMAC digests are different even if I put constant date into <code>request_date</code> in my code and <code>request_date</code> in bash script.</p>

<p>Thanks in advance.</p>

<p>UPDATED:</p>

<p>Ok, well, I recive next from azure:</p>

<pre><code>&lt;?xml version=""1.0"" encoding=""utf-8""?&gt;&lt;Error&gt;&lt;Code&gt;AuthenticationFailed&lt;/Code&gt;&lt;Message&gt;Server failed to authenticate the request. Make sure the value of Authorization header is formed correctly including the signature.
RequestId:71251945-0001-0020-1167-f16d5e000000
Time:2016-08-08T11:25:38.6226737Z&lt;/Message&gt;&lt;AuthenticationErrorDetail&gt;The MAC signature found in the HTTP request 'i4/LU2Rk8sBJ02kfokzzKz95QRUrOEDV8vwxNEo0uUA=' is not the same as any computed signature. Server used following string to sign: 'GET











x-ms-date:Mon, 08 Aug 2016 11:25:39 GMT
x-ms-version:2011-08-18
/&lt;account_name&gt;/&lt;container_name&gt;
comp:list
restype:container'.&lt;/AuthenticationErrorDetail&gt;&lt;/Error&gt;
</code></pre>

<p>The signature what generates my code is <code>i4/LU2Rk8sBJ02kfokzzKz95QRUrOEDV8vwxNEo0uUA=</code> and bash script is <code>FZ/Kd4oQH7/aGqbgYBs0hsGIjm7JDcWQaGxkFlBKyrI=</code> for same values of <code>request_date</code>.</p>

<p>The value of string_to_sign is next: </p>

<pre><code>00000000  47 45 54 0a 0a 0a 0a 0a  0a 0a 0a 0a 0a 0a 0a 78  |GET............x|
00000010  2d 6d 73 2d 64 61 74 65  3a 4d 6f 6e 2c 20 30 38  |-ms-date:Mon, 08|
00000020  20 41 75 67 20 32 30 31  36 20 31 30 3a 34 31 3a  | Aug 2016 10:41:|
00000030  32 32 20 47 4d 54 0a 78  2d 6d 73 2d 76 65 72 73  |22 GMT.x-ms-vers|
00000040  69 6f 6e 3a 32 30 31 31  2d 30 38 2d 31 38 0a 2f  |ion:2011-08-18./|
00000050  3c 73 74 6f 72 61 67 65  5f 61 63 63 6f 75 6e 74  |&lt;storage_account|
00000060  3e 2f 3c 63 6f 6e 74 61  69 6e 65 72 5f 6e 61 6d  |&gt;/&lt;container_nam|
00000070  65 3e 0a 63 6f 6d 70 3a  6c 69 73 74 0a 72 65 73  |e&gt;.comp:list.res|
00000080  74 79 70 65 3a 63 6f 6e  74 61 69 6e 65 72        |type:container|
0000008e
</code></pre>

<p>I think, the problem is in passing <code>decoded_hex_key</code> passing into <code>hmac_sha256</code>. Maybe I have to transorm it before passing?</p>
","<p>I've resolve my problem. Looks like I use incorrect signature creation method, or used it incorrect (that is more probable).</p>

<p>So, I found next method, what I belive will be helpfull for someone.</p>

<pre><code>static int hmac_sha25_digest(const u_char *msg, size_t mlen, const u_char *key, 
        size_t key_len, u_char **res, unsigned int *rlen) {

    *res = malloc((SHA256_DIGEST_LENGTH + 1) * sizeof(u_char));
    memset(*res, 0, (SHA256_DIGEST_LENGTH + 1) * sizeof(u_char));


    HMAC_CTX ctx;
    HMAC_CTX_init(&amp;ctx);

    HMAC_Init_ex(&amp;ctx, key, key_len, EVP_sha256(), NULL);
    HMAC_Update(&amp;ctx, msg, mlen);
    HMAC_Final(&amp;ctx, *res, rlen);
    HMAC_CTX_cleanup(&amp;ctx);

    return 0;
}
</code></pre>

<p>Easy peasy and serve all my needs.</p>
","38998899","247","<c><azure><openssl><hmac>","0","1","1","2016-08-17 14:03:13","","6","","-1","","2017-05-23 12:14:56","2016-08-08 11:11:29","","","2016-08-17 14:03:13"
"52090267","Verify that Embedded app settings page visit is from Shopify in PHP","<p>When a client installs the app, they have the option to click on the app name in the list of apps on the <code>/admin/apps</code> page. </p>

<p>When they click that page, my PHP index file for my app receives these <code>$_GET</code> vars:  </p>

<pre><code>hmac = some_long_alphanumaeric_hmac
locale = en
protocol = https://
shop = example-shop.myshopify.com
timestamp = 1535609063
</code></pre>

<p>To verify a webhook from Shopify, I successfully use this:</p>

<pre><code>function verify_webhook($data, $hmac_header, $app_api_secret) {
    $calculated_hmac = base64_encode(hash_hmac('sha256', $data, $app_api_secret, true));
    return ($hmac_header == $calculated_hmac);
}

// Set vars for Shopify webhook verification
$hmac_header = $_SERVER['HTTP_X_SHOPIFY_HMAC_SHA256'];
$data = file_get_contents('php://input');
$verified = verify_webhook($data, $hmac_header, MY_APP_API_SECRET);
</code></pre>

<p>Is it possible to verify an app admin page visit is from a Shopify client that has the app installed? </p>

<p>PS: I've looked through both, the <a href=""https://help.shopify.com/en/api/embedded-apps/embedded-app-sdk/getting-started"" rel=""nofollow noreferrer"">Embedded Apps API</a> (but I can't figure out if that's even the right documentation or if I'm doing something wrong), as well as the <a href=""https://github.com/Sovi-Creative/shopify-embedded-app-blog-example/blob/master/views/index.ejs"" rel=""nofollow noreferrer"">GitHub example provided</a> (which has no instructions on how to verify an Embedded App admin page visit).</p>

<h3>UPDATE:</h3>

<p>I've tried various other ways, discovering some ridiculous problems along the way, but still no luck.  </p>

<ol>
<li><p>The method I understand should be used to verify a Shopify HMAC is something akin to this:</p>

<pre><code>function verify_hmac($hmac = NULL, $shopify_app_api_secret) {
    $params_array = array();
    $hmac = $hmac ? $hmac : $_GET['hmac'];
    unset($_GET['hmac']);

    foreach($_GET as $key =&gt; $value){
        $key = str_replace(""%"",""%25"",$key);
        $key = str_replace(""&amp;"",""%26"",$key);
        $key = str_replace(""="",""%3D"",$key);
        $value = str_replace(""%"",""%25"",$value);
        $value = str_replace(""&amp;"",""%26"",$value);
        $params_array[] = $key . ""="" . $value;
    }

    $params_string = join('&amp;', $params_array);
    $computed_hmac = hash_hmac('sha256', $params_string, $shopify_app_api_secret);

    return hash_equals($hmac, $computed_hmac);
}
</code></pre></li>
</ol>

<p>But the line <code>$params_string = join('&amp;', $params_array);</code> causes an annoying problem by encoding <code>&amp;timestamp</code> as <code>xtamp</code> ... Using <code>http_build_query($params_array)</code> results in the same ridiculous thing.  Found others having this same problem <a href=""https://stackoverflow.com/questions/45866266/%C3%97-multiplication-symbol-replaces-timestamp-in-url"">here</a>.  Basically resolved by encoding the <code>&amp;</code> as <code>&amp;amp;</code>, to arrive at <code>$params_string = join('&amp;amp;', $params_array);</code>.</p>

<ol start=""2"">
<li><p>My final version is like this, but still doesn't work (all the commented code is what else I've tried to no avail):  </p>

<pre><code>function verify_hmac($hmac = NULL, $shopify_app_api_secret) {
    $params_array = array();
    $hmac = $hmac ? $hmac : $_GET['hmac'];
    unset($_GET['hmac']);
//  unset($_GET['protocol']);
//  unset($_GET['locale']);

    foreach($_GET as $key =&gt; $value){
        $key = str_replace(""%"",""%25"",$key);
        $key = str_replace(""&amp;"",""%26"",$key);
        $key = str_replace(""="",""%3D"",$key);
        $value = str_replace(""%"",""%25"",$value);
        $value = str_replace(""&amp;"",""%26"",$value);
        $params_array[] = $key . ""="" . $value;
//  This commented out method below was an attempt to see if 
//  the imporperly encoded query param characters were causing issues
/*
        if (!isset($params_string) || empty($params_string)) {
            $params_string = $key . ""="" . $value;
        }
        else {
            $params_string = $params_string . ""&amp;amp;"" . $key . ""="" . $value;
        }
*/
    }

//  $params_string = join('&amp;amp;', $params_array);
//  echo $params_string;
//  $computed_hmac =  base64_encode(hash_hmac('sha256', $params_string, $shopify_app_api_secret, true));
//  $computed_hmac =  base64_encode(hash_hmac('sha256', $params_string, $shopify_app_api_secret, false));
//  $computed_hmac =  hash_hmac('sha256', $params_string, $shopify_app_api_secret, false);
//  $computed_hmac =  hash_hmac('sha256', $params_string, $shopify_app_api_secret, true);
    $computed_hmac = hash_hmac('sha256', http_build_query($params_array), $shopify_app_api_secret);

    return hash_equals($hmac, $computed_hmac);
}
</code></pre></li>
</ol>
","<p>If you get a hit from Shopify, the first thing you do is check in your persistence layer if you have the shop registered. If you do, and you have a session of some kind setup, you are free to render your App to that shop. If you do not have the shop persisted, you go through the oAuth cycle to get an authentication token to use on the shop, which you persist along with the shop and new session.</p>

<p>For any routes or end points in your shop where you are receiving webhooks, of course those requests have no session, so you use the HMAC security approach to figure out what to do. So your question is clearly straddling two different concepts, each handled differently. The documentation is pretty clear on the differences.</p>
","52097914","244","<php><shopify><hmac>","-1","0","1","2018-08-31 02:14:13","","10","","4206306","","2018-08-31 02:14:13","2018-08-30 06:11:31","","","2018-08-30 13:08:22"
"50985829","Generate HMAC SHA Algorithm using URI and Key","<p>I wrote a Java program which generates HMAC SHA hash code, But due to some reason I have to write the same code in NodeJs/JavaScript. I tried googling around but did not get anything. In this Java code, I am passing URI and Key as arguments, to generate the hash code, where URI contains Timestamp. 
The java code is as :</p>

<pre><code>    public static String calcMAC(String data, byte[] key) throws Exception {
    String result=null;
    SecretKeySpec signKey = new SecretKeySpec(key, SecurityConstants.HMAC_SHA1_ALGORITHM);
    Mac mac = Mac.getInstance(SecurityConstants.HMAC_SHA1_ALGORITHM);
    mac.init(signKey);
    byte[] rawHmac;
    try {
        rawHmac = mac.doFinal(data.getBytes(""US-ASCII""));
        result = Base64.encodeBase64String(rawHmac);
    } catch (Exception e) {
        e.printStackTrace();
    }
    return result.trim();
}

public static void main(String args[]) {
    String timestamp = args[0];
    String key = ""d134hjeefcgkahvg32ajkdbaff84ff180"";
    String out = null;
    try {
        out = calcMAC(""/req?app_id=47ca34"" + timestamp + ""=2018-05-22T12:02:15Z"", 
                key.getBytes());
        System.out.println(URLEncoder.encode(out, ""UTF-8""));
    } catch (Exception e) {
        e.printStackTrace();
    }
}
</code></pre>

<p>Is it possible to achieve the same goal in NodeJs/JavaScript?</p>

<p>Note:: I have to call this script from Postman pre-request script.</p>
","<p>The crypto module should do this for you, you can substitute the 'data' variable with whatever you want to hash: </p>

<pre><code>const crypto = require('crypto');

const data = 'The fault dear Brutus lies not in our stars';
const key = Buffer.from('d134hjeefcgkahvg32ajkdbaff84ff180', 'utf8');

const hash = crypto.createHmac('sha1', key).update(data).digest('base64');
const uriEncodedHash = encodeURIComponent(hash);
console.log('Hash: ' + uriEncodedHash);
</code></pre>

<p>Hashing the data in both Java and Node.js gives me the result (URI Encoded) of:</p>

<pre><code>TJJ3xj93m8bfVpGoucluMQqkB0o%3D
</code></pre>

<p>The same Java code would be:</p>

<pre><code>public static void main(String args[]) {
    String data = ""The fault dear Brutus lies not in our stars"";
    String key = ""d134hjeefcgkahvg32ajkdbaff84ff180"";
    String out = null;
    try {
        out = calcMAC(data, key.getBytes());
        System.out.println(URLEncoder.encode(out, ""UTF-8""));
    } catch (Exception e) {
        e.printStackTrace();
    }
}
</code></pre>

<p>Again, we can put anything into 'data' we want.</p>
","50986321","241","<javascript><node.js><hmac><sha>","1","2","1","2018-06-22 10:56:50","50986321","2","","6720576","","2018-06-22 10:42:15","2018-06-22 10:21:05","","2018-06-22 10:56:50","2018-06-22 10:51:10"
"58501315","How to verify a HS256 signed JWT Token created with Keycloak authentication provider on jwt.io","<p>I am trying to verify a HS256 JWT Token generated with locally ran <a href=""https://www.keycloak.org/"" rel=""nofollow noreferrer"">KeyCloak</a> Authentication Provider on <a href=""https://jwt.io"" rel=""nofollow noreferrer"">https://jwt.io</a>. </p>

<p>The KeyCloack instance is running on my local machine inside a docker container. I have applied almost the same steps as described in this answer (which on contrary applies the RS algorithm instead, and works as described): <a href=""https://stackoverflow.com/a/55002225/1534753"">https://stackoverflow.com/a/55002225/1534753</a></p>

<p>My validation procedure is very simple:</p>

<p>1.) Request the token (with Postman) from my local docker KeyCloak instance with:
 POST requesting <a href=""http://localhost:8080/auth/realms/dev/protocol/openid-connect/token"" rel=""nofollow noreferrer"">http://localhost:8080/auth/realms/dev/protocol/openid-connect/token</a></p>

<p>2.) Copy the token contents inside the jwt.io's ""Encoded"" section</p>

<p>3.) I verify that the header and payload are as expected and correct</p>

<p>4.) I copy the client secret from my KeyCloak instance admin dashboard, you can see the reference on the image below:</p>

<p><a href=""https://i.stack.imgur.com/LteGJ.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/LteGJ.png"" alt=""enter image description here""></a></p>

<p>5.) I paste the secret into the ""VERIFY SIGNATURE"" section on jwt.io and the ""Encoded"" token section changes, hence resulting with an invalid signature and a invalid (i.e. different) token.</p>

<p><strong>My core question is what am I missing here? Why does the token change when I apply the expected secret!?</strong> Am I applying the right secret, the one from the client? If I understand JWT infrastructre and standard correctly then It should stay the same if the secret (with the expected algorithm applied) is valid. My reasoning is that something with JWT creation on KeyCloak is specific. I have not touched the HS256 algorithm provider on KeyCloak, everything is used as default with the docker installation guide on using KeyCloak. The settings related to the token and algorithm are setup to use HS256, and the algorithm is specified as expected in the JWT's header section correctly which can be verified after the encoded token is pasted into the jwt.io's page.</p>

<p>I need this to work as I am trying to apply the same JWT validation process inside a .NET Core web API application. I have encountered this whole issue in there, i.e. inside the <code>System.IdentityModel.Tokens.JWT</code> and the <code>JwtSecurityTokenHandle.ValidateSignature</code> method which results with an invalid signature and finally resulting in an exception. </p>

<p>On side note, I am accessing the token with Postman and its Authorize feature the configuration can be seen on the image below:</p>

<p><a href=""https://i.stack.imgur.com/UqFra.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/UqFra.png"" alt=""enter image description here""></a></p>

<p>One more side note is I have a user ""John"" which belongs to my ""Demo"" realm. I use him to request an access token from KeyCloak.</p>
","","","239","<.net-core><oauth><jwt><keycloak><hmac>","0","","0","2019-10-22 09:37:56","","2","","","","","2019-10-22 09:37:56","","",""
"46147441","How to combine HMAC with AES for (python) client-server messenger?","<p>So I am trying to write a small encrypted command line IM messenger which accepts two keys as args. I am not sure how the two keys are meant to work together or which is for what. I am trying to use HMAC and AES together but am unsure of how. 
Please note this is for educational purposes only, I do not intend to try to use this anywhere else. I am having a hard time understanding and any advice or explanations would be so greatly appreciated. I have a working IM messenger already up and running, I need only to figure out the HMAC/AES/keys.</p>

<p>Thank you all,
       ~Maddie</p>
","<p>What you should be doing is using the <em>Encrypt-Then-MAC</em> paradigm. </p>

<p>That means, you are first using the first key to encrypt the message with AES.
Afterwards, you use the second key as an authentication key for the HMAC-SHA256 function to authenticate the <em>ciphertext</em> (the output of the encryption function). Then you concatenate the ciphertext and the HMAC output (called a <em>tag</em>) and transmit it over the wire.</p>

<p>Upon receiving such a message you recalulate the tag from the ciphertext and compare it to the one tranferred. If it is valid, you may decrypt the ciphertext.</p>

<p>Final note: You do not really need to use to seperate keys as an input parameter. If would be fine to just supply one master key and than use that to derive to seperate encryption- and authenctication-keys using a <em>key derivation function</em> like HKDF.</p>
","46150701","238","<python><encryption><client-server><aes><hmac>","0","3","1","2017-09-11 07:51:58","46150701","2","","","","","2017-09-11 02:31:50","","","2017-09-11 07:51:58"
"47806381","HMAC Base64 Authentication?","<p>I have no clue what's even going on in this but I am attempting to use an API and they have yet another different authentication standard called HMAC with Sha384 to base64. </p>

<p>This is the example provided: </p>

<pre><code>class ICObenchAPI {

private $privateKey = 'private-key';
private $publicKey  = 'public-key';
private $apiUrl     = 'https://icobench.com/api/v1/';
public  $result;

public function getICOs($type = 'all', $data = ''){ 
    return $this-&gt;send('icos/' . $type, $data); 
}   
public function getICO($icoId, $data = ''){ 
    return $this-&gt;send('ico/' . $icoId, $data); 
}       
public function getOther($type){ 
    return $this-&gt;send('other/' . $type, ''); 
}

private function send($action, $data){

    $dataJson = json_encode($data);                 
    $sig = base64_encode(hash_hmac('sha384', $dataJson, $this-&gt;privateKey, true));  

    $ch = curl_init($this-&gt;apiUrl . $action);
    curl_setopt($ch, CURLOPT_CUSTOMREQUEST, ""POST""); 
    curl_setopt($ch, CURLOPT_POSTFIELDS, $dataJson);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($ch, CURLOPT_HTTPHEADER, array(
        'Content-Type: application/json',
        'Content-Length: ' . strlen($dataJson),
        'X-ICObench-Key: ' . $this-&gt;publicKey,
        'X-ICObench-Sig: ' . $sig)
    );

    $reply = curl_exec($ch);
    $ff = $reply;
    $reply = json_decode($reply,true);

    if(isset($reply['error'])){
        $this-&gt;result = $reply['error'];
        return false;
    }else if(isset($reply['message'])){
        $this-&gt;result = $reply['message'];
        return true;
    }else if(isset($reply)){
        $this-&gt;result = json_encode($reply);
        return true;
    }else{
        $this-&gt;result = htmlspecialchars($ff);
        return false;
    }
}

public function result(){
    return $this-&gt;result;
}
</code></pre>

<p>}</p>

<p>I'm looking to take the PHP example provided and turn it into a nodeJS script, just really don't know where to start. I've looked at crypto-js and others but just don't comperhend what specifically is happening in the request to make since of what i'm even writing</p>
","<p>Crypto-js is the good way to do.</p>

<p>You need to first encrypt your data and then Base64 it to create a signature used in header</p>

<pre><code>    let dataJSON = JSON.stringify(data);

    let sign = CryptoJS.HmacSHA384(dataJSON, this.privateKey);
    sign = CryptoJS.enc.Base64.stringify(sign);
</code></pre>

<p>I pushed on github a working example : <a href=""https://github.com/ICObench/data-api/blob/master/ICObenchAPI.js"" rel=""nofollow noreferrer"">ICObenchAPI.js</a></p>
","47820852","236","<php><node.js><base64><sha><hmac>","0","1","2","2018-02-10 18:35:00","","0","","2256024","","2017-12-14 06:39:37","2017-12-14 05:24:22","","","2017-12-14 19:35:18"
"47806381","HMAC Base64 Authentication?","<p>I have no clue what's even going on in this but I am attempting to use an API and they have yet another different authentication standard called HMAC with Sha384 to base64. </p>

<p>This is the example provided: </p>

<pre><code>class ICObenchAPI {

private $privateKey = 'private-key';
private $publicKey  = 'public-key';
private $apiUrl     = 'https://icobench.com/api/v1/';
public  $result;

public function getICOs($type = 'all', $data = ''){ 
    return $this-&gt;send('icos/' . $type, $data); 
}   
public function getICO($icoId, $data = ''){ 
    return $this-&gt;send('ico/' . $icoId, $data); 
}       
public function getOther($type){ 
    return $this-&gt;send('other/' . $type, ''); 
}

private function send($action, $data){

    $dataJson = json_encode($data);                 
    $sig = base64_encode(hash_hmac('sha384', $dataJson, $this-&gt;privateKey, true));  

    $ch = curl_init($this-&gt;apiUrl . $action);
    curl_setopt($ch, CURLOPT_CUSTOMREQUEST, ""POST""); 
    curl_setopt($ch, CURLOPT_POSTFIELDS, $dataJson);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($ch, CURLOPT_HTTPHEADER, array(
        'Content-Type: application/json',
        'Content-Length: ' . strlen($dataJson),
        'X-ICObench-Key: ' . $this-&gt;publicKey,
        'X-ICObench-Sig: ' . $sig)
    );

    $reply = curl_exec($ch);
    $ff = $reply;
    $reply = json_decode($reply,true);

    if(isset($reply['error'])){
        $this-&gt;result = $reply['error'];
        return false;
    }else if(isset($reply['message'])){
        $this-&gt;result = $reply['message'];
        return true;
    }else if(isset($reply)){
        $this-&gt;result = json_encode($reply);
        return true;
    }else{
        $this-&gt;result = htmlspecialchars($ff);
        return false;
    }
}

public function result(){
    return $this-&gt;result;
}
</code></pre>

<p>}</p>

<p>I'm looking to take the PHP example provided and turn it into a nodeJS script, just really don't know where to start. I've looked at crypto-js and others but just don't comperhend what specifically is happening in the request to make since of what i'm even writing</p>
","<p>I wrote a Node js wrapper library called <a href=""https://github.com/zbone3/node-icobench"" rel=""nofollow noreferrer"">node-icobench</a>. You are welcome to use it.</p>

<p><code>npm install node-icobench</code></p>

<p>Here is a sneak peek to the HMAC part with a few alterations for the sake of this example:</p>

<pre><code>const crypto = require('crypto');

// Stringify POST data
let jsonData = JSON.stringify(data);

// Create HMAC based on algo and private key
let hmac = crypto.createHmac('sha384', privateKey);

// Create HMAC Digest of json data
hmac.update(jsonData);

// return Base64 encoding of HMAC
let signedData = hmac.digest('base64');
</code></pre>
","48724239","236","<php><node.js><base64><sha><hmac>","0","0","2","2018-02-10 18:35:00","","0","","2256024","","2017-12-14 06:39:37","2017-12-14 05:24:22","","","2018-02-10 18:35:00"
"47965593","Python3 Endpoint Mismatch on Gemini Sandbox API","<p>I'm building an algorithmic trading application in Python3 for currency trading.  I'm trying to call the Gemini Exchange Sandbox API in Python3 to get current balances.  Each time I send my post request, I get back an error as follows:</p>

<pre><code>{
 ""result"":""error"",
 ""reason"":""EndpointMisatch"",
 ""message"":""EndpointMisatch""
}
</code></pre>

<p>In response to this, I altered my endpoint to the production url of '<a href=""https://api.gemini.com/v1/balances"" rel=""nofollow noreferrer"">https://api.gemini.com/v1/balances</a>' and that results in an InvalidSignature error.  </p>

<p>I have deleted my API from the sandbox and created a new one ensuring I have fund manager and trader access both with and without heartbeats to no avail. The documentation is here: <a href=""https://docs.sandbox.gemini.com/rest-api/?python#error-codes"" rel=""nofollow noreferrer"">https://docs.sandbox.gemini.com/rest-api/?python#error-codes</a>  </p>

<p>Here is my function:
    import requests 
    import json
    import time
    import base64
    import hmac
    import hashlib</p>

<pre><code>def checkBalance(self):
    '''
        function calls private gemini method
        to return account balances.  Update with
        production or sandbox keys/secrets depending on 
        environment running.
    '''
    #set increment for unique session
    nonce = int(round(time.time()*1000))

    #sandbox api endpoint
    url = 'https://api.sandbox.gemini.com/v1/balances'

    #build the dict payload object
    payload = {
        'request':'v1/balances',
        'nonce': nonce
    }

    #endcode payload as a json object for hashing
    payload = str.encode(json.dumps(payload))

    #base64 encode the payload
    b64 = base64.b64encode(payload)

    #create the signature using sandbox secret and encoded payload in sha384 hash
    signature = hmac.new(str.encode(self.s_secret), b64, hashlib.sha384).hexdigest()

    #build headers as required for contacting api endpoint
    headers = {
        'Content-Type':'text/plain',
        'X-GEMINI-APIKEY': self.s_key,
        'X-GEMINI-PAYLOAD': b64,
        'X-GEMINI-SIGNATURE': signature
    }

    #retrieve data from POST request as response
    response = requests.request(""POST"", url, headers=headers)

    #return text of response
    return response.text
</code></pre>

<p>I'm new to working with the b64, hmac and hashlib libraries.  Thank you in advance for your help.</p>
","<p>After much testing, I found the problem.  My payload data dictionary had the endpoint listed as 'v1/balances' instead of '/v1/balances'.  My new payload data looks like this (created a function to deal with nonce):</p>

<pre><code>payload = dict(request = '/v1/balances', nonce = str(self.nonce()))
</code></pre>

<p>When I updated the payload with this info and posted the data, my sandbox response appears as follow:</p>

<pre><code>[{
    'type': 'exchange', 
    'currency': 'BTC', 
    'amount': '1000', 
    'available': '1000', 
    'availableForWithdrawal': '1000'
 }, 
 {
    'type': 'exchange', 
    'currency': 'USD', 
    'amount': '100000.00', 
    'available': '100000.00', 
    'availableForWithdrawal': '100000.00'
 }, 
 {
    'type': 'exchange', 
    'currency': 'ETH', 
    'amount': '20000', 
    'available': '20000', 
    'availableForWithdrawal': '20000'
}]
</code></pre>
","47972919","236","<python-3.x><hmac><algorithmic-trading><hashlib>","0","1","1","2017-12-26 00:26:48","47972919","0","","1909027","","2017-12-25 04:09:18","2017-12-25 03:58:31","","","2017-12-26 00:26:48"
"38994575","How do I find out the version of CryptoJS that is installed with Postman?","<p>I need to know which version of CryptoJS is installed with Postman so I can accurately compare .NET and CryptoJS HMAC256 results.</p>
","","","235","<postman><hmac><cryptojs>","0","","0","2016-08-17 10:50:12","","2","","","","","2016-08-17 10:50:12","","",""
"39456369","Check for errors in TLS implementation","<p>I'm developing a small TLS client, which is used together with SMTP. The handshake is working well until my client sends the encrypted finished message. So Client Hello, Server Hello, Certificate, Server Hello Done, Client Key Exchange and Change Cipher Spec are working. As chiper suite I'm using TLS_RSA_WITH_AES_256_CBC_SHA256.</p>

<p>My problem is, that I receive the ""Bad Record MAC"" alert from the server after sending the finished message. But I have no idea where I can start to search for the error. I've double checked all my functions and readed the RFC twice.</p>

<p>In my opionion one of the following points can cause the ""Bad Record MAC"" alert:</p>

<ul>
<li>The master-secret is wrong.</li>
<li>The client_write_MAC_key is wrong.</li>
<li>The client_write_encryption_key is wrong.</li>
<li>The P_hash function is wrong.</li>
<li>The PRF function is wrong.</li>
<li>The MAC function is wrong.</li>
<li>The AES encryption doesn't work correctly.</li>
<li>The hash of the Finished Message is wrong.</li>
</ul>

<p>Has anyone an idea what I can do to find the issue. Are there any tools to check if the master-secret, MAC and key calculations are correct? Or is it possible to decrypt the content with Wireshark? Note that I'm not having the private key of the server.</p>
","<p>I've setted up an local test server with OpenSSL as Steffen Ullrich suggested. I've done a detailed analytics of the ""debug output"" which was provided by Wireshark.</p>

<p>I was able to solve a problem with my padding. But I'm still getting a <code>Bad Record MAC</code> alert. Like the debug output says, the MAC is incorrect (message <code>ssl_decrypt_record: mac failed</code>).</p>

<p>Some more information about the connection and the debug output:</p>

<ol>
<li>The pre-master-secret, master-secret and all the keys (client write MAC key, server write MAC key, client write key, server write key, client write IV, server write IV) are correct. I've compared these from my software with them of the debug output. So everything until the <code>Encrypted Finished Message</code> is correct.</li>
<li>The server / Wireshark can decrypt the <code>Encrypted Finished Message</code> successfuly.</li>
<li>The server / Wireshark detects the padding correctly.</li>
<li>The server / Wireshark ""skips"" the IV and only shows the <code>Finished Message</code> and the MAC in the line <code>Plaintext[64]:</code></li>
</ol>

<p>In my opinion only two things can cause this error:</p>

<ol>
<li>The MAC is calculated wrong.</li>
<li>The hash (verify_data) from the handshake messages are wrong.</li>
</ol>

<p>My <code>Encrypted Finished Message</code> has a full length of 80 bytes and the following structure:</p>

<pre><code>struct
{
    // TLS record
    ContentType type;
    ProtocolVersion version;
    uint16 length;
    // TLS handshake and content (encrypted)
    uint8 IV[16];
    struct
    {
        HandshakeType msg_type;
        uint24 length;
        uint8 verify_data[12];
    } content;
    uint8 MAC[32];
    uint8 padding[15];
    uint8 paddingLength;
} FinishedMessage;
</code></pre>

<p>The content looks for example like the following:</p>

<pre><code>     00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f
0000 16 03 03 00 50 XX XX XX XX XX XX XX XX XX XX XX
0010 XX XX XX XX XX 14 00 00 0C YY YY YY YY YY YY YY
0020 YY YY YY YY YY ZZ ZZ ZZ ZZ ZZ ZZ ZZ ZZ ZZ ZZ ZZ
0030 ZZ ZZ ZZ ZZ ZZ ZZ ZZ ZZ ZZ ZZ ZZ ZZ ZZ ZZ ZZ ZZ
0040 ZZ ZZ ZZ ZZ ZZ 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F
0050 0F 0F 0F 0F 0F
</code></pre>

<p>Where XX represents the randomly generated IV and YY the verify_data and ZZ the MAC of the message like described in the RFC.</p>

<p>The verify_data contains the first 12 bytes of the SHA-256 hash. The hash is computed by the messages <code>Client Hello</code>, <code>Server Hello</code>, <code>Certificate</code> (from Server), <code>Server Hello Done</code> and <code>Client Key Exchange</code>. For hashing the full messages without the record header (first 5 bytes) are used.</p>

<p>The MAC is computed by the client write MAC key and the message. As sequence number the number 0 is used. The <code>fragment</code> which is used for calculating the MAC only contains the <code>msg_type</code>, <code>length</code> and <code>verify_data</code> (see structure <code>content</code> above).</p>

<p>Has anyone an idea how I can find what is wrong with my MAC?</p>
","39477500","233","<security><ssl><aes><rsa><hmac>","0","0","1","2016-09-13 19:20:23","39477500","3","","","","","2016-09-12 18:17:07","","","2016-09-13 19:20:23"
"29625904","How does this PHP function should look in Ruby? HMAC MD5","<p>I'm working on a payment integration and I've got an example code in PHP and trying to make it work in Ruby. So far with little success. Could someone check my implementation and fix if I'm doing something wrong? Thanks.</p>

<p>PHP code:</p>

<pre class=""lang-php prettyprint-override""><code>/*
* HMAC HASH creation
* RFC 2104
* 
http://www.ietf.org/rfc/rfc2104.txt
* 
* @param string $key Secret key for encryption
* @param string $data String to encode
*/
function hmac($key, $data) {
 $b = 64; // byte length for md5

 if (strlen($key) &gt; $b) {
   $key = pack(""H*"", md5($key));
 }

 $key = str_pad($key, $b, chr(0x00));
 $ipad = str_pad('', $b, chr(0x36));
 $opad = str_pad('', $b, chr(0x5c));
 $k_ipad = $key ^ $ipad;
 $k_opad = $key ^ $opad;

 return md5($k_opad . pack(""H*"", md5($k_ipad . $data)));
}
</code></pre>

<p>And my Ruby code:</p>

<pre class=""lang-ruby prettyprint-override""><code>    #Calculate HMAC MD5 PayU hash for order.
    def hmac_calculation(key, data)
      b = 64

      if key.length &gt; b 
        key = Digest::MD5.hexdigest(key)
        key = key.pack(""H*"")
      end

      key = key.ljust(b, 0x00.chr)
      ipad = ''.ljust(b, 0x36.chr)
      opad = ''.ljust(b, 0x5c.chr)

      k_ipad = key ^ ipad
      k_opad = key ^ opad

      return Digest::MD5.hexdigest(k_opad + Digest::MD5.hexdigest(k_ipad + data).pack('H*'))    

    end
</code></pre>

<p>-- UPDATED --</p>

<p><strong>Source string:</strong></p>

<p>7P0499016123456192013-07-08 10:50:367sku000226Loremipsumdolorsitamet4112011102103HUF158CCVISAMC41010</p>

<p><strong>Secret key:</strong></p>

<p>|n4A8~!3T8^3[8%I?8@Q</p>

<p><strong>Expected result:</strong></p>

<p>5142968ed89754e8d3a9b9a2469d21f2</p>

<p>I also got this site as the reference point however the above example does not match it.
<a href=""http://hash.online-convert.com/md5-generator"" rel=""nofollow"">http://hash.online-convert.com/md5-generator</a></p>
","<p>There is no reason to write your own implementation of HMAC and many, many reasons not to. Just use the secure and well-tested implementation supplied by the <a href=""http://ruby-doc.org/stdlib-2.1.0/libdoc/openssl/rdoc/OpenSSL/HMAC.html"" rel=""nofollow noreferrer"">OpenSSL module</a>:</p>

<pre><code>require ""openssl""

key = ""key""
data = ""Hello""

digest = OpenSSL::Digest.new('md5')
hmac = OpenSSL::HMAC.hexdigest(digest, key, data)
</code></pre>

<p>That's literally all you need.</p>
","29627411","230","<php><ruby><hmac><payu>","1","5","2","2018-08-08 14:42:14","29627411","4","","635508","","2015-04-14 14:01:51","2015-04-14 11:13:37","","2018-08-08 14:42:14","2015-04-14 12:32:09"
"29625904","How does this PHP function should look in Ruby? HMAC MD5","<p>I'm working on a payment integration and I've got an example code in PHP and trying to make it work in Ruby. So far with little success. Could someone check my implementation and fix if I'm doing something wrong? Thanks.</p>

<p>PHP code:</p>

<pre class=""lang-php prettyprint-override""><code>/*
* HMAC HASH creation
* RFC 2104
* 
http://www.ietf.org/rfc/rfc2104.txt
* 
* @param string $key Secret key for encryption
* @param string $data String to encode
*/
function hmac($key, $data) {
 $b = 64; // byte length for md5

 if (strlen($key) &gt; $b) {
   $key = pack(""H*"", md5($key));
 }

 $key = str_pad($key, $b, chr(0x00));
 $ipad = str_pad('', $b, chr(0x36));
 $opad = str_pad('', $b, chr(0x5c));
 $k_ipad = $key ^ $ipad;
 $k_opad = $key ^ $opad;

 return md5($k_opad . pack(""H*"", md5($k_ipad . $data)));
}
</code></pre>

<p>And my Ruby code:</p>

<pre class=""lang-ruby prettyprint-override""><code>    #Calculate HMAC MD5 PayU hash for order.
    def hmac_calculation(key, data)
      b = 64

      if key.length &gt; b 
        key = Digest::MD5.hexdigest(key)
        key = key.pack(""H*"")
      end

      key = key.ljust(b, 0x00.chr)
      ipad = ''.ljust(b, 0x36.chr)
      opad = ''.ljust(b, 0x5c.chr)

      k_ipad = key ^ ipad
      k_opad = key ^ opad

      return Digest::MD5.hexdigest(k_opad + Digest::MD5.hexdigest(k_ipad + data).pack('H*'))    

    end
</code></pre>

<p>-- UPDATED --</p>

<p><strong>Source string:</strong></p>

<p>7P0499016123456192013-07-08 10:50:367sku000226Loremipsumdolorsitamet4112011102103HUF158CCVISAMC41010</p>

<p><strong>Secret key:</strong></p>

<p>|n4A8~!3T8^3[8%I?8@Q</p>

<p><strong>Expected result:</strong></p>

<p>5142968ed89754e8d3a9b9a2469d21f2</p>

<p>I also got this site as the reference point however the above example does not match it.
<a href=""http://hash.online-convert.com/md5-generator"" rel=""nofollow"">http://hash.online-convert.com/md5-generator</a></p>
","<p>After all I tried this again and it seems the original requirement from PayU was wrong. Simply no solution matched their expected result.</p>

<pre><code>    require 'openssl'

    key = '|n4A8~!3T8^3[8%I?8@Q'

    string = '7P0499016123456192013-07-08 10:50:367sku000226Loremipsumdolorsitamet4112011102103HUF158CCVISAMC41010'

    digest = OpenSSL::Digest.new('md5')

    hmac = OpenSSL::HMAC.hexdigest(digest, key, string)

    puts hmac # Result = 7e84e5a7ceff25a8400ecf9608aed731
</code></pre>
","38327216","230","<php><ruby><hmac><payu>","1","0","2","2018-08-08 14:42:14","29627411","4","","635508","","2015-04-14 14:01:51","2015-04-14 11:13:37","","","2016-07-12 11:11:34"
"35090706","Timing safe comparison of strings","<p>Does Tcl have any built in function for comparing strings in a timing safe manner, so no secrets are leaked because of short circuits?</p>

<p><code>string equal</code> starts from the left and returns on the first difference, so it's not suited to compare secrets.</p>

<p>Specifically, I want to compare two <code>sha256</code> HMACs. Double HMAC would also solve the leakage, but I want to find a timing safe comparison function.</p>
","<p>An option is to use a usual bitwise <code>or</code> combined with a per character <code>xor</code>.</p>

<pre><code># Timing safe comparision of two hashes.
# 
# http://stackoverflow.com/q/35090706/2373138
proc hash_equals {hash1 hash2} {
    # Get length of strings a single time.
    set hash1_length [string length $hash1]
    set hash2_length [string length $hash2]

    # If the length is not equal, return false.
    # Short circuit if they have different lengths.
    # Length of the hashes is anyway known and length information
    # will always be leaked because of caching effects.
    if {$hash1_length != $hash2_length} {
        return 0
    }

    set result 0

    # Loop through the entire string and compare each single character.
    # We compare using XOR to avoid timing effects on if branches.
    for {set i 0} {$i &lt; $hash1_length} {incr i} {
        set char1 [string index $hash1 $i]
        set char2 [string index $hash2 $i]

        # Convert character to its ordinal value.
        set ord1 [scan $char1 %c]
        set ord2 [scan $char2 %c]

        # Wil be 0 as long as they're the same.
        set xor [expr {$ord1 ^ $ord2}]

        # Once $result is not equal to 0, it will stay not equals 0.
        set result [expr {$result | $xor}]
    }

    # Strings are exactly equal if $result is exactly 0.
    return [expr {$result == 0}]
}
</code></pre>
","35091768","230","<string><security><tcl><hmac>","2","1","3","2016-01-31 08:58:05","35112021","0","","","","","2016-01-29 17:40:16","","","2016-01-29 18:43:42"
"35090706","Timing safe comparison of strings","<p>Does Tcl have any built in function for comparing strings in a timing safe manner, so no secrets are leaked because of short circuits?</p>

<p><code>string equal</code> starts from the left and returns on the first difference, so it's not suited to compare secrets.</p>

<p>Specifically, I want to compare two <code>sha256</code> HMACs. Double HMAC would also solve the leakage, but I want to find a timing safe comparison function.</p>
","<p>This one is a bit faster if the strings are equal, but it doesn't matter time-wise if the first difference is at the beginning or at the end.</p>

<pre><code>proc compare {a b} {
    set ary($b) 0
    set ary($a) 1
    set ary($b)
}
</code></pre>

<p>This works too (it's still a hash table):</p>

<pre><code>proc compare {a b} {
    dict get [dict create $b 0 $a 1] $b
}
</code></pre>
","35093194","230","<string><security><tcl><hmac>","2","0","3","2016-01-31 08:58:05","35112021","0","","","","","2016-01-29 17:40:16","","2016-01-29 21:36:34","2016-01-29 20:10:49"
"35090706","Timing safe comparison of strings","<p>Does Tcl have any built in function for comparing strings in a timing safe manner, so no secrets are leaked because of short circuits?</p>

<p><code>string equal</code> starts from the left and returns on the first difference, so it's not suited to compare secrets.</p>

<p>Specifically, I want to compare two <code>sha256</code> HMACs. Double HMAC would also solve the leakage, but I want to find a timing safe comparison function.</p>
","<p>Assuming that you are dealing with two strings of the same length (e.g., HMACs) then you can just apply a comparison to each character and accumulate the result:</p>

<pre><code>proc safeequal {s1 s2} {
    set equal 1
    foreach c1 [split $s1 """"] c2 [split $s2 """"] {
        set equal [expr {$equal &amp; ($c1 eq $c2)}]
    }
    return $equal
}
</code></pre>

<p>Now, there might be some timing effects due to <code>split</code> doing character sharing, but they'll be <em>really</em> difficult to exploit to determine the content of the strings as the timings won't be identifiable with a position and will in any case be down in the noise. I can't make my system anywhere near quiet enough for me to see a difference even between comparing two strings (of about HMAC length) that are equal at every character and comparing two that are different at every character.</p>

<pre><code>% time {safeequal qwertyuiopasdfghjklzxcvbnm qwertyuiopasdfghjklzxcvbnm} 100000
9.847818689999999 microseconds per iteration
% time {safeequal qwertyuiopasdfghjklzxcvbnm QWERTYUIOPASDFGHJKLZXCVBNM} 100000
9.78685247 microseconds per iteration
% time {safeequal qwertyuiopasdfghjklzxcvbnm qwertyuiopasdfghjklzxcvbnm} 100000
9.72245421 microseconds per iteration
% time {safeequal qwertyuiopasdfghjklzxcvbnm QWERTYUIOPASDFGHJKLZXCVBNM} 100000
9.88214891 microseconds per iteration
</code></pre>
","35112021","230","<string><security><tcl><hmac>","2","2","3","2016-01-31 08:58:05","35112021","0","","","","","2016-01-29 17:40:16","","","2016-01-31 08:58:05"
"31919154","HMAC value not consistent in Python and PHP","<p>T am trying to use HMAC to hash a data string but for some reason my PHP and Python scripts results are not consistent... I can't figure out why.</p>

<p>The one that is technically working is the Python script and although I get results from PHP script, the hex returned is incorrect.</p>

<p>UPDATE -- one thing i'v noticed is if i am using a single line for the data then the results are identical. The mismatch seems to occur when there is multi-line data.</p>

<p>Python demo script here
<a href=""https://repl.it/BBDH/2"" rel=""nofollow"">https://repl.it/BBDH/2</a></p>

<p><strong>Result:</strong></p>

<blockquote>
  <p>f54617eadc7c037b4ed484103bb21426994110a9</p>
</blockquote>

<pre class=""lang-none prettyprint-override""><code>import hashlib
import hmac
import base64

key = b""M0u$t4fa@1Kh-Key""

csr = """"""-----BEGIN NEW CERTIFICATE REQUEST-----
MIICtzCCAZ8CAQAwcjELMAkGA1UEBhMCQVUxETAPBgNVBAgMCFZpY3RvcmlhMRIw
EAYDVQQHDAlNZWxib3VybmUxDzANBgNVBAoMBk1LVEVTVDELMAkGA1UECwwCSVQx
HjAcBgNVBAMMFWRuc3Rlc3QzLnNzbHRlY2hzLmNvbTCCASIwDQYJKoZIhvcNAQEB
BQADggEPADCCAQoCggEBAM1Ik2SS1F4NgizKXCqpiliR/c285HtcLKFD6OcJO6d6
v8n+1B7R1ovUqRyoM4qsLAVVHshvsuqxbD7sLmcEfh/akee+CGLqgSNSw913IBWL
WRtBRhVTd6gvTQY4KqpEgRShnua179Cbb/cQLsFhHhog/IfD0JWwdRWLqn3rzQcI
xzAsOkTJSarAt/QPS5fq1Hk978iQ0QAxtEssaX+0Xcq7ZyJGkHRyW3cBoynSQAYz
RNGBFTFB+z/qiAkKWwRs61cnKub9Grz6Adw931zuYICW0EaWdBGdc15cUkvI6RF4
xqhzmHBTZLQZDcP9vYrE/biVvX2GVNKpO1hd0i7iOTcCAwEAAaAAMA0GCSqGSIb3
DQEBCwUAA4IBAQBPmct14B0f7HkMar8Ogf1wgo7jXyFytW7tfj3exTsyBC/5ShGv
1Xx//H8I5ecb5N6EflyXmaFiWM4ybQduhVyKzNxlU8i5ug/msdpxQhj3rZ7WO6Xb
O8b5oj5e/8V1RmmsjC9dDFA/A8/JgAbrOn2CtCJrgRtl1LFBtaFRonfaRbuzcVSE
e1qdKoPY2UNK7cd3Hv/pkkorUJd89YREFZatyvU/b89fjNaPzjvtljxGadeIX5WO
7sQwMyHCSknWZPY4BYaiMf6jZ8TjXOCyIHQ3bdiDSiJlUEXvgz2yhF6Uue6aTvhR
Q85mPbtxXP+JXiZgSuT0Q6n7qN1b1mbZJgwk
-----END NEW CERTIFICATE REQUEST-----"""""".encode('utf-8')

hashed = hmac.new(key, csr, digestmod=hashlib.sha1).hexdigest()
print(""HMAC (hex) ="", hashed)
</code></pre>

<p>PHP demo script here
<a href=""https://repl.it/BBDF/2"" rel=""nofollow"">https://repl.it/BBDF/2</a></p>

<p><strong>Result:</strong></p>

<blockquote>
  <p>e978d0d10b814e486592ed608b5f16d095a9affa</p>
</blockquote>

<pre class=""lang-none prettyprint-override""><code>$key = 'M0u$t4fa@1Kh-Key';
$data = '-----BEGIN NEW CERTIFICATE REQUEST-----
MIICtzCCAZ8CAQAwcjELMAkGA1UEBhMCQVUxETAPBgNVBAgMCFZpY3RvcmlhMRIw
EAYDVQQHDAlNZWxib3VybmUxDzANBgNVBAoMBk1LVEVTVDELMAkGA1UECwwCSVQx
HjAcBgNVBAMMFWRuc3Rlc3QzLnNzbHRlY2hzLmNvbTCCASIwDQYJKoZIhvcNAQEB
BQADggEPADCCAQoCggEBAM1Ik2SS1F4NgizKXCqpiliR/c285HtcLKFD6OcJO6d6
v8n+1B7R1ovUqRyoM4qsLAVVHshvsuqxbD7sLmcEfh/akee+CGLqgSNSw913IBWL
WRtBRhVTd6gvTQY4KqpEgRShnua179Cbb/cQLsFhHhog/IfD0JWwdRWLqn3rzQcI
xzAsOkTJSarAt/QPS5fq1Hk978iQ0QAxtEssaX+0Xcq7ZyJGkHRyW3cBoynSQAYz
RNGBFTFB+z/qiAkKWwRs61cnKub9Grz6Adw931zuYICW0EaWdBGdc15cUkvI6RF4
xqhzmHBTZLQZDcP9vYrE/biVvX2GVNKpO1hd0i7iOTcCAwEAAaAAMA0GCSqGSIb3
DQEBCwUAA4IBAQBPmct14B0f7HkMar8Ogf1wgo7jXyFytW7tfj3exTsyBC/5ShGv
1Xx//H8I5ecb5N6EflyXmaFiWM4ybQduhVyKzNxlU8i5ug/msdpxQhj3rZ7WO6Xb
O8b5oj5e/8V1RmmsjC9dDFA/A8/JgAbrOn2CtCJrgRtl1LFBtaFRonfaRbuzcVSE
e1qdKoPY2UNK7cd3Hv/pkkorUJd89YREFZatyvU/b89fjNaPzjvtljxGadeIX5WO
7sQwMyHCSknWZPY4BYaiMf6jZ8TjXOCyIHQ3bdiDSiJlUEXvgz2yhF6Uue6aTvhR
Q85mPbtxXP+JXiZgSuT0Q6n7qN1b1mbZJgwk
-----END NEW CERTIFICATE REQUEST-----';
$hmac = hash_hmac('sha1', $data, $key);
echo ""HMAC (hex) = "".$hmac;
</code></pre>
","<p>Shevron was right: line ending are differents.</p>

<p>Just add: <code>$data = str_replace(""\r\n"", ""\n"", $data);</code> before computing the hash.</p>

<p>Here is the corrected rept.it file.
<a href=""https://repl.it/BBDF/4"" rel=""nofollow"">https://repl.it/BBDF/4</a></p>
","31921350","229","<php><python><hmac>","0","2","1","2015-08-10 14:05:22","31921350","1","","3436467","","2015-08-10 13:22:46","2015-08-10 12:07:56","","2015-08-10 14:05:22","2015-08-10 13:50:05"
"53662669","Bittrex API Invalid Signature Response With Python","<p>I am trying to view my open orders through the Bittrex API but all I get is an <code>INVALID_SIGNATURE</code> response.</p>

<p>I'm using Python 3.6. Here is my code:</p>

<pre><code>import time
import hmac
import hashlib
import requests

apikey = '12345'
apisecret = '56789'

nonce = str(time.time())

url = 'https://bittrex.com/api/v1.1/market/getopenorders?&amp;apikey=' + apikey + '&amp;nonce=' + nonce

signature = hmac.new(apisecret.encode(), url.encode(), hashlib.sha512).hexdigest()
hdrs = {'apisign' : signature}

r = requests.get(url, headers = hdrs)
print(r.json())
</code></pre>

<p>I'm expecting a response like:</p>

<pre><code>{
    ""success"" : true,
    ""message"" : """",
    ""result"" : [{
            ""Uuid"" : null,
            ""OrderUuid"" : ""09aa5bb6-8232-41aa-9b78-a5a1093e0211"",
            ""Exchange"" : ""BTC-LTC"",
            ""OrderType"" : ""LIMIT_SELL"",
            ""Quantity"" : 5.00000000,
                …
        }
    ]
}
</code></pre>

<p>But instead I get:</p>

<pre><code>{'success': False, 'message': 'INVALID_SIGNATURE', 'result': None}
</code></pre>

<p>I know my keys are correct, and using purposely incorrect keys changes the INVALID_SIGNATURE response to 
APIKEY_INVALID. I've tried to pull other information such as ""getbalance"", ""getorderhistory"", etc., but they all give the same result.</p>

<p>I've found many variations of the code above, but each one I try ends with the same result. I'm sure I'm just missing something simple but after a week of searching, I still don't know why it isn't working.</p>

<p>Any insight is appreciated.</p>

<p>Thanks.</p>
","","","228","<api><python-requests><hmac><sign>","1","","0","2018-12-07 03:10:24","","5","","","","","2018-12-07 03:10:24","","",""
"45230971","how do I sync user token in multi dispatcher setting","<p>Seeking your advise on best practice on the below two use cases :
1st Use case:
I have set up of two Dispatchers (D1 and D2)and two publishers(P1 and P2) with TarMK. D1 always send requests to P1 and D2 always send requests to P2. Load balancer sends request to either D1 or D2.</p>

<p>2nd User case:
I've another setup where D1 can send request either P1 or P2 and D2 can send request either P1 or P2. Load balancer sends request to either D1 or D2.</p>

<p>In this application user token is created on user successful authentication. This token is created based on key located at /etc/key. The key located under /etc/key is different for both P1 and P2. </p>

<p>Given this set-up, a user is logged in to P1 and if P1 goes down then 
1)How can I redirect user to P2 without asking user to login. 
2)How can I replicate user token to P2? </p>

<p>I do not want to use revers replication. What is the best practice of such design? Do I need to keep same key /etc/key in both P1 and P2? </p>
","<blockquote>
  <p>Do I need to keep same key /etc/key in both P1 and P2?</p>
</blockquote>

<p>Short answer: <strong>Yes</strong></p>

<p><strong>Details</strong></p>

<p>AEM uses <a href=""https://docs.adobe.com/docs/en/aem/6-3/administer/security/encapsulated-token.html"" rel=""nofollow noreferrer"">Encapsulated Tokens</a> to support authenticated users across publisher farms. </p>

<p>Both of your scenarios to use one dispatcher per publisher or cluster publishers across each dispatcher should work in case of failure if you follow the recommendation of synchronising the HMAC key across all your publishers in the cluster.</p>

<p>This can be achieved by following the instructions <a href=""https://docs.adobe.com/docs/en/aem/6-3/administer/security/encapsulated-token.html#Configuring%20the%20Encapsulated%20Token"" rel=""nofollow noreferrer"">here</a></p>

<p>AEM is designed around stateless authentication but the token needs to be encrypted and decrypted by same HMAC key which is stored under <code>/etc/key</code> path. Unless you synchronise these keys, there is no way for one instance to understand the token from another instance. This is a design/feature of AEM authentication.</p>
","45276913","226","<authentication><aem><hmac>","1","1","1","2017-07-24 12:19:45","45276913","0","","797375","","2017-07-24 09:28:05","2017-07-21 06:55:12","","2017-07-24 12:19:45","2017-07-24 09:27:20"
"31509210","Matching Square Webhook signature in Ruby (on Rails)","<p>I am trying to match the X-Square-Signature header as documented here: <a href=""https://docs.connect.squareup.com/api/connect/v1/#validating-notifications"" rel=""nofollow"">https://docs.connect.squareup.com/api/connect/v1/#validating-notifications</a></p>

<p>I am currently using OpenSSL::HMAC to generate the digest but things seem to be incorrect.</p>

<pre><code>string_to_sign = ""#{request.url}#{param_hash.to_json}""
header_signature = request.headers[""X-Square-Signature""]

# split into multiple lines for clarity
digest = OpenSSL::Digest.new('sha1')
hmac = OpenSSL::HMAC.digest(digest, ENV[""SIGNATURE_KEY""], string_to_sign)

# stripping the newline off the end
hmac_64 = Base64.encode64(hmac).strip
</code></pre>

<p>For some reason I am getting a drastically different digest, despite following the instructions provided in the API docs above. My calculation of the digest seems to line up with their python example as well (<a href=""https://github.com/square/connect-api-examples/blob/master/connect-examples/v1/webhooks.py#L75-L87"" rel=""nofollow"">https://github.com/square/connect-api-examples/blob/master/connect-examples/v1/webhooks.py#L75-L87</a>).</p>

<p>I have verified the string_to_sign value is identical to the pattern I am supposed to follow, and when I manually craft a post it works, but I am generating my signature through this same method so of course it lines up.</p>

<p>Are there any particulars to the digest/signature calculation process I could be overlooking?</p>
","<p>It sounds like you're trying to replicate the example in the Square docs.  You mentioned you verified that <code>string_to_sign</code> is <code>http://www.example.com{""merchant_id"":""JGHJ0343"",""event_type"":""PAYMENT_UPDATED"",""entity_id"":""Jq74mCczmFXk1tC10GB""}</code>, but have you verified that the environment variable <code>SIGNATURE_KEY</code> is <code>EXAMPLE_SECRET_123</code> as in the docs?</p>

<p>Your code as written with the values substituted and setting the environment variable computes the hash as given in the example: <code>DBP9woNqJpO4d4/ZFE7xveLIGPU=</code></p>
","31520143","225","<ruby-on-rails><ruby><webhooks><hmac><square-connect>","0","0","2","2018-07-06 06:41:25","31522800","0","","3111788","","2018-07-06 06:41:25","2015-07-20 05:13:17","","","2015-07-20 15:13:36"
"31509210","Matching Square Webhook signature in Ruby (on Rails)","<p>I am trying to match the X-Square-Signature header as documented here: <a href=""https://docs.connect.squareup.com/api/connect/v1/#validating-notifications"" rel=""nofollow"">https://docs.connect.squareup.com/api/connect/v1/#validating-notifications</a></p>

<p>I am currently using OpenSSL::HMAC to generate the digest but things seem to be incorrect.</p>

<pre><code>string_to_sign = ""#{request.url}#{param_hash.to_json}""
header_signature = request.headers[""X-Square-Signature""]

# split into multiple lines for clarity
digest = OpenSSL::Digest.new('sha1')
hmac = OpenSSL::HMAC.digest(digest, ENV[""SIGNATURE_KEY""], string_to_sign)

# stripping the newline off the end
hmac_64 = Base64.encode64(hmac).strip
</code></pre>

<p>For some reason I am getting a drastically different digest, despite following the instructions provided in the API docs above. My calculation of the digest seems to line up with their python example as well (<a href=""https://github.com/square/connect-api-examples/blob/master/connect-examples/v1/webhooks.py#L75-L87"" rel=""nofollow"">https://github.com/square/connect-api-examples/blob/master/connect-examples/v1/webhooks.py#L75-L87</a>).</p>

<p>I have verified the string_to_sign value is identical to the pattern I am supposed to follow, and when I manually craft a post it works, but I am generating my signature through this same method so of course it lines up.</p>

<p>Are there any particulars to the digest/signature calculation process I could be overlooking?</p>
","<p>I'm not sure if this is the source of your problem, but you should use <code>request.raw_post</code> instead of <code>param_hash.to_json</code>. The request body is a json object and there is no canonical ordering of attributes on a json object. When you convert the param hash back to json, there's no guarantee that the attributes are in the same order as in the original request body.</p>

<p>Try again using</p>

<pre><code>string_to_sign = ""#{request.url}#{request.raw_post}""
</code></pre>
","31522800","225","<ruby-on-rails><ruby><webhooks><hmac><square-connect>","0","1","2","2018-07-06 06:41:25","31522800","0","","3111788","","2018-07-06 06:41:25","2015-07-20 05:13:17","","","2015-07-20 17:33:10"
"48747911","Can't write Node.js analog to PHP hash checking","<p>Following PHP lines works great, but I can't do such in Node</p>

<pre><code>$secret_key = hash('sha256', XXXX, true);
$hash = hash_hmac('sha256', YYYY, $secret_key);
</code></pre>

<p>As documentation sais hash() returns raw binary data, but it seems like utf8 string. Trying to do such in Node.js</p>

<pre><code>const secret = crypto.createHash('sha256')
const secret_key = secret.update(XXXX).digest('utf8')

const hmac = crypto.createHmac('sha256', secret_key)
const result = hmac.update(YYYY).digest('hex')
</code></pre>

<p>So PHP's <code>$hash</code> and Node.js <code>result</code> are not the same. Have tried secret key with 'hex' with no success. How to reproduce it in Node exactly as in PHP?</p>
","<p>I guess your mistake is making node export your secret key as ""utf8"" instead of a hexadecimal representation.</p>

<p>In PHP your key seems to be presented as hex values as well.</p>

<p>Try using ""hex"" in the first case as well and see what happens:</p>

<pre><code>const secret = crypto.createHash('sha256')
const secret_key = secret.update(XXXX).digest('hex')

const hmac = crypto.createHmac('sha256', secret_key)
const result = hmac.update(YYYY).digest('hex')
</code></pre>
","48748068","225","<php><node.js><hash><sha256><hmac>","0","0","2","2018-02-12 13:53:09","48748102","0","1","","","","2018-02-12 13:42:16","","","2018-02-12 13:51:36"
"48747911","Can't write Node.js analog to PHP hash checking","<p>Following PHP lines works great, but I can't do such in Node</p>

<pre><code>$secret_key = hash('sha256', XXXX, true);
$hash = hash_hmac('sha256', YYYY, $secret_key);
</code></pre>

<p>As documentation sais hash() returns raw binary data, but it seems like utf8 string. Trying to do such in Node.js</p>

<pre><code>const secret = crypto.createHash('sha256')
const secret_key = secret.update(XXXX).digest('utf8')

const hmac = crypto.createHmac('sha256', secret_key)
const result = hmac.update(YYYY).digest('hex')
</code></pre>

<p>So PHP's <code>$hash</code> and Node.js <code>result</code> are not the same. Have tried secret key with 'hex' with no success. How to reproduce it in Node exactly as in PHP?</p>
","<p>If you leave out the encoding of the first <code>digest</code> altogether, then you get equal strings:</p>

<pre><code>const secret = crypto.createHash('sha256')
const secret_key = secret.update('XXXX').digest()

const hmac = crypto.createHmac('sha256', secret_key)
const result = hmac.update('YYYY').digest('hex')

console.log(result);
</code></pre>

<p>Corresponding PHP code:</p>

<pre><code>&lt;?php
$secret_key = hash('sha256', 'XXXX', true);
$hash = hash_hmac('sha256', 'YYYY', $secret_key);

echo $hash;
</code></pre>

<blockquote>
<pre><code>PHP:    c4888731de466cefaa5c831b54132d3d9384310eb1be36f77f3f6542266cb307
NodeJS: c4888731de466cefaa5c831b54132d3d9384310eb1be36f77f3f6542266cb307
</code></pre>
</blockquote>
","48748102","225","<php><node.js><hash><sha256><hmac>","0","1","2","2018-02-12 13:53:09","48748102","0","1","","","","2018-02-12 13:42:16","","","2018-02-12 13:53:09"
"6671926","Using an HMAC on an a already hashed value, good or bad practice?","<p>Hi all I have a question on if this is good practice or not.  I am aware that simply double hashing a value can be bad for various reasons.</p>

<p>What I would like to do would be something like this, in php.</p>

<pre><code>$val = hash_hmac('sha256', md5($password), $salt);
</code></pre>

<p>The reason for this is that we are authenticating with a trusted partner over a closed api.  The passwords are stored as an MD5 hash in our DB.  However, I don't want our partner to send this same value across the net.</p>

<p>This way I can compare the md5'd password inside our database to unique hash that our partner has sent.</p>

<p>What say ye?</p>
","<p>First of all, is this a user password (ie, you are authenticating on-behalf-of a user), or a shared secret between your two servers?</p>

<p>If it's a user password, stop. You are saving passwords in plaintext (or as an unsalted md5). Either way is bad. Save passwords as a salted hash and use OAuth or something to authenticate instead.</p>

<p>If it's a shared secret between two servers (not representing a user), you can still use oauth or something, but if you just want something simple, you should authenticate like this:</p>

<pre><code>$val = hash_hmac('sha256', $nonce, $secret);
</code></pre>

<p><code>$nonce</code> is a one-time-value chosen by the server randomly to prevent replay attacks.</p>

<p>Keep in mind that if you don't have a nonce, then whatever value you send across <em>is</em> your shared secret. It doesn't matter if you derive it from a hmac of a md5 or whatever; if it ends up being the same each time, it is equivalent to a password sent across the communications channel. And remember to secure the communications channel from MITMs as well!</p>
","6672012","225","<md5><hash><hmac><sha>","0","0","1","2011-07-12 22:33:17","","0","","","","","2011-07-12 22:21:32","","","2011-07-12 22:33:17"
"48271223","Swift: HMAC SHA-512 for coinspot API","<p>I am trying to connect to the coinspot API which has very shoddy documentation. Link below:</p>

<p><a href=""https://www.coinspot.com.au/api"" rel=""nofollow noreferrer"">https://www.coinspot.com.au/api</a></p>

<p>It requires an HMAC SHA512 hash attached to the user's secret key, then a nonce key In the parameters of a POST request which is a timestamp turned to an integer to stay unique at each request. The header requires both the API key and the signature.</p>

<p>I use Alamofire's JSON encoded post request through coinspot's private API URL <a href=""https://www.coinspot.com.au/api"" rel=""nofollow noreferrer"">https://www.coinspot.com.au/api</a> </p>

<p>Seems I get a success message for connecting but get an {status = invalid;} response.</p>

<p>The only 2 things I can think of are a wrong POST request (which doesn't seem the case, as if I don't add the nonce key in the parameters, I get a proper response requesting for one from the server), and the HMAC SHA-512 hash. I've taken the code from 
<a href=""https://stackoverflow.com/questions/44420192/hmac-sha512-using-commoncrypto-in-swift-3-1"">HMAC SHA512 using CommonCrypto in Swift 3.1</a></p>

<p>And modified it slightly to just include the SHA512 hashing.</p>

<p>Code below:</p>

<pre><code>extension String{

    var sha512:String{
         return HMAC.hash(inp: self, algo: HMACAlgo.SHA512)
    }
}

public struct HMAC{

    static  func hash(inp: String, algo: HMACAlgo)-&gt;String{
        if  let stringData = inp.data(using: String.Encoding.utf8, allowLossyConversion: false){
            return hexStringFromData(input: digest(input: stringData as NSData, algo: algo))
        }
        return """"
    }

    private  static  func digest(input: NSData, algo: HMACAlgo)-&gt; NSData{
        let digestLength = algo.digestLength()
        var hash = [UInt8](repeating: 0, count: digestLength)
        CC_SHA512(input.bytes, UInt32(input.length), &amp;hash)
        return  NSData(bytes: hash, length: digestLength)
    }

    private  static  func hexStringFromData(input: NSData)-&gt; String{
        var bytes = [UInt8](repeating: 0, count: input.length)
        input.getBytes(&amp;bytes, length: input.length)
        var hexString = """"
        for byte in bytes{
            hexString += String(format: ""%02x"", UInt8(byte))
        }
        return hexString
    }
}

enum HMACAlgo{
    case SHA512

    func digestLength()-&gt;Int{
        var result:CInt = 0
        switch self{
        case .SHA512:
            result = CC_SHA512_DIGEST_LENGTH
        }
        return Int(result)
    }
}
</code></pre>

<p>The CommonCrypto library has been properly added with an objectiveC bridging file, and printing the result gives me a proper hashed signature.</p>

<p>I've contacted coinspot but they are swarmed with requests and they only have a cookie template response in regards to any technical support for their API.</p>

<p>Here's the Alamofire segment I placed under a function to call any command to the coinspot server:</p>

<pre><code>    func request(_ command: Router, params: [String: AnyObject]?, completion: @escaping (Result&lt;JSON&gt;)-&gt; Void){
        var parameters = [""nonce"": Int(Date().timeIntervalSince1970*1000) as AnyObject]
        if params != nil{
            parameters = parameters + params!
        }
let sign = customerSecret.sha512
        print(sign)
        let headers:HTTPHeaders = [""key"": APIKey, ""sign"": sign]
        do{
            try Alamofire.request( command.asURL(), method: .post, parameters: parameters, encoding: JSONEncoding.default, headers: headers).responseJSON{(response) in
                guard let json = response.result.value else {
                    completion(.failure(CoinSpotError.networkError(error: response.result.error)))
                    return
                }
                print(response)
            }
        } catch {
            print(""error"")
        }
    }
</code></pre>

<p>I think the above is correct. Router is just a set of addresses that call to the proper POST request for retrieving data.</p>

<p>Finally, I've changed the request to GET, got rid of both headers and parameters, and I get a status ok and the resulting JSON. I figured I'll just try a command on a browser and it worked, </p>

<p>The API does say every request must be a post method. </p>
","<p>Coinspot API is down, with no ETA: <a href=""https://github.com/geekpete/py-coinspot-api/issues/15"" rel=""nofollow noreferrer"">Coinbase API down</a></p>

<p>I continue to receive <code>{'status': 'invalid'}</code> back from any request I make.</p>

<p>Their publicapi is still up, albeit only for BTC, LTC, and DOGE. </p>

<pre><code>def get_latest_price():
   r = requests.get(""https://www.coinspot.com.au/pubapi/latest"").json()
   print(r)
</code></pre>
","48322277","222","<swift><api><hmac>","0","0","1","2018-01-18 13:15:13","48322277","0","","5403896","","2018-01-16 05:37:55","2018-01-15 21:58:39","","","2018-01-18 13:15:13"
"45964632","Translating Python/JS to Java - JSON & HMAC","<p>I am trying to translate the following Python example into Java code, but was getting an error around the format of the HTTP post and/or the HMAC signature I have created. If anyone could point at which part I could have possibly done wrong, it would be super helpful. Thank you!</p>

<p>Original Python example:</p>

<pre><code>    PAYLOAD = {
      ""access_token"": ACCESS_TOKEN,
      ""price"": 500000,
      ""qty"": 0.1,
      ""currency"", ""btc""
    }

    def get_encoded_payload(payload):
      payload[u'nonce'] = int(time.time()*1000)

      dumped_json = json.dumps(payload)
      encoded_json = base64.b64encode(dumped_json)
      return encoded_json

    def get_signature(encoded_payload, secret_key):
      signature = hmac.new(str(secret_key).upper(), str(encoded_payload), hashlib.sha512);
      return signature.hexdigest()

    def get_response(url, payload):
      encoded_payload = get_encoded_payload(payload)
      headers = {
        'Content-type': 'application/json',
        'X-COINONE-PAYLOAD': encoded_payload,
        'X-COINONE-SIGNATURE': get_signature(encoded_payload, SECRET_KEY)
      }
      http = httplib2.Http()
      response, content = http.request(URL, 'POST', headers=headers, body=encoded_payload)
      return content

    def get_result():
      content = get_response(URL, PAYLOAD)
      content = json.loads(content)

      return content

    if __name__   == ""__main__"":
        print get_result()
</code></pre>

<p>Original JS example:</p>

<pre><code>    var crypto = require('crypto');
var request = require('request');
var ACCESS_TOKEN = '';
var SECRET_KEY = '';
var url = 'https://api.coinone.co.kr/v2/order/limit_buy/';
  var payload = {
  ""access_token"": ACCESS_TOKEN,
  ""price"": 500000,
  ""qty"": 0.1,
  ""currency"": ""btc"",
  ""nonce"": Date.now()
};

payload = new Buffer(JSON.stringify(payload)).toString('base64');

var signature = crypto
  .createHmac(""sha512"", SECRET_KEY.toUpperCase())
  .update(payload)
  .digest('hex');

var headers = {
  'content-type':'application/json',
  'X-COINONE-PAYLOAD': payload,
  'X-COINONE-SIGNATURE': signature
};

var options = {
  url: url,
  headers: headers,
  body: payload
};

request.post(options,
  function(error, response, body) {
    console.log(body);
});
</code></pre>

<p>My code in Java:</p>

<pre><code>    long nonce = (new Date()).getTime();
    JSONObject json = new JSONObject();
    json.put(""currency"", ""BTC"");
    json.put(""price"", 3000000);
    json.put(""qty"", 0.01);
    json.put(""access_token"", publicKey);
    json.put(""nonce"", nonce);

    System.out.println(json.toString());

    Client client = ClientBuilder.newClient();
    Entity&lt;String&gt; payload = Entity.json(json.toString());
    String message = json.toString(); 
    Response response = client.target(baseAddress+apiAddress)
      .request(MediaType.APPLICATION_JSON_TYPE)
      .header(""content-type"", ""application/json"")
      .header(""accept"", ""application/json"")
      .header(""X-COINONE-PAYLOAD"", payload)
      .header(""X-COINONE-SIGNATURE"", CreateToken(message, privateKey.toUpperCase()))
      .post(payload);

    String body = response.readEntity(String.class);
    System.out.println(body);

    ///////////
    private static String CreateToken(String message, String secretKey)
{
    String hash = """";
    try {    

        Mac sha512_HMAC = Mac.getInstance(""HmacSHA512"");
        SecretKeySpec secret_key = new SecretKeySpec(secretKey.getBytes(), ""HmacSHA512"");
        sha512_HMAC.init(secret_key);

        hash = Base64.encodeBase64String(sha512_HMAC.doFinal(message.getBytes()));

    }
    catch (Exception e){
        System.out.println(""Error"");
    }
    System.out.println(hash);
    return hash;
}
</code></pre>

<p>It returns the following message:
{""errorCode"":""130"",""errorMessage"":""V2 API Nonce value must be a positive integer"",""result"":""error""}</p>

<p>But this message seems to be a generic one - when input other nonce values, it also returns the same message</p>
","<p>Your <code>message(payload)</code> and <code>hash(signature)</code> are wrong...</p>

<p>Example:</p>

<pre><code>String payload = Base64.encodeBase64String(message.getBytes(""UTF-8""));
String signature = CreateToken(payload, key.toUpperCase());

---------
private static String CreateToken(String message, String secretKey){
String hash = """";
try {    

    Mac sha512_HMAC = Mac.getInstance(""HmacSHA512"");
    SecretKeySpec secret_key = new SecretKeySpec(secretKey.getBytes(), ""HmacSHA512"");
    sha512_HMAC.init(secret_key);

// hash = Base64.encodeBase64String(sha512_HMAC.doFinal(message.getBytes()));
hash = Hex.encodeHexString(sha512_HMAC.doFinal(message.getBytes()));

}
catch (Exception e){
    System.out.println(""Error"");
}
System.out.println(hash);
return hash;
</code></pre>

<p>}</p>
","47930030","222","<java><python><json><hmac><sha512>","1","0","1","2018-06-24 03:24:57","","5","3","8507061","","2017-08-30 23:35:53","2017-08-30 15:40:56","","2017-12-30 03:39:47","2017-12-21 17:33:51"
"38775882","OAuth1 WP-API signature does not match","<p>I'd like to add posts to WP with python 3.5 using WP-API v2. I've done the first two steps of the authentication (I got the final tokens) with POSTMAN, and now I got stuck with the implementation. If I try to create a new post (it works with postman) I get the following result:</p>

<pre><code>{""code"":""json_oauth1_signature_mismatch"",""message"":""OAuth signature does not match"",""data"":{""status"":401}}
</code></pre>

<p>The code that I use for signing is:</p>

<pre><code>def sign_request(base, key):
    from hashlib import sha1
    import hmac

    hashed = hmac.new(key.encode(), base.encode(), sha1)

    return binascii.b2a_base64(hashed.digest())[:-1].decode('utf-8')
</code></pre>

<p>The base format I use is: POST&amp;url&amp;params</p>

<p>The key is: clientsecret&amp;token</p>

<p>According to the <a href=""http://oauth1.wp-api.org/docs/basics/Signing.html"" rel=""nofollow"">documentation</a></p>

<p>Any ideas?</p>
","","","222","<python><wordpress><oauth><sha1><hmac>","1","","0","2016-08-04 19:30:13","","0","","","","","2016-08-04 19:30:13","","",""
"54755050","Python 3 with Flask runtime error: ""AttributeError: module 'hmac' has no attribute 'digest'"" on Linux but not Windows","<p>Error message ""AttributeError: module 'hmac' has no attribute 'digest'"" is being thrown on my python3 flask+connexion server, when used on my Ubuntu VPS, but not my Windows 10 PC. Both are using Python3, and I've reimaged the VPS from CentOS, in case I'd made some config error.</p>

<p>I'm trying to use the digest method of Python3's inbuilt hmac module (note that Python2 hmac doesn't have digest), and have upgraded python and pip.
I'm starting to wonder if flask is overriding hmac with it's own implementation, but I'm not sure how this would be affected by OS. Any help would be greatly appreciated, cheers.</p>
","<p>Moving my comment as answer, so that the question is properly answered. As it become clear OP uses different python3 versions.</p>

<blockquote>
  <p><a href=""https://docs.python.org/3.7/library/hmac.html#hmac.digest"" rel=""nofollow noreferrer"">module-level hmac.digest()</a> is new in 3.7. So it's not available
  in 3.5. In 3.5 you can the <a href=""https://docs.python.org/3.5/library/hmac.html#hmac.HMAC.digest"" rel=""nofollow noreferrer"">digest method of HMAC object</a>. I would
  guess on Windows you have the latest 3.7 installed.</p>
</blockquote>
","54760455","222","<python-3.x><flask><hmac>","0","1","1","2019-02-19 07:02:33","54760455","5","","","","","2019-02-18 20:41:24","","","2019-02-19 07:02:33"
"47929005","Manual HMACSHA1 calculation differs from openssl results","<p>I am trying to implement HMACSHA1 by Hand, to check if our serviceprovider or we calculate a wrong HMAC for a Support-Ticket (a SOAP call, hence the xml content).</p>

<p>The problem is, I stick to NIST Specification for HMACs and get a different result by Hand and when using openssl HMAC functions.</p>

<p>The following code prints:</p>

<pre><code>B92674DCBA96F2DA93F7043071B931F5F2583FBD
4303E965D88D288C9AC594CE6C5E6AFF27D40B2D
</code></pre>

<p>while the result by openssl is the same we get in our application - so I assume, on the basis that openssl is so commonly used, that my result is wrong - but where is my error?</p>

<p>This is the spec I refer to:
<a href=""http://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.198-1.pdf"" rel=""nofollow noreferrer"" title=""NIST HMAC Specificationquot;"">http://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.198-1.pdf</a></p>

<p>here is my code:</p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;openssl/sha.h&gt;
#include &lt;openssl/hmac.h&gt;
#include &lt;string.h&gt;

#define byte unsigned char
#define IPAD 0x36
#define OPAD 0x5c
#define DIGESTSIZE 20



int main () {
    byte *derivedKey =  (byte[DIGESTSIZE]) {0x42,0xA9,0x78,0x90,0xFC,0xE5,0x16,0x8E,0x58,0x12,0x2F,0xF1,0xBA,0x32,0x5F,0x09,0x88,0x94,0x02,0x91};
    byte *content =     ""&lt;ds:SignedInfo xmlns:ds=\""http://www.w3.org/2000/09/xmldsig#\"" xmlns:soap=\""http://www.w3.org/2003/05/soap-envelope\""&gt;&lt;ds:CanonicalizationMethod Algorithm=\""http://www.w3.org/2001/10/xml-exc-c14n#\""&gt;&lt;ec:InclusiveNamespaces xmlns:ec=\""http://www.w3.org/2001/10/xml-exc-c14n#\"" PrefixList=\""soap\""&gt;&lt;/ec:InclusiveNamespaces&gt;&lt;/ds:CanonicalizationMethod&gt;&lt;ds:SignatureMethod Algorithm=\""http://www.w3.org/2000/09/xmldsig#hmac-sha1\""&gt;&lt;/ds:SignatureMethod&gt;&lt;ds:Reference URI=\""#TS-B183A13FEB0189143115136776276601\""&gt;&lt;ds:Transforms&gt;&lt;ds:Transform Algorithm=\""http://www.w3.org/2001/10/xml-exc-c14n#\""&gt;&lt;ec:InclusiveNamespaces xmlns:ec=\""http://www.w3.org/2001/10/xml-exc-c14n#\"" PrefixList=\""wsse soap\""&gt;&lt;/ec:InclusiveNamespaces&gt;&lt;/ds:Transform&gt;&lt;/ds:Transforms&gt;&lt;ds:DigestMethod Algorithm=\""http://www.w3.org/2000/09/xmldsig#sha1\""&gt;&lt;/ds:DigestMethod&gt;&lt;ds:DigestValue&gt;rXJdGuDqoRrUJxuGiA1eyAozifk=&lt;/ds:DigestValue&gt;&lt;/ds:Reference&gt;&lt;/ds:SignedInfo&gt;"";
    byte *oPadKey =     malloc(DIGESTSIZE);
    byte *iPadKey =     malloc(DIGESTSIZE);


    int i;
    for(i=0;i&lt;DIGESTSIZE;i++){
        iPadKey[i]=derivedKey[i]^IPAD;
        oPadKey[i]=derivedKey[i]^OPAD;
    }

    byte *rOpInput=     malloc(strlen(content)+DIGESTSIZE);

    //concat iPad and content
    memcpy(rOpInput, iPadKey, DIGESTSIZE);
    memcpy(rOpInput+DIGESTSIZE,content,strlen(content));

    //SHA1 (iPad||content) gives the rightmost 20 bytes of the final SHA1 Input
    byte *rOp=malloc(DIGESTSIZE); // H(iPad||content)
    SHA1(rOpInput,strlen(content)+DIGESTSIZE,rOp);
    free(rOpInput);

    byte *finalInput = malloc(2*DIGESTSIZE); //oPad||H(iPad||content)

    //concat oPad and H(ipad||content)
    memcpy(finalInput, oPadKey,DIGESTSIZE);
    memcpy(finalInput+DIGESTSIZE,rOp,DIGESTSIZE);

    free(rOp);
    free(oPadKey);
    free(iPadKey);
    //SHA1(oPad||H(iPad||content))

    byte *hmac = malloc(DIGESTSIZE);
    SHA1(finalInput,40,hmac);
    free(finalInput);

    //print calculated HMAC as HEX
    for(i=0;i&lt;DIGESTSIZE;i++){
        printf(""%02X"", (hmac[i] &amp; 0xFF ));
    }
    printf(""\n"");


    //verify with openssl HMAC
    byte *result = HMAC(EVP_sha1(), derivedKey, DIGESTSIZE, content, strlen(content), NULL, NULL);
    for(i=0;i&lt;DIGESTSIZE;i++){
        printf(""%02X"", (result[i] &amp; 0xFF ));
    }
    printf(""\n"");
    return 0;
}
</code></pre>
","<p>The bug is <em>simple</em>. The <code>ipad</code> and <code>opad</code> need to be <a href=""https://en.wikipedia.org/wiki/Secure_Hash_Algorithms#Comparison_of_SHA_functions"" rel=""noreferrer""><strong>(input) block size</strong></a> in length, not the length of the digest output. I.e. they must be 512 bits (64 bytes) for SHA-1, not 20.</p>

<p>I.e. </p>

<pre><code>#define INPUT_BLOCK_SIZE 64
byte derivedKey[64] =  {0x42,0xA9,0x78,0x90,0xFC,0xE5,0x16,0x8E,0x58,0x12,
                        0x2F,0xF1,0xBA,0x32,0x5F,0x09,0x88,0x94,0x02,0x91};
// null-padded on the right
</code></pre>

<p>and then change the <code>DIGESTSIZE</code> to <code>INPUT_BLOCK_SIZE</code> for wherever the length of <code>ipad</code>, <code>opad</code> is needed.</p>

<p>Result:</p>

<pre><code>4303E965D88D288C9AC594CE6C5E6AFF27D40B2D
</code></pre>

<p>From <a href=""https://en.wikipedia.org/wiki/Hash-based_message_authentication_code#Definition"" rel=""noreferrer"">Wikipedia</a></p>

<blockquote>
  <p><em>K' is another secret key, derived from the original key K (by padding K to the right with extra zeroes to the <strong>input block size of the hash function</strong>, or by hashing K if it is longer than that block size)</em></p>
</blockquote>

<p><strong>(emphasis mine)</strong>.</p>

<hr>

<p>P.S. It would be better to use the <code>SHA1_Init</code>/<code>Update</code>/<code>Final</code>, as then lots of copying would be skipped. You can also avoid allocating memory for the <code>ipad</code> and <code>opad</code> separately by first calculating <code>ipad</code> and after it has been used, then xorring in place by <code>0x6a</code> to get the opad.</p>
","47929464","220","<c><openssl><hmac>","1","6","3","2019-10-29 16:28:36","47929464","0","","4284627","","2017-12-21 16:27:14","2017-12-21 16:26:08","","2017-12-21 17:13:21","2017-12-21 16:54:37"
"47929005","Manual HMACSHA1 calculation differs from openssl results","<p>I am trying to implement HMACSHA1 by Hand, to check if our serviceprovider or we calculate a wrong HMAC for a Support-Ticket (a SOAP call, hence the xml content).</p>

<p>The problem is, I stick to NIST Specification for HMACs and get a different result by Hand and when using openssl HMAC functions.</p>

<p>The following code prints:</p>

<pre><code>B92674DCBA96F2DA93F7043071B931F5F2583FBD
4303E965D88D288C9AC594CE6C5E6AFF27D40B2D
</code></pre>

<p>while the result by openssl is the same we get in our application - so I assume, on the basis that openssl is so commonly used, that my result is wrong - but where is my error?</p>

<p>This is the spec I refer to:
<a href=""http://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.198-1.pdf"" rel=""nofollow noreferrer"" title=""NIST HMAC Specificationquot;"">http://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.198-1.pdf</a></p>

<p>here is my code:</p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;openssl/sha.h&gt;
#include &lt;openssl/hmac.h&gt;
#include &lt;string.h&gt;

#define byte unsigned char
#define IPAD 0x36
#define OPAD 0x5c
#define DIGESTSIZE 20



int main () {
    byte *derivedKey =  (byte[DIGESTSIZE]) {0x42,0xA9,0x78,0x90,0xFC,0xE5,0x16,0x8E,0x58,0x12,0x2F,0xF1,0xBA,0x32,0x5F,0x09,0x88,0x94,0x02,0x91};
    byte *content =     ""&lt;ds:SignedInfo xmlns:ds=\""http://www.w3.org/2000/09/xmldsig#\"" xmlns:soap=\""http://www.w3.org/2003/05/soap-envelope\""&gt;&lt;ds:CanonicalizationMethod Algorithm=\""http://www.w3.org/2001/10/xml-exc-c14n#\""&gt;&lt;ec:InclusiveNamespaces xmlns:ec=\""http://www.w3.org/2001/10/xml-exc-c14n#\"" PrefixList=\""soap\""&gt;&lt;/ec:InclusiveNamespaces&gt;&lt;/ds:CanonicalizationMethod&gt;&lt;ds:SignatureMethod Algorithm=\""http://www.w3.org/2000/09/xmldsig#hmac-sha1\""&gt;&lt;/ds:SignatureMethod&gt;&lt;ds:Reference URI=\""#TS-B183A13FEB0189143115136776276601\""&gt;&lt;ds:Transforms&gt;&lt;ds:Transform Algorithm=\""http://www.w3.org/2001/10/xml-exc-c14n#\""&gt;&lt;ec:InclusiveNamespaces xmlns:ec=\""http://www.w3.org/2001/10/xml-exc-c14n#\"" PrefixList=\""wsse soap\""&gt;&lt;/ec:InclusiveNamespaces&gt;&lt;/ds:Transform&gt;&lt;/ds:Transforms&gt;&lt;ds:DigestMethod Algorithm=\""http://www.w3.org/2000/09/xmldsig#sha1\""&gt;&lt;/ds:DigestMethod&gt;&lt;ds:DigestValue&gt;rXJdGuDqoRrUJxuGiA1eyAozifk=&lt;/ds:DigestValue&gt;&lt;/ds:Reference&gt;&lt;/ds:SignedInfo&gt;"";
    byte *oPadKey =     malloc(DIGESTSIZE);
    byte *iPadKey =     malloc(DIGESTSIZE);


    int i;
    for(i=0;i&lt;DIGESTSIZE;i++){
        iPadKey[i]=derivedKey[i]^IPAD;
        oPadKey[i]=derivedKey[i]^OPAD;
    }

    byte *rOpInput=     malloc(strlen(content)+DIGESTSIZE);

    //concat iPad and content
    memcpy(rOpInput, iPadKey, DIGESTSIZE);
    memcpy(rOpInput+DIGESTSIZE,content,strlen(content));

    //SHA1 (iPad||content) gives the rightmost 20 bytes of the final SHA1 Input
    byte *rOp=malloc(DIGESTSIZE); // H(iPad||content)
    SHA1(rOpInput,strlen(content)+DIGESTSIZE,rOp);
    free(rOpInput);

    byte *finalInput = malloc(2*DIGESTSIZE); //oPad||H(iPad||content)

    //concat oPad and H(ipad||content)
    memcpy(finalInput, oPadKey,DIGESTSIZE);
    memcpy(finalInput+DIGESTSIZE,rOp,DIGESTSIZE);

    free(rOp);
    free(oPadKey);
    free(iPadKey);
    //SHA1(oPad||H(iPad||content))

    byte *hmac = malloc(DIGESTSIZE);
    SHA1(finalInput,40,hmac);
    free(finalInput);

    //print calculated HMAC as HEX
    for(i=0;i&lt;DIGESTSIZE;i++){
        printf(""%02X"", (hmac[i] &amp; 0xFF ));
    }
    printf(""\n"");


    //verify with openssl HMAC
    byte *result = HMAC(EVP_sha1(), derivedKey, DIGESTSIZE, content, strlen(content), NULL, NULL);
    for(i=0;i&lt;DIGESTSIZE;i++){
        printf(""%02X"", (result[i] &amp; 0xFF ));
    }
    printf(""\n"");
    return 0;
}
</code></pre>
","<p>Please refer this. You can easily calculate the hash</p>

<p><a href=""https://csrc.nist.gov/CSRC/media/Projects/Cryptographic-Standards-and-Guidelines/documents/examples/HMAC_SHA1.pdf"" rel=""nofollow noreferrer"">https://csrc.nist.gov/CSRC/media/Projects/Cryptographic-Standards-and-Guidelines/documents/examples/HMAC_SHA1.pdf</a></p>
","58611583","220","<c><openssl><hmac>","1","0","3","2019-10-29 16:28:36","47929464","0","","4284627","","2017-12-21 16:27:14","2017-12-21 16:26:08","","","2019-10-29 16:23:45"
"47929005","Manual HMACSHA1 calculation differs from openssl results","<p>I am trying to implement HMACSHA1 by Hand, to check if our serviceprovider or we calculate a wrong HMAC for a Support-Ticket (a SOAP call, hence the xml content).</p>

<p>The problem is, I stick to NIST Specification for HMACs and get a different result by Hand and when using openssl HMAC functions.</p>

<p>The following code prints:</p>

<pre><code>B92674DCBA96F2DA93F7043071B931F5F2583FBD
4303E965D88D288C9AC594CE6C5E6AFF27D40B2D
</code></pre>

<p>while the result by openssl is the same we get in our application - so I assume, on the basis that openssl is so commonly used, that my result is wrong - but where is my error?</p>

<p>This is the spec I refer to:
<a href=""http://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.198-1.pdf"" rel=""nofollow noreferrer"" title=""NIST HMAC Specificationquot;"">http://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.198-1.pdf</a></p>

<p>here is my code:</p>

<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;openssl/sha.h&gt;
#include &lt;openssl/hmac.h&gt;
#include &lt;string.h&gt;

#define byte unsigned char
#define IPAD 0x36
#define OPAD 0x5c
#define DIGESTSIZE 20



int main () {
    byte *derivedKey =  (byte[DIGESTSIZE]) {0x42,0xA9,0x78,0x90,0xFC,0xE5,0x16,0x8E,0x58,0x12,0x2F,0xF1,0xBA,0x32,0x5F,0x09,0x88,0x94,0x02,0x91};
    byte *content =     ""&lt;ds:SignedInfo xmlns:ds=\""http://www.w3.org/2000/09/xmldsig#\"" xmlns:soap=\""http://www.w3.org/2003/05/soap-envelope\""&gt;&lt;ds:CanonicalizationMethod Algorithm=\""http://www.w3.org/2001/10/xml-exc-c14n#\""&gt;&lt;ec:InclusiveNamespaces xmlns:ec=\""http://www.w3.org/2001/10/xml-exc-c14n#\"" PrefixList=\""soap\""&gt;&lt;/ec:InclusiveNamespaces&gt;&lt;/ds:CanonicalizationMethod&gt;&lt;ds:SignatureMethod Algorithm=\""http://www.w3.org/2000/09/xmldsig#hmac-sha1\""&gt;&lt;/ds:SignatureMethod&gt;&lt;ds:Reference URI=\""#TS-B183A13FEB0189143115136776276601\""&gt;&lt;ds:Transforms&gt;&lt;ds:Transform Algorithm=\""http://www.w3.org/2001/10/xml-exc-c14n#\""&gt;&lt;ec:InclusiveNamespaces xmlns:ec=\""http://www.w3.org/2001/10/xml-exc-c14n#\"" PrefixList=\""wsse soap\""&gt;&lt;/ec:InclusiveNamespaces&gt;&lt;/ds:Transform&gt;&lt;/ds:Transforms&gt;&lt;ds:DigestMethod Algorithm=\""http://www.w3.org/2000/09/xmldsig#sha1\""&gt;&lt;/ds:DigestMethod&gt;&lt;ds:DigestValue&gt;rXJdGuDqoRrUJxuGiA1eyAozifk=&lt;/ds:DigestValue&gt;&lt;/ds:Reference&gt;&lt;/ds:SignedInfo&gt;"";
    byte *oPadKey =     malloc(DIGESTSIZE);
    byte *iPadKey =     malloc(DIGESTSIZE);


    int i;
    for(i=0;i&lt;DIGESTSIZE;i++){
        iPadKey[i]=derivedKey[i]^IPAD;
        oPadKey[i]=derivedKey[i]^OPAD;
    }

    byte *rOpInput=     malloc(strlen(content)+DIGESTSIZE);

    //concat iPad and content
    memcpy(rOpInput, iPadKey, DIGESTSIZE);
    memcpy(rOpInput+DIGESTSIZE,content,strlen(content));

    //SHA1 (iPad||content) gives the rightmost 20 bytes of the final SHA1 Input
    byte *rOp=malloc(DIGESTSIZE); // H(iPad||content)
    SHA1(rOpInput,strlen(content)+DIGESTSIZE,rOp);
    free(rOpInput);

    byte *finalInput = malloc(2*DIGESTSIZE); //oPad||H(iPad||content)

    //concat oPad and H(ipad||content)
    memcpy(finalInput, oPadKey,DIGESTSIZE);
    memcpy(finalInput+DIGESTSIZE,rOp,DIGESTSIZE);

    free(rOp);
    free(oPadKey);
    free(iPadKey);
    //SHA1(oPad||H(iPad||content))

    byte *hmac = malloc(DIGESTSIZE);
    SHA1(finalInput,40,hmac);
    free(finalInput);

    //print calculated HMAC as HEX
    for(i=0;i&lt;DIGESTSIZE;i++){
        printf(""%02X"", (hmac[i] &amp; 0xFF ));
    }
    printf(""\n"");


    //verify with openssl HMAC
    byte *result = HMAC(EVP_sha1(), derivedKey, DIGESTSIZE, content, strlen(content), NULL, NULL);
    for(i=0;i&lt;DIGESTSIZE;i++){
        printf(""%02X"", (result[i] &amp; 0xFF ));
    }
    printf(""\n"");
    return 0;
}
</code></pre>
","<pre><code> #define IPAD 0x36

 #define OPAD 0x5c

 #define DIGESTSIZE 20

 #define INPUT_BLOCK_SIZE 64

 #define byte unsigned char

static byte mykey[64];

int main () {

int i;

    byte mykey[INPUT_BLOCK_SIZE] = {

0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27,
0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37,0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F };

    byte content[] = {0x53, 0x61, 0x6D, 0x70, 0x6C, 0x65, 0x20, 0x6D, 0x65, 0x73,
0x73, 0x61, 0x67, 0x65, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x6B, 0x65, 0x79, 0x6C, 0x65, 0x6E, 0x3D, 0x62, 0x6C, 0x6F, 0x63, 0x6B, 0x6C, 0x65, 0x6E };

   byte k0_ipad_text[sizeof(content) + INPUT_BLOCK_SIZE];
   byte hmac[DIGESTSIZE];
   byte k0_opad_hash[INPUT_BLOCK_SIZE + DIGESTSIZE];

/*
 * K0 is mykey as size is 0x40 = 64 bytes
 */

    byte *oPadKey =     malloc(INPUT_BLOCK_SIZE);
    byte *iPadKey =     malloc(INPUT_BLOCK_SIZE);

     memset(oPadKey, 0, INPUT_BLOCK_SIZE);
     memset(iPadKey, 0, INPUT_BLOCK_SIZE);

    for(i=0;i&lt;INPUT_BLOCK_SIZE;i++){
        iPadKey[i]=mykey[i]^IPAD;
        oPadKey[i]=mykey[i]^OPAD;
    }

    printf(""\n iPad key = "");
    for(i=0;i&lt;INPUT_BLOCK_SIZE;i++){
    printf(""%02x "", iPadKey[i]);
    }

    printf(""\n oPad key = "");
    for(i=0;i&lt;INPUT_BLOCK_SIZE;i++){
    printf(""%02x "", oPadKey[i]);
    }

//Key^ipad)||text)

    memcpy(k0_ipad_text, iPadKey, INPUT_BLOCK_SIZE);
    memcpy(k0_ipad_text + INPUT_BLOCK_SIZE, content, sizeof(content));

    SHA1(k0_ipad_text, INPUT_BLOCK_SIZE + sizeof(content), hmac);
#if 0
    printf(""\n hmac  = "");
    for(i=0;i&lt;DIGESTSIZE;i++){
    printf(""%02x "", hmac[i]);
    }
#endif

    memcpy(k0_opad_hash, oPadKey, INPUT_BLOCK_SIZE);
    memcpy(k0_opad_hash + INPUT_BLOCK_SIZE, hmac, DIGESTSIZE);

    SHA1(k0_opad_hash, INPUT_BLOCK_SIZE + DIGESTSIZE, hmac);
    printf(""\n hmac \n"");
    for(i=0;i&lt;DIGESTSIZE;i++){
    printf(""%02x"", hmac[i]);
    }

   printf(""\n"");

    //verify with openssl HMAC
    byte *result = HMAC(EVP_sha1(), mykey, INPUT_BLOCK_SIZE, content, sizeof(content), NULL, NULL);
    for(i=0;i&lt;DIGESTSIZE;i++){
        printf(""%02X"", (result[i] &amp; 0xFF ));
    }

    printf(""\n"");
    return 0;
}
</code></pre>
","58611664","220","<c><openssl><hmac>","1","0","3","2019-10-29 16:28:36","47929464","0","","4284627","","2017-12-21 16:27:14","2017-12-21 16:26:08","","","2019-10-29 16:28:36"
"15119148","PHP based app/web login framework?","<p>I currently have a very simple PHP based login system that works with android, iOS, and the web but I'd like to use something with a little more security.  My current setup simply passes the username, and the password in md5 format to authenticate against my DB.  </p>

<p>Is there a framework people recommend using.  I've heard of oAuth and HMAC with PHP but I'm not sure if these are overkill for what I need.</p>

<p>Any thoughts?</p>
","<p>For starters, MD5 is not considered secure anymore.  It's just too easy to brute-force with modern hardware.</p>

<p>Secondly, if you're sending an MD5 over the wire &amp; that is what you have in the database, you are effectively using the MD5 of the password as the password.  This means you're sending the unencrypted password over the wire.  Think about it - an attacker just needs to capture the MD5 and send it back if they want to break in - you are not getting any actual security from this.</p>

<p>Just send plaintext username and password over SSL.  Compare it against a server-side secure hash (bcrypt is considered the way to go these days) that's got a secret key merged in.  This will limit risk if your DB gets compromised.</p>
","15119471","217","<php><mysql><oauth><hmac>","0","2","1","2013-02-27 18:25:36","","1","","","","","2013-02-27 18:06:59","2013-02-27 22:50:18","","2013-02-27 18:25:36"
"7129067","Are HMACSHA256 hashes transferable from one server to another?","<p>If I use <code>HMACSHA256.ComputeHash</code> in my password encoding scheme and generate password hashes on one server then later need to migrate to a different server, will my hashes still encode the same? I recall seeing something about <code>machineKey</code> settings being involved in cryptography operations, but I'm not entirely familiar.</p>
","<p>Whether or not they will still encode the same depends on how you create the HMACSHA256 object.  It will use whatever key you instantiate it with to do the hashes or, if you don't specify a key, it will generate a random key.  As long as you pass it the same key, it will generate the same hashes.</p>
","7129086","217","<.net><sha256><hmac><password-encryption>","0","3","2","2011-08-23 09:33:00","7129086","1","","55948","","2011-08-20 04:08:36","2011-08-20 01:51:47","","","2011-08-20 01:55:16"
"7129067","Are HMACSHA256 hashes transferable from one server to another?","<p>If I use <code>HMACSHA256.ComputeHash</code> in my password encoding scheme and generate password hashes on one server then later need to migrate to a different server, will my hashes still encode the same? I recall seeing something about <code>machineKey</code> settings being involved in cryptography operations, but I'm not entirely familiar.</p>
","<p>HMAC computes a hash from a secret and the data you want to authenticate. In order for two servers to compute the same HMAC they'll have to share the secret, which possibly makes it not that secret. In order too be able to verify old password the secret will need either to be fixed or to be somehow referenced along the stored password if it can changes, making it practically a salt.</p>

<p>Using HMAC in a password storage setting is pretty odd, it's not a proper password derivation function (way too fast, not memory intensive enough) and the secret don't bring much value if any, seeing it must be fixed (unlike proper HMAC usage where the secret is agreed upon by the communicating parties for a session and forgotten about after).</p>
","7158918","217","<.net><sha256><hmac><password-encryption>","0","0","2","2011-08-23 09:33:00","7129086","1","","55948","","2011-08-20 04:08:36","2011-08-20 01:51:47","","","2011-08-23 09:33:00"
"43240989","Sha256 and URI encoding woes","<p>I am trying to port this function from javascript/node to racket</p>

<pre><code>var crypto = require(""crypto"");  

function getAuthorizationTokenUsingMasterKey(verb, resourceType, resourceLink, date, masterKey) {  
    var key = new Buffer(masterKey, ""base64"");  

    var text = (verb || """").toLowerCase() + ""\n"" +   
            (resourceType || """").toLowerCase() + ""\n"" +   
            (resourceLink || """") + ""\n"" +   
            date.toLowerCase() + ""\n"" +   
            """" + ""\n"";  

    var body = new Buffer(text, ""utf8"");  
    var signature = crypto.createHmac(""sha256"", key).update(body).digest(""base64"");  

    var MasterToken = ""master"";  

    var TokenVersion = ""1.0"";  

    return encodeURIComponent(""type="" + MasterToken + ""&amp;ver="" + TokenVersion + ""&amp;sig="" + signature);  
}
</code></pre>

<p>```</p>

<p>This gets a few strings, concats those creates a sha256 hash for them and at the end encodes everything for URI representation.</p>

<p>Here is my racket version which sadly does not yield the same results as the JS version one.
For one the last encoding into URI is missing but I also have the suspicion that the sha256 code isnt right.</p>

<pre><code>#lang racket

(require sha)
(require threading)
(require net/base64)
(require (rename-in grommet/crypto/base64
                    (base64-encode encode)
                    (base64-decode decode)))

(define (auth-token master-key date [verb """"] [res-type """"] [res-link """"]) 

    (~&gt;&gt; (list verb res-type res-link date)
        (map string-downcase)
        (string-join _ ""\n"" #:after-last ""\n"")
        string-&gt;bytes/utf-8
        (hmac-sha256 (string-&gt;bytes/utf-8 master-key))
        encode
        (format ""type=master&amp;ver=1.0&amp;sig=~a"")))

(define x (auth-token ""master"" ""Das Ist Ein Datum""))
</code></pre>

<p><strong>EDIT</strong>
I tried to boil down the example so I can see what is wrong and here is what I got</p>

<pre><code>;; racket
(encode (hmac-sha256 (decode ""master"")(string-&gt;bytes/utf-8 ""payload""))) 
;; =&gt; pSfWnL7WUIpZwHmYB9JI891SgmMHJauJ3e0E/D5V46c=""

//javascript
crypto.createHmac(""sha256"", ""master"").update(""payload"").digest(""base64"");  
//=&gt; 'xlPQBpUTEnLGanhDb4ebS7DlFE2jE1d5mO6VjnqjhgI='
</code></pre>

<p><strong>Solution</strong></p>

<pre><code>(define (auth-token3 master-key date [verb """"] [res-type """"] [res-link """"])
    (let* ([! string-downcase] [-&gt;bytes string-&gt;bytes/utf-8])
        (~&gt;&gt; (list (! verb) ""\n"" (! res-type) ""\n"" res-link ""\n"" (! date) ""\n\n"")
            string-append*
            -&gt;bytes
            (hmac-sha256 (base64-decode (-&gt;bytes master-key)))
            base64-encode
            (format ""type=master&amp;ver=1.0&amp;sig=~a"")
            string-trim
            uri-encode)))
</code></pre>
","<p>Your boiled-down example should be</p>

<p><code>(encode (hmac-sha256 (string-&gt;bytes/utf-8 ""master"")(string-&gt;bytes/utf-8 ""payload"")))</code></p>

<p>not</p>

<p><code>(encode (hmac-sha256 (decode ""master"")(string-&gt;bytes/utf-8 ""payload"")))</code></p>

<p>The former version returns the correct result.</p>

<p>A possible flaw is that you <code>(map string-downcase)</code> over all the text components, whereas the JS function does not call <code>toLowerCase</code> on <code>resourceLink</code>. Try this:</p>

<pre><code>(define (auth-token master-key date [verb """"] [res-type """"] [res-link """"])
  (let* ([! string-downcase] [-&gt;bytes string-&gt;bytes/utf-8]
         [text/list  (list (! verb) ""\n"" (! res-type) ""\n"" res-link ""\n"" (! date) ""\n"")]
         [text/bytes (-&gt;bytes (string-append* text/list))]
         [signature  (encode (hmac-sha256 (-&gt;bytes master-key) text/bytes))])
    (string-append ""type=master&amp;ver=1.0&amp;sig="" signature)))
</code></pre>

<p>The JS version also ends by calling <code>encodeURIComponent</code>. I don't know what that does but there doesn't seem to be any equivalent in your code</p>
","43284508","215","<racket><hmac>","2","3","1","2017-04-25 09:59:04","43284508","1","","621427","","2017-04-25 09:59:04","2017-04-05 20:25:54","","","2017-04-07 18:04:40"
"23181223","AWS SimpleDB - SignatureDoesNotMatch - PCL for Xamarin application","<p>I'm trying to create a SimpleDB persistence framework for a Xamarin component. I can't use the .NET SDK since not all the required assemblies are present in a PCL project. For that reason I'm trying create REST request myself but i keep getting SignatureDoesNotMatch when trying to POST my request.</p>

<p>Can someone help and see if there is something wrong with my signature generation.</p>

<p>Here is the request to be signed</p>

<p><a href=""https://sdb.amazonaws.com/?Action=PutAttributes&amp;DomainName=test&amp;ItemName=0&amp;Attribute.1.Name=test&amp;Attribute.1.Value=test&amp;AWSAccessKeyId=AAAAAAAAAAAAAAAAAAAA&amp;Version=2009-04-15&amp;SignatureVersion=2&amp;SignatureMethod=HmacSHA256&amp;Timestamp=2014-04-20T11%3A04%3A10%2B02%3A00"" rel=""nofollow"">https://sdb.amazonaws.com/?Action=PutAttributes&amp;DomainName=test&amp;ItemName=0&amp;Attribute.1.Name=test&amp;Attribute.1.Value=test&amp;AWSAccessKeyId=AAAAAAAAAAAAAAAAAAAA&amp;Version=2009-04-15&amp;SignatureVersion=2&amp;SignatureMethod=HmacSHA256&amp;Timestamp=2014-04-20T11%3A04%3A10%2B02%3A00</a></p>

<p>Here is the string being signed</p>

<p>POST\n
sdb.amazonaws.com\n
/\n
&amp;AWSAccessKeyId=AAAAAAAAAAAAAAAAAAAA&amp;Action=PutAttributes&amp;Attribute.1.Name=test&amp;Attribute.1.Value=test&amp;DomainName=test&amp;ItemName=0&amp;SignatureMethod=HmacSHA256&amp;SignatureVersion=2&amp;Timestamp=2014-04-20T11%3A03%3A12%2B02%3A00&amp;Version=2009-04-15</p>

<p>Here is the signed request.</p>

<p><a href=""https://sdb.amazonaws.com/?Action=PutAttributes&amp;DomainName=test&amp;ItemName=0&amp;Attribute.1.Name=test&amp;Attribute.1.Value=test&amp;AWSAccessKeyId=AAAAAAAAAAAAAAAAAAAA&amp;Version=2009-04-15&amp;Signature=h0lNLh%2BfpDLzM2ipBozPnH6dDKFU%2BFTDwH82H42ptI8%3D&amp;SignatureVersion=2&amp;SignatureMethod=HmacSHA256&amp;Timestamp=2014-04-20T11%3A05%3A05%2B02%3A00"" rel=""nofollow"">https://sdb.amazonaws.com/?Action=PutAttributes&amp;DomainName=test&amp;ItemName=0&amp;Attribute.1.Name=test&amp;Attribute.1.Value=test&amp;AWSAccessKeyId=AAAAAAAAAAAAAAAAAAAA&amp;Version=2009-04-15&amp;Signature=h0lNLh%2BfpDLzM2ipBozPnH6dDKFU%2BFTDwH82H42ptI8%3D&amp;SignatureVersion=2&amp;SignatureMethod=HmacSHA256&amp;Timestamp=2014-04-20T11%3A05%3A05%2B02%3A00</a></p>

<p>Test AWSAccessKeyId = AAAAAAAAAAAAAAAAAAAA
Test AWSSecretKey = BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB</p>

<p>I have included C# files of my hashing and the request builder</p>

<pre><code>public class PutAttributesRequestMarshaller
{
    private const string ACTION = ""PutAttributes"";
    private const string METHOD = ""POST"";
    private const string SIGNATURE_METHOD = ""HmacSHA256"";
    private const string SIGNATURE_VERSION = ""2"";
    private const string VERSION = ""2009-04-15"";
    private SortedDictionary&lt;string, string&gt; AttributesDic = new SortedDictionary&lt;string, string&gt; ();
    private PutAttributesRequest request;

    public PutAttributesRequestMarshaller (PutAttributesRequest request)
    {
        this.request = request;

        for (int i = 0; i &lt; request.Attributes.Count; i++) {
            ReplaceableAttribute Attribute = request.Attributes [i];
            AttributesDic.Add (""Attribute."" + (i + 1) + "".Name"", Attribute.Name);
            AttributesDic.Add (""Attribute."" + (i + 1) + "".Value"", Attribute.Value);
            if (Attribute.Replace.Value) {
                AttributesDic.Add (""Attribute."" + (i + 1) + "".Replace"", Attribute.Replace.ToString ().ToLower ());
            }
        }
    }

    public String Marshal ()
    {
        StringBuilder sb = new StringBuilder ();

        sb.Append (""https://"" + Region + ""/"");
        sb.Append (""?Action="" + ACTION);
        sb.Append (""&amp;DomainName="" + request.DomainName);
        sb.Append (""&amp;ItemName="" + request.ItemName);
        sb.Append (Attributes);
        sb.Append (""&amp;Version="" + VERSION);
        sb.Append (""&amp;Timestamp="" + Timestamp);

        string signature = GenerateSignature ();
        string encoded = System.Net.WebUtility.UrlEncode (signature);

        sb.Append (""&amp;Signature="" + encoded);
        sb.Append (""&amp;SignatureVersion="" + SIGNATURE_VERSION);
        sb.Append (""&amp;SignatureMethod="" + SIGNATURE_METHOD);
        sb.Append (""&amp;AWSAccessKeyId="" + AWSAccessKeyId);

        return sb.ToString ();
    }

    private string Attributes {
        get {
            StringBuilder sb = new StringBuilder ();
            var enumerator = AttributesDic.GetEnumerator ();
            while (enumerator.MoveNext ()) {
                var entry = enumerator.Current;
                sb.Append (""&amp;"");
                sb.Append (System.Net.WebUtility.UrlEncode (entry.Key));
                sb.Append (""="");
                sb.Append (System.Net.WebUtility.UrlEncode (entry.Value));
            }
            return sb.ToString ();
        }
    }

    private  string AWSAccessKeyId {
        get {
            return ServiceContainer.Resolve&lt;SimpleDBClient&gt; ().AWSAccessKeyId;
        }
    }

    private  string AWSSecretKey {
        get {
            return ServiceContainer.Resolve&lt;SimpleDBClient&gt; ().AWSSecretKey;
        }
    }

    private  string Timestamp {
        get {

            DateTime withOutMili = DateTime.Now;
            string formatted = withOutMili.ToString (""yyyy-MM-ddTHH:mm:sszzzzz"");
            string encoded = System.Net.WebUtility.UrlEncode (formatted);
            return encoded;
        }
    }

    public  string Region {
        get {
            return ServiceContainer.Resolve&lt;SimpleDBClient&gt; ().Region;
        }
    }

    private string GenerateSignature ()
    {
        StringBuilder sb = new StringBuilder ();
        sb.Append (METHOD + ""\n"");
        sb.Append (Region + ""\n"");
        sb.Append (""/\n"");
        sb.Append (""&amp;AWSAccessKeyId="" + AWSAccessKeyId);
        sb.Append (""&amp;Action="" + ACTION);
        sb.Append (Attributes);
        sb.Append (""&amp;DomainName="" + request.DomainName);
        sb.Append (""&amp;ItemName="" + request.ItemName);
        sb.Append (""&amp;SignatureMethod="" + SIGNATURE_METHOD);
        sb.Append (""&amp;SignatureVersion="" + SIGNATURE_VERSION);
        sb.Append (""&amp;Timestamp="" + Timestamp);
        sb.Append (""&amp;Version="" + VERSION);

        string signature = sb.ToString ();

        ISHA256Service service = ServiceContainer.Resolve&lt;ISHA256Service&gt; ();

        string hashed = service.CreateHash (signature, AWSSecretKey);

        return hashed;
    }

    private  SimpleDBClient Client {
        get {
            return ServiceContainer.Resolve&lt;SimpleDBClient&gt; ();
        }
    }

public string CreateHash (string message, string secret)
    {
        var encoding = new System.Text.ASCIIEncoding ();
        byte[] keyByte = encoding.GetBytes (secret);
        byte[] messageBytes = encoding.GetBytes (message);
        using (var hmacsha256 = new HMACSHA256 (keyByte)) {
            byte[] hashmessage = hmacsha256.ComputeHash (messageBytes);
            return Convert.ToBase64String (hashmessage);
        }
    }
</code></pre>

<p>Thank you in advance.</p>
","<p>I found several problems with my code, the biggest was to that i used 2 different timestamps.</p>
","23312737","214","<rest><post><hmac><sha256><amazon-simpledb>","0","0","1","2014-04-26 15:10:33","23312737","0","","","","","2014-04-20 10:54:27","","","2014-04-26 15:10:33"
"57624159","Delphi & CryptoAPI - how to calculate HMAC-SHA512 hash?","<p>Does anybody know how to calculate a HMAC-SHA512 hash in Delphi 2010+ using MS CryptoAPI ?  </p>

<p>The example from MS website, <a href=""https://docs.microsoft.com/en-us/windows/win32/seccrypto/example-c-program--creating-an-hmac"" rel=""nofollow noreferrer"">https://docs.microsoft.com/en-us/windows/win32/seccrypto/example-c-program--creating-an-hmac</a> generates incorrect results.</p>

<p>I have found this answer <a href=""https://stackoverflow.com/a/41387095/2111514"">https://stackoverflow.com/a/41387095/2111514</a> to be somehow usefull (because it is manual rewrite from <a href=""https://en.wikipedia.org/wiki/HMAC"" rel=""nofollow noreferrer"">https://en.wikipedia.org/wiki/HMAC</a>), but it is not in Pascal and my attempt to refactor it to Pascal was without luck. It works, but still calculates wrong results.  </p>

<p>Can anybody help me, please?</p>

<p><strong>Edit::</strong> This is my code that I have problem with:</p>

<pre><code>uses
  Windows,
  JwaWinCrypt,
  JwaWinError;

const
  BLOCK_SIZE = 64;

type
  EHMACError = class(Exception);

function WinError(const RetVal: BOOL; const FuncName: String): BOOL;
var
  dwResult: Integer;
begin
  Result:=RetVal;
  if not RetVal then begin
    dwResult:=GetLastError();
    raise EHMACError.CreateFmt('Error [x%x]: %s failed.'#13#10'%s', [dwResult, FuncName, SysErrorMessage(dwResult)]);
  end;
end;

function TBytesToHex(const Value: TBytes): String;
const
  dictionary: Array[0..15] of Char = ('0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f');
var
  i: Integer;
begin
  Result:='';
  for i:=0 to High(Value) do
    Result:=Result + dictionary[Value[i] shr 4] + dictionary[Value[i] and $0F];
end;

function hmac(AKey, AMessage: TBytes; Algid: ALG_ID): TBytes;

  function hash(const hProv: HCRYPTPROV; hData: TBytes): TBytes;
  var
    len, cb: DWORD;
    hHash: HCRYPTHASH;
  begin
    SetLength(Result, 0);
    WinError(CryptCreateHash(hProv, Algid, 0, 0, hHash), 'CryptCreateHash');
    try
      len:=Length(hData);
      cb:=SizeOf(len);
      WinError(CryptHashData(hHash, @hData[0], len, 0), 'CryptHashData');
      WinError(CryptGetHashParam(hHash, HP_HASHSIZE, @len, cb, 0), 'CryptGetHashParam(HP_HASHSIZE)');
      SetLength(Result, len);
      WinError(CryptGetHashParam(hHash, HP_HASHVAL, @Result[0], len, 0), 'CryptGetHashParam(HP_HASHVAL)');
    finally
      WinError(CryptDestroyHash(hHash), 'CryptDestroyHash');
    end;
  end;

  function double_hash(const hProv: HCRYPTPROV; hData1, hData2: TBytes): TBytes;
  var
    len, len1, len2, cb: DWORD;
    hHash: HCRYPTHASH;
  begin
    SetLength(Result, 0);
    WinError(CryptCreateHash(hProv, Algid, 0, 0, hHash), 'DH_CryptCreateHash');
    try
      len1:=Length(hData1);
      len2:=Length(hData2);
      cb:=SizeOf(DWORD);
      WinError(CryptHashData(hHash, @hData1[0], len1, 0), 'DH_CryptHashData(hData1)');
      WinError(CryptHashData(hHash, @hData2[0], len2, 0), 'DH_CryptHashData(hData1)');
      WinError(CryptGetHashParam(hHash, HP_HASHSIZE, @len, cb, 0), 'DH_CryptGetHashParam(HP_HASHSIZE)');
      SetLength(Result, len);
      WinError(CryptGetHashParam(hHash, HP_HASHVAL, @Result[0], len, 0), 'DH_CryptGetHashParam(HP_HASHVAL)');
    finally
      WinError(CryptDestroyHash(hHash), 'DH_CryptDestroyHash');
    end;
  end;

var
  hProv: HCRYPTPROV;
  hHash: HCRYPTHASH;
  i_key_pad, o_key_pad: TBytes;
  data, ret: TBytes;
  len, i: Integer;
  c: Byte;
  ifree: Boolean;
begin
  ifree:=False;
  SetLength(Result, 0);
  SetLength(i_key_pad, BLOCK_SIZE);
  SetLength(o_key_pad, BLOCK_SIZE);
  WinError(CryptAcquireContext(hProv, Nil, MS_ENH_RSA_AES_PROV, PROV_RSA_AES, CRYPT_VERIFYCONTEXT), 'CryptAcquireContext');
  try
    data:=AKey;
    len:=Length(data);
    if len &gt; BLOCK_SIZE then begin
      data:=hash(hProv, data);
      ifree:=True;
    end;
    //
    i:=BLOCK_SIZE-1;
    while i &gt;= 0 do begin
      if i &lt; len then
        c:=data[i]
      else
        c:=0;
      i_key_pad[i]:=$36 xor c;
      o_key_pad[i]:=$5c xor c;
      Dec(i);
    end;
    data:=double_hash(hProv, i_key_pad, AMessage);
    Result:=double_hash(hProv, o_key_pad, data);
    SetLength(data, 0);
  finally
    if ifree then
      SetLength(data, 0);
    SetLength(i_key_pad, 0);
    SetLength(o_key_pad, 0);
    WinError(CryptReleaseContext(hProv, 0), 'CryptReleaseContext');
  end;
end;
</code></pre>

<p>...and it is called by:</p>

<pre><code>Result:=hmac(Password, InString, CALG_SHA_512);
</code></pre>

<p>Example:</p>

<p><code>TBytesToHex(hmac('pass', 'test', CALG_SHA_512));</code> produces (HEX encoded)</p>

<blockquote>
  <p>1319bb7baefc3fbaf07824261c240cecd04a54cd83cdf0deb68e56cadff20e7c644e2e956660ab9df47a19502173090df5ec3d0b9236d59917afc4f3607cf980</p>
</blockquote>

<p>whereas <a href=""https://www.freeformatter.com/hmac-generator.html"" rel=""nofollow noreferrer"">online HMAC calculator</a> produces</p>

<blockquote>
  <p>46beca277a5fec10beba65b0c2fb3917115f352eb8b2560e9ada0a3dbafb6c7a3fc456b1e13a07c4a9c856b633b70b2403907ca89894021772393e3f97e78684</p>
</blockquote>

<p>for the same input</p>
","<p>The whole working solution to my question, thanks to @whosrdaddy for helping.</p>

<pre><code>//
// HMAC-SHA512 - cryptoapi hash generation
//
// based on:
//   https://en.wikipedia.org/wiki/HMAC
//   https://github.com/ogay/hmac
//
// refactored from:
//   https://stackoverflow.com/questions/41384395/wrong-result-for-base64-string-of-hmac-sha1-using-crypto-api/41387095#41387095
//
unit CryptoAPI_HMAC_SHA512;

interface

uses
  SysUtils,
  Classes;

function CryptoAPI_Hash_HmacSHA512(const InString, Password: TBytes): TBytes; overload;
function CryptoAPI_Hash_HmacSHA512(const InString, Password: String): String; overload;

implementation

uses
  Windows,
  JwaWinCrypt,
  JwaWinError;

const
  BLOCK_SIZE  = 128; // bytes for SHA512

type
  EHMACError = class(Exception);

function WinError(const RetVal: BOOL; const FuncName: String): BOOL;
var
  dwResult: Integer;
begin
  Result:=RetVal;
  if not RetVal then begin
    dwResult:=GetLastError();
    raise EHMACError.CreateFmt('Error [x%x]: %s failed.'#13#10'%s', [dwResult, FuncName, SysErrorMessage(dwResult)]);
  end;
end;

function hmac(AKey, AMessage: TBytes; Algid: ALG_ID): TBytes;

  function hash(const hProv: HCRYPTPROV; hData1, hData2: TBytes): TBytes;
  var
    len, len1, len2, cb: DWORD;
    hHash: HCRYPTHASH;
  begin
    SetLength(Result, 0);
    WinError(CryptCreateHash(hProv, Algid, 0, 0, hHash), 'CryptCreateHash');
    try
      len:=0;
      len1:=Length(hData1);
      len2:=Length(hData2);
      cb:=SizeOf(DWORD);
      WinError(CryptHashData(hHash, @hData1[0], len1, 0), 'CryptHashData(hData1)');
      if len2 &gt; 0 then
        WinError(CryptHashData(hHash, @hData2[0], len2, 0), 'CryptHashData(hData1)');
      WinError(CryptGetHashParam(hHash, HP_HASHSIZE, @len, cb, 0), 'CryptGetHashParam(HP_HASHSIZE)');
      SetLength(Result, len);
      WinError(CryptGetHashParam(hHash, HP_HASHVAL, @Result[0], len, 0), 'CryptGetHashParam(HP_HASHVAL)');
    finally
      WinError(CryptDestroyHash(hHash), 'CryptDestroyHash');
    end;
  end;

var
  hProv: HCRYPTPROV;
  i_key_pad, o_key_pad: TBytes;
  data: TBytes;
  emptyArray: TBytes;
  len, i: Integer;
  c: Byte;
  ifree: Boolean;
begin
  ifree:=False;
  SetLength(Result, 0);
  SetLength(emptyArray, 0);
  SetLength(i_key_pad, BLOCK_SIZE);
  SetLength(o_key_pad, BLOCK_SIZE);
  WinError(CryptAcquireContext(hProv, Nil, MS_ENH_RSA_AES_PROV, PROV_RSA_AES, CRYPT_VERIFYCONTEXT), 'CryptAcquireContext');
  try
    data:=AKey;
    len:=Length(data);
    if len &gt; BLOCK_SIZE then begin
      data:=hash(hProv, data, emptyArray);
      len:=Length(data);
      ifree:=True;
    end;
    //
    i:=BLOCK_SIZE-1;
    while i &gt;= 0 do begin
      c:=0;
      if i &lt; len then
        c:=data[i];
      i_key_pad[i]:=$36 xor c;
      o_key_pad[i]:=$5c xor c;
      Dec(i);
    end;
    if ifree then
      SetLength(data, 0);
    data:=hash(hProv, i_key_pad, AMessage);
    Result:=hash(hProv, o_key_pad, data);
    SetLength(data, 0);
  finally
    SetLength(i_key_pad, 0);
    SetLength(o_key_pad, 0);
    WinError(CryptReleaseContext(hProv, 0), 'CryptReleaseContext');
  end;
end;

function TBytesToHex(const Value: TBytes): String;
const
  dictionary: Array[0..15] of Char = ('0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f');
var
  i: Integer;
begin
  Result:='';
  for i:=0 to High(Value) do
    Result:=Result + dictionary[Value[i] shr 4] + dictionary[Value[i] and $0F];
end;

// source: https://stackoverflow.com/a/26892830/2111514
function MBCSString(const s: UnicodeString; CodePage: Word): RawByteString;
var
  enc: TEncoding;
  bytes: TBytes;
begin
  enc:=TEncoding.GetEncoding(CodePage);
  try
    bytes:=enc.GetBytes(s);
    SetLength(Result, Length(bytes));
    Move(Pointer(bytes)^, Pointer(Result)^, Length(bytes));
    SetCodePage(Result, CodePage, False);
  finally
    enc.Free;
  end;
end;

function UnicodeStringToTBytes(const Value: String): TBytes;
var
  ansi: AnsiString;
begin
  ansi:=MBCSString(Value, 65001); // Unicode (UTF-8) codepage
  Result:=BytesOf(ansi);
  ansi:='';
end;

function CryptoAPI_Hash_HmacSHA512(const InString, Password: TBytes): TBytes;
begin
  SetLength(Result, 0);
  if Length(Password) = 0 then
    raise EHMACError.Create('Error: Password length must be greater then 0!');

  Result:=hmac(Password, InString, CALG_SHA_512);
end;

function CryptoAPI_Hash_HmacSHA512(const InString, Password: String): String;
var
  input_bytes, input_password: TBytes;
begin
  input_bytes:=UnicodeStringToTBytes(InString);
  input_password:=UnicodeStringToTBytes(Password);
  try
    Result:=TBytesToHex(CryptoAPI_Hash_HmacSHA512(input_bytes, input_password));
  finally
    SetLength(input_password, 0);
    SetLength(input_bytes, 0);
  end;
end;

end.
</code></pre>
","57627897","212","<delphi><hash><delphi-2010><hmac><cryptoapi>","1","1","1","2019-08-28 10:16:01","57627897","10","","2111514","","2019-08-23 13:41:31","2019-08-23 10:13:39","","2019-08-28 10:16:01","2019-08-23 14:01:03"
"38908196","How can I configure Apigility to send HMAC-Authorization response headers?","<p>I'm implementing an authorization in Apigility using Hmac. Basically I'm using the classe of this fella both for client and server (<a href=""https://github.com/reinaldoborges/rb-sphinx-hmac-zf2-client"" rel=""nofollow"">https://github.com/reinaldoborges/rb-sphinx-hmac-zf2-client</a>).</p>

<p>Now I have this piece of code before sending a GET to my Api.</p>

<pre><code>$hmac = new HMAC(
            new HMACv0(), 
            new PHPHash('sha256'), 
            new StaticKey('[PRE-SHARED KEY]'), 
            new DummyNonce()       
    );

    $hmac-&gt;setKeyId('certkey');
    $hmac-&gt;setNonceValue('certNonce');


    $uri = ""http://apicert.local/certificados"";
    $cliente = new HMACHttpClient($uri);
    $cliente-&gt;setMethod('GET');
    $cliente-&gt;setHmac($hmac);

    try {
        $cliente-&gt;send();

        /**
         * Resposta
         */
        echo ""Request HMAC Header:"", PHP_EOL; **I'm asking for a Reply using HMAC-Authorization type of header **
        echo '     ', HMACHttpClient::HEADER_NAME, ' = ', $cliente-&gt;getHeader(HMACHttpClient::HEADER_NAME), PHP_EOL, PHP_EOL;
    } catch (Exception $e) {
        /**
         * ERRO
         */
        echo ""##### ERRO #####"", PHP_EOL;
        echo $e-&gt;getCode(), ' : ', $e-&gt;getMessage(), PHP_EOL;
        echo ""##### ERRO #####"", PHP_EOL, PHP_EOL;
    }
    $response = $cliente-&gt;getResponse();
    echo ""Response Status Code: "", $response-&gt;getStatusCode(), PHP_EOL, PHP_EOL;
    echo ""Response Headers: "";
    print_r($response-&gt;getHeaders()-&gt;toArray());
    echo PHP_EOL;
    echo ""Response Cookies:"", PHP_EOL;
    $cookies = $response-&gt;getCookie();
    foreach ($cookies as $cookie) {
        echo '     ', $cookie-&gt;toString(), PHP_EOL;
    }
    echo PHP_EOL;
    echo ""Response Body:"", PHP_EOL;
    echo $response-&gt;getBody();
    echo PHP_EOL, PHP_EOL;
</code></pre>

<p>And I'm receiving a 406 Status Code that refers that this kind of header is not acceptable. I tried to add in content negotion whitelist but there is not this option. How can I receive the authorization from the server then?</p>

<p>Request HMAC Header: HMAC-Authentication = 1:certkey:certNonce:f9c9edcda43df5c466e54449f31900a6f9387afa32168327a0873a69b023abef Response Status Code: 406 Response Headers: Array ( [Date] => Thu, 11 Aug 2016 23:55:33 GMT [Server] => Apache/2.4.7 (Ubuntu) [Access-Control-Max-Age] => 1000 [Access-Control-Allow-Headers] => X-Requested-With, Content-Type, Origin, Authorization, Accept, Client-Security-Token, Accept-Encoding [Access-Control-Allow-Methods] => POST, GET, OPTIONS, DELETE, PUT [Access-Control-Allow-Origin] => * [Content-Length] => 149 [Connection] => close [Content-Type] => application/problem+json ) Response Cookies: Response Body: {""type"":""<a href=""http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html"" rel=""nofollow"">http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html</a>"",""title"":""Not Acceptable"",""status"":406,""detail"":""Cannot honor Accept type specified""} </p>
","<p>You will have to create a new Authorization type.
In the APigility ui there is a button in the top named Authorization.
Here you can add any authorization adapter you want. Even the hmac adapter if you want.</p>

<p>Personally i have used this to create a jwt adapter.</p>

<p>Now, this adapter should extend <code>ZF\MvcAuth\Authentication\AdapterInterface</code>.
I've also added this adapter to my service manager.</p>
","38989844","209","<http-headers><hmac><apigility>","0","0","1","2016-08-17 06:46:40","","0","","","","","2016-08-12 00:46:40","","","2016-08-17 06:46:40"
"54133098","generate hmac sha1 with unicode escaped payload, oracle plsql","<p>so i have an ORDS endpoint (Oracle Rest Data Services) that receives a JSON payload from Facebook API, and a variable, X-Hub-Signature, which comes in the header of the request.</p>

<p>i have to validate the request i receive, so i know it's from Facebook.</p>

<p>i have to generate a hash that receives the payload (BLOB) and a key (string)  that both facebook and i share (app_secret), and then i compare it to the value of X-Hub-Signature, so i can confirm it's a valid request.</p>

<p>problem is, Facebook says:
""Please note that we generate the signature using an escaped unicode version of the payload, with lowercase hex digits. If you just calculate against the decoded bytes, you will end up with a different signature. For example, the string äöå should be escaped to \u00e4\u00f6\u00e5.""</p>

<p>So far my hashes are a match to the payloads i receive, but i tried with those äöå characters and i can't know for sure if it's working, since all hmac online encoders don't look that good and also i don't know how to unicode escape them (on the online encoders).</p>

<p>so far i have this:</p>

<pre><code>FUNCTION validate_payload (p_x_hub_signature      in     varchar2,
                           p_json_payload         in     blob)
RETURN varchar2
IS
    v_app_secret        varchar2(4000) := '2f2f2f2f2f2f2f';
    l_mac               raw(10000);
    v_x_hub_signature   varchar2(4000);

BEGIN

    l_mac := dbms_crypto.mac (src =&gt; p_json_payload,
                              typ =&gt; dbms_crypto.hmac_sh1,
                              key =&gt; UTL_I18N.STRING_TO_RAW (v_app_secret, 'AL32UTF8'));

    v_x_hub_signature := 'sha1='||lower(l_mac);

    return v_x_hub_signature;      

END;
</code></pre>

<p>can you give any feedback on this?
is this right?</p>

<p>thanks in advance, sorry bad english or explanation!</p>
","<p>Here is a PL/SQL solution. It requires less coding than Sentinel's proposal and might be more clear.</p>

<pre><code>declare
    v_app_secret varchar2(100) := 'äaöå ab\ABC';
    escaped varchar2(100);
    item varchar2(6);
begin

    escaped := replace(regexp_replace(ASCIISTR(v_app_secret), '\\([[:xdigit:]]{4})', '\u\1'), '\u005C', '\\');

    for i in 1..regexp_count(escaped, '\\u[[:xdigit:]]{4}') loop
        item := regexp_substr(escaped, '\\u[[:xdigit:]]{4}', 1, i);
        escaped := replace(escaped, item, lower(item));        
    end loop;
    dbms_output.put_line(escaped);

end;


\u00e4a\u00f6\u00e5 ab\\ABC
</code></pre>

<p>Assuming <code>\</code> needs to be translated to <code>\\</code></p>
","54134194","209","<oracle><api><unicode><sha1><hmac>","0","0","3","2019-01-14 14:13:27","","3","","","","","2019-01-10 16:33:33","","2019-01-10 19:05:09","2019-01-10 17:42:28"
"54133098","generate hmac sha1 with unicode escaped payload, oracle plsql","<p>so i have an ORDS endpoint (Oracle Rest Data Services) that receives a JSON payload from Facebook API, and a variable, X-Hub-Signature, which comes in the header of the request.</p>

<p>i have to validate the request i receive, so i know it's from Facebook.</p>

<p>i have to generate a hash that receives the payload (BLOB) and a key (string)  that both facebook and i share (app_secret), and then i compare it to the value of X-Hub-Signature, so i can confirm it's a valid request.</p>

<p>problem is, Facebook says:
""Please note that we generate the signature using an escaped unicode version of the payload, with lowercase hex digits. If you just calculate against the decoded bytes, you will end up with a different signature. For example, the string äöå should be escaped to \u00e4\u00f6\u00e5.""</p>

<p>So far my hashes are a match to the payloads i receive, but i tried with those äöå characters and i can't know for sure if it's working, since all hmac online encoders don't look that good and also i don't know how to unicode escape them (on the online encoders).</p>

<p>so far i have this:</p>

<pre><code>FUNCTION validate_payload (p_x_hub_signature      in     varchar2,
                           p_json_payload         in     blob)
RETURN varchar2
IS
    v_app_secret        varchar2(4000) := '2f2f2f2f2f2f2f';
    l_mac               raw(10000);
    v_x_hub_signature   varchar2(4000);

BEGIN

    l_mac := dbms_crypto.mac (src =&gt; p_json_payload,
                              typ =&gt; dbms_crypto.hmac_sh1,
                              key =&gt; UTL_I18N.STRING_TO_RAW (v_app_secret, 'AL32UTF8'));

    v_x_hub_signature := 'sha1='||lower(l_mac);

    return v_x_hub_signature;      

END;
</code></pre>

<p>can you give any feedback on this?
is this right?</p>

<p>thanks in advance, sorry bad english or explanation!</p>
","<p>Starting with @Wernfried Domscheit's method of using <code>ASCIISTR</code> and <code>regexp_replace</code>, it can be extended to a whole list of replacements to get the lower case versions:</p>

<pre><code>with sample(str) as (
  select 'äöå ab\ABC' from dual
), patterns(ord, pat, rep) as (
  select 1, '\\A([[:xdigit:]]{3})', '\\a\1' from dual union all
  select 2, '\\B([[:xdigit:]]{3})', '\\b\1' from dual union all
  select 3, '\\C([[:xdigit:]]{3})', '\\c\1' from dual union all
  select 4, '\\D([[:xdigit:]]{3})', '\\d\1' from dual union all
  select 5, '\\E([[:xdigit:]]{3})', '\\e\1' from dual union all
  select 6, '\\F([[:xdigit:]]{3})', '\\f\1' from dual union all
  select 7, '\\([[:xdigit:]])A([[:xdigit:]]{2})', '\\\1a\2' from dual union all
  select 8, '\\([[:xdigit:]])B([[:xdigit:]]{2})', '\\\1b\2' from dual union all
  select 9, '\\([[:xdigit:]])C([[:xdigit:]]{2})', '\\\1c\2' from dual union all
  select 10, '\\([[:xdigit:]])D([[:xdigit:]]{2})', '\\\1d\2' from dual union all
  select 11, '\\([[:xdigit:]])E([[:xdigit:]]{2})', '\\\1e\2' from dual union all
  select 12, '\\([[:xdigit:]])F([[:xdigit:]]{2})', '\\\1f\2' from dual union all
  select 13, '\\([[:xdigit:]]{2})A([[:xdigit:]])', '\\\1a\2' from dual union all
  select 14, '\\([[:xdigit:]]{2})B([[:xdigit:]])', '\\\1b\2' from dual union all
  select 15, '\\([[:xdigit:]]{2})C([[:xdigit:]])', '\\\1c\2' from dual union all
  select 16, '\\([[:xdigit:]]{2})D([[:xdigit:]])', '\\\1d\2' from dual union all
  select 17, '\\([[:xdigit:]]{2})E([[:xdigit:]])', '\\\1e\2' from dual union all
  select 18, '\\([[:xdigit:]]{2})F([[:xdigit:]])', '\\\1f\2' from dual union all
  select 19, '\\([[:xdigit:]]{3})A', '\\\1a' from dual union all
  select 20, '\\([[:xdigit:]]{3})B', '\\\1b' from dual union all
  select 21, '\\([[:xdigit:]]{3})C', '\\\1c' from dual union all
  select 22, '\\([[:xdigit:]]{3})D', '\\\1d' from dual union all
  select 23, '\\([[:xdigit:]]{3})E', '\\\1e' from dual union all
  select 24, '\\([[:xdigit:]]{3})F', '\\\1f' from dual union all
  select 25, '\\([[:xdigit:]]{4})', '\u\1' from dual union all
  select 26, '\\u005c', '\\\\' from dual
), recur(ord, str, tr) as (
  select ord, str
       , REGEXP_REPLACE(asciistr(str), pat, rep)
    from sample
    join patterns
      on ord = 1
  union all
  select recur.ord+1, str
       , REGEXP_REPLACE(tr, pat, rep)
    from recur
    join patterns
      on patterns.ord = recur.ord + 1
)
select * from recur where ord = 26;
</code></pre>

<p>If you want a PL/SQL function to do it, the series of transformations can be nested up and put in a function. If you don't want the final transformation of \u005c to \ just remove the outer regexp_replace:</p>

<pre><code>create or replace function Escape_Unicode(pCLOB clob) RETURN clob is
BEGIN
  return  regexp_replace(
            regexp_replace(
              regexp_replace(
                regexp_replace(
                  regexp_replace(
                    regexp_replace(
                      regexp_replace(
                        regexp_replace(
                          regexp_replace(
                            regexp_replace(
                              regexp_replace(
                                regexp_replace(
                                  regexp_replace(
                                    regexp_replace(
                                      regexp_replace(
                                        regexp_replace(
                                          regexp_replace(
                                            regexp_replace(
                                              regexp_replace(
                                                regexp_replace(
                                                  regexp_replace(
                                                    regexp_replace(
                                                      regexp_replace(
                                                        regexp_replace(
                                                          regexp_replace(
                                                            regexp_replace(
                                                              asciistr(pClOB)
                                                              , '\\A([[:xdigit:]]{3})'
                                                              , '\\a\1'
                                                            )
                                                            , '\\B([[:xdigit:]]{3})'
                                                            , '\\b\1'
                                                          )
                                                          , '\\C([[:xdigit:]]{3})'
                                                          , '\\c\1'
                                                        )
                                                        , '\\D([[:xdigit:]]{3})'
                                                        , '\\d\1'
                                                      )
                                                      , '\\E([[:xdigit:]]{3})'
                                                      , '\\e\1'
                                                    )
                                                    , '\\F([[:xdigit:]]{3})'
                                                    , '\\f\1'
                                                  )
                                                  , '\\([[:xdigit:]])A([[:xdigit:]]{2})'
                                                  , '\\\1a\2'
                                                )
                                                , '\\([[:xdigit:]])B([[:xdigit:]]{2})'
                                                , '\\\1b\2'
                                              )
                                              , '\\([[:xdigit:]])C([[:xdigit:]]{2})'
                                              , '\\\1c\2'
                                            )
                                            , '\\([[:xdigit:]])D([[:xdigit:]]{2})'
                                            , '\\\1d\2'
                                          )
                                          , '\\([[:xdigit:]])E([[:xdigit:]]{2})'
                                          , '\\\1e\2'
                                        )
                                        , '\\([[:xdigit:]])F([[:xdigit:]]{2})'
                                        , '\\\1f\2'
                                      )
                                      , '\\([[:xdigit:]]{2})A([[:xdigit:]])'
                                      , '\\\1a\2'
                                    )
                                    , '\\([[:xdigit:]]{2})B([[:xdigit:]])'
                                    , '\\\1b\2'
                                  )
                                  , '\\([[:xdigit:]]{2})C([[:xdigit:]])'
                                  , '\\\1c\2'
                                )
                                , '\\([[:xdigit:]]{2})D([[:xdigit:]])'
                                , '\\\1d\2'
                              )
                              , '\\([[:xdigit:]]{2})E([[:xdigit:]])'
                              , '\\\1e\2'
                            )
                            , '\\([[:xdigit:]]{2})F([[:xdigit:]])'
                            , '\\\1f\2'
                          )
                          , '\\([[:xdigit:]]{3})A'
                          , '\\\1a'
                        )
                        , '\\([[:xdigit:]]{3})B'
                        , '\\\1b'
                      )
                      , '\\([[:xdigit:]]{3})C'
                      , '\\\1c'
                    )
                    , '\\([[:xdigit:]]{3})D'
                    , '\\\1d'
                  )
                  , '\\([[:xdigit:]]{3})E'
                  , '\\\1e'
                )
                , '\\([[:xdigit:]]{3})F'
                , '\\\1f'
              )
              , '\\([[:xdigit:]]{4})'
              , '\u\1'
            )
            , '\\u005c'
            , '\\\\'
          );
end;
/
select escape_unicode('äöå ab\ABCd') from dual;
</code></pre>
","54135013","209","<oracle><api><unicode><sha1><hmac>","0","0","3","2019-01-14 14:13:27","","3","","","","","2019-01-10 16:33:33","","2019-01-10 19:47:23","2019-01-10 18:41:35"
"54133098","generate hmac sha1 with unicode escaped payload, oracle plsql","<p>so i have an ORDS endpoint (Oracle Rest Data Services) that receives a JSON payload from Facebook API, and a variable, X-Hub-Signature, which comes in the header of the request.</p>

<p>i have to validate the request i receive, so i know it's from Facebook.</p>

<p>i have to generate a hash that receives the payload (BLOB) and a key (string)  that both facebook and i share (app_secret), and then i compare it to the value of X-Hub-Signature, so i can confirm it's a valid request.</p>

<p>problem is, Facebook says:
""Please note that we generate the signature using an escaped unicode version of the payload, with lowercase hex digits. If you just calculate against the decoded bytes, you will end up with a different signature. For example, the string äöå should be escaped to \u00e4\u00f6\u00e5.""</p>

<p>So far my hashes are a match to the payloads i receive, but i tried with those äöå characters and i can't know for sure if it's working, since all hmac online encoders don't look that good and also i don't know how to unicode escape them (on the online encoders).</p>

<p>so far i have this:</p>

<pre><code>FUNCTION validate_payload (p_x_hub_signature      in     varchar2,
                           p_json_payload         in     blob)
RETURN varchar2
IS
    v_app_secret        varchar2(4000) := '2f2f2f2f2f2f2f';
    l_mac               raw(10000);
    v_x_hub_signature   varchar2(4000);

BEGIN

    l_mac := dbms_crypto.mac (src =&gt; p_json_payload,
                              typ =&gt; dbms_crypto.hmac_sh1,
                              key =&gt; UTL_I18N.STRING_TO_RAW (v_app_secret, 'AL32UTF8'));

    v_x_hub_signature := 'sha1='||lower(l_mac);

    return v_x_hub_signature;      

END;
</code></pre>

<p>can you give any feedback on this?
is this right?</p>

<p>thanks in advance, sorry bad english or explanation!</p>
","<p>i just realized, i may have induced you into error. as Sentinel mentioned, v_app_secret doesn't need to be translated, only p_json_payload, which is a BLOB.</p>

<p>so far i've come up with this: do you think it's okay? i have no way to know for sure :/</p>

<pre><code>FUNCTION validate_payload (p_x_hub_signature      in     varchar2,
                           p_json_payload         in     blob)
RETURN varchar2
IS
    v_app_secret        varchar2(4000) := '3f2f2f2f23f23f23';
    l_mac               raw(10000);
    v_x_hub_signature   varchar2(4000);
BEGIN
    l_mac := dbms_crypto.mac (src =&gt; UTL_I18N.STRING_TO_RAW (utl_raw.cast_to_varchar2 (p_json_payload),'AL32UTF8'),
                              typ =&gt; dbms_crypto.hmac_sh1,
                              key =&gt; UTL_I18N.STRING_TO_RAW (v_app_secret, 'AL32UTF8'));

    v_x_hub_signature := 'sha1='||lower(l_mac);

    dbms_output.put_line(v_x_hub_signature);

    return v_x_hub_signature;      

END;
</code></pre>
","54183176","209","<oracle><api><unicode><sha1><hmac>","0","0","3","2019-01-14 14:13:27","","3","","","","","2019-01-10 16:33:33","","","2019-01-14 14:13:27"
"56704765","How do create a Hex encoded HmacSHA256 secure hash in JS?","<p>I have a project with the following Java Code that works...</p>

<pre><code>static String generateHashKey (String apiKey, String msg) throws GeneralSecurityException{

    Mac hmacSha256 = Mac.getInstance(""HmacSHA256"");
    SecretKeySpec secretKey = new SecretKeySpec(apiKey.getBytes(), ""HmacSHA256"");
    hmacSha256.init(secretKey);
    byte[] bytes = hmacSha256.doFinal(msg.getBytes());

    return Hex.encodeHexString(bytes).replace(""-"","""");
} 
</code></pre>

<p>I am trying to replace this with a js function like...</p>

<pre><code>import crypto from ""crypto"";
...
const eMessage = crypto.createHmac(""SHA256"", apiKey).update(message).digest(""base64"");
</code></pre>

<p>But it looks to be producing different hashes. How do I ensure the same hash for both? What am I missing?</p>

<p><em>UPDATE</em></p>

<p>Per the comment and link I tried</p>

<pre><code>import crypto from ""crypto"";
import fs from ""fs"";
import moment from ""moment"";
import axios from ""axios"";
import hmacSHA256 from 'crypto-js/hmac-sha256';
import sha256 from 'crypto-js/sha256';
import Base64 from 'crypto-js/enc-base64';
....
const eMessage = Base64.stringify(hmacSHA256(message, key));
const eMessage2 = crypto.createHmac(""SHA256"", key).update(message).digest(""base64"");
console.log(eMessage)
console.log(eMessage2)
</code></pre>

<p>Both of the JS libs return the same (Which is good) but it doesn't match the Java which is bad.</p>
","<p>So the problem I was having was that it was not in base64 and was instead in Hex...</p>

<pre><code>import hmacSHA256 from 'crypto-js/hmac-sha256';
import sha256 from 'crypto-js/sha256';
import Hex from 'crypto-js/enc-hex'
const bytes = hmacSHA256(message, key);
const eMessage = bytes.toString(Hex);
</code></pre>
","56705878","208","<javascript><encryption><hmac>","0","0","1","2019-06-21 17:23:13","","2","","9335205","","2019-06-21 17:23:13","2019-06-21 13:50:07","","","2019-06-21 14:59:08"
"14457741","HMACSHA1 SSL issue","<p>I have the following code which creates a hash from a password and then compares it with a stored hashed password in the db. All works fine over http. This for an asp.net webforms application running under c# 4.0</p>

<pre><code>HMACSHA1 hash = new HMACSHA1();
hash.Key = Encoding.Unicode.GetBytes(password);
encodedPassword = Convert.ToBase64String(hash.ComputeHash(Encoding.Unicode.GetBytes(password)));
</code></pre>

<p>However when running over https/ssl the encoded password is different and therefore the user cannot login.</p>

<p>Does the .net framework do something different when computing hash when going over SSL?</p>

<p>If I step through the code and copy the encoded password and update my db then over SSL I can login.</p>

<p>Any ideas?</p>

<p>Many thanks</p>
","<p>Please try setting Globalization settings as defined in MSDN article at <a href=""http://msdn.microsoft.com/en-CA/library/39d1w2xf%28v=vs.100%29.aspx"" rel=""nofollow"">http://msdn.microsoft.com/en-CA/library/39d1w2xf%28v=vs.100%29.aspx</a></p>

<p>This will ensure that the hash.key is uniform across your application which in turn, will ensure that the computed hash is identical every time it is computed with a key.</p>
","16239027","208","<c#><asp.net><ssl><sha1><hmac>","5","1","1","2013-11-03 15:11:34","","4","","411022","","2013-11-03 15:11:34","2013-01-22 11:42:26","","","2013-04-26 14:34:40"
"28466625","Authentication Failure when trying to list shares in Azure Files service using PowerShell","<p>I am trying to authenticate to Azure Files Preview using PowerShell by hitting the REST API with Invoke-RestMethod. I am doing my best to follow the instructions provided here: <a href=""https://msdn.microsoft.com/en-us/library/azure/dd179428.aspx"" rel=""nofollow"">https://msdn.microsoft.com/en-us/library/azure/dd179428.aspx</a> </p>

<p>This is my script:</p>

<pre><code>$accountname = ""testaccount""
$xmsdate = get-date
$xmsdate = $xmsdate.addhours(6)
$xmsdate = $xmsdate.toString('r')
$accesskey = 'lfksZQh0nasdfasd0KeMI+1alslv8ukK39Rsoelsldiq1r+zed9r4bH5uRyba+/QCwwvdGotw=='
$message = ""GET\n\n\n\n\n\n\n\n\n\n\n\nx-ms-date:"" + $xmsdate + ""\nx-ms-version:2014-02-14\n/"" + $accountname + ""/ comp:list\nrestype:share\ntimeout:20""

$hmacsha = New-Object System.Security.Cryptography.HMACSHA256
$hmacsha.key = [Text.Encoding]::ASCII.GetBytes($accesskey)
$signature = $hmacsha.ComputeHash([Text.Encoding]::ASCII.GetBytes($message))
$signature = [Convert]::ToBase64String($signature)
$headers = New-Object ""System.Collections.Generic.Dictionary[[String],[String]]""
$headers.Add(""x-ms-version"", '2014-02-14')
$headers.Add(""x-ms-date"", $xmsdate)
$headers.Add(""Authorization"", ""SharedKey "" + $accountname + "":"" + $signature)
$uri = ""http://"" + $accountname + "".file.core.windows.net/?comp=list""
invoke-restmethod -Uri $uri -Headers $headers
</code></pre>

<p>The error I get is ""The MAC signature found in the HTTP request ... is not the same as any
computed signature. Server used following string to sign: 'GET x-ms-date:Wed, 11 Feb 2015 23:25:06 GMT x-ms-version:2014-02-14 /testaccount/ comp:list"" </p>

<p>I found the code which encrypts the message from here: <a href=""https://gist.github.com/jokecamp/2c1a67b8f277797ecdb3"" rel=""nofollow"">https://gist.github.com/jokecamp/2c1a67b8f277797ecdb3</a></p>
","<p>There were a few things I discovered:</p>

<ul>
<li><p><strong>Date/Time in UTC</strong></p>

<p>$xmsdate = get-date<br>
$xmsdate = $xmsdate.addhours(6)<br>
$xmsdate = $xmsdate.toString('r')</p></li>
</ul>

<p>Since the date/time must be in UTC, a better way to do it would be like this:</p>

<pre><code>$xmsdate = get-date
$xmsdate = $xmsdate.ToUniversalTime()
$xmsdate = $xmsdate.toString('r')
</code></pre>

<ul>
<li><strong>""\n"" causes problem</strong></li>
</ul>

<p>Instead of using <code>\n</code> for new line character, use ""$([char]10"" or ""`n"" (<a href=""https://twitter.com/gmantri/status/565694148637097984"" rel=""nofollow"">https://twitter.com/gmantri/status/565694148637097984</a>)</p>

<pre><code>$newLine = $([char]10);
$message = ""GET"" + $newLine + $newLine + $newLine + $newLine + $newLine + $newLine + $newLine + $newLine + $newLine + $newLine + $newLine + $newLine + ""x-ms-date:"" + $xmsdate + $newLine + ""x-ms-version:2014-02-14"" + $newLine + ""/"" + $accountname + ""/"" + $newLine + ""comp:list"";
</code></pre>

<ul>
<li><p><strong>Use <code>Convert.FromBase64String</code> to convert account key into byte array</strong></p>

<p>$hmacsha = New-Object System.Security.Cryptography.HMACSHA256;</p>

<p>$hmacsha.key = [Convert]::FromBase64String($accesskey);</p></li>
<li><p><strong>Query string parameters must be the same in both URL and signature calculation</strong>: In your case, you were including <code>timeout</code> parameter in signature calculation but it was not provided in the URL query string.</p></li>
</ul>

<p>Based on these, please try the script below:</p>

<pre><code>$accountname = ""accountname""
$xmsdate = get-date
$xmsdate = $xmsdate.ToUniversalTime()
$xmsdate = $xmsdate.toString('r')
$accesskey = 'accountkey'
$newLine = $([char]10);
$message = ""GET"" + $newLine + $newLine + $newLine + $newLine + $newLine + $newLine + $newLine + $newLine + $newLine + $newLine + $newLine + $newLine + ""x-ms-date:"" + $xmsdate + $newLine + ""x-ms-version:2014-02-14"" + $newLine + ""/"" + $accountname + ""/"" + $newLine + ""comp:list"";
$hmacsha = New-Object System.Security.Cryptography.HMACSHA256
$hmacsha.key = [Convert]::FromBase64String($accesskey)
$signature = $hmacsha.ComputeHash([Text.Encoding]::UTF8.GetBytes($message))
$signature = [Convert]::ToBase64String($signature)
$headers = New-Object ""System.Collections.Generic.Dictionary[[String],[String]]""
$headers.Add(""x-ms-version"", ""2014-02-14"")
$headers.Add(""x-ms-date"", $xmsdate)
$headers.Add(""Authorization"", ""SharedKey "" + $accountname + "":"" + $signature)
$uri = ""http://"" + $accountname + "".file.core.windows.net/?comp=list""
invoke-restmethod -Uri $uri -Headers $headers
</code></pre>
","28468003","207","<c#><powershell><azure><azure-storage><hmac>","1","3","2","2015-02-12 03:04:00","28468003","0","","","","","2015-02-11 23:30:07","","2015-02-12 03:04:00","2015-02-12 01:58:37"
"28466625","Authentication Failure when trying to list shares in Azure Files service using PowerShell","<p>I am trying to authenticate to Azure Files Preview using PowerShell by hitting the REST API with Invoke-RestMethod. I am doing my best to follow the instructions provided here: <a href=""https://msdn.microsoft.com/en-us/library/azure/dd179428.aspx"" rel=""nofollow"">https://msdn.microsoft.com/en-us/library/azure/dd179428.aspx</a> </p>

<p>This is my script:</p>

<pre><code>$accountname = ""testaccount""
$xmsdate = get-date
$xmsdate = $xmsdate.addhours(6)
$xmsdate = $xmsdate.toString('r')
$accesskey = 'lfksZQh0nasdfasd0KeMI+1alslv8ukK39Rsoelsldiq1r+zed9r4bH5uRyba+/QCwwvdGotw=='
$message = ""GET\n\n\n\n\n\n\n\n\n\n\n\nx-ms-date:"" + $xmsdate + ""\nx-ms-version:2014-02-14\n/"" + $accountname + ""/ comp:list\nrestype:share\ntimeout:20""

$hmacsha = New-Object System.Security.Cryptography.HMACSHA256
$hmacsha.key = [Text.Encoding]::ASCII.GetBytes($accesskey)
$signature = $hmacsha.ComputeHash([Text.Encoding]::ASCII.GetBytes($message))
$signature = [Convert]::ToBase64String($signature)
$headers = New-Object ""System.Collections.Generic.Dictionary[[String],[String]]""
$headers.Add(""x-ms-version"", '2014-02-14')
$headers.Add(""x-ms-date"", $xmsdate)
$headers.Add(""Authorization"", ""SharedKey "" + $accountname + "":"" + $signature)
$uri = ""http://"" + $accountname + "".file.core.windows.net/?comp=list""
invoke-restmethod -Uri $uri -Headers $headers
</code></pre>

<p>The error I get is ""The MAC signature found in the HTTP request ... is not the same as any
computed signature. Server used following string to sign: 'GET x-ms-date:Wed, 11 Feb 2015 23:25:06 GMT x-ms-version:2014-02-14 /testaccount/ comp:list"" </p>

<p>I found the code which encrypts the message from here: <a href=""https://gist.github.com/jokecamp/2c1a67b8f277797ecdb3"" rel=""nofollow"">https://gist.github.com/jokecamp/2c1a67b8f277797ecdb3</a></p>
","<p>Newline character in PowerShell is `n and not \n. :)</p>

<pre><code>$message = ""GET`n`n`n`n`n`n`n`n`n`n`n`nx-ms-date:"" + $xmsdate + ""`nx-ms-version:2014-02-14`n/"" + $accountname + ""/ comp:list`nrestype:share`ntimeout:20""
</code></pre>
","28468389","207","<c#><powershell><azure><azure-storage><hmac>","1","2","2","2015-02-12 03:04:00","28468003","0","","","","","2015-02-11 23:30:07","","","2015-02-12 02:44:08"
"49251949","Google-App-Script vs php in encoding base64","<p>This php code decodes the secret key before hashing with SHA 512</p>

<pre><code>$API_SECRET_KEY=""W0+m0Dc9GMN9yDVeq3GMDsJ49WasEhQHkNHNuDw3wNg="";
$BDAPI_SECRET_KEY=base64_decode($API_SECRET_KEY);
$HMAC_SIGN = base64_encode(hash_hmac('sha512',$MESSAGE,$BDAPI_SECRET_KEY,true));
echo $HMAC_SIGN;

BfVNi21gY09c8M18cWBRBgo1W9pAlXM99ZVoF7Kz2ETFnIuvXjj8NRvRgn/GaT/m6YJ8efsr5s9EDbIhznAaag==
</code></pre>

<p>I want to replicate this in google app script</p>

<pre><code>var Secret = ""W0+m0Dc9GMN9yDVeq3GMDsJ49WasEhQHkNHNuDw3wNg=""  
var BDSecret= Utilities.base64Decode(Secret)
var hmac = Utilities.base64Encode(Utilities.computeHmacSignature(Utilities.MacAlgorithm.HMAC_SHA_512, message, BDSecret ));
    Logger.log(hmac)

ew5KhLWSJixn8zw4s6VkpYIwvGBjrmjY3LhNWZr9CVEw6W22LOGg+lVzA3uQgOVyICSCffw2bzTepnBdoYtldw==
</code></pre>

<p>If I do not decode the API before hashing they return the same result. But for this particular purpose, the key needs to be decoded. The message variable is just my first name ""Parit"" in case someone wants to replicate.</p>
","<p>I thought that <code>Utilities.computeHmacSignature()</code> might not be able to use []byte for the value. So as a workaround, how about using jsSHA? I think that in your case, you can use <a href=""https://github.com/Caligatio/jsSHA/blob/master/src/sha512.js"" rel=""nofollow noreferrer"">https://github.com/Caligatio/jsSHA/blob/master/src/sha512.js</a>.</p>

<p>The flow for using jsSHA is as follows.</p>

<h3>Flow :</h3>

<ol>
<li>Download sha512.js.</li>
<li>On script editor, create new script as for example, the filename of <code>sha512.js</code>.

<ul>
<li>Copy and paste the script of sha512.js to the created script.</li>
</ul></li>
<li>Copy and paste the sample script to <code>Code.gs</code> of the script editor.</li>
<li>Run <code>myFunction()</code> of the sample script.</li>
</ol>

<h3>Sample script :</h3>

<pre><code>function myFunction() {
  var message = ""Parit"";
  var secret = ""W0+m0Dc9GMN9yDVeq3GMDsJ49WasEhQHkNHNuDw3wNg="";
  var obj = new jsSHA(""SHA-512"", ""TEXT"");
  obj.setHMACKey(secret, ""B64"");
  obj.update(message);
  Logger.log(obj.getHMAC(""B64""))
}
</code></pre>

<h3>Note :</h3>

<ul>
<li>When I tested <code>Parit</code> for <code>message</code>, I got <code>BfVNi21gY09c8M18cWBRBgo1W9pAlXM99ZVoF7Kz2ETFnIuvXjj8NRvRgn/GaT/m6YJ8efsr5s9EDbIhznAaag==</code>.</li>
</ul>

<p>It this was not useful for you, I'm sorry.</p>

<h2>Update :</h2>

<p><a href=""https://developers.google.com/apps-script/releases/#june_19_2018"" rel=""nofollow noreferrer"">By the Google's update at June 19, 2018</a>, <code>Utilities.computeHmacSignature()</code> got to be able to use the byte arrays. By this, using only native Google Apps Scvript, the result can be retrieved without using jsSHA. So I would like to update my answer.</p>

<h3>Modified script :</h3>

<pre><code>function myFunction() {
  var message = ""Parit"";
  var secret = ""W0+m0Dc9GMN9yDVeq3GMDsJ49WasEhQHkNHNuDw3wNg="";

  var value = Utilities.base64Decode(Utilities.base64Encode(message));
  var key = Utilities.base64Decode(secret);
  var out = Utilities.computeHmacSignature(Utilities.MacAlgorithm.HMAC_SHA_512, value, key);
  var res = Utilities.base64Encode(out)
  Logger.log(res)
}
</code></pre>

<h3>Result :</h3>

<pre><code>BfVNi21gY09c8M18cWBRBgo1W9pAlXM99ZVoF7Kz2ETFnIuvXjj8NRvRgn/GaT/m6YJ8efsr5s9EDbIhznAaag==
</code></pre>
","49267366","207","<php><google-apps-script><base64><encode><hmac>","0","2","1","2018-06-24 08:17:53","","7","","9484174","","2018-03-13 09:45:13","2018-03-13 08:58:47","","2018-06-24 08:17:53","2018-03-13 23:16:10"
"24614927","Can't unwrap Optional.None Error, Yet Not Using an Optional","<p>I am trying to write an HMAC class in Swift by first writing it in Objective C, and then using a Bridging-Header to make that class available to my Swift code. I'm sorry if I'm pasting too much code, but I'd like to learn why this is happening so I can better understand intefacing Swift and Objective C, and how I can resolve the error I'm getting. The ""TBGHMAC.calculateWithAlgorithm: forKey: and Data:"" function produces a ""fatal error: Can't unwrap Optional.None"" error.</p>

<p>Starting from the top, here is the snippet in my Swift code that calls the Swift code</p>

<pre><code>    let key : String = """" // start with empty string""
    let data : String = """" // start with empty string""

    let signature : String = TBGHMAC.calculateWithAlgorithm(HMACAlgorithm.SHA256, forKey: key, andData: data)

    println(signature)
</code></pre>

<p>and here is the TBGHMAC header file</p>

<pre><code>#import &lt;Foundation/Foundation.h&gt;
#import &lt;CommonCrypto/CommonCrypto.h&gt;

@interface TBGHMAC : NSObject


typedef NS_ENUM(NSInteger, HMACAlgorithm)
{
SHA1,
MD5,
SHA256,
SHA384,
SHA512,
SHA224
};

+ (NSString *)calculateWithAlgorithm:(HMACAlgorithm)algorithm forKey:(NSString*)key andData:(NSString *)data;

+ (NSInteger)digestLengthForAlgorithm:(HMACAlgorithm)algorithm;

@end
</code></pre>

<p>and finally here is the implementation file</p>

<pre><code>+ (NSString *)calculateWithAlgorithm:(HMACAlgorithm)algorithm forKey:(NSString *)key andData:(NSString *)data
{

    NSUInteger keyNumberOfBytes = [key lengthOfBytesUsingEncoding:NSUTF8StringEncoding];
    void *keyBuffer = malloc(keyNumberOfBytes);
    NSUInteger keyUsedLength = 0;
    NSRange keyRange = NSMakeRange(0, [key length]);
    BOOL keyResult = [key getBytes:keyBuffer maxLength:keyNumberOfBytes usedLength:&amp;keyUsedLength encoding:NSUTF8StringEncoding options:0 range:keyRange remainingRange:NULL];

    NSUInteger dataNumberOfBytes = [data lengthOfBytesUsingEncoding:NSUnicodeStringEncoding];
    void *dataBuffer = malloc(dataNumberOfBytes);
    NSUInteger dataUsedLength = 0;
    NSRange dataRange = NSMakeRange(0, [data length]);
    BOOL dataResult = [data getBytes:dataBuffer maxLength:dataNumberOfBytes usedLength:&amp;dataUsedLength encoding:NSUTF8StringEncoding options:0 range:dataRange remainingRange:NULL];

    NSInteger digestLength = [self digestLengthForAlgorithm:algorithm];
    unsigned char hmac[digestLength];

    CCHmac(algorithm, &amp;keyBuffer, strlen(keyBuffer), &amp;dataBuffer, strlen(dataBuffer), &amp;hmac);

    NSData *hmacBytes = [NSData dataWithBytes:hmac length:sizeof(hmac)];

    NSString* returnStr = [[NSString alloc] initWithData:hmacBytes encoding:NSUTF8StringEncoding];

    free(keyBuffer);
    free(dataBuffer);

    return returnStr;
}

+ (NSInteger)digestLengthForAlgorithm:(HMACAlgorithm)algorithm
{
    switch (algorithm)
    {
        case MD5: return CC_MD5_DIGEST_LENGTH;
        case SHA1: return CC_SHA1_DIGEST_LENGTH;
        case SHA224: return CC_SHA224_DIGEST_LENGTH;
        case SHA256: return CC_SHA256_DIGEST_LENGTH;
        case SHA384: return CC_SHA384_DIGEST_LENGTH;
        case SHA512: return CC_SHA512_DIGEST_LENGTH;
        default: return 0;
    }
}

@end
</code></pre>

<p>Please point out why this error is coming up, and how I can resolve it. I do not understand how this error is arising, because I'm not using any Optionals, and Xcode isn't trying to correct me into using Optionals.</p>
","<p>The Objective-C method</p>

<pre><code>+ (NSString *)calculateWithAlgorithm:(HMACAlgorithm)algorithm forKey:(NSString*)key andData:(NSString *)data;
</code></pre>

<p>is exposed to Swift as</p>

<pre><code>class func calculateWithAlgorithm(algorithm: HMACAlgorithm, forKey key: String!, andData data: String!) -&gt; String!
</code></pre>

<p>It returns an <em>(implicitly unwrapped) optional</em> string because the <code>NSString</code> returned by the Objective-C method may be <code>nil</code>. </p>

<p>Converting the return value to a <code>String</code> in</p>

<pre><code>let signature : String = BGHMAC.calculateWithAlgorithm(...)
</code></pre>

<p>causes a runtime exception if the return value is <code>nil</code> (""no value""). You should therefore test the return value
before using it:</p>

<pre><code>let signature : String! = TBGHMAC.calculateWithAlgorithm(HMACAlgorithm.SHA256, forKey: key, andData: data)
if signature {
    println(signature)
} else {
    println(""failed"")
}
</code></pre>

<p>But why does <code>calculateWithAlgorithm()</code> return <code>nil</code>? The problem is here:</p>

<pre><code>NSString* returnStr = [[NSString alloc] initWithData:hmacBytes encoding:NSUTF8StringEncoding];
</code></pre>

<p>A message digest is a quite arbitrary sequence of bytes, and cannot be interpreted
as an UTF-8 string, therefore <code>returnStr</code> is nil.</p>

<p>To solve your problem, you could for example convert the message digest to
a string using the <em>Base64 encoding</em>:</p>

<pre><code>NSString* returnStr = [hmacBytes base64EncodedStringWithOptions:0];
</code></pre>
","24615426","206","<swift><hmac>","1","1","1","2014-07-07 17:41:45","24615426","1","","","","","2014-07-07 16:03:18","","2014-07-07 17:41:45","2014-07-07 16:30:14"
"46226267","Invalid API Key hmac python","<p>I'm trying to use the api at <a href=""https://c-cex.com/"" rel=""nofollow noreferrer"">https://c-cex.com/</a> to build a bitcoin trading application for my portfolio and I'm running into an issue with using the private functions that require authentication.  It provides a php example of how to connect and I did my best to recreate it in python but its returning that my key is invalid (though I've copied the apikey straight from my email</p>

<pre><code>apikey='141FA9467F8EAC7917A9D6279AD96B4F';
apisecret='6A946F6A331F8CCDFA19EB2D73FD9B1D';
dt = datetime.datetime.now()
nonce= (dt - datetime.datetime(1970,1,1)).total_seconds()

uri='https://c-cex.com/t/api.html?a=getbalance&amp;currency=BTC&amp;apikey=' + apikey + '&amp;nonce=' + str(nonce);
sign = hmac.new(bytes(apisecret,encoding='utf-8'), uri.encode(encoding='utf-8'), hashlib.sha512).hexdigest()
headers = {'apisign': sign}

response = requests.get(uri,headers)
print(response.json())
</code></pre>

<p>and the output that is being returned is </p>

<pre><code>{'result': None, 'success': False, 'message': 'APIKEY_INVALID'}
</code></pre>

<p>The best assumption I can make is that I'm not using the hmac function properly I've tested it with 2 seperate API keys (my actual API key and this testing one in the code that only has access to GET functions)</p>
","<p>I wasn't able to find any answers so I looked through some open source projects that would be doing something similar.  </p>

<pre><code> encoding='ASCII'
</code></pre>

<p>was the answer</p>
","46227867","205","<python><api><hmac>","0","0","1","2017-09-14 20:38:17","","0","","","","","2017-09-14 18:45:05","","","2017-09-14 20:38:17"
"35500806","Base64 getting error when compile java source in Oracle sql","<p>I'm able to create a function to compare hash data between my web project(<code>Grails project</code>) and <code>sql query</code> result.</p>

<p>According to this <a href=""http://www.jokecamp.com/blog/examples-of-creating-base64-hashes-using-hmac-sha256-in-different-languages/"" rel=""nofollow"">link</a>, </p>

<ul>
<li>I apply groovy code into groovy class, then I got the result.</li>
<li>In query, first I compile <code>java source</code>, then <code>compile function</code>, and call function.</li>
</ul>

<p>However, I got trouble when tried to <code>import org.apache.commons.codec.binary.Base64</code>. 
Code below:</p>

<pre><code>create or replace and compile java source named testhmacSHA256 as
import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;
import org.apache.commons.codec.binary.Base64;
public class testhmacSHA256 {
  public static String encrypt(String secret, String message) { 
  try {
      Mac sha256_HMAC = Mac.getInstance(""HmacSHA256"");
     SecretKeySpec secret_key = new SecretKeySpec(secret.getBytes(), ""HmacSHA256"");
     sha256_HMAC.init(secret_key);

     String hash = Base64.encodeBase64String(sha256_HMAC.doFinal(message.getBytes()));
     return hash;
    }
    catch (Exception e){
     System.out.println(""Error"");
    }
  }
}
/
</code></pre>

<p>Obviously, Base64 can't be found. 
So my question is that is there any alternative way for importing <code>base64</code>, or just a way to use <code>hmac-sha 256</code> in <code>oracle sql 11g</code>.</p>

<p>Any helps will be appreciated. Thanks.</p>
","<p>Open <strong>conf/BuildConfig.groovy</strong> and in section <strong>dependency</strong> add:</p>

<pre><code>build ""commons-codec:commons-codec:1.10""
</code></pre>

<p>it should like:</p>

<pre><code>dependency {
    //... another dependiences if any
    build ""commons-codec:commons-codec:1.10""
} 
</code></pre>

<p>Refresh dependiences and recompile project.</p>

<p>If you have any problems please paste in question your conf/BuildConfig.groovy source file.</p>
","35552196","204","<java><grails><oracle11g><sha256><hmac>","0","0","1","2016-02-22 11:15:03","","4","3","3724625","","2016-02-19 09:45:39","2016-02-19 08:39:46","","","2016-02-22 11:15:03"
"23682343","How secure is JavaScript based HMAC?","<p>I am currently architecting a new SaaS based application which will include a RESTful API.  I want to secure the communications between the Browser and API Server. To do this I plan on using a ""Two Legged"" OAuth approach.  My question is how secure can this approach be if I am encrypting in the browser using JavaScript HMAC library?  Wouldn't this approach expose the secret key?</p>
","<p>General observations about client-side Javascript based ""security"":</p>

<ul>
<li>anything you do on the client in Javascript is entirely visible to said client; you cannot hide anything from the user</li>
<li>yes, if you're sending out private keys to the client in Javascript, they cease to be <em>private</em> keys</li>
<li>anything happening client side cannot be trusted, at all; you don't even have any proof that the client is running <em>your</em> code, all you see is the result of it</li>
<li>if you're trying to do some client-side magic to protect from third parties: a third party in a position to do any harm is typically also in the position to intercept all the Javascript that your server is sending to the client in the first place...</li>
<li>if you're protecting the transport of said Javascript from said third parties by using SSL... you don't need any more client-side Javascript code to add any more protection to that channel</li>
</ul>

<p>Beyond this, I'm not entirely sure who is supposed to authenticate against whom here and what you want to keep secret from whom; but hopefully these points will get you thinking.</p>
","23683137","203","<javascript><hmac>","0","1","1","2014-05-15 15:51:26","","1","","","","","2014-05-15 15:16:53","","","2014-05-15 15:51:26"
"56727357","Hmac verification with flask in Python (with reference in PHP and RUBY)","<p>Hey guys I've been working on a way to implement HMAC verification in python with flask for the selly.gg merchant website.</p>

<p>So selly's dev documentation give these following examples to verify HMAC signatures (in PHP and ruby): <a href=""https://developer.selly.gg/?php#signing-validating"" rel=""noreferrer"">https://developer.selly.gg/?php#signing-validating</a> 
(code below:)</p>

<p>PHP:</p>

<pre><code>&lt;?php
        $signature = hash_hmac('sha512', json_encode($_POST), $secret);
        if hash_equals($signature, $signatureFromHeader) {
            // Webhook is valid 
        }
?&gt;
</code></pre>

<p>RUBY:</p>

<pre><code>signature = OpenSSL::HMAC.hexdigest(OpenSSL::Digest.new('sha512'), secret, payload.to_json)
is_valid_signature = ActiveSupport::SecurityUtils.secure_compare(request.headers['X-Selly-Signature'], signature)
</code></pre>

<p>So, so far what I could figure out: They don't encode with base64 (like shopify and others do), it uses SHA-512, it encodes the secret code alongside json response data and finally the request header is 'X-Selly-Signature'</p>

<p>I've made the following code so far (based on shopify's code for HMAC signing <a href=""https://help.shopify.com/en/api/getting-started/webhooks"" rel=""noreferrer"">https://help.shopify.com/en/api/getting-started/webhooks</a>):</p>

<pre><code>SECRET = ""secretkeyhere""
def verify_webhook(data, hmac_header):
    digest = hmac.new(bytes(SECRET, 'ascii'), bytes(json.dumps(data), 'utf8'), hashlib.sha512).hexdigest()
    return hmac.compare_digest(digest, hmac_header)
try:
    responsebody = request.json #line:22
    status = responsebody['status']#line:25
except Exception as e:
    print(e)
    return not_found()
print(""X Selly sign: "" + request.headers.get('X-Selly-Signature'))
verified = verify_webhook(responsebody, request.headers.get('X-Selly-Signature'))
print(verified)
</code></pre>

<p>However selly has a webhook simulator, and even with the proper secret key and valid requests, the verify_webhook will always return False. I tried contacting Selly support, but they couldn't help me more than that</p>

<p>You can test the webhook simulator at the following address:
<a href=""https://selly.io/dashboard/"" rel=""noreferrer"">https://selly.io/dashboard/</a>{your account}/developer/webhook/simulate</p>
","<p>You're nearly right except that you don't need to <code>json.dumps</code> the request data. This will likely introduce changes into output, such as changes to formatting, that won't match the original data meaning the HMAC will fail.</p>

<p>E.g.</p>

<pre><code>{""id"":""fd87d909-fbfc-466c-964a-5478d5bc066a""}
</code></pre>

<p>is different to:</p>

<pre><code>{
  ""id"":""fd87d909-fbfc-466c-964a-5478d5bc066a""
}
</code></pre>

<p>which is actually:</p>

<pre><code>{x0ax20x20""id"":""fd87d909-fbfc-466c-964a-5478d5bc066a""x0a}
</code></pre>

<p>A hash will be completely different for the two inputs.</p>

<p>See how <code>json.loads</code> and <code>json.dumps</code> will modify the formatting and therefore the hash:</p>

<pre><code>http_data = b'''{
    ""id"":""fd87d909-fbfc-466c-964a-5478d5bc066a""
}
'''
print(http_data)
h = hashlib.sha512(http_data).hexdigest()
print(h)
py_dict = json.loads(http_data) # deserialise to Python dict
py_str = json.dumps(py_dict) # serialise to a Python str
py_bytes = json.dumps(py_dict).encode('utf-8') # encode to UTF-8 bytes
print(py_str)
h2 = hashlib.sha512(py_bytes).hexdigest()
print(h2)
</code></pre>

<p>Output:</p>

<pre><code>b'{\n    ""id"":""fd87d909-fbfc-466c-964a-5478d5bc066a""\n}\n'
364325098....
{""id"": ""fd87d909-fbfc-466c-964a-5478d5bc066a""}
9664f687a....
</code></pre>

<p>It doesn't help that Selly's PHP example shows something similar. In fact, the Selly PHP example is useless as the data won't be form encoded anyway, so the data won't be in <code>$_POST</code>!</p>

<p>Here's my little Flask example:</p>

<pre><code>import hmac
import hashlib
from flask import Flask, request, Response

app = Flask(__name__)

php_hash = ""01e5335ed340ef3f211903f6c8b0e4ae34c585664da51066137a2a8aa02c2b90ca13da28622aa3948b9734eff65b13a099dd69f49203bc2d7ae60ebee9f5d858""
secret = ""1234ABC"".encode(""ascii"") # returns a byte object

@app.route(""/"", methods=['POST', 'GET'])
def selly():
    request_data = request.data # returns a byte object
    hm = hmac.new(secret, request_data, hashlib.sha512)
    sig = hm.hexdigest()

    resp = f""""""req: {request_data}
    sig: {sig}
    match: {sig==php_hash}""""""

    return Response(resp, mimetype='text/plain')

app.run(debug=True)
</code></pre>

<p>Note the use of <code>request.data</code> to get the raw byte input and the simple use of <code>encode</code> on the <code>secret</code> str to get the encoded bytes (instead of using the verbose <code>bytes()</code> instantiation).</p>

<p>This can be tested with:</p>

<pre><code>curl -X ""POST"" ""http://localhost:5000/"" \
 -H 'Content-Type: text/plain; charset=utf-8' \
 -d ""{\""id\"":\""fd87d909-fbfc-466c-964a-5478d5bc066a\""}""
</code></pre>

<p>I also created a bit of PHP to validate both languages create the same result:</p>

<pre><code>&lt;?php
    header('Content-Type: text/plain');
    $post = file_get_contents('php://input');
    print $post;
    $signature = hash_hmac('sha512', $post, ""1234ABC"");
    print $signature;
?&gt;
</code></pre>
","56762956","202","<php><python><python-3.x><flask><hmac>","5","4","1","2019-06-26 08:21:33","56762956","0","","7032457","","2019-06-25 16:14:46","2019-06-23 20:02:05","","2019-06-26 08:21:33","2019-06-25 22:48:02"
"45388798","Python S3 Upload Signature Mismatch","<p>I am using boto3 to produce a signature for uploading files to s3. </p>

<p>And l am getting the Error <strong><em>The request signature we calculated does not match the signature you provided. Check your key and signing method.</em></strong></p>

<p>This is what l have done so far. </p>

<pre><code>policy_document =  {'expiration': '2017-07-29T07:51:16.010Z', 'conditions': [{'acl': 'public-read'}, {'bucket': 'testinstantrad'}, {'Content-Type': 'application/pdf'}, {'success_action_status': '200'}, {'key': 'web_uploads/3bda0d30-a556-4347-973b-ae21957d808f-Amendments.pdf'}, {'x-amz-meta-qqfilename': 'Amendments.pdf'}, ['content-length-range', '0', '5000000']]}

policy = base64.b64encode(json.dumps(policy_document).encode(""utf-8""))
signature= base64.b64encode(hmac.new(b'AWS_SECRET_KEY', json.dumps(policy_document).encode(), hashlib.sha1).digest(""utf-8""))

response_payload = json.dumps({'policy' : policy, 'signature' : signature})
</code></pre>

<p><strong>MORE ON THE ERROR BELOW:</strong></p>

<p>Received response status 403 with body: 
<Code>SignatureDoesNotMatch</Code>The request signature we calculated does not match the signature you provided. Check your key and signing method.AKIAJJ5AEA2H4Y4C4R4Qb'eyJleHBpcmF0aW9uIjogIjIwMTctMDctMjlUMTE6MzY6NDcuOTY5WiIsICJjb25kaXRpb25zIjogW3siYWNsIjogInB1YmxpYy1yZWFkIn0sIHsiYnVja2V0IjogInRlc3RpbnN0YW50cmFkIn0sIHsiQ29udGVudC1UeXBlIjogImFwcGxpY2F0aW9uL3BkZiJ9LCB7InN1Y2Nlc3NfYWN0aW9uX3N0YXR1cyI6ICIyMDAifSwgeyJrZXkiOiAid2ViX3VwbG9hZHMvNTQ0NTY2ODAtNjNjNS00ZTI3LWI4M2QtMTE1YTI2NTM1ZTRjLUFtZW5kbWVudHMucGRmIn0sIHsieC1hbXotbWV0YS1xcWZpbGVuYW1lIjogIkFtZW5kbWVudHMucGRmIn0sIFsiY29udGVudC1sZW5ndGgtcmFuZ2UiLCAiMCIsICI1MDAwMDAwIl1dfQ=='b'vv+Kb+QmFLcSYORC4hEisyaULNY='62 27 65 79 4a 6c 65 48 42 70 63 6d 46 30 61 57 39 75 49 6a 6f 67 49 6a 49 77 4d 54 63 74 4d 44 63 74 4d 6a 6c 55 4d 54 45 36 4d 7a 59 36 4e 44 63 75 4f 54 59 35 57 69 49 73 49 43 4a 6a 62 32 35 6b 61 58 52 70 62 32 35 7a 49 6a 6f 67 57 33 73 69 59 57 4e 73 49 6a 6f 67 49 6e 42 31 59 6d 78 70 59 79 31 79 5a 57 46 6b 49 6e 30 73 49 48 73 69 59 6e 56 6a 61 32 56 30 49 6a 6f 67 49 6e 52 6c 63 33 52 70 62 6e 4e 30 59 57 35 30 63 6d 46 6b 49 6e 30 73 49 48 73 69 51 32 39 75 64 47 56 75 64 43 31 55 65 58 42 6c 49 6a 6f 67 49 6d 46 77 63 47 78 70 59 32 46 30 61 57 39 75 4c 33 42 6b 5a 69 4a 39 4c 43 42 37 49 6e 4e 31 59 32 4e 6c 63 33 4e 66 59 57 4e 30 61 57 39 75 58 33 4e 30 59 58 52 31 63 79 49 36 49 43 49 79 4d 44 41 69 66 53 77 67 65 79 4a 72 5a 58 6b 69 4f 69 41 69 64 32 56 69 58 33 56 77 62 47 39 68 5a 48 4d 76 4e 54 51 30 4e 54 59 32 4f 44 41 74 4e 6a 4e 6a 4e 53 30 30 5a 54 49 33 4c 57 49 34 4d 32 51 74 4d 54 45 31 59 54 49 32 4e 54 4d 31 5a 54 52 6a 4c 55 46 74 5a 57 35 6b 62 57 56 75 64 48 4d 75 63 47 52 6d 49 6e 30 73 49 48 73 69 65 43 31 68 62 58 6f 74 62 57 56 30 59 53 31 78 63 57 5a 70 62 47 56 75 59 57 31 6c 49 6a 6f 67 49 6b 46 74 5a 57 35 6b 62 57 56 75 64 48 4d 75 63 47 52 6d 49 6e 30 73 49 46 73 69 59 32 39 75 64 47 56 75 64 43 31 73 5a 57 35 6e 64 47 67 74 63 6d 46 75 5a 32 55 69 4c 43 41 69 4d 43 49 73 49 43 49 31 4d 44 41 77 4d 44 41 77 49 6c 31 64 66 51 3d 3d 2746B920FF32C5D0AFrRgGlQJRihHemtLMBf/mQVsXx3AryuJ87oQbIVkiAk7HCpM6E9QyAw4Wugp0rgT3cdeRhPjOSjc=</p>
","<p>I think it might be the fact that the <strong>policy</strong> needs to be base64 encoded.</p>

<p>Here's some code that I've been using. You'll see the slight difference:</p>

<pre><code>policy_document = '{""expiration"": ""2018-01-01T00:00:00Z"", ""conditions"": [ {""bucket"": ""my-bucket""}, [""starts-with"", ""$key"", ""uploads/""], {""acl"": ""private""}, {""success_action_redirect"": ""http://my-bucket/ok.html""}, [""content-length-range"", 0, 1048000] ] }'

AWS_SECRET_ACCESS_KEY = ""XXX""

policy = base64.b64encode(policy_document)

signature = base64.b64encode(hmac.new(AWS_SECRET_ACCESS_KEY, policy, hashlib.sha1).digest())
</code></pre>

<p>My <code>policy_document</code> is already a string, hence the lack of <code>json.dumps()</code> but it goes through <code>b64encode()</code> before being used in the hash.</p>
","45388876","201","<python><python-3.x><amazon-s3><hmac>","1","1","1","2017-07-29 11:44:03","","1","","","","","2017-07-29 11:35:15","","","2017-07-29 11:44:03"
"38965781","How to validate legitimacy of nodes in a public P2P network (peer.js)","<p><s>I have</s> There is a public P2P network and nodes (based on peer.js) which has following conditions:</p>

<ul>
<li>Anyone (includes malicious nodes) can join to the P2P network</li>
<li>Every legitimate nodes have one common security key that shared via secure way</li>
</ul>

<p>Under the conditions, The nodes have to establish full-mesh connection between only legitimate nodes.</p>

<p>Here, I need to implement a secure negotiation protocol which will be used before establishing a connection between nodes. I need to ensure that every node should shut malicious nodes out through the negotiation, maybe, with the common security key which shared only among legitimate nodes.</p>

<p>I think there would be a well-known solution for this situation, but I couldn't find it yet. What is a typical solution to this situation?</p>
","<p>Creating a peer to peer network requires a signalling server of some sort. Simply let this server authenticate peers. You mention a key, use this key to authenticate a peer and only allow an authenticated peer to join the network.<br>
Usually you see clients connecting to rooms directly, but you can wait for them to authenticate before allowing them to create or join a room. You can achieve this by simply not sending a client's data through to other clients when not authenticated yet, or by making the room id secret and only giving out the secret id to authenticated clients.</p>
","38971256","199","<authentication><webrtc><p2p><hmac><peerjs>","0","0","1","2016-08-16 09:41:15","","0","","3591946","","2016-08-16 09:41:15","2016-08-16 02:31:47","","","2016-08-16 09:29:53"
"33330645","PHP double randomised hmac verification to prevent timing attack","<p>A way to prevent timing attacks for hash string comparison is to perform additional HMAC signing in order to randomize the verification process (see <a href=""https://www.nccgroup.trust/us/about-us/newsroom-and-events/blog/2011/february/double-hmac-verification/"" rel=""nofollow"">https://www.nccgroup.trust/us/about-us/newsroom-and-events/blog/2011/february/double-hmac-verification/</a>). </p>

<p>In addition to the second HMAC hashing for each hash, a random salt of random length is added to both in order to make the hashing timing / process even less predictable.</p>

<p>My implementation of this look like this:</p>

<pre><code>function hmac_verify ($hash_original, $message, $key) {

    $hmac_salt = '...'; // was added at the original HMAC signing
    $random_salt = openssl_random_pseudo_bytes (rand(16,96));

    $raw_hash = hash_hmac('sha512', $message . $hmac_salt, $key, true);
    $hash_compare = base64_encode ($raw_hash); // $hash_original is in base64 
    $hash_compare_safe = hash_hmac('sha512', $hash_compare, $random_salt, true);
    $hash_original_safe = hash_hmac('sha512', $hash_original, $random_salt, true);

    if ($hash_compare_safe === $hash_original_safe) return true;
        else return false;

}
</code></pre>

<p>The function is called in this way after decrypting the encrypted text in order to verify the decryption result:</p>

<pre><code>if (!hmac_verify ($hmac_hash, $plaintext . $cipher_text, $key . $iv)) return ""HASH ERROR"";
</code></pre>

<p>Will this successfully prevent a timing attack? Am I doing anything unnecessary? Could something be improved?</p>

<p>A second question is whether it is more advisable to perform the HMAC verification on the plaintext, the ciphertext, or both (as in my example), and why. </p>
","<p>I've left some comments inline as I read your function. This isn't an analysis after reading the whole thing, rather this is what I immediately think of as I read it.</p>

<pre><code>function hmac_verify ($hash_original, $message, $key) {
    ##
    # Nitpick: A variable named $hash_original will prime people who read
    # your code to think of simple hash functions rather than HMAC
    ##

    $hmac_salt = '...'; // was added at the original HMAC signing
    ##
    # What is this? $hmac_salt? Looks like a hard coded-salt (a.k.a. pepper).
    # I wouldn't trust this with my life.
    ##

    $random_salt = openssl_random_pseudo_bytes (rand(16,96));
    ##
    # Why are you bothering to randomize this? Just use a static value
    # approximating the output size of the hash function (i.e. 64).
    ##

    $raw_hash = hash_hmac('sha512', $message . $hmac_salt, $key, true);
    $hash_compare = base64_encode ($raw_hash); // $hash_original is in base64 
    $hash_compare_safe = hash_hmac('sha512', $hash_compare, $random_salt, true);
    ##
    # Ah, yeah, don't pepper. HMAC is secure.
    ##
    $hash_original_safe = hash_hmac('sha512', $hash_original, $random_salt, true);

    if ($hash_compare_safe === $hash_original_safe) return true;
        else return false;
    ##
    # Why not just do this?
    # return $hash_compare_safe === $hash_original_safe;
    ## 

}
</code></pre>

<p>So, I would highly recommend separating this out into two separate mechanisms: One that calculates MACs and the other that compares strings in constant time (like PHP 5.6's <a href=""https://secure.php.net/hash_equals"" rel=""nofollow""><code>hash_equals()</code></a> does).</p>

<pre><code>function hmac_verify ($hmac, $message, $key)
{
    $calc = hash_hmac('sha512', $message, $key, true);
    return hmac_equals($hmac, $calc);
}

function hmac_equals($hmac, $calc)
{
    $random = openssl_random_pseudo_bytes(64);
    return (
        hash_hmac('sha512', $hmac, $random)
            ===
        hash_hmac('sha512', $calc, $random)
    );
}
</code></pre>
","33341021","199","<php><security><hash><hmac><timing-attack>","2","1","1","2015-10-26 08:02:45","","5","","1816580","","2015-10-25 14:46:25","2015-10-25 14:12:01","","","2015-10-26 08:02:45"
"36288509","Web API HMAC Authentication- Intermittent 404 Not Found Response","<p>I'm following the HMAC authentication approach as outlined <a href=""http://bitoftech.net/2014/12/15/secure-asp-net-web-api-using-api-key-authentication-hmac-authentication/"" rel=""nofollow"">here</a> in a Web Api application that's deployed on Azure but I'm running into 404 errors more than half the time on the same HTTP GET calls.</p>

<p>It seems that when I make the invocation to the server, even though my request URI is of the format,</p>

<pre><code>http://mywebapp.azurewebsites.net/api/foo/bar?val=123
</code></pre>

<p>Around half the time, the request URI in the HttpResponseMessage comes back as</p>

<pre><code>http://mywebapp.azurewebsites.net/Account/Login?ReturnUrl=%2Fapi%2Ffoo%2Fbar%3Fval%3D123
</code></pre>

<p>This only happens when I apply the HMACAuthentication attribute on my foo controller.</p>

<p>The strange part is that it doesn't happen every time and doesn't happen when I run on localhost. I've copied out the example exactly from the github repo. I was thinking the server time might have something to do with this, but that doesn't explain why the requests go through sometimes and fail at others... it should be consistent. Not sure what part of the code is relevant to put down here either so please let me know what'd help to see.</p>

<p>I'd appreciate any insight on this. Thanks in advance!</p>
","<p>Figured it out, the problem was occurring in the <em>isReplayRequest</em> method in the repo.</p>

<p>Here's the original method definition:</p>

<pre><code>    private bool isReplayRequest(string nonce, string requestTimeStamp)
    {
        if (System.Runtime.Caching.MemoryCache.Default.Contains(nonce))
        {
            return true;
        }

        DateTime epochStart = new DateTime(1970, 01, 01, 0, 0, 0, 0, DateTimeKind.Utc);
        TimeSpan currentTs = DateTime.UtcNow - epochStart;

        var serverTotalSeconds = Convert.ToUInt64(currentTs.TotalSeconds);
        var requestTotalSeconds = Convert.ToUInt64(requestTimeStamp);

        if ((serverTotalSeconds - requestTotalSeconds) &gt; requestMaxAgeInSeconds)
        {
            return true;
        }

        System.Runtime.Caching.MemoryCache.Default.Add(nonce, requestTimeStamp, DateTimeOffset.UtcNow.AddSeconds(requestMaxAgeInSeconds));

        return false;
    }
</code></pre>

<p>The issue was occurring at the second if condition where the serverTotalSeconds and requestTotalSeconds are <strong>unsigned integers.</strong> </p>

<p>There were periodic cases where the timestamps would end up negative (i.e. the requestTotalSeconds was greater than serverTotalSeconds by 1), which would end up setting the value of (serverTotalSeconds - requestTotalSeconds) as 18446744073709551615, which is the max value UInt64 can hold.</p>

<p>In my case, I used two TimeSpan objects to compare the time and derive the difference in seconds.</p>

<p>Hope this helps someone else.</p>
","36295732","198","<c#><asp.net><azure><asp.net-web-api2><hmac>","0","1","1","2016-03-29 21:49:34","36295732","0","","","","","2016-03-29 15:23:14","","","2016-03-29 21:49:34"
"49639620","Using Sinch REST Api in C#","<p>I am trying to use Sinch REST api in c# for sms verification and I am having trouble encoding the strings required for Authorization. I am using APPLICATION SIGNED REQUEST for Auth and I would like to know what c# functions to use to created the content-Md5 and stringtoSign. 
For content MD-5 here is the code snippet I have</p>

<pre><code>var body = JsonConvert.SerializeObject(smsRequest);

var hs = System.Security.Cryptography.MD5.Create();

var db = hs.ComputeHash(Encoding.UTF8.GetBytes(body));

var stringToSign = Convert.ToBase64String(db);

 public class SmsRequest
{
    [JsonProperty(""identity"")]
    public Identity Identity;

    [JsonProperty(""method"")]
    public string Method;

    [JsonProperty(""metadata"")]
    public Metadata Metadata;
}

public class Metadata
{
    [JsonProperty(""os"")]
    public string Os;

    [JsonProperty(""platform"")]
    public string Platform;

}

public class Identity
{
    [JsonProperty(""type"")]
    public string Type;

    [JsonProperty(""endpoint"")]
    public string Endpoint;
}
</code></pre>

<p>Now for creating the stringtoSign is something I use the following code</p>

<pre><code>var stringToSign = ""POST"" + Environment.NewLine + ""jANzQ+rgAHyf1MWQFSwvYw=="" + Environment.NewLine +
                  ""application/json"" + Environment.NewLine + ""x-timestamp:2014-06-04T13:41:58Z"" +
                  Environment.NewLine + ""/v1/sms/+46700000000"";//used for signing

var secret = ""JViE5vDor0Sw3WllZka15Q==""; // this needs to be signed
var encoding = new System.Text.UTF8Encoding();
byte[] keyByte = encoding.GetBytes(stringToSign);

var hmacsha256 = new HMACSHA256(keyByte);

byte[] messageBytes = Encoding.UTF8.GetBytes(secret);
byte[] hashmessage = hmacsha256.ComputeHash(messageBytes);

var res = Convert.ToBase64String(hashmessage);
</code></pre>

<p>I am using the values in the example here <a href=""https://www.sinch.com/using-rest/"" rel=""nofollow noreferrer"">https://www.sinch.com/using-rest/</a> and I expect the result to be ""qDXMwzfaxCRS849c/2R0hg0nphgdHciTo7OdM6MsdnM="" while using my method I am getting ""2/8KqdiC2708EC84vTinPchiATRJiZU4Mgfpykb4F40="". </p>

<p>What is it that I am doing wrong here? </p>
","<p>I would use our awesome nuget <a href=""https://github.com/sinch/nuget-serversdk"" rel=""nofollow noreferrer"">https://github.com/sinch/nuget-serversdk</a> if you dont want to install the nuget you can check the source and take the pieces you want. its opensource and you </p>
","49660898","198","<c#><rest><hmac><sinch>","0","1","1","2018-04-04 21:42:02","49660898","3","","6031862","","2018-04-03 22:16:53","2018-04-03 21:47:24","","","2018-04-04 21:42:02"
"26768132","Why is the hash value wrong?","<p>I 've been trying this for a while and keep getting a wrong hash value. I know that it is wrong because I have checked it against online HMAC calculators</p>

<pre><code>unsigned char data[]=""data"";
unsigned char key[MD5_DIGEST_LENGTH]; 
MD5(data, strlen(data), key);   

unsigned char* t;
t=HMAC(EVP_md5(),key,16,data, 16,NULL,NULL);

for(i = 0; i &lt; 20; i++)
{
    sprintf(&amp;mdString[i*2], ""%02x"", t[i]); //totally wrong value
}
</code></pre>
","<p>To get a HMAC matching the online generators, it's a simple as;</p>

<pre><code>unsigned char* data = ""data"";
unsigned char* key  = ""key"";
unsigned char* t;

t = HMAC(EVP_md5(), key, strlen(key), data, strlen(data), NULL, NULL);

for(i = 0; i &lt; 16; i++)
{
    sprintf(&amp;mdString[i*2], ""%02x"", t[i]);
}
</code></pre>

<p>In your example, you're using MD5 on the key before calculating the HMAC, which is not what the online generators do. Of course, if your key or data are not regular null terminated strings, you need to replace the <code>strlen</code> calls with the actual length.</p>
","26768541","198","<c><hash><openssl><md5><hmac>","-1","0","1","2014-11-05 22:48:48","","6","","4206439","","2014-11-05 22:21:14","2014-11-05 22:12:10","","2014-11-05 22:48:48","2014-11-05 22:40:00"
"43432772","Azure IoT Hub SAS Key Manual Generation via Connection string with HMAC encryption via Forge js lib","<p>Having trouble testing getting past 401 in azure-iot-hub with manual SAS key generation via connection string in a javascript (typescript) file using the forge javascript library. </p>

<p>Connection string looks is as follows: <code>HostName={resourceUri};SharedAccessKeyName={policyName};SharedAccessKey={key}""</code></p>

<p>I break the string into a dictionary, calculate the expiration time myself (adding 3600 seconds), and go on to calculate the SAS key url params with the following functions:</p>

<pre><code>// MSDN recommendation   
const encodeUriComponentStrict = (str) =&gt; {
      return encodeURIComponent(str).replace(/[!'()*]/g, function(c) {
        return '%' + c.charCodeAt(0).toString(16);
      });
    }

function hmacHash(password, signingString) {
  const hmac = forge.hmac.create();
  console.log(`password`, password);
  hmac.start('sha256', forge.util.encode64(password));
  hmac.update(signingString);
  const digested = hmac.digest();
  return forge.util.encode64(digested.data);
}

/**
 * Creates a Sas key for an azure iot registry
 * @param hostName the azure iot resource uri
 * @param policy the shared access key name
 * @param key the shared access key
 * @param expiry int64 representation of expiration time
 */
const createSasKeyForRegistry = (hostName: string, policy: string,
    key: string, expiry: number) =&gt; {
    let sas : any = {
        _key: key,
        sr: hostName,
        se: expiry,
        skn: encodeUriComponentStrict(policy),
    };
  sas.sig = encodeUriComponentStrict(hmacHash(sas._key, stringToSign(sas.sr, sas.se)));

  return sas;
}
</code></pre>

<p>Here's an example resource <code>PUT</code> IoT device endpoint I can see in the console:
<code>https://{my-resource-uri}.net/devices/807417987db61b41ZX1F239P3Q?api-version=2016-11-14</code> </p>

<p>I can see that the <code>Authorization</code> header is appended in the usual SAS key format:</p>

<p><code>""SharedAccessSignature sr={resource-uri}&amp;sig=koNqIJF56tzzBpqWYp4tRvxeWIJEHSLugA2O2weELZ4%3D&amp;se=1492307707&amp;skn=iothubowner""</code>.</p>

<p>Despite all this, I'm still getting an 401... Been at it for a couple hours now trying all sorts of things without any success. Wondering if it has something to do with the hmac encryption function?  Any forge folks out there that can verify the code?  For those interested, I'm in an ionic 2 application (based on angular 2) and using angular 2's http class to perform the request.</p>

<p>Thanks.</p>
","<p>As I haven't had 50 reputation now, I cannot post this as a comment.</p>

<p>Did you decode the SharedAccessKey with base64?</p>

<p>I'm not familiar with Forge, but here's what I did with CryptoJS</p>

<p><a href=""https://github.com/azure-iothub/device-management/blob/master/main.js#L117"" rel=""nofollow noreferrer"">https://github.com/azure-iothub/device-management/blob/master/main.js#L117</a></p>

<p>The connectionInfo is gotten from connection string with getInfoFromConnectionString method</p>

<p><a href=""https://github.com/azure-iothub/device-management/blob/master/main.js#L74"" rel=""nofollow noreferrer"">https://github.com/azure-iothub/device-management/blob/master/main.js#L74</a></p>

<p>I hope this can help.</p>
","43448897","197","<angular><security><ionic2><hmac><azure-iot-hub>","1","1","1","2017-04-17 09:37:35","43448897","0","","","","","2017-04-16 01:18:13","","","2017-04-17 09:37:35"
"25312201","Provides tapestry's hmac-passphrase sufficient csrf protection?","<p>I wonder, why Tapestry's hmac funcionality is not enough to prevent Cross-Site-Request-Forgery.</p>

<blockquote>
  <p>Tapestry encodes serialized objects into Base64 encoded strings that are stored on the client; primarily, this is for form submissions, to encode the set of operations needed to process the form when it is submitted.</p>
</blockquote>

<p>(<a href=""https://issues.apache.org/jira/browse/TAP5-2008"" rel=""nofollow noreferrer"">quoted jira issue</a>)</p>

<p>The tapestry framework (version 5.3.6 and newer) signs the above data using hmac. When the form is submitted by the client, this data is included in the POST request in a t:formdata parameter and validated by the server.
From my point of view, this is enough to protect against crsf. The signed data is created on the server with a key, that only the server knows.
How should an attacker create a valid t:formdata Element which is accepted by the server?
I'm confused because I found several libraries/implementations on the internet, which add csrf-protection to tapestry.
I also read this <a href=""https://stackoverflow.com/a/17853256/2249614"">SO-answer</a> which states, that hmac ""might"" (or might not?) be sufficient csrf protection. </p>

<p>Concluding: In which cases does the hmac not provide sufficient protection against csrf and why?</p>
","<p>The HMAC only applies to portions of the submitted form data, the part that Tapestry will de-serialized into Java objects. That was, in theory, enough for an attacker to compromise the server JVM (though not, necessarily, to be able to inject code or behavior into the application). With HMAC enabled, the submitted form data is secure, for as long as the HMAC is kept secret on the server.</p>
","25318799","197","<csrf><tapestry><hmac>","0","0","1","2014-08-14 22:49:59","","0","","-1","","2017-05-23 12:11:39","2014-08-14 15:44:17","","","2014-08-14 22:49:59"
"28418535","how to convert hash string to md5 in javascript?","<p>This is my first time working on HMAC,<br>
I have this method to create hash string for HMAC:</p>

<pre><code>    var msg = method + publicKey + path + privateKey
    //like:
   var msg = 'GET' + 'MY-PUBLIC-KEY' + '/api/account' + 'MY_PRIVATE_KEY';
</code></pre>

<p>I'm using <a href=""http://www.myersdaily.org/joseph/javascript/md5.js"" rel=""nofollow"">this</a> library for converting msg to md5. <br>
in the backend code I see</p>

<pre><code>string expectedValue = Hashing.GetHashHMACCMD5OfString(msg, PublicKey)

....

public static string GetHashHMACCMD5OfString(string value, string key)
{
    using (var cryptoProvider = new HMACMD5(Encoding.UTF8.GetBytes(key)))
    {
        var hash = cryptoProvider.ComputeHash(Encoding.UTF8.GetBytes(value));
        return Convert.ToBase64String(hash);
    }
}
</code></pre>

<p>I don't know about .net, is it enough just to convert msg as</p>

<pre><code>var md5Msg = md5(msg, publickey);
// and request
$http({
  url: url,
  method: 'GET',
  headers: {
    'Authentication': md5Msg + ' ' + publickey 
  }
});
</code></pre>

<p>in javascript or I need any other conversion (like toBase64) to do?</p>
","","","197","<javascript><.net><hmac>","0","","0","2015-02-09 20:28:35","","3","","","","","2015-02-09 20:18:14","","",""
"45491646","HMAC-SHA1 signatures in OCaml?","<p>I'm trying to make requests to the Twitter API, and they require that I sign my requests. The final part of that requires signing via the HMAC-SHA1 hashing algorithm. Is there an easy way to get it?</p>
","<p>Hannes reached out to give me the answer (in ReasonML syntax below, rather than OCaml):</p>

<pre><code>Nocrypto.Hash.SHA1.hmac key::(Cstruct.of_string signingKey) (Cstruct.of_string output) |&gt; Cstruct.to_string
</code></pre>

<p>And with that, here's a signing function as translated from the <a href=""https://dev.twitter.com/oauth/overview/creating-signatures"" rel=""nofollow noreferrer"">Twitter API doc</a> (params and values are also taken from that page so output is verifiable as correct):</p>

<pre><code>let signRequest clientId clientSecret method uri params :string =&gt; {
  let tmp = params |&gt; List.sort (fun (a, _) (b, _) =&gt; compare a b);
  let collectedParamsString =
    List.map
      (
        fun (header: string, values: list string) =&gt; {
          let nextStr =
            List.fold_left
              (
                fun innerAcc value =&gt; {
                  let nextItem =
                    /* Using `Userinfo here is weird, but it's the only component I could get to properly percent-encode things in the same way Twitter expects it */
                    Uri.pct_encode component::`Query_key header ^
                    ""="" ^ Uri.pct_encode component::`Userinfo value;
                  let final = innerAcc @ [nextItem];
                  print_endline (value ^ "" =&gt; "" ^ String.concat ""&amp;"" final);
                  final
                }
              )
              []
              values |&gt;
            String.concat ""&amp;"";
          nextStr
        }
      )
      tmp |&gt;
    String.concat ""&amp;"";
  let output =
    String.uppercase_ascii method ^
    ""&amp;"" ^
    Uri.pct_encode component::`Userinfo uri ^
    ""&amp;"" ^ Uri.pct_encode component::`Userinfo collectedParamsString;
  let signingKey =
    Uri.pct_encode component::`Userinfo clientId ^
    ""&amp;"" ^ Uri.pct_encode component::`Userinfo clientSecret;
  Cstruct.to_string (
    Nocrypto.Hash.SHA1.hmac key::(Cstruct.of_string signingKey) (Cstruct.of_string output)
  )
};

let signature =
  signRequest
    ""post""
    ""https://api.twitter.com/1.1/statuses/update.json""
    ""kAcSOqF21Fu85e7zjz7ZN2U4ZRhfV3WpwPAoE3Z7kBw""
    ""LswwdoUaIvS8ltyTt5jkRh4J50vUPVVHtR2YPi5kE""
    [
      (""status"", [""Hello Ladies + Gentlemen, a signed OAuth request!""]),
      (""include_entities"", [""true""]),
      (""oauth_consumer_key"", [""xvz1evFS4wEEPTGEFPHBog""]),
      (""oauth_nonce"", [""kYjzVBB8Y0ZFabxSWbWovY3uYSQ2pTgmZeNu2VS4cg""]),
      (""oauth_signature_method"", [""HMAC-SHA1""]),
      (""oauth_timestamp"", [""1318622958""]),
      (""oauth_token"", [""370773112-GmHxMAgYyLbNEtIKZeRNFsMKPR9EyMZeS9weJAEb""]),
      (""oauth_version"", [""1.0""])
    ];
/* let signature : string = ""hCtSmYh+iHYCEqBWrE7C7hYmtUk */
</code></pre>

<p>Edit: I originally stated that Hannes was the author of OCaml's nocrypto library - it's actually David Kaloper. Very sorry about that, and thank you to Daniel Bünzli for pointing that out!</p>
","45491647","194","<twitter><ocaml><sha1><hmac><reason>","1","1","1","2017-08-09 09:35:20","","0","","","","","2017-08-03 18:10:17","","2017-08-09 09:35:20","2017-08-03 18:10:17"
"39400779","Making requests to Amazon web services REST APIs, cannot get the request Signature to work","<p>So I am attempting to make a request to Amazon's product API but I cannot figure out how to get the signature to work.  I was following another stack overflow post that can be found here: <a href=""https://stackoverflow.com/questions/26915864/how-can-i-create-a-signature-for-aws-in-javascript"">How can I create a signature for AWS in Javascript?</a>, but still cannot fulfill my request.  Here is the request that I am sending, (currently testing through postman).</p>

<p><code>http://webservices.amazon.com/onca/xml?Service=AWSECommerceService&amp;AWSAccessKeyId=[MY_ACCESSKEY]&amp;Operation=ItemSearch&amp;Keywords=the%20hunger%20games&amp;SearchIndex=Books &amp;Timestamp=2016-09-09T12:00:00Z&amp;Signature=9RTSas234dfRTs3R%ErA8%</code></p>

<p>I made up a fake signature similar to the one that I get from this function:</p>

<pre><code>let service = ""AWSECommerceService"";
let timestamp = ""2016-09-09T12:00:00Z"";
let operation = ""ItemSearch"";
let secret = ""MY_AMAZONSECRET"";
let signature = CryptoJS.HmacSHA1(service + operation + timestamp, secret).toString(CryptoJS.enc.Base64);
console.log(signature);
</code></pre>

<p>The result that logs to the console looks like this: <code>9RTSas234dfRTs3R+ErA8=</code></p>

<p>From what I read here <a href=""http://docs.aws.amazon.com/AWSECommerceService/latest/DG/rest-signature.html"" rel=""nofollow noreferrer"">http://docs.aws.amazon.com/AWSECommerceService/latest/DG/rest-signature.html</a>, I thought you needed to replace '+' and '=' to '%' signs.  When I leave the + and = signs as is, I get the following response from AWS:</p>

<pre><code>&lt;?xml version=""1.0""?&gt;
&lt;ItemSearchErrorResponse xmlns=""http://ecs.amazonaws.com/doc/2005-10-05/""&gt;
    &lt;Error&gt;
        &lt;Code&gt;SignatureDoesNotMatch&lt;/Code&gt;
        &lt;Message&gt;The request signature we calculated does not match the signature you provided. Check your AWS Secret Access Key and signing method. Consult the service documentation for details.&lt;/Message&gt;
    &lt;/Error&gt;
    &lt;RequestId&gt;{MY_REQUESTID}&lt;/RequestId&gt;
&lt;/ItemSearchErrorResponse&gt;
</code></pre>

<p>But when I change them to %'s, I get this response: </p>

<pre><code>&lt;?xml version=""1.0""?&gt;
&lt;ItemSearchErrorResponse xmlns=""http://ecs.amazonaws.com/doc/2005-10-05/""&gt;
    &lt;Error&gt;
        &lt;Code&gt;MissingParameter&lt;/Code&gt;
        &lt;Message&gt;The request must contain the parameter Signature.&lt;/Message&gt;
    &lt;/Error&gt;
    &lt;RequestId&gt;{MY_REQUESTID}&lt;/RequestId&gt;
&lt;/ItemSearchErrorResponse&gt;
</code></pre>

<p>Even though the Signature parameter exists in the request.  Any thoughts on how I can fix this.  I am using crypto-js to create the signature, which can be found here: <a href=""https://www.npmjs.com/package/crypto-js"" rel=""nofollow noreferrer"">https://www.npmjs.com/package/crypto-js</a></p>
","<blockquote>
  <p>I thought you needed to replace '+' and '=' to '%' signs. </p>
</blockquote>

<p>Yes, but you don't just replace them with <code>%</code>.  Use this map:</p>

<pre><code>+ becomes %2B
/ becomes %2F
= becomes %3D
</code></pre>

<p>This is referred to as url-encoding, url-escaping, or percent-encoding.  The characters are replaced by a literal <code>%</code> followed by their 2-digit hex ASCII equivalent.</p>

<pre><code>9RTSas234dfRTs3R+ErA8= becomes 
9RTSas234dfRTs3R%2BErA8%3D
</code></pre>
","39409032","192","<javascript><amazon-web-services><request><hmac><cryptojs>","0","0","1","2016-09-09 10:07:07","","1","","-1","","2017-05-23 12:08:23","2016-09-08 21:55:16","","","2016-09-09 10:07:07"
"37200851","Should a HMAC secret key not be hard-coded?","<p>Because if some bad employee stole it, he could impersonate any users.<br>
And if it should not be hardcoded, where sholud it be putted?<br>
I'm thinking to implement JWT authentication.</p>
","<p>HMAC secret key is a plain text. As any private/secret text, you should avoid to store (hard-code) text as simple/plain string, because it can be revealed using disassembling.</p>

<p>So yes, it is a good thing to somehow obfuscate the secret key, doing at least simple text transform. In general you can choose any kind of transformation.</p>

<p>One of the approaches is to use encoding/decoding for transformation: your secret key is stored in source as encoded string, and decoded at runtime when is needed. For example you can use XOR encryption suggested by Google:</p>

<pre><code>static String stringTransform(String s, int i) {
   char[] chars = s.toCharArray();
   for(int j = 0; j&lt;chars.length; j++)
      chars[j] = (char)(chars[j] ^ i);
   return String.valueOf(chars);
}
</code></pre>

<p>This function should be used for both encryption and decryption, ""i"" is an any random value.</p>
","37407946","192","<authentication><jwt><hmac>","0","0","1","2016-05-24 08:16:30","","0","","","","","2016-05-13 03:40:48","","","2016-05-24 08:16:30"
"30762387","Inconsistency in HMAC signature generation in Python 3?","<p>Running the <code>create_api_signature()</code> method in a python terminal always return the same value, while it return different values when run in a test.</p>

<pre><code>import hashlib
import hmac
import json

import unittest


def create_api_signature(_method, _url, _body, _timestamp, _secret_key):
    unicode_signature = _method.upper() + _url + json.dumps(_body) + str(_timestamp)

    s = hmac.new(_secret_key.encode(), unicode_signature.encode(), hashlib.sha256).hexdigest()

    return s


class MyTestCase(unittest.TestCase):
    def test_create_signature(self):
        method = 'post'
        url = 'https://api.alpha.example.com/v1/tiers'
        body = {
            ""mail"": ""test@gmail.com"",
            ""mot_de_passe"": ""MyComplexPassword"",
        }
        timestamp = 1433948791
        secret_key = 'SECRET_KEY'

        signature = create_api_signature(method, url, body, timestamp, secret_key)
        expected_signature = '136b629ac9744258cf558c2d541d563cc3ce647d91ead707ae4d42d49ade50c7'

        self.assertEqual(expected_signature, signature)


if __name__ == '__main__':
    unittest.main()
</code></pre>

<h3>Error</h3>

<pre><code>Failure
Expected :'136b629ac9744258cf558c2d541d563cc3ce647d91ead707ae4d42d49ade50c7'
Actual   :'88a138592ea7eae50040655387a878d15fd4ab4ade5d7d769a36bf9300cb3f9e'
 &lt;Click to see difference&gt;

Traceback (most recent call last):
  File ""/home/elopez/projects/portal/tests/test_services.py"", line 98, in test_create_signature
    self.assertEqual(expected_signature, signature)
AssertionError: '136b629ac9744258cf558c2d541d563cc3ce647d91ead707ae4d42d49ade50c7' != '88a138592ea7eae50040655387a878d15fd4ab4ade5d7d769a36bf9300cb3f9e'
- 136b629ac9744258cf558c2d541d563cc3ce647d91ead707ae4d42d49ade50c7
+ 88a138592ea7eae50040655387a878d15fd4ab4ade5d7d769a36bf9300cb3f9e
</code></pre>
","<p>I went to <code>#python</code>'s IRC and get the following answer by <code>cdunklau</code></p>

<blockquote>
  <p>cdunklau: run this a few times and you'll see why </p>
  
  <p>PYTHONHASHSEED=random python3.2 -c ""import json; print(json.dumps({'mail': 'value', 'mot_de_passe': 'othervalue'}))""</p>
  
  <p>cdunklau: you're depending on the order of a dict</p>
</blockquote>

<h2>Mutability</h2>

<pre><code>$ for i in {1..20}; do PYTHONHASHSEED=random python3.4 -c ""import json; print(json.dumps({'mail': 'value', 'mot_de_passe': 'othervalue'}))""; done
</code></pre>

<p>give the following result (notice the <em>JSON</em> data are <strong>not always in the same order</strong>):</p>

<pre><code>{""mail"": ""value"", ""mot_de_passe"": ""othervalue""}
{""mot_de_passe"": ""othervalue"", ""mail"": ""value""}
{""mail"": ""value"", ""mot_de_passe"": ""othervalue""}
{""mot_de_passe"": ""othervalue"", ""mail"": ""value""}
{""mail"": ""value"", ""mot_de_passe"": ""othervalue""}
{""mot_de_passe"": ""othervalue"", ""mail"": ""value""}
{""mot_de_passe"": ""othervalue"", ""mail"": ""value""}
…
</code></pre>

<h2>Solution</h2>

<p>I changed <strong>from</strong>:</p>

<pre class=""lang-py prettyprint-override""><code> body = {
         ""mail"": ""test@gmail.com"",
         ""mot_de_passe"": ""MyComplexPassword"",
 }
</code></pre>

<p>to a <strong>serialized dict as a binary string</strong>:
</p>

<pre><code> body = b'{""mail"": ""test@gmail.com"", ""mot_de_passe"": ""MyComplexPassword""}'
</code></pre>
","30780394","191","<python-3.x><hmac><python-unittest><hashlib>","1","1","1","2015-06-11 12:09:31","30780394","0","","","","","2015-06-10 16:41:40","","","2015-06-11 12:09:31"
"42688439","Meteor: Verify shopify webhook","<p>I am trying to verify webhook requests to be originated from shopify. For that I have referred: <a href=""https://help.shopify.com/api/getting-started/webhooks#verify-webhook"" rel=""nofollow noreferrer"">verify shopify webhook</a>
. I have created an shopify app and since I am auto registering(creating) web-hooks to associated store so using app secret to verify the same. </p>

<p>The code is:</p>

<pre><code>import { Picker } from 'meteor/meteorhacks:picker';

var bodyParser = require( 'body-parser' ),
    crypto     = require('crypto');

Picker.middleware( bodyParser.json() );
Picker.middleware( bodyParser.urlencoded( { extended: true } ) );

var post = Picker.filter(function(req, res) {
  // Bypass, if the url doesn't start with webhook 
  if (req.url.search('webhook') &lt; 0) {
   return true;
  }

  let isValid = isValidWebhook(req);
  console.log( (isValid ? 'Verified' : 'Unverified') + ' webhook');

  return (isValid &amp;&amp; req.method == ""POST"");
});

isValidWebhook = function (req) {
  const data       = JSON.stringify(req.body);  
  const header     = req.headers;
  const hmac       = header['x-shopify-hmac-sha256'];
  const appSecret  = Meteor.settings.shopify.secret;

  const calHmac  = crypto.createHmac(""sha256"", appSecret).update(data).digest(""base64"");

  return (hmac == calHmac);
}
</code></pre>

<p>Server side routing is being captured by <a href=""https://github.com/meteorhacks/picker"" rel=""nofollow noreferrer"">Picker</a>.
I am unable to verify it so far so any help will be highly appreciated.</p>
","","","190","<meteor><shopify><webhooks><hmac>","0","","0","2017-03-09 12:37:32","","6","","1371636","","2017-03-09 12:37:32","2017-03-09 06:40:54","","",""
"26310987","Incorrect HMAC when Base64 encode contains symbols","<p>I am writing an android app that uses a RESTful API with JSON. In this process i take a query string and compute HMAC using the SHA-256 algorithm. I then Base64 encode the resulting hmac string and the original query string, and send them to my server API through json objects. Sometimes this works perfectly fine, sometimes i get an hmac incorrect response from my server. I am not the person coding the server, yet we are both pretty stumped as to why this is. The error only occurs when the already encoding hmac string contains a symbol, such as '+' or '/' or alternatively '-' or '_'. Any help or insight is appreciated.</p>
","<p>It turns out that the server I am working with did not use the URL safe flag when generating hmac (uses ""+"" and ""/"" instead of ""-"" and ""_"") and this was causing the HMAC to yield blank spaces, "" "", in place of the ""+"" symbol on the server side, despite having produced the ""+"" symbol on the Android App. The issue was solved when the server made some change of content that I do not know. The problem was solved and the application works consistently.</p>
","27309881","190","<android><json><rest><base64><hmac>","0","0","1","2014-12-05 06:12:35","27309881","0","","","","","2014-10-11 04:14:37","","","2014-12-05 06:12:35"
"20820747","Converting PHP hmac signature to java","<p>I'm converting a php script to java (for android) but find myself stuck converting the hmac signature process.</p>

<p>PHP which gives correct sign:</p>

<pre><code>$secret = ""lT4fhviR7ILvwGeiBJgolfYji1uz/f7B6HQWaWQWVl/sWEz3Kwt4QjzCHWE+MBENOmtgBS6PlN87s+1d7/8bRw=="";
$nonce = ""1388256620813308"";
$postdata = ""nonce=1388256620813308"";
$path = ""/0/private/Balance"";
$sign = hash_hmac('sha512', $path . hash('sha256', $nonce . $postdata, true), base64_decode($this-&gt;secret), true);

echo $sign;
</code></pre>

<p>Hmac =  2IVoBCoadCEivxKVRB/4quJET4DoZV4JdY6bMC2oEYJZuygF5JiAhGrxVMyw2yPhz+KdiwvbzV43cicGamzr2A==</p>

<p>Which is correct and accepted signature</p>

<p>Java (with invalid sign):</p>

<pre><code>String secret = ""lT4fhviR7ILvwGeiBJgolfYji1uz/f7B6HQWaWQWVl/sWEz3Kwt4QjzCHWE+MBENOmtgBS6PlN87s+1d7/8bRw=="";
String nonce = ""1388256620813308"";
String postdata = ""nonce=1388256620813308"";
String path = ""/0/private/Balance"";

// hash nonce + data
MessageDigest md = MessageDigest.getInstance(""SHA-256"");
md.update((nonce+postdata).getBytes());
byte[] digest = md.digest();

String baseString = path + new String(digest); //this is probably root of evil

// HMAC
Mac mac = Mac.getInstance(""HmacSHA512"");
SecretKey secretKey = new SecretKeySpec(Base64.decode(secret, Base64.DEFAULT), ""HmacSHA512"");
mac.init(secretKey);
String sign = new String(Base64.encodeToString(mac.doFinal(baseString.getBytes()), Base64.DEFAULT)).trim(); 

Log.d(TAG, sign);
</code></pre>

<p>Hmac =  7ZQfn+fqMpMEFN5Z/T5UwcqP1uo0JOyAVSn4HEBeE/KotnEf4a5bPOWriiC//gdoEg2kOe60EIr3Lv7irXuejw==</p>

<p>The problem is in the java string conversion of the bytes (even if I add ""UTF-8"" as characted encoding in <code>getBytes</code>). I know this because if I don add <code>path</code> to the hmac, and just feed it with <code>digest</code> without the string conversion the signature matches.</p>
","<p>After posting question I did a quick and dirty test to add bytes from <code>path</code> manually to a new bytes array</p>

<pre><code>byte[] digest = md.digest();  
byte[] pBytes = path.getBytes();
int L = digest.length + pBytes.length;
byte[] message = new byte[L];

for (int i=0;i&lt;pBytes.length;i++) {
    message[i] = pBytes[i];
}
for (int i=pBytes.length,n=0; n&lt;digest.length; n++) {
    message[i+n] = digest[n];
}

String sign = new String(Base64.encodeToString(mac.doFinal(message), Base64.NO_WRAP));
</code></pre>

<p>And voilà; the hmac sign matches! </p>

<p>I have solved my problem but keeping question unanswered for some day to say if a better answer is provided that sheds light on this. </p>
","20821024","189","<java><php><android><hmac>","0","0","1","2013-12-29 20:32:39","20821024","0","4","","","","2013-12-29 00:06:44","","2013-12-29 20:32:39","2013-12-29 00:51:16"
"44439713","Encoding newline in VB.NET for HMAC SHA1","<p>I'm having a problem authenticating an API with OAuth. I can get it work fine in Python, but not in VB.Net. I realised the issue is that SHA1 algorithm is returning a different value in Python and VB.NET for the what I thought was the same message. This only seems to be the case when there is a newline character ""\n"" in the message (which there has to be for the API call). Using <code>Environment.NewLine</code> doesn't seem to help.</p>

<p>The code I'm using (based on <a href=""https://stackoverflow.com/questions/7515164/visual-basic-2010-hmac-sha1"">this answer</a>) is here, with the expected values I get from my Python program:</p>

<pre><code>Public Sub Main()           
    ' Expect D/5B78PD9pFhmqZQi3eenPBy6ks=
    ' Get    D/5B78PD9pFhmqZQi3eenPBy6ks=
    console.writeline(getHash(""a"", ""msg""))

    ' Expect yuuq6RwtwkoJ6n3PquGFx60MLas=
    ' Get    uv4AwQjvYeCTajhHw7EFtPlJfCE=
    console.writeline(getHash(""a"", ""msg\n""))

    ' Expect yuuq6RwtwkoJ6n3PquGFx60MLas=       
    ' Get efRfAnmIN/C/YX/UPHVPFY5VjJg=
    console.writeline(getHash(""a"", ""msg"" + Environment.NewLine))

End Sub

Public Function getHash(ByVal key As String, ByVal msg As String) As String
    Dim myEncoder As New System.Text.UTF8Encoding
    Dim keyBytes() As Byte = myEncoder.GetBytes(key)
    Dim msgBytes() As Byte = myEncoder.GetBytes(msg)

    Dim myHMACSHA1 As New System.Security.Cryptography.HMACSHA1(keyBytes)
    Dim HashCode As Byte() = myHMACSHA1.ComputeHash(msgBytes)

    Return Convert.ToBase64String(HashCode)
End Function
</code></pre>

<p>In case it's useful, my Python program is:</p>

<pre><code>import base64
import hashlib
import hmac

key = ""a""
msg = ""msg\n""
key_byte = key.encode('utf-8')
msg_byte = msg.encode('utf-8')

h = hmac.new(key_byte, msg_byte, hashlib.sha1)
print base64.b64encode(h.digest())   # yuuq6RwtwkoJ6n3PquGFx60MLas=
</code></pre>

<p>My guess is it's something to do with how the newline character is encoded, but I can't figure out how to solve it.</p>
","<p>To start with I'd just like to point out that <code>\n</code> in VB.NET does not represent a new line character. It will literally just become <code>\n</code>.</p>

<p><a href=""https://msdn.microsoft.com/en-us/library/system.environment.newline(v=vs.110).aspx"" rel=""nofollow noreferrer""><strong><code>Environment.NewLine</code></strong></a> adapts to the current OS. Different operating systems use different line endings. The issue here is that the Python code is using a <a href=""https://en.m.wikipedia.org/wiki/Newline"" rel=""nofollow noreferrer""><strong>Line Feed</strong></a> character (<code>\n</code>) as a new line indicator, but since <code>Environment.NewLine</code> adapts to the OS it will return Windows' line ending, which is <a href=""https://en.m.wikipedia.org/wiki/Carriage_return"" rel=""nofollow noreferrer""><strong>Carriage Return</strong></a> + <strong>Line Feed</strong> (<code>\r\n</code>).</p>

<p>Therefore if you want it to match the Python code you've got to be sure to insert a Line Feed <strong>only</strong>. For instance:</p>

<pre><code>Console.WriteLine(getHash(""a"", ""msg"" &amp; vbLf))
</code></pre>
","44440234","187","<vb.net><oauth><newline><hmac>","0","1","1","2017-06-08 16:01:00","44440234","0","","","","","2017-06-08 15:20:41","","2017-06-08 16:01:00","2017-06-08 15:46:33"
"30080199","TypeError: 'HMAC' object is not callable","<p>When passing the following</p>

<pre><code>hmac.new(secretkey.encode(), sig1.encode(), sha1)
</code></pre>

<p>I'm receiving the following error </p>

<blockquote>
  <p>TypeError: 'HMAC' object is not callable</p>
</blockquote>

<p>I'm sure this is probably basic for most but I am just getting to grips with python and it's causing a bit of a headache.</p>

<p>Can someone help explain or solve the issue</p>

<p>More info as requested</p>

<pre><code>url = ""https://api.twitter.com/1.1/search/tweets.json?q=something""  # url = ""https://google.com""
realurl = ""https://api.twitter.com/1.1/search/tweets.json""
http_method = ""GET""
oauth_consumer_key = ""removed""
oauth_token = ""removed""
oauth_signature_method = ""HMAC-SHA1""
oauth_timestamp = ""1430882576""
oauth_nonce = ""pISS1c""
oauth_version = ""1.0""
oauth_signature = ""removed""
oauth_consumer_secret_key = ""removed""


class TwitterModel:
    def SignitureGenerator():

    from urllib.parse import quote
    import binascii
    import hmac
    from hashlib import sha1

    secretkey = quote(oauth_consumer_secret_key, '')+""&amp;""+quote(oauth_token_secret, '')

    sig1 = realurl+""&amp;oauth_consumer_key=""+oauth_consumer_key+""&amp;oauth_nonce=""+oauth_nonce+""&amp;26oauth_signature_method=""+oauth_signature_method+""&amp;oauth_timestamp=""+oauth_timestamp+""&amp;oauth_token=""+oauth_token+""&amp;oauth_version=""+oauth_version

    sig1 = ""GET&amp;""+quote(sig1, '')

    hashkey = hmac.new(secretkey.encode(), sig1.encode(), sha1)

    return hashkey
</code></pre>

<p><em>Traceback</em></p>

<pre><code>Traceback (most recent call last):
 File ""/var/www/projects/twitter/venv/lib/python3.4/site-packages/flask/app.py"", line 1836, in __call__
return self.wsgi_app(environ, start_response)
 File ""/var/www/projects/twitter/venv/lib/python3.4/site-packages/flask/app.py"", line 1820, in wsgi_app
response = self.make_response(self.handle_exception(e))
 File ""/var/www/projects/twitter/venv/lib/python3.4/site-packages/flask_cors/extension.py"", line 110, in wrapped_function
return cors_after_request(app.make_response(f(*args, **kwargs)))
 File ""/var/www/projects/twitter/venv/lib/python3.4/site-packages/flask/app.py"", line 1403, in handle_exception
reraise(exc_type, exc_value, tb)
 File ""/var/www/projects/twitter/venv/lib/python3.4/site-packages/flask/_compat.py"", line 33, in reraise
raise value
 File ""/var/www/projects/twitter/venv/lib/python3.4/site-packages/flask/app.py"", line 1817, in wsgi_app
response = self.full_dispatch_request()
 File ""/var/www/projects/twitter/venv/lib/python3.4/site-packages/flask/app.py"", line 1478, in full_dispatch_request
response = self.make_response(rv)
 File ""/var/www/projects/twitter/venv/lib/python3.4/site-packages/flask/app.py"", line 1577, in make_response
rv = self.response_class.force_type(rv, request.environ)
 File ""/var/www/projects/twitter/venv/lib/python3.4/site-packages/werkzeug/wrappers.py"", line 841, in force_type
response = BaseResponse(*_run_wsgi_app(response, environ))
 File ""/var/www/projects/twitter/venv/lib/python3.4/site-packages/werkzeug/test.py"", line 867, in run_wsgi_app
app_rv = app(environ, start_response)
 TypeError: 'HMAC' object is not callable
</code></pre>
","<p>It seems by appending .digest() to the hmac.new seems to have cleared up the issue.</p>

<pre><code>hashkey = hmac.new(secretkey.encode(), sig1.encode(), sha1).digest()
</code></pre>
","30081396","187","<python><hmac>","0","0","1","2015-05-06 15:37:40","","8","","1736885","","2015-05-06 15:16:57","2015-05-06 14:49:17","","","2015-05-06 15:37:40"
"52177885","Golang crypto/hmac global hash object","<p>I try to use global hmac hash for generating signature. Code works well, but generated signature doesn't satisfy 3rd party integration checker. If hmac hash will be created for each 'signature generation' process it will works fine.</p>

<p>Works fine - signature is accepted by 3rd party:</p>

<pre><code>func tokenSignatureFunc(key string) tokenSignType {
    signToken := func(token string) []byte {
        h := hmac.New(sha256.New, []byte(key))
        h.Write([]byte(token))
        signature := h.Sum(nil)
        base64Signature := make([]byte, base64.StdEncoding.EncodedLen(len(signature)))
        base64.StdEncoding.Encode(base64Signature, signature)
        return base64Signature
    }
    return signToken
}
</code></pre>

<p>Doesn't work - signature is not accepted by 3rd party:</p>

<pre><code>func tokenSignatureFunc(key string) tokenSignType {
    h := hmac.New(sha256.New, []byte(key))
    signToken := func(token string) []byte {
        h.Write([]byte(token))
        signature := h.Sum(nil)
        base64Signature := make([]byte, base64.StdEncoding.EncodedLen(len(signature)))
        base64.StdEncoding.Encode(base64Signature, signature)
        return base64Signature
    }
    return signToken
}
</code></pre>
","<p>Try this, it may be failing due to base64 padding. Use <code>RawStdEncoding</code> instead</p>

<pre><code>func HMAC256(payload string, secret string) string {
   sig := hmac.New(sha256.New,[]byte(secret))
   sig.Write([]byte(payload))
   return b64Encode(string(sig.Sum(nil)[:]))
}


func b64Encode(text string) string {
   return base64.RawStdEncoding.EncodeToString([]byte(text))
 }
</code></pre>
","52232793","187","<go><sha256><hmac>","-1","0","1","2018-09-08 06:58:29","","6","","","","","2018-09-05 05:47:03","","2018-09-08 06:58:29","2018-09-08 06:52:00"
"48427354","Ruby HMAC signing issue","<p>I got an issue with HMAC. 
I have to sign a form before sending it to a bank. 
They only provide an example in PHP in their documentation. </p>

<p>I have a hex key to sign my data (e.g. <code>FCEBA61A884A938E7E7FE4F5C68AA7F4A349768EE5957DDFBE99C1D05A09CBACF1FCF0A7084CB2E4CBA95193176C4395DE7F39EA9DBEBEF0907D77192AAE3E8A</code>). </p>

<p>In the PHP exemple, they do this with the key before signing the data:</p>

<pre><code> $key = ""FCEBA61A884A938E7E7FE4F5C68AA7F4A349768EE5957DDFBE99C1D05A09CBACF1FCF0A7084CB2E4CBA95193176C4395DE7F39EA9DBEBEF0907D77192AAE3E8A"";
 $message = ""param1=a&amp;param2=b"";

 $binKey = pack('H*', $key);
 $signature = hash_hmac('sha512', $msg, $binKey);
 echo $signature;

 // =&gt; a3efb70368bee502ea57a1a4708cac8912a5172075ea8dec2de2770dfbb4c8fb587f03fdadc0ca4f9e1bb024cfda12866295b259f5fb4df2fe14d960874a68ab
</code></pre>

<p>I don't understand why they pack the key and if I should do something similar with my key.
I did the following in my Ruby code: </p>

<pre><code>key = ""FCEBA61A884A938E7E7FE4F5C68AA7F4A349768EE5957DDFBE99C1D05A09CBACF1FCF0A7084CB2E4CBA95193176C4395DE7F39EA9DBEBEF0907D77192AAE3E8A""
message = ""param1=a&amp;param2=b""

digest = OpenSSL::Digest.new('sha512')
signature = OpenSSL::HMAC.hexdigest(digest, key, message)

puts signature

# =&gt; d817611845246640d1224a0874bf60fed0956a367aa3069b7947cbec56903bb5d8c54df170f5504c586dad55e4f879c70cf1a40526cfc9f35411195822c535ed
</code></pre>
","<p>The packing of the hex <strong>representation</strong> of the key back into a binary form is the bit you're missing.</p>

<p>See this post for example: <a href=""https://blog.bigbinary.com/2011/07/20/ruby-pack-unpack.html"" rel=""nofollow noreferrer"">https://blog.bigbinary.com/2011/07/20/ruby-pack-unpack.html</a></p>

<p>You'll want something like this:</p>

<pre><code>signature = OpenSSL::HMAC.hexdigest(digest, key.pack('H'), message)
</code></pre>
","48456639","183","<ruby><sign><hmac>","1","1","3","2018-02-15 22:05:16","48817063","2","","647417","","2018-01-25 13:35:48","2018-01-24 16:32:36","","","2018-01-26 06:27:51"
"48427354","Ruby HMAC signing issue","<p>I got an issue with HMAC. 
I have to sign a form before sending it to a bank. 
They only provide an example in PHP in their documentation. </p>

<p>I have a hex key to sign my data (e.g. <code>FCEBA61A884A938E7E7FE4F5C68AA7F4A349768EE5957DDFBE99C1D05A09CBACF1FCF0A7084CB2E4CBA95193176C4395DE7F39EA9DBEBEF0907D77192AAE3E8A</code>). </p>

<p>In the PHP exemple, they do this with the key before signing the data:</p>

<pre><code> $key = ""FCEBA61A884A938E7E7FE4F5C68AA7F4A349768EE5957DDFBE99C1D05A09CBACF1FCF0A7084CB2E4CBA95193176C4395DE7F39EA9DBEBEF0907D77192AAE3E8A"";
 $message = ""param1=a&amp;param2=b"";

 $binKey = pack('H*', $key);
 $signature = hash_hmac('sha512', $msg, $binKey);
 echo $signature;

 // =&gt; a3efb70368bee502ea57a1a4708cac8912a5172075ea8dec2de2770dfbb4c8fb587f03fdadc0ca4f9e1bb024cfda12866295b259f5fb4df2fe14d960874a68ab
</code></pre>

<p>I don't understand why they pack the key and if I should do something similar with my key.
I did the following in my Ruby code: </p>

<pre><code>key = ""FCEBA61A884A938E7E7FE4F5C68AA7F4A349768EE5957DDFBE99C1D05A09CBACF1FCF0A7084CB2E4CBA95193176C4395DE7F39EA9DBEBEF0907D77192AAE3E8A""
message = ""param1=a&amp;param2=b""

digest = OpenSSL::Digest.new('sha512')
signature = OpenSSL::HMAC.hexdigest(digest, key, message)

puts signature

# =&gt; d817611845246640d1224a0874bf60fed0956a367aa3069b7947cbec56903bb5d8c54df170f5504c586dad55e4f879c70cf1a40526cfc9f35411195822c535ed
</code></pre>
","<p>I'm using this in my project:</p>

<pre><code>bin_key = Array(keyTest).pack 'H*'
@hmac = OpenSSL::HMAC.hexdigest(""SHA512"", bin_key, msg).upcase
</code></pre>

<p>This works fine for me.</p>
","48816404","183","<ruby><sign><hmac>","1","1","3","2018-02-15 22:05:16","48817063","2","","647417","","2018-01-25 13:35:48","2018-01-24 16:32:36","","","2018-02-15 21:15:33"
"48427354","Ruby HMAC signing issue","<p>I got an issue with HMAC. 
I have to sign a form before sending it to a bank. 
They only provide an example in PHP in their documentation. </p>

<p>I have a hex key to sign my data (e.g. <code>FCEBA61A884A938E7E7FE4F5C68AA7F4A349768EE5957DDFBE99C1D05A09CBACF1FCF0A7084CB2E4CBA95193176C4395DE7F39EA9DBEBEF0907D77192AAE3E8A</code>). </p>

<p>In the PHP exemple, they do this with the key before signing the data:</p>

<pre><code> $key = ""FCEBA61A884A938E7E7FE4F5C68AA7F4A349768EE5957DDFBE99C1D05A09CBACF1FCF0A7084CB2E4CBA95193176C4395DE7F39EA9DBEBEF0907D77192AAE3E8A"";
 $message = ""param1=a&amp;param2=b"";

 $binKey = pack('H*', $key);
 $signature = hash_hmac('sha512', $msg, $binKey);
 echo $signature;

 // =&gt; a3efb70368bee502ea57a1a4708cac8912a5172075ea8dec2de2770dfbb4c8fb587f03fdadc0ca4f9e1bb024cfda12866295b259f5fb4df2fe14d960874a68ab
</code></pre>

<p>I don't understand why they pack the key and if I should do something similar with my key.
I did the following in my Ruby code: </p>

<pre><code>key = ""FCEBA61A884A938E7E7FE4F5C68AA7F4A349768EE5957DDFBE99C1D05A09CBACF1FCF0A7084CB2E4CBA95193176C4395DE7F39EA9DBEBEF0907D77192AAE3E8A""
message = ""param1=a&amp;param2=b""

digest = OpenSSL::Digest.new('sha512')
signature = OpenSSL::HMAC.hexdigest(digest, key, message)

puts signature

# =&gt; d817611845246640d1224a0874bf60fed0956a367aa3069b7947cbec56903bb5d8c54df170f5504c586dad55e4f879c70cf1a40526cfc9f35411195822c535ed
</code></pre>
","<p>You need to do this in Ruby:</p>

<pre><code>hash = OpenSSL::HMAC.hexdigest(digest, [key].pack('H*'), message)
</code></pre>

<p>The real issue here is that your PHP code uses two variable names for the message.  You set <code>$message</code>, then use <code>$msg</code>, which means you're computing the hash for an undefined variable.</p>
","48817063","183","<ruby><sign><hmac>","1","1","3","2018-02-15 22:05:16","48817063","2","","647417","","2018-01-25 13:35:48","2018-01-24 16:32:36","","","2018-02-15 22:05:16"
"26423662","Scalatra response HMAC calulation","<p>I'm developing a web service using Scalatra and I want to use HMAC for bidirectional authentication. </p>

<p>So far, I've implemented the client authentication to the server: the client (an Android app) calculates a HMAC/SHA512 for each request using these parameters: a shared secret, the HTTP method, URL, some headers (timestamp, clientId etc) and the request body (if it's a POST or a PUT). This HMAC is then added to a specific header and the request is sent to the server (which validates the HMAC in the request header with a HMAC that it calculates the same as the client).</p>

<p>Now, I want to do the opposite thing: have the server authenticate to the client using the stored shared secret, the request HTTP method, URL and the response <strong>body</strong>.</p>

<p>So far, I've found that I can override <code>renderResponse(actionResult: Any)</code>, <code>renderResponseBody(actionResult: Any)</code> or even <code>renderPipeline</code> and I've decided to go with overriding <code>renderPipeline</code> as it seems to be the easiest to handle.</p>

<p>In my overriden <code>renderPipeline</code> I transform the response body to a byte array (loading the served <code>File</code> in memory if serving a <code>File</code>), calculate the HMAC and add it to the <code>response</code> headers.</p>

<p>What I want to know is: are there cases when overriding <code>renderPipeline</code> this way would break either the authentication functionality presented above (like <code>renderPipeline</code> not being called or being called multiple times or the headers having been sent befor <code>renderPipeline</code> is called to render the body) or some other functionality in Scalatra? </p>

<p>As a note I do not calculate the HMAC when the action returns <code>Unit</code> and the response output is being written directly by the action.</p>
","<p>I had exactly the same problem to solve. I used a trait extending <code>Handler</code>, just like it's done in the <a href=""https://github.com/scalatra/scalatra/blob/9a676bab0572b5358b9b4a6ef381ea2d2a31037f/core/src/main/scala/org/scalatra/GZipSupport.scala"" rel=""nofollow noreferrer"">GZipSupport.scala</a> and using this <a href=""https://stackoverflow.com/a/8972088/1670855"">answer</a> as a reference implementation.</p>

<p>I built a <code>ServletOutputStreamCopier</code> which holds a copy of the original <code>OutputStream</code> and every byte to both streams:</p>

<pre><code>class ServletOutputStreamCopier(orig: ServletOutputStream) extends ServletOutputStream {
    val copy: ByteArrayOutputStream = new ByteArrayOutputStream(1024)

    override def write(b: Int): Unit = {
      orig.write(b)
      copy.write(b)
    }
    override def setWriteListener(writeListener: WriteListener): Unit = orig.setWriteListener(writeListener)

    override def isReady: Boolean = orig.isReady

    def getCopy: Array[Byte] = copy.toByteArray
}
</code></pre>

<p>Then a <code>ResponseCopier</code>, which is an <code>HttpServletResponseWrapper</code> with the previously defined <code>ServletOutputStreamCopier</code> and exposes the <code>copy</code> to the outside:</p>

<pre><code>class ResponseCopier(res: HttpServletResponse, sos:   ServletOutputStreamCopier, w: PrintWriter) extends HttpServletResponseWrapper(res) {
    override def getOutputStream: ServletOutputStream = new ServletOutputStreamCopier(sos)

    override def getWriter: PrintWriter = w

    override def setContentLength(i: Int) = {}

    def getCopy: Array[Byte] = sos.getCopy
}
</code></pre>

<p>Finally the <code>handle</code> method takes care of adding the header after the Scalatra action was completed by using the callback <code>ScalatraBase.onRenderedComplete</code>.</p>

<pre><code>trait SignedResponseSupport extends Handler {
  self: ScalatraBase =&gt;

  abstract override def handle(req: HttpServletRequest, res: HttpServletResponse): Unit = {
    withRequestResponse(req, res) {
      val sosc = new ServletOutputStreamCopier(res.getOutputStream)
      val w = new PrintWriter(sosc)
      val wrapped = new ResponseCopier(response,sosc ,w)

      ScalatraBase.onRenderedCompleted { _ =&gt;
        w.flush()
        w.close()
        val password = ""secret-password""
        val signature = signResponseBody(wrapped.getCopy, password)
        wrapped.addHeader(""X-Response-Signature"", signature)
        }
      }
      super.handle(req, wrapped)
    }

  def signResponseBody(body: Array[Byte], password: String): String = {
    /*signing goes here*/
  }

}
</code></pre>
","29575780","183","<scala><servlets><hmac><scalatra>","1","1","1","2015-04-11 08:29:15","29575780","0","","","","","2014-10-17 11:05:49","","2017-05-23 10:10:14","2015-04-11 08:29:15"
"33895187","How standard is HMAC(SHA-1)","<p>HMAC(SHA-1) is an algorithm for Hash computation that also accepts a key as input value. The algorithm follows certain rules and guarantees a certain level of security and resilience against attacks.</p>

<p>Moving to its implementation: is HMAC(SHA-1) standard at the point that all the ""official"" and correct implementations of it produce exactly the same result for a given input message and key? Or is the algorithm accepting different implementations that might produce a different result?</p>
","<p>any given implementation of HMAC-SHA1 will produce the same set of bytes given the same set of bytes as the input message and key.  </p>

<p>That said, there can be a lot of variation on how various interfaces work and how they accept those bytes.  For example, one library may output the hash as a hex string, and another may output it as an array of bytes.  Or one would take a string as input with a UTF-8 encoding, whereas another would take it in as a UTF-16 encoding.  You would need to be careful that the same bytes are hitting the algorithm in different libraries to ensure you get the same result.</p>

<p>Also, while HMAC-SHA1 is probably okay from a security perspective, you should probably be using HMAC-SHA256 instead.</p>
","33897806","182","<security><hash><hmac><hmacsha1>","0","2","2","2016-02-04 06:19:44","33897806","0","","","","","2015-11-24 13:38:42","","","2015-11-24 15:38:17"
"33895187","How standard is HMAC(SHA-1)","<p>HMAC(SHA-1) is an algorithm for Hash computation that also accepts a key as input value. The algorithm follows certain rules and guarantees a certain level of security and resilience against attacks.</p>

<p>Moving to its implementation: is HMAC(SHA-1) standard at the point that all the ""official"" and correct implementations of it produce exactly the same result for a given input message and key? Or is the algorithm accepting different implementations that might produce a different result?</p>
","<p>It's very standard.  It's a standard, even!</p>

<p><a href=""https://tools.ietf.org/html/rfc2104"" rel=""nofollow"">RFC2104</a> specifies the actual HMAC algorithm and block sizes.</p>

<p><a href=""https://tools.ietf.org/html/rfc2202.html"" rel=""nofollow"">RFC2202</a> contains test cases for both HMAC-MD5 and HMAC-SHA1.</p>

<p>For further study, <a href=""https://tools.ietf.org/html/rfc4868"" rel=""nofollow"">RFC4868</a> gives more guidance on HMAC for the SHA2 family, with an emphasis on IPSec.</p>
","35193862","182","<security><hash><hmac><hmacsha1>","0","1","2","2016-02-04 06:19:44","33897806","0","","","","","2015-11-24 13:38:42","","","2016-02-04 06:19:44"
"47510915","Crypto Hmac node.js equivalent for ruby for the following function","<pre><code>function hmac(key, string, encoding) {
  return crypto.createHmac('sha256', key).update(string, 'utf8').digest(encoding);
}
function hash(string, encoding) {
    return crypto.createHash('sha256').update(string, 'utf8').digest(encoding);
}
</code></pre>

<p>For the above function hmac encoding is optional, or else it have value 'hex'
I checked the OpenSsl library in ruby and found similar functions but not getting the same outputs when running in ruby.</p>

<p>Following link is used as reference to some extend but not exactly.Anyone have came across similar use case.Please let me know</p>
","<p>This is a very old question but I was just trying to do the same thing and figured posting an answer for posterity wouldn't hurt.</p>

<p>The Ruby equivalents I came up with are significantly more verbose because I am not aware of a way to pass the encoding as an argument to any of the methods.</p>

<p><strong>Note:</strong> <code>base64</code> and <code>hex</code> encodings are equivalent between JS and Ruby. It looks like there could be a difference in the output of Node's <code>latin1</code> encoding depending on how Ruby is configured, but I believe the raw bytes are equivalent.</p>

<pre class=""lang-ruby prettyprint-override""><code>require 'openssl'
require 'base64'

def hmac(key, string, encoding = 'hex')
  hmac = OpenSSL::HMAC.new(key, 'sha256')
  hmac &lt;&lt; string
  case encoding
    when 'base64'
      Base64.encode64(hmac.digest)
    when 'hex'
      hmac.hexdigest
    else
      hmac.digest
  end
end

def hash(string, encoding = 'hex')
  sha256 = OpenSSL::Digest::SHA256.new
  sha256 &lt;&lt; string
  case encoding
    when 'base64'
      Base64.encode64(sha256.digest)
    when 'hex'
      sha256.hexdigest
    else
      sha256.digest
  end
end

key = ""NjNsSSpyaE83NyZGaGdpYXhLQmFjVUJhZ3UyMENqZWY=""
string = ""this is a test""
encoding = ""hex"";
puts hmac(key, string, encoding) # =&gt; adb2946c2815047327d51459b401836cebb1a31644604303b4886b028bb98e69
puts hash(string, encoding) # =&gt; 2e99758548972a8e8822ad47fa1017ff72f06f3ff6a016851f45c398732bc50c
</code></pre>

<p>And to test, you can simply run the equivalent in node</p>

<pre class=""lang-js prettyprint-override""><code>var key = ""NjNsSSpyaE83NyZGaGdpYXhLQmFjVUJhZ3UyMENqZWY=""
var string = ""this is a test""
var encoding = ""hex"";
console.log(hmac(key, string, encoding)) // =&gt; adb2946c2815047327d51459b401836cebb1a31644604303b4886b028bb98e69
console.log(hash(string, encoding)) // =&gt; 2e99758548972a8e8822ad47fa1017ff72f06f3ff6a016851f45c398732bc50c
</code></pre>
","52573365","180","<node.js><ruby><openssl><hmac><cryptojs>","0","1","1","2018-09-29 23:42:21","","0","","","","","2017-11-27 12:22:13","","2018-09-29 23:42:21","2018-09-29 23:30:23"
"43197184","How to make SJCL and Python hashlib generate identical pdkdf2 output","<p>I have a JavaScript app and a Python app that communicate using a key derived from a password using pbdkf2. The problem is, the generated keys don't match. I've produced a minimal test case for each.</p>

<p><strong>Python</strong></p>

<pre><code>import hashlib, binascii
bytes = hashlib.pbkdf2_hmac('sha256', ""password"".encode(), b'', 100000)
print(binascii.hexlify(bytes).decode())
</code></pre>

<p>Generates: <code>64a868d4b23af696d3734d0b814d04cdd1ac280128e97653a05f32b49c13a29a</code></p>

<p><strong>JavaScript</strong></p>

<pre><code>&lt;script src=""lib/sjcl.js""&gt;&lt;/script&gt;
&lt;script&gt;
var hmacSHA256 = function (key) {
    var hasher = new sjcl.misc.hmac(key, sjcl.hash.sha256);
    this.encrypt = function () {
        return hasher.encrypt.apply(hasher, arguments);
    };
};
hash = sjcl.misc.pbkdf2(""password"", [0], 100000, 256, hmacSHA256);
console.log(sjcl.codec.hex.fromBits(hash));
&lt;/script&gt;
</code></pre>

<p>Generates: <code>41c04f824d843d5be0ae66b3f621d3f05db7d47e7c46ee0e9171b5cbff7f3631</code></p>

<p>I'm scratching my head a lot now. I think <code>b''</code> and <code>[0]</code> are equivalent salts, but I'm not sure. I think they both use utf-8 to encode the password, but I'm not sure. And I'm not convinced the JavaScript hmacSHA256 function exactly matches what Python is doing. Or it could be something else still.</p>
","<p>Off the top of my head, have you checked if</p>

<pre><code>hash = sjcl.misc.pbkdf2(""password"", """", 100000, 256);
</code></pre>

<p>gives the correct result?</p>

<p>As far as I can tell from the <a href=""http://bitwiseshiftleft.github.io/sjcl/doc/symbols/sjcl.misc.html"" rel=""nofollow noreferrer"">docs</a>, SJCL's PBKDF2 implementation defaults to HMAC-SHA256 if you don't explicitly give it a PRF.  If making that change fixes the bug, then there's probably something wrong with your <code>hmacSHA256</code> wrapper.</p>

<p>Also, I'm not sure if specifying an empty salt as <code>[0]</code> really works (or is guaranteed to work in future versions, given that the format of SJCL's bitArrays is <a href=""http://bitwiseshiftleft.github.io/sjcl/doc/symbols/sjcl.bitArray.html"" rel=""nofollow noreferrer"">explicitly subject to change</a>), but <code>""""</code> definitely should work.</p>
","43197185","178","<javascript><python><hmac>","3","4","1","2017-04-04 02:25:00","43197185","0","","2432317","","2017-04-04 02:22:20","2017-03-12 16:12:47","","2017-04-04 02:25:00","2017-03-12 22:27:25"
"51562448","HMAC, Elixir, Plug.Conn (trying to call read_body more than once)","<p>I'm struggling with an issue where something is reading the body of an http request before Plug.Parsers.JSON gets it in the pipeline. Because of this, read_body in the plug for json times out--you can't read the body twice.</p>

<p>We have an HMAC implementation in an earlier plug in our pipeline and it reads the body in some cases. Is there a pattern for how use of the body is to behave in Plug? I mean, if we can only read it once, and it has to be decoded in Plug.Parsers.JSON, well...it's not going to work. </p>

<p>Follow on question. Do we need to include the request body when we generate the HMAC hash? I mean, it feels to me like we have to do that, but I've thought myself in a circle at this point.</p>

<p>thanks!</p>
","

<p>You can pass a custom <code>:body_reader</code> option to <code>Plug.Parsers</code> in order to cache the body for later use.</p>

<p>You'll want to not read the body before the Parser and instead cache the body to read later from your plug that wants to hash it.</p>

<h3><a href=""https://hexdocs.pm/plug/Plug.Parsers.html#module-options"" rel=""nofollow noreferrer"">Option</a>:</h3>

<blockquote>
  <p><code>:body_reader</code> - an optional replacement (or wrapper) for
  <code>Plug.Conn.read_body/2</code>  to provide a function that gives access to the
  raw body before it is parsed and discarded. It is in the standard
  format of <code>{Module, :function, [args]}</code> (MFA) and defaults to
  <code>{Plug.Conn, :read_body, []}</code>.</p>
</blockquote>

<h3><a href=""https://hexdocs.pm/plug/Plug.Parsers.html#module-custom-body-reader"" rel=""nofollow noreferrer"">Example</a>:</h3>

<blockquote>
  <p>Sometimes you may want to customize how a parser reads the body from
  the connection. For example, you may want to cache the body to perform
  verification later, such as HTTP Signature Verification. This can be
  achieved with a custom body reader that would read the body and store
  it in the connection, such as:</p>

<pre class=""lang-elixir prettyprint-override""><code>defmodule CacheBodyReader do
  def read_body(conn, opts) do
    {:ok, body, conn} = Plug.Conn.read_body(conn, opts)
    conn = update_in(conn.assigns[:raw_body], &amp;[body | (&amp;1 || [])])
    {:ok, body, conn}
  end
end
</code></pre>
  
  <p>which could then be set as:</p>

<pre class=""lang-elixir prettyprint-override""><code>plug Plug.Parsers,
  parsers: [:urlencoded, :json],
  pass: [""text/*""],
  body_reader: {CacheBodyReader, :read_body, []},
  json_decoder: Jason
</code></pre>
</blockquote>

<p>It was added in <a href=""https://github.com/elixir-plug/plug/releases/tag/v1.5.1"" rel=""nofollow noreferrer"">Plug v1.5.1</a>.</p>
","51587646","177","<elixir><phoenix-framework><hmac><plug>","3","3","1","2018-07-30 06:02:55","51587646","0","1","2066155","","2018-07-30 06:02:55","2018-07-27 16:57:06","","","2018-07-30 05:46:06"
"18077729","Hashing and using time as salt to prevent access from un-authorized system and replay attacks","<p>I am currently writing a user authentication API for a mobile game. I'd want to make sure that the user can only access the system from the mobile app. (That is, the server has to deny access if the Server API is accessed from browser or CURL (un-authorized system) even though the exact POST parameters are valid). Ideally, the system should not allow replay attacks as well.</p>

<p>Does anybody have idea or example of how this can be done?</p>

<p>I am thinking of adding a unique-per-user salt with current timestamp and SHA256-ing the parameters with a private key on the client app, which will then be validated on the server. This way will prevent the access from browser or CURL as attackers will need to get the private key in order to compute the SHA256 hash. The salt (which includes timestamp) will also be sent as one of the params, and the server will get the timestamp and deny access if it is past a certain time. But I am not very sure about the security and whether it is the common or correct practice, as I've never design secured app, or seen the source code of one before.</p>

<p>Thanks for your input!</p>
","<p>This will stop users from intercepting requests on network and using them with CURL. But both private key and signature algorithm can be extracted for your app and reimplemented, so this solution will not be totally secure. </p>

<p>Alas, you can't have complete security here without some custom tamper-resistant hardware issued to users.</p>
","18079376","177","<security><sha><hmac><hmacsha1>","1","0","1","2013-08-06 11:49:39","","0","1","","","","2013-08-06 10:32:44","","","2013-08-06 11:49:39"
"57055878","ABAP string to SHA256 different to SAPUI5/Javascript","<p>Currently on my SAPUI5 project, I am creating a HMAC encoded string with this line of code:</p>

<pre><code>var secretKey = CryptoJS.enc.Hex.parse('SECRETKEY'); //USING THE CRYPTOJS LIBRARY!
var hash = CryptoJS.HmacSHA256('abc', secretKey);
hashInBase64 = CryptoJS.enc.Base64.stringify(hash);
</code></pre>

<p>which gives <code>eZdbNMwgWKOANEiozokNG2FGfzI7Yy/B8IQKXr3+krY=</code></p>

<p>I am using the CryptoJS library to execute this code in UI5.</p>

<p>However the problem is that I am receiving the wrong HMAC encoded string when I want to do the same in ABAP. After testing a few times, it seems like the encoding (in abap) is wrong before the HMAC is calculated.</p>

<p>Is there a function module that does 'CryptoJS.enc.Hex.parse()' - after googling what it does it interprets the parameter as encoded and converts it into a word array:</p>

<pre><code>DATA:
  lv_sign_key_x                TYPE xstring,
  lv_hmac_result               TYPE string.

DATA(lv_binary_secret) = cl_abap_hmac=&gt;string_to_xstring('SECRETKEY').

cl_abap_hmac=&gt;calculate_hmac_for_char(
  EXPORTING
    if_algorithm           = 'SHA256'           ""Hash Algorithm
    if_key                 = lv_binary_secret   ""HMAC Key
    if_data                = 'abc'   ""Data
  IMPORTING
    ef_hmacb64string       = lv_hmac_result  ""HMAC value as base64-encoded string
).
</code></pre>

<p>which gives <code>9dyEZn5G+uiRwsNqgY5S6k9/gmCheFNF4vFa5qBKK1w=</code></p>
","<p>Shows exact way to encode to hex and calculate to HMAC256. <a href=""https://answers.sap.com/questions/12731774/abap-string-to-sha256-different-to-sapui5javascrip.html"" rel=""nofollow noreferrer"">Link</a></p>

<pre><code>data lv_binary_secret type xstring.
data lv_string type string value '48656c6c6f2c20576f726c6421'.
translate lv_string to upper case.
lv_binary_secret = lv_string.


cl_abap_hmac=&gt;calculate_hmac_for_char(
  EXPORTING
    if_algorithm           = 'SHA256'           ""Hash Algorithm
    if_key                 = lv_binary_secret   ""HMAC Key
    if_data                = 'abc'   ""Data
  IMPORTING
    ef_hmacb64string       = data(lv_hmac_result)  ""HMAC value as base64-encoded string
).`enter code here`
</code></pre>
","57079011","177","<javascript><abap><sha256><hmac>","1","0","1","2019-07-17 15:06:22","","5","","9150270","","2019-07-16 13:00:35","2019-07-16 11:08:45","","","2019-07-17 15:06:22"
"14237622","Encryption hmac result is shorter in C than C#","<p>Sometimes you have to implement C-Code and Encryption so I have a Problem with my C-Code implementation of hmac256 or sha2_hmac Implementation:</p>

<pre><code>unsigned char key[19] = { ""abcdef"" };
size_t keylen = 18;
unsigned char input[64] = {""123456789""}; 
size_t ilen = 63;         
unsigned char output[32];
int is224 = 0;


sha2_hmac(key, keylen, input, ilen, output, is224);

char result[64] = {};
char result2[64] = {};

for(int j = 0; j &lt; 32; j++) {
        sprintf(result, ""%X"", output[j]);
        strcat(result2, result);
}
</code></pre>

<p>But the result is too short, when I compare it to the C# Code.</p>
","<p>You have to adjust your <code>sprintf()</code> function call like this:</p>

<pre><code>sprintf(result, ""%02X"", output[j]);
</code></pre>
","14237668","176","<c><hmac><sha256>","2","2","1","2013-01-09 14:41:10","14237668","3","","","","","2013-01-09 14:37:54","","2013-01-09 14:41:10","2013-01-09 14:40:06"
"48630814","Why do I get incorrect values when implementing HMAC-SHA256?","<p>I'm trying to make a function in Rust that will return a HMAC-SHA256 digest. I've been working from the description at <a href=""https://en.wikipedia.org/wiki/Hash-based_message_authentication_code"" rel=""nofollow noreferrer"">Wikipedia</a> and <a href=""https://tools.ietf.org/html/rfc2104"" rel=""nofollow noreferrer"">RFC 2104</a>. </p>

<p>I've been struggling with returning the correct HMAC. I'm using <a href=""https://www.briansmith.org/rustdoc/ring/"" rel=""nofollow noreferrer"">ring</a> for the SHA256 digests but no matter what I try, I can't seem to get the right result. I suspect it might have something to do with <code>.as_ref().to_vec()</code> conversions. Even if that's true, I don't know how to continue from that. Not everything from RFC 2104 is implemented in the following code, but it highlights my issue.</p>

<pre><code>extern crate ring;
use ring::{digest, test};

pub fn hmac(k: Vec&lt;u8&gt;, mut m: Vec&lt;u8&gt;) -&gt; Vec&lt;u8&gt; {
    // Initialize ipad and opad as byte vectors with SHA256 blocksize
    let ipad = vec![0x5C; 64];
    let opad = vec![0x36; 64];
    // iround and oround are used to seperate the two steps with XORing
    let mut iround = vec![];
    let mut oround = vec![];

    for count in 0..k.len() {
        iround.push(k[count] ^ ipad[count]);
        oround.push(k[count] ^ opad[count]);
    }

    iround.append(&amp;mut m); // m is emptied here
    iround = (digest::digest(&amp;digest::SHA256, &amp;iround).as_ref()).to_vec();
    oround.append(&amp;mut iround); // iround is emptied here
    oround = (digest::digest(&amp;digest::SHA256, &amp;oround).as_ref()).to_vec();
    let hashed_mac = oround.to_vec();

    return hashed_mac;
}

#[test]
fn test_hmac_digest() {
    let k = vec![0x61; 64];
    let m = vec![0x62; 64];
    let actual = hmac(k, m);
    // Expected value taken from: https://www.freeformatter.com/hmac-generator.html#ad-output
    let expected = test::from_hex(""f6cbb37b326d36f2f27d294ac3bb46a6aac29c1c9936b985576041bfb338ae70"").unwrap();
    assert_eq!(actual, expected);
}
</code></pre>

<p>These are the digests:</p>

<pre class=""lang-none prettyprint-override""><code>Actual = [139, 141, 144, 52, 11, 3, 48, 112, 117, 7, 56, 151, 163, 65, 152, 195, 163, 164, 26, 250, 178, 100, 187, 230, 89, 61, 191, 164, 146, 228, 180, 62]

Expected = [246, 203, 179, 123, 50, 109, 54, 242, 242, 125, 41, 74, 195, 187, 70, 166, 170, 194, 156, 28, 153, 54, 185, 133, 87, 96, 65, 191, 179, 56, 174, 112]
</code></pre>
","<p>As mentioned in a comment, you have swapped the bytes for the inner and outer padding. Refer back to the <a href=""https://en.wikipedia.org/wiki/Hash-based_message_authentication_code#Implementation"" rel=""nofollow noreferrer"">Wikipedia page</a>:</p>

<pre class=""lang-none prettyprint-override""><code>o_key_pad = key xor [0x5c * blockSize]   //Outer padded key
i_key_pad = key xor [0x36 * blockSize]   //Inner padded key
</code></pre>

<p>Here's what my take on the function would look like. I believe it has less allocation:</p>

<pre><code>extern crate ring;

use ring::{digest, test};

const BLOCK_SIZE: usize = 64;

pub fn hmac(k: &amp;[u8], m: &amp;[u8]) -&gt; Vec&lt;u8&gt; {
    assert_eq!(k.len(), BLOCK_SIZE);

    let mut i_key_pad: Vec&lt;_&gt; = k.iter().map(|&amp;k| k ^ 0x36).collect();
    let mut o_key_pad: Vec&lt;_&gt; = k.iter().map(|&amp;k| k ^ 0x5C).collect();

    i_key_pad.extend_from_slice(m);

    let hash = |v| digest::digest(&amp;digest::SHA256, v);

    let a = hash(&amp;i_key_pad);

    o_key_pad.extend_from_slice(a.as_ref());

    hash(&amp;o_key_pad).as_ref().to_vec()
}

#[test]
fn test_hmac_digest() {
    let k = [0x61; BLOCK_SIZE];
    let m = [0x62; BLOCK_SIZE];
    let actual = hmac(&amp;k, &amp;m);

    // Expected value taken from: https://www.freeformatter.com/hmac-generator.html#ad-output
    let expected = test::from_hex(""f6cbb37b326d36f2f27d294ac3bb46a6aac29c1c9936b985576041bfb338ae70"").unwrap();
    assert_eq!(actual, expected);
}
</code></pre>
","48634777","176","<rust><sha256><hmac>","2","2","1","2018-02-06 02:59:10","48634777","4","","155423","","2018-02-05 20:34:59","2018-02-05 20:19:05","","","2018-02-06 02:59:10"
"25999851","ASP.NET MVC Web API HMAC datetime","<p>I ASP.NET MVC Web API and I'm planning to use HMAC authentication. I will pass datetime through header, but I don't know how I'll have to deal with timezone issues and maintain as many as possible datetime formats, because I want to make my Web API easy to use</p>
","<p>You will have timezone issues to deal with unless you have the timestamp converted to univeral time, which can resolve that issue.</p>
","25999927","175","<.net><datetime><authentication><asp.net-web-api><hmac>","0","0","1","2014-09-23 16:15:17","","0","","","","","2014-09-23 16:10:49","","","2014-09-23 16:15:17"
"50536662","PBKDF2 Lua Implementation Issue","<p>I am trying to write a PBKDF2 implementation in pure lua. I am writing it because I want to use it in a sandboxed lua environment that does not allow outside libraries. I had a look at the standard document from the IETF and had at it. Below is the code I have come up with:</p>

<pre><code>do
    package.preload[""pbkdf2""] = function()

        local hmac = require 'hmac'
        local len = string.len
        local gsub = string.gsub
        local format = string.format
        local byte = string.byte
        local char = string.char
        local concat = table.concat
        local ceil = math.ceil

        local function toBytes(str)
            local tmp = {}
            for i = 1, len(str) do
                tmp[i] = byte(str, i)
            end
            return tmp
        end

        local function toString(bArray)
            local tmp = {}
            for i = 1, #bArray do
                tmp[i] = char(bArray[i])
            end
            tmp = concat(tmp)
            return tmp
        end

        -- transform a string of bytes in a string of hexadecimal digits
        local function asHex(s)
            local h = gsub(s, ""."", function(c)
                return format(""%02x"", byte(c))
            end)
            return h
        end

        local num2string = function(l, n)
            local s = {}
            for i = 1, n do
                local idx = (n + 1) - i
                s[idx] = char(l &amp; 255)
                l = l &gt;&gt; 8
            end
            s = concat(s)
            return s
        end

        local buildBlock = function(hFun, password, salt, c, int)
            local tmp
            local tmp2

            for i = 1, c do
                if i == 1 then
                    print(int)
                    print(salt .. int)
                    -- PRF(password, salt || INT_32_BE(i)
                    -- return result of hash as a byte string
                    tmp = hmac.hash(hFun, password, salt .. num2string(int, 4), true)
                else
                    -- returns result of hash as byte string
                    tmp2 = hmac.hash(hFun, password, tmp, true)
                    -- transform to byte arrays
                    tmp2 = toBytes(tmp2)
                    tmp = toBytes(tmp)
                    assert(#tmp == #tmp2)
                    -- apply XOR over bytes in both arrays
                    -- save results to final array
                    for j = 1, #tmp do
                        -- perform XOR operation on both elements in the respective arrays
                        tmp[j] = tmp[j] ~ tmp2[j]
                    end
                    -- transform back into byte string to pass to next hash
                    tmp = toString(tmp)
                end
            end
            return tmp
        end

        local truncate = function(str, pos)
            return string.sub(str, 1, pos)
        end

        local deriveKey = function(hFun, message, salt, c, dLen)
            local hLen = hFun.outputSize

            -- the derived key cannot be larger than (2^32 * hLen)
            if dLen &gt; (2^32) * hLen then error(""The derived key cannot be larger than 2^32 times the output size of the hash function."") end

            -- the block size is the desired key length divided by the output size of the underlying hash function, rounded up
            local blockSize = ceil(dLen/hLen)

            -- to store our blocks
            local final = {}

            for i = 1, blockSize do
                -- lets make our blocks in here
                final[i] = buildBlock(hFun, message, salt, c, i)
            end

            local result
            if #final == 1 then
                result = final[1] -- we only have one block
            else
                result = concat(final) -- turns final into a bytestring to be outputted
            end
            --if #result &gt; dLen then truncate(final, dLen) end
            assert(#result == dLen)
            return asHex(result) -- outputs as a hex value
        end
        return {deriveKey = deriveKey}
    end
end
</code></pre>

<p>This code is not getting the correct answers. Testing this code with test vectors provided <a href=""https://stackoverflow.com/a/5136918/9821157"">here</a>, assuming that the underlying PRF is HMAC-SHA256, the output is below:</p>

<pre><code>key: ""password""
salt: ""salt""
c: 1
dkLen: 32

Got: 13463842ec330934dc124494b40d8baade465b72f3fcadad741f2d0e052fd2f5
Expected: 120fb6cffcf8b32c43e7225256c4f837a86548c92ccc35480805987cb70be17b

key: ""password""
salt: ""salt""
c: 2
dkLen: 32

Got: 8b82aed26f503effdbc6c14bc7f0338b2b90e387f14ac1f91f9ad74e618f9558
Expected: AE4D0C95AF6B46D32D0ADFF928F06DD02A303F8EF3C251DFD6E2D85A95474C43
</code></pre>

<p>I believe it may have something to do with the string to byte encoding, but I cannot pinpoint what exactly is causing the issue. When I was testing my HMAC code, I had to rely on online generators because I couldn't find vectors for HMAC-SHA224 and HMAC-SHA256. Some calculators would give me completely different output values for the same key, message combination. That could be because of how they are processing the inputs, but I am not sure. I would appreciate it if someone more experienced could help me out with this.</p>

<p>EDIT: This problem is solved. Seems that all that was needed was to pass <em>int</em> as a binary string of length 4. I updated the code with the fixes.</p>

<p>EDIT 2: I read the standard again to realize the solution was in my face the entire time (standard says to encode i as a 32-bit big endian integer).</p>
","<p>The solution was to convert <em>int</em> to a binary string of length 4. Thanks to @EgorSkriptunoff for his insight.</p>
","50538907","174","<lua><sha256><hmac><pbkdf2>","0","0","1","2018-05-26 02:58:52","50538907","6","","9821157","","2018-05-26 02:58:52","2018-05-25 20:48:12","","","2018-05-26 02:55:29"
"52865791","PostgreSQL10, Pgcrypto, HMAC, how to recalculate data?","<p>I have to make cookies with a Hash created with the HMAC function for automatic authentication.</p>

<p>I was searching the internet how to use the HMAC function, and according to what I found, they do it like this:</p>

<pre><code>SELECT * 
FROM   APP.USER
WHERE  ENCODE( HMAC( USER_ID::TEXT, 'MY_KEY', 'SHA256'), 'HEX) = COOKIE_HASH;
</code></pre>

<p>The problem is that postgres is doing a sequential scan. O (n)</p>

<p>I want to know if there is any way to retrieve the user_id with the key, in order to do a index scan.</p>

<ul>
<li><p>hmac documentation:
<a href=""https://www.postgresql.org/docs/current/static/pgcrypto.html"" rel=""nofollow noreferrer"">https://www.postgresql.org/docs/current/static/pgcrypto.html</a></p></li>
<li><p>hmac arguments: hmac(data text, key text, type text) returns bytea</p></li>
</ul>

<p>Thanks for your time (forgive my english).</p>
","<p>Because your sql trying to run function on every rows. You can use functional index or save hashed and encoded value on another column.</p>

<p>Functional index:</p>

<pre><code>CREATE INDEX fxix_user_id ON APP.USER(ENCODE(HMAC( USER_ID::TEXT, 'MY_KEY', 'SHA256'), 'HEX));
</code></pre>
","59298236","173","<sql><postgresql><plpgsql><hmac><pgcrypto>","1","1","1","2019-12-12 05:47:58","","0","","7701141","","2018-10-18 03:00:38","2018-10-18 01:47:57","","2019-12-12 05:47:58","2019-12-12 05:29:34"
"56909626","How to make a Base64 HmacSHA256 signature of bytes payload in JavaScript equivalent to Java?","<p>In Java to make a signature of some data we are using <code>Mac</code> instance which allows to sign any byte array. How to make a function in JavaScript which produces the same signature for the same byte array?</p>

<p>An example of Java implementation (method <code>sign</code> signs <code>message</code> with <code>HmacSHA256</code> and than converts <code>signature</code> into url-safe base64 string):</p>

<pre><code>public static void main(String[] args) throws InvalidKeyException, NoSuchAlgorithmException {

    byte[] secret = new byte[5];
    secret[0] = 0x1e;
    secret[1] = 0x03;
    secret[2] = 0x01;
    secret[3] = 0x02;
    secret[4] = 0x03;

    byte[] message = new byte[5];
    message[0] = 0x01;
    message[1] = 0x03;
    message[2] = 0x02;
    message[3] = 0x1e;
    message[4] = 0x03;

    System.out.println(sign(secret, message));
}

private static String sign(byte[] secret, byte[] message) throws NoSuchAlgorithmException, InvalidKeyException {

    Mac sha256Hmac = Mac.getInstance(""HmacSHA256"");
    SecretKeySpec secretKey = new SecretKeySpec(secret, ""HmacSHA256"");
    sha256Hmac.init(secretKey);

    byte[] signature = sha256Hmac.doFinal(message);
    return Base64.getUrlEncoder().withoutPadding().encodeToString(signature);
}
</code></pre>

<p>The example above produces <code>q-l6FioFNkAqMIIxX5rs3AF-VnGIzpApCSSDHmnmjF8</code> signature string. I am trying to create the equivalent of <code>sign</code> method in JavaScript to get the same signature.</p>

<pre><code>function main(){
    var secret = [5];
    secret[0] = 0x1e;
    secret[1] = 0x03;
    secret[2] = 0x01;
    secret[3] = 0x02;
    secret[4] = 0x03;

    var message = [5];
    message[0] = 0x01;
    message[1] = 0x03;
    message[2] = 0x02;
    message[3] = 0x1e;
    message[4] = 0x03;

    console.log(sign(secret, message));
}

function sign(secret, message){

    // ?

}
</code></pre>

<p>I couldn't find a way to sign bytes with <code>CryptoJS</code>.</p>
","<p>Base64 and HmacSHA256 should be included in CryptoJS after install. Try this approach: </p>

<pre><code>function sign(secret, message){
const hash = CryptoJS.HmacSHA256(message.join(''), secret.join('')); 
const hashInBase64 = CryptoJS.enc.Base64.stringify(hash);
return hashInBase64}
</code></pre>
","56909684","173","<javascript><java><digital-signature><hmac><cryptojs>","0","0","2","2019-07-06 11:32:46","56913709","0","","","","","2019-07-05 21:58:41","","","2019-07-05 22:07:54"
"56909626","How to make a Base64 HmacSHA256 signature of bytes payload in JavaScript equivalent to Java?","<p>In Java to make a signature of some data we are using <code>Mac</code> instance which allows to sign any byte array. How to make a function in JavaScript which produces the same signature for the same byte array?</p>

<p>An example of Java implementation (method <code>sign</code> signs <code>message</code> with <code>HmacSHA256</code> and than converts <code>signature</code> into url-safe base64 string):</p>

<pre><code>public static void main(String[] args) throws InvalidKeyException, NoSuchAlgorithmException {

    byte[] secret = new byte[5];
    secret[0] = 0x1e;
    secret[1] = 0x03;
    secret[2] = 0x01;
    secret[3] = 0x02;
    secret[4] = 0x03;

    byte[] message = new byte[5];
    message[0] = 0x01;
    message[1] = 0x03;
    message[2] = 0x02;
    message[3] = 0x1e;
    message[4] = 0x03;

    System.out.println(sign(secret, message));
}

private static String sign(byte[] secret, byte[] message) throws NoSuchAlgorithmException, InvalidKeyException {

    Mac sha256Hmac = Mac.getInstance(""HmacSHA256"");
    SecretKeySpec secretKey = new SecretKeySpec(secret, ""HmacSHA256"");
    sha256Hmac.init(secretKey);

    byte[] signature = sha256Hmac.doFinal(message);
    return Base64.getUrlEncoder().withoutPadding().encodeToString(signature);
}
</code></pre>

<p>The example above produces <code>q-l6FioFNkAqMIIxX5rs3AF-VnGIzpApCSSDHmnmjF8</code> signature string. I am trying to create the equivalent of <code>sign</code> method in JavaScript to get the same signature.</p>

<pre><code>function main(){
    var secret = [5];
    secret[0] = 0x1e;
    secret[1] = 0x03;
    secret[2] = 0x01;
    secret[3] = 0x02;
    secret[4] = 0x03;

    var message = [5];
    message[0] = 0x01;
    message[1] = 0x03;
    message[2] = 0x02;
    message[3] = 0x1e;
    message[4] = 0x03;

    console.log(sign(secret, message));
}

function sign(secret, message){

    // ?

}
</code></pre>

<p>I couldn't find a way to sign bytes with <code>CryptoJS</code>.</p>
","<p>The solution appeared to be not complicated. Before using <code>CryptoJS</code> we have to correctly convert bytes array into a String. After returning <code>base64</code> string we should escape it to url friendly string.</p>

<pre><code>function sign(secret, message){

    var secretString = String.fromCharCode.apply(String, secret);
    var messageString = String.fromCharCode.apply(String, message);

    var hash = CryptoJS.HmacSHA256(messageString, secretString);
    return CryptoJS.enc.Base64.stringify(hash).replace(/\+/g, '-').replace(/\//g, '_').replace(/\=+$/, '');
}
</code></pre>
","56913709","173","<javascript><java><digital-signature><hmac><cryptojs>","0","0","2","2019-07-06 11:32:46","56913709","0","","","","","2019-07-05 21:58:41","","","2019-07-06 11:32:46"
"42517263","SGX calculating HMAC inside enclave","<p>I'm trying to calculate an HMAC with SHA512 inside an Intel SGX enclave. 
I got the code to work but receive the wrong results. I have an example that uses static pre-defined key and nonce from which the HMAC is calculated, but when verifying the received result it does not match the correct one.</p>

<p>Apparantely there are two different variants to calculate the HMAC (according to this <a href=""https://software.intel.com/en-us/node/503181U"" rel=""nofollow noreferrer"">enter link description here</a>, I've tried both.</p>

<p>Here is the function from the enclave:</p>

<pre><code>int calculateHMAC(uint8_t *key, uint8_t *nonce, uint8_t *res_hmac) {
    IppsHMACState *ctx;
    IppStatus status;
    int psize = 0;

    //VARIANT 1
    status = ippsHMAC_GetSize(&amp;psize);

    if (status == ippStsNullPtrErr) 
        return 1;

    ctx = (IppsHMACState*) malloc(psize);
    status = ippsHMAC_Init(key, 16, ctx, ippHashAlg_SHA512);

    if (status != ippStsNoErr)
        return 1;

    status = ippsHMAC_Update(nonce, 16, ctx);

    if (status != ippStsNoErr)
        return 1;

    uint8_t hmac[64];
    memset(hmac, '\0', 64);
    status = ippsHMAC_Final(hmac, 64, ctx);

    if (status != ippStsNoErr)
        return 1;

    memcpy(res_hmac, hmac, 64);

    //VARIANT 2
//  uint8_t test_hmac[HMAC_LENGTH];
//  status = ippsHMAC_Message(nonce, 16, key, 16, test_hmac, 64, ippHashAlg_SHA512);

//  if (status != ippStsNoErr)
//      return 1;

//  memcpy(res_hmac, test_hmac, 64);

    return 0;

}
</code></pre>

<p>Here is the UPDATED call:</p>

<pre><code>uint8_t ba_nonce[16] = {
    0x7d, 0x93, 0x09, 0x9f, 0x7f, 0xed, 0x16, 0x21,
    0x58, 0x36, 0xf7, 0xba, 0xd4, 0xdb, 0x0e, 0x48
};

uint8_t ba_key[16] = {
    0xa5, 0xb1, 0x15, 0x53, 0x6d, 0x5b, 0xf3, 0x50,
    0xc5, 0xb0, 0xfa, 0x6f, 0x69, 0x24, 0x2f, 0x18
};

uint8_t t_hmac[64];
memset(t_hmac, '\0', 64);

int error = calculateHMAC(ba_key, ba_nonce, t_hmac);
</code></pre>

<p>I don't see what I'm doing wrong!?</p>

<p>This will result in 
    7d2f2e3d57c84a58945b9016fb37e2df03afdde313c9d79c31ec1e6612d6d6b20456a8fcf799ef74d16f60c7f283e621400004422885f33fb3d2bb7ae7a1daa3</p>

<p>which is wrong according to this calculator <a href=""http://www.freeformatter.com/hmac-generator.html#ad-output"" rel=""nofollow noreferrer"">here</a> </p>
","<p>Your issue is <code>strtol()</code>. It expects a string. In C a string is an arbitrary sequence of characters terminated with a <code>NULL</code>-byte. However, it is provided a pointer to an array of size two where the last entry is not <code>NULL</code>. Therefore, <code>strtol()</code> also analysis the bytes behind your <code>tmp</code> array.</p>

<p>Since, <code>tmp</code> is stored on the stack we can not assume that the subsequent bytes are always the same for different invocations. Thus, you get random results.</p>

<p><strong>Solution:</strong> Either, you increase the size of <code>tmp</code> and add a <code>NULL</code> byte in the last place or - and this is probably the better solution - you directly initialize <code>nonce</code> and <code>key</code> with what you need (see also <a href=""https://stackoverflow.com/questions/39902678/how-to-assign-hex-values-into-char-type-without-null-termination/39902760#39902760"">this</a> post):</p>

<pre><code>uint8_t ba_nonce[16] = {
    0x7d, 0x93, 0x09, 0x9f, 0x7f, 0xed, 0x16, 0x21,
    0x58, 0x36, 0xf7, 0xba, 0xd4, 0xdb, 0x0e, 0x48
};

uint8_t ba_key[16] = {
    0xa5, 0xb1, 0x15, 0x53, 0x6d, 0x5b, 0xf3, 0x50,
    0xc5, 0xb0, 0xfa, 0x6f, 0x69, 0x24, 0x2f, 0x18
};
</code></pre>
","42579176","172","<hmac><sgx>","0","1","1","2017-03-03 20:08:16","42579176","0","1","1606657","","2017-03-03 20:08:16","2017-02-28 19:33:06","","2017-05-23 12:25:13","2017-03-03 12:42:06"
"48377429","convert hash even ruby like php's hash_hmac ()","<p>PHP version:</p>

<pre><code>hash_hmac('sha384', data, privateKey, true);
</code></pre>

<p>I have rewritten the above PHP code to ruby code below, but similar results were not obtained.</p>

<p>Ruby version:</p>

<pre><code>OpenSSL::HMAC.hexdigest(OpenSSL::Digest.new(""sha384""), privateKey, data)
</code></pre>

<p>PHP is raw binary data, Ruby does not have such an option.</p>

<p>How can I rewrite the PHP function into a Ruby function?</p>
","<p>[Edit: I've edited this answer heavily since first writing it, to make it clearer, and to emphasize the use of Array#pack.]</p>

<p>Unfortunately, the way to express raw bytes in Ruby is with a string. You should probably force the encoding to ASCII 8-bit, as opposed to the default UTF-8, so that chars are the same thing as bytes, and no fancy conversions will be done on the input data.</p>

<p>You can explicitly set the encoding of a string:</p>

<pre><code>2.5.0 :008 &gt; my_string = String.new.force_encoding(Encoding::ASCII_8BIT)
 =&gt; """"
2.5.0 :009 &gt; my_string.encoding
 =&gt; #&lt;Encoding:ASCII-8BIT&gt;
</code></pre>

<p>...or use the Array#pack method:</p>

<pre><code>2.5.0 :010 &gt; a123 = [1,2,3].pack('c*')
 =&gt; ""\x01\x02\x03""
2.5.0 :011 &gt; a123.encoding
 =&gt; #&lt;Encoding:ASCII-8BIT&gt;
</code></pre>

<p>...or any combination thereof:</p>

<pre><code>2.5.0 :018 &gt; my_string = String.new.force_encoding(Encoding::ASCII_8BIT)
 =&gt; """"
2.5.0 :019 &gt; my_string &lt;&lt; [4,5,6].pack('c*')
 =&gt; ""\x04\x05\x06""
2.5.0 :020 &gt; my_string &lt;&lt; [7,8,9].pack('c*')
 =&gt; ""\x04\x05\x06\a\b\t""
2.5.0 :021 &gt; my_string.bytes
 =&gt; [4, 5, 6, 7, 8, 9]
</code></pre>

<p>The pack method is a great way to insert values into the string, since it's very explicit about the format.</p>

<p>You could of course also use an array of byte values, but that array would not be compatible with most use cases.</p>

<p>I'm not certain that will solve your problem, but it's worth a try.</p>
","48386272","171","<php><ruby><hash><hmac>","0","0","1","2018-01-22 22:14:02","","4","","3578036","","2018-01-22 09:07:05","2018-01-22 08:33:48","","2018-01-22 22:14:02","2018-01-22 16:35:54"
"21915451","Why am I getting two different 'formats' of hex in my bytes while evaluating an HMAC?","<p>I'm getting a signed payload from an authentication source that comes in a base64 encoded and URL encoded format. I'm getting confused somewhere while evaluating, and ending up with similar data in different 'formats'.</p>

<p>Here's my code:</p>

<pre><code>//Split the message to payload and signature
string[] split = raw_message.Split('.');

//Payload
string base64_payload = WebUtility.UrlDecode(split[0]);
byte[] payload = Convert.FromBase64String(base64_payload);

//Expected signature
string base64_expected_sig = WebUtility.UrlDecode(split[1]);
byte[] expected_sig = Convert.FromBase64String(base64_expected_sig);

//Signature
byte[] signature = hmacsha256.ComputeHash(payload);

//Output as a string
var foo = System.Text.Encoding.UTF8.GetString(expected_sig);
var bar = BitConverter.ToString(signature);
</code></pre>

<p>The expected signature (<code>foo</code>) comes out like so:
<code>76eba09fcb54877299dcbd1e1e35717e3bd42e066e7ecdb131c7d0161dec3418</code></p>

<p>The computed signature (<code>bar</code>) is as follows:</p>

<pre><code>76-EB-A0-9F-CB-54-87-72-99-DC-BD-1E-1E-35-71-7E-3B-D4-2E-06-6E-7E-CD-B1-31-C7-D0-16-1D-EC-34-18
</code></pre>

<p>Obviously, when comparing bytes for bytes, this doesn't work. </p>

<p>I see that I'm having to convert the <code>expected_sig</code> and the <code>signature</code> in different ways to get them to display as a string, but I can't figure out <em>how</em> I need to change the expected signature to get to where I can compare bytes for bytes.</p>

<p>I can obviously work around the issue but simply converting the string <code>bar</code>, but that's dirty and I just don't like it.</p>

<p>Where am I going wrong here? What am I not understanding?</p>
","<p>The good news is that the hash computation appears to be working.</p>

<p>The bad news is that you're receiving the hash in a brain-dead fashion. For some reason it seems that the authors decided it was a good idea to:</p>

<ul>
<li>Compute the hash (fine)</li>
<li>Convert this binary data to text as hex (fine)</li>
<li>Convert the hex back into binary data by applying ASCII/UTF-8/anything-ASCII-compatible encoding (why?)</li>
<li>Convert the result back into text using base64 (what?)</li>
<li>URL-encode the result (which wouldn't even be necessary with hex...)</li>
</ul>

<p>Using <em>either</em> base64 <em>or</em> hex on the original binary makes sense, but applying <em>both</em> is crazy.</p>

<p>Anyway, it's fairly easy for you to do the same thing. For example:</p>

<pre><code>string hexSignature = string.Join("""", signature.Select(b =&gt; b.ToString(""x2"")));
byte[] hexSignatureUtf8 = Encoding.UTF8.GetBytes(hexSignature);
string finalSignature = Convert.ToBase64String(hexSignatureUtf8);
</code></pre>

<p>That should now match <code>WebUtility.UrlDecode(split[1])</code>.</p>

<p>Alternatively, you can work backwards from what's in the result, but I wouldn't go as far as parsing the hex back to bytes - it would be simpler to keep the first line of the above, but use:</p>

<pre><code>string expectedHexBase64 = WebUtility.UrlDecode(split[1]);
byte[] expectedHexUtf8 = Convert.FromBase64String(expectedHexBase64);
string expectedHex = Encoding.UTF8.GetString(expectedHexUtf8);
</code></pre>

<p>Then compare it with <code>hexSignature</code>.</p>

<p>Ideally, you should talk to whoever's providing you with the crazy format and hit them with a cluestick though...</p>
","21915840","170","<c#><encoding><hex><base64><hmac>","2","2","1","2014-02-20 17:57:10","21915840","0","","","","","2014-02-20 17:38:46","","","2014-02-20 17:57:10"
"42840797","Is HMAC still needed if encrypted data is always saved and retrieved locally","<p>My understanding of HMAC is that it can help to verify the integrity of encrypted data before the data is processed i.e. it can be used to determine whether or not the data being sent to a decryption routine has been modified in any way.</p>

<p>That being the case, is there any advantage in incorporating it into an encryption scheme if the data is never transmitted outside of the application generating it? My use case is quite simple - a user submits data (in plaintext) to the scripts I've written to store customer details. My scripts then encrypt this data and save it to the database, and my scripts then provide a way for the user to retrieve the data and decrypt it based on the record ID they supply. There is no way for my users to send encrypted data directly to the decryption routine and I don't need to provide an external API.</p>

<p>Therefore, is it reasonable to assume that there is a chain of trust in the application by default because the same application is responsible for writing and retrieving the data? If I add HMAC to this scheme, is it redundant in this context or is it best practice to always implement HMAC regardless of the context? I'm intending to use the Defuse library but I'd like to understand what the benefit of HMAC is to my project.</p>

<p>Thanks in advance for any advice or input :)</p>
","<p>My OCD usually dictates that implementing HMAC is always good practice, if for no other reason, to remove the warning from logs. </p>

<p>In your case I do not believe there is a defined upside to implementing HMAC other than ensuring the integrity of the plain text submission. Your script may encrypt the data but it would not be useful in the unlikely event that bad data is passed to it.  </p>
","42841052","169","<encryption><hmac>","1","1","2","2017-03-16 18:07:16","42841141","0","","","","","2017-03-16 17:20:43","","","2017-03-16 17:33:42"
"42840797","Is HMAC still needed if encrypted data is always saved and retrieved locally","<p>My understanding of HMAC is that it can help to verify the integrity of encrypted data before the data is processed i.e. it can be used to determine whether or not the data being sent to a decryption routine has been modified in any way.</p>

<p>That being the case, is there any advantage in incorporating it into an encryption scheme if the data is never transmitted outside of the application generating it? My use case is quite simple - a user submits data (in plaintext) to the scripts I've written to store customer details. My scripts then encrypt this data and save it to the database, and my scripts then provide a way for the user to retrieve the data and decrypt it based on the record ID they supply. There is no way for my users to send encrypted data directly to the decryption routine and I don't need to provide an external API.</p>

<p>Therefore, is it reasonable to assume that there is a chain of trust in the application by default because the same application is responsible for writing and retrieving the data? If I add HMAC to this scheme, is it redundant in this context or is it best practice to always implement HMAC regardless of the context? I'm intending to use the Defuse library but I'd like to understand what the benefit of HMAC is to my project.</p>

<p>Thanks in advance for any advice or input :)</p>
","<p>First, you should understand that there are attacks that allow an attacker to modify encrypted data without decrypting it. See <a href=""https://security.stackexchange.com/questions/46704/is-there-an-attack-that-can-modify-ciphertext-while-still-allowing-it-to-be-decr"">Is there an attack that can modify ciphertext while still allowing it to be decrypted?</a> on Security.SE and <a href=""https://crypto.stackexchange.com/questions/3654/malleability-attacks-against-encryption-without-authentication"">Malleability attacks against encryption without authentication</a> on Crypto.SE. If an attacker gets write access to the encrypted data -- even without any decryption keys -- they could cause significant havoc.</p>

<p>You say that the encrypted data is ""never transmitted outside of the application generating it"" but in the next two sentences you say that you ""save it to the database"" which appears (to me) to be something of a contradiction. Trusting the processing of encrypted data in memory is one thing, but trusting its serialization to disk, especially if done by another program (such as a database system) and/or on a separate physical machine (now or in the future, as the system evolves).</p>

<p>The significant question here is: would it ever be a possible for an attacker to modify or replace the encrypted data with alternate encrypted data, without access to the application and keys? If the attacker is an insider and runs the program as a normal user, then it's not generally possible to defend your data: anything the program allows the attacker to do is on the table. However, HMAC is relevant when write access to the data is possible for a non-user (or for a user in excess of their normal permissions). If the database is compromised, an attacker could possibly modify data with impunity, even without access to the application itself. Using HMAC verification severely limits the attacker's ability to modify the data usefully, even if they get write access.</p>
","42841141","169","<encryption><hmac>","1","4","2","2017-03-16 18:07:16","42841141","0","","","","","2017-03-16 17:20:43","","2017-04-13 12:48:17","2017-03-16 17:37:20"
"55066754","Verifying HMAC from Microsoft Teams custom Bot in ColdFusion","<p>I am trying to authenticate a Microsoft Teams custom Bot with ColdFusion, <a href=""https://docs.microsoft.com/en-us/microsoftteams/platform/concepts/outgoingwebhook"" rel=""nofollow noreferrer"">following the Microsoft instructions in C#</a>.  I also tried following <a href=""https://stackoverflow.com/a/47658513/3112803"">this PHP example</a>.  But I'm not having any luck.  Any idea what I'm missing here?</p>

<pre><code>&lt;cfset secretKey       = ""MsVx7SpJKnSiycvsUyLMiD8lDIFkEUDhuYuFAT94hXY=""&gt;
&lt;cfset httpRequestData = GetHttpRequestData()&gt;
&lt;cfset c               = httpRequestData.content&gt;
&lt;cfset calculated_hmac = toBase64(hmac(c, secretKey, ""HMACSHA256""))&gt;
</code></pre>

<p>I'm getting this...</p>

<pre><code>calculated_hmac: NjE2RUY1RjREQTNEMzk1Q0RBNUJDMEE2NDhFNzk3RDIyNUMzRDJDMjk5NTYzMDgxODk0NkU3Njc3RTVEQTAyQQ==
</code></pre>

<p>While the headers.authorization from Microsoft is this...</p>

<pre><code>HMAC 6N0WyOW7g+LqShKYsouWOrPjgh0PD1gazfwNeNwpuS8=
</code></pre>

<p>For this specific example the <code>GetHttpRequestData().content</code> was...</p>

<blockquote>
  <p>{""type"":""message"",""id"":""1552059974228"",""timestamp"":""2019-03-08T15:46:14.225Z"",""localTimestamp"":""2019-03-08T09:46:14.225-06:00"",""serviceUrl"":""<a href=""https://smba.trafficmanager.net/amer/"" rel=""nofollow noreferrer"">https://smba.trafficmanager.net/amer/</a>"",""channelId"":""msteams"",""from"":{""id"":""29:1lY_4faAJwr1qSsIBSpFnI3nYpy3wv5hLp5qZk1_uuc_3ET_aW1Ttu_vN-evUZ0TXVKIBoy8wEBzPT7a1WgwOTQ"",""name"":""Gordon
  Frobenius"",""aadObjectId"":""be3510a6-204d-4b3f-b6c3-52bbddb303d5""},""conversation"":{""isGroup"":true,""id"":""19:a69ef3b3162a43018edb05db74138636@thread.skype;messageid=1552059031619"",""name"":null,""conversationType"":""channel""},""recipient"":null,""textFormat"":""plain"",""attachmentLayout"":null,""membersAdded"":[],""membersRemoved"":[],""topicName"":null,""historyDisclosed"":null,""locale"":""en-US"",""text"":""cmpro
  bot&nbsp;help\n"",""speak"":null,""inputHint"":null,""summary"":null,""suggestedActions"":null,""attachments"":[{""contentType"":""text/html"",""contentUrl"":null,""content"":""http://schema.skype.com/Mention\""
  itemid=\""0\"">cmpro
  bot&nbsp;help\n"",""name"":null,""thumbnailUrl"":null}],""entities"":[{""type"":""clientInfo"",""locale"":""en-US"",""country"":""US"",""platform"":""Windows""}],""channelData"":{""teamsChannelId"":""19:a69ef3b3162a43018edb05db74138636@thread.skype"",""teamsTeamId"":""19:a69ef3b3162a43018edb05db74138636@thread.skype"",""channel"":{""id"":""19:a69ef3b3162a43018edb05db74138636@thread.skype""},""team"":{""id"":""19:a69ef3b3162a43018edb05db74138636@thread.skype""},""tenant"":{""id"":""0d78b7c2-75c2-4dad-966d-500250225e13""}},""action"":null,""replyToId"":null,""value"":null,""name"":null,""relatesTo"":null,""code"":null}</p>
</blockquote>
","<p>(Note, I couldn't reproduce that ""calculated_hmac"" because the sample ""content"" string must differ in some way from the original - probably just white space, but that's enough to totally alter the result ...). </p>

<p>Anyway, based on <a href=""https://docs.microsoft.com/en-us/microsoftteams/platform/concepts/outgoingwebhook"" rel=""nofollow noreferrer"">the instructions</a>, I'd guess the main issue is using strings, instead of binary, in the hashing:</p>

<blockquote>
  <ol>
  <li>Generate the hmac from the request body of the message.... You will need to <strong>convert the body to a byte array in UTF8.</strong></li>
  <li>To compute the hash, provide <strong>the byte array of the security token</strong> provided by Microsoft Teams when you registered the outgoing webhook.</li>
  </ol>
</blockquote>

<p>First try decoding the body into binary</p>

<pre><code>&lt;cfset bodyBinary = charsetDecode(GetHttpRequestData().content, ""utf-8"")&gt;
</code></pre>

<p>Do the same with the secret key</p>

<pre><code>&lt;cfset secretKey  = ""MsVx7SpJKnSiycvsUyLMiD8lDIFkEUDhuYuFAT94hXY=""&gt;
&lt;cfset secretBinary = binaryDecode(secretKey, ""base64"")&gt;
</code></pre>

<p>Lastly, don't forget HMAC() returns a hexadecimal string. If you need base64, you'll have to DIY:</p>

<pre><code>&lt;cfset hexHash = hmac(bodyBinary, secretBinary, ""HMACSHA256"")&gt;
&lt;cfset calculated_hmac = binaryEncode(binaryDecode(hexHash, ""hex""), ""base64"")&gt;
</code></pre>
","55068761","169","<php><coldfusion><chatbot><hmac><microsoft-teams>","4","4","1","2019-03-08 19:02:39","55068761","0","","","","","2019-03-08 15:56:02","","2019-03-08 19:02:39","2019-03-08 18:11:18"
"51288956","Why does my crypto.createHmac() generate a different HMAC for the same input?","<p>I am trying to match the HMAC in Node.js to the HMAC in PHP for API authorization. The problem is in Node.js, the createHmac() function generates a different HMAC for the same input, and therefore does not match with the HMAC in PHP.</p>

<p>Here is my JS code:</p>

<pre><code>events: {
  proxyReq: (proxyReq, req) =&gt; {
    const API_KEY = 125;
    const API_SECRET_KEY = 'abc';

    let hmac = crypto.createHmac('sha512', API_SECRET_KEY);
    hmac.update('0');
    const s = hmac.digest('base64');

    proxyReq.setHeader('x-api-key', API_KEY);
    proxyReq.setHeader('x-api-signature', s);
    proxyReq.setHeader('x-api-date', date);
  },
</code></pre>

<p>PHP:</p>

<pre><code>$API_SECRET_KEY = 'abc';
$client_signature = $request-&gt;header('x-api-signature');
$hmac = base64_encode(hash_hmac('sha512', '0', base64_decode($API_SECRET_KEY), true));

Log::error($client_signature);
Log::error($hmac);
</code></pre>

<p>Latest outputs:</p>

<pre><code>[2018-07-11 15:25:28] local.ERROR: dO50o/LcS0/UOXOu/5lHbOMXLe+l225vUU13fWEHeOoUHV7SlcSOE9rQq2UhTlys5N6C4hkq8QTALnpRehtlCg==  
[2018-07-11 15:25:28] local.ERROR: 7W2U/3uEKIMD0s39jmZLlJItwTcSSDQdW7WTYdslvIjuUeGydyqwwAuZzaMP0Do5v1zRJxmPITFdy4EHTY5r6A==  

[2018-07-11 15:25:33] local.ERROR: UYsXZFyoAB2zELZzwjWyktPEHlYqIP3cgLeb/LXK0X8pnkVxiqEaFWK7c1YIWd6hFPpZHn5j1YdbDhpAL7hQ5A==  
[2018-07-11 15:25:33] local.ERROR: 7W2U/3uEKIMD0s39jmZLlJItwTcSSDQdW7WTYdslvIjuUeGydyqwwAuZzaMP0Do5v1zRJxmPITFdy4EHTY5r6A==  
</code></pre>

<p>Any alternatives or solutions would be appreciated!</p>
","<p>If you match what you do in PHP with <code>base64_decode</code>, you get the correct value:</p>

<pre><code>const crypto = require('crypto');
const API_SECRET_KEY = Buffer.from('abc', 'base64');

let hmac = crypto.createHmac('sha512', API_SECRET_KEY);
hmac.update('0');
const s = hmac.digest('base64');
console.log(s);
</code></pre>

<p><code>7W2U/3uEKIMD0s39jmZLlJItwTcSSDQdW7WTYdslvIjuUeGydyqwwAuZzaMP0Do5v1zRJxmPITFdy4EHTY5r6A==</code></p>

<p><a href=""https://repl.it/repls/BouncyBogusGigabyte"" rel=""nofollow noreferrer"">https://repl.it/repls/BouncyBogusGigabyte</a></p>

<p>Check that you really have the correct constant API_SECRET_KEY value, the correct data input value ('0' in this case), and you are looking at the correct requests in the PHP code. If you provide the same inputs, both libraries will give you the same output value.</p>
","51290314","167","<javascript><php><node.js><hmac><cryptojs>","2","0","1","2018-07-11 16:28:37","","4","","7350995","","2018-07-11 15:27:59","2018-07-11 15:12:20","","","2018-07-11 16:28:37"
"23734880","Is this a secure implementation of a basic HMAC authentication system for my REST API?","<p>I'm building a very basic REST API for my site. The only verb I'm using at the moment is GET which simply outputs a list of posts on my site.</p>

<p>For authentication, I have been reading about HMAC and in particular this article:</p>

<p><a href=""http://websec.io/2013/02/14/API-Authentication-Public-Private-Hashes.html"" rel=""nofollow"">http://websec.io/2013/02/14/API-Authentication-Public-Private-Hashes.html</a></p>

<p>My question centres around what the 'hashed content' should be. As I am not posting any data to the API, I have just been hashing my public key (with a simple salt) using my private key.</p>

<p>Is this a secure method or should I use a different 'content hash'? The data is not sensitive in any way - this was just a learning exercise.</p>
","<p>You will want to consider the ""replay attacker"". When the attacker captures a packet between your API client and the server, what damage can she do when she replays it later? </p>

<p>In your case, if you only use the API key of the user in the HMAC, then the attacker will be able to impersonate that user when she replay the requests. She can call any API request and just set the HMAC to what she captured, as it will validate.</p>

<p>If none of the parameters of the request are included, the attacker will be able to call the request and specify her own parameters. So it's better if the parameters are also included in the HMAC. It doesn't prevent replay of the request with these specific parameters though.</p>

<p>You can include a timestamp parameter to the request and in the HMAC. The server will recompute the HMAC including the timestamp passed in, and it will also verify that the timestamp is recent enough. As the attacker cannot forge new HMAC out of thin air, she will only be able to use ones with matching timestamps that you will reject based on age.</p>
","24138592","167","<api><rest><hash><restful-authentication><hmac>","1","0","1","2014-06-10 10:24:52","24138592","0","","","","","2014-05-19 10:01:58","","","2014-06-10 10:24:52"
"37498693","Amazon SES HTTPS Query API Authentication error","<p>I have been trying to send an email using Amazon SES Https Query API.
but the Signature that I calculate and send to aws is not accepted.</p>

<p>I get this error message.</p>

<pre><code>&lt;ErrorResponse xmlns=""http://ses.amazonaws.com/doc/2010-12-01/""&gt;
  &lt;Error&gt;
    &lt;Type&gt;Sender&lt;/Type&gt;
    &lt;Code&gt;SignatureDoesNotMatch&lt;/Code&gt;
    &lt;Message&gt;The request signature we calculated does not match the signature you provided. Check your AWS Secret Access Key and signing     method. Consult the service documentation for details.&lt;/Message&gt;
  &lt;/Error&gt;
  &lt;RequestId&gt;c97bd130-24c9-11e6-924a-b59d7ac9182b&lt;/RequestId&gt;
&lt;/ErrorResponse&gt;
</code></pre>

<p>here is my java Code</p>

<pre><code>public class SendSESMail {
 public static void main(String[] args) throws InvalidKeyException, NoSuchAlgorithmException, IOException, SignatureException {
    SimpleDateFormat format = new SimpleDateFormat(""EEE, dd MMM yyyy HH:mm:ss Z"");
    String dateString = format.format(new Date());

    final String ENDPOINT = ""https://email.us-east-1.amazonaws.com"";
    final String AWS_ACCESS = ""ACCESS_KEY"";
    final String AWS_SECRET = ""SECRET_KEY"";

    CloseableHttpClient httpClient = HttpClients.createDefault();
    HttpPost post = new HttpPost(ENDPOINT);

    String authString = generateAuthHeader(AWS_ACCESS, AWS_SECRET, dateString);

    List&lt;NameValuePair&gt; formVals = new ArrayList&lt;&gt;();
    formVals.add(new BasicNameValuePair(""Action"", ""SendRawEmail""));
    formVals.add(new BasicNameValuePair(""Destination.ToAddresses.member.1"", ""bhanuka.yd@gmail.com""));
    formVals.add(new BasicNameValuePair(""Message.Body.Text.Data"", ""I hope you see the body.""));
    formVals.add(new BasicNameValuePair(""Message.Subject.Data"", ""This is a Unique Subject""));
    formVals.add(new BasicNameValuePair(""Source"", ""test@test.com""));

    UrlEncodedFormEntity formEntity = new UrlEncodedFormEntity(formVals);

    post.setHeader(""Content-Type"", ContentType.APPLICATION_FORM_URLENCODED.toString());
    post.setHeader(""Date"", dateString);
    post.setHeader(""X-Amzn-Authorization"", authString);

    post.setEntity(formEntity);
    HttpResponse response = httpClient.execute(post);
    response.getEntity().writeTo(System.out);

 }

 public static String generateAuthHeader(String accessKey, String secret, String dateString) throws InvalidKeyException, NoSuchAlgorithmException, SignatureException {
    String authHeaderVal = ""AWS3-HTTPS AWSAccessKeyId="" + accessKey + "",Algorithm=HmacSHA256,Signature="";
    authHeaderVal += generateSignature(dateString, secret);
    return authHeaderVal;
 }

 public static String generateSignature(String message, String secret) throws NoSuchAlgorithmException, InvalidKeyException {
    Mac sha256_HMAC = Mac.getInstance(""HmacSHA256"");
    SecretKeySpec secretKey = new SecretKeySpec(secret.getBytes(), ""HmacSHA256"");
    sha256_HMAC.init(secretKey);
    return Base64.encodeBase64URLSafeString(sha256_HMAC.doFinal(message.getBytes()));
 }
}
</code></pre>

<p>the first time I tried it out , it gave me this error </p>

<pre><code>&lt;ErrorResponse xmlns=""http://ses.amazonaws.com/doc/2010-12-01/""&gt;
 &lt;Error&gt;
   &lt;Type&gt;Sender&lt;/Type&gt;
   &lt;Code&gt;ValidationError&lt;/Code&gt;
   &lt;Message&gt;1 validation error detected: Value null at 'rawMessage' failed to satisfy constraint: Member must not be null&lt;/Message&gt;
 &lt;/Error&gt;
 &lt;RequestId&gt;9a986157-24ca-11e6-9864-3fdeb433e3c8&lt;/RequestId&gt;
&lt;/ErrorResponse&gt;
</code></pre>

<p>it was because the signature had an ""="" sign at the end , so I used</p>

<pre><code>encodeBase64URLSafeString();
</code></pre>

<p>method to convert the signature to Base64 instead of </p>

<pre><code>encodeBase64String();
</code></pre>

<p>So what I am doing wrong here,
Please someone help me out here 
Thanks.</p>
","<p>I finally found out that I can use the Signature V4 to authenticate my HTTP request.</p>

<p>anyone having this problem, can follow the exact process in the below <a href=""http://docs.aws.amazon.com/general/latest/gr/signature-version-4.html"" rel=""nofollow"">link</a> and you will be able to authenticate.</p>

<p>One thing to keep in mind is that, the request time should be in ISO8601 format, in UTC</p>

<p>here is a method to calculate the current time in UTC timezone.</p>

<pre><code>public static String getUTCTimeISO8601Format() {
    TimeZone timeZone = TimeZone.getTimeZone(""UTC"");
    Calendar calendar = Calendar.getInstance(timeZone);
    SimpleDateFormat iso8601Format = new SimpleDateFormat(""YYYYMMdd'T'HHmmss'Z'"");//ISO8601 B8601DZw.d format
    iso8601Format.setTimeZone(timeZone);
    return iso8601Format.format(calendar.getTime());
}
</code></pre>
","37539303","163","<amazon-web-services><hmac><amazon-ses>","0","0","1","2016-10-22 11:47:03","37539303","11","3","174777","","2016-10-22 11:47:03","2016-05-28 11:57:33","","2016-05-31 08:40:31","2016-05-31 07:21:37"
"37186306","QuickBlox Session create: Unexpected Signature in Rails App","<p>I am trying to create QuickBlox session from Rest API using Ruby on Rails. My current implementation:</p>

<pre><code>def qb_signin_params
  timestamp = Time.now.in_time_zone('UTC').to_i
  nonce = rand.to_s[2..6]
  signature_string = ""application_id=#{QuickBlox_Application_Id}&amp;auth_key=#{QUICKBLOX_Authorization_KEY}&amp;nonce=#{nonce}&amp;timestamp=#{timestamp}""
  digest = OpenSSL::Digest.new('sha1')
  signature = OpenSSL::HMAC.hexdigest(digest, signature_string, QUICKBLOX_Authorization_SECRET)

  params = Hash.new
  params['application_id'] = QuickBlox_Application_Id
  params['auth_key'] = QUICKBLOX_Authorization_KEY
  params['timestamp'] = timestamp
  params['nonce'] = nonce
  params['signature'] = signature

  params
end
</code></pre>

<p>Returns following error:</p>

<pre><code>unexpected token at '&lt;?xml version=""1.0"" encoding=""UTF-8""?&gt;
&lt;errors&gt; 
  &lt;error&gt;Unexpected signature&lt;/error&gt;
&lt;/errors&gt;
</code></pre>

<p>I have searched through several places, but could never find the correct Signature generation for Ruby. Please help.</p>
","<p>Check out this <a href=""https://github.com/abscondite/quickblox_api"" rel=""nofollow noreferrer"">quickblox_api</a> gem. It worked great for me...</p>

<p>I was having this same issue, and on looking at what was done in there, which was almost exactly what you ( and I ) were doing... apart from the fact that the body for the <code>hmac_sha</code> was getting sorted alphabetically, as instructed/mentioned on the <a href=""http://quickblox.com/developers/Authentication_and_Authorization#Signature_generation"" rel=""nofollow noreferrer"">quickblox documentation</a> which I quote below:</p>

<blockquote>
  <p>Request body is formed as the sorted (sorting alphabetically, as symbols, not as bytes) by increase the string array 'parameter=value', separated with the symbol ""&amp;""</p>
</blockquote>
","40696739","162","<ruby-on-rails-4><quickblox><hmac>","0","1","1","2016-11-19 18:57:31","40696739","0","","","","","2016-05-12 12:02:41","","","2016-11-19 18:57:31"
"40179347","HMAC encryption result different from JUnit test and Spring","<p>I have some strange issue with my function. I'm trying to get a HMAC encrypted data from a secret key. 
I worked on a unit test to try my algorithm, and it worked fine.</p>

<p>Here is the code, with hard datas to make it easier to test :</p>

<pre><code>public static String hmac(String parameters, String key) {
    String result = """";
    parameters = ""PBX_SITE=1999888&amp;PBX_RANG=32&amp;PBX_IDENTIFIANT=2&amp;PBX_TOTAL=1000&amp;PBX_DEVISE=978&amp;PBX_CMD=TEST TEST&amp;PBX_PORTEUR=test@test.com&amp;PBX_RETOUR=Mt:M;Ref:R;Auto:A;Erreur:E;Id:U&amp;PBX_HASH=SHA512&amp;PBX_TIME=2011-02-28T11:01:50+01:00&amp;PBX_TYPEPAIEMENT=CARTE&amp;PBX_TYPECARTE=CB&amp;PBX_AUTOSEULE=O"";
    key = ""0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF"";

    try{
        final String HMAC_SHA512 = ""HmacSHA512"";
        Mac sha512_HMAC = Mac.getInstance(HMAC_SHA512); 

        //pack
        String input = key.length() % 2 == 0 ? key : key  + ""0"";
        StringBuilder output = new StringBuilder();
        for (int i = 0; i &lt; input.length(); i+=2) {
            String str = input.substring(i, i+2);
            output.append((char)Integer.parseInt(str, 16));
        }
        key = output.toString();

        SecretKeySpec keySpec = new SecretKeySpec(key.getBytes(), HMAC_SHA512);
        sha512_HMAC.init(keySpec);

        byte [] mac_data = sha512_HMAC.doFinal(parameters.getBytes());

        //toHex
        result = String.format(""%040x"", new BigInteger(1, mac_data)).toUpperCase();
        System.out.println(result);

    } catch (NoSuchAlgorithmException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
    } catch (InvalidKeyException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
    } finally{
        System.out.println(""Done"");
    }

    return result;
}
</code></pre>

<p>When i call this function with my Unit Test, the result is fine : </p>

<pre><code>String hmac2 = AboWebUtils.hmac(parameters, key);
</code></pre>

<p>9D47FFC1779013D1D26F92EE1C858AD7ECE5333106D4D61892BC683F640B061A72124F72A5B7BCD445767E347F9BA8ADE9A08A36791669E32E99C17975BD2FC2</p>

<p>When i call this method from y web app (Spring framework), i got a different result (wrong) :</p>

<pre><code>AboWebUtils.hmac(parameters, key);
</code></pre>

<p>14BC65DEC5AF3CEED21F024D6A5665F6C8BDF90F956F8D327E0382A3A7F09ACEF557A2C5CE72F32D0CA2B3FBBE344CE5D2798526817E5647210D663AEA9BB899</p>

<p>I don't get why the results are differents. I am calling the same method, the parameters are even overriden for test purpose. I should get the same result. JUnit &amp; Spring dont call the method with the same way or something like that?</p>

<p>Thanks for your help :)</p>
","<p>Try this</p>

<pre><code>        byte[] output = new byte[input.length()/2];
        for (int i = 0; i &lt; input.length(); i+=2) {
            String str = input.substring(i, i+2);
            output[i/2] = (byte) Integer.parseInt(str, 16);
        }
        SecretKeySpec keySpec = new SecretKeySpec(output, HMAC_SHA512);
</code></pre>

<p>With this change I got result similar to your <code>9D47FFC1779013D1D26F...</code></p>
","40181027","161","<java><unit-testing><spring-mvc><hmac>","0","0","1","2016-10-21 16:06:34","40181027","4","3","","","","2016-10-21 14:33:55","","2016-10-21 16:06:34","2016-10-21 16:01:18"
"48009620","c# and java - difference between hmacsha256 hash Redux","<p>While testing the code in a previous <a href=""https://stackoverflow.com/questions/13237456/c-sharp-and-java-difference-between-hmacsha256-hash"">post</a> on the differences between the java and c# hmacsha256 implementation outputs, I noticed that the outputs were slightly different, i.e. when I ran java code the output was</p>

<pre><code>ivEyFpkagEoghGnTw_LmfhDOsiNbcnEON50mFGzW9_w=
</code></pre>

<p>but in C# code I get</p>

<pre><code>ivEyFpkagEoghGnTw/LmfhDOsiNbcnEON50mFGzW9/w=
</code></pre>

<p>Has anybody seen this, i.e. there is a <code>_</code> in the java example but an <code>/</code> in the c# example</p>

<p>Java Code</p>

<pre><code>import java.util.*;
import javax.crypto.*;
import javax.crypto.spec.*;

public class Test {
    public static void main (String[] args) throws Exception {
        String secretAccessKey = ""mykey"";
        String data = ""my data"";
        byte[] secretKey = secretAccessKey.getBytes();
        SecretKeySpec signingKey = new SecretKeySpec(secretKey, ""HmacSHA256"");
        Mac mac = Mac.getInstance(""HmacSHA256"");
        mac.init(signingKey);
        byte[] bytes = data.getBytes();
        byte[] rawHmac = mac.doFinal(bytes);
        System.out.println(Base64.getUrlEncoder().encodeToString(rawHmac));
    }
}
</code></pre>

<p>C# Code</p>

<pre><code>using System;
using System.Security.Cryptography;
using System.Text;

class Test
{
    static void Main()
    {
        String secretAccessKey = ""mykey"";
        String data = ""my data"";
        byte[] secretKey = Encoding.UTF8.GetBytes(secretAccessKey);
        HMACSHA256 hmac = new HMACSHA256(secretKey);
        hmac.Initialize();
        byte[] bytes = Encoding.UTF8.GetBytes(data);
        byte[] rawHmac = hmac.ComputeHash(bytes);
        Console.WriteLine(Convert.ToBase64String(rawHmac));
    }
}
</code></pre>
","<p>This seems to be a design choice for the Base64 encoders, one of them chose to use the <code>_</code> character and one of them chose to use the <code>/</code> character (C# also uses the <code>+</code> character instead of the <code>-</code> character). If you need to use that string across languages you can use <code>myString.replace(oldChar, newChar)</code> (<code>myString.Replace(oldChar, newChar)</code> in C#) to replace the mismatch characters.</p>

<hr>

<p>If you want C# Base64 strings to look like Java's Base64 strings you can use <code>Microsoft.IdentityModel.Tokens.Base64UrlEncoder</code>, but this is a Nuget package you would have to install. This uses <code>-</code> and <code>_</code> instead of <code>+</code> and <code>/</code>.</p>
","48009699","159","<java><c#><encryption><sha256><hmac>","0","0","1","2017-12-28 15:46:22","48009699","0","","2587452","","2017-12-28 15:46:22","2017-12-28 14:53:46","","2017-12-28 15:10:57","2017-12-28 14:59:36"
"42588802","API can't validate hmac + base64 when generated in a function","<p>I'm trying to use a function to generate the hmac hash enconded in base64. However, the endpoint can't validate that message.</p>

<p>When I generate the hmac hash enconded in base64 outside of a function, it works fine. The endpoint validates the message.</p>

<p>This is what I'm doing when using a function (this is how I need and can't make it work):</p>

<pre><code>function genNonce() {
    list($usec, $sec) = explode("" "", microtime());
    $nonce = (int)((float)$usec + (float)$sec);
    return $nonce;
}

function genMsg($nonce) {
    $signature = strtoupper(base64_encode(hash_hmac('sha256', $nonce . $key, $secret, true)));
    return $signature;
}

$nonce = genNonce();
$signature = genMsg($nonce);

$auth = Array();
    $auth[] = ""key: "" . $key;
    $auth[] = ""nonce: "" . $nonce;
    $auth[] = ""signature: "" . $signature;

...execute curl...
</code></pre>

<p>I tried to debug dumping the vars when executing the function and right before executing curl, they match. So it seems that it's generating the information and sending it through.</p>

<p>And this is what I'm doing when not using a function (this is how it's working):</p>

<pre><code>list($usec, $sec) = explode("" "", microtime());
$nonce = (int)((float)$usec + (float)$sec);
$signature = strtoupper(base64_encode(hash_hmac('sha256', $nonce . $key, $secret, true)));

$auth = Array();
    $auth[] = ""key: "" . $key;
    $auth[] = ""nonce: "" . $nonce;
    $auth[] = ""signature: "" . $signature;

...execute curl...
</code></pre>

<p>Am I doing anything wrong? Why am I getting different results? Is it an issue of the endpoint API?</p>

<p>Edit: The error that the API is returning is ""INVALID_SIGNATURE"". I also tried to take the same values and make a request through SoapUI. I get the same error when using the first case (functions) and it works fine when using the second case (outside functions). So, why is it generating wrong hashes when using a function?</p>
","<p>My mistake.</p>

<p>I was not passing $key and $secret to genMsg().</p>

<pre><code>function genNonce() {
    list($usec, $sec) = explode("" "", microtime());
    $nonce = (int)((float)$usec + (float)$sec);
    return $nonce;
}

function genMsg($nonce, $key, $secret) {
    $signature = strtoupper(base64_encode(hash_hmac('sha256', $nonce . $key, $secret, true)));
    return $signature;
}

$nonce = genNonce();
$signature = genMsg($nonce, $key, $secret);
</code></pre>
","42590390","159","<php><hash><hmac>","0","0","1","2017-03-03 23:57:22","42590390","0","","1971762","","2017-03-03 22:19:28","2017-03-03 21:34:02","","","2017-03-03 23:57:22"
"4153181","Why some applications base 64 encode HMACs?","<p>Why some applications base 64 encode HMACs even if it's not for mail purposes?
Is it a vestige from older implementations or practices?</p>

<p>If you do a little research in google with the words 'HMAC', 'base' and '64' you will see many people do it, and i don't know why. I'm pretty sure that it has nothing to do neither with storing nor outputting it.</p>
","<p>If you want to send binary data encoded into SOAP envelope or as JSON data, you would risk that the part of the raw data is interpreted as the structural elements of these formats (e.g. '&lt;', '[', '{').</p>

<p>Therefore you need to encode it as Base64 to preserve its contents on the wire.</p>
","13086859","158","<base64><hmac>","1","0","1","2012-10-26 12:22:13","","0","","415914","","2010-11-13 17:22:54","2010-11-11 09:57:56","","","2012-10-26 12:22:13"
"52117554","The Comeonin.Bcrypt checkpw method returns false after I Reset Password - Elixir","<p>I am using Comeonin.Bcrypt for doing the password encryption. It is working fine while registering account and I can Login successfully. But, once I reset my password, the checkpw method always returns false for new password and old password. I am using the below method to generate the password hash.</p>

<pre><code>defp put_pass_digest(changeset) do   
    case changeset do
      %Ecto.Changeset{valid?: true, changes: %{password: raw_passwd}} = cs -&gt;
        put_change(cs, :password_digest, hashpwsalt(raw_passwd))
      changeset -&gt;
        changeset
    end
  end
</code></pre>

<p>This is the change password method:</p>

<pre><code>def change_password(conn, %{""user"" =&gt; %{""code"" =&gt; code, ""password"" =&gt; password, ""repeated_password"" =&gt; repeated_password}}) do
    token = Repo.one(fetch_valid_token_q(code, ""password_reset""))
    changeset = User.change_password_changeset(token.user, %{password: password, repeated_password: repeated_password})
    if changeset.valid? do
      Repo.update(changeset)
      render(conn, ""password_changed.html"")
    else
      changeset = User.changeset(%User{}, %{})
      conn
      |&gt; put_flash(:info, ""Wrong, try again!"")
      |&gt; render(""reset_password.html"", code: code, changeset: changeset)
    end
  end
</code></pre>

<p>The changeset definition is:</p>

<pre><code>def change_password_changeset(%User{} = schema, params) do
    schema
    |&gt; changeset(params)
    |&gt; validate_required([:password, :repeated_password])
    |&gt; validate_password()
    |&gt; passwords_match?()
    |&gt; put_pass_digest
  end
</code></pre>

<p>Below are the methods called on login.</p>

<pre><code>def login_user(args, _resolution) do
    with {:ok, user}         &lt;- fetch_user_and_verify_password(args.session_input),
         {:ok, jwt, _claims} &lt;- Guardian.encode_and_sign(user, :access)
    do
      {:ok, %{user: user, token: jwt}}
    else
      {:error, :incorrect_login_credentials} -&gt;
        Errors.auth_required
    end
  end

def fetch_user_and_verify_password(params) do
    user = Repo.get_by(User, email: String.downcase(params.email))

    if check_password(params.password, user) do
      {:ok, user}
    else
      {:error, :incorrect_login_credentials}
    end
  end
defp check_password(password, user), do: checkpw(password, user.password_digest)
</code></pre>

<p>I have checked DB. The updated password_digest is properly saved in DB. Not sure what is the issue. </p>

<p>Any help would be appreciated!</p>
","<p>I have resolved this issue.</p>

<p>The first level of HMAC calculation was missing in my Reset Password feature. I used below cryptographic hash function for calculating the same.</p>

<pre><code>def to_hash(ast) do
    :sha256
    |&gt; :crypto.hash(ast)
    |&gt; Base.encode16
  end
</code></pre>

<p>Now it works fine!</p>

<p>Thanks everyone who responded.</p>
","52214929","158","<elixir><hmac><password-hash>","0","0","1","2018-09-07 03:46:58","52214929","4","","5594306","","2018-09-07 03:46:58","2018-08-31 14:25:42","","","2018-09-07 03:40:48"
"20628589","Drawbacks of password-based SSL authentication for PHP REST API","<p>I have developed an API that I want to secure through user authentication. My first idea was to assign to each user a secret key (password) and a client id (username) that they would send along with each request to the API. However, I have read many articles that suggest alternative authentication schemes, like OAuth2 or using HMAC hashes. What I cannot understand yet is the benefit of these schemes against a combination of HTTPS+password+username in terms of security. The only thing I found is that HTTPS may incur higher cost in terms of CPU, but I'm not convinced about the security benefits I'll get using other authentication schemes. </p>

<p>Can you please offer me good reasons against using basic encrypted authentication, or to put it in other words, why I should prefer HMAC hashes or OAuth? </p>
","<p>The main point of OAuth is to allow a third-party to use your API on behalf of a user. It basically ensures that the user doesn't need to share their username/password with the third-party.</p>

<p>If you are not going to allow third-party websites to connect to your website then there are simpler ways. It really depends on what your API is about, how it is accessed by the users (website, mobile application, etc.).</p>

<p>Sending the username and password with each request doesn't seem like a good idea, even over HTTPS, so maybe a better solution would be to have a ""/login"" function which returns a token on success. You can then use this token to access the API. The advantage is that you can expire the token in case of problem.</p>
","20628750","158","<rest><authentication><ssl><oauth><hmac>","2","1","1","2013-12-17 07:54:10","20628750","0","","","","","2013-12-17 07:43:32","","","2013-12-17 07:54:10"
"16740455","Storing passwords in a Hashed format","<p>In my application, users create data then use their secret key to calculate a hash. The data with the appended hash are sent to the server.</p>

<p>The server recalculates the hash using the private key it has listed for the user.</p>

<p>Now, on the server's side, I obviously can't store the secret key in plain-text. However, I also can't do a one way store using Hmac, because then, when I recalculate the hash on the data, it will give a different response.</p>

<p>What is the best way to store user's secret password on the server side?</p>
","<p>The best way is what you are doing now. I mean the password is never stored either as plain text nor in encrypted reversable form. I did not exactly understand your problem but if you want to make the system truly secure find solution for your problem without using user's password in plain form.</p>

<p>But if you indeed need this I'd recommend you at least to store passwords in DB encrypted. The encryption password should be also hidden somehow to make potential hacker's work harder. But note: once you do it the system becomes breakable and all depends only on the hacker's professional skills and motivation. </p>
","16740640","155","<java><hash><passwords><storage><hmac>","0","0","1","2013-05-24 17:36:03","","0","","","","","2013-05-24 17:22:35","","","2013-05-24 17:36:03"
"46870352","How to create an HMAC in crystal-lang","<p>See the <a href=""https://crystal-lang.org/api/0.23.0/OpenSSL/HMAC.html"" rel=""nofollow noreferrer"">OpenSSL::HMAC documentation</a>.</p>

<p>I am trying this:</p>

<pre><code>require ""openssl""

puts OpenSSL::HMAC.hexdigest(:sha256, ""secret key"", ""data"")
</code></pre>

<p>and I am getting this error:</p>

<blockquote>
  <p>undefined constant OpenSSL::HMAC</p>
</blockquote>

<p>Other OpenSSL methods are working fine, like <code>OpenSSL::Digest.new(""SHA256"")</code>.</p>

<p>What am I doing wrong?</p>
","<p>With <code>require ""openssl""</code> <a href=""https://github.com/crystal-lang/crystal/blob/7bbb400625e8cac68803e7c802289c2d14e499ec/src/openssl.cr#L130-L134"" rel=""nofollow noreferrer"">you don't require <code>hmac</code></a>. This works for me:</p>

<pre><code>require ""openssl/hmac""

puts OpenSSL::HMAC.hexdigest(:sha256, ""secret key"", ""data"")
</code></pre>
","46871836","154","<hmac><crystal-lang>","3","3","1","2017-10-22 10:10:17","46871836","0","","","","","2017-10-22 03:57:24","","2017-10-22 10:10:17","2017-10-22 08:05:17"
"56267631","Why does HMAC+EVP_sha256 return a different value than openssl for some hashes","<p>When trying to generate HMAC+SHA256 signatures, for some payloads, I get a different result from openssl command line than openssl lib.</p>

<p>This is to try and generate a v4 signature for AWS.
I am able to do it with bash/curl successfully.
The code shows each signature at each step, which all match except the signature for service (s3) comes out different than that generated via openssl command line</p>

<pre><code>    int i;
    char data[1024] = """";
    char hashString[SHA256_DIGEST_LENGTH*2];
    unsigned char *bytearray=malloc(SHA256_DIGEST_LENGTH);
    unsigned char *digest=malloc(SHA256_DIGEST_LENGTH);

    printf(""echo -n us-east-1|openssl dgst -sha256 -mac HMAC -macopt hexkey:b098ff9a24e0573d9e0f952963d0725c4e9c7566ebb3713bf8e0707d43146822\n"");
    strcpy(hashString,""b098ff9a24e0573d9e0f952963d0725c4e9c7566ebb3713bf8e0707d43146822\0"");
    strcpy(data, ""us-east-1"");
//This works
    for (i = 0; i &lt; strlen(hashString)/2 ; i++)
        sscanf(hashString + 2*i, ""%02x"", (unsigned int *) &amp;bytearray[i]);
    digest = HMAC(EVP_sha256(), bytearray, strlen((const char *)bytearray), (unsigned char*)data, strlen(data), NULL, NULL);
    printf(""  should be: e811cc78009ad7918504aca1ff987199285352a6fabd1063d6d1a938ac673dbf\n"");
    printf(""HMAC digest: "");
    for(i = 0; i &lt; SHA256_DIGEST_LENGTH; i++)
         printf(""%02x"",(unsigned int)digest[i]);
    printf(""\n"");
//This doesn't
    printf(""echo -n s3|openssl dgst -sha256 -mac HMAC -macopt hexkey:e811cc78009ad7918504aca1ff987199285352a6fabd1063d6d1a938ac673dbf\n"");
    strcpy(hashString,""e811cc78009ad7918504aca1ff987199285352a6fabd1063d6d1a938ac673dbf"");
    strcpy(data, ""s3"");
    for (i = 0; i &lt; strlen(hashString)/2 ; i++)
        sscanf(hashString + 2*i, ""%02x"", (unsigned int *) &amp;bytearray[i]);
    digest = HMAC(EVP_sha256(), bytearray, strlen((const char *)bytearray), (unsigned char*)data, strlen(data), NULL, NULL);
    printf(""  should be: f405cc5d87cd57f8130decb58108ac0ae5a0bccb97e40729f9ace287d4ee054d\n"");
    printf(""HMAC digest: "");
    for(i = 0; i &lt; SHA256_DIGEST_LENGTH; i++)
         printf(""%02x"",(unsigned int)digest[i]);
    printf(""\n"");
</code></pre>
","<p>Here's a cleaned up version that avoids all the undefined behavior and memory leaks in your original, and thus generates the expected hashes:</p>

<pre><code>#include &lt;assert.h&gt;
#include &lt;openssl/evp.h&gt;
#include &lt;openssl/hmac.h&gt;
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;

void print_hmac(const char *hexkey, const char *data) {
  unsigned char digest[EVP_MAX_MD_SIZE];
  unsigned int digest_len;

  int hexkey_len = strlen(hexkey);
  assert(hexkey_len % 2 == 0); // Must be even

  int key_len = hexkey_len / 2;
  unsigned char *key = malloc(key_len);
  assert(key != NULL);

  for (int i = 0; i &lt; key_len; i++) {
    int n = sscanf(hexkey + 2 * i, ""%2hhx"", key + i);
    assert(n == 1);
  }

  HMAC(EVP_sha256(), key, key_len, (const unsigned char *)data, strlen(data),
       digest, &amp;digest_len);

  fputs(""HMAC digest: "", stdout);
  for (unsigned int i = 0; i &lt; digest_len; i++) {
    printf(""%02hhx"", digest[i]);
  }
  putchar('\n');
  free(key);
}

int main(void) {
  char hashString[100];

  puts(""echo -n us-east-1|openssl dgst -sha256 -mac HMAC -macopt ""
       ""hexkey:""
       ""b098ff9a24e0573d9e0f952963d0725c4e9c7566ebb3713bf8e0707d43146822"");
  puts(""  should be: ""
       ""e811cc78009ad7918504aca1ff987199285352a6fabd1063d6d1a938ac673dbf"");
  strcpy(hashString,
         ""b098ff9a24e0573d9e0f952963d0725c4e9c7566ebb3713bf8e0707d43146822"");
  print_hmac(hashString, ""us-east-1"");

  puts(""echo -n s3|openssl dgst -sha256 -mac HMAC -macopt ""
       ""hexkey:""
       ""e811cc78009ad7918504aca1ff987199285352a6fabd1063d6d1a938ac673dbf"");
  puts(""  should be: ""
       ""f405cc5d87cd57f8130decb58108ac0ae5a0bccb97e40729f9ace287d4ee054d"");
  strcpy(hashString,
         ""e811cc78009ad7918504aca1ff987199285352a6fabd1063d6d1a938ac673dbf"");
  print_hmac(hashString, ""s3"");

  return 0;
}
</code></pre>
","56268004","154","<c><openssl><sha256><hmac>","0","2","1","2019-05-23 04:16:06","","3","","4321822","","2019-05-23 03:24:59","2019-05-23 03:17:32","","","2019-05-23 04:16:06"
"45955138","Function HMAC_MD5 : Return succes but no value","<p>I have got some problems trying to programm the HMAC_MD5 code.</p>

<p>I am working in C on a STM32F4 microprocessor.</p>

<p>Here is my (updated) code:</p>

<pre><code>RCC_AHB2PeriphClockCmd(RCC_AHB2Periph_HASH, ENABLE); static uint8_t 

static Challenge[16] = ""ldopwhjtsnkiaq8f"";
static uint8_t Key[16] = ""abcdefghijklmnop"";
static uint8_t* HMAC_Key;
static uint8_t* HMAC_Input;
static uint8_t HMAC_Response1[16];
static uint8_t HMAC_Response2[16];

int m = 0;

HMAC_Input = &amp;Challenge[0];
HMAC_Key = &amp;Key[0];

ErrorStatus Result = ERROR;
for(m=0;m&lt;16;m++){
    HMAC_Response1[m]=1;
    HMAC_Response2[m]=2;
}

Result = HASH_MD5(HMAC_Input, 16, HMAC_Response1);
Result = HMAC_MD5(HMAC_Key, 16, HMAC_Input, 16, HMAC_Response2);
</code></pre>

<p>That is the official description of the HMAC_MD5 function (<a href=""https://github.com/espruino/Espruino/blob/master/targetlibs/stm32f4/lib/stm32f4xx_hash_md5.c"" rel=""nofollow noreferrer"">https://github.com/espruino/Espruino/blob/master/targetlibs/stm32f4/lib/stm32f4xx_hash_md5.c</a>):</p>

<pre><code>/**
    * @brief  Compute the HMAC MD5 digest.
    * @param  Key: pointer to the Key used for HMAC.
    * @param  Keylen: length of the Key used for HMAC.
    * @param  Input: pointer to the Input buffer to be treated.
    * @param  Ilen: length of the Input buffer
    * @param  Output: the returned digest
    * @retval An ErrorStatus enumeration value:
    *          - SUCCESS: digest computation done
    *          - ERROR: digest computation failed
    */

ErrorStatus HMAC_MD5(uint8_t *Key, uint32_t Keylen, uint8_t *Input, 
                     uint32_t Ilen, uint8_t Output[16])
</code></pre>

<p>The function returns the value ""SUCCESS"" but the digest ""Output"" is still empty (full of '\0').</p>

<p>I don't get any warning from the compiler (Attolic TrueStudio) and I cannot change the value of the Key or of the Challenge (Concatenation), because the server is already running with older systems.</p>
","<p>I had the same problem that you had using STM32 Hashing hardware. After a few tries I decided to use a md5 library</p>

<p>Since I'm using lwip in my project I noticed that LWIP has a md5 module inside ppp.</p>

<p>Just get the files needed (md5.c, md5.h) from lwip (inside lwip /src/netif/ppp/md5.c), and copy it to your proyect.</p>

<p>Change the non-working line</p>

<pre><code>uint32_t dev=HASH_MD5((uint8_t *) input, strlen((char *) input), Md5);
</code></pre>

<p>for</p>

<pre><code>MD5_CTX mdContext;
MD5Init(&amp;mdContext);
MD5Update(&amp;mdContext, input, strlen((char *) input));
MD5Final(Md5,&amp;mdContext);
</code></pre>

<p>Edited: Since i dont use ppp in the project, i have copied the md5 file from ppp to the project and I edited it a bit, removing all include references (except md5.h and string.h) and removing conditional compilation:</p>

<p>This is the stuff that I removed at the beginning</p>

<pre><code>//#if PPP_SUPPORT /* don't build if not configured for use in lwipopts.h */

//#if CHAP_SUPPORT || MD5_SUPPORT

//#include ""ppp.h""
//#include ""pppdebug.h""
</code></pre>

<p>And this at the end:</p>

<pre><code>//#endif /* CHAP_SUPPORT || MD5_SUPPORT */

//#endif /* PPP_SUPPORT */
</code></pre>

<p>You can download the source code for md5.c and md5.h here </p>

<p><a href=""https://github.com/goertzenator/lwip/blob/master/lwip-1.4.0/src/netif/ppp/md5.c"" rel=""nofollow noreferrer"">https://github.com/goertzenator/lwip/blob/master/lwip-1.4.0/src/netif/ppp/md5.c</a>
<a href=""https://github.com/goertzenator/lwip/blob/master/lwip-1.4.0/src/netif/ppp/md5.h"" rel=""nofollow noreferrer"">https://github.com/goertzenator/lwip/blob/master/lwip-1.4.0/src/netif/ppp/md5.h</a></p>
","48825395","154","<c><md5><hmac><stm32f4>","1","0","1","2018-02-19 08:47:11","","5","","8536523","","2017-08-30 15:51:44","2017-08-30 08:07:43","","2018-02-19 08:47:11","2018-02-16 11:04:10"
"24681995","Is there a way to make a SimpleDB item expire after X amount of time server side using IOS?","<p>I am making an IOS app with SimpleDB entries that will expire after 30 days. I currently know how to write, read, and delete from SimpleDB, but I have no idea how to make items automatically expire after X amount of time. </p>

<p>I have read about HMAC-SHA signatures with SimpleDB <a href=""http://docs.aws.amazon.com/AmazonSimpleDB/latest/DeveloperGuide/HMACAuth.html#AboutTimestamp"" rel=""nofollow noreferrer"">here</a> (It says they can be used to provide an expiration date) and I found <a href=""https://stackoverflow.com/questions/476455/is-there-a-library-for-iphone-to-work-with-hmac-sha-1-encoding"">this post</a> saying that one could use CommonCrypto to use HMAC-SHA signatures with AWS (SimpleDB, etc.) on IOS.</p>

<p>My Questions before I proceed: Will that do what I want it to and are there any other ways to make items expire after X amount of time with AWS on IOS?</p>

<p>EDIT: I just found <a href=""https://stackoverflow.com/questions/5285595/simpledb-timestamp-on-insert?rq=1"">this</a>. If anybody has anything to add, that would be greatly appreciated.</p>

<p>Thank you.</p>
","","","153","<ios><amazon-web-services><hmac><amazon-simpledb><hmacsha1>","1","","0","2014-07-10 16:45:52","","0","","-1","","2017-05-23 12:29:28","2014-07-10 16:39:08","","",""
"55261040","How could HMAC comparison ever not be constant-time in Python?","<p>Python has a method specifically for comparing HMAC to prevent timing attacks: <a href=""https://docs.python.org/3.7/library/hmac.html#hmac.compare_digest"" rel=""nofollow noreferrer"">https://docs.python.org/3.7/library/hmac.html#hmac.compare_digest</a></p>

<p>And I read about timing attacks here: <a href=""https://security.stackexchange.com/questions/74547/timing-attack-against-hmac-in-authenticated-encryption"">https://security.stackexchange.com/questions/74547/timing-attack-against-hmac-in-authenticated-encryption</a></p>

<p>My question is, how could it possibly ever not be constant-time? It would be necessary to calculate the actual HMAC in order to compare it, and it's not like you could calculate the digest 1 character at a time, right? At the end, it would just be a simple string comparison, which is 2 orders of magnitude faster than the actual HMAC calculation in my tests. So where exactly is the attack surface here? Could someone please give an example of exactly where the actual vulnerability is if I don't use <code>hmac.compare_digest()</code>?</p>
","<blockquote>
  <p>At the end, it would just be a simple string comparison, which is 2 orders of magnitude faster than the actual HMAC calculation in my tests.</p>
</blockquote>

<p>But it is <em>not constant time</em>. Just because they are done fast doesn't mean the difference is not measurable. For <code>bytes</code> values, Python first tests for equal length and equal first bytes before using <a href=""http://man7.org/linux/man-pages/man3/memcmp.3.html"" rel=""nofollow noreferrer""><code>memcmp</code></a> to test the rest.  For strings, Python compares length, then <em>kind</em> (if the string uses 1, 2 or 4 bytes per character), then also uses <code>memcmp</code>.</p>

<p>The Linux manpage for <code>memcmp</code> explicitly states:</p>

<blockquote>
  <p>Do not use <code>memcmp()</code> to compare security critical data, such as
         cryptographic secrets, because the required CPU time depends on the
         number of equal bytes.  Instead, a function that performs comparisons
         in constant time is required.  Some operating systems provide such a
         function (e.g., NetBSD's <code>consttime_memequal()</code>), but no such function
         is specified in POSIX.  On Linux, it may be necessary to implement
         such a function oneself.)</p>
</blockquote>

<p>A sufficiently determined attacker can exploit this weakness to figure out what hash you have stored vs the hash of the data it is sending.</p>

<p>Timing attacks make it possible to <em>forge signatures</em>. Say, a service stores authorization information in a token shared with the client. If the client could alter this token, they could gain access they would not otherwise have. To protect against this, the token is signed using an HMAC signature, letting the server verify the returned token before accepting it as valid. If the authorization data doesn't match the signature, the token is rejected.</p>

<p>If the server does this:</p>

<pre><code>auth_data, signature = split_token(token)
expected = hmac_signature(auth_data)
if signature == expected:
    # ...
</code></pre>

<p>then an attacker can detect how many characters of a forged signature match the expected signature, and adjust accordingly. They start with <code>XXXXX:000000...</code>, then try <code>XXXXX:1000000...</code>, etc. until the time taken by the service increases, indicating that they have a matching first character. Then the second character can be altered, until the full signature matches.</p>
","55261574","152","<python-3.x><security><hmac><timing-attack>","-1","0","1","2019-03-21 10:05:24","55261574","3","","","","","2019-03-20 12:41:38","","2019-03-21 10:05:24","2019-03-20 13:12:45"
"44360487","Native HMAC SHA512 support for Swift 3.1","<p>I'm trying to implement <code>HMAC SHA512</code> encryption to a data string before sending it to the server, as it's their requirement.</p>

<p>I have found many possible solutions for that online, however all of them require including some module or framework. </p>

<p>Isn't <code>HMAC</code> and <code>SHA512</code> not supported by swift 3.1 natively? </p>

<p>Sorry if it's a stupid question, I'm relatively new to swift. </p>

<p>If it's available, how can I simply encrypt some data using <code>hmac sha512</code>? </p>

<p>Thanks.</p>
","<p><a href=""https://developer.apple.com/security/"" rel=""nofollow noreferrer"">CommonCrypto</a> is the native way to do encryption on Apple devices. You do not need any module or framework, you just <a href=""https://stackoverflow.com/questions/24002369/how-to-call-objective-c-code-from-swift"">add a bridging header</a> and import CommonCrypto:</p>

<pre><code>#import &lt;CommonCrypto/CommonCrypto.h&gt;
</code></pre>

<p>You then can compute your HMAC with a simple extension (Swift 4):</p>

<pre><code>extension String {

    func hmac(key: String) -&gt; String {
        var digest = [UInt8](repeating: 0, count: Int(CC_SHA256_DIGEST_LENGTH))
        CCHmac(CCHmacAlgorithm(kCCHmacAlgSHA256), key, key.count, self, self.count, &amp;digest)
        let data = Data(bytes: digest)
        return data.map { String(format: ""%02hhx"", $0) }.joined()
    }

}
</code></pre>

<p>Example:</p>

<pre><code>let result = ""test"".hmac(key: ""test"")
</code></pre>

<p>Result:</p>

<pre><code>88cd2108b5347d973cf39cdf9053d7dd42704876d8c9a9bd8e2d168259d3ddf7
</code></pre>

<p>If you use Swift on a non-Apple device you indeed need to use an external framework to do encryption.</p>
","48479601","151","<swift><sha><hmac>","1","1","1","2018-01-27 19:18:50","","0","","","","","2017-06-05 01:23:04","","","2018-01-27 19:18:50"
"54737926","hmac hash mismatch in PHP and Golang","<p>I am trying to connect to an API that uses an outdated hmac hash authentication mechanism for the API's. </p>

<p>For an instance:</p>

<pre><code>$signature = hash_hmac('sha256', $string_to_sign, $api_sec);
</code></pre>

<p>vs the one generated in Go:</p>

<pre><code>h := hmac.New(sha256.New, []byte(authSecret))
h.Write([]byte(stringToSign))
signature := hex.EncodeToString(h.Sum(nil))
</code></pre>

<p>When I use the same <code>stringToSign($string_to_sign)</code> and same <code>authSecret($api_sec)</code> the signature generated with Go results as an invalid  signature for the API. But if I create the same with the PHP function it works fine. I am a bit lost as to where to look. </p>
","<p>There must be an issue with your input data.</p>

<p>Using the below PHP:</p>

<pre><code>echo hash_hmac('sha256', 'data', 'key');
</code></pre>

<p>And the below Go:</p>

<pre><code>h := hmac.New(sha256.New, []byte(""key""))
h.Write([]byte(""data""))
signature := hex.EncodeToString(h.Sum(nil))
fmt.Println(signature)
</code></pre>

<p>I get the same result of <code>5031fe3d989c6d1537a013fa6e739da23463fdaec3b70137d828e36ace221bd0</code></p>
","54738124","151","<php><go><sha256><hmac>","1","1","1","2019-02-17 22:11:06","54738124","0","","560299","","2019-02-17 22:11:06","2019-02-17 21:37:16","","","2019-02-17 22:03:56"
"11635541","wcf HMAC always fails","<p>I'm trying to implement a HMAC authorization solution with my SOAP WCF service. I already have a message inspector for the client and the server. The server seems to add a ""Action"" header to the message that is not in the request (verified by fiddler). I then just do </p>

<p>message.WriteBodyContents(xdw);</p>

<p>Which gets around that but then some of the xml elements are self closed (/>) or some are closed like """".</p>

<p>Any suggestions?</p>

<p>EDIT.
I also want the solution to be easy, so far this is all done with an attribute on the service and a one line statement for the client.</p>
","<p>Using the System.Security.Cryptography.Xml.XmlDsigC14NTransform class in .Net normalizes the XML so that two XMLs with different syntax but similar data are normalized and can be compared byte for byte for a hash.</p>
","11740477","150","<wcf><hmac>","0","0","1","2012-07-31 12:49:30","11740477","0","","","","","2012-07-24 16:44:53","","","2012-07-31 12:49:30"
"41226983","Different HMAC for JAVA and IOS","<p>I have a java method which generate a HMAC (hashed message access code) based on a string value and a key.</p>

<pre><code>public String generateHMAC(final String messge,final String key) throws APIGatewayException {

    String result;
    try {

        // get an hmac_sha1 key from the raw key bytes
        final SecretKeySpec signingKey = new SecretKeySpec(key.getBytes(), ""HmacSHA256"");

        // get an hmac_sha1 Mac instance and initialize with the signing key
        final Mac mac = Mac.getInstance(""HmacSHA256"");
        mac.init(signingKey);

        // compute the hmac on input data bytes
        final byte[] rawHmac = mac.doFinal(messge.getBytes());

        // base64-encode the hmac
        result = DatatypeConverter.printBase64Binary(rawHmac);

    } catch (Exception e) {
        LOGGER.error(e.getMessage(), e);
        throw new APIGatewayException(""Failed to generate HMAC : "" + e.getMessage());
    }
    return result;

}
</code></pre>

<p>And IOS mobile developer tried to generate a HMAC using same string and same key but getting a diffrent hmac.</p>

<pre><code> (NSString )hashedBase64ValueOfData:(NSString ) data WithSecretKey:(NSString*)secret {
        // ascii convirsion
        const char *cKey  = [secret cStringUsingEncoding:NSASCIIStringEncoding];
        const char *cData = [data cStringUsingEncoding:NSASCIIStringEncoding];

        // HMAC Data structure initializtion
        unsigned char cHMAC[CC_SHA256_DIGEST_LENGTH];
        CCHmac(kCCHmacAlgSHA256, cKey, strlen(cKey), cData, strlen(cData), cHMAC);

        // Gerating hased value
        NSData *da =  [[NSData alloc] initWithBytes:cHMAC length:sizeof(cHMAC)];

        NSString *base64Encoded = [da base64EncodedStringWithOptions:0];// conversion to base64 string &amp; returns

        NSLog(@""third %@"",base64Encoded);

        return base64Encoded;

    }
</code></pre>

<p>Test data</p>

<pre><code>Sample String :&lt;roka&gt;&lt;header&gt;&lt;txn_type&gt;P2P&lt;/txn_type&gt;&lt;txn_id&gt;11482143820872102&lt;/txn_id&gt;&lt;response_option&gt;2&lt;/response_option&gt;&lt;pin_option&gt;2&lt;/pin_option&gt;&lt;notify_option&gt;2&lt;/notify_option&gt;&lt;timestamp&gt;1482143820872&lt;/timestamp&gt;&lt;app_type&gt;App&lt;/app_type&gt;&lt;bankId&gt;6278&lt;/bankId&gt;&lt;/header&gt;&lt;params&gt;&lt;payer&gt;&lt;roka_id&gt;DDD1150&lt;/roka_id&gt;&lt;bank&gt;B1&lt;/bank&gt;&lt;account&gt;B1A1&lt;/account&gt;&lt;amount&gt;100&lt;amount&gt;&lt;value_date /&gt;&lt;noisy_status&gt;0&lt;/noisy_status&gt;&lt;/payer&gt;&lt;payee&gt;&lt;roka_id&gt;DKS1415&lt;/roka_id&gt;&lt;country&gt;LK&lt;/country&gt;&lt;bank/&gt;&lt;account/&gt;&lt;/payee&gt;&lt;/params&gt;&lt;IMEINO&gt;AB641CCE-C102-4033-BCF1-707C831717BE&lt;/IMEINO&gt;&lt;appType&gt;IOS&lt;/appType&gt;&lt;reqIP&gt;116.75.152.182&lt;/reqIP&gt;&lt;/roka&gt;

Key Used : FmM1WM6FtchBQAE0MnFzUMpos8H/gt9DgGS99bc0gAgVCqgOcAJMmX3Dssr9LK90CSD94cwsw32hGIgI8iwAzQ==

IOS HMAC  : QNlwxdl5kAHSk4oQRez9Y+DYwTwcD5XnsxZR42RDWpU=
Java HMAC : 5PJU/wHzqqvX9xKNPoQlaA4glrO56qr3XENj8HYYpyA=
</code></pre>

<p>I cant figure out the reason for different hmac. I want both HMAC to be same.</p>
","","","149","<java><ios><objective-c><hmac>","1","","0","2016-12-19 16:32:08","","1","4","1479853","","2016-12-19 16:32:08","2016-12-19 16:25:58","","",""
"46083712","Translating Java 256 bit password based encryption to C#","<p>I need to implement an API in C# that'll encrypt secrets identically to the API written in java.</p>

<p>The Java code looks like this</p>

<pre><code>SecretKeyFactory factory = SecretKeyFactory.getInstance(""PBKDF2WithHmacSHA256"");
KeySpec spec = new PBEKeySpec(password, salt, iteration, size);
SecretKey tmp = factory.generateSecret(spec);
SecretKey secret = new SecretKeySpec(tmp.getEncoded(), ""HmacSHA256"");
</code></pre>

<p>My attempt on C# code looks like this</p>

<pre><code>var secret = KeyDerivation.Pbkdf2(
    password, salt, KeyDerivationPrf.HMACSHA256, iteration, size);
</code></pre>

<p>When I compare the generated secrets, converted the to base 64, they're not the same. Their length are couple hundreds characters off as well.</p>

<p>What's missing from the C# code to generate the same secret as the Java API?</p>
","","","147","<java><c#><encryption><hmac><pbkdf2>","1","","0","2017-09-06 20:19:21","","4","3","","","","2017-09-06 20:19:21","","",""
"32208100","Do Windows crypto APIs run slower on purpose with debugger attached to the process?","<p>In my Windows application I needed to implement the <a href=""https://en.wikipedia.org/wiki/PBKDF2"" rel=""nofollow"">PBKDF2</a> encryption for passwords. For that I needed to calculate <a href=""https://en.wikipedia.org/wiki/Hash-based_message_authentication_code"" rel=""nofollow"">HMAC</a> using SHA-256 many times over. So for a single round of that I was calling the following sequence of APIs:</p>

<pre><code>//For simplicity I'm not posting the full code
//One can look up implementation of HMAC/SHA-256 in C
CryptAcquireContext(, NULL, MS_ENHANCED_PROV, PROV_RSA_FULL, CRYPT_VERIFYCONTEXT | CRYPT_NEWKEYSET);
CryptImportKey(, , 0, CRYPT_IPSEC_HMAC_KEY, );
CryptCreateHash(, CALG_HMAC, , 0, );
CryptSetHashParam(, HP_HMAC_INFO, , 0);
CryptHashData(, , , 0);
CryptGetHashParam(, HP_HASHVAL, NULL, , 0);
CryptGetHashParam(, HP_HASHVAL, , , 0);
</code></pre>

<p>This sequence may be called on the order of 10,000+ times in a sort of a loop according to PBKDF2 specifications.</p>

<p>I started noticing though, that if I run this sequence via Ctrl+F5 (in Visual Studio), or without a debugger, it executes in about less than 1 sec on my laptop. But if I attach a debugger to the process, it runs painfully slow -- sometimes close to 10+ seconds or so. (The timing in this case is also inconsistent.)</p>

<p>So I thought that this happens because of a debugger build. So I tried building a release build and then attached a debugger. To my amazement it was also running slow.</p>

<p>So I'm curious, is there something in those crypto APIs that make them run slower with the debugger attached?</p>
","<blockquote>
  <p>I just tried it and if I attach Visual Studio debugger to my running process, it doesn't seem to happen.</p>
</blockquote>

<p>Then it depends from the Windows debug heap (not to be confused with the CRT debug heap, which is completely unrelated and is activated building in debug mode):</p>

<blockquote>
  <p>Instead of using the standard heap API, processes that the debugger creates use a special debug heap. You can force a spawned process to use the standard heap instead of the debug heap by using the <code>_NO_DEBUG_HEAP</code> environment variable or the <code>-hd</code> command-line option.</p>
</blockquote>

<p><a href=""https://msdn.microsoft.com/en-us/library/windows/hardware/hh406274%28v=vs.85%29.aspx"" rel=""nofollow"">https://msdn.microsoft.com/en-us/library/windows/hardware/hh406274%28v=vs.85%29.aspx</a></p>

<p>For a more detailed explanation and some benchmarks, see <a href=""http://preshing.com/20110717/the-windows-heap-is-slow-when-launched-from-the-debugger/"" rel=""nofollow"">here</a>.</p>
","32220066","147","<c++><c><winapi><hmac><cryptoapi>","1","1","1","2015-08-26 07:09:07","","2","","","","","2015-08-25 15:29:09","","","2015-08-26 07:09:07"
"50849179","Implementing a side channel timing attack","<p>I'm working on a project implementing a side channel timing attack in C on HMAC. I've done so by computing the hex encoded tag and brute forcing byte-by-byte by taking advantage of strcmp's timing optimization. So for every digit in my test tag, I calculate the amount of time it takes for every hex char to verify. I take the hex char that corresponds to the highest amount of time calculated and infer that it is the correct char in the tag and move on to the next byte. However, strcmp's timing is very unpredictable. Although it is easy to see the timing differences between comparing two equal strings and two totally different strings, I'm having difficulty finding the char that takes my test string the most time to compute when every other string I'm comparing to is very similar (only differing by 1 byte).</p>

<p>The changeByte method below takes in customTag, which is the tag that has been computed up to that point in time and attempts to find the correct byte corresponding to index. changeByte is called n time where n=length of the tag. hexTag is a global variable that is the correct tag. timeCompleted stores the average time taken to compute the testTag at each of the hex characters for a char position. Any help would be appreciated, thank you for your time.</p>

<pre><code>// Checks if the index of the given byte is correct or not
void changeByte(unsigned char *k, unsigned char * m, unsigned char * algorithm, unsigned char * customTag, int index)
{
    long iterations=50000;
    // used for every byte sequence to test the timing
    unsigned char * tempTag = (unsigned char *)(malloc(sizeof (unsigned char)*(strlen(customTag)+1 ) ));
    sprintf(tempTag, ""%s"", customTag);
    int timeIndex=0;
    // stores the time completed for every respective ascii char
    double * timeCompleted = (double *)(malloc (sizeof (double) * 16));

    // iterates through hex char 0-9, a-f
    for (int i=48; i&lt;=102;i++){
            if (i &gt;= 58 &amp;&amp; i &lt;=96)continue;
            double total=0;
            for (long j=0; j&lt;iterations; j++){
                    // calculates the time it takes to complete for every char in that position
                    tempTag[index]=(unsigned char)i;
                    struct rusage usage;
                    struct timeval start, end;
                    getrusage(RUSAGE_SELF, &amp;usage);
                    start=usage.ru_stime;
                    for (int k=0; k&lt;50000; k++)externalStrcmp(tempTag, hexTag); // this is just calling strcmp in another file
                    getrusage (RUSAGE_SELF, &amp;usage);
                    end=usage.ru_stime;
}
                    double startTime=((double)start.tv_sec + (double)start.tv_usec)/10000;
                    double endTime=((double)end.tv_sec+(double)end.tv_usec)/10000;
                    total+=endTime-startTime;
            }
            double val=total/iterations;
            timeCompleted[timeIndex]=val;
            timeIndex++;                

    }
    // sets next char equal to the hex char corresponding to the index
    customTag[index]=getCorrectChar (timeCompleted);
    free(timeCompleted);
    free(tempTag);
</code></pre>

<p>}</p>

<pre><code>// finds the highest time. The hex char corresponding with the highest time it took the
// verify function to complete is the correct one
unsigned char getCorrectChar(double * timeCompleted)
{
    double high =-1;
    int index=0;
    for (int i=0; i&lt;16; i++){
            if (timeCompleted[i]&gt;high){
                    high=timeCompleted[i];
                    index=i;
            }
    }
    return (index+48)&lt;=57 ?(unsigned char) (index+48) : (unsigned char)(index+87);

}
</code></pre>
","<p>I'm not sure if it's the main problem, but you add seconds to microseconds directly as though 1us == 1s. It will give wrong results when number of seconds in startTime and endTime differs.
And the scaling factor between usec and sec is 1 000 000 (thx zaph). So that should work better:</p>

<pre><code>double startTime=(double)start.tv_sec + (double)start.tv_usec/1000000;
double endTime=(double)end.tv_sec + (double)end.tv_usec/1000000;
</code></pre>
","50849180","146","<hmac><macos><timing-attack>","0","1","1","2018-06-14 03:29:43","","0","","","","","2018-06-09 18:36:16","","","2018-06-10 14:41:16"
"55639332","HMAC authentication in flutter async widget","<p>I am trying to get photos from an api, which requires 3 additional url parameters which are given below.
APIKEY​: The client's public key.
EXPIRES​: An expiration time in seconds since the Unix epoch (January1,1970).
HMAC​: Authentication code.</p>

<p>I got the public key and private key through the site which is providing the API.
For HMAC The authentication code is generated by using the SHA-256 hmac algorithm with the requested resource as the data and the secret key concatenated with the expiration time as the key. The hash is expected in hexadecimal format.</p>

<p>I want to know how can I get the HMAC code and add it in my project.. </p>

<p>I tried adding HMAC in headers file of future async function </p>

<pre><code>Future&lt;Map&gt; makeRequest() async {
    http.Response response = await http
        .get(Uri.encodeFull(url), headers:
    {
      'Authorization': token,
      'content-type': 'application/json'});
}
</code></pre>

<p>I except the hmac and expires authentication in headers of ""Future async {
headers: }"" function</p>
","","","146","<api><dart><flutter><future><hmac>","0","","0","2019-04-11 18:49:38","","0","","","","","2019-04-11 18:49:38","","",""
"56498074","How to use base32 in combination with hotp (one time passwords) in python?","<p>for a university exercise I want to develop a simple hotp server-client system in python. In this case the client sends a password and a one time password to the server. The server knows the secret, calculates the current hotp and compares the values it receives. So far, so good. With plaintext this works perfectly fine  and the calculated values are the same I get when I use the iOS App ""OTP Auth"". But there is also the possibility to calculate the OTP in combination with base32. So I added a few lines to encode the plaintext to base32 but now the output in not correct.</p>

<p>Let's assume we're using the secret ""1234"" so the plaintext output would be ""110366"". That's working. But if I'm encoding the secret to base32 the output should be ""807244"" but my program calculates ""896513"". Anybody know why this is happening?</p>

<p>I've already tried to use different secrets and checked it on different apps. Always the same result.</p>

<pre class=""lang-py prettyprint-override""><code>import hmac
import hashlib
import array
import base64

counter = 0
digits = 6                      #Anzahl der Zeichen

def hotp(secret, c):
    global digits
    counter = extendCounter(c)
    hmac_sha1 = hmac.new(secret, counter, hashlib.sha1).hexdigest()
    return truncate(hmac_sha1)[-digits:]


def truncate(hmac_sha1):
    offset = int(hmac_sha1[-1], 16)
    binary = int(hmac_sha1[(offset * 2):((offset * 2) + 8)], 16) &amp; 0x7fffffff
    return str(binary)


def extendCounter(long_num):
    byte_array = array.array('B')
    for i in reversed(range(0, 8)):
        byte_array.insert(0, long_num &amp; 0xff)
        long_num &gt;&gt;= 8
    return byte_array


def main():
    secret = ""1234""
    bSecret = secret.encode(""UTF-8"")
    bSecret = base64.b32encode(bSecret)
    otp = hotp(bSecret, counter)
    one_time_password = otp
</code></pre>

<p>I expect 807244 as the output but the output is 896513</p>
","<p>First, it's important to point out that the result of <code>secret.encode('UTF-8')</code> has exactly the same type as the result of <code>base64.b32encode(bSecret)</code> (and for that matter <code>base64.b64encode(bSecret)</code>) -- they all return <code>bytes</code> objects. Also worth noting is that the <a href=""https://github.com/python/cpython/blob/3.7/Lib/hmac.py"" rel=""nofollow noreferrer"">implementation of <code>hmac</code></a> in Python has no mention of base64/base32 encoding. So the short answer is that your expected result of <code>807244</code> is only valid if the shared secret is a base64/UTF-8 encoded blob.</p>

<p>This quick snippet shows that really you can give any bytes you like to <code>hotp</code> and it will come up with some result (because <code>hotp</code> is called multiple times in the example, <code>counter</code> is changed)</p>

<pre class=""lang-py prettyprint-override""><code># ... everything from your example above ...
secret = ""1234""
secret_bytes = secret.encode(""UTF-8"")
secret_bytes
&gt;&gt;&gt; b'1234'
b32_secret = base64.b32encode(bSecret)
b32_secret
&gt;&gt;&gt; b'GEZDGNA='
b64_secret = base64.b64encode(bSecret)
b64_secret
&gt;&gt;&gt; b'MTIzNA=='
hotp(secret_bytes, counter)  # just a UTF-8 blob works
&gt;&gt;&gt; '110366'
hotp(b32_secret, counter)  # base32/UTF-8 also works
&gt;&gt;&gt; '896513'
hotp(b64_secret, counter)  # base64/UTF-8 works as well
&gt;&gt;&gt; '806744'
</code></pre>

<p>If you have more detail of why you expected <code>807244</code> for a base32/UTF8 blob, I'll be happy to amend this answer.</p>
","56506125","144","<python><python-3.x><hmac><one-time-password><base32>","1","1","2","2019-06-12 04:18:16","56532319","2","","13302","","2019-06-12 04:18:16","2019-06-07 16:22:59","","","2019-06-08 11:54:04"
"56498074","How to use base32 in combination with hotp (one time passwords) in python?","<p>for a university exercise I want to develop a simple hotp server-client system in python. In this case the client sends a password and a one time password to the server. The server knows the secret, calculates the current hotp and compares the values it receives. So far, so good. With plaintext this works perfectly fine  and the calculated values are the same I get when I use the iOS App ""OTP Auth"". But there is also the possibility to calculate the OTP in combination with base32. So I added a few lines to encode the plaintext to base32 but now the output in not correct.</p>

<p>Let's assume we're using the secret ""1234"" so the plaintext output would be ""110366"". That's working. But if I'm encoding the secret to base32 the output should be ""807244"" but my program calculates ""896513"". Anybody know why this is happening?</p>

<p>I've already tried to use different secrets and checked it on different apps. Always the same result.</p>

<pre class=""lang-py prettyprint-override""><code>import hmac
import hashlib
import array
import base64

counter = 0
digits = 6                      #Anzahl der Zeichen

def hotp(secret, c):
    global digits
    counter = extendCounter(c)
    hmac_sha1 = hmac.new(secret, counter, hashlib.sha1).hexdigest()
    return truncate(hmac_sha1)[-digits:]


def truncate(hmac_sha1):
    offset = int(hmac_sha1[-1], 16)
    binary = int(hmac_sha1[(offset * 2):((offset * 2) + 8)], 16) &amp; 0x7fffffff
    return str(binary)


def extendCounter(long_num):
    byte_array = array.array('B')
    for i in reversed(range(0, 8)):
        byte_array.insert(0, long_num &amp; 0xff)
        long_num &gt;&gt;= 8
    return byte_array


def main():
    secret = ""1234""
    bSecret = secret.encode(""UTF-8"")
    bSecret = base64.b32encode(bSecret)
    otp = hotp(bSecret, counter)
    one_time_password = otp
</code></pre>

<p>I expect 807244 as the output but the output is 896513</p>
","<p>Found the mistake:
Instead of translating the secret to base32, the secret must be a Base32 decoded value. Also instead of encoding this value, it must be decoded (""base64.b32decode(bytes(saved_secret, 'utf-8'))"")</p>

<p>So the correct main looks like this:</p>

<pre class=""lang-py prettyprint-override""><code>def main():
    secret = ""V6X27L5P"" #Base32 value
    secret = base64.b32decode(bytes(secret, 'utf-8'))
    one_time_password = hotp(secret, counter)
</code></pre>
","56532319","144","<python><python-3.x><hmac><one-time-password><base32>","1","0","2","2019-06-12 04:18:16","56532319","2","","13302","","2019-06-12 04:18:16","2019-06-07 16:22:59","","","2019-06-10 19:17:18"
"29769543","python gaana.com api python hmac encoding","<p>So I have been stuck here since a week now.searched every thing.tried many thing.</p>

<p>This is regarding gaana.com API / <a href=""http://developer.gaana.com/resources/user-data-api/login-management/."" rel=""nofollow"">user registration :</a> </p>

<p>I need to <em>encode a key</em> - this is the definition given on the site -
to encode a reg token do this -</p>

<pre><code>hash_hmac(‘md5′,base_64_encode(‘regtoken from User Registration Token)’),md5(‘Private Key Provided’))
</code></pre>

<p>I am getting this error - </p>

<p>{'Status': 0, 'user-token-status': 1, 'user_token_status': 1, 'Error': 'Regtoken expire or missing'}</p>

<p>Things I have tried - </p>

<p>1) <code>hmac.new(base64.b64encode(gaana_obj.getUserToken()['regtoken']),'',md5).hexdigest()</code></p>

<p>2)  <code>hmac.new(base64.b64encode(gaana_obj.getUserToken()['regtoken']),'',md5).hexdigest()</code></p>

<p>3) even tried replacing <code>hexdigest()</code> to <code>digest()</code>..</p>

<p>I hope someone can help..
Thanks in advance</p>
","","","144","<python><api><base64><hmac>","2","","0","2015-04-21 11:31:30","","0","","2527001","","2015-04-21 11:31:30","2015-04-21 10:26:23","","",""
"58515069","Problems generating valid HMAC signature with Coinbase API (Elixir)","<h2>Problem Statement:</h2>

<p>When authenticating with the <a href=""https://developers.coinbase.com/api/v2#oauth2-coinbase-connect"" rel=""nofollow noreferrer"">Coinbase API</a> I receive this response:</p>

<pre class=""lang-js prettyprint-override""><code>body: ""{\""errors\"":[{\""id\"":\""authentication_error\"",\""message\"":\""invalid signature\""}]}""
</code></pre>

<h2>Source as it currently stands:</h2>

<p><sub>(Feedback on general Elixir style also appreciated, this is my first project in the language)</sub></p>

<pre class=""lang-rb prettyprint-override""><code>defmodule Request do
  defstruct(
    method: """",
    path: """",
    base: """",
    body: """",
    timestamp: nil,
    key: nil,
    secret: nil,
    signature: nil
  )

  require HTTPotion
  require Poison

  def new(method, path, body, key, secret, server_time) do
    if !(Enum.member? [:GET, :POST, :PUT, :PATCH, :DELETE], method), do: raise ArgumentError, message: ""Unsupported HTTP method #{method}""
    base_url      = ""https://api.coinbase.com/v2""
    request       =
      %Request{
        method:    method,
        path:      path,
        body:      body,
        base:      base_url,
        key:       key,
        secret:    secret,
        timestamp: server_time,
        signature: nil,
    }

    Request.sign(request)
  end

  def sign(request) do ## See https://docs.pro.coinbase.com/?ruby#signing-a-message
    pre_hash =
      Integer.to_string(request.timestamp) &lt;&gt;
      Atom.to_string(request.method)       &lt;&gt;
      request.base &lt;&gt; request.path         &lt;&gt; ## I've tried both with the path (""/accounts""), with the API version ""/v2/accounts"", and the full path (""https://"")
      request.body

    ## See note on what I've tried for variations on this bit:
    decoded_secret = Base.decode64!(request.secret) ## Says to do this in the pro docs, but not in the normal ones.  I've tried both ways.
    signature      = :crypto.hmac(:sha256, decoded_secret, pre_hash) |&gt; 
                                         Base.encode16(case: :lower) |&gt; ## Suggested in linked question.  I've tried both with and without.
                                         Base.encode64

    %Request{request | signature: signature}
  end

  def send!(request) do
    payload = [
      body:             request.body,
      follow_redirects: true,
      headers:
      [
        ""CB-ACCESS-KEY"": request.key,
        ""CB-ACCESS-SIGN"": request.signature,
        ""CB-ACCESS-TIMESTAMP"": request.timestamp,
        ""CB-VERSION"": ""2019-09-18"",
        ""Content-Type"": ""application/json"",
      ]
    ]

    case request.method do
      :GET -&gt;
        HTTPotion.get request.base &lt;&gt; request.path, payload
      ## ...
      _ -&gt;
        raise ""Unrecognized HTTP verb '#{request.method}'""
    end
  end

  def server_time do
    response = Poison.decode! HTTPotion.get(""https://api.coinbase.com/v2/time"").body
    response[""data""][""epoch""]
  end
end
</code></pre>

<p>Which I call using:</p>

<pre class=""lang-rb prettyprint-override""><code>iex(#)&gt; request = Request.new(:GET, ""/accounts"", """", key, secret, Request.server_time)
iex(#)&gt; request |&gt; Request.send!
... 
...
...
  status_code: 401
}
iex(#)&gt; request
%Request{
  base: ""https://api.coinbase.com/v2"",
  body: """",
  key: ""MY-KEY"",
  method: :GET,
  path: ""/accounts"",
  secret: ""MY-SECRET"",
  signature: ""ZTNjYWzEZjVjNTMxDOgzZjA5NGNjNzZkMWFiTKkwOIG0NGM1MzBjYmNmNzNhYzcyZGIxMmFhMTA0NTRjMWJjYg=="", ## Not the real signature
  timestamp: 1571800107
}
</code></pre>

<h2>So far I've tried:</h2>

<ul>
<li>Base64 decoding the secret (as suggested in the <a href=""https://docs.pro.coinbase.com/?ruby#signing-a-message"" rel=""nofollow noreferrer"">pro docs</a>) </li>
<li>Base16 encoding (and lowercasing) the signature before Base64 encoding it as suggested in this <a href=""https://stackoverflow.com/a/32602509/1596460"">this answer</a></li>
<li>Using the full path <code>""https://api.coinbase.com/v2/accounts""</code></li>
<li>Using just the resource path: <code>/accounts</code></li>
<li>(Edit based on comments): Also tried <code>/v2/accounts</code> and <code>/v2/accounts/</code></li>
<li>Numerous variations on the path etc.</li>
</ul>

<p>What am I doing wrong? </p>

<h2>Edit:</h2>

<p>From the <a href=""https://docs.pro.coinbase.com/?ruby#creating-a-request"" rel=""nofollow noreferrer"">pro docs</a>:</p>

<blockquote>
  <p>Remember to first <strong>base64-decode the alphanumeric secret string (resulting in 64 bytes)</strong> before using it as the key for HMAC. Also, base64-encode the > digest output before sending in the header.</p>
</blockquote>

<p><sub>(Emphasis mine)</sub> </p>

<p>I notice that the <code>byte_size/1</code> of my decoded_secret ends up with only 24 bytes: </p>

<pre class=""lang-rb prettyprint-override""><code>decoded_secret = Base.decode64!(request.secret)
IO.puts byte_size(decoded_secret) # =&gt; 24
</code></pre>

<p>Not 64 as the docs specify. Still digging into this.</p>
","","","143","<elixir><hmac><coinbase-api>","2","","0","2019-10-31 22:02:11","","3","","1596460","","2019-10-31 22:02:11","2019-10-23 03:32:52","","",""
"19846172","Which of these encryption methods is more secure? Why?","<p>I am writing a program that takes a passphrase from the user and then writes some encrypted data to file. The method that I have come up with so far is as follows:</p>

<ul>
<li>Generate a 128-bit IV from hashing the filename and the system time, and write this to the beginning of the file.</li>
<li>Generate a 256-bit key from the passphrase using SHA256.</li>
<li>Encrypt the data (beginning with a 32-bit static signature) with this key using AES in CBC mode, and write it to file.</li>
</ul>

<p>When decrypting, the IV is read, and then the passphrase used to generate the key in the same way, and the first 32-bits are compared against what the signature should be in order to tell if the key is valid.</p>

<p>However I was looking at the <a href=""https://github.com/polarssl/polarssl/blob/development/programs/aes/aescrypt2.c"" rel=""nofollow"">AES example</a> provided in <a href=""https://polarssl.org/"" rel=""nofollow"">PolarSSL</a> (the library I am using to do the hashing and encryption), and they use a much more complex method:</p>

<ul>
<li>Generate a 128-bit IV from hashing the filename and file size, and write this to the beginning of the file.</li>
<li>Generate a 256-bit key from hashing (SHA256) the passphrase and the IV together 8192 times.</li>
<li>Initialize the HMAC with this key.</li>
<li>Encrypt the data with this key using AES in CBC mode, and write it to file, while updating the HMAC with each encrypted block.</li>
<li>Write the HMAC to the end of the file.</li>
</ul>

<p>I get the impression that the second method is more secure, but I don't have enough knowledge to back that up, other than that it looks more complicated.</p>

<ul>
<li>If it is more secure, what are the reasons for this?</li>
<li>Is appending an HMAC to the end of the file more secure than having a signature at the beginning of the encrypted data?</li>
<li>Does hashing 8192 times increase the security?</li>
</ul>

<p><strong>Note:</strong> This is an open source project so whatever method I use, it will be freely available to anyone.</p>
","<p>The second option is more secure.  </p>

<p>Your method, does not provide any message integrity.  This means that an attacker can modify parts of the ciphertext and alter what the plain text decrypts to.  So long as they don't modify anything that will alter your 32-bit static signature then you'll trust it.  The HMAC on the second method provides message integrity.</p>

<p>By hashing the key 8192 times it adds extra computational steps for someone to try and bruteforce the key.  Assume a user will pick a dictionary based password.  With your method an attacker must perform <code>SHA256(someguess)</code> and then try and decrypt.  However, with the PolarSSL version, they will have to calculate <code>SHA256(SHA256(SHA256...(SHA256(someguess)))</code> for 8192 times.  This will only slow an attacker down, but it might be enough (for now).</p>

<p>For what it's worth, please use an existing library.  Cryptography is hard and is prone to subtle mistakes.</p>
","19846446","143","<security><encryption><hash><hmac>","0","3","1","2013-11-07 20:53:28","19846446","3","","","","","2013-11-07 20:37:06","","","2013-11-07 20:51:34"
"32577328","HMAC from jquery public private hash","<p>Im building one REST api with php slim feamework.</p>

<p>Planning to implement the HMAC security with public and private hash method like in this link:</p>

<p><a href=""http://websec.io/2013/02/14/API-Authentication-Public-Private-Hashes.html"" rel=""nofollow"">http://websec.io/2013/02/14/API-Authentication-Public-Private-Hashes.html</a></p>

<p>But for the client side, we are not using curl, instead it is JQuery to invoke the api. </p>

<p>But how can we generate the hash securly with the private key + data combination? Since js is clientside, we cant declare a variable to store the private key.</p>

<p>Please help.</p>
","","","140","<php><jquery><rest><hash><hmac>","1","","0","2015-09-15 03:42:20","","0","1","","","","2015-09-15 03:42:20","","",""
"50354829","Unable to verify the first certificate error while doing a POST from node JS","<p>I am trying to do a POST to a REST endpoint which requires a signature . Please find the code snippet below</p>

<pre><code>var express = require(""express"");
var bodyParser = require(""body-parser"");
var crypto = require('crypto');
var request = require('request');


const APPLICATION_JSON_UTF8 = 'application/json; charset=utf-8';
const SIGNATURE = 'X-Hub-Signature';
const CONTENT_TYPE = 'Content-Type';
const botConfig = {
    webhookURL: 'https://8c9a9e46.ngrok.io/myURL',
    secretKey: 'SecretKey'
};
var app = express();

app.listen(3000, function () {
    console.log(""app running on port."");
});

function buildSignatureHeader(buf, secret) {
    return 'sha256=' + buildSignature(buf, secret);
}
function buildSignature(buf, secret) {
    const hmac = crypto.createHmac('sha256', Buffer.from(secret, 'utf8'));
    hmac.update(buf);
    return hmac.digest('hex');
}
app.get('/', function (req, res) {
    const recvMessage = {
                        ""userId"":""2211333"",
                        ""messagePayload"": {
                            ""type"":""Pony"",
                            ""text"": ""Hi There"",
                            ""channelName"":""channelName""
                        },
                        ""profile"": {""firstName"": 'bibin'}
                      };

 const data = Buffer.from(JSON.stringify(recvMessage), 'utf8');
 const headers = {};
    headers[CONTENT_TYPE] = APPLICATION_JSON_UTF8;
    headers[SIGNATURE]    = buildSignatureHeader(data, botConfig.secretKey);
    var interactive = false;
    var oauth=false;
   console.log(buildSignatureHeader(data, botConfig.secretKey));
   request.post({
        uri: botConfig.webhookURL,
        headers: headers,
        body: data

    },function(error, response, body){
  console.log(body);
 console.log('error'+error);
 console.log('response'+response);
  });

});
</code></pre>

<p>Now when I hit the node JS server I am getting an exception which says ""unable to verify the first certificate"".  I have tried setting the proxy at npm global level, But the issue persists.  Have anyone seen this issue? Can someone give me some pointers?</p>
","","","139","<node.js><hmac>","2","","0","2018-05-15 16:12:28","","0","","","","","2018-05-15 16:12:28","","",""
"45530779","HMAC changes according to node version (paybox module)","<p>I am using <a href=""https://www.npmjs.com/package/paybox"" rel=""nofollow noreferrer"">https://www.npmjs.com/package/paybox</a> and I need to upgrade my node version (from 5.6 to 6+)</p>

<p>As you can see below, the <code>generateHMAC</code> creates a hash that differs if I change my version of node. </p>

<p>Can you help me understand this, and tell me if it can compromise something (maybe it is OK? several hashes could be OK?)</p>

<p>Here is my code snippet:</p>

<pre><code>""use strict"";
const paybox = require('./node_modules/paybox/lib/paybox.js')

let computed_hmac = paybox.generateHMAC({a:12}, 'aaaaaaabbbbbbbcccccccc1111122233');
console.log(computed_hmac);
</code></pre>

<p>Here is the result with version 5.6.0 of node</p>

<pre><code>$ node -v
v5.6.0
$ node testPaybox.sh
D0643202B4AF2A23055933597ACB6CB024A26F7DEBC4798B5AB0AC6242D1C9D0F1BC481B86CEF0505546D1D30F4A6807D193A00E5A4E81F874447BC0EE040D87
</code></pre>

<p>and with any version from 6.11.1 (up to the latest)</p>

<pre><code>$ node -v
v6.11.1
orange:easy-sport-web dao$ node testPaybox.sh
E5A70879F038F35103524AB5157205C8169DDBAD3B41465D19690F87C64FACB6E098C283812B6D6AC79F23AE7A7DC2B0EEEDF5796E4BFC9DE87A517AFCE7E049
</code></pre>
","<p>Because of <a href=""https://stackoverflow.com/a/45582931/1566975"">https://stackoverflow.com/a/45582931/1566975</a> prefer using the fork <a href=""https://github.com/daohodac/node-paybox"" rel=""nofollow noreferrer"">https://github.com/daohodac/node-paybox</a> that solves the issue</p>
","45583497","139","<node.js><hash><hmac><node-crypto>","0","0","1","2017-08-09 06:51:29","45583497","5","","1816580","","2017-08-06 10:04:41","2017-08-06 09:56:48","","","2017-08-09 06:51:29"
"44581184","Why does Spring's default OAuth JWT implementation make the JWT verifier public?","<p>Spring's default <a href=""https://tools.ietf.org/html/rfc7523"" rel=""nofollow noreferrer"">OAuth JWT</a> flow (using client_credentials grant) is as follows:</p>

<ol>
<li>Launch the Auth Server (AS)</li>
<li>Launch the Resource Server (RS)

<ul>
<li>At startup the RS requests the tokenKey by calling <code>GET /oauth/token_key</code> using Basic Auth</li>
</ul></li>
<li>The AS returns a PUBLIC KEY using RS256 (SHA256withRSA)</li>
<li>Some time later, the Client requests an accessToken by calling <code>GET /oauth/token</code> using the client_credentials grant</li>
<li>The AS returns a <a href=""https://tools.ietf.org/html/rfc7519"" rel=""nofollow noreferrer"">JWT accessToken</a> containing a <a href=""https://tools.ietf.org/html/rfc7519#page-14"" rel=""nofollow noreferrer"">JWS signature</a></li>
<li>The Client sends the JWT as a Bearer token to the RS</li>
<li>The RS uses the tokenKey that it received from the AS at startup to verify that the JWT accessToken came from the AS. This is where I get confused...</li>
</ol>

<p>Is this secure? Why would a public cert be used rather than a shared secret key? Couldn't a hacker easily obtain the public key and sign their own valid JWT accessToken? How does the usage of the public key cert and the JWT signature work together to verify that the sender was actually the Auth Server and not an attacker?</p>

<p>Any insight would help.</p>
","<p>Some research into the nature of public key cryptography and digital signatures gleans this: </p>

<p>Digital signatures implement <strong>asymmetric</strong> cryptography. A digital signature gives the receiver reason to believe the message was sent by the claimed sender. Similar to a handwritten signature they are difficult to forge. The signer, in this case, the AS, uses a secret PrivateKey to create the signature. Some non-repudiation schemes offer a time stamp for the digital signature, so that even when the PrivateKey is exposed, the signature is valid.</p>

<p><strong>A digital signature scheme typically consists of 3 algorithms</strong> </p>

<p>1) A <code>key generation algorithm</code> that selects a PrivateKey uniformly at random from a set of possible private keys. The algorithm outputs the private key and a corresponding public key.</p>

<p>2) A <code>signing algorithm</code> that creates a signature using the message and the private key</p>

<p>3) A <code>signature verifying algorithm</code> that, given the message, PublicKey and signature, either accepts or rejects the message's claim to authenticity.</p>

<p>In this case (RS256), the signature was created using SHA256withRSA which is not used as an encryption algorithm, rather it is used to verify the origin or the authenticity of the data.  The signature was generated using a private key. The public key is passed to the Resource server to be used to verify the signature. In this scenario, even if an attacker has the PublicKey, they cannot create a spoof message with the signature or alter the contents. </p>
","44581508","139","<jwt><public-key-encryption><spring-security-oauth2><hmac>","1","0","1","2018-12-10 17:38:04","","0","","1380406","","2017-06-16 08:40:00","2017-06-16 05:03:13","","2018-12-10 17:38:04","2017-06-16 05:33:28"
"51574050","How is a nonce RESTful when using HMAC?","<p>I'm trying to wrap my head around RESTful practices as I attempt to implement my own REST API, and that said, there's a fair bit that's confusing me.</p>

<p>One of the resources I've come across is the <a href=""http://restcookbook.com/Basics/loggingin/"" rel=""nofollow noreferrer"">REST Cookbook for logging in</a>, and while I understand how a nonce works for HMAC authentication, I'm hung up on one of the caveats listed towards the bottom of the page:</p>

<blockquote>
  <p>Using nonces can improve your security, but you MUST store and compare nonces server-side.</p>
</blockquote>

<p>Now, the <a href=""https://www.ics.uci.edu/~fielding/pubs/dissertation/rest_arch_style.htm#sec_5_1_3"" rel=""nofollow noreferrer"">original dissertation on the REST architecture</a> asserts the following about statelessness:</p>

<blockquote>
  <h3>5.1.3 Stateless</h3>
  
  <p>We next add a constraint to the client-server interaction: communication must be stateless in nature, as in the client-stateless-server (CSS) style of <a href=""https://www.ics.uci.edu/~fielding/pubs/dissertation/net_arch_styles.htm#sec_3_4_3"" rel=""nofollow noreferrer"">Section 3.4.3</a> (<a href=""https://www.ics.uci.edu/~fielding/pubs/dissertation/rest_arch_style.htm#fig_5_3"" rel=""nofollow noreferrer"">Figure 5-3</a>), such that each request from client to server must contain all of the information necessary to understand the request, and cannot take advantage of any stored context on the server. Session state is therefore kept entirely on the client.</p>
</blockquote>

<p>This constraint has popularly disallowed old DHTML webapp methods of maintaining authentication (e.g. a cookie containing a ""session ID"" hash that identifies a user's subsequent requests). If a server needs to remember which nonce values have been used, isn't that technically maintaining state much like a session ID? If a legitimate client loses state, how can it generate a valid nonce when the server shouldn't be storing, let alone disclosing, stateful information?</p>

<p>I get a feeling I'm seeing something wrong, missing a piece of the puzzle, or misinterpreting something in this method, but I can't figure out what for the life of me...</p>
","","","138","<rest><authentication><hmac><nonce>","1","","0","2018-07-28 18:20:29","","1","","","","","2018-07-28 18:20:29","","",""
"24107293","PHP HMAC - Will this implementation of a hmac validator be sufficient?","<p>The following function is part of a Request class. The class basically just holds the information parsed from the headers and body, and I want to implement a secure HMAC validation scheme. I have not done this before, but I have read A LOT on the subject, both here on SO and other places. I chose the sha256 algo as a middle way between performance and security.</p>

<p>The class holds all the variables except the <code>API_KEY</code> which is a defined constant that changes for each version and the shared secret which I store in a DB after an initial three-way exchange with public-key encryption securing the shared secret during device-registration. <code>validNonce()</code> just looks up the nonce in the DB to see if it is valid.</p>

<p>My questions boils down to: Am I on the right track? Am I missing something bleeding obvious? </p>

<pre><code>public function isValidRequest($secret)
{
    if(!validNonce($this-&gt;nonce))
    {
        return false;
    }

    $data = API_KEY . $this-&gt;device_key . $this-&gt;user_key . 
            $this-&gt;cnonce . $this-&gt;nonce . $this-&gt;body;

    $hmac_hash = hash_hmac(""sha256"",$data,$secret);
    return $this-&gt;hash === $hmac_hash;
}
</code></pre>
","<blockquote>
  <p>Am I on the right track? Am I missing something bleeding obvious? </p>
</blockquote>

<p><strong><a href=""https://blog.ircmaxell.com/2014/11/its-all-about-time.html"" rel=""nofollow noreferrer"">Timing attacks</a>!</strong> Okay, so it's not <em>really</em> obvious, but that's the missing piece of the puzzle here.</p>

<p>The general solution (in diff format) is:</p>

<pre><code>- return $this-&gt;hash === $hmac_hash;
+ return hash_equals($this-&gt;hash, $hmac_hash);
</code></pre>

<p>Furthermore, <strong>how you feed your data into HMAC</strong> needs to be carefully considered when working with multipart messages. Otherwise, even though you're using HMAC securely, you'll introduce the risk of creating two identical strings from different combinations of its constituent parts, which might be security-affecting.</p>

<pre><code>$data = API_KEY . $this-&gt;device_key . $this-&gt;user_key . 
        $this-&gt;cnonce . $this-&gt;nonce . $this-&gt;body;
</code></pre>

<p>This was a concern of mine when I designed PASETO, so I defined a scheme I call <a href=""https://github.com/paragonie/paseto/blob/master/docs/01-Protocol-Versions/Common.md#authentication-padding"" rel=""nofollow noreferrer"">PAE</a> (pre-authentication encoding) that makes these messages distinct and unambiguous. You can find an implementation <a href=""https://github.com/paragonie/paseto/blob/master/src/Util.php#L105-L127"" rel=""nofollow noreferrer"">here</a> (reproduced below):</p>

<pre><code>&lt;?php
class Util
{
    // ~8&lt;~8&lt;~8&lt;~8&lt;~8&lt;~ SNIP SNIP ~8&lt;~8&lt;~8&lt;~8&lt;~8&lt;~
    /**
     * Format the Additional Associated Data.
     *
     * Prefix with the length (64-bit unsigned little-endian integer)
     * followed by each message. This provides a more explicit domain
     * separation between each piece of the message.
     *
     * Each length is masked with PHP_INT_MAX using bitwise AND (&amp;) to
     * clear out the MSB of the total string length.
     *
     * @param string ...$pieces
     * @return string
     */
    public static function preAuthEncode(string ...$pieces): string
    {
        $accumulator = \ParagonIE_Sodium_Core_Util::store64_le(\count($pieces) &amp; PHP_INT_MAX);
        foreach ($pieces as $piece) {
            $len = Binary::safeStrlen($piece);
            $accumulator .= \ParagonIE_Sodium_Core_Util::store64_le($len &amp; PHP_INT_MAX);
            $accumulator .= $piece;
        }
        return $accumulator;
    }
    // ~8&lt;~8&lt;~8&lt;~8&lt;~8&lt;~ SNIP SNIP ~8&lt;~8&lt;~8&lt;~8&lt;~8&lt;~
}
</code></pre>

<p>And a compatible JavaScript implementation:</p>

<pre><code>function LE64(n) {
    var str = '';
    for (var i = 0; i &lt; 8; ++i) {
        if (i === 7) {
            // Clear the MSB for interoperability
            n &amp;= 127;
        }
        str += String.fromCharCode(n &amp; 255);
        n = n &gt;&gt;&gt; 8;
    }
    return str;
}
function PAE(pieces) {
    if (!Array.isArray(pieces)) {
        throw TypeError('Expected an array.');
    }
    var count = pieces.length;
    var output = LE64(count);
    for (var i = 0; i &lt; count; i++) {
        output += LE64(pieces[i].length);
        output += pieces[i];
    }
    return output;
}
</code></pre>

<p>What this means is that you'd want your final result to use something like <strong>PAE</strong> to encode all of the pieces into the <code>$data</code> function when creating AND verifying your HMAC tags. Don't forget to use <code>hash_equals()</code> to compare the two strings.</p>
","52302425","138","<php><security><hmac>","1","0","1","2018-09-12 19:49:24","","2","1","","","","2014-06-08 14:48:09","","","2018-09-12 19:49:24"
"47640324","Duo Security Auth","<p>Trying to auth to Duo Security admin API but stuck in their way of authenticating. Reference: <a href=""https://duo.com/docs/adminapi#authentication"" rel=""nofollow noreferrer"">https://duo.com/docs/adminapi#authentication</a></p>

<p>They have a function that says it would be used to construct the “Authorization” and “Date” headers. Does anyone know how to go about getting this started?</p>

<pre><code>import base64, email, hmac, hashlib, urllib

def sign(method, host, path, params, skey, ikey):
    """"""
    Return HTTP Basic Authentication (""Authorization"" and ""Date"") headers.
    method, host, path: strings from request
    params: dict of request parameters
    skey: secret key
    ikey: integration key
    """"""

    # create canonical string
    now = email.Utils.formatdate()
    canon = [now, method.upper(), host.lower(), path]
    args = []
    for key in sorted(params.keys()):
        val = params[key]
        if isinstance(val, unicode):
            val = val.encode(""utf-8"")
        args.append(
            '%s=%s' % (urllib.quote(key, '~'), urllib.quote(val, '~')))
    canon.append('&amp;'.join(args))
    canon = '\n'.join(canon)

    # sign canonical string
    sig = hmac.new(skey, canon, hashlib.sha1)
    auth = '%s:%s' % (ikey, sig.hexdigest())

    # return headers
    return {'Date': now, 'Authorization': 'Basic %s' % base64.b64encode(auth)}
</code></pre>
","","","137","<python><bash><api><python-requests><hmac>","0","","0","2017-12-04 19:10:20","","3","","","","","2017-12-04 19:10:20","","",""
"52795984","Passing hashed data as key to hash again returns incorrect results","<p>I'm creating a script that will access AWS services using GAS. I'm using the hashing functions in the Utilities library for all the hashing that is required to create a v4 signature. These functions appear to be able to successfully hash data once, but trying to pass in hashed data into an argument yields incorrect results. Anyone else run into this issue and figure it out?</p>

<p>I know there is something weird going on with <strong>Utilities.computeHmacSha256Signature( input, key )</strong>, because the arguments can only be byte arrays or strings, and I am passing in combinations of the two. However, when I try to convert the arguments to just byte arrays or strings, I still have no luck.</p>

<p><strong>My key generating code</strong>
<em>design reference: <a href=""https://docs.aws.amazon.com/general/latest/gr/sigv4-calculate-signature.html"" rel=""nofollow noreferrer"">link</a></em></p>

<pre><code>function getSignatureKey( key, dateStamp, regionName, serviceName ) {
  var kSecret = 'AWS4' + key;
  var kDate    = hash( dateStamp, kSecret );
  var kRegion  = hash( regionName,  kDate );
  var kService = hash( serviceName, kRegion );
  var kSigning = hash( 'aws4_request', kService );
  return kSigning;
}
</code></pre>

<p><strong>'My' hashing function:</strong></p>

<pre><code>function hash( payload, key ) {
  const utf8 = Utilities.Charset.UTF_8;
  const sha256 = Utilities.DigestAlgorithm.SHA_256;
  if ( !payload ) payload = '';

  if ( key ) {
    payload = Utilities.computeHmacSha256Signature( payload, key, utf8 );
  }
  else
    payload = Utilities.computeDigest( sha256, payload, utf8 );

  return  payload;
}
</code></pre>

<p><strong>Sample inputs</strong></p>

<pre><code>var key     = 'wJalrXUtnFEMI/K7MDENG+bPxRfiCYEXAMPLEKEY';
var date    = '20150830';
var region  = 'us-east-1';
var service = 'iam';
</code></pre>

<p><strong>Key generated from sample inputs</strong> <em>from <a href=""https://docs.aws.amazon.com/general/latest/gr/sigv4-calculate-signature.html"" rel=""nofollow noreferrer"">link</a></em></p>

<pre><code>c4afb1cc5771d871763a393e44b703571b55cc28424d1a5e86da6ed3c154a4b9
</code></pre>

<p><strong>Step by step results</strong> <em>Generated by <a href=""https://caligatio.github.io/jsSHA/"" rel=""nofollow noreferrer"">jsSHA</a></em></p>

<pre><code>// kDate = HMAC( date, 'AWS4' + key )
0138c7a6cbd60aa727b2f653a522567439dfb9f3e72b21f9b25941a42f04a7cd

// kRegion = HMAC( region, kDate )
f33d5808504bf34812e5fade63308b424b244c59189be2a591dd2282c7cb563f

// kService = HMAC( service, kRegion )
199e1f48c602a5ae77ce26a46906920e76fc8427aeaa53da643646fcda1ccfb0

// kSigning = HMAC( 'aws4_request', kService ) -- matches example
c4afb1cc5771d871763a393e44b703571b55cc28424d1a5e86da6ed3c154a4b9
</code></pre>

<p><strong>My results</strong> <em>Running the results of hash()  function above(through hex encoder)</em></p>

<pre><code>// var kSecret = 'AWS4' + key;
// var kDate    = hash( dateStamp, kSecret )
0138c7a6cbd60aa727b2f653a522567439dfb9f3e72b21f9b25941a42f04a7cd

// var kRegion  = hash( regionName,  kDate );
67a1e58cdd80d4ae0eab4345f1cac6e4faab10efb9c21fd7b30e5e9118462c79

// var kService = hash( serviceName, kRegion );
295384288c76cdb665c1cbf8281250b93b6ae257b98b72e4be0876a9e8a0b409

// var kSigning = hash( 'aws4_request', kService );
bfb393756c5518b668b5055910bb715e4a879c0e10bb22d3140b1e82b2a50a2c
</code></pre>
","<p>How about this modification?</p>

<h3>Reason of issue:</h3>

<p>Both <code>value</code> and <code>key</code> of <code>Utilities.computeHmacSha256Signature(value, key)</code> are ""String"" or ""Byte[]"". In your script, when <code>var kDate    = hash( dateStamp, kSecret );</code> is run, <code>kDate</code> is the byte array. But when <code>var kRegion  = hash( regionName,  kDate );</code> is run, <code>regionName</code> and <code>kDate</code> are ""String"" and ""Byte[]"", respectively. By this, after <code>var kRegion  = hash( regionName,  kDate );</code>, the result is not the same with that of jsSHA.</p>

<h3>Modification points:</h3>

<ul>
<li>In order to avoid this, for example, please convert ""String"" to ""Byte[]"".</li>
</ul>

<h3>Modified script:</h3>

<pre><code>function sample() {
  var key = 'wJalrXUtnFEMI/K7MDENG+bPxRfiCYEXAMPLEKEY';
  var dateStamp = '20150830';
  var regionName = 'us-east-1';
  var serviceName = 'iam';
  var kSecret = 'AWS4' + key;

  regionName = Utilities.newBlob(regionName).getBytes(); // Added
  serviceName = Utilities.newBlob(serviceName).getBytes(); // Added
  var value = Utilities.newBlob('aws4_request').getBytes(); // Added

  var kDate    = hash( dateStamp, kSecret );
  var kRegion  = hash( regionName,  kDate );
  var kService = hash( serviceName, kRegion );
  var kSigning = hash( value, kService );
  return kSigning;
}

function hash( payload, key ) {
  return Utilities.computeHmacSha256Signature(payload, key);
  // return Utilities.computeHmacSignature(Utilities.MacAlgorithm.HMAC_SHA_256, payload, key) // You can also use this.
}
</code></pre>

<h3>Result:</h3>

<pre><code>kDate: 0138c7a6cbd60aa727b2f653a522567439dfb9f3e72b21f9b25941a42f04a7cd
kRegion: f33d5808504bf34812e5fade63308b424b244c59189be2a591dd2282c7cb563f
kService: 199e1f48c602a5ae77ce26a46906920e76fc8427aeaa53da643646fcda1ccfb0
kSigning: c4afb1cc5771d871763a393e44b703571b55cc28424d1a5e86da6ed3c154a4b9
</code></pre>

<h3>References:</h3>

<ul>
<li><a href=""https://developers.google.com/apps-script/reference/utilities/utilities#computehmacsha256signaturevalue-key"" rel=""nofollow noreferrer"">computeHmacSha256Signature(value, key)</a></li>
<li><a href=""https://developers.google.com/apps-script/reference/utilities/utilities#computehmacsignaturealgorithm-value-key"" rel=""nofollow noreferrer"">computeHmacSignature(algorithm, value, key)</a></li>
<li><a href=""https://developers.google.com/apps-script/reference/utilities/utilities#newblobdata_6"" rel=""nofollow noreferrer"">newBlob(data)</a></li>
<li><a href=""https://developers.google.com/apps-script/reference/base/blob#getBytes()"" rel=""nofollow noreferrer"">getBytes()</a></li>
</ul>

<p>If this was not what you want, I'm sorry.</p>
","52798209","136","<javascript><amazon-web-services><google-apps-script><hmac>","2","4","1","2018-10-13 23:27:14","52798209","0","2","8404453","","2018-10-13 20:20:22","2018-10-13 18:23:48","","","2018-10-13 23:27:14"
"32723246","Different ways to authenticate to a REST Webservice","<p>I need to sum up different ways to authenticate to a REST Webservice. Of course there is the Basic Authentication and i also found the Digest access authentication and the authentication with HMAC.</p>

<p>In <a href=""http://tools.ietf.org/html/rfc2617"" rel=""nofollow"">RFC2617</a> there is the Digest access authentication specified as a method, which hash </p>

<blockquote>
  <p>the username, the password, the given
     nonce value, the HTTP method, and the requested URI</p>
</blockquote>

<p>and then send this hash with the parameter (but not the password) to the server to authenticate.</p>

<p>Now the Question: Is there a difference / What is the difference between the digest authentication and HMAC?</p>

<p>Using HMAC for authentication, i also have to concat some Strings and hash them...</p>

<p>What are other methodes of autentication? I tried to understand OAuth (<a href=""https://tools.ietf.org/html/rfc6749#page-7"" rel=""nofollow"">RFC6749</a>) but for me it seems to be a Framework which based on other methodes:</p>

<blockquote>
  <p>Clients in possession of a client password MAY use the HTTP Basic
     authentication scheme as defined in [RFC2617] to authenticate with
     the authorization server</p>
</blockquote>
","","","136","<web-services><rest><authentication><oauth><hmac>","1","","0","2015-09-22 17:43:46","","0","2","4992046","","2015-09-22 17:43:46","2015-09-22 17:32:10","","",""
"24840382","calculating mac for wsp header","<p>I am trying to get mac value for wsp header, according documentation S40 OMA client Provisioning doc, page 36 of Appendix B (<a href=""http://sorrytesting.googlecode.com/files/Series_40_DP_2_0_OMA_Client_Provisioning_v1_3_en.pdf"" rel=""nofollow"">http://sorrytesting.googlecode.com/files/Series_40_DP_2_0_OMA_Client_Provisioning_v1_3_en.pdf</a>)
1) I 've got this wbxml:
1. I considered the below XML:</p>

<pre><code>&lt;?xml version=""1.0""?&gt;
&lt;!DOCTYPE wap-provisioningdoc PUBLIC ""-//WAPFORUM//DTD PROV 1.0//EN"" “http://www.wapforum.org/DTD/prov.dtd""&gt;
&lt;wap-provisioningdoc version=""1.0""&gt;
&lt;characteristic type=""NAPDEF""&gt;
&lt;parm name=""NAPID"" value=""inet""/&gt;
&lt;parm name=""NAME"" value=""InternetNAPDEF""/&gt;
&lt;parm name=""BEARER"" value=""GSM-GPRS""/&gt;
&lt;parm name=""NAP-ADDRESS"" value=""internet""/&gt;
&lt;parm name=""NAP-ADDRTYPE"" value=""APN""/&gt;
&lt;parm name=""INTERNET""/&gt;
&lt;/characteristic&gt;
&lt;characteristic type=""APPLICATION""&gt;
&lt;parm name=""APPID"" value=""w2""/&gt;
&lt;parm name=""TO-NAPID"" value=""inet""/&gt;
&lt;characteristic type=""RESOURCE""&gt;
&lt;parm name=""URI"" value=""http://wap.krak.dk""/&gt;
&lt;parm name=""STARTPAGE""/&gt;
&lt;/characteristic&gt;
&lt;/characteristic&gt;
&lt;characteristic type=""BOOTSTRAP""&gt;
&lt;parm name=""NAME"" value=""Sonofon Browser""/&gt;
&lt;/characteristic&gt;
&lt;/wap-provisioningdoc&gt;
</code></pre>

<p>2)I have got WbXML file:</p>

<pre><code>030B6A05 696E6574 00C54601 C6550187 ..j. inet ..F. .U..
11068300 01870706 03496E74 65726E65 .... .... .Int erne
744E4150 44454600 01871006 AB018708 tNAP DEF. .... ....
0603696E 7465726E 65740001 87090689 ..in tern et.. ....
01871401 01C60001 55018736 00000603 .... .... U..6 ....
77320001 87220683 0001C600 01590187 w2.. ."".. .... .Y..
3A000006 03687474 703A2F2F 7761702E :... .htt p:// wap.
6B72616B 2E646B00 01871C01 0101C656 krak .dk. .... ...V
01870706 03536F6E 6F666F6E 2042726F .... .Son ofon Bro
77736572 00010101 wser ....
Series
</code></pre>

<p>3)With help of HashCalc I have got sha1 string d0e034c0864e5e72dfea6e3b43022a32b239af76 </p>

<p>4) In hex it is : 64306530333463303836346535653732646665613665336234333032326133326232333961663736</p>

<p>But in document it is : 4430453033344330383634453545373244464541
3645334234333032324133324232333941463736</p>

<p>How they did it?</p>
","","","134","<gsm><hmac><ota><wbxml>","1","","0","2014-07-19 12:26:47","","0","","","","","2014-07-19 12:26:47","","",""
"38850231","Calculate HMAC/MD5 truncated digest in Node.js?","<p>I have a truncated digest from Crypto++. The digest was created with Hmac-md5 hashing algorithm. I need to calculate the same truncated digest in Node.js.</p>

<p>Is it enough to truncate the result in Node.js? Or does Crypto++ actually do more stuff?</p>

<p>Thanks for your help!</p>
","","","134","<node.js><md5><hmac><crypto++>","0","","0","2016-08-09 13:24:58","","6","","608639","","2016-08-09 13:24:58","2016-08-09 12:05:20","","",""
"51580441","Android HMAC SHA512 Negative Byte","<p>Hello I'm trying to create Http Request to Api which needs data SHA512 encrypted. I've made same example in C# that works. In Android Java I can not reproduce hash and authenticate to WebApi. I think that the problem is that </p>

<pre><code>mac.doFinal(byteData);
</code></pre>

<p>is creating byte array with negative values. In C# there are none negatives.
Here is my code. Please tell me what am I doing wrong:</p>

<pre><code>public static String calculateHMAC(String secret, String data) {
    byte[] byteSecret = secret.getBytes(StandardCharsets.UTF_8);
    byte[] byteData = data.getBytes(StandardCharsets.UTF_8);

    try {
        SecretKeySpec signingKey = new SecretKeySpec(byteSecret,    ""HmacSHA512"");
        Mac mac = Mac.getInstance(""HmacSHA512"");

        mac.init(signingKey);
        byte[] rawHmac = mac.doFinal(byteData); // -&gt; Here Java makes rawMac with negative bytes
        return byteArrayToString(rawHmac);
    } catch (GeneralSecurityException e) {
        throw new IllegalArgumentException();
    }

}

private static String byteArrayToString(byte[] bytes) {

    StringBuilder sb = new StringBuilder();

    for(byte b : bytes){
        sb.append(Integer.toHexString(0xff &amp; b));
    }
    return sb.toString();

}
</code></pre>

<p>Thanks in advance</p>
","<p>In Java there are no unsigned types so you cannot avoid negative values in binary data. It's not the problem.</p>

<p>One problem you have is in <code>byteArrayToString()</code>. <code>toHexString()</code> does not left-pad with zeros so values 0..15 don't output two chars but just one. I'd use something like <code>String.format(""%02x"", b)</code> instead. See also: <a href=""https://stackoverflow.com/questions/9655181/how-to-convert-a-byte-array-to-a-hex-string-in-java"">How to convert a byte array to a hex string in Java?</a> </p>
","51580545","132","<java><android><byte><hmac><sha>","0","0","2","2018-07-29 14:00:17","","0","","","","","2018-07-29 12:43:21","","","2018-07-29 12:56:38"
"51580441","Android HMAC SHA512 Negative Byte","<p>Hello I'm trying to create Http Request to Api which needs data SHA512 encrypted. I've made same example in C# that works. In Android Java I can not reproduce hash and authenticate to WebApi. I think that the problem is that </p>

<pre><code>mac.doFinal(byteData);
</code></pre>

<p>is creating byte array with negative values. In C# there are none negatives.
Here is my code. Please tell me what am I doing wrong:</p>

<pre><code>public static String calculateHMAC(String secret, String data) {
    byte[] byteSecret = secret.getBytes(StandardCharsets.UTF_8);
    byte[] byteData = data.getBytes(StandardCharsets.UTF_8);

    try {
        SecretKeySpec signingKey = new SecretKeySpec(byteSecret,    ""HmacSHA512"");
        Mac mac = Mac.getInstance(""HmacSHA512"");

        mac.init(signingKey);
        byte[] rawHmac = mac.doFinal(byteData); // -&gt; Here Java makes rawMac with negative bytes
        return byteArrayToString(rawHmac);
    } catch (GeneralSecurityException e) {
        throw new IllegalArgumentException();
    }

}

private static String byteArrayToString(byte[] bytes) {

    StringBuilder sb = new StringBuilder();

    for(byte b : bytes){
        sb.append(Integer.toHexString(0xff &amp; b));
    }
    return sb.toString();

}
</code></pre>

<p>Thanks in advance</p>
","<p>Maybe I'm doing something wrong with my Http Post request. It needs HMAC SHA512 encryption. This is my test code:</p>

<pre><code>public void postInfo() {
    String mApiKey = ""$2y$10$6qyl9aYyT.3EV9uue5yup.eM6k1A9O98ZuZMYd0JBl5dbKRYNAF16"";
    String mApiPin = ""377eac53887e1cff2c7ff999"";

    String params = ""method=info&amp;time="" + String.valueOf(System.currentTimeMillis() / 1000);

    final HttpClient httpclient = new DefaultHttpClient();
    final HttpPost httppost = new HttpPost(ApiEndPoint.ENDPOINT);

    try {
        List&lt;NameValuePair&gt; nameValuePairs = new ArrayList&lt;NameValuePair&gt;(2);

        nameValuePairs.add(new BasicNameValuePair(""method"", ""info""));
        nameValuePairs.add(new BasicNameValuePair(""time"", String.valueOf(System.currentTimeMillis() / 1000)));

        httppost.setEntity(new UrlEncodedFormEntity(nameValuePairs));

        String hmac = HMAC.hash(mApiKey, params);

        httppost.addHeader(""key"", mApiKey);
        httppost.addHeader(""hash"", hmac);

        AsyncTask.execute(new Runnable() {
            @Override
            public void run() {
                try {
                    HttpResponse response = httpclient.execute(httppost);

                    HttpEntity entity = response.getEntity();

                    String content = EntityUtils.toString(entity); // Here it outputs that sign is incorrect

                    return;
                } catch (IOException e) {
                    e.printStackTrace();
                }

            }
        });

        return;

    } catch (IOException e) {
        // TODO Auto-generated catch block
    }
}

public static String hash(String key, String msg) {
    byte[] returnVal = null;
    try {
        SecretKeySpec signingKey = new SecretKeySpec(key.getBytes(StandardCharsets.UTF_8), ""HmacSHA512"");
        Mac mac = Mac.getInstance(""HmacSHA512"");
        mac.init(signingKey);
        returnVal = mac.doFinal(msg.getBytes(StandardCharsets.UTF_8));
    }
    catch (Exception ex) {
        throw ex;
    }
    finally {
        return convertToHex(returnVal);
    }
}
</code></pre>
","51581063","132","<java><android><byte><hmac><sha>","0","0","2","2018-07-29 14:00:17","","0","","","","","2018-07-29 12:43:21","","","2018-07-29 14:00:17"
"36059983","HMAC Token - Check Logic","<p>I have a situation where I need a token that provides authentication.  The common HMAC procedure I found is:</p>

<ol>
<li>Get Some key using login credentials </li>
<li>Create Message, append key and other message data (in defined order)</li>
<li>Hash with a Secret Key</li>
<li>Transmit message, and include values that are in the message (not hashed)</li>
</ol>

<p>Then</p>

<ol>
<li>Receive the message</li>
<li>Use the unhashed values to rebuild the message </li>
<li>Hash with secret key</li>
<li>If the hashes match, then the message is good.</li>
</ol>

<p>I am implementing something similar - but I don't think I need to do some of these steps.  I wanted to Know: <strong>Does my implementation have security holes in the logic</strong>?</p>

<p>My Implementation:</p>

<ol>
<li>Client asks the server to generate a Token - this requires login credentials.</li>
<li>Server creates a token but does not return it (it is kept in the database) - it returns a time stamp.</li>
<li>Client generates a message based on time stamp, user and other data.</li>
<li>Client hashes token with a secret key, provided outside of this process.</li>
<li>Client sends token to the server.</li>
</ol>

<p>Then:</p>

<ol>
<li>Receive the message</li>
<li>If that token is in the database, it is valid</li>
</ol>

<p>My reasoning behind taking out the message reconstruct is: that happened when the token was generated and the client couldn't know about the token in the database unless that knew how to generate it which means they authenticated and have a secret key.</p>
","","","132","<security><authentication><hash><hmac>","0","","0","2016-03-17 12:00:41","","4","","","","","2016-03-17 12:00:41","","",""
"57439671","How to HMAC SHA256 sign a string with a double array key or an hex string key using google apps script?","<p>Following the <a href=""https://docs.aws.amazon.com/general/latest/gr/signature-v4-examples.html"" rel=""nofollow noreferrer"">AWS example on Signature Version 4</a>, I am trying to reproduce the example using a Google Sheets with Google apps scripting. I face an issue with the kregion signature in the example. While I can confirm that the AWS example is valid using <a href=""https://cryptii.com/pipes/hmac"" rel=""nofollow noreferrer"">an online signature tool</a>, I am never able to reproduce the example output using any Google app script. As HMAC SHA256 signature works fine for an earlier part of the example (kdate), the issue seems to come from the way data is stored or used.</p>

<p>What works for kDate is the following with parts from <a href=""https://stackoverflow.com/questions/16216868/get-back-a-string-representation-from-computedigestalgorithm-value-byte/34111253#34111253"">another stackoverflow entry to convert byte array to hex string</a> and with the help of <a href=""https://developers.google.com/apps-script/reference/utilities/utilities#computeHmacSha256Signature(String,String,Charset)"" rel=""nofollow noreferrer"">Google apps script documentation for computeHmacSha256Signature</a>:</p>

<pre><code>var input=""20120215"";
var key=""AWS4""+""wJalrXUtnFEMI/K7MDENG+bPxRfiCYEXAMPLEKEY"";//Do not worry, this is an example key, not my actual key
var signature=Utilities.computeHmacSha256Signature(input,key);
signature=signature.map(function(chr){return (chr+256).toString(16).slice(-2)}).join('');//convert byte array to hex string
Logger.log(signature);//valid 969fbb94feb542b71ede6f87fe4d5fa29c789342b0f407474670f0c2489e0a0d
</code></pre>

<p>Here is the same thing for the kRegion:</p>

<pre><code>var input=""us-east-1"";
var key=""969fbb94feb542b71ede6f87fe4d5fa29c789342b0f407474670f0c2489e0a0d"";
var signature=Utilities.computeHmacSha256Signature(input,key);
signature=signature.map(function(chr){return (chr+256).toString(16).slice(-2)}).join('');
Logger.log(signature);//non-valid a59e30f9d899c47b3dd68ea1c0ab3bb529e03a8f4ed2f54cb64af547330a22a0
</code></pre>

<p>I am not surprised that it doesn't produce the valid example kRegion output <code>69daa0209cd9c5ff5c8ced464a696fd4252e981430b10e3d3fd8e2f197d7a70c</code> because the key is stored as a hex string which doesn't make much sense. Here is the same thing with an attempt at decoding the hex string to a byte array inspired from this <a href=""https://gist.github.com/tauzen/3d18825ae41ff3fc8981"" rel=""nofollow noreferrer"">github entry</a>:</p>

<pre><code>var input=""us-east-1"";
var key=""969fbb94feb542b71ede6f87fe4d5fa29c789342b0f407474670f0c2489e0a0d"";
var a=[];
for(var i=0, len=key.length; i&lt;len; i+=2) {
  a.push(parseInt(key.substr(i,2),16));
}
key=a;
Logger.log(key);//[150.0, 159.0, 187.0, 148.0, 254.0, 181.0, 66.0, 183.0, 30.0, 222.0, 111.0, 135.0, 254.0, 77.0, 95.0, 162.0, 156.0, 120.0, 147.0, 66.0, 176.0, 244.0, 7.0, 71.0, 70.0, 112.0, 240.0, 194.0, 72.0, 158.0, 10.0, 13.0]
var signature=Utilities.computeHmacSha256Signature(input,key);
signature=signature.map(function(chr){return (chr+256).toString(16).slice(-2)}).join('');
Logger.log(signature);//non-valid ac7a5b21190d18b323886d48cd3c4c7486a0f1dd4edb80d245a221a95f5e689b
</code></pre>

<p>Using an <a href=""https://conv.darkbyte.ru"" rel=""nofollow noreferrer"">online converter</a>, i can confirm that the key is well converted. Yet, the output signature is still wrong.
I was wondering whether it could be because the key bytes are stored as doubles. So, I tried the following with no difference on the output signature:</p>

<pre><code>var input=""us-east-1"";
var key=[0x96, 0x9f, 0xbb, 0x94, 0xfe, 0xb5, 0x42, 0xb7, 0x1e, 0xde, 0x6f, 0x87, 0xfe, 0x4d, 0x5f, 0xa2, 0x9c, 0x78, 0x93, 0x42, 0xb0, 0xf4, 0x07, 0x47, 0x46, 0x70, 0xf0, 0xc2, 0x48, 0x9e, 0x0a, 0x0d];
var signature=Utilities.computeHmacSha256Signature(input,key);
signature=signature.map(function(chr){return (chr+256).toString(16).slice(-2)}).join('');
Logger.log(signature);//non-valid ac7a5b21190d18b323886d48cd3c4c7486a0f1dd4edb80d245a221a95f5e689b
</code></pre>

<p>Then I thought maybe both parameters of the computeHmacSha256Signature function need to be byte arrays:</p>

<pre><code>var input=[0x75, 0x73, 0x2d, 0x65, 0x61, 0x73, 0x74, 0x2d, 0x31];
var key=[0x96, 0x9f, 0xbb, 0x94, 0xfe, 0xb5, 0x42, 0xb7, 0x1e, 0xde, 0x6f, 0x87, 0xfe, 0x4d, 0x5f, 0xa2, 0x9c, 0x78, 0x93, 0x42, 0xb0, 0xf4, 0x07, 0x47, 0x46, 0x70, 0xf0, 0xc2, 0x48, 0x9e, 0x0a, 0x0d];
var signature=Utilities.computeHmacSha256Signature(input,key);//leads to error ""Cannot convert Array to (class)[].""
signature=signature.map(function(chr){return (chr+256).toString(16).slice(-2)}).join('');
Logger.log(signature);
</code></pre>

<p>The above leads to error ""Cannot convert Array to (class)[]."". Which seems to indicate that the computeHmacSha256Signature function is more comfortable with the string input.</p>

<p>I got yet another invalid kRegion output signature by using the output signature of kDate without converting it to a string:</p>

<pre><code>var input=""20120215"";
var key=""AWS4""+""wJalrXUtnFEMI/K7MDENG+bPxRfiCYEXAMPLEKEY"";
var signature=Utilities.computeHmacSha256Signature(input,key);
input=""us-east-1"";
key=signature;
signature = Utilities.computeHmacSha256Signature(input,key);
signature=signature.map(function(chr){return (chr+256).toString(16).slice(-2)}).join('');
Logger.log(signature);//non-valid c3b37a4dc2e085fcd35411493526592a33ef1d7d38454a25e574a34fe190d7be
</code></pre>

<p>I tried many other conversions with no success.</p>
","<ul>
<li><p>You want to achieve the result of the sample scripts of <a href=""https://docs.aws.amazon.com/general/latest/gr/signature-v4-examples.html"" rel=""noreferrer"">""Examples of How to Derive a Signing Key for Signature Version 4""</a> using Google Apps Script.</p>

<ul>
<li><p>In your case, you want to retrieve the value of <code>f4780e2d9f65fa895f9c67b32ce1baf0b0d8a43505a000a1a9e090d414db404d</code> from the following sample values as <code>kSigning</code>.</p>

<pre><code>key = 'wJalrXUtnFEMI/K7MDENG+bPxRfiCYEXAMPLEKEY'
dateStamp = '20120215'
regionName = 'us-east-1'
serviceName = 'iam'
</code></pre></li>
</ul></li>
</ul>

<p>If my understanding is correct, how about this sample script?</p>

<h3>Important points:</h3>

<ul>
<li>At Google Apps Script, the data which was encrypted by <code>Utilities.computeHmacSha256Signature()</code> is the bytes array of the signed hexadecimal. In <a href=""https://docs.aws.amazon.com/general/latest/gr/signature-v4-examples.html"" rel=""noreferrer"">the sample scripts</a>, the bytes array is converted to the unsigned hexadecimal. So it is required to be converted.

<ul>
<li>But, when the byte array is created by <code>Utilities.computeHmacSha256Signature()</code>, the created byte array can be used for <code>Utilities.computeHmacSha256Signature()</code> without converting.</li>
</ul></li>
</ul>

<p>From above situation, the sample script for Google Apps Script can be made as follows.</p>

<h3>Sample script:</h3>

<p>In this sample script, in order to check whether the script is correct, I tested the script using the sample values at <a href=""https://docs.aws.amazon.com/general/latest/gr/signature-v4-examples.html"" rel=""noreferrer"">https://docs.aws.amazon.com/general/latest/gr/signature-v4-examples.html</a>.</p>

<pre><code>function myFunction() {
  // These are the sample values of https://docs.aws.amazon.com/general/latest/gr/signature-v4-examples.html
  var key = 'wJalrXUtnFEMI/K7MDENG+bPxRfiCYEXAMPLEKEY';
  var dateStamp = '20120215';
  var regionName = 'us-east-1';
  var serviceName = 'iam';

  // I prepared the following script.
  var kDate = Utilities.computeHmacSha256Signature(dateStamp, ""AWS4"" + key);
  var kRegion = Utilities.computeHmacSha256Signature(Utilities.newBlob(regionName).getBytes(), kDate);
  var kService = Utilities.computeHmacSha256Signature(Utilities.newBlob(serviceName).getBytes(), kRegion);
  var kSigning = Utilities.computeHmacSha256Signature(Utilities.newBlob(""aws4_request"").getBytes(), kService);
  kSigning = kSigning.map(function(e) {return (""0"" + (e &lt; 0 ? e + 256 : e).toString(16)).slice(-2)}).join("""");

  Logger.log(kSigning) // Result
}
</code></pre>

<ul>
<li>About above script, for example, <code>kDate</code> is the byte array. So <code>regionName</code> is required to be converted to the byte array. Please be careful this.</li>
</ul>

<h3>Result:</h3>

<pre><code>f4780e2d9f65fa895f9c67b32ce1baf0b0d8a43505a000a1a9e090d414db404d
</code></pre>

<p>This value is the same with <a href=""https://docs.aws.amazon.com/general/latest/gr/signature-v4-examples.html"" rel=""noreferrer"">the sample value</a>. By this, it was found that the prepared script returns the correct value.</p>

<h3>References:</h3>

<ul>
<li><a href=""https://developers.google.com/apps-script/reference/utilities/utilities#computehmacsha256signaturevalue-key_4"" rel=""noreferrer"">computeHmacSha256Signature(value, key)</a></li>
<li><a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map"" rel=""noreferrer"">map()</a></li>
</ul>

<p>If I misunderstood your question and this was not the result you want, I apologize.</p>
","57440295","131","<amazon-web-services><google-apps-script><digital-signature><sha256><hmac>","3","5","1","2019-08-10 08:04:32","57440295","0","2","2590508","","2019-08-10 06:30:55","2019-08-10 05:50:51","","2019-08-10 08:04:32","2019-08-10 07:37:58"
"51268183","PHP sha512 hmac produces different value than JS hmac","<p>Here is some of my JS code. I am creating the hmac using Crypto, then passing in the date and signature as request headers to use in PHP:</p>

<pre class=""lang-js prettyprint-override""><code>events: {
    proxyReq: (proxyReq, req) =&gt; {
        const date = Date.now();
        const API_KEY = 125;
        const API_SECRET_KEY = 'abc';
        const s = new Buffer(API_SECRET_KEY, 'base64');
        const message = req.method + req.url + date;
        let hmac = crypto.createHmac('sha512', s);
        const signature = hmac.update(message).digest('base64');
        proxyReq.setHeader('x-api-key', API_KEY);
        proxyReq.setHeader('x-api-signature', signature);
        proxyReq.setHeader('x-api-date', date);
    },
},
</code></pre>

<p>Here is my PHP function where I try to reproduce the same hmac using hash_hmac():</p>

<pre><code>public function handle($request, \Closure $next)
{
    try {
        $API_SECRET_KEY = 'abc';
        $method = $request-&gt;method();
        $url = $request-&gt;path();
        $date = $request-&gt;header('x-api-date');
        $client_key = $request-&gt;header('x-api-key');
        $client_signature = $request-&gt;header('x-api-signature');
        $message = $method . $url . $date;

        $hmac = base64_encode(hash_hmac('sha512', $message, base64_decode($API_SECRET_KEY), true));

        $all['x-api-date'] = $date;
        $all['x-api-signature'] = $client_signature;
        $all['x-api-key'] = $client_key;

        Log::error($client_signature);
        Log::error($hmac);

    return $next($request);
}
</code></pre>

<p>My last outputs:</p>

<pre><code>[2018-07-10 14:23:57] local.ERROR: D0xis7BbxLBg6eWBlIT0ZSnhzk4c3Z3Ore9B16bNZow8xoinfM1zuMlS+lZ6pcOqRRHuupodUVFAIHfv89v4xw==  
[2018-07-10 14:23:57] local.ERROR: Uypk5ZAd/I6E6sMi9UjIMyMxVhuQm7MatZbKCcGjGjsE2JqqrvTRYuJAR/SSde10eHAkPIz0g24CSZp0G+833A== 
</code></pre>

<p>Can someone explain to me what I am doing wrong? I made sure to use base64 encoding/decoding and made sure the values passed into the hmac function were the same as the headers.</p>

<p>I appreciate any help!</p>
","","","130","<javascript><php><authorization><hmac><sha512>","0","","0","2018-07-10 15:22:02","","2","","21926","","2018-07-10 15:22:02","2018-07-10 14:44:37","","",""
"45427873","Is there any vb6 library that uses hkdf and sha-512","<p>I am encrypting my data using AES-128 CBC. However it is decrypted by another software CodeIgnitor, which actually converts password into 2 elements. <strong>HMAC key</strong> and <strong>encryption_key</strong> using hkdf and SHA-512 digest.</p>

<p>How can i implement this thing in my code. (I am using VB 6)</p>

<p>Re-phrasing my question: How is password converted into 2 elements HMAC_key and encryption_key?</p>

<hr>

<p>Let's see if I can explain further..</p>

<p>Encryption software used is <a href=""https://www.di-mgt.com.au/properpassword.html#vbnet2vb6"" rel=""nofollow noreferrer"">CryptoSys</a> while decryptionis done by <a href=""https://www.codeigniter.com/user_guide/libraries/encryption.html"" rel=""nofollow noreferrer"">CodeIgnitor</a>..which is not working</p>

<p>So the difference I can see between the two is that codeignitor is expecting an HMAC authmessage when decrypting while the encryption does not prepend it the final message. So how can i do that? I am using VB6 for encryption.</p>

<hr>

<p>So far I have come to the conclusion that there could be 2 key-derivation function a pb-kdf or a h-kdf.</p>

<p>The h-kdf authentication in particular works as follows:</p>

<ol>
<li>A password is enterd by user</li>
<li>Based on this password and a random IV, an HMAC key is generated using HKDF and SHA-512 digest algo.</li>
<li>This HMAC key is saved and also expanded and then using IV/salt encrypts the plaintext message.</li>
<li>The IV is pre-pended to the plain-text message and base64 encoded.</li>
<li>The HMAC key is then pre-pended to the final message gereated in step 4.</li>
</ol>

<p>So basically hkdf does not convert a key into 2 elements but only uses the basic key generated to generate other keys (and HMAC key is the original key used to generate other keys) now my question becomes...</p>

<p>Is there any vb6 library that uses hkdf and sha-512? As far as i have researched, Chilkat and CryptoSys APIs are only pbkdf based..Am I correct?</p>
","","","130","<codeigniter><encryption><aes><hmac><cryptoapi>","0","","0","2017-08-02 03:27:21","","2","","6412823","","2017-08-02 03:27:21","2017-08-01 02:08:30","","",""
"20519809","Port Python hmac on Java produsing different result","<p>I don't know Python(
Trying port this Python script on Java (Google Music Api (unoficial)):</p>

<pre><code>import base64
import hmac
from hashlib import sha1

base = ""11""
key = ""34ee7983-5ee6-4147-aa86-443ea062abf774493d6a-2a15-43fe-aace-e78566927585""
salt = '1386759932759'

mac = hmac.new(key, base, sha1) 
mac.update(salt)
sig = base64.urlsafe_b64encode(mac.digest())
print sig;
#nYVoP7wXhJAMGLlY4mcCwfIilMw=
</code></pre>

<p>Java version:</p>

<pre><code>String sig = """";
String salt = ""1386759932759"";
String base_string = ""11"";
String key = ""34ee7983-5ee6-4147-aa86-443ea062abf774493d6a-2a15-43fe-aace-e78566927585"";
try {
    Mac mac = Mac.getInstance(""HmacSHA1"");
    SecretKeySpec secret = new SecretKeySpec(key.getBytes(""UTF-8""), mac.getAlgorithm());
    mac.init(secret);
    mac.update(salt.getBytes(""UTF-8""));
    byte[] digest = mac.doFinal(base_string.getBytes());
    sig = new String(android.util.Base64.encode(digest, android.util.Base64.URL_SAFE));
} catch (Exception e) {
    e.printStackTrace();
}
AQUtility.debug(""computeSignature"",sig);
//Return: H2in0WNfxSCEz3CHNrMVbqfgXt4=
</code></pre>

<p>Why result different? Help pls(</p>
","<p>Found error. Need do base before salt:</p>

<pre><code>String sig = """";
String salt = ""1386759932759"";
String base_string = ""11"";
String key = ""34ee7983-5ee6-4147-aa86-443ea062abf774493d6a-2a15-43fe-aace-e78566927585"";
try {
    Mac mac = Mac.getInstance(""HmacSHA1"");
    SecretKeySpec secret = new SecretKeySpec(key.getBytes(""UTF-8""), mac.getAlgorithm());
    mac.init(secret);
    mac.update(base_string.getBytes());
    byte[] digest = mac.doFinal(salt.getBytes());
    sig = new String(android.util.Base64.encode(digest, android.util.Base64.URL_SAFE));
} catch (Exception e) {
    e.printStackTrace();
}
AQUtility.debug(""computeSignature"",sig);
//nYVoP7wXhJAMGLlY4mcCwfIilMw=
</code></pre>
","20520028","128","<java><python><hmac><hmacsha1>","0","0","1","2014-09-12 06:35:35","20520028","0","2","","","","2013-12-11 12:59:54","","2014-09-12 06:35:35","2013-12-11 13:10:29"
"33703755","Find what my Query's POST data is?","<p>This is what I am having trouble understanding and doing.</p>

<p>I need to add a header called sign with the query's POST data signed by my key's ""secret"" according to the HMAC-SHA512 method. What is my query's post data? And how can I find it so that I can encrypt it and send it as a header.</p>

<p>These are my parameters: <code>""command"" =&gt; ""returnBalances"", ""nonce"" =&gt; Time.now.to_i</code></p>

<p>Please let me know:</p>

<ul>
<li>How do I find my post request data.</li>
<li>How do I use the HMAC-SHA512 method to encrypt this data so that I can send it in a header. (using Ruby)</li>
</ul>

<p>Thank you people let me know.</p>
","<p>I answered your question more completely here, in the context of the Poloniex exchange:</p>

<p><a href=""https://stackoverflow.com/questions/33698237/ruby-http-post-parameters/33713589"">Ruby Http Post Parameters</a></p>

<p>To answer your specific questions from this post:</p>

<ol>
<li>How do I find my post request data?</li>
</ol>

<p>POST data simply means the body of your request. This could be JSON, plain text, form data, etc. In cases where a specific format (i.e. JSON) isn't mentioned, POST data <em>probably</em> refers to POST form data (<code>Content-Type: application/x-www-form-urlencoded</code>). This is how data submitted from a web form is formatted and indeed that appears to be what Poloniex is looking for. </p>

<p><code>x-www-form-urlencoded</code> data can be produced like this in Ruby:</p>

<pre><code>form_data = URI.encode_www_form({:command =&gt; 'returnBalances', :nonce =&gt; Time.now.to_i * 1000 })
puts form_data
</code></pre>

<blockquote>
  <p>command=returnBalances&amp;nonce=1447537613000</p>
</blockquote>

<p><a href=""https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/Forms/Sending_and_retrieving_form_data"" rel=""nofollow noreferrer"">Mozilla Developer's Network link on POST form data.</a></p>

<ol start=""2"">
<li>How do I use the HMAC-SHA512 method to encrypt this data so that I can send it in a header? (using Ruby)</li>
</ol>

<p>HMAC digest produces a unique string based on a secret key and the data provided. In Ruby, you can produce an HMAC digest like so: </p>

<pre><code>OpenSSL::HMAC.hexdigest( 'sha512', secret, form_data)
</code></pre>
","33713831","128","<ruby><api><post><hmac><postdata>","0","1","1","2015-11-14 21:53:56","33713831","0","","","","","2015-11-14 00:21:04","","2017-05-23 11:51:56","2015-11-14 21:53:56"
"49849943","Setup Webhook Receiver with signature verification - computed hash sometimes off by one character","<p>I'm trying to develop a webhook for the Xero API for when a Contact is updated.</p>

<p>I managed to get past the Intent to Receive validation (eventually) thanks to the <a href=""https://stackoverflow.com/questions/47286411/php-setup-webhook-receiver-with-signature-verification/47286696"">answers</a>. However it doesn't always work. Sometimes, for example, the Hash I compute using: </p>

<pre><code>$yourHash = base64_encode(hash_hmac('sha256', $payload, $webHookKey, true));
</code></pre>

<p>is off by one character - where the Web Hook Key, for example, might start with <code>mrj/yJ7pZKejaRrN61vAJB</code>, the computed hash will replace the / with a Y or some other character. </p>

<p>What simple stupid thing am I overlooking?</p>
","<p>During the setup process Xero sends several requests.  Some valid and some invalid.  The invalid ones require a <code>401</code> response header where the valid ones require a <code>200</code> response header. Are you sure that one is not one of the invalid ones?</p>
","50109836","128","<php><webhooks><hmac><xero-api>","1","1","1","2018-05-15 16:23:11","","0","0","397817","","2018-05-15 16:23:11","2018-04-16 05:05:30","","","2018-05-01 00:11:59"
"40083848","why coredump when i use curl and hmac together?","<p>when i use hmac and curl then the programe coredump. And the log run there </p>

<pre><code>""Oct 17 17:58:37 info [6382]: 6385 httpsPost before apped headers""
</code></pre>

<p>I got the infomation in gdb </p>

<pre><code>Program terminated with signal 11, Segmentation fault.
#0  0x0819a8e7 in EVP_MD_CTX_md ()
(gdb) where
#0  0x0819a8e7 in EVP_MD_CTX_md ()
Cannot access memory at address 0x4004
</code></pre>

<p>these information is no help to me,is anyone know about it?</p>

<p>but when I delete the code:</p>

<pre><code>HMAC_CTX ctx;
HMAC_CTX_init(&amp;ctx);
HMAC_Init_ex(&amp;ctx, AUTH_KEY, strlen(AUTH_KEY), EVP_sha256(), NULL);
HMAC_Update(&amp;ctx, (unsigned char*)&amp;szJsonData, strlen(szJsonData));
HMAC_Final(&amp;ctx, result, &amp;len);
HMAC_CTX_cleanup(&amp;ctx);
</code></pre>

<p>it run well,I don't know why</p>

<p>I got these information :</p>

<ul>
<li>successfully set certificate verify locations:</li>
<li><p>CAfile: none
CApath: /etc/ssl/certs</p>

<p>void postHttps(uint32_t uid,std::map&amp; headResult,std::map&amp; bodyResult)
{</p>

<pre><code>char szJsonData[1024];
memset(szJsonData, 0, sizeof(szJsonData));
std::ostringstream requetContent;
requetContent&lt;&lt;""{\""cmuid\"":\""""&lt;&lt;uid&lt;&lt;""\"",\""s\"":2}"";

strcpy(szJsonData, requetContent.str().c_str());

char bodyBuff[1024];
memset(bodyBuff, 0, sizeof(bodyBuff));

char headBuff[1024];
memset(headBuff, 0, sizeof(headBuff));
uint32_t start = sox::env::now;
uint32_t ssend = sox::env::now;


unsigned char* result;
char sign[1024] = {0};
unsigned int len = 256;
result = (unsigned char*)malloc(sizeof(char) * len);
log(Info,""postHttps accpet"");


HMAC_CTX ctx;
HMAC_CTX_init(&amp;ctx);
HMAC_Init_ex(&amp;ctx, AUTH_KEY, strlen(AUTH_KEY), EVP_sha256(), NULL);
HMAC_Update(&amp;ctx, (unsigned char*)&amp;szJsonData, strlen(szJsonData));
HMAC_Final(&amp;ctx, result, &amp;len);
HMAC_CTX_cleanup(&amp;ctx);

for (unsigned int i = 0; i != len; i++){
    int length = strlen(sign);
    char *s = sign;
    sprintf(s + length, ""%02x"", (unsigned int)result[i]);
}

free(result);

string auth_head = ""Authorization:"";
auth_head += UrlEncode(sign).c_str();

log(Info,""postHttps requetContent %s auth_head %s size %u len %u"", requetContent.str().c_str(),auth_head.c_str(),requetContent.str().size(),strlen(szJsonData));

try 
{
    CURL *pCurl = NULL;
    CURLcode res;

    pCurl = curl_easy_init();
    if (NULL != pCurl) 
    {
        curl_easy_setopt(pCurl, CURLOPT_TIMEOUT, 2);

        curl_easy_setopt(pCurl, CURLOPT_URL, ""https://www.xxxx.com/id"");
        curl_easy_setopt(pCurl, CURLOPT_POST, 1L);
        curl_easy_setopt(pCurl, CURLOPT_SSL_VERIFYPEER, false);
        curl_easy_setopt(pCurl, CURLOPT_SSL_VERIFYHOST, false);
        curl_easy_setopt(pCurl, CURLOPT_CONNECTTIMEOUT, 2);
        //curl_easy_setopt(pCurl, CURLOPT_VERBOSE, 1);
        //curl_easy_setopt(pCurl, CURLOPT_UPLOAD, 1);
        curl_easy_setopt(pCurl, CURLOPT_NOSIGNAL, 1);
        struct curl_slist *headers = NULL;

        log(Info,""httpsPost before apped headers"");

        headers = curl_slist_append(headers, auth_head.c_str());
        headers = curl_slist_append(headers, ""Accept: text/plain"");
        headers = curl_slist_append(headers, ""charset:utf-8"");
        headers = curl_slist_append(headers, ""Content-Type: application/json"");

        curl_easy_setopt(pCurl, CURLOPT_HTTPHEADER, headers);
        curl_easy_setopt(pCurl, CURLOPT_FORBID_REUSE, 1);
        curl_easy_setopt(pCurl, CURLOPT_WRITEFUNCTION, on_writebuff); 
        curl_easy_setopt(pCurl, CURLOPT_WRITEDATA, bodyBuff);
        curl_easy_setopt(pCurl, CURLOPT_HEADERFUNCTION, header_handler);    
        curl_easy_setopt(pCurl, CURLOPT_WRITEHEADER, headBuff);

        curl_easy_setopt(pCurl,CURLOPT_POSTFIELDS, requetContent.str().c_str());
        curl_easy_setopt(pCurl, CURLOPT_POSTFIELDSIZE,requetContent.str().size()); 

        int HTTP_flag = 0;
        curl_easy_getinfo(pCurl, CURLINFO_RESPONSE_CODE, &amp;HTTP_flag); 
        res = curl_easy_perform(pCurl);
        log(Info,""httpsPost after curl_easy_perform"");

        curl_slist_free_all(headers);
        curl_easy_cleanup(pCurl);


        if (res == CURLE_OK) 
        {
            std::string httpRes = headBuff;


            HttpParser::ParseResponseHead(httpRes,headResult);

            std::map&lt;std::string,std::string&gt;::iterator it = headResult.find(""HTTP"");
            if(it != headResult.end())
            {
                std::string&amp; value = it-&gt;second;
                if(value != ""200 OK"")
                {
                    log(Error,""postHttps HTTP %s"", value.c_str());
                }
                else 
                {

                    json_char* json = (json_char*)bodyBuff;
                    json_value* value = json_parse(json,strlen(bodyBuff));

                    process_value(value, 0,bodyResult);
                    json_value_free(value);

                    log(Info,""httpsPost headMap %d bodyMap %d"", headResult.size(),bodyResult.size());

                }
            }

        }
        else 
        {
            log(Info,""curl_easy_perform() failed:%s"", curl_easy_strerror(res));
        }



    }

}
catch (std::exception &amp;ex)
{
    log(Info,""curl exception %s"", ex.what());
}

log(Info,""httpPost uid %u elapse %u"", uid,ssend-start);
</code></pre>

<p>}</p></li>
</ul>
","<p>use ssl,you should init some thinds. like below</p>

<pre><code>void Callbackfee::init_locks(void)
{
    int i;

    if(m_lockarray == NULL)
    {
        m_lockarray = (pthread_mutex_t *)OPENSSL_malloc(CRYPTO_num_locks() *
                                                    sizeof(pthread_mutex_t));
    }
    if(m_lockarray != NULL)
    {
        for (i = 0; i &lt; CRYPTO_num_locks(); ++i) {
            pthread_mutex_init(&amp;(m_lockarray[i]), NULL);
        }
        CRYPTO_set_id_callback(&amp;thread_id);
        CRYPTO_set_locking_callback(&amp;lock_callback);
    }
}
</code></pre>
","40587271","126","<libcurl><hmac>","0","0","1","2016-11-14 11:07:14","","2","1","4029275","","2016-10-17 20:13:11","2016-10-17 10:21:16","","","2016-11-14 11:07:14"
"25879364","HMAC TimeStamping Tweak","<p>I have reviewed a lot of information regarding the HMAC approach to securing a RESTful Web API. To prevent a replay attack, the usual recommendation is to use a TimeStamp with a constraint.</p>

<p>But it seems to me that a more straightforward (and fool-proof) approach would be to require a unique time-stamp, where the server accepts a specific time-stamp only once per client, so all requests from a specific client must have a unique time-stamp. </p>

<p>Are there any weaknesses of this TImeStamping approach in comparison to the usual recommendation?</p>
","","","123","<security><hmac><timestamping><session-replay>","0","","0","2014-09-17 03:30:02","","4","","","","","2014-09-16 22:23:58","","",""
"54490405","HMAC output in PHP not matching with one in Java","<p>I'm trying to set up an API Connection which requires HMAC and encryption.
The documentation and sample output/code given to me is in Java but my website is in PHP. I'm on PHP 7.</p>

<p>What should I do so that my PHP output matches with that in Java sample output given in the API documentation?</p>

<p>I have tried to base64, utf8 and utf16 encoding on my PHP hmac output but still, the value is not matching.</p>

<p><strong>PHP code:</strong> </p>

<pre><code>$sb = '4a275929e0eba4445bc7f9a80c6361a2351119a27b51eebb2c259f68f72efd5f';
$keyToEncode = 'c0814229c201ab1022070741d15eda7af2189db64a2c88699c6481dbb83521afd8640d9af6d984602037d2e4f90c4f9a12915899290d944f385192b658829ec1;
$sb3 = hash_hmac('sha256',$sb, $keyToEncode);
</code></pre>

<p><strong>Java code</strong>: </p>

<pre><code>HMAC_SHA256(sb.toString(), keyToEncode);
</code></pre>

<p><strong>Output in PHP:</strong></p>

<pre><code>2bea1f99897a8fd2e836e9d8f7820a28c03b76bf37daf04527f6f5d279c97fd7
</code></pre>

<p><strong>Expected output in Java:</strong></p>

<pre><code>gWzlCNzu7fNN4z/uwvrgk574dTJqLQ8+25UMXCh+4tU=
</code></pre>
","<p>The following PHP-code reproduces the result from the Java-code:</p>

<pre><code>&lt;?php
$sb = 'c0814229c201ab1022070741d15eda7af2189db64a2c88699c6481dbb83521afd8640d9af6d984602037d2e4f90c4f9a12915899290d944f385192b658829ec1';
$keyToEncode = '4a275929e0eba4445bc7f9a80c6361a2351119a27b51eebb2c259f68f72efd5f';
$sb3 = hash_hmac('sha256',$sb, $keyToEncode); // HMAC-value as lowercase hexadecimal string
$sb4 = hex2bin($sb3);                         // HMAC-value as binary data  
$sb5 = base64_encode($sb4);                   // Base64-encoded HMAC-value 
print ""HMAC-value (hexadecimal string): "".$sb3.""\n"".""HMAC-value (Base64-encoded): "".$sb5; 
</code></pre>

<p>with the following output:</p>

<pre><code>HMAC-value (hexadecimal string): 816ce508dceeedf34de33feec2fae0939ef875326a2d0f3edb950c5c287ee2d5
HMAC-value (Base64-encoded): gWzlCNzu7fNN4z/uwvrgk574dTJqLQ8+25UMXCh+4tU=
</code></pre>

<p>Here <code>$sb5</code> is the Base64-encoded HMAC-value which correponds to the Java-code result.</p>

<p>There are two flaws in your code:</p>

<ol>
<li>The values for <code>$sb</code> and <code>$keyToEncode</code> were confused.</li>
<li>The PHP-method <code>hash_mac</code> has a fourth parameter <code>$raw_output</code> which is by default <code>FALSE</code>. When set to <code>FALSE</code> the result is returned as <em>lowercase hexadecimal string</em> otherwise as <em>binary data</em> (<a href=""http://php.net/manual/en/function.hash-hmac.php"" rel=""nofollow noreferrer"">http://php.net/manual/en/function.hash-hmac.php</a>). Since your PHP-code uses the default value of <code>$raw_output</code> (i.e. <code>FALSE</code>), the HMAC is returned as a hexadecimal string and must first be converted to binary data before it can be Base64-encoded. For the conversion the PHP-method <code>hex2bin</code> has to be used.</li>
</ol>

<p>Btw, you can also use the <code>$raw_output = TRUE</code> variant. Then, no conversion with <code>hex2bin</code> is necessary. However, if you want to display the HMAC as hexadecimal string the PHP-method <code>bin2hex</code> has to be used: </p>

<pre><code>&lt;?php
$sb = 'c0814229c201ab1022070741d15eda7af2189db64a2c88699c6481dbb83521afd8640d9af6d984602037d2e4f90c4f9a12915899290d944f385192b658829ec1';
$keyToEncode = '4a275929e0eba4445bc7f9a80c6361a2351119a27b51eebb2c259f68f72efd5f';
$sb3 = hash_hmac('sha256',$sb, $keyToEncode, TRUE); // HMAC-value as binary data
$sb4 = base64_encode($sb3);                         // Base64-encoded HMAC-value
print ""HMAC-value (hexadecimal string): "".bin2hex($sb3).""\n"".""HMAC-value (Base64-encoded): "".$sb4; 
</code></pre>

<p>with the same output as above.</p>

<p>Here <code>$sb4</code> is the Base64-encoded HMAC-value which correponds to the Java-code result.</p>
","54502076","123","<java><php><hmac>","-2","0","1","2019-02-03 10:49:33","","2","","472495","","2019-02-02 08:36:13","2019-02-02 05:54:32","","","2019-02-03 10:49:33"
"33816220","OAuth resource owner password flow and HMAC","<p>I have a web api application which implements the Resource Owner Password flow from OAuth specification. Everything works correctly.</p>

<p>Actually I configure everything in my WebApiConfig class by using an Authentication filter like this</p>

<pre><code>// Configure Web API to use only bearer token authentication.
config.SuppressDefaultHostAuthentication();
config.Filters.Add( new HostAuthenticationFilter( OAuthDefaults.AuthenticationType ) );
</code></pre>

<p>As some of my customer asked for a different method of authentication I am evaluating to add a couple of features to my services but stil did not have clear how those features can work together. </p>

<p>In particular I cam across a <a href=""http://bitoftech.net/2014/12/15/secure-asp-net-web-api-using-api-key-authentication-hmac-authentication/"" rel=""nofollow"">link</a> which explain in very easy words how to implement a HMAC authentication in web api.</p>

<p>Can I implement this authentication method and let the client to choose which one he want to use? Do they can cohesist together?</p>
","<p>Yes, your web api service can send back multiple schemes in the <code>WWW-Authenticate</code> challenge. In your case it can send back '<strong>bearer</strong>' and '<strong>hmac</strong>' for example.</p>

<p>See also <a href=""https://stackoverflow.com/q/10239970/18044"">this question</a> for more info on using multiple schemes.</p>

<p>BTW, it's not your web api service that supports Resource Owner Password flow. The client uses this flow to get a token from the authorization server that it can use in a bearer scheme with your service (resource server). HTH.</p>
","33833312","120","<authentication><asp.net-web-api><asp.net-web-api2><hmac>","1","1","1","2015-11-20 18:08:20","33833312","0","","","","","2015-11-19 23:23:17","","2017-05-23 12:30:19","2015-11-20 18:08:20"
"56063248","How to implement HMAC in python without using the hmac library?","<p>I want to implement the hmac algorithm with SHA-1 by the definition from RFC 2104. The code is running but the results aren't the same as the <a href=""https://tools.ietf.org/html/rfc2202"" rel=""nofollow noreferrer"">test-vectors from RFC</a>. I'm not sure if I'm loading the values correctly(String to Hex, or String to Bytes?). </p>

<p>As template I've used the pseudo-code from <a href=""https://en.wikipedia.org/wiki/HMAC"" rel=""nofollow noreferrer"">wikipedia</a></p>

<p>I'm not sure about the terms 'blocksize' and 'output size'. In the code from wikipedia the outputsize is one of the input values but never used.</p>

<p>This is my code so far:
First I'm setting up a hash-function, then I'm converting my input-strings (key and message) into hex values. Next step is to to look if key hast go get hashed or filled with zeros. Next I'm xor-ing the single chars from the key with those values (I don't know where they come from, but they're in every example without any comment). Last but not least I'm combining an inner string(I_key_pad + message) and hash it which results in an outer strings that im combining with the outer pad and hash it again.</p>

<pre class=""lang-py prettyprint-override""><code>    import hashlib
    from functools import reduce


    def hmac(key, message, hashfunc):
        hasher = hashlib.sha1
        blocksize = 40
        message = toHex(message) #is this right?
        key = toHex(key)
        #alternative: loading values as bytes
        #message = bytes(message, 'utf-8')
        #key = bytes(key, 'utf-8')
        if len(key) &gt; blocksize:
            key = hasher(key)
        else:
            #key = key.ljust(blocksize, '0') #filling from right to left
            #key = key.ljust(blocksize, b'\0') #same as above but for bytes
            key = pad(key, blocksize)  #filling from left to right

        val1 = 0x5c 
        val2 = 0x36 

        i = 0
        o_key_pad = """"
        i_key_pad = """"
        while i &lt; blocksize:
            o_key_pad += str(ord(key[i]) ^ val1)
            i_key_pad += str(ord(key[i]) ^ val2)

            i += 1

        tmp_string = str(i_key_pad) + str(message)
        tmp_string = tmp_string.encode()
        inner_hash = hasher(tmp_string).hexdigest()
        fullstring = str(o_key_pad) + inner_hash
        fullstring = fullstring.encode()
        fullstring = hasher(fullstring).hexdigest()
        print(fullstring)


    def pad(key, blocksize):
        key = str(key)
        while len(key) &lt; blocksize:
            key = '0' + key
        key = key
        return key


    def toHex(s):
        lst = []
        for ch in s:
            hv = hex(ord(ch)).replace('0x', '')
            if len(hv) == 1:
                hv = '0' + hv
            lst.append(hv)

        return reduce(lambda x, y: x + y, lst)



    def main():
        while (1):
            key = input(""key = "")
            message = input(""message = "")
            hash = input(""hash (0: SHA-256, 1: SHA-1) = "")
            hmac(key, message, hash)


    if __name__ == ""__main__"":
        main()
</code></pre>
","<p>I'm not understanding all the steps in your code, but here's a short example showing HMAC-SHA1 using only <code>hashlib.sha1</code>, with a helper function <code>xor</code>.</p>

<pre><code>import hashlib

def xor(x, y):
    return bytes(x[i] ^ y[i] for i in range(min(len(x), len(y))))

def hmac_sha1(key_K, data):
    if len(key_K) &gt; 64:
        raise ValueError('The key must be &lt;= 64 bytes in length')
    padded_K = key_K + b'\x00' * (64 - len(key_K))
    ipad = b'\x36' * 64
    opad = b'\x5c' * 64
    h_inner = hashlib.sha1(xor(padded_K, ipad))
    h_inner.update(data)
    h_outer = hashlib.sha1(xor(padded_K, opad))
    h_outer.update(h_inner.digest())
    return h_outer.digest()


def do_tests():
    # test 1
    k = b'\x0b' * 20
    data = b""Hi There""
    result = hmac_sha1(k, data)
    print(result.hex())
    # add tests as desired
</code></pre>
","56085727","118","<python><hash><hmac>","0","0","1","2019-05-10 22:53:57","56085727","5","","9798966","","2019-05-09 16:41:45","2019-05-09 15:49:40","","","2019-05-10 22:53:57"
"25122813","A small key-length PHP cipher","<p>I've been searching around like mad looking for a ciper that can take a secret word, whilst also providing a small character length, something between 30-45.</p>

<p>example string: ""The quick brown fox jumped over the lazy dog.""</p>

<p>Since this code will be sent via $_GET in url from and to and will also be receiving via url, I want it to be as short as possible between 30-45, with a salt so I can decode it on the other end.</p>

<p>I have scoured several ciphers such as these:
<a href=""http://php.net/manual/en/mcrypt.ciphers.php"" rel=""nofollow"">http://php.net/manual/en/mcrypt.ciphers.php</a></p>

<p>But so far either they either return huge 50+ characters, or have characters outside of [a-z][A-Z][0-9] such as padding '==' but couldn't find anything I'm looking for.</p>

<p>I found the following hashing algo, which has the short character length whilst also a secret code. But this method does not allow decoding, alternative being is to see if two keys match using this method</p>

<pre><code>&lt;?php
echo hash_hmac('ripemd160', 'The quick brown fox jumped over the lazy dog.', 'secret');
?&gt;
b8e7ae12510bdfb1812e463a7f086122cf37e4f7
</code></pre>

<p>Is there a ciper that can do both secret word and be encoded/decoded whilst providing a short character length?</p>
","","","111","<php><hash><decode><encode><hmac>","0","","0","2014-08-04 15:58:41","","9","","","","","2014-08-04 15:58:41","","",""
"25340129","Node.js hash_hmac platform differences (Mac vs Ubuntu)","<p>I was wondering what may affect differences in computing hash between Mac (x64) and Ubuntu (32 bit).
Let's start with beginning:</p>

<p>Hashes generated on Ubuntu:</p>

<pre><code>var string = ""123"";
// '123'
var hashKey = ""abc"";
// 'abc'
crypto.createHmac('sha512', hashKey).update(string).digest('hex')
// '1bb47a2e086bfab3a86e3843ffd665fead90f0ef46cf2894c56a194fb18158685e9fd364bde008d5f2cb04e649c7396adda38dc5617a9dd56ab981920ae13188'
crypto.createHmac('sha1', hashKey).update(string).digest('hex')
// 'be9106a650ede01f4a31fde2381d06f5fb73e612'
</code></pre>

<p>Hashes generated on MacOS:</p>

<pre><code>var string = ""123"";
// ""123""
var hashKey = ""abc"";
// ""abc""
crypto.createHmac('sha512', hashKey).update(string).digest('hex');
// ""290f6f3488e8f8a62bdd91fcf7a255158e5034822667819d83fd2e77ece9e3edf44899aaf23cb1faf33826cdcc2724ac8c37e279d7133b01ecf9ba4b54f529e4""
crypto.createHmac('sha1', hashKey).update(string).digest('hex');
// ""2d3aacdfbadf59cf8fb6b27bf576fcd783b8996c""
</code></pre>

<p>And as you can see hashing the same values gives us different results depending on platform :( And it doesn't depend on hash method (as in example)</p>

<p>One of suggestions I'd found was to take care of line endings, but... there are no line endings in my case (hashing passwords - Yeah! I know I should use bcrypt, but it's quite a big deal to migrate users now).</p>

<p>Any other ideas/suggestions?</p>
","","","110","<node.js><macos><ubuntu><hash><hmac>","3","","0","2014-08-17 04:04:02","","3","1","785065","","2014-08-17 04:04:02","2014-08-16 12:26:32","","",""
"52165522","How can Python be used to access the private API of Bitstamp using HMAC authentication?","<p>I would welcome guidance on terminology because I am new to this.</p>

<p>I'm trying to get details from Bitstamp using its private API. I've created the (Oauth2?) key and secret and am trying to sign and send things correctly to the API, but it is not working (and returning 400). I request guidance on what might be going wrong.</p>

<p>I am building on Python directions listed under ""API Authentication"" <a href=""https://www.bitstamp.net/api"" rel=""nofollow noreferrer"">here</a>.</p>

<pre><code>import hashlib
import hmac
import requests
import time

username          = ""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""
oauth2_key        = ""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""
oauth2_secret     = ""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""

nonce             = int(1000 * time.time())
msg               = str(nonce) + username + oauth2_key
signature         = hmac.new(oauth2_secret.encode(), msg=msg.encode(), digestmod=hashlib.sha256).hexdigest().upper()

data              = {}
data[""key""]       = oauth2_key
data[""signature""] = signature
data[""nonce""]     = nonce

headers = {
    ""Content-Type"": ""application/x-www-form-urlencoded"",
    ""Key""         : oauth2_key,
    ""Sign""        : signature
}

url = ""https://www.bitstamp.net/api/v2/balance""

session = requests.Session()
session.headers.update({""User-Agent"": ""script/""})
response = session.post(url, data = data, headers = headers)
</code></pre>
","","","109","<python><api><hmac>","1","","0","2018-09-04 11:41:39","","4","","","","","2018-09-04 11:41:39","","",""
"46772782","Uber webhook signature issue with nodeJs (hmac)","<p>I've some issues with NodeJS and an WebHook test in Uber Sandbox. I'm able to receive correcty POST response, but the security check (X-Uber-Signature) is always wrong..</p>

<pre><code>module.exports = {
  myWebService: function(req, res) {
    const hmac = crypto.createHmac('sha256','&lt;MYSECRET&gt;');
    var hash = hmac.update(JSON.stringify(req.body)).digest('hex');

    //Those values are always different..
    console.log(""Constructed hash : "" + hash +""\n"");
    console.log(""Received hash : "" + req.header('X-Uber-Signature') + ""\n"");
</code></pre>

<p>JSON.stringify(req.body) content :</p>

<pre><code>{""event_id"":""08db06df-559a-457a-ba92-3c8380bb7ec7"",""resource_href"":""https://sandbox-api.uber.com/v1/requests/8f5cc257-cfdf-4654-9acd-085aae740107"",""meta"":{""status"":""arriving"",""rider_id"":""8IMl8ulC-yJTqkbsq5g4HuyuYeRQ5b5aSsmLt2vpjl6H8Fk_JPz_5AZYj4ERi6M7MagmrJtPM7L_rAnHLgO0qLgGtpD8Lg32rnGTEUkWHAbPjDZIl0-X91PrrujPY_IYGA=="",""user_id"":""ecb2e871-b768-4f76-bfa9-8bc253bced0e"",""resource_id"":""8f5cc257-cfdf-4654-9acd-085aae740107""},""event_type"":""all_trips.status_changed"",""event_time"":1508163555}
</code></pre>

<p>I tried many (MANY) transforms on this string but nothing work, if anyone has an idea, it'll be greatly appreciated.. Thanks</p>
","<p>Please check Uber <a href=""https://developer.uber.com/docs/riders/guides/webhooks#events"" rel=""nofollow noreferrer"">documentation</a> for resolution of your question:</p>

<blockquote>
  <p>Due to a strict interpretation of the JSON specification by JavaScript, if there are backslashes sent in the POST body, they will be removed upon parsing. This prevents webhook receivers implemented in NodeJS from verifying the webhook signature accurately. We are working on removing all backslashes from the payload in order to avoid this situation and will remove this note when that work is done.</p>
</blockquote>

<p>Also, check this <a href=""https://developer.uber.com/docs/riders/guides/webhooks#reference"" rel=""nofollow noreferrer"">link</a>.</p>
","46777205","108","<node.js><sails.js><webhooks><hmac><uber-api>","1","1","1","2018-07-08 08:56:19","","0","","3111788","","2018-07-08 08:56:19","2017-10-16 14:32:08","","","2017-10-16 18:52:37"
"50692888","How to use Java encrypt Json by HmacSHA256","<p>I have such a Json :</p>

<pre><code>{
    ""idcardno"":""510525198803154232"",
    ""name"":""丁品""
}
</code></pre>

<p>If I use HmacSHA256 encrypt it with key </p>

<pre><code>252c04cdb0d047f8ab9a1eb49b1db1686e321104756ff792779a4d40d94f0dfd70a8b9ffa6d6d930e57d0e7206d26d13
</code></pre>

<p><strong>Then I should get such result:</strong></p>

<pre><code>cd1fe72697a832d57198b8c0d00289309dffe6f05750aa2a145f9359e41f1843
</code></pre>

<p>I need to encrypt this json object in java environemnt, so I use below java code to achieve this:</p>

<pre><code>import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;

import org.apache.commons.codec.binary.Base64;
import org.json.JSONObject;

public class EncryptUtil {

    // Charset to use when encrypting a string.
    private static final String UTF_8 = ""UTF-8"";
    // Encrypt key
    private static final String APP_SECRET = ""252c04cdb0d047f8ab9a1eb49b1db1686e321104756ff792779a4d40d94f0dfd70a8b9ffa6d6d930e57d0e7206d"";

    public static void main(String[] args) throws Exception {   
        //build json object
        JSONObject object = new JSONObject();
        object.put(""idcardno"", ""510525198803154232"");
        object.put(""name"", ""丁品"");

        String result = enCode(object.toString());
        //print encrpted result
        System.out.println(result);
    }

    public static String enCode(String orginalMsg) throws Exception {
        try {   
            Mac sha256_HMAC = Mac.getInstance(""HmacSHA256"");
            SecretKeySpec secret_key = new SecretKeySpec(APP_SECRET.getBytes(), ""HmacSHA256"");
            sha256_HMAC.init(secret_key);
            String hash = Base64.encodeBase64String(sha256_HMAC.doFinal(orginalMsg.getBytes(UTF_8)));
            return hash;
        }
        catch (Exception e){
            throw new Exception(e);
        }
    }
}
</code></pre>

<p><strong>But the encypted result is :</strong></p>

<pre><code>i2hF1WyxmS9MctkFLxBM2mgXeicraH9DhR9P9JySDFk=
</code></pre>

<p>How can get the correct result by Java code?</p>
","","","108","<java><json><hmac>","0","","0","2018-06-05 05:52:23","","3","","","","","2018-06-05 05:52:23","","",""
"50642090","Why my Android and objective-c code get different hmac-sha1 result?","<p>I am writing a function that take a key and url and generate a signature. I am using hmac-sha1. But I got different signatures between Android code and objective-c code:</p>

<p>Objective-C:</p>

<pre><code>- (NSString *)hmacsha1:(NSString *)url secretKey:(NSString *)secretKey
{
    const char *cKey  = [secretKey cStringUsingEncoding:NSUTF8StringEncoding];
    const char *cData = [url cStringUsingEncoding:NSUTF8StringEncoding];

    unsigned char cHMAC[CC_SHA1_DIGEST_LENGTH];

    CCHmac(kCCHmacAlgSHA1, cKey, strlen(cKey), cData, strlen(cData), cHMAC);

    NSData *HMAC = [[NSData alloc] initWithBytes:cHMAC
                                          length:sizeof(cHMAC)];

    NSString *hash = [HMAC base64EncodedStringWithOptions:0];


    return hash;
}
</code></pre>

<p>Android:</p>

<pre><code>public static String hmacsha1(String url, String secretKey) throws
        UnsupportedEncodingException, NoSuchAlgorithmException,
        InvalidKeyException
{
    secretKey = secretKey.replace('-', '+');
    secretKey = secretKey.replace('_', '/');

    byte[] key = Base64.decode(secretKey, Base64.DEFAULT);

    SecretKeySpec sha1Key = new SecretKeySpec(key, ""HmacSHA1"");

    Mac mac = Mac.getInstance(""HmacSHA1"");
    mac.init(sha1Key);

    byte[] sigBytes = mac.doFinal(url.getBytes());

    String signature = Base64.encodeToString(sigBytes, Base64.DEFAULT);

    // convert the signature to 'web safe' base 64
    signature = signature.replace('+', '-');
    signature = signature.replace('/', '_');

    return signature;
}
</code></pre>
","<p>The method that worked for me to generate <strong>hmac-sha1</strong> string exactly same as the android string   </p>

<pre><code>- (NSData *)hmacForKeyAndData:(NSString *)key data:(NSString *)url
    {
        const char *cKey  = [key cStringUsingEncoding:NSASCIIStringEncoding];
        const char *cData = [url cStringUsingEncoding:NSASCIIStringEncoding];
        unsigned char cHMAC[CC_SHA1_DIGEST_LENGTH];
        CCHmac(kCCHmacAlgSHA1, cKey, strlen(cKey), cData, strlen(cData), cHMAC);
        return [[NSData alloc] initWithBytes:cHMAC length:sizeof(cHMAC)];
    }
</code></pre>
","53426983","107","<android><objective-c><base64><sha1><hmac>","0","1","1","2018-11-22 08:48:40","","2","","1033581","","2018-06-02 13:51:46","2018-06-01 11:08:37","","","2018-11-22 08:48:40"
"26902180","Getting BadClaimsSupplied from mechanical turk AWS -- meteor","<p>I am trying to create a Hit on Amazon mechanical turk.  I am currently using Meteor, so I don't have an SDK (that I know of) that I can use.</p>

<p>In order to create the hit, I am using the following code:</p>

<pre><code>Mturk.createHit = function(jobAttributes) {

    var operation = ""CreateHIT"";
    var service = ""AWSMechanicalTurkRequester"";
    var timestamp = moment().toISOString();
    var encoded = CryptoJS.HmacSHA256(service + operation + timestamp, process.env.SECRET_ACCESS_KEY).toString();

    var hitResponse = Meteor.http.get(
        ""https://mechanicalturk.sandbox.amazonaws.com"",
        {
            params: {
                Service: service,
                AWSAccessKeyId: process.env.ACCESS_KEY_ID,
                Version: ""2013-11-15"",
                Operation: operation,
                Signature: encoded,
                Timestamp: timestamp,
                Title: 'Survey',
                Description: 'Survey Description',
                Reward: {
                    Amount: 5,
                    CurrencyCode: 'USD'
                }
            }
        }
    );

    console.log(hitResponse);
}
</code></pre>

<p>Every time I submit this, I get the following error:</p>

<blockquote>
  <p>AWS.BadClaimsSupplied The specified claims are invalid.   Based on
  your request, your signature should be generated using the following
  string: AWSMechanicalTurkRequesterCreateHITs2014-11-13T05:41:31.357Z. 
  Check to make sure your system clock and timezone is not incorrect. 
  Our current system time: 2014-11-13T05:41:31Z.</p>
</blockquote>

<p>I think that the error is coming from improperly creating my signature, but I am not sure exactly how to proceed. I have tried using base64 encoding, but that hasn't worked for me either.  Any ideas?</p>
","","","105","<javascript><amazon-web-services><meteor><hmac><mechanicalturk>","0","","0","2014-11-13 05:48:55","","3","","","","","2014-11-13 05:48:55","","",""
"51606276","hmac in python not matching hmac in PHP and node","<p>I create an HMAC in Node like below:</p>

<pre><code>const check = crypto.createHmac(""sha1"", ""mysecret"");
check.update(JSON.stringify(""mybody""));
const digest = check.digest(""hex"");
</code></pre>

<p>Then I create the HMAC in PHP:</p>

<pre><code>hash_hmac(""sha1"",""mybody"",""mysecret"")
</code></pre>

<p>Then I create the HMAC in Python 3</p>

<pre><code>key = bytes(""mysecret"", 'utf-8')
message = bytes(""mybody"", 'utf-8')
digester = hmac.new(key, message, hashlib.sha1).hexdigest():
</code></pre>

<p>Then HMAC from Node and PHP match, no issues. But the HMAC from Python is always different and I cant figure out why. </p>

<p>Any help will be appreciated.</p>
","","","105","<php><python><hmac><sha>","0","","0","2018-07-31 05:56:41","","3","","","","","2018-07-31 05:56:41","","",""
"51203549","AWS Signature Creation. Confused on how to covert the SigningKey and SingingString into Signature. AWS Example Seems To Not Yield Expected Result","<p>I'm trying to write my own AWS4 signer, and I've gotten about 2/3 of the way there. Source code here :  </p>

<pre><code>public class Test
{
    private static String region = ""us-east-1"";
    static byte[] HmacSHA256(String data, byte[] key) throws Exception {
        String algorithm=""HmacSHA256"";
        Mac mac = Mac.getInstance(algorithm);
        mac.init(new SecretKeySpec(key, algorithm));
        return mac.doFinal(data.getBytes(""UTF8""));
    }

public static byte[] justSha256(String data) throws NoSuchAlgorithmException, UnsupportedEncodingException {
    MessageDigest digest = MessageDigest.getInstance(""SHA-256"");
    byte[] hash = digest.digest(data.getBytes(""UTF8""));
    return hash;
}

static byte[] getSigningKey(String key, String dateStamp, String regionName, String serviceName) throws Exception {
    byte[] kSecret = (""AWS4"" + key).getBytes(""UTF8"");


    byte[] kDate = HmacSHA256(dateStamp, kSecret);

    byte[] kRegion = HmacSHA256(regionName, kDate);

    byte[] kService = HmacSHA256(serviceName, kRegion);

    byte[] kSigning = HmacSHA256(""aws4_request"", kService);

    return kSigning;
}



public static String getSimpleDate()
{
    DateTimeFormatter formatter = DateTimeFormatter.ofPattern(""YYYYMMdd"");


    return LocalDate.now().format(formatter);
}

public static String getAMZDate()
{
/*DateTimeFormatter formatter = DateTimeFormatter.ofPattern(""YYYYMMDDHHMMSS"");
String timeStamp = new SimpleDateFormat(""YYMMDD'T'HHMMSS'Z'"").format(Calendar.getInstance().getTime());*/


    TimeZone tz = TimeZone.getTimeZone(""UTC"");
    DateFormat df = new SimpleDateFormat(""yyyyMMdd'T'HHmmss'Z'""); // Quoted ""Z"" to indicate UTC, no timezone offset
    df.setTimeZone(tz);
    String timeStamp = df.format(new Date());


    return timeStamp;
}



public static String createSigningString(String timeStamp, String simpleDate,String serviceName) throws UnsupportedEncodingException, NoSuchAlgorithmException {

  /*AWS4-HMAC-SHA256
  20150830T123600Z
  20150830/us-east-1/iam/aws4_request
  f536975d06c0309214f805bb90ccff089219ecd68b2577efef23edd43b7e1a59*/

    String algorithm = ""AWS4-HMAC-SHA256\n"";
    String amzDate = timeStamp+""\n"";
    String simpleDateRegionServiceRequest = simpleDate+""/""+region+""/""+serviceName+""/""+""aws4_request\n"";

    String canonicalHash = getCanonicalHash(getCanonicalString(""GET"",""/"",""Action=ListUsers&amp;Version=2010-05-08"",""20150830T123600Z"",""""));

    String signingString = algorithm+amzDate+simpleDateRegionServiceRequest+canonicalHash;



    return signingString;

}

public static String getCanonicalString(String method, String absolutePath, String queryString, String timeStamp, String payload) throws UnsupportedEncodingException, NoSuchAlgorithmException {

    String contentType = ""Content-Type:application/x-www-form-urlencoded; charset=utf-8\n"".toLowerCase();
    String hostUrl = ""host:iam.amazonaws.com\n"";
    String date = ""x-amz-date:""+timeStamp+""\n"";

    String signedHeader = ""content-type;host;x-amz-date\n"";

    String hashedPayload = Hex.encodeHexString(justSha256(payload)).toLowerCase();



    String canonicalString = method+""\n""+absolutePath+""\n""+queryString+""\n""+contentType+hostUrl+date+""\n""+signedHeader+hashedPayload;




    return canonicalString;
}


public static String getCanonicalHash(String canonicalString) throws UnsupportedEncodingException, NoSuchAlgorithmException {
    return Hex.encodeHexString(justSha256(canonicalString)).toLowerCase();
}




public static void main(String[] args) throws Exception {


    DateTimeFormatter formatter = DateTimeFormatter.ofPattern(""YYYYMMDDHHMMSS"");
    String timeStamp = new SimpleDateFormat(""YYYYMMDD'T'HHMMSS'Z'"").format(Calendar.getInstance().getTime());


    String canonString;
    System.out.println( canonString = getCanonicalHash(getCanonicalString(""GET"",""/"",""Action=ListUsers&amp;Version=2010-05-08"",""20150830T123600Z"","""")));

    String signingString = createSigningString(""20150830T123600Z"",""20150830"",""iam"");

    String key = ""wJalrXUtnFEMI/K7MDENG+bPxRfiCYEXAMPLEKEY"";
    String dateStamp = ""20120215"";
    String regionName = ""us-east-1"";
    String serviceName = ""iam"";

    String signingKey = Hex.encodeHexString(getSigningKey(key,dateStamp,regionName,serviceName));

    SoftAssertions softly = new SoftAssertions();

    softly.assertThat(canonString).isEqualToIgnoringCase(""f536975d06c0309214f805bb90ccff089219ecd68b2577efef23edd43b7e1a59"");
    String copiedSigningString = ""AWS4-HMAC-SHA256\n"" +
            ""20150830T123600Z\n"" +
            ""20150830/us-east-1/iam/aws4_request\n"" +
            ""f536975d06c0309214f805bb90ccff089219ecd68b2577efef23edd43b7e1a59"";



    softly.assertThat(signingString).isEqualTo(copiedSigningString);



    softly.assertThat(signingKey).isEqualToIgnoringCase(""f4780e2d9f65fa895f9c67b32ce1baf0b0d8a43505a000a1a9e090d414db404d"");

    dateStamp =""20150830"";

    signingKey = Hex.encodeHexString(getSigningKey(key,dateStamp,regionName,serviceName));

    softly.assertThat(signingKey).isEqualToIgnoringCase(""c4afb1cc5771d871763a393e44b703571b55cc28424d1a5e86da6ed3c154a4b9"");


    System.out.println(""COPIED STRING : ""+copiedSigningString);

    System.out.println(""SIGNING KEY : ""+signingKey);
    String signature = Hex.encodeHexString(HmacSHA256(signingKey.trim(),justSha256(copiedSigningString)));

    System.out.println(""Signature : ""+signature);

    softly.assertThat(signature).isEqualToIgnoringCase(""5d672d79c15b13162d9279b0855cfba6789a8edb4c82c400e06b5924a6f2b5d7"");

    softly.assertAll();

}
</code></pre>

<p>}</p>

<p>For some reason I'm failing to create the correct Signature. Which is created by using the SigningKey and SingingString as input into an HMACSha256 function, specifically the function highlighted on this page <a href=""https://docs.aws.amazon.com/general/latest/gr/signature-v4-examples.html#signature-v4-examples-java"" rel=""nofollow noreferrer"">https://docs.aws.amazon.com/general/latest/gr/signature-v4-examples.html#signature-v4-examples-java</a>.</p>

<p>But for some reason, I cannot produce the signature that AWS says will be created here on this page.: <a href=""https://docs.aws.amazon.com/general/latest/gr/sigv4-calculate-signature.html"" rel=""nofollow noreferrer"">https://docs.aws.amazon.com/general/latest/gr/sigv4-calculate-signature.html</a>
(5d672d79c15b13162d9279b0855cfba6789a8edb4c82c400e06b5924a6f2b5d7)</p>

<p>Despite using their function, their Strings as input, and double checking my work. What am I missing?</p>

<p>Are you supposed to use a different function for these Strings or byte[]?</p>

<p>I feel like I'm missing something, and I don't know where to reconcle this confusion because from my code and what I see on these pages I seem to be doing the right thing.</p>

<p>I'm especially confused because when I pasted the String from their site into my code to see if it would convert properly it did not, despite using their same Hmac function (which did work for creating every other hash string posted on their site).</p>
","<p>The hex representation of the date, region, service, and signing keys is shown for illustration, because the keys contain bytes that do not represent printable characters.</p>

<p>But you appear to be hex-encoding your signing key before using it to sign the request.  Don't do that.  You will want to hex-encode it only for viewing/debugging.  The actual signing key should be retained and used in its original binary/byte form.</p>

<blockquote>
  <p>Use the digest (binary format) for the key derivation. Most languages have functions to compute either a binary format hash, commonly called a digest, or a hex-encoded hash, called a hexdigest. The key derivation requires that you use a binary-formatted digest.</p>
  
  <p><a href=""https://docs.aws.amazon.com/general/latest/gr/sigv4-calculate-signature.html"" rel=""nofollow noreferrer"">https://docs.aws.amazon.com/general/latest/gr/sigv4-calculate-signature.html</a></p>
</blockquote>

<p>The canonical request hash in the string-to-sign is used in hex-encoded form, as is the final signature.  The key derivation is all binary.</p>
","51209271","104","<amazon-web-services><signature><hmac><signing>","0","0","1","2018-07-06 11:19:26","","0","","","","","2018-07-06 05:29:43","","","2018-07-06 11:19:26"
"47622925","OAuth 1.0a digest values don't match RFC 5849","

<p>Hi, Yet another OAuth question.</p>

<p>I'm working on a Delphi OAuth library. I have OAuth2 all done and dusted, but am having a couple of little issues with OAuth1.0a, and generating an HMAC.</p>

<p>Specifically:
I have tested that my code generates a correct signature base string, as per the test case in RFC5849 <a href=""https://tools.ietf.org/html/rfc5849#section-3.4.1"" rel=""nofollow noreferrer"">https://tools.ietf.org/html/rfc5849#section-3.4.1</a></p>

<p>I have tested that my implementation of SHA1 and SHA-1HMAC passes all the following tests:</p>

<pre><code>Test: FIPS 180-2 C.1 and RFC3174 7.3 TEST1
Test: FIPS 180-2 C.2 and RFC3174 7.3 TEST2
Test: RFC3174 7.3 TEST4
Test: FIPS 198a A.1
Test: FIPS 198a A.2
Test: FIPS 198a A.3
Test: FIPS 198a A.4
</code></pre>

<p>I have checked that my HMAC generates the correct values in(!) Wikipedia:</p>

<pre><code>HMAC_SHA1("""", """")   = fbdb1d1b18aa6c08324b7d64b71fb76370690e1d
HMAC_SHA1(""key"", ""The quick brown fox jumps over the lazy dog"")   = de7c9b85b8b78aa6bc8a7a36f70a90701c9db4d9
</code></pre>

<p>So, now I need to generate the digest, which should just be a base 64 encode. My base64 encoding seems OK:</p>

<pre><code> '' =&gt; ''
 'f' =&gt; 'Zg=='
 'fo' =&gt; 'Zm8='
 'foo' =&gt; 'Zm9v'
 'foob' =&gt; 'Zm9vYg=='
 'fooba' =&gt; 'Zm9vYmE='
 'foobar' =&gt; 'Zm9vYmFy'
</code></pre>

<p>So, I then put it all together, and attempt to generate an HMAC-SHA1:</p>



<pre><code>function OAuth1TestHMACSHA1Digest: boolean;
var
  Mac: TMCHHMACSha1;
  KeyString, MsgString: string;
  KeyBytes, MsgBytes,ResBytes: TIdBytes;
  ResDigest: string;
begin
  result := true;

  Mac := TMCHHMACSha1.Create;
  try
    KeyString := 'kd94hf93k423kf44&amp;pfkkdhi9sl3r4s00';
    MsgString := 'text';
    result := result and UTF8StringToIdBytes(KeyString, KeyBytes);
    Mac.Key := KeyBytes;
    ResDigest := OAuth1MacSignRequest(Mac, MsgString);
    result := result and
      (CompareText(ResDigest, 'tR3+Ty81lMeYAr/Fid0kMTYa/WM=') = 0);
  finally
    Mac.Free;
  end;

end;
</code></pre>



<p>I expect:
tR3+Ty81lMeYAr/Fid0kMTYa/WM=</p>



<p>I get:
maMaOIlbzKZpsBGKnKjjsjDthPk=</p>

<p>which is the MIME64 encode of:</p>

<p>(153, 163, 26, 56, 137, 91, 204, 166, 105, 176, 17, 138, 156, 168, 227, 178, 48, 237, 132, 249)
($99, $A3, $1A, $38, $89, $5B, $CC, $A6, $69, $B0, $11, $8A, $9C, $A8, $E3, $B2, $30, $ED, $84, $F9)</p>

<p>Clearly - I have forgotten something obvious. What might that be?</p>
","","","104","<delphi><oauth><sha1><hmac>","0","","0","2017-12-03 20:24:40","","3","","","","","2017-12-03 20:24:40","","",""
"53324308","Different HMAC result for JAVA and iOS","<p>I'm trying to generate HMAC based on string value and key</p>

<pre><code>public static byte[] hmacSha1(String value, String key) throws NoSuchAlgorithmException, InvalidKeyException {

    // some values hardcoded for simplicity of this code sample
    key = ""GET\\n?nodeList\\nThu, 10 Jul 2014 13:35:32 GMT\\nda39a3ee5e6b4b0d3255bfef95601890afd80709\\n"";;
    value = ""6020834c535670ab1da86f7697241cb43ab6fb90"";
    final String type = ""HmacSHA1"";
    final String charset = ""ASCII"";

    byte[] keyBytes = new byte[0];
    try {
        keyBytes = key.getBytes(charset);
    } catch (UnsupportedEncodingException e) {
        e.printStackTrace();
    }

    SecretKeySpec secret = new SecretKeySpec(keyBytes, type);
    Mac mac = Mac.getInstance(type);
    mac.init(secret);

    byte[] bytes = new byte[0];
    try {
        bytes = mac.doFinal(value.getBytes(charset));
    } catch (UnsupportedEncodingException e) {
        e.printStackTrace();
    }

    Log.d(TAG, ""bytes to hex: "" + bytesToHex(bytes));
    // result Android:  512B5CE2EA1CD71FF34C9DDB693F59288EF71B42
    // iOS: 96f852a08d3ee255b77364a6bbd106be0dc0e44e

    return bytes;
}
</code></pre>

<p>And Android result (hex value) doesn't match the one that has iOS app (using same string value and key).</p>

<pre><code>(NSString *)HMAC_SHA1WithKeyData:(NSData* )key
{
const char * cData = [self cStringUsingEncoding:NSASCIIStringEncoding];

unsigned char cHMAC[CC_SHA1_DIGEST_LENGTH];

CCHmac(kCCHmacAlgSHA1, [key bytes], [key length], cData, strlen(cData), cHMAC);

NSData *HMAC = [[NSData alloc] initWithBytes:cHMAC
                                      length:sizeof(cHMAC)];

const unsigned char * buffer = (const unsigned char *)[HMAC bytes];
NSMutableString *HMACString = [NSMutableString stringWithCapacity:HMAC.length* 2];
for (int i = 0; i &lt; HMAC.length; i++) {
    [HMACString appendFormat:@“%02x”, buffer[i]];
}

return HMACString;
}
</code></pre>

<p>Android HMAC (hex): 512B5CE2EA1CD71FF34C9DDB693F59288EF71B42</p>

<p>iOS HMAC:  96f852a08d3ee255b77364a6bbd106be0dc0e44e</p>

<p>Can someone clarify please how can i get the same HMAC as iOS does (cause it matches the back-end result).</p>
","","","103","<java><android><ios><hmac><sha>","1","","0","2018-11-15 17:04:14","","1","2","1784011","","2018-11-15 17:04:14","2018-11-15 16:52:21","","",""
"46836802","Replicating php hmac sha 256 signing in javascript","<p>I'm trying to replicate this in javascript.</p>

<pre><code>$signature = hash_hmac('sha256', base64_encode(json_encode($commands)), $api_secret);
</code></pre>

<p>This is to connect to an external api.
In php, the signature generated works fine and gets authenticated.
However, in javascript, i get an invalid signature error from the external api.
This is the code i used for generating it in javascript</p>

<pre><code>var hash = CryptoJS.HmacSHA256(CryptoJS.enc.Base64.stringify(CryptoJS.enc.Utf8.parse(JSON.stringify(data))), api_secret).toString()
</code></pre>

<p>Please note that both of these examples were taken from the API documentation themselves, i'm asking here because i tried to look up other examples but there weren't any, and there aren't any issues reported on this on the git of the api.</p>
","","","103","<javascript><php><sha256><hmac>","0","","0","2017-10-19 18:44:59","","2","","","","","2017-10-19 18:44:59","","",""
"52845759","Problems with header fields in django rest framework HMAC module?","<p>So I've been trying to utilize the djangorestframework-hmac module (<a href=""https://github.com/aaronlelevier/django-rest-framework-hmac"" rel=""nofollow noreferrer"">https://github.com/aaronlelevier/django-rest-framework-hmac</a>) to secure a REST API with HMAC.  But I'm running into what would seem to be a fundamental problem with it: as with most HMAC schemes, the client needs to put the message signature in a header field named 'Signature', but the problem is that header field names get translated by Django ('Signature' becomes 'HTTP_SIGNATURE').<br>
But I can see in the code for django-restframework-hmac that the server is looking for a header field called 'Signature'. Now the module comes with an example, which works, but in the example, the client is running Django, which I believe may somehow be skirting around the header-field translation problem.  But what if the client is <em>not</em> using django?  How could the client possibly get his header fields seen by the server?  Is there something I'm missing here about the way django uses header field names?</p>

<p>Just to be explicit, here is the kind of request I'm making to test the client side:</p>

<pre><code>headers = {'Key': api_key, 'Signature': sig, 'Timestamp': t}
DJANGO_URL = '127.0.0.1:8000/testrest/'
r = requests.get(DJANGO_URL, headers=headers)
</code></pre>

<p>But on the django server side, if I print out the request.META dictionary, the key corresponding to each of my header fields is altered ('Signature'->'HTTP_SIGNATURE', etc).  Yet the django HMAC code is looking for a field named 'Signature' in the request.META.  This behavior is even there in the <a href=""https://docs.djangoproject.com/en/2.1/ref/request-response/#django.http.HttpRequest.META"" rel=""nofollow noreferrer"" title=""Django doc"">Django doc</a>.</p>

<p>I'm just wondering if this is a bug in the django hmac library, or if I'm not sending my request properly or something.</p>
","<p>It looks like a bug in djangorestframework-hmac
Someone created identical issue on github</p>

<p><a href=""https://github.com/aaronlelevier/django-rest-framework-hmac/issues/4"" rel=""nofollow noreferrer"">https://github.com/aaronlelevier/django-rest-framework-hmac/issues/4</a></p>

<p>And I noticed that tests in this lib use mocked requests so header is never rewritten by django and the bug was unnoticed </p>

<p><a href=""https://github.com/aaronlelevier/django-rest-framework-hmac/blob/master/tests/test_authentication.py"" rel=""nofollow noreferrer"">https://github.com/aaronlelevier/django-rest-framework-hmac/blob/master/tests/test_authentication.py</a></p>
","52879781","103","<django><django-rest-framework><hmac>","1","0","1","2018-10-18 17:47:06","","2","","4104051","","2018-10-18 16:54:27","2018-10-17 00:37:36","","","2018-10-18 17:47:06"
"53208183","InvalidKeyException from Mac.init() when used with empty key on IBM J9","<p>I am trying to initialize a Mac instance using an empty key.  But it is failing with ""InvalidKeyException"". 
Following is the snippet of code working with Oracle Java, but giving exception with IBM J9. . Can someone please help me in resolving the problem?</p>

<p>import java.security.InvalidKeyException;
 import java.security.NoSuchAlgorithmException;</p>

<p>import javax.crypto.Mac;
 import javax.crypto.spec.SecretKeySpec;</p>

<p>public class TestHM {</p>

<pre><code> public static void main(String[] args) throws NoSuchAlgorithmException, InvalidKeyException {

     String alg = ""HmacSHA256"";

     Mac m = Mac.getInstance(alg);

     SecretKeySpec secretKey = new SecretKeySpec(new byte[] {0}, 1, 0, alg);

     m.init(secretKey);

     System.out.println(""End"");
 }
</code></pre>

<p>}
Current output: Exception in thread ""main"" java.security.InvalidKeyException: Missing key data at com.ibm.crypto.provider.HmacSHA256.engineInit(Unknown Source) at javax.crypto.Mac.a(Unknown Source) at javax.crypto.Mac.init(Unknown Source) at TestHM.main(TestHM.java:18)</p>

<p>Java Version: java -version java version ""1.8.0"" Java(TM) SE Runtime Environment (build pap6480sr3fp10-20160720_02(SR3fp10)) IBM J9 VM (build 2.8, JRE 1.8.0 AIX ppc64-64 Compressed References 20160719_312156 (JIT enabled, AOT enabled) J9VM - R28_Java8_SR3_20160719_1144_B312156 JIT - tr.r14.java_20160629_120284.01 GC - R28_Java8_SR3_20160719_1144_B312156_CMPRSS J9CL - 20160719_312156) JCL - 20160719_01 based on Oracle jdk8u101-b13</p>
","","","103","<hmac><j9>","2","","0","2018-11-08 12:54:51","","3","","","","","2018-11-08 12:54:51","","",""
"51380117","Hmac Authentication in Browsers","<p>I am building a rest api and i want to secure my apis and wanted to use HMAC authentication.</p>

<p>My doubt is, should Hmac authentication be used only for integration with third party api's or can they securely be used in the browser also.</p>

<p>If yes,
how to securely share api secret from server to browser.
Is it safe to directly send this secret over HTTPS?</p>

<p>It would be great if someone who has experience with hmac authentication in browsers can tell some flow and advantages/disdvantages of this approach.</p>

<p>Thanks</p>
","","","102","<rest><security><hmac>","0","","0","2018-07-17 11:31:09","","3","","7338444","","2018-07-17 11:31:09","2018-07-17 11:20:41","","",""
"10849994","SSL Heade HMAC calculation","<p>I am working on a coding few packets. For the packets I need to generate HMAC. Now I am actually trying to design it for security purpose and closely following the OpenSSL format fo packets.</p>

<p>How to generate HMAC for packets?
How to get the key? HOw does openssl get a key for it?</p>

<p>I hope you understand that the key must be available for both client and server.</p>

<p>My code is in c++</p>
","","","102","<c++><security><ssl><openssl><hmac>","0","","0","2012-06-01 12:09:12","","2","","","","","2012-06-01 12:09:12","","",""
"47951645","Hash data via HmacSHA512 returns error when call external API","<p>I am trying to use this <code>API</code> <a href=""https://github.com/bitmarket-net/api"" rel=""nofollow noreferrer"">bitmarket</a></p>

<p>First I would like to call basic method <code>info</code> that's why in <code>postman</code> I added to headers to fields:</p>

<ul>
<li><code>API-Key</code> -> my api key </li>
<li><code>API-Hash</code> -> my hash which is generated below) via <code>HMAC SHA512</code> signature.</li>
</ul>

<p>How I generate <code>API-Hash</code>?
I have written in <code>Java</code> simple method which looks like:</p>

<pre><code>  public String encodeDataViaHMAC(String msg, String keyString, String algo) {
        String digest = null;
        try {
            SecretKeySpec key = new SecretKeySpec((keyString).getBytes(""UTF-8""), algo);
            Mac mac = Mac.getInstance(algo);
            mac.init(key);

            byte[] bytes = mac.doFinal(msg.getBytes(""ASCII""));

            StringBuffer hash = new StringBuffer();
            for (int i = 0; i &lt; bytes.length; i++) {
                String hex = Integer.toHexString(0xFF &amp; bytes[i]);
                if (hex.length() == 1) {
                    hash.append('0');
                }
                hash.append(hex);
            }
            digest = hash.toString();
        } catch (UnsupportedEncodingException e) {
        } catch (InvalidKeyException e) {
        } catch (NoSuchAlgorithmException e) {
        }
        return digest;
    }
</code></pre>

<p>and then I pass to it parameters:</p>

<ul>
<li>map of request parameters:  </li>
</ul>

<p><code>Map&lt;String, Object&gt; m = new LinkedHashMap&lt;&gt;();
    m.put(""method"", ""info"");
    m.put(""tonce"", System.currentTimeMillis());</code></p>

<ul>
<li>private key</li>
<li>method name which is <code>HmacSHA512</code></li>
</ul>

<p>and after that I still get it <code>postman</code> error: </p>

<pre><code>{""error"":502,""errorMsg"":""Invalid message hash"",""time"":1514023708}
</code></pre>

<p>Does anyone can help what am I doing wrong and can help me to fix it?</p>
","","","101","<java><api><http><hash><hmac>","1","","0","2017-12-23 10:19:34","","3","","","","","2017-12-23 10:19:34","","",""
"53029229","hmac returning different hexdigest values to openssl","<p>For example when I run this command in my terminal:</p>

<pre><code>echo -n 'something' | openssl dgst -sha256 -hmac  'NhqPtmdS'
</code></pre>

<p>This is returned:</p>

<pre><code>caa686a03a502a0da2985dfea0b0b5798657fc30c2fd917db527d29ea5b23579
</code></pre>

<p>I'm trying to do this in Python, but I don't know why is returning something different.</p>

<p>This is my code:</p>

<pre><code>import base64
from hashlib import sha256
import hmac
key = base64.b64decode('NhqPtmdS')
jsonBytes = bytes('something', ""ascii"")
hmac_result = hmac.new(key, jsonBytes, sha256).hexdigest()
print(hmac_result)
</code></pre>

<p>But I'm getting the next result:</p>

<pre><code>6a964bd560a9dc763864ddf337d64e5f2ef958e6937ad296084166da0db83eb9
</code></pre>

<p>Also I tried this:</p>

<pre><code>hmac_result = hmac.new(key, jsonBytes, sha256)
base64.b64encode(hmac_result.digest()).decode()
</code></pre>

<p>But it's not working either.</p>

<p>Any advice will be appreciated.</p>
","","","100","<python><hmac>","0","","0","2018-10-28 11:20:09","","3","","7414759","","2018-10-28 11:20:09","2018-10-28 07:17:42","","",""
"50648605","Swift - HMAC SHA512 - Invalid Signature","<p>im trying to work with the Bittrex API (found <a href=""https://bittrex.com/home/api"" rel=""nofollow noreferrer"">here</a>)</p>

<p>However i always get the response:</p>

<pre><code>SUCCESS: {
    message = ""INVALID_SIGNATURE"";
    result = ""&lt;null&gt;"";
    success = 0;
}
</code></pre>

<p>This is what my code looks like:</p>

<pre><code>//NONCE
let timeInterval = NSDate().timeIntervalSince1970
let nonceTime = String(Int(floor(timeInterval)))
//STANDARDS
let paras:Parameters = [""apikey"": key, ""nonce"": nonceTime]
let uri = ""https://bittrex.com/api/v1.1/account/getbalances?apikey=\(key)&amp;nonce=\(nonceTime)""
//SIGN
let secretKey = HMAC(algorithm: .sha512, key: uri).update(string: secret)!.final()
let skey = String(""\(secretKey)"")
//HEADER
let headers:HTTPHeaders = [""apisign"": ""\(skey)""]
let getMethod:HTTPMethod = .get

Alamofire.request(uri, method: getMethod, parameters: paras, encoding: JSONEncoding.default, headers: headers).responseJSON { (response) in
    print(""\(response)"")
}
</code></pre>

<p>Does someone know what i am doing wrong?
For the HMAC i am using <a href=""https://github.com/iosdevzone/IDZSwiftCommonCrypto"" rel=""nofollow noreferrer"">IDZSwiftCommonCrypto</a></p>
","","","100","<ios><swift><encryption><alamofire><hmac>","1","","0","2018-06-01 17:43:57","","2","","","","","2018-06-01 17:43:57","","",""
"49985450","Verifying facebook signed request urls in python3.6","<p>I'm trying to verify the signature on facebook signed_requests (<a href=""https://developers.facebook.com/docs/reference/login/signed-request/"" rel=""nofollow noreferrer"">https://developers.facebook.com/docs/reference/login/signed-request/</a>), using python 3.6. So far I've tried:</p>

<ul>
<li>parse_signed_request() on the facebook python sdk here <a href=""https://facebook-sdk.readthedocs.io"" rel=""nofollow noreferrer"">https://facebook-sdk.readthedocs.io</a></li>
<li>this approach <a href=""https://stackoverflow.com/questions/15229022/facebook-signed-request-email"">facebook signed request email</a></li>
<li>this too <a href=""http://sunilarora.org/parsing-signedrequest-parameter-in-python-bas/"" rel=""nofollow noreferrer"">http://sunilarora.org/parsing-signedrequest-parameter-in-python-bas/</a></li>
<li>using python 2.7 and 3.2</li>
<li><p>using the python cryptography library like so</p>

<p>from cryptography.hazmat.primitives import hashes, hmac
from cryptography.hazmat.backends import default_backend</p>

<p>h = hmac.HMAC(key, hashes.SHA256(), backend=default_backend())
h.update(message)
signature = h.finalize()</p></li>
<li><p>replacing <code>-_</code> chars with <code>+/</code> a la <a href=""https://stackoverflow.com/questions/20366041/facebook-signed-request-invalid"">Facebook signed_request Invalid</a> via a simple <code>replace(""-"", ""+"").replace(""_"", ""/"")</code>.
I had hopes for this one but I can't seem to verify a sig even if it lacks any of the above symbols like this one for example <code>GlU46mFitdvtOnm56aLR3xQ1RUBzoCY0k2u1kMjBdQA.ey[...]</code> ..so.. yeah..</p></li>
<li><p>I've attempted different string encodings (utf-8 / ascii) on the signature / payload</p></li>
<li>different hashing algorithms (sha512 / md5 ..)</li>
<li>hashing the base64 strings over decoding them from base64 first</li>
<li>regenerating my app secret (I've double checked that the app ID that appears in the payload references the correct app, and thus secret)</li>
</ul>

<p>So far I've been unable to produce the same signature that comes on given signed request(s) .. so every facebook message is considered invalid (less than ideal!). </p>

<p>How on earth does facebook generate these signatures? How do I generate them correctly (or incorrectly, if it matches facebook :P I'm not fussy) in order to validate them?</p>

<hr>

<p>Edit: Thanks for the comment. I've read that link too .. it doesn't seem to help work this out though. Here's a step by step with example - </p>

<pre><code>&gt; import json
&gt; import base64
&gt; from cryptography.fernet import Fernet
&gt; from cryptography.hazmat.backends import default_backend
&gt; from cryptography.hazmat.primitives import hashes, hmac, padding
&gt; from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes

# app secret copied straight from developer.facebook.com -&gt; settings -&gt; basic
&gt; secrect = 'obviouslythisisnttherealone'

# signed_request from facebook
&gt; r = 'xik7puSFmT1d1LNBlqFVTOCb8TiH0Rg1xBfr7zzf9rg.eyJhbGdvcml0aG0iOiJITUFDLVNIQTI1NiIsImNvbW11bml0eV9pZCI6bnVsbCwiaXNzdWVkX2F0IjoxNTI0NTU4NjcxLCJtZXRhZGF0YSI6bnVsbCwicGFnZV9pZCI6MTYxMjU3Njk0NjE4NjAxLCJwc2lkIjoiMTQ2ODkzNzEwNjU2MTA5NSIsInRocmVhZF90eXBlIjoiVVNFUl9UT19QQUdFIiwidGlkIjoiMTQ2ODkzNzEwNjU2MTA5NSJ9'

# spilt on '.'
&gt; b64_sig, b64_data = r.split('.')
&gt; print(b64_sig, b64_data)
xik7puSFmT1d1LNBlqFVTOCb8TiH0Rg1xBfr7zzf9rg eyJhbGdvcml0aG0iOiJITUFDLVNIQTI1NiIsImNvbW11bml0eV9pZCI6bnVsbCwiaXNzdWVkX2F0IjoxNTI0NTU4NjcxLCJtZXRhZGF0YSI6bnVsbCwicGFnZV9pZCI6MTYxMjU3Njk0NjE4NjAxLCJwc2lkIjoiMTQ2ODkzNzEwNjU2MTA5NSIsInRocmVhZF90eXBlIjoiVVNFUl9UT19QQUdFIiwidGlkIjoiMTQ2ODkzNzEwNjU2MTA5NSJ9

# there are no - or _ chars to replace in this so ..
&gt; decoded_data = base64.b64decode(b64_data)
&gt; decoded_sig = base64.b64decode(b64_sig + ""="")  # add another '=' to pad out the base64 encoding
&gt; print (decoded_data, decoded_sig)
b'{""algorithm"":""HMAC-SHA256"",""community_id"":null,""issued_at"":1524558671,""metadata"":null,""page_id"":161257694618601,""psid"":""1468937106561095"",""thread_type"":""USER_TO_PAGE"",""tid"":""1468937106561095""}' b'\xc6);\xa6\xe4\x85\x99=]\xd4\xb3A\x96\xa1UL\xe0\x9b\xf18\x87\xd1\x185\xc4\x17\xeb\xef&lt;\xdf\xf6\xb8'

# encode secret into bytes
&gt; bytes_secret = bytes(secret, encoding='ascii')

&gt; h = hmac.HMAC(bytes_secret, hashes.SHA256(), backend=default_backend())
&gt; h.update(decoded_data)
&gt; h.finalize()
b""\xe9\x0f\xbf\xee\xef\xc8\xf0\x96'Im\x1a@\x9d\xc7S\x82%\xe4&lt;\xa0\xbc\xff\x93\xcb\x11~\x7fv\x90\x9f\xb6""
#  ^ wrong

# .. uh .. perhaps in the reverse order?
&gt; h = hmac.HMAC(decoded_data, hashes.SHA256(), backend=default_backend())
&gt; h.update(bytes_secret)
&gt; h.finalize()
b'fnc\xceu\xf8\xf7\xda\xc4\xfe\xca\xe2\x1b\x8b\x00\x9en\xbe\xc7a\xf0P\x9a\\\xfd\xaad\xcb[}E='
# ^ wrong

# ok fine, let's try using a different hashing tool
&gt; import binascii
&gt; hex_sig = binascii.hexlify(decoded_sig)

# the sig we want, in hex
&gt;  print(hex_sig)
b'c6293ba6e485993d5dd4b34196a1554ce09bf13887d11835c417ebef3cdff6b8'

&gt; from hashlib import sha256
&gt; h = sha256(bytes_secret)
&gt; h.update(decoded_data)
&gt; print(h.hexdigest())
'54acbc303f4d85831e4bb9f4818a233e71e7f7c4eef4a585c61ed70f7cf1e07f'
# ^ wrong

# uh ..
&gt; h = sha256(bytes_secret + decoded_data)
&gt; print(h.hexdigest())
'54acbc303f4d85831e4bb9f4818a233e71e7f7c4eef4a585c61ed70f7cf1e07f'
# ^ wrong

# using 2.0.0 facebook python sdk
&gt; import facebook
&gt; facebook.parse_signed_request(r, secret)
False
</code></pre>

<p>None of these approaches work (and this isn't everything I've tried) .. </p>
","<p>Update: Hopefully this proves helpful to others hunting for something similar - the signature generation functions were correct, there was a bug in something hard coding the (wrong) app id hidden in some of front end code. </p>
","50005917","99","<python><facebook><hmac>","0","0","1","2018-04-24 15:47:06","","1","","2877564","","2018-04-24 10:11:08","2018-04-23 16:06:14","","","2018-04-24 15:47:06"
"45201146","Equivalent code of hash in .Net to Python 2.7","<p>I have a code in .Net to generate HMAC SHA256 hash. I tried my best to get the equivalent code in Python 2.7 but it differs. Where am I going wrong?</p>

<p>.Net code</p>

<pre><code>using System;
using System.Security.Cryptography;
using System.Text;                  
public class Program
{
    public static void Main()
    {
        var key = Guid.Parse(""7a640e1f-df45-4652-a9d5-4bdc2003deac"").ToByteArray();
        var payload = Encoding.UTF8.GetBytes(""ab38eadaeb746599f2c1ee90f8267f31f467347462764a24d71ac1843ee77fe3#40011234567890##34567####MitErpNavn#34567#20170719192159"");
        Console.WriteLine(key);
        Console.WriteLine(payload);
        for(var i = 0; i &lt; key.Length;i++)
        {
            var b = key[i];
            Console.WriteLine(b);
        }
        using(var ha = new HMACSHA256(key))
        {
           var hash = ha.ComputeHash(payload);
           var result = Convert.ToBase64String(hash); 
           Console.WriteLine(result);

        }
    }
}

Output: f0UqIWmJBea+rTixF1jiCNhEt12yPN4R7gJclYMM3mE=
</code></pre>

<p>Python 2.7</p>

<pre><code>import hmac
import hashlib
import base64
import uuid

erp_key = '7a640e1f-df45-4652-a9d5-4bdc2003deac'
payload = 'ab38eadaeb746599f2c1ee90f8267f31f467347462764a24d71ac1843ee77fe3#40011234567890##34567####MitErpNavn#34567#20170719192159'
erp_uuid = uuid.UUID(erp_key)
dig = hmac.new(erp_uuid.bytes, msg=payload, digestmod=hashlib.sha256).digest()
hash_key = base64.b64encode(dig).decode()

print hash_key

Output: wI/WinRP4mHfHLnFCSHn6j4VphSOO8CjLqkAVJi1HTQ=
</code></pre>
","<p>Finally I am able to fix the issue. I hope someone else can also get help from this</p>

<pre><code>import hmac
import hashlib
import base64
import uuid
import array

erp_key = '7a640e1f-df45-4652-a9d5-4bdc2003deac'
payload = 'ab38eadaeb746599f2c1ee90f8267f31f467347462764a24d71ac1843ee77fe3#40011234567890##34567####MitErpNavn#34567#20170719192159'

erp_uuid = uuid.UUID(erp_key)
map_arr = array.array('B', erp_uuid.bytes_le)
makeitastring = """".join(chr(x) for x in map_arr)

dig = hmac.new(makeitastring, payload, hashlib.sha256).digest()
hash_key = base64.b64encode(dig).decode()

encodedSignature = base64.encodestring(dig).replace('\n', '')

print encodedSignature

Output: f0UqIWmJBea+rTixF1jiCNhEt12yPN4R7gJclYMM3mE=
</code></pre>
","45214204","98","<.net><python-2.7><sha256><hmac>","0","0","1","2017-07-21 09:22:31","45214204","0","","472495","","2017-07-19 21:35:09","2017-07-19 21:16:02","","2017-07-21 09:22:31","2017-07-20 12:05:25"
"46607859","Self written HMAC function, not working correctly","<p>I wrote the following function to generate HMAC-SHA1 referring <a href=""https://tools.ietf.org/html/rfc2104"" rel=""nofollow noreferrer"">https://tools.ietf.org/html/rfc2104</a>, however, the values I generate seem to differ from the values given on <a href=""https://tools.ietf.org/html/rfc2202"" rel=""nofollow noreferrer"">https://tools.ietf.org/html/rfc2202</a> and from what I've tested on <a href=""https://www.freeformatter.com/hmac-generator.html"" rel=""nofollow noreferrer"">https://www.freeformatter.com/hmac-generator.html</a>. </p>

<p>For example, the function should be generating <code>de7c9b85b8b78aa6bc8a7a36f70a90701c9db4d9</code> for text ""The quick brown fox jumps over the lazy dog"" with key ""key"", but it generates <code>d3c446dbd70f5db3693f63f96a5931d49eaa5bab</code> instead.</p>

<p>Could anyone point out my mistakes?</p>

<p>The function:</p>

<pre><code>const int block_size = 64;
const int hash_output_size = 20;
const int ipadVal = 0x36;
const int opadVal = 0x5C;
std::string HMAC::getHMAC(const std::string &amp;text)
{
// check if key length is block_size
// else, append 0x00 till the length of new key is block_size
int key_length = key.length();
std::string newkey = key;
if (key_length &lt; block_size)
{
    int appended_zeros = block_size - key_length;
    // create new string with appended_zeros number of zeros
    std::string zeros = std::string(appended_zeros, '0');
    newkey = key + zeros;
}
if (key_length &gt; block_size)
{
    SHA1 sha1;
    newkey = sha1(key);
}

// calculate hash of newkey XOR ipad and newkey XOR opad
std::string keyXipad = newkey;
std::string keyXopad = newkey;
for (int i = 0; i &lt; 64; i++)
{
    keyXipad[i] ^= ipadVal;
    keyXopad[i] ^= opadVal;
}

// get first hash, hash of keyXipad+text
std::string inner_hash = getSHA1(keyXipad + text);

// get outer hash, hash of keyXopad+inner_hash
std::string outer_hash = getSHA1(keyXopad + inner_hash);

// return outer_hash
return outer_hash;
}
</code></pre>

<p>edit: In the line</p>

<pre><code>std::string zeros = std::string(appended_zeros, '0');
</code></pre>

<p>'0' should be 0 instead : int instead of char. Thanks to @Igor Tandetnik for that.</p>
","<p>Ok..so a little look around lead me to <a href=""https://stackoverflow.com/questions/34522863/hmac-produces-wrong-results"">HMAC produces wrong results</a>. Turns out, I was doing the same mistake of using hex as ascii.</p>

<p>I used a function to convert the inner_hash from hex to ascii and then everything turned out perfect.</p>

<p>The final version of the function:</p>

<pre><code>std::string HMAC::getHMAC(const std::string &amp;text)
{
// check if key length is block_size
// else, append 0x00 till the length of new key is block_size
int key_length = key.length();
std::string newkey = key;
if (key_length &lt; block_size)
{
    int appended_zeros = block_size - key_length;
    // create new string with appended_zeros number of zeros
    std::cout &lt;&lt; ""\nAppending "" &lt;&lt; appended_zeros &lt;&lt; "" 0s to key"";
    std::string zeros = std::string(appended_zeros, 0);
    newkey = key + zeros;
}
if (key_length &gt; block_size)
{
    SHA1 sha1;
    newkey = sha1(key);
}

// calculate hash of newkey XOR ipad and newkey XOR opad
std::string keyXipad = newkey;
std::string keyXopad = newkey;
for (int i = 0; i &lt; 64; i++)
{
    keyXipad[i] ^= ipadVal;
    keyXopad[i] ^= opadVal;
}

// get first hash, hash of keyXipad+text
std::string toInnerHash = keyXipad + text;
std::string inner_hash = getHash(toInnerHash);

// get outer hash, hash of keyXopad+inner_hash
std::string toOuterHash = keyXopad + hex_to_string(inner_hash);
std::string outer_hash = getHash(toOuterHash);

// return outer_hash
return outer_hash;
}
</code></pre>

<p>hex_to_string function taken from <a href=""https://stackoverflow.com/a/16125797/3818617"">https://stackoverflow.com/a/16125797/3818617</a></p>
","46617663","98","<c++><hmac>","0","0","1","2017-10-07 07:14:35","46617663","4","","3818617","","2017-10-07 06:24:26","2017-10-06 14:16:45","","2017-10-07 07:14:35","2017-10-07 07:09:03"
"57538198","python - hmac new sha1","<p>I am trying to get the same result as <a href=""https://developertools.esd.org.uk/service?organisations/barrowbc"" rel=""nofollow noreferrer"">this online API service produces</a>.</p>

<p>By entering <code>key</code> as the application key, and <code>secret</code> as the secret produces the following URL:</p>

<pre><code>http://webservices.esd.org.uk/organisations/barrowbc?ApplicationKey=key&amp;Signature=YXWJsGSKnLcENW1vm30EYObbCsA=
</code></pre>

<p>I have tried producing the same signature using the following code:</p>

<pre><code>import hmac    
import urllib
import base64
from hashlib import sha1


def sign_url(url,key,secret):
    url = url + 'ApplicationKey=' + key
    signature = hmac.new(secret,url,sha1).digest().encode(""base64"") 
    signature = '&amp;Signature=' + signature
    url = url + signature
    print(url)

sign_url('http://webservices.esd.org.uk/organisations/barrowbc','key','secret')
</code></pre>

<p>but this produces:</p>

<pre><code>http://webservices.esd.org.uk/organisations/barrowbcApplicationKey=key&amp;Signature=W//jgV+xdSbTBG6+i1TCGN/Kbsk=
</code></pre>

<p>The expected signature is </p>

<pre><code>YXWJsGSKnLcENW1vm30EYObbCsA=
</code></pre>

<p>but my code outputs</p>

<pre><code>W//jgV+xdSbTBG6+i1TCGN/Kbsk=
</code></pre>
","<p>Your version is missing the required <code>?</code> component before the <code>Application=</code> parameter. You probably want to add in a <code>&amp;</code> if there are other parameters, however, and you need to remove the newline that <code>.encode(""base64"")</code> adds to the end of the value:</p>

<pre><code>def sign_url(url, key, secret):
    sep = '&amp;' if '?' in url else '?'
    url = '{}{}ApplicationKey={}'.format(url, sep, key)
    signature = hmac.new(secret, url, sha1).digest().encode(""base64"") 
    return '{}&amp;Signature={}'.format(url, signature[:-1])
</code></pre>

<p>I note however that when the URL contains <em>URL-encoded elements</em> then the signature appears to be applied to the URL-decoded version (with <code>+</code> interpreted as spaces), so you really want to add a <code>urllib.unquote_plus()</code> (Python 2) / <code>urllib.parse.unquote_plus()</code> (Python 3) call when signing:</p>

<pre><code>try:
    from urllib.parse import unquote_plus
except ImportError:
    from urlib import unquote_plus

def sign_url(url, key, secret):
    sep = '&amp;' if '?' in url else '?'
    url = '{}{}ApplicationKey={}'.format(url, sep, key)
    signature = hmac.new(secret, unquote_plus(url), sha1).digest().encode(""base64"") 
    return '{}&amp;Signature={}'.format(url, signature[:-1])
</code></pre>

<p>I've confirmed that this is what their <a href=""https://api.esd.org.uk/code.html"" rel=""nofollow noreferrer"">PHP example code</a> does and verified sample query parameters in the <a href=""https://developertools.esd.org.uk/service"" rel=""nofollow noreferrer"">online signature tool</a>, e.g. when entering the path and parameters <code>foo%20bar?foo%20bar</code> into the tool, <code>CCuMYpCDznH4vIv95+NrN+RHEK0=</code> is produced as the signature, but using <code>foo+bar?foo+bar</code> produces the exact same signature even though <code>+</code> <a href=""https://en.wikipedia.org/wiki/Percent-encoding#The_application/x-www-form-urlencoded_type"" rel=""nofollow noreferrer"">should only be decoded as a space in form data</a>.</p>

<p>I'd parse out the URL, add the <code>ApplicationKey</code> parameter to the parsed parameters, and then construct a new URL to sign.</p>

<p>Here's a version that does just that, and works both on Python 2 and on Python 3:</p>

<pre><code>import hmac
import base64
from hashlib import sha1

try:
    # Python 3
    from urllib.parse import parse_qsl, unquote_plus, urlencode, urlparse
except ImportError:
    # Python 2
    from urlparse import urlparse, parse_qsl
    from urllib import unquote_plus, urlencode

def sign_url(url, key, secret):
    parsed = urlparse(url)
    query = parse_qsl(parsed.query)
    query.append(('ApplicationKey', key))
    to_sign = unquote_plus(parsed._replace(query=urlencode(query)).geturl())

    if not isinstance(secret, bytes):
        secret = secret.encode()
    if not isinstance(to_sign, bytes):
        to_sign = to_sign.encode()
    signature = base64.b64encode(hmac.new(secret, to_sign, sha1).digest())
    if not isinstance(signature, str):
        signature = signature.decode()

    query.append(('Signature', signature))
    return parsed._replace(query=urlencode(query)).geturl()
</code></pre>
","57538955","98","<python><python-2.7><sha1><hmac>","0","1","1","2019-08-18 13:24:50","57538955","3","","100297","","2019-08-17 18:06:31","2019-08-17 16:48:58","","2019-08-18 13:24:50","2019-08-17 18:35:32"
"57888617","Kong Api Gateway - HMAC Signature does not Match","<pre>I am trying to implement HMAC Authentication with Kong, 
I am getting error “HMAC Signature does not match” .
I am making HTTP request using Postman Rest Client. 
Can some one verify my request parameter below.
Credential of Consumer:
Username: ""test""
Secret: ""test123#""

Http Request Detail:

Date:Thu, 05 Sep 2019 09:56:28 GMT
host:172.17.0.3
Authorization: hmac username=""test"",algorithm=""hmac-sha1"",headers=""date"",signature=""YTg5NmQwMjhmMzVmYWNhZmQyZTQwNmY5ZTVkMmUzNDM4NDAxNmY3MA==""

Http Response:

Http Code:401
Response Body:
{
message:""HMAC Signature does not match""
}
</pre>
","","","97","<hmac><kong>","1","","0","2019-09-11 11:56:15","","0","","","","","2019-09-11 11:56:15","","",""
"25596819","Trouble with HMAC for password being sent to website","<p>I am trying to make an app for my school that interacts with PowerSchool, a software that allows user's to view their grades, teachers, schedules, and much more. I found a library for the basics of interacting with PowerSchool written in PHP and have been trying to write it in objective c for the past week. It seems the issue is how I create an HMAC (MD5) with the user's password. Either I am using a hex digest rather than a digest, not sure. The error I get back from the server is an odd number of characters.
Here is the link to the PHP library class I am trying to re-create:
<a href=""https://github.com/horvste/powerapi-php/blob/master/src/PowerAPI/Core.php"" rel=""nofollow"">https://github.com/horvste/powerapi-php/blob/master/src/PowerAPI/Core.php</a>
Here is my code in my test project,
Command line main class:
<a href=""https://gist.github.com/anonymous/c40cdd99a826c06073aa"" rel=""nofollow"">https://gist.github.com/anonymous/c40cdd99a826c06073aa</a>
NSString Category Implementation file:</p>

<pre><code>#import ""NSString+MyAdditions.h""
@implementation NSString (MyAdditions)

- (NSString *) hmacMD5WithData: (NSString *) data
{
    const char *cKey  = [self cStringUsingEncoding:NSASCIIStringEncoding];
    const char *cData = [data cStringUsingEncoding:NSASCIIStringEncoding];
    const unsigned int blockSize = 64;
    char ipad[blockSize], opad[blockSize], keypad[blockSize];
    unsigned int keyLen = strlen(cKey);
    CC_MD5_CTX ctxt;
    if(keyLen &gt; blockSize)
    {
        //CC_MD5(cKey, keyLen, keypad);
        CC_MD5_Init(&amp;ctxt);
        CC_MD5_Update(&amp;ctxt, cKey, keyLen);
        CC_MD5_Final((unsigned char *)keypad, &amp;ctxt);
        keyLen = CC_MD5_DIGEST_LENGTH;
    }
    else
    {
        memcpy(keypad, cKey, keyLen);
    }
    memset(ipad, 0x36, blockSize);
    memset(opad, 0x5c, blockSize);

    int i;
    for(i = 0; i &lt; keyLen; i++)
    {
        ipad[i] ^= keypad[i];
        opad[i] ^= keypad[i];
    }

    CC_MD5_Init(&amp;ctxt);
    CC_MD5_Update(&amp;ctxt, ipad, blockSize);
    CC_MD5_Update(&amp;ctxt, cData, strlen(cData));
    unsigned char md5[CC_MD5_DIGEST_LENGTH];
    CC_MD5_Final(md5, &amp;ctxt);

    CC_MD5_Init(&amp;ctxt);
    CC_MD5_Update(&amp;ctxt, opad, blockSize);
    CC_MD5_Update(&amp;ctxt, md5, CC_MD5_DIGEST_LENGTH);
    CC_MD5_Final(md5, &amp;ctxt);

    const unsigned int hex_len = CC_MD5_DIGEST_LENGTH*2+2;
    char hex[hex_len];
    for(i = 0; i &lt; CC_MD5_DIGEST_LENGTH; i++)
    {
        snprintf(&amp;hex[i*2], hex_len-i*2, ""%02x"", md5[i]);
    }
    NSData *HMAC = [[NSData alloc] initWithBytes:hex length:strlen(hex)];
    NSString *hash = [HMAC base64EncodedStringWithOptions:0];
    return hash;
}
@end
</code></pre>

<p>Thank you for taking the time to look at this issue!</p>
","<p>First, don't build your own HMAC routine here. Use CCHmac. It's built-in and handles HMAC+MD5 correctly.</p>

<p>If at all possible, I recommend going to the API documentation rather than trying to reverse engineer another code base. There are lots of little things going on in the PHP that you may be overlooking; an API doc should explain all of those.</p>

<p>If the PHP code is the only reference you have, then you should break down each piece and see where it's going wrong. For instance, verify that you are getting the auth data in the same form. Then confirm that each program, given the same auth data generates the same HMAC. Then confirm that given the same HMAC, each program generates the same response. Etc. Somewhere you are doing something differently. Make sure that you're using Base64 vs raw data in the same places (PHP devs tend to treat Base64 strings as though they were actually raw data, which causes confusion when coming over to ObjC).</p>

<p>And of course you should examine the server logs to validate that your final request matches the PHP requests.</p>
","25597435","96","<ios><objective-c><hmac><powerschool>","0","1","1","2014-12-17 01:20:02","25597435","0","","1148431","","2014-12-17 01:20:02","2014-08-31 22:17:43","","","2014-09-01 00:12:57"
"48352311","Trouble getting HMACsha256 to produce expected results","<p>I'm trying to hook into the Binance API and have discovered that my implementation of HMACsha256 isn't producing the results that the sample documentation (and doing it in the command line) can. I'm trying to improve my knowledge of Go, but can't seem to crack this one.</p>

<p>Here's the documentation (Relevant Sample at ""SIGNED Endpoint Examples for POST /api/v1/order""): <a href=""https://github.com/binance-exchange/binance-official-api-docs/blob/master/rest-api.md"" rel=""nofollow noreferrer"">https://github.com/binance-exchange/binance-official-api-docs/blob/master/rest-api.md</a></p>

<p>Without looking at the doc, here is the gist, my key is the following:</p>

<pre><code>NhqPtmdSJYdKjVHjA7PZj4Mge3R5YNiP1e3UZjInClVN65XAbvqqM6A7H5fATj0j
</code></pre>

<p>my value is the following:</p>

<pre><code>symbol=LTCBTC&amp;side=BUY&amp;type=LIMIT&amp;timeInForce=GTC&amp;quantity=1&amp;price=0.1&amp;recvWindow=5000&amp;timestamp=1499827319559
</code></pre>

<p>When I use the terminal with the following command:</p>

<pre><code>echo -n ""symbol=LTCBTC&amp;side=BUY&amp;type=LIMIT&amp;timeInForce=GTC&amp;quantity=1&amp;price=0.1&amp;recvWindow=5000&amp;timestamp=1499827319559"" | openssl dgst -sha256 -hmac ""NhqPtmdSJYdKjVHjA7PZj4Mge3R5YNiP1e3UZjInClVN65XAbvqqM6A7H5fATj0j""
</code></pre>

<p>I receive the result</p>

<pre><code>c8db56825ae71d6d79447849e617115f4a920fa2acdcab2b053c4b2838bd6b71
</code></pre>

<p>Which is what the documentation suggests. But when I use the following go program: </p>

<pre><code>package main

import (
    ""crypto/hmac""
    ""crypto/sha256""
    ""encoding/base64""
    ""fmt""
)

func main() {
    docSecret := ""NhqPtmdSJYdKjVHjA7PZj4Mge3R5YNiP1e3UZjInClVN65XAbvqqM6A7H5fATj0j""
    docQuery := ""symbol=LTCBTC&amp;side=BUY&amp;type=LIMIT&amp;timeInForce=GTC&amp;quantity=1&amp;price=0.1&amp;recvWindow=5000&amp;timestamp=1499827319559""
    result := hmacify(docQuery, docSecret)
    fmt.Println(result)
}

func hmacify(message string, secret string) string {
    key := []byte(secret)
    h := hmac.New(sha256.New, key)
    h.Write([]byte(message))
    return base64.StdEncoding.EncodeToString(h.Sum(nil))
}
</code></pre>

<p>produces the result:</p>

<pre><code>yNtWglrnHW15RHhJ5hcRX0qSD6Ks3KsrBTxLKDi9a3E=
</code></pre>

<p>What am I misunderstanding that's causing such a massive difference from the sample and command line?</p>
","<p>Result is displayed in hex not in base64. Here is the <a href=""https://play.golang.org/p/EszhPA2H46Q"" rel=""nofollow noreferrer"">play ground</a> link to the modified code</p>
","48352465","95","<rest><go><encryption><hmac><sha>","1","0","2","2018-01-20 04:21:58","48352559","1","","","","","2018-01-20 03:28:56","","","2018-01-20 04:04:05"
"48352311","Trouble getting HMACsha256 to produce expected results","<p>I'm trying to hook into the Binance API and have discovered that my implementation of HMACsha256 isn't producing the results that the sample documentation (and doing it in the command line) can. I'm trying to improve my knowledge of Go, but can't seem to crack this one.</p>

<p>Here's the documentation (Relevant Sample at ""SIGNED Endpoint Examples for POST /api/v1/order""): <a href=""https://github.com/binance-exchange/binance-official-api-docs/blob/master/rest-api.md"" rel=""nofollow noreferrer"">https://github.com/binance-exchange/binance-official-api-docs/blob/master/rest-api.md</a></p>

<p>Without looking at the doc, here is the gist, my key is the following:</p>

<pre><code>NhqPtmdSJYdKjVHjA7PZj4Mge3R5YNiP1e3UZjInClVN65XAbvqqM6A7H5fATj0j
</code></pre>

<p>my value is the following:</p>

<pre><code>symbol=LTCBTC&amp;side=BUY&amp;type=LIMIT&amp;timeInForce=GTC&amp;quantity=1&amp;price=0.1&amp;recvWindow=5000&amp;timestamp=1499827319559
</code></pre>

<p>When I use the terminal with the following command:</p>

<pre><code>echo -n ""symbol=LTCBTC&amp;side=BUY&amp;type=LIMIT&amp;timeInForce=GTC&amp;quantity=1&amp;price=0.1&amp;recvWindow=5000&amp;timestamp=1499827319559"" | openssl dgst -sha256 -hmac ""NhqPtmdSJYdKjVHjA7PZj4Mge3R5YNiP1e3UZjInClVN65XAbvqqM6A7H5fATj0j""
</code></pre>

<p>I receive the result</p>

<pre><code>c8db56825ae71d6d79447849e617115f4a920fa2acdcab2b053c4b2838bd6b71
</code></pre>

<p>Which is what the documentation suggests. But when I use the following go program: </p>

<pre><code>package main

import (
    ""crypto/hmac""
    ""crypto/sha256""
    ""encoding/base64""
    ""fmt""
)

func main() {
    docSecret := ""NhqPtmdSJYdKjVHjA7PZj4Mge3R5YNiP1e3UZjInClVN65XAbvqqM6A7H5fATj0j""
    docQuery := ""symbol=LTCBTC&amp;side=BUY&amp;type=LIMIT&amp;timeInForce=GTC&amp;quantity=1&amp;price=0.1&amp;recvWindow=5000&amp;timestamp=1499827319559""
    result := hmacify(docQuery, docSecret)
    fmt.Println(result)
}

func hmacify(message string, secret string) string {
    key := []byte(secret)
    h := hmac.New(sha256.New, key)
    h.Write([]byte(message))
    return base64.StdEncoding.EncodeToString(h.Sum(nil))
}
</code></pre>

<p>produces the result:</p>

<pre><code>yNtWglrnHW15RHhJ5hcRX0qSD6Ks3KsrBTxLKDi9a3E=
</code></pre>

<p>What am I misunderstanding that's causing such a massive difference from the sample and command line?</p>
","<p>You got the same result in both cases. It's just encoded differently. The <code>openssl</code> command encodes it as hex and your function uses <code>base64.StdEncoding.EncodeToString()</code> to encode it as base64.</p>

<p>Here's a small Python 2 snippet showing this:</p>

<pre><code>&gt;&gt;&gt; x = ""c8db56825ae71d6d79447849e617115f4a920fa2acdcab2b053c4b2838bd6b71""
&gt;&gt;&gt; y = ""yNtWglrnHW15RHhJ5hcRX0qSD6Ks3KsrBTxLKDi9a3E="".decode('base64').encode('hex')
&gt;&gt;&gt; y
'c8db56825ae71d6d79447849e617115f4a920fa2acdcab2b053c4b2838bd6b71'
&gt;&gt;&gt; x == y
True
</code></pre>

<p>To get the exact same result as the command line use <code>hex.EncodeToString()</code> as @Anuruddha suggested.</p>

<pre><code>import ""encoding/hex""

func hmacify(message string, secret string) string {
    key := []byte(secret)
    h := hmac.New(sha256.New, key)
    h.Write([]byte(message))
    return hex.EncodeToString(h.Sum(nil))  // &lt;--- change is HERE
}
</code></pre>
","48352559","95","<rest><go><encryption><hmac><sha>","1","2","2","2018-01-20 04:21:58","48352559","1","","","","","2018-01-20 03:28:56","","","2018-01-20 04:21:58"
"38231852","Ensuring a specific memory layout for a C struct","<p>I'm trying to build a struct that holds various fields, of varying size. Since I'd like to also compute an HMAC over the concatenated fields I thought it might be nice to just be able to pass a pointer to the struct instance to the HMAC function. However, I'm fearing that some compilers may add padding to between the struct fields, which would lead to inconsistent HMAC results.</p>

<p>Is there a portable way to ensure that the compiler does not add padding between the fields?</p>
","","","95","<c><struct><hmac><memory-layout>","2","","0","2016-07-06 19:02:48","","11","","","","","2016-07-06 19:02:48","","",""
"54316829","How to fix encryption of sha256 hmac on google closure library?","<p>Multiple Hmac encrypters ouput a different result of google closure library.</p>

<p>I've tried multiple Hmac encrypters and they output the same result. However, when using google closure library, both in NodeJS and ClojureScript, it outputs a totally different result.</p>

<pre><code>require(""google-closure-library"");

function bytesToHex(b) {
    var hexchars = '0123456789abcdef';
    var hexrep = new Array(b.length * 2);
    for (var i = 0; i &lt; b.length; ++i) {
      hexrep[i * 2] = hexchars.charAt((b[i] &gt;&gt; 4) &amp; 15);
      hexrep[i * 2 + 1] = hexchars.charAt(b[i] &amp; 15);
    }
    return hexrep.join('');
}

goog.require('goog.crypt.Hmac');
goog.require('goog.crypt.Sha256');

function getHmac(key, message) {
    var hasher = new goog.crypt.Sha256();
    var hmacer = new goog.crypt.Hmac(hasher, key, 64);
    return bytesToHex(hmacer.getHmac(message));
}

console.log(getHmac('ac13', 'msg'));
</code></pre>

<p>sha256 Hmac of key 'ac13' and message 'msg' has proven to be a4a21ba4ddef094c847d4a75ef9a026d329ee12563f3ab00e63261abae55c18d on multiple encryption libraries. </p>
","<p>It works just fine. Hmac requires an <a href=""https://google.github.io/closure-library/api/goog.crypt.Hmac.html"" rel=""nofollow noreferrer"">array of numbers</a>, not a string.</p>

<pre><code>(defn hmac [key message]
    (let [decode goog.crypt/stringToByteArray
          hasher (goog.crypt.Sha256.)
          hmacer (goog.crypt.Hmac. hasher (decode key))]
        (.getHmac hmacer (decode message))))

(prn (goog.crypt/byteArrayToHex (hmac ""ac13"" ""msg"")))
=&gt; ""a4a21ba4ddef094c847d4a75ef9a026d329ee12563f3ab00e63261abae55c18d""
</code></pre>
","54340063","94","<javascript><clojurescript><sha256><hmac><google-closure-library>","4","4","1","2019-01-24 05:44:56","54340063","2","","","","","2019-01-22 21:39:17","","","2019-01-24 05:44:56"
"45602915","Convert Java HmacMD5 function to VB6","<p>I'm working on a windows app, and need to use some auth function from some previous java code. I have access to the Java source but still can't seem to get it right. Probably because of my limited knowledge of cryptography.</p>

<p>The Java functions I need to convert are :</p>

<pre><code>public String getHMACHash(String SharedSecretKey, String TextToHash) {
    return base64EncodedStringFromBytes(hmacMD5(SharedSecretKey, TextToHash));
}

private String base64EncodedStringFromBytes(byte[] bArr) {
    return Base64.encodeToString(bArr, 2);
}


public byte[] hmacMD5(String SharedSecretKey, String TextToHash) {
    byte[] bArr = null;
    try {
        Mac instance = Mac.getInstance(""HmacMD5"");
        instance.init(new SecretKeySpec(SharedSecretKey.getBytes(), ""HmacMD5""));
        bArr = instance.doFinal(TextToHash.getBytes());
    } catch (NoSuchAlgorithmException e) {
        Log.m8401e(TAG, e.getLocalizedMessage());
    } catch (InvalidKeyException e2) {
        Log.m8401e(TAG, e2.getLocalizedMessage());
    }
    return bArr;
}
</code></pre>

<p>so when inputting the values :</p>

<pre><code>SharedSecretKey = ""497n9x98jK06gf7S3T7wJ2k455Qm192Q""
TextToHash = ""1502322764327/customerservice.svc/buybackcartPOST8e802a045c1e60e""
</code></pre>

<p>the Hash generated is :</p>

<pre><code>pOZNkg077OdvhyeMMPIX2w==
</code></pre>

<p>Try as I might I can't get near to the hash key using the same values in VB6. I have tried a few different methods to create the hash :</p>

<pre><code>Private Function hash_HMACMD5(ByVal sTextToHash As String, ByVal 
sSharedSecretKey As String)

Dim asc As Object, enc As Object
Dim TextToHash() As Byte
Dim SharedSecretKey() As Byte
Set asc = CreateObject(""System.Text.UTF8Encoding"")
Set enc = CreateObject(""System.Security.Cryptography.HMACMD5"")

 TextToHash = asc.Getbytes_4(sTextToHash)
 SharedSecretKey = asc.Getbytes_4(sSharedSecretKey)
 enc.Key = SharedSecretKey

 Dim bytes() As Byte
 bytes = enc.ComputeHash_2((TextToHash))
 hash_HMACMD5 = Base64Encode(bytes)

 Set asc = Nothing
 Set enc = Nothing

 End Function
</code></pre>

<p>So, I was hoping someone out there might be able to point me in the right direction ?</p>

<p>Thanks In advance for any help.</p>

<p>Potman100</p>

<p>I've traced all the code through, and I can't see any thing that would indicate something different is going on. As mentioned below, there is a import line</p>

<pre><code>import android.util.Base64;
</code></pre>

<p>The call to create the hash is :</p>

<pre><code>String hMACHash = new MASecurity().getHMACHash(str, str2);
</code></pre>

<p>MASecurity Class is :</p>

<pre><code>import android.util.Base64;
import java.io.UnsupportedEncodingException;
import java.security.InvalidKeyException;
import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;

public class MASecurity {
private static final String TAG = ""MASecurity"";

public String getHMACHash(String str, String str2) {
    return base64EncodedStringFromBytes(hmacMD5(str, str2));
}

private String base64EncodedStringFromBytes(byte[] bArr) {
    return Base64.encodeToString(bArr, 2);
}

public byte[] hmacMD5(String str, String str2) {
    byte[] bArr = null;
    try {
        Mac instance = Mac.getInstance(""HmacMD5"");
        instance.init(new SecretKeySpec(str.getBytes(), ""HmacMD5""));
        bArr = instance.doFinal(str2.getBytes());
    } catch (NoSuchAlgorithmException e) {
        MALog.m8401e(TAG, e.getLocalizedMessage());
    } catch (InvalidKeyException e2) {
        MALog.m8401e(TAG, e2.getLocalizedMessage());
    }
    return bArr;
}
</code></pre>

<p>The input values are correct, as they are logged whilst the app is running.</p>

<p>Hope this helps ??</p>
","<p>Thanks Alex K., seems the Java code was adding more data to one of the params which the debugging I did missed, one I added the extra data it creates a valid hash.</p>
","45640374","92","<java><vb6><md5><hmac>","0","0","1","2017-08-11 17:04:52","","8","","4747137","","2017-08-10 13:09:37","2017-08-10 01:10:34","","","2017-08-11 17:04:52"
"52794065","HMAC-SHA256 hash generation with iteration to make it even harder","<p>I'm trying generating HMAC-SHA256 for a application which validate data on its server with same mechanism which we need to follow.
The idea is to HASH a XML with given secret and Iteration count.
What I've done so far is : </p>

<pre><code>$file = 'TESTXML.xml';
$fp = fopen($file, ""r"");
$string = fread($fp,filesize($file));
$secret = 'somesecret';
$ctx = hash_init('sha256');
$sig = hash_hmac('sha256', $string, $secret);

for ($i=0; $i &lt; 2481 ; $i++) {
    hash_update($ctx, $sig);
}
$hash = hash_final($ctx, true);
echo base64_encode($hash); 
</code></pre>

<p>But the output is different than the JAVA code provided by the company which need this implemented.</p>

<p>I know I'm near the solution but I feel I'm missing something really stupid.</p>

<p><strong>JAVA code:</strong></p>

<pre><code>private static String generateHash(final InputStream is, final int iteration, final String key) throws IOException, NoSuchAlgorithmException, InvalidKeyException {
        Mac sha256_HMAC;
        sha256_HMAC = Mac.getInstance(ALGORITHM);
        final SecretKeySpec secret_key = new SecretKeySpec(key.getBytes(), ALGORITHM);
        sha256_HMAC.init(secret_key);
        byte[] bytesBuffer = new byte[2048];
        int bytesRead = -1;

        while ((bytesRead = is.read(bytesBuffer)) != -1) {
            sha256_HMAC.update(bytesBuffer, 0, bytesRead);
        }
        byte[] digestValue = sha256_HMAC.doFinal();
        for (int i = 0; i &lt; iteration; i++) {
            sha256_HMAC.reset();
            digestValue = sha256_HMAC.doFinal(digestValue);
        }
        final String generatedHash = Base64.encodeBase64String(digestValue);
        return generatedHash;
    }
</code></pre>
","","","91","<php><hash><hmac>","0","","0","2018-10-13 14:42:03","","2","","","","","2018-10-13 14:42:03","","",""
"48107204","What causes the discrepancy from HMAC functions in R vs Python when using .digest()?","<p>I am trying to write some functions to connect to IBM Cloud Object Storage using AWS Version 4 signing protocols.  There's some boilerplate code for doing this that works in Python over <a href=""https://console.bluemix.net/docs/services/cloud-object-storage/hmac/hmac-signature.html#constructing-an-hmac-signature"" rel=""nofollow noreferrer"">here</a>, but when I try to convert the code to R I find myself in a conundrum.</p>

<p>When using HMAC functions in R &amp; Python the <code>.hexdigest()</code> method yields identical outputs for the same string in both languages:</p>

<pre><code># Python
import hmac
import hashlib
&gt;&gt;&gt; hmac.new(""key"", ""message"".encode('utf-8'), hashlib.sha256).hexdigest()
'6e9ef29b75fffc5b7abae527d58fdadb2fe42e7219011976917343065f58ed4a

# R
library(digest)
&gt; hmac(""key"", enc2utf8(""message""), ""sha256"")
[1] ""6e9ef29b75fffc5b7abae527d58fdadb2fe42e7219011976917343065f58ed4a""
</code></pre>

<p>If you use the <code>.digest()</code> method in Python from the <code>crypto</code> library - which the code from AWS/IBM suggests - then you get ASCII output.  I am able to approximate this ASCII output in R by changing the <code>hmac()</code> output to raw and then converting to character.  Below you can see it is not exactly the same - though it is close. </p>

<pre><code># Python
&gt;&gt;&gt; hmac.new(""key"", ""message"".encode('utf-8'), hashlib.sha256).digest()
""n\x9e\xf2\x9bu\xff\xfc[z\xba\xe5'\xd5\x8f\xda\xdb/\xe4.r\x19\x01\x19v\x91sC\x06_X\xedJ""

# R
&gt; rawToChar(hmac(""key"", ""message"", ""sha256"", raw = T))
[1] ""n\x9e\xf2\x9bu\xff\xfc[z\xba\xe5'Տ\xda\xdb/\xe4.r\031\001\031v\x91sC\006_X\xedJ""
</code></pre>

<p><strong>What is causing the discrepancy here?</strong>  The source code and docs for <code>.digest()</code> says that it returns a string of 8-bit data that may contain non-ASCII bytes.  <strong>How can I replicate this output in R?</strong> </p>

<p>Ultimately I believe this is what is causing my signatures to fail when trying to authenticate with IBM Cloud Object Storage.  Any help or alternative suggestions for HMAC libraries in Python/R would be greatly appreciated!</p>
","","","89","<python><r><amazon-web-services><hmac><ibm-cloud-storage>","0","","0","2018-01-05 04:55:49","","7","","4896112","","2018-01-05 04:55:49","2018-01-05 04:31:30","","",""
"41241454","Hmac in MIGS payment in php and Node.js different","<p>I'm trying to convert the <code>MIGS payment gateway code</code> from <code>PHP</code> to <code>NODE.js</code><br>
Everything else is fine except this hmac hash code generation<br>
<code>PHP CODE</code></p>

<pre><code>strtoupper(hash_hmac('SHA256',$this-&gt;hashInput, pack(""H*"",$this-&gt;secureHashSecret)));
</code></pre>

<p><code>Javascript/NODE.js code</code></p>

<pre><code>var binKey = new Buffer(SecureSecret,""hex"");

var hasheddata = new Buffer(    
    crypto.createHmac('SHA256',binKey).update(hashvalue).digest('hex')                            
).toString().toUpperCase();   
</code></pre>

<p>hashInput and securesecret is same for both the above code , but i'm always getting different values .  </p>
","<p>Sorry i messed up the Order of Hashvalue .. The code is working fine<br>
So if anyone want to convert the same here it is.. Enjoy</p>
","41242438","89","<javascript><php><node.js><hmac>","1","0","1","2016-12-20 12:31:35","","0","","","","","2016-12-20 11:37:38","","","2016-12-20 12:31:35"
"55168954","HMAC python differs from HMAC php","<p>Im migrating my lumen code to python, for hmac function I have this:</p>

<p><em>PHP</em></p>

<pre><code>$hash = hash_hmac(
  'sha256',
  'user@email.com', 
  'message'
);
</code></pre>

<p><em>Python 3</em></p>

<pre><code>import hmac
import hashlib

user_hash = hmac.new(b'user@email.com', b'message', hashlib.sha256).hexdigest()
</code></pre>

<p>The problem is that both results doesnt match:  </p>

<p><em>PHP Output</em></p>

<pre><code>413777aac2561ca3acd6d49c95df9ecae4c6e2f6bc9adc40bbb77650d7b4c459
</code></pre>

<p><em>Python Output</em></p>

<pre><code>42879f50e909799d93b835a81a65c03cf78a56ef1c038ac75c8ab3f211d083ea
</code></pre>

<p>I guess the problem is how python 3 interpret string but I cant figure it out. Any help please?</p>
","<p>The order of arguments to HMAC makes a difference:</p>

<pre class=""lang-none prettyprint-override""><code>&gt;&gt;&gt; hmac.new(b'user@email.com', b'message', hashlib.sha256).hexdigest()
'42879f50e909799d93b835a81a65c03cf78a56ef1c038ac75c8ab3f211d083ea'

&gt;&gt;&gt; hmac.new(b'message', b'user@email.com', hashlib.sha256).hexdigest()
'413777aac2561ca3acd6d49c95df9ecae4c6e2f6bc9adc40bbb77650d7b4c459'
</code></pre>

<p>In <code>hmac.new</code>, the first argument is the <code>key</code> (the starting key for the hash), and the second argument is the <code>msg</code>, the message to be digested.</p>
","55169720","88","<php><python><hash><hmac>","0","1","1","2019-03-14 18:30:43","55169720","1","","","","","2019-03-14 17:44:11","","","2019-03-14 18:30:43"
"54319040","HMAC-based cookies weaknesses","<p>I am currently studying stateless servers design.
I learnt how to store HMAC-based token in HTTP cookies.
The idea is that the server has a secret key and is the only entity able to generate valid tokens.</p>

<p>I also read this thread:
<a href=""https://stackoverflow.com/questions/4495950/how-do-stateless-servers-work"">How do stateless servers work?</a></p>

<p>There is an interesting example about Paypal-like website.
If an attacker just copy the content of a token, he can do whatever he want with the account until the token being invalid.</p>

<p>I see several ways to avoid that issue:</p>

<ul>
<li>Store IP address or its hash in the token: possibly annoying for user?</li>
<li>Store user-agent or its hash in the token: low added value</li>
<li>Ask for re-authentication for security-based use cases (ex: password change)</li>
<li>Add a one-time password layer</li>
</ul>

<p>Is there additional weaknesses?
How to protect against these weaknesses?</p>
","","","88","<cookies><hmac>","1","","0","2019-01-23 02:02:25","","0","","","","","2019-01-23 02:02:25","","",""
"56559148","Ruby vs. Go / sha256 hmac base64 encoded string mismatches","<p>playing around with imaginary, I'm attempting to create a ruby client.</p>

<p>For security reasons, I'd need to sign the url</p>

<p>Here is the go provided sample :</p>

<pre><code>package main

import (
    ""crypto/hmac""
    ""crypto/sha256""
    ""encoding/base64""
    ""fmt""
)

func main() {
  signKey := ""ea79b7fd-287b-4ffe-b941-bf983181783f""
  urlPath := ""/resize""
  url := ""https%3A%2F%2Fxyz""
  urlQuery := ""nocrop=true&amp;type=jpeg&amp;url="" + url + ""&amp;width=500""

  h := hmac.New(sha256.New, []byte(signKey))
  h.Write([]byte(urlPath))
  h.Write([]byte(urlQuery))
  buf := h.Sum(nil)
    fmt.Println(base64.RawURLEncoding.EncodeToString(buf)
}
</code></pre>

<p>Converted to ruby, this gives us :</p>

<pre><code>require 'openssl'
require 'base64'

signKey = ""ea79b7fd-287b-4ffe-b941-bf983181783f""
urlPath = ""/resize""
url = ""https%3A%2F%2Fxyz""
urlQuery = ""nocrop=true&amp;type=jpeg&amp;url="" + url + ""&amp;width=500""

digest = OpenSSL::Digest.new('sha256')
hmac = OpenSSL::HMAC.digest(digest, signKey, ""#{urlPath}#{urlQuery}"")
pp Base64.strict_encode64(hmac)
</code></pre>

<p>We're almost there , but there a slight issue, don't know if it is due to openssl or base64, but for example when I get this with go :</p>

<p><code>wClkWcUvI9ILs7noAr_HtnKpRCeeWBXE1Ne2C99sAco</code></p>

<p>I get the following with the ruby version :</p>

<p><code>wClkWcUvI9ILs7noAr/HtnKpRCeeWBXE1Ne2C99sAco=</code></p>

<p>With ruby, whatever's done, it ends up with a <code>=</code></p>

<p>While go uses underscore, ruby use backslashes (this last one statement might be the result of pure unawareness about specific ruby parts, but let's just detail the issue)</p>

<p>What should be done to get the same output with both versions ? Why do we get a close but not exact result between those languages ?</p>

<p>Thanks a lot for the reply</p>
","<p>The Go code uses the URL safe variant of base64 encoding where your Ruby code uses the normal version. The URL safe version uses <code>-</code> and <code>_</code> instead of <code>+</code> and <code>/</code> so that it is safe for use in URLs. The Ruby version also includes padding (the <code>=</code> at the end).</p>

<p>You can use the <a href=""https://ruby-doc.org/stdlib-2.6.3/libdoc/base64/rdoc/Base64.html#method-i-urlsafe_encode64"" rel=""nofollow noreferrer"">URL safe version in Ruby</a>, and you can also specify no padding to get the same result as Go:</p>

<pre><code>Base64.urlsafe_encode64(hmac, false)
</code></pre>
","56559414","88","<ruby><go><openssl><base64><hmac>","3","7","1","2019-06-12 15:11:14","56559414","0","","102133","","2019-06-12 09:51:06","2019-06-12 09:44:37","","2019-06-12 15:11:14","2019-06-12 09:59:17"
"53361269","OpenSSL HMACSHA256 produces different result comparing to .NET","<p>I am using <code>C#</code> and <code>C++</code> with <code>OpenSSL</code> to compute <code>HMACSHA256</code> has with a key and both produce different results. What am I doing wrong?</p>

<p><code>C#</code> code:</p>

<pre><code>public static string CreateSignature(string signingString, string sharedKey)
{
    var key = Encoding.ASCII.GetBytes(sharedKey);
    var hmac = new HMACSHA256(key);
    var data = Encoding.ASCII.GetBytes(signingString);
    var hash = hmac.ComputeHash(data);

    return Convert.ToBase64String(hash);
}
</code></pre>

<p><code>C++</code> code:</p>

<pre><code>std::string SignatureProvider::getSignature(std::string stringToSign, std::string key)
{
    const char* pKey = key.c_str();
    const char* pData = stringToSign.c_str();
    unsigned char* result = nullptr;
    unsigned int len = 32;

    result = (unsigned char*)malloc(sizeof(char) * len);

    HMAC_CTX ctx;
    HMAC_CTX_init(&amp;ctx);
    HMAC_Init_ex(&amp;ctx, pKey, strlen(pKey), EVP_sha256(), NULL);

    HMAC_Update(&amp;ctx, (unsigned char*)&amp;pData, strlen(pData));
    HMAC_Final(&amp;ctx, result, &amp;len);
    HMAC_CTX_cleanup(&amp;ctx);

    return base64_encode(result, len);
}

std::string base64_encode(unsigned char const* bytes_to_encode, unsigned int in_len) 
{
    std::string ret;
    int i = 0;
    int j = 0;
    unsigned char char_array_3[3];
    unsigned char char_array_4[4];

    while (in_len--) {
        char_array_3[i++] = *(bytes_to_encode++);
        if (i == 3) {
            char_array_4[0] = (char_array_3[0] &amp; 0xfc) &gt;&gt; 2;
            char_array_4[1] = ((char_array_3[0] &amp; 0x03) &lt;&lt; 4) + ((char_array_3[1] &amp; 0xf0) &gt;&gt; 4);
            char_array_4[2] = ((char_array_3[1] &amp; 0x0f) &lt;&lt; 2) + ((char_array_3[2] &amp; 0xc0) &gt;&gt; 6);
            char_array_4[3] = char_array_3[2] &amp; 0x3f;

            for (i = 0; (i &lt;4); i++)
                ret += base64_chars[char_array_4[i]];
            i = 0;
        }
    }

    if (i)
    {
        for (j = i; j &lt; 3; j++)
            char_array_3[j] = '\0';

        char_array_4[0] = (char_array_3[0] &amp; 0xfc) &gt;&gt; 2;
        char_array_4[1] = ((char_array_3[0] &amp; 0x03) &lt;&lt; 4) + ((char_array_3[1] &amp; 0xf0) &gt;&gt; 4);
        char_array_4[2] = ((char_array_3[1] &amp; 0x0f) &lt;&lt; 2) + ((char_array_3[2] &amp; 0xc0) &gt;&gt; 6);

        for (j = 0; (j &lt; i + 1); j++)
            ret += base64_chars[char_array_4[j]];

        while ((i++ &lt; 3))
            ret += '=';
    }
    return ret;
}
</code></pre>

<p>I just included <code>base64</code> conversion for completeness, but it is already different before it. </p>
","<p>Why don't you use HMAC function itself? I have tried with this code and both C++ and c# code result in same HMAC :</p>

<pre><code>std::string getSignature(std::string stringToSign, std::string key)
{
    const char* pKey = key.c_str();
    const char* pData = stringToSign.c_str();
    unsigned char* result = nullptr;
    unsigned int len = 32;

    result = (unsigned char*)malloc(sizeof(char) * len);
    int nkeyLen = strlen(pKey);
    int dataLen = strlen(pData);

    result = HMAC(EVP_sha256(), pKey, nkeyLen, (unsigned char*)pData, dataLen, NULL, NULL);

    return base64_encode(result, len);
}
</code></pre>
","53362580","87","<c#><c++><sha256><hmac><rsa-sha256>","2","0","1","2018-11-18 16:30:15","53362580","9","","7444103","","2018-11-18 16:30:15","2018-11-18 13:15:41","","","2018-11-18 15:37:42"
"11789069","Approach to securing resource endpoints after authentication","<p>So, I've got my /auth endpoint all setup. I'm using Nonce-Encoded HMAC Signed by an API Key to authenticate the client. Now, I'm not completely sure I understand how to protect the rest of the resource endpoints in my API. </p>

<p>Once the client has been authenticated, should I be creating a auth token (hashing the clients public key + nonce) then storing it in the db and then with each api request (for other endpoints) hash the requesting client's public key and the nonce and comparing the two?</p>

<p>Or should I be generating some auth token after authentication and send it to the client as well as storing it, then require them to send it back with every request and compare?</p>

<p>Also, my plan here was to get a nonce before each request. Does this seem excessive?</p>

<p>Any help explaining options on how to proceed from here would be greatly appreciated.</p>
","","","87","<api><authentication><hmac>","1","","0","2012-08-04 00:45:40","","0","0","830336","","2012-08-04 00:45:40","2012-08-03 03:56:58","","",""
"57506514","BouncyCastle HMAC SHA1","<p>I have the following code using BouncyCastle (dotnet version) to get a HMAC-SHA1 from a message.</p>

<p>I have this small library class:</p>

<pre><code>public class HashingTools
{
    static string hmacKey = ""81310910a060c5705c1d3cedf370bcf9"";
    public static int HashSizeInBytes = 20;
    static KeyParameter keyParameter = null;
    private static HMac hmacInstance;

    static HashingTools()
    {
        hmacInstance = new HMac(new Sha1Digest());
        hmacInstance.Init(newKeyParameter(Encoding.UTF8.GetBytes(hmacKey)));
    }

    public static byte[] HashSha1(byte[] message)
    {
        byte[] result = new byte[hmacInstance.GetMacSize()];

        hmacInstance.BlockUpdate(message, 0, message.Length);
        hmacInstance.DoFinal(result, 0);

        return result;
    }
}
</code></pre>

<p>And I have a lot of messages going through this method, all using the same key: <code>hmacKey</code>, and I would like to speed it up as much as I can, and reuse as much as I can, still with respect to security parameters (randomness, freshness...).</p>

<p>If I try to reuse or parallellize the <code>hmac</code> instance, I get an ""array out of bounds"" exception inside <code>Org.BouncyCastle.Crypto.Macs.Hmac.BlockUpdate</code>.</p>

<p>I've created this unittest for reproduction (1 or 2 parallel hash functions goes fine, 100 goes wrong):</p>

<pre><code>[Test]
public void TestBulkHashing()
{
    var messages = new List&lt;byte[]&gt;();

    foreach (var index in Enumerable.Range(0, 100))
    {
        var buffer = new byte[4096];
        Random r = new Random();
        r.NextBytes(buffer);

        messages.Add(buffer);
    }

    Parallel.ForEach(messages, m =&gt;
    {
        HashingTools.HashSha1(m);
    });
}
</code></pre>
","<p>As correctly surmised by @dlatikay, this is a synchronization mistake. Bouncycastle's classes are not thread-safe unless they explicitly say it is.</p>

<p>If you modify your <code>HashSha1</code> method to explicitly synchronize threads you will not get the exception:</p>

<pre class=""lang-cs prettyprint-override""><code>public static byte[] HashSha1(byte[] message) {
    byte[] result = new byte[hmacInstance.GetMacSize()];
    lock(hmacInstance) {
        hmacInstance.BlockUpdate(message, 0, message.Length);
        hmacInstance.DoFinal(result, 0);
    }

    return result;
}
</code></pre>

<p>As to your question about optimization, Bouncycastle already pre-computes the part of the computation that involves the key. When you call <code>DoFinal(...)</code> the internal state is reset to this pre-computed value so you do not need to call <code>Init()</code> again for the next HMac if you use the same key. Your code already takes advantage of this optimization so I don't think there is more you can do unless you want to write your own hashing code.</p>
","57510956","85","<c#><bouncycastle><hmac><hmacsha1>","3","1","1","2019-08-15 14:08:59","57510956","3","","805407","","2019-08-15 13:03:56","2019-08-15 07:55:54","","","2019-08-15 14:08:59"
"57520630","Swift equivalent of hash_hmac in PHP","<p>I have been trying to create an oauth_signature in Swift4 which is to be sent and compared with the one already generated in the php backend code using hash_hmac function. I have used the below code to generate the signature, but the result I got is entirely different from the one generated by hash_hmac() in PHP.</p>

<pre><code>func digestHMac256(key: String) -&gt; String! {   

        let str = self.cString(using: String.Encoding.utf8)
        let strLen = self.lengthOfBytes(using: String.Encoding.utf8)

        let digestLen = Int(CC_SHA256_DIGEST_LENGTH)
        let result = UnsafeMutablePointer&lt;Any&gt;.allocate(capacity: digestLen)

        let keyStr = key.cString(using: String.Encoding.utf8)
        let keyLen = key.lengthOfBytes(using: String.Encoding.utf8)

        let algorithm = CCHmacAlgorithm(kCCHmacAlgSHA256)

        CCHmac(algorithm, keyStr!, keyLen, str!, strLen, result)

        let data = NSData(bytesNoCopy: result, length: digestLen)

        let hash = data.base64EncodedString()

        return hash
    }
</code></pre>

<p><b>This is my php code for signature generation</b></p>

<pre><code>$hash_algorithm = ""sha1""; 

$string_to_sign = ""GET&amp;http%3A%2F%2Fwww.mydomain.com%2Fv1%2Fhomepage&amp;customerid%3D1247"";

$secret = ""cs_a6twe79rt7aa"";

$signature = base64_encode( hash_hmac( $hash_algorithm, $string_to_sign, $secret, true ) );
</code></pre>

<p>Can anyone please help me with this? Thanks.</p>
","<p>In PHP code you are using SHA1 and in Swift code - SHA256. These are different hashing algorithms and that's why you're getting different signatures. You should use <code>kCCHmacAlgSHA1</code> instead.</p>

<p>Also you should avoid using <code>cString</code> API, it's not safe in Swift. It's better to use Data instead.</p>

<pre><code>func digestHMac256(key: String) -&gt; String! {

    guard
        let strData = self.data(using: String.Encoding.utf8),
        let keyData = key.data(using: String.Encoding.utf8) else {
            return """"
    }

    let digestLen = Int(CC_SHA256_DIGEST_LENGTH)
    let result = UnsafeMutablePointer&lt;Any&gt;.allocate(capacity: digestLen)

    let algorithm = CCHmacAlgorithm(kCCHmacAlgSHA256)

    strData.withUnsafeBytes { strBytes in
        keyData.withUnsafeBytes({ keyBytes in
            CCHmac(algorithm, keyBytes, keyData.count, strBytes, strData.count, result)
        })
    }

    let data = NSData(bytesNoCopy: result, length: digestLen)

    let hash = data.base64EncodedString()

    return hash
}
</code></pre>

<p>Also check the string which you're trying to encode. For example:</p>

<pre><code>let toEncode = ""GET&amp;http%3A%2F%2Fwww.mydomain.com%2Fv1%2Fhomepage&amp;customerid%3D1247""

let encoded = toEncode.digestHMac256(key: ""cs_a6twe79rt7aa"")
// dvU3NwZXqG31Sziagj3JgkUCLwTRxT3w733yRWzL7bM=
let encodedWithoutPercentEncoding = toEncode.removingPercentEncoding!.digestHMac256(key: ""cs_a6twe79rt7aa"")
// ZRmxmYPXZq/rLLkJsx1A/AtK7BarML7gu62+fYfzLvs=
</code></pre>
","57522978","85","<swift><hash><hmac><hmacsha1>","-1","0","1","2019-08-20 08:18:55","","4","0","1501847","","2019-08-16 09:01:56","2019-08-16 07:36:57","","2019-08-20 08:18:55","2019-08-16 10:24:36"
"58799761","error installing while ""hmac"" package in python 3.7","<p>when iam installing HMAC package using 
    pip install hmac
command in base environment</p>

<p>I tried updating pip, setup tools. But all are updated to latest version. but no use.</p>

<p>pip install hmac</p>

<p>error:</p>

<pre><code>C:\WINDOWS\system32&gt;pip install hmac
Collecting hmac
  Using cached https://files.pythonhosted.org/packages/b2/02/14b2ade413d3f34caffadfa6ed59f3769fe108a78e34931a2cdd1762cb32/hmac-20101005.tar.gz
Requirement already satisfied: setuptools in c:\programdata\anaconda3\lib\site-packages (from hmac) (41.4.0)
Collecting hashlib
  Using cached https://files.pythonhosted.org/packages/74/bb/9003d081345e9f0451884146e9ea2cff6e4cc4deac9ffd4a9ee98b318a49/hashlib-20081119.zip
    ERROR: Command errored out with exit status 1:
     command: 'c:\programdata\anaconda3\python.exe' -c 'import sys, setuptools, tokenize; sys.argv[0] = '""'""'C:\\Users\\Admin\\AppData\\Local\\Temp\\pip-install-7dt9idd0\\hashlib\\setup.py'""'""'; __file__='""'""'C:\\Users\\Admin\\AppData\\Local\\Temp\\pip-install-7dt9idd0\\hashlib\\setup.py'""'""';f=getattr(tokenize, '""'""'open'""'""', open)(__file__);code=f.read().replace('""'""'\r\n'""'""', '""'""'\n'""'""');f.close();exec(compile(code, __file__, '""'""'exec'""'""'))' egg_info --egg-base 'C:\Users\Admin\AppData\Local\Temp\pip-install-7dt9idd0\hashlib\pip-egg-info'
         cwd: C:\Users\Admin\AppData\Local\Temp\pip-install-7dt9idd0\hashlib\
    Complete output (22 lines):
    Traceback (most recent call last):
      File ""&lt;string&gt;"", line 1, in &lt;module&gt;
      File ""c:\programdata\anaconda3\lib\site-packages\setuptools\__init__.py"", line 18, in &lt;module&gt;
        import setuptools.version
      File ""c:\programdata\anaconda3\lib\site-packages\setuptools\version.py"", line 1, in &lt;module&gt;
        import pkg_resources
      File ""c:\programdata\anaconda3\lib\site-packages\pkg_resources\__init__.py"", line 36, in &lt;module&gt;
        import email.parser
      File ""c:\programdata\anaconda3\lib\email\parser.py"", line 12, in &lt;module&gt;
        from email.feedparser import FeedParser, BytesFeedParser
      File ""c:\programdata\anaconda3\lib\email\feedparser.py"", line 27, in &lt;module&gt;
        from email._policybase import compat32
      File ""c:\programdata\anaconda3\lib\email\_policybase.py"", line 9, in &lt;module&gt;
        from email.utils import _has_surrogates
      File ""c:\programdata\anaconda3\lib\email\utils.py"", line 28, in &lt;module&gt;
        import random
      File ""c:\programdata\anaconda3\lib\random.py"", line 46, in &lt;module&gt;
        from hashlib import sha512 as _sha512
      File ""C:\Users\Admin\AppData\Local\Temp\pip-install-7dt9idd0\hashlib\hashlib.py"", line 80
        raise ValueError, ""unsupported hash type""
                        ^
    SyntaxError: invalid syntax
    ----------------------------------------
ERROR: Command errored out with exit status 1: python setup.py egg_info Check the logs for full command output
</code></pre>
","<p>The syntax error is because the reported line <code>raise ValueError, ""unsupported hash type""</code> is using syntax which is not supported in python 3.x, which raises the suspission that the module you are trying to install is not written for python 3.x but for 2.x</p>

<p>The module you are trying to install is <a href=""https://pypi.org/project/hmac/"" rel=""nofollow noreferrer"">this one</a>.</p>

<p>The only file in the pypi project is from  06.10.2010, so almost 9 years old and checking the project description, we get:</p>

<blockquote>
  <h1>HMAC</h1>
  
  <p>This is a stand alone packaging of the hashlib compatible hmac library
  included with Python 2.5 so that it can be used together with the hashlib
  backport on older versions of Python (tested on 2.4). Not needed with Python
  2.5 or later.</p>
</blockquote>

<p>So indeed, <code>hmac</code> was written with only python 2x in mind and no  updates since. You probably want to look for a different library or just use <code>hmac</code> from the <a href=""https://docs.python.org/3.7/library/hmac.html"" rel=""nofollow noreferrer"">python standard library</a> for which no additional installations are needed.</p>
","58801782","83","<python-3.x><pip><hmac>","-2","1","1","2019-11-11 12:53:27","","1","","1016216","","2019-11-11 10:45:25","2019-11-11 10:38:55","","","2019-11-11 12:53:27"
"51861644","Validate Facebook signed_request signature in Javascript","<p>I'm building a Facebook Page app in Classic ASP. I've been unable to match the signature that Facebook passes into the app as the first part of the POSTed <code>signed_request</code>.</p>

<p>Because there are few libraries for cryptography in VBScript, I'm using server side Javascript and the crypto-js library from <a href=""https://code.google.com/archive/p/crypto-js/"" rel=""nofollow noreferrer"">https://code.google.com/archive/p/crypto-js/</a></p>

<p>I've tried to translate the PHP code example from Facebook's docs at <a href=""https://developers.facebook.com/docs/games/gamesonfacebook/login#parsingsr"" rel=""nofollow noreferrer"">https://developers.facebook.com/docs/games/gamesonfacebook/login#parsingsr</a> into Javascript. I can generate an HMAC SHA256 hash of the <code>signed_request</code> payload but that doesn't match the <code>signed_request</code> signature.</p>

<p>I think the problem is that Facebook's signature is in a different format. It looks to be binary (<em>~1抚Ö.....</em>) while the HMAC SHA256 hash I'm generating is a hexadecimal string (<em>7f7e8f5f.....</em>). In Facebook's PHP example the <code>hash_hmac</code> function uses the raw binary parameter. So I think I need to either convert Facebook's signature to hexadecimal or my signature to binary in order to do an ""apples-to-apples"" comparison and get a match.</p>

<p>Here's my code:</p>

<pre><code>/* Use the libraries from https://code.google.com/archive/p/crypto-js/
crypto-js/crypto-js.min.js
crypto-js/hmac-sha256.min.js
crypto-js/enc-base64.min.js
*/

var signedRequest = Request.queryString(""signed_request"")

var FB_APP_SECRET = ""459f038....."";

var arSR = signedRequest.split(""."");
var encodedSig = arSR[0];
var encodedPayload = arSR[1];

var payload = base64UrlDecode(encodedPayload);
var sig = base64UrlDecode(encodedSig);

var expectedSig;

expectedSig = CryptoJS.HmacSHA256(encodedPayload, FB_APP_SECRET); // Unaltered payload string; no match
expectedSig = CryptoJS.HmacSHA256(payload, FB_APP_SECRET); // base64-decoded payload string; no match

if (sig == expectedSig) {
    Response.write(payload);
} else {
    Response.write(""Bad signature"");
}

function base64UrlDecode(input) {
    // Replace characters and convert from base64.
    return Base64.decode(input.replace(""-"", ""+"").replace(""_"", ""/""));
}
</code></pre>
","<p>After looking into the crypto-js documentation about encoding I found the solution. The de-/encoding methods provided by crypto-js are listed under 'Encoders' at the bottom of <a href=""https://code.google.com/archive/p/crypto-js/"" rel=""nofollow noreferrer"">https://code.google.com/archive/p/crypto-js/</a> (Thanks for the nudge, CBroe.)</p>

<p>The solution was to use <code>.toString()</code> on the signatures. It seems like crypto-js uses a word format that was preventing a comparison match. I did also switch to using the base64 decoding provided by crypto-js in order to stick with one library.</p>

<p>Here's my updated code:</p>

<pre><code>/* Use the libraries from https://code.google.com/archive/p/crypto-js/
crypto-js/crypto-js.min.js
crypto-js/hmac-sha256.min.js
crypto-js/enc-base64.min.js
*/

var signedRequest = Request.queryString(""signed_request"")

var FB_APP_SECRET = ""459f038....."";

var arSR = signedRequest.split(""."");
var encodedSig = arSR[0];
var encodedPayload = arSR[1];

var payload = base64UrlDecode(encodedPayload);
var sig = base64UrlDecode(encodedSig);

var expectedSig = CryptoJS.HmacSHA256(encodedPayload, FB_APP_SECRET); /******** Correct payload */

if (sig.toString() != expectedSig.toString()) { /******* Use .toString() to convert to normal strings */
    Response.write(payload);
} else {
    Response.write(""Bad signature"");
}

function base64UrlDecode(input) {
    return CryptoJS.enc.Base64.parse( /******** Decode */
        input.replace(""-"", ""+"").replace(""_"", ""/"") // Replace characters
    );
}
</code></pre>
","51899527","83","<javascript><facebook><sha256><hmac>","0","0","1","2018-08-17 16:24:41","51899527","1","","1000551","","2018-08-15 15:26:09","2018-08-15 15:20:57","","","2018-08-17 16:24:41"
"54301110","HMAC SQL Server to MySQL function","<p>I've been trying to sign a signature 4 payload and for various reasons I'm unable to use one of the AWS SDKs.  I've done it before by calling the below SQL Server Function, but I have to do it this time in MySQL.</p>

<p>How can I convert this SQL Server function to MySQL?  I've tried myself and I've tried a few online converters. Unfortunately I've run out of time trying to learn MySQL well enough to figure it out.</p>

<pre><code>DELIMITER //

CREATE FUNCTION HMAC (
    p_algo VARCHAR(20)
    ,p_key LONGBLOB
    ,p_data LONGBLOB
    )
    /* This function only takes VARBINARY parameters instead of VARCHAR
to prevent problems with implicit conversion from NVARCHAR to VARCHAR 
which result in incorrect hashes for inputs including non-ASCII characters. 
Always cast @key and @data parameters to VARBINARY when using this function. 
Tested against HMAC vectors for MD5 and SHA1 from RFC 2202 */

/*
List of secure hash algorithms (parameter @algo) supported by MSSQL 
version. This is what is passed to the HASHBYTES system function.
Omit insecure hash algorithms such as MD2 through MD5
2005-2008R2: SHA1 
2012-2016: SHA1 | SHA2_256 | SHA2_512 
*/
RETURNS VARBINARY(64)
BEGIN
    DECLARE v_ipad BIGINT;
    DECLARE v_opad BIGINT;
    DECLARE v_i VARBINARY(64);
    DECLARE v_o VARBINARY(64);
    DECLARE v_pos INTEGER;

    -- SQL 2005 only allows XOR operations on integer types, so use bigint and interate 8 times
    SET v_ipad = cast(0x3636363636363636 AS BIGINT); -- constants from HMAC definition
    SET v_opad = cast(0x5C5C5C5C5C5C5C5C AS BIGINT);

    IF char_length(rtrim(p_key)) &gt; 64 THEN -- if the key is grater than 512 bits we hash it first per HMAC definition
        SET p_key = cast(hashbytes(p_algo, p_key) AS BINARY (64));
    ELSE
        SET p_key = cast(p_key AS BINARY (64));
    END IF; -- otherwise pad it out to 512 bits with zeros

    SET v_pos = 1;
    SET v_i = cast('' AS VARBINARY(64)); -- initialize as empty binary value

    WHILE v_pos &lt;= 57
    DO
        SET v_i = v_i + cast((substring(p_key, v_pos, 8) ^; v_ipad) AS VARBINARY(64))
        SET v_pos = v_pos + 8;
    END WHILE;

    SET v_pos = 1;
    SET v_o = cast('' AS VARBINARY(64)); -- initialize as empty binary value

    WHILE v_pos &lt;= 57
    DO
        SET v_o = v_o + cast((substring(p_key, v_pos, 8) ^; v_opad) AS VARBINARY(64))
        SET v_pos = v_pos + 8;
    END WHILE;

    RETURN hashbytes(p_algo, v_o + hashbytes(p_algo, v_i + p_data));
END;
//

DELIMITER ;




GRANT EXECUTE
    ON HMAC
    TO PUBLIC;


/*
Copyright © 2012 Ryan Malayter. All Rights Reserved. 
Redistribution and use in source and binary forms, with or without 
modification, are permitted provided that the following conditions are 
met: 
1. Redistributions of source code must retain the above copyright 
notice, this list of conditions and the following disclaimer. 
2. Redistributions in binary form must reproduce the above copyright 
notice, this list of conditions and the following disclaimer in the 
documentation and/or other materials provided with the distribution. 
3. The name of the author may not be used to endorse or promote products 
derived from this software without specific prior written permission. 
THIS SOFTWARE IS PROVIDED BY Ryan Malayter ""AS IS"" AND ANY EXPRESS OR 
IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, 
INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, 
STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN 
ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
POSSIBILITY OF SUCH DAMAGE. 
*/
</code></pre>
","","","83","<mysql><sql-server><amazon-web-services><hmac>","0","","0","2019-03-30 22:07:50","","2","","472495","","2019-03-30 22:07:50","2019-01-22 04:05:20","","",""
"52566923","Example AWS4 S3 POST signature calculation fails","<pre><code>var crypto = require('crypto')
var secret = 'wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY'
var date = '20151229'
var region = 'us-east-1'
var service = 's3'
var terminator = 'aws4_request'

var policyEncoded = 'eyAiZXhwaXJhdGlvbiI6ICIyMDE1LTEyLTMwVDEyOjAwOjAwLjAwMFoiLA0KICAiY29uZGl0aW9ucyI6IFsNCiAgICB7ImJ1Y2tldCI6ICJzaWd2NGV4YW1wbGVidWNrZXQifSwNCiAgICBbInN0YXJ0cy13aXRoIiwgIiRrZXkiLCAidXNlci91c2VyMS8iXSwNCiAgICB7ImFjbCI6ICJwdWJsaWMtcmVhZCJ9LA0KICAgIHsic3VjY2Vzc19hY3Rpb25fcmVkaXJlY3QiOiAiaHR0cDovL3NpZ3Y0ZXhhbXBsZWJ1Y2tldC5zMy5hbWF6b25hd3MuY29tL3N1Y2Nlc3NmdWxfdXBsb2FkLmh0bWwifSwNCiAgICBbInN0YXJ0cy13aXRoIiwgIiRDb250ZW50LVR5cGUiLCAiaW1hZ2UvIl0sDQogICAgeyJ4LWFtei1tZXRhLXV1aWQiOiAiMTQzNjUxMjM2NTEyNzQifSwNCiAgICB7IngtYW16LXNlcnZlci1zaWRlLWVuY3J5cHRpb24iOiAiQUVTMjU2In0sDQogICAgWyJzdGFydHMtd2l0aCIsICIkeC1hbXotbWV0YS10YWciLCAiIl0sDQoNCiAgICB7IngtYW16LWNyZWRlbnRpYWwiOiAiQUtJQUlPU0ZPRE5ON0VYQU1QTEUvMjAxNTEyMjkvdXMtZWFzdC0xL3MzL2F3czRfcmVxdWVzdCJ9LA0KICAgIHsieC1hbXotYWxnb3JpdGhtIjogIkFXUzQtSE1BQy1TSEEyNTYifSwNCiAgICB7IngtYW16LWRhdGUiOiAiMjAxNTEyMjlUMDAwMDAwWiIgfQ0KICBdDQp9'

console.log('Calculated answer:', crypto
    .createHmac('sha256', 'AWS4' + secret)
    .update(date)
    .update(region)
    .update(service)
    .update(terminator)
    .update(policyEncoded)
    .digest('hex'))

console.log('Correct answer   :', '8afdbf4008c03f22c2cd3cdb72e4afbb1f6a588f3255ac628749a66d7f09699e')
</code></pre>

<p>I wrote the code to calculate the signature for AWS4 S3 upload from the browser.
The example <code>StringToSign</code> comes from here:</p>

<p><a href=""https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-post-example.html"" rel=""nofollow noreferrer"">Signature v4 calculation example for POST</a></p>

<p>The expected output is also present on the same page.</p>

<p>The algorithm to sign is presented here:</p>

<p><a href=""https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-authentication-HTTPPOST.html"" rel=""nofollow noreferrer"">Calculating a signature v4 for POST</a></p>

<p>But the result I am getting does not match the correct answer. Please help to locate the error.</p>

<p>I've googled and searched dozens of answers here on SO already, spend 10+ hours.</p>
","<p>It does not work because <code>.update()</code> merely writes new data into a hash stream. AWS requires you to hash the result of previous steps with a new key like this:</p>

<pre><code>var x
x = crypto.createHmac('sha256', 'AWS4' + secret).update(date).digest()
x = crypto.createHmac('sha256', x).update(region).digest()
x = crypto.createHmac('sha256', x).update(service).digest()
x = crypto.createHmac('sha256', x).update(terminator).digest()
x = crypto.createHmac('sha256', x).update(policyEncoded).digest()
console.log('Calculated answer:', x.toString('hex'))
console.log('Correct answer   :', '8afdbf4008c03f22c2cd3cdb72e4afbb1f6a588f3255ac628749a66d7f09699e')
</code></pre>

<p>Output:</p>

<pre><code>Calculated answer: 8afdbf4008c03f22c2cd3cdb72e4afbb1f6a588f3255ac628749a66d7f09699e
Correct answer   : 8afdbf4008c03f22c2cd3cdb72e4afbb1f6a588f3255ac628749a66d7f09699e
</code></pre>
","52569412","82","<node.js><amazon-s3><digital-signature><sha256><hmac>","1","1","2","2018-11-27 00:20:50","53491021","0","","1968972","","2018-09-29 09:57:13","2018-09-29 09:17:29","","","2018-09-29 14:40:59"
"52566923","Example AWS4 S3 POST signature calculation fails","<pre><code>var crypto = require('crypto')
var secret = 'wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY'
var date = '20151229'
var region = 'us-east-1'
var service = 's3'
var terminator = 'aws4_request'

var policyEncoded = 'eyAiZXhwaXJhdGlvbiI6ICIyMDE1LTEyLTMwVDEyOjAwOjAwLjAwMFoiLA0KICAiY29uZGl0aW9ucyI6IFsNCiAgICB7ImJ1Y2tldCI6ICJzaWd2NGV4YW1wbGVidWNrZXQifSwNCiAgICBbInN0YXJ0cy13aXRoIiwgIiRrZXkiLCAidXNlci91c2VyMS8iXSwNCiAgICB7ImFjbCI6ICJwdWJsaWMtcmVhZCJ9LA0KICAgIHsic3VjY2Vzc19hY3Rpb25fcmVkaXJlY3QiOiAiaHR0cDovL3NpZ3Y0ZXhhbXBsZWJ1Y2tldC5zMy5hbWF6b25hd3MuY29tL3N1Y2Nlc3NmdWxfdXBsb2FkLmh0bWwifSwNCiAgICBbInN0YXJ0cy13aXRoIiwgIiRDb250ZW50LVR5cGUiLCAiaW1hZ2UvIl0sDQogICAgeyJ4LWFtei1tZXRhLXV1aWQiOiAiMTQzNjUxMjM2NTEyNzQifSwNCiAgICB7IngtYW16LXNlcnZlci1zaWRlLWVuY3J5cHRpb24iOiAiQUVTMjU2In0sDQogICAgWyJzdGFydHMtd2l0aCIsICIkeC1hbXotbWV0YS10YWciLCAiIl0sDQoNCiAgICB7IngtYW16LWNyZWRlbnRpYWwiOiAiQUtJQUlPU0ZPRE5ON0VYQU1QTEUvMjAxNTEyMjkvdXMtZWFzdC0xL3MzL2F3czRfcmVxdWVzdCJ9LA0KICAgIHsieC1hbXotYWxnb3JpdGhtIjogIkFXUzQtSE1BQy1TSEEyNTYifSwNCiAgICB7IngtYW16LWRhdGUiOiAiMjAxNTEyMjlUMDAwMDAwWiIgfQ0KICBdDQp9'

console.log('Calculated answer:', crypto
    .createHmac('sha256', 'AWS4' + secret)
    .update(date)
    .update(region)
    .update(service)
    .update(terminator)
    .update(policyEncoded)
    .digest('hex'))

console.log('Correct answer   :', '8afdbf4008c03f22c2cd3cdb72e4afbb1f6a588f3255ac628749a66d7f09699e')
</code></pre>

<p>I wrote the code to calculate the signature for AWS4 S3 upload from the browser.
The example <code>StringToSign</code> comes from here:</p>

<p><a href=""https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-post-example.html"" rel=""nofollow noreferrer"">Signature v4 calculation example for POST</a></p>

<p>The expected output is also present on the same page.</p>

<p>The algorithm to sign is presented here:</p>

<p><a href=""https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-authentication-HTTPPOST.html"" rel=""nofollow noreferrer"">Calculating a signature v4 for POST</a></p>

<p>But the result I am getting does not match the correct answer. Please help to locate the error.</p>

<p>I've googled and searched dozens of answers here on SO already, spend 10+ hours.</p>
","<p>Short version of exebook answer:</p>

<pre><code>var hmac = require('crypto').createHmac
var secret = 'wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY'
var req = {
  date: '20151229',
  region: 'us-east-1',
  service: 's3',
  terminator: 'aws4_request',
  policyEncoded: 'eyAiZXhwaXJhdGlvbiI6ICIyMDE1LTEyLTMwVDEyOjAwOjAwLjAwMFoiLA0KICAiY29uZGl0aW9ucyI6IFsNCiAgICB7ImJ1Y2tldCI6ICJzaWd2NGV4YW1wbGVidWNrZXQifSwNCiAgICBbInN0YXJ0cy13aXRoIiwgIiRrZXkiLCAidXNlci91c2VyMS8iXSwNCiAgICB7ImFjbCI6ICJwdWJsaWMtcmVhZCJ9LA0KICAgIHsic3VjY2Vzc19hY3Rpb25fcmVkaXJlY3QiOiAiaHR0cDovL3NpZ3Y0ZXhhbXBsZWJ1Y2tldC5zMy5hbWF6b25hd3MuY29tL3N1Y2Nlc3NmdWxfdXBsb2FkLmh0bWwifSwNCiAgICBbInN0YXJ0cy13aXRoIiwgIiRDb250ZW50LVR5cGUiLCAiaW1hZ2UvIl0sDQogICAgeyJ4LWFtei1tZXRhLXV1aWQiOiAiMTQzNjUxMjM2NTEyNzQifSwNCiAgICB7IngtYW16LXNlcnZlci1zaWRlLWVuY3J5cHRpb24iOiAiQUVTMjU2In0sDQogICAgWyJzdGFydHMtd2l0aCIsICIkeC1hbXotbWV0YS10YWciLCAiIl0sDQoNCiAgICB7IngtYW16LWNyZWRlbnRpYWwiOiAiQUtJQUlPU0ZPRE5ON0VYQU1QTEUvMjAxNTEyMjkvdXMtZWFzdC0xL3MzL2F3czRfcmVxdWVzdCJ9LA0KICAgIHsieC1hbXotYWxnb3JpdGhtIjogIkFXUzQtSE1BQy1TSEEyNTYifSwNCiAgICB7IngtYW16LWRhdGUiOiAiMjAxNTEyMjlUMDAwMDAwWiIgfQ0KICBdDQp9'
}
var signature = Object.keys(req).
  reduce((h, k) =&gt; hmac('sha256', h).update(req[k]).digest(), 'AWS4' + secret).
  toString('hex')
console.log(signature)
//8afdbf4008c03f22c2cd3cdb72e4afbb1f6a588f3255ac628749a66d7f09699e
</code></pre>
","53491021","82","<node.js><amazon-s3><digital-signature><sha256><hmac>","1","1","2","2018-11-27 00:20:50","53491021","0","","1968972","","2018-09-29 09:57:13","2018-09-29 09:17:29","","","2018-11-27 00:20:50"
"39779681","HMAC in C++ that outputs the same value in Java","<p>I am unable to get the same output from HMAC in C++ like the one i wrote in java, they have different output.</p>

<h1>Java:</h1>

<pre><code>private static byte[] hmac_sha(String crypto, byte[] keyBytes, byte[] text) {
    try {
        Mac hmac;
        hmac = Mac.getInstance(crypto);
        SecretKeySpec macKey = new SecretKeySpec(keyBytes, ""RAW"");
        hmac.init(macKey);
        return hmac.doFinal(text);
    } catch (GeneralSecurityException gse) {
        throw new UndeclaredThrowableException(gse);
    }
}
</code></pre>

<p>C++:</p>

<pre><code>BYTE *key = (BYTE *)encodedSeed.data();
    BYTE digest[20];
    const char *message = encodedTime.data();
    CHMAC_SHA1 HMAC;
    HMAC.HMAC_SHA1((BYTE *)message, strlen(message), key, sizeof(key), digest);

    wstring finalDigest;

    for (int i = 0; i &lt; 20; i++){

        finalDigest.push_back(std::btowc(digest[i]));
    }


    return finalDigest;
</code></pre>
","","","82","<java><c++><hmac>","1","","0","2016-09-29 20:45:19","","5","","","","","2016-09-29 20:45:19","","",""
"37209712","Python3, hmac returns wrong output?! ARM71, 32bit","<p>I've asked another question here recently, regarding python, flask with a badsignature exception for sessions (<a href=""https://stackoverflow.com/questions/37158432/python-flask-session-cookie-bad-signature-exception"">https://stackoverflow.com/questions/37158432/python-flask-session-cookie-bad-signature-exception</a>) , and I've been working with this problem now for a while, an seen another problem.</p>

<p>When signing a client-side session for my flask application <em>hmac</em> is used to hash the signature. On my personal computer this works fine, but when moving this to the embedded device built for this application hmac occasionally fails to hash the key (wrong output), which makes the session data invalid.</p>

<p>I made a small test program running the hmac.new() &amp; .update() multiple times(10000) without any errors (on the target machine). But when the call is made inside the flask application the error occur in about 60% of the calls. </p>

<p>The call is made inside the ""derive_key"" method of itsdangerous.py and it looks like this:</p>

<pre><code>  def derive_key(self):
        """"""This method is called to derive the key.  If you're unhappy with
        the default key derivation choices you can override them here.
        Keep in mind that the key derivation in itsdangerous is not intended
        to be used as a security method to make a complex key out of a short
        password.  Instead you should use large random secret keys.
        """"""
        salt = want_bytes(self.salt)
        if self.key_derivation == 'concat':
            return self.digest_method(salt + self.secret_key).digest()
        elif self.key_derivation == 'django-concat':
            return self.digest_method(salt + b'signer' +
                self.secret_key).digest()
        elif self.key_derivation == 'hmac':
            mac = hmac.new(self.secret_key, digestmod=self.digest_method)
            print(""mac1:"", binascii.hexlify(mac.digest()))  #1
            mac.update(salt)
            print(""mac2:"", binascii.hexlify(mac.digest()))  #2
            return mac.digest()
        elif self.key_derivation == 'none':
            return self.secret_key
        else:
            raise TypeError('Unknown key derivation method')
</code></pre>

<p>digestmod = hashlib.sha1</p>

<p>With the secret_key = b'testing' and salt=b'cookie-session' the expected output is:</p>

<pre><code>mac1: b'6ab6fc891eefd3b78743ea28b1803811561a7c9b'
mac2: b'd58bd52b4ced54374ea5baca0b6aa52b0e03af74'
</code></pre>

<p>But many times these values differ. 
I've also seen that the output of mac1 &amp; mac2 is equal! like the salt did not modify the result.</p>

<p>I have also asked this question here:
<a href=""https://github.com/pallets/flask/issues/1808"" rel=""nofollow noreferrer"">https://github.com/pallets/flask/issues/1808</a></p>

<p>This application is running on an ARM7, 32bit.
All libraries installed using yocto.</p>

<p><strong>UPDATE:</strong>
For every call to derive_key() I also print salt and key: The output for a couple of requests is the following:</p>

<pre><code>...: OPEN THE SESSION       OK!
...: DERIVE KEY:
...: Salt: b'cookie-session'
...: Key: b'testing'
...: mac1: b'j\xb6\xfc\x89\x1e\xef\xd3\xb7\x87C\xea(\xb1\x808\x11V\x1a|\x9b'
...: mac2: b'\xd5\x8b\xd5+L\xedT7N\xa5\xba\xca\x0bj\xa5+\x0e\x03\xaft'
...: .-.-.-.-.-.-.
...: SAVES THE SESSION      OK!
...: DERIVE KEY:
...: Salt: b'cookie-session'
...: Key: b'testing'
...: mac1: b'j\xb6\xfc\x89\x1e\xef\xd3\xb7\x87C\xea(\xb1\x808\x11V\x1a|\x9b'
...: mac2: b'\xd5\x8b\xd5+L\xedT7N\xa5\xba\xca\x0bj\xa5+\x0e\x03\xaft'
...: .-.-.-.-.-.-.
...: OPEN THE SESSION       NOT OKAY!!
...: DERIVE KEY:
...: Salt: b'cookie-session'
...: Key: b'testing'
...: mac1: b'\xc8D\xf0\x95\xc5R\x9f\xe3n\xc7\xa2 `7\xa9\xdb\xdd\xd8F\x85'
...: mac2: b'\x156\xbf\xb6\x97}m\xe9[\xe0\xea\xd15\xb4\xff\x00\xf9\x14B\x0c'
...: .-.-.-.-.-.-.
...: SAVES THE SESSION      OK!
...: DERIVE KEY:
...: Salt: b'cookie-session'
...: Key: b'testing'
...: mac1: b'j\xb6\xfc\x89\x1e\xef\xd3\xb7\x87C\xea(\xb1\x808\x11V\x1a|\x9b'
...: mac2: b'\xd5\x8b\xd5+L\xedT7N\xa5\xba\xca\x0bj\xa5+\x0e\x03\xaft'
...: .-.-.-.-.-.-.
...: OPEN THE SESSION       OK!
...: DERIVE KEY:
...: Salt: b'cookie-session'
...: Key: b'testing'
...: mac1: b'j\xb6\xfc\x89\x1e\xef\xd3\xb7\x87C\xea(\xb1\x808\x11V\x1a|\x9b'
...: mac2: b'\xd5\x8b\xd5+L\xedT7N\xa5\xba\xca\x0bj\xa5+\x0e\x03\xaft'
...: .-.-.-.-.-.-.
...: SAVES THE SESSION      OK!
...: DERIVE KEY:
...: Salt: b'cookie-session'
...: Key: b'testing'
...: mac1: b'j\xb6\xfc\x89\x1e\xef\xd3\xb7\x87C\xea(\xb1\x808\x11V\x1a|\x9b'
...: mac2: b'\xd5\x8b\xd5+L\xedT7N\xa5\xba\xca\x0bj\xa5+\x0e\x03\xaft'
...: .-.-.-.-.-.-.
...: OPEN THE SESSION       OK!
...: DERIVE KEY:
...: Salt: b'cookie-session'
...: Key: b'testing'
...: mac1: b'j\xb6\xfc\x89\x1e\xef\xd3\xb7\x87C\xea(\xb1\x808\x11V\x1a|\x9b'
...: mac2: b'\xd5\x8b\xd5+L\xedT7N\xa5\xba\xca\x0bj\xa5+\x0e\x03\xaft'
...: .-.-.-.-.-.-.
...: SAVES THE SESSION      OK!
...: DERIVE KEY:
...: Salt: b'cookie-session'
...: Key: b'testing'
...: mac1: b'j\xb6\xfc\x89\x1e\xef\xd3\xb7\x87C\xea(\xb1\x808\x11V\x1a|\x9b'
...: mac2: b'\xd5\x8b\xd5+L\xedT7N\xa5\xba\xca\x0bj\xa5+\x0e\x03\xaft'
...: .-.-.-.-.-.-.
...: OPEN THE SESSION       NOT OKAY!!
...: DERIVE KEY:
...: Salt: b'cookie-session'
...: Key: b'testing'
...: mac1: b'D\xdaR}\xa0\xf2\x9awpP\xa0\x018b\xfcfH}\xcau'
...: mac2: b'\xd5\x8b\xd5+L\xedT7N\xa5\xba\xca\x0bj\xa5+\x0e\x03\xaft'
...: .-.-.-.-.-.-.
...: SAVES THE SESSION      OK!
...: DERIVE KEY:
...: Salt: b'cookie-session'
...: Key: b'testing'
...: mac1: b'j\xb6\xfc\x89\x1e\xef\xd3\xb7\x87C\xea(\xb1\x808\x11V\x1a|\x9b'
...: mac2: b'\xd5\x8b\xd5+L\xedT7N\xa5\xba\xca\x0bj\xa5+\x0e\x03\xaft'
...: .-.-.-.-.-.-.
...: OPEN THE SESSION       OK!
...: DERIVE KEY:
...: Salt: b'cookie-session'
...: Key: b'testing'
...: mac1: b'j\xb6\xfc\x89\x1e\xef\xd3\xb7\x87C\xea(\xb1\x808\x11V\x1a|\x9b'
...: mac2: b'\xd5\x8b\xd5+L\xedT7N\xa5\xba\xca\x0bj\xa5+\x0e\x03\xaft'
...: .-.-.-.-.-.-.
...: SAVES THE SESSION      OK!
...: DERIVE KEY:
...: Salt: b'cookie-session'
...: Key: b'testing'
...: mac1: b'j\xb6\xfc\x89\x1e\xef\xd3\xb7\x87C\xea(\xb1\x808\x11V\x1a|\x9b'
...: mac2: b'\xd5\x8b\xd5+L\xedT7N\xa5\xba\xca\x0bj\xa5+\x0e\x03\xaft'
...: .-.-.-.-.-.-.
...: OPEN THE SESSION       NOT OKAY!!
...: DERIVE KEY:
...: Salt: b'cookie-session'
...: Key: b'testing'
...: mac1: b'=\xcc\x01\xee""\x0ed\xde\xf4z\run\rMm\x98\xcb\x0e\xba'
...: mac2: b'\xd5\x8b\xd5+L\xedT7N\xa5\xba\xca\x0bj\xa5+\x0e\x03\xaft'
...: .-.-.-.-.-.-.
...: SAVES THE SESSION      OK!
...: DERIVE KEY:
...: Salt: b'cookie-session'
...: Key: b'testing'
...: mac1: b'j\xb6\xfc\x89\x1e\xef\xd3\xb7\x87C\xea(\xb1\x808\x11V\x1a|\x9b'
...: mac2: b'\xd5\x8b\xd5+L\xedT7N\xa5\xba\xca\x0bj\xa5+\x0e\x03\xaft'
...: .-.-.-.-.-.-.
...: OPEN THE SESSION       OK!
...: DERIVE KEY:
...: Salt: b'cookie-session'
...: Key: b'testing'
...: mac1: b'j\xb6\xfc\x89\x1e\xef\xd3\xb7\x87C\xea(\xb1\x808\x11V\x1a|\x9b'
...: mac2: b'\xd5\x8b\xd5+L\xedT7N\xa5\xba\xca\x0bj\xa5+\x0e\x03\xaft'
...: .-.-.-.-.-.-.
...: SAVES THE SESSION      OK!
...: DERIVE KEY:
...: Salt: b'cookie-session'
...: Key: b'testing'
...: mac1: b'j\xb6\xfc\x89\x1e\xef\xd3\xb7\x87C\xea(\xb1\x808\x11V\x1a|\x9b'
...: mac2: b'\xd5\x8b\xd5+L\xedT7N\xa5\xba\xca\x0bj\xa5+\x0e\x03\xaft'
...: .-.-.-.-.-.-.
</code></pre>

<p>I added the ""OK!"" and ""NOT OKAY!"" so that it is easier for you to see which executions went wrong.</p>

<p>(I also see that it, in this example, is not 60% fails. )</p>

<p>In the output above, Only the ""Open session""-event failed. So i tried it again to see if it is only when saving the session, but it happens for Save-session also..</p>

<pre><code>...: SAVES THE SESSION      NOT OK!   
...: DERIVE KEY:
...: Salt: b'cookie-session'
...: Key: b'testing'
...: mac1: b'\xc8D\xf0\x95\xc5R\x9f\xe3n\xc7\xa2 `7\xa9\xdb\xdd\xd8F\x85'
...: mac2: b'\xc8D\xf0\x95\xc5R\x9f\xe3n\xc7\xa2 `7\xa9\xdb\xdd\xd8F\x85'
</code></pre>

<p>I finally found a small example program that reproduces the error.</p>

<pre><code>#!/usr/bin/env python

async_mode = ""eventlet""

if async_mode is None:
    try:
        import eventlet
        async_mode = 'eventlet'
    except ImportError:
        pass

    if async_mode is None:
        try:
            from gevent import monkey
            async_mode = 'gevent'
        except ImportError:
            pass

    if async_mode is None:
        async_mode = 'threading'

    print('async_mode is ' + async_mode)

if async_mode == 'eventlet':
    import eventlet
    eventlet.monkey_patch()
elif async_mode == 'gevent':
    from gevent import monkey
    monkey.patch_all()

import hmac
import hashlib
import time
from threading import Thread
thread = None


def background_thread():
    time.sleep(0.5)
    error_mac = """"
    while True:
        error_mac = """"
        time.sleep(0.1)
        counter = 0
        for i in range(0, 40):
            time.sleep(0.001)
            mac = hmac.new(b'testing', digestmod=hashlib.sha1).digest() # == b'j\xb6\xfc\x89\x1e\xef\xd3\xb7\x87C\xea(\xb1\x808\x11V\x1a|\x9b':

            if not mac ==  b'j\xb6\xfc\x89\x1e\xef\xd3\xb7\x87C\xea(\xb1\x808\x11V\x1a|\x9b':
                counter = counter + 1
                error_mac = mac
        if error_mac:
            print(""Example of the wrong hmacs calculated:"")
            print(error_mac)
            print(""--------------------------------------"")
        print(""{} - {}"".format(time.time(), counter))

def index():
    global thread
    if thread is None:
        thread = Thread(target=background_thread)
        thread.daemon = True
        thread.start()

    for i in range(0,40):
        print(hmac.new(b'testing', digestmod=hashlib.sha1).digest())
    thread.join()
    return ""ok""


if __name__ == '__main__':
    index()
</code></pre>

<p>Usually if there is an error of the first 20 hashes (created by the main thread) also the second thread will get the wrong hash. If no error occur in the main thread, and the second thread outputs only timestsamp and zeros, then restart the program.</p>

<p>It async_mode is set to ""threading"" everything works fine. But when set to ""gevent"" or ""eventlet"" this error occur.</p>

<p>Output with error:</p>

<pre><code>b'D\xb4V\r9$gy\xe1 \x13\xd8\xc4f\x93O\x9e\xfa\x02\xff'
b'D\xb4V\r9$gy\xe1 \x13\xd8\xc4f\x93O\x9e\xfa\x02\xff'
b'D\xb4V\r9$gy\xe1 \x13\xd8\xc4f\x93O\x9e\xfa\x02\xff'
b'D\xb4V\r9$gy\xe1 \x13\xd8\xc4f\x93O\x9e\xfa\x02\xff'
b'D\xb4V\r9$gy\xe1 \x13\xd8\xc4f\x93O\x9e\xfa\x02\xff'
b'D\xb4V\r9$gy\xe1 \x13\xd8\xc4f\x93O\x9e\xfa\x02\xff'
b'D\xb4V\r9$gy\xe1 \x13\xd8\xc4f\x93O\x9e\xfa\x02\xff'
b'D\xb4V\r9$gy\xe1 \x13\xd8\xc4f\x93O\x9e\xfa\x02\xff'
b'D\xb4V\r9$gy\xe1 \x13\xd8\xc4f\x93O\x9e\xfa\x02\xff'
b'D\xb4V\r9$gy\xe1 \x13\xd8\xc4f\x93O\x9e\xfa\x02\xff'
b'D\xb4V\r9$gy\xe1 \x13\xd8\xc4f\x93O\x9e\xfa\x02\xff'
b'D\xb4V\r9$gy\xe1 \x13\xd8\xc4f\x93O\x9e\xfa\x02\xff'
b'D\xb4V\r9$gy\xe1 \x13\xd8\xc4f\x93O\x9e\xfa\x02\xff'
b'D\xb4V\r9$gy\xe1 \x13\xd8\xc4f\x93O\x9e\xfa\x02\xff'
b'D\xb4V\r9$gy\xe1 \x13\xd8\xc4f\x93O\x9e\xfa\x02\xff'
b'D\xb4V\r9$gy\xe1 \x13\xd8\xc4f\x93O\x9e\xfa\x02\xff'
b'D\xb4V\r9$gy\xe1 \x13\xd8\xc4f\x93O\x9e\xfa\x02\xff'
b'D\xb4V\r9$gy\xe1 \x13\xd8\xc4f\x93O\x9e\xfa\x02\xff'
b'D\xb4V\r9$gy\xe1 \x13\xd8\xc4f\x93O\x9e\xfa\x02\xff'
b'D\xb4V\r9$gy\xe1 \x13\xd8\xc4f\x93O\x9e\xfa\x02\xff'
b'D\xb4V\r9$gy\xe1 \x13\xd8\xc4f\x93O\x9e\xfa\x02\xff'
b'D\xb4V\r9$gy\xe1 \x13\xd8\xc4f\x93O\x9e\xfa\x02\xff'
b'D\xb4V\r9$gy\xe1 \x13\xd8\xc4f\x93O\x9e\xfa\x02\xff'
b'D\xb4V\r9$gy\xe1 \x13\xd8\xc4f\x93O\x9e\xfa\x02\xff'
b'D\xb4V\r9$gy\xe1 \x13\xd8\xc4f\x93O\x9e\xfa\x02\xff'
b'D\xb4V\r9$gy\xe1 \x13\xd8\xc4f\x93O\x9e\xfa\x02\xff'
b'D\xb4V\r9$gy\xe1 \x13\xd8\xc4f\x93O\x9e\xfa\x02\xff'
b'D\xb4V\r9$gy\xe1 \x13\xd8\xc4f\x93O\x9e\xfa\x02\xff'
b'D\xb4V\r9$gy\xe1 \x13\xd8\xc4f\x93O\x9e\xfa\x02\xff'
b'D\xb4V\r9$gy\xe1 \x13\xd8\xc4f\x93O\x9e\xfa\x02\xff'
b'D\xb4V\r9$gy\xe1 \x13\xd8\xc4f\x93O\x9e\xfa\x02\xff'
b'D\xb4V\r9$gy\xe1 \x13\xd8\xc4f\x93O\x9e\xfa\x02\xff'
b'D\xb4V\r9$gy\xe1 \x13\xd8\xc4f\x93O\x9e\xfa\x02\xff'
b'D\xb4V\r9$gy\xe1 \x13\xd8\xc4f\x93O\x9e\xfa\x02\xff'
b'D\xb4V\r9$gy\xe1 \x13\xd8\xc4f\x93O\x9e\xfa\x02\xff'
b'D\xb4V\r9$gy\xe1 \x13\xd8\xc4f\x93O\x9e\xfa\x02\xff'
b'D\xb4V\r9$gy\xe1 \x13\xd8\xc4f\x93O\x9e\xfa\x02\xff'
b'D\xb4V\r9$gy\xe1 \x13\xd8\xc4f\x93O\x9e\xfa\x02\xff'
b'D\xb4V\r9$gy\xe1 \x13\xd8\xc4f\x93O\x9e\xfa\x02\xff'
Example of the wrong hmacs calculated:
b""\x19\xd2}YU\xfeyX\x87\xee\xf5\x96\x94\xc1'\xa3tP\xb3\x96""
--------------------------------------
1463462121.3955774 - 40
Example of the wrong hmacs calculated:
b""\x19\xd2}YU\xfeyX\x87\xee\xf5\x96\x94\xc1'\xa3tP\xb3\x96""
--------------------------------------
1463462121.6040413 - 40
Example of the wrong hmacs calculated:
b""\x19\xd2}YU\xfeyX\x87\xee\xf5\x96\x94\xc1'\xa3tP\xb3\x96""
--------------------------------------
1463462121.8342147 - 40
Example of the wrong hmacs calculated:
b""\x19\xd2}YU\xfeyX\x87\xee\xf5\x96\x94\xc1'\xa3tP\xb3\x96""
</code></pre>

<p>Output with no error:</p>

<pre><code>b'j\xb6\xfc\x89\x1e\xef\xd3\xb7\x87C\xea(\xb1\x808\x11V\x1a|\x9b'
b'j\xb6\xfc\x89\x1e\xef\xd3\xb7\x87C\xea(\xb1\x808\x11V\x1a|\x9b'
b'j\xb6\xfc\x89\x1e\xef\xd3\xb7\x87C\xea(\xb1\x808\x11V\x1a|\x9b'
b'j\xb6\xfc\x89\x1e\xef\xd3\xb7\x87C\xea(\xb1\x808\x11V\x1a|\x9b'
b'j\xb6\xfc\x89\x1e\xef\xd3\xb7\x87C\xea(\xb1\x808\x11V\x1a|\x9b'
b'j\xb6\xfc\x89\x1e\xef\xd3\xb7\x87C\xea(\xb1\x808\x11V\x1a|\x9b'
b'j\xb6\xfc\x89\x1e\xef\xd3\xb7\x87C\xea(\xb1\x808\x11V\x1a|\x9b'
b'j\xb6\xfc\x89\x1e\xef\xd3\xb7\x87C\xea(\xb1\x808\x11V\x1a|\x9b'
b'j\xb6\xfc\x89\x1e\xef\xd3\xb7\x87C\xea(\xb1\x808\x11V\x1a|\x9b'
b'j\xb6\xfc\x89\x1e\xef\xd3\xb7\x87C\xea(\xb1\x808\x11V\x1a|\x9b'
b'j\xb6\xfc\x89\x1e\xef\xd3\xb7\x87C\xea(\xb1\x808\x11V\x1a|\x9b'
b'j\xb6\xfc\x89\x1e\xef\xd3\xb7\x87C\xea(\xb1\x808\x11V\x1a|\x9b'
b'j\xb6\xfc\x89\x1e\xef\xd3\xb7\x87C\xea(\xb1\x808\x11V\x1a|\x9b'
b'j\xb6\xfc\x89\x1e\xef\xd3\xb7\x87C\xea(\xb1\x808\x11V\x1a|\x9b'
b'j\xb6\xfc\x89\x1e\xef\xd3\xb7\x87C\xea(\xb1\x808\x11V\x1a|\x9b'
b'j\xb6\xfc\x89\x1e\xef\xd3\xb7\x87C\xea(\xb1\x808\x11V\x1a|\x9b'
b'j\xb6\xfc\x89\x1e\xef\xd3\xb7\x87C\xea(\xb1\x808\x11V\x1a|\x9b'
b'j\xb6\xfc\x89\x1e\xef\xd3\xb7\x87C\xea(\xb1\x808\x11V\x1a|\x9b'
b'j\xb6\xfc\x89\x1e\xef\xd3\xb7\x87C\xea(\xb1\x808\x11V\x1a|\x9b'
b'j\xb6\xfc\x89\x1e\xef\xd3\xb7\x87C\xea(\xb1\x808\x11V\x1a|\x9b'
b'j\xb6\xfc\x89\x1e\xef\xd3\xb7\x87C\xea(\xb1\x808\x11V\x1a|\x9b'
b'j\xb6\xfc\x89\x1e\xef\xd3\xb7\x87C\xea(\xb1\x808\x11V\x1a|\x9b'
b'j\xb6\xfc\x89\x1e\xef\xd3\xb7\x87C\xea(\xb1\x808\x11V\x1a|\x9b'
b'j\xb6\xfc\x89\x1e\xef\xd3\xb7\x87C\xea(\xb1\x808\x11V\x1a|\x9b'
b'j\xb6\xfc\x89\x1e\xef\xd3\xb7\x87C\xea(\xb1\x808\x11V\x1a|\x9b'
b'j\xb6\xfc\x89\x1e\xef\xd3\xb7\x87C\xea(\xb1\x808\x11V\x1a|\x9b'
b'j\xb6\xfc\x89\x1e\xef\xd3\xb7\x87C\xea(\xb1\x808\x11V\x1a|\x9b'
b'j\xb6\xfc\x89\x1e\xef\xd3\xb7\x87C\xea(\xb1\x808\x11V\x1a|\x9b'
b'j\xb6\xfc\x89\x1e\xef\xd3\xb7\x87C\xea(\xb1\x808\x11V\x1a|\x9b'
b'j\xb6\xfc\x89\x1e\xef\xd3\xb7\x87C\xea(\xb1\x808\x11V\x1a|\x9b'
b'j\xb6\xfc\x89\x1e\xef\xd3\xb7\x87C\xea(\xb1\x808\x11V\x1a|\x9b'
b'j\xb6\xfc\x89\x1e\xef\xd3\xb7\x87C\xea(\xb1\x808\x11V\x1a|\x9b'
b'j\xb6\xfc\x89\x1e\xef\xd3\xb7\x87C\xea(\xb1\x808\x11V\x1a|\x9b'
b'j\xb6\xfc\x89\x1e\xef\xd3\xb7\x87C\xea(\xb1\x808\x11V\x1a|\x9b'
b'j\xb6\xfc\x89\x1e\xef\xd3\xb7\x87C\xea(\xb1\x808\x11V\x1a|\x9b'
b'j\xb6\xfc\x89\x1e\xef\xd3\xb7\x87C\xea(\xb1\x808\x11V\x1a|\x9b'
1463462453.3856905 - 0
1463462453.5910842 - 0
1463462453.8242626 - 0
1463462454.0677884 - 0
1463462454.2900438 - 0
1463462454.5460255 - 0
1463462454.7883186 - 0
</code></pre>

<p>(On my ubuntu machine, this example works perfeclty. It is only on the ARM7 device that we have this problem..)</p>
","<p>When I changed the arguments to gevetn patch all:</p>

<pre><code>...
elif async_mode == 'gevent':
    from gevent import monkey
    monkey.patch_all(ssl=False)
...
</code></pre>

<p>It seems to work. </p>
","37273041","81","<python><flask><hmac>","1","0","1","2016-05-17 10:05:13","37273041","8","2","-1","","2017-05-23 12:09:05","2016-05-13 12:08:51","","","2016-05-17 10:05:13"
"57830507","Why is this hmac digest different on Python 2.7 and Python 3.7?","<p>I'm trying to move a project from Python 2.7 to Python 3.7 and run into an issue with an hmac digest. Running the following code produces 2 different results</p>

<pre><code>import hmac, hashlib
print(hmac.new(bytes([]), bytes([]), hashlib.sha1).hexdigest())
</code></pre>

<p>On Python 2.7: <code>1bd590e48bea8f0c8cc70602bc55d317c3de7c52</code></p>

<p>On Python 3.7: <code>fbdb1d1b18aa6c08324b7d64b71fb76370690e1d</code></p>

<p>Why are these two results different?</p>
","<p>In Python 3.7, <code>bytes()</code> and <code>bytes([])</code> are both interpreted as <code>b''</code>.</p>

<p>In Python 2.7, <code>bytes()</code> is interpreted as <code>''</code> which is roughly equivalent to <code>b''</code> in Python 3.7.</p>

<p>However, Python 2.7 interprets <code>bytes([])</code> as <code>'[]'</code>.</p>

<p>That is the source of the difference.  If you use <code>bytes()</code> or <code>b''</code> instead of <code>bytes([])</code>, you should get the same result in both Python 2.7 and Python 3.7.</p>
","57830595","81","<python><python-3.x><python-2.x><hmac><hashlib>","0","1","2","2019-09-07 04:17:18","57830595","0","","3750257","","2019-09-07 04:17:18","2019-09-07 03:45:21","","","2019-09-07 04:08:00"
"57830507","Why is this hmac digest different on Python 2.7 and Python 3.7?","<p>I'm trying to move a project from Python 2.7 to Python 3.7 and run into an issue with an hmac digest. Running the following code produces 2 different results</p>

<pre><code>import hmac, hashlib
print(hmac.new(bytes([]), bytes([]), hashlib.sha1).hexdigest())
</code></pre>

<p>On Python 2.7: <code>1bd590e48bea8f0c8cc70602bc55d317c3de7c52</code></p>

<p>On Python 3.7: <code>fbdb1d1b18aa6c08324b7d64b71fb76370690e1d</code></p>

<p>Why are these two results different?</p>
","<p>In 2.7 <code>bytes([])</code> is type str while in 3.7 <code>bytes([])</code> is type bytes. </p>

<p>If you sub in something like <code>b""hello""</code> for both the key and message in both 2.7 and 3.7 you will get the same hash back.    </p>
","57830597","81","<python><python-3.x><python-2.x><hmac><hashlib>","0","1","2","2019-09-07 04:17:18","57830595","0","","3750257","","2019-09-07 04:17:18","2019-09-07 03:45:21","","","2019-09-07 04:08:28"
"28824972","C# Android HMAC result","<p>I am using the following code in c# for HMAC conversion:</p>

<pre><code> string RawData = ""data"";
  string sharedKey = ""my-key"";
 byte[] signature = Encoding.UTF8.GetBytes(RawData);
 var KeyByteArray = Encoding.UTF8.GetBytes(sharedKey);


            using (HMACSHA256 hmac = new HMACSHA256(KeyByteArray))
            {
                byte[] signatureBytes =hmac.ComputeHash(signature);

         var ContentBase64String =(Convert.ToBase64String(signatureBytes));

                Console.WriteLine(ContentBase64String );
                Console.ReadKey();
            }
</code></pre>

<p>And the following in Java:</p>

<pre><code> String   RawData=""data"";
 String Key=""my-key"";
byte[] KeyByteArray=Key.getBytes(""UTF-8"");

byte[] signature=RawData.getBytes(""UTF-8"");


Mac sha256_HMAC;
sha256_HMAC = Mac.getInstance(""HmacSHA256"");

SecretKeySpec secret_key = new SecretKeySpec(KeyByteArray, ""HmacSHA256"");
    sha256_HMAC.init(secret_key);
String ContentBase64String = Base64.encodeToString(sha256_HMAC.doFinal(signature),Base64.URL_SAFE|Base64.NO_WRAP);
</code></pre>

<p>The output for C# is as follows:
<img src=""https://i.stack.imgur.com/amjQf.png"" alt=""C# output""><br>
The output for android is as follows:
<img src=""https://i.stack.imgur.com/05Xhv.png"" alt=""Android Output"">        </p>

<p>I have been it at it for many days and can't figure out what I am doing wrong as the outputs differ though they should be the same.<strong>Also, when I remove the - in the key the results are the same</strong>. I know I might be missing something simple but thought another pair of eyes might see my mistake. Thanks. </p>
","<p>Those answers are the same (as far as the bytes contained in the HMAC goes). For the difference in the <code>+</code> and <code>-</code> characters in the output, you <em>specifically told it to do that</em> by specifying <a href=""http://developer.android.com/reference/android/util/Base64.html#URL_SAFE"" rel=""nofollow"">the <code>Base64.URL_SAFE</code> flag</a>.</p>

<p>For future readers of this question: When in doubt, consult the documentation for everything you don't perfectly understand.</p>
","28825177","80","<java><c#><android><hmac>","0","0","1","2015-03-03 06:07:06","28825177","2","3","4282901","","2015-03-03 06:04:05","2015-03-03 05:49:43","","","2015-03-03 06:07:06"
"53099259","How secure is Ciphersweet?","<blockquote>
  <p>For anybody interested in some really good answers. I later asked this question on security.stackexchange.com: <a href=""https://security.stackexchange.com/questions/196833/how-secure-is-the-ciphersweet-library-for-searchable-encryption-and-why-is-a-du"">https://security.stackexchange.com/questions/196833/how-secure-is-the-ciphersweet-library-for-searchable-encryption-and-why-is-a-du</a></p>
</blockquote>

<p>I'm currently managing a code base in which we've got a mysql database with all records encrypted using the <a href=""https://github.com/defuse/php-encryption/blob/master/docs/classes/Crypto.md"" rel=""nofollow noreferrer"">php-encryption library</a>. This works well for our current setup. We now got a new business requirement that should make it possible to do a SELECT based on one of the encrypted fields.</p>

<p>Since it is impossible to select based on the encrypted values I searched around and found <a href=""https://github.com/paragonie/ciphersweet"" rel=""nofollow noreferrer"">ciphersweet</a>. It's a new (6 months old) repo with currently only 136 github stars. I've read through a <a href=""https://paragonie.com/blog/2017/05/building-searchable-encrypted-databases-with-php-and-sql"" rel=""nofollow noreferrer"">blogpost about it</a> written by the company behind the lib. It sounds ok, but since I'm not a cryptographic expert I can't really judge it's secureness.</p>

<p>Is there anybody else out there who can comment on this library/technology? or does anybody know another source where the quality of this technology is evaluated?</p>
","<p>I don't know this lib, but the company authored <a href=""https://github.com/paragonie/random_compat"" rel=""nofollow noreferrer"">https://github.com/paragonie/random_compat</a> which is the de facto standard.</p>

<p>It is even mentioned on <a href=""https://php.net/random_bytes"" rel=""nofollow noreferrer"">https://php.net/random_bytes</a></p>

<blockquote>
  <p>Note: Although this function was added to PHP in PHP 7.0, a » userland implementation is available for PHP 5.2 to 5.</p>
</blockquote>
","53099385","79","<php><mysql><encryption><hmac>","-2","2","1","2018-11-22 09:05:56","","0","","1650012","","2018-11-22 09:05:56","2018-11-01 10:20:55","2018-11-01 11:06:45","","2018-11-01 10:28:09"
"49845661","Coinbase/GDAX API (401) error with C# Access Attempt","<p>I have my two functions, the access attempt and the HMAC signing. It runs and returns an error(401) unauthorized, however in addition I feel my code is longer than it needs to be or redundant somehow, pointing that out would be very helpful to me, thanks in advance!</p>

<pre><code>void AccessAttempt(){


        var message = Epoch.ToString () + ""GET"" + ""/v2/payment-methods"";


        const string WEBSERVICE_URL = ""https://api.coinbase.com/v2/payment-methods"";
        try
        {
            var webRequest = System.Net.WebRequest.Create(WEBSERVICE_URL);
            if (webRequest != null)
            {
                webRequest.Method = ""POST"";
                webRequest.ContentType = ""application/json"";

                webRequest.Headers.Add(""CB-ACCESS-SIGN"", genHMAC(message));
                webRequest.Headers.Add(""CB-ACCESS-TIMESTAMP"", Epoch.ToString());
                webRequest.Headers.Add(""CB-ACCESS-KEY"", _apiKey);

                webRequest.Headers.Add(""CB-VERSION"",_apiVersion);



                using (System.IO.Stream s = webRequest.GetResponse().GetResponseStream())
                {
                    using (System.IO.StreamReader sr = new System.IO.StreamReader(s))
                    {
                        var jsonResponse = sr.ReadToEnd();
                        OutputText.text = jsonResponse.ToString();
                    }
                }
            }
        }
        catch (Exception ex)
        {
            OutputText.text = ex.ToString();
        }



    }
</code></pre>

<p>Below is the HMAC signing function called within main function above:</p>

<pre><code>private string genHMAC(string message)
    {


        byte [] APISecret_Bytes = System.Text.Encoding.UTF8.GetBytes(_apiSecret);
        HMACSHA256 hmac = new HMACSHA256(APISecret_Bytes);

        hmac.Initialize ();
        byte [] MESSAGE_Bytes = System.Text.Encoding.UTF8.GetBytes(message);
        var rawHmac = hmac.ComputeHash(MESSAGE_Bytes);



        string rawHmacString = string.Empty;
        for (int i=0; i&lt;rawHmac.Length; i++)
        {
            rawHmacString += rawHmac[i];
        }



        string hexString = string.Empty;
        for (int i=0; i&lt;rawHmac.Length; i++)
        {
            hexString += rawHmac[i].ToString(""X2"");
        }

        return hexString;

    }
</code></pre>
","<p>This is a pretty old question, but in case you don't have an answer yet, it looks like there are a few things wrong with your request - here is some code that works for me</p>

<pre><code>public class CoinbaseV2
{
    private string APIKey;
    private string Secret;

    private const string URL_BASE = ""https://api.coinbase.com"";
    private const string URL_BASE_VERSION = URL_BASE + ""/v2/"";
    private const String GET = ""GET"";
    private const String POST = ""POST"";
    private const String PUT = ""PUT"";
    private const String DELETE = ""DELETE"";

    public CoinbaseV2(string inAPIKey, string inSecret)
    {
        APIKey = inAPIKey;
        Secret = inSecret;
    }

    public string GetUser()
    {
        return JsonRequest(URL_BASE_VERSION + ""user"", GET);
    }

    public string GetUserAccounts()
    {
        return JsonRequest(URL_BASE_VERSION + ""accounts"", GET);
    }



    private string JsonRequest(string url, string method)
    {
        // take care of any spaces in params
        url = Uri.EscapeUriString(url);

        string returnData = String.Empty;

        var webRequest = HttpWebRequest.Create(url) as HttpWebRequest;
        if (webRequest != null)
        {
            webRequest.Method = method;
            webRequest.ContentType = ""application/json"";

            string timestamp = DateTimeOffset.UtcNow.ToUnixTimeSeconds().ToString(CultureInfo.CurrentCulture);
            string body = """";
            string sigurl = url.Replace(URL_BASE,"""");
            string signature = GenerateSignature(timestamp,method,sigurl,body,Secret);

            var whc = new WebHeaderCollection();
            whc.Add(""CB-ACCESS-SIGN"", signature);
            whc.Add(""CB-ACCESS-TIMESTAMP"", timestamp);
            whc.Add(""CB-ACCESS-KEY"", APIKey);
            whc.Add(""CB-VERSION"", ""2017-08-07"");
            webRequest.Headers = whc;

            using (WebResponse response = webRequest.GetResponse())
            {
                using (Stream stream = response.GetResponseStream())
                {
                    StreamReader reader = new StreamReader(stream);
                    returnData = reader.ReadToEnd();
                }
            }
        }

        return returnData;
    }

    //https://github.com/bchavez/Coinbase
    public static string GenerateSignature(string timestamp, string method, string url, string body, string appSecret)
    {
        return GetHMACInHex(appSecret, timestamp + method + url + body).ToLower();
    }
    internal static string GetHMACInHex(string key, string data)
    {
        var hmacKey = Encoding.UTF8.GetBytes(key);
        var dataBytes = Encoding.UTF8.GetBytes(data);

        using (var hmac = new HMACSHA256(hmacKey))
        {
            var sig = hmac.ComputeHash(dataBytes);
            return ByteToHexString(sig);
        }
    }
    //https://stackoverflow.com/questions/311165/how-do-you-convert-a-byte-array-to-a-hexadecimal-string-and-vice-versa/14333437#14333437
    static string ByteToHexString(byte[] bytes)
    {
        char[] c = new char[bytes.Length * 2];
        int b;
        for (int i = 0; i &lt; bytes.Length; i++)
        {
            b = bytes[i] &gt;&gt; 4;
            c[i * 2] = (char)(87 + b + (((b - 10) &gt;&gt; 31) &amp; -39));
            b = bytes[i] &amp; 0xF;
            c[i * 2 + 1] = (char)(87 + b + (((b - 10) &gt;&gt; 31) &amp; -39));
        }
        return new string(c);
    }
}
</code></pre>
","54042940","78","<c#><hmac><coinbase-api>","0","0","1","2019-01-04 16:42:43","","0","","","","","2018-04-15 18:57:13","","","2019-01-04 16:42:43"
"59002949","How to create a Json Web Token (JWT) using OpenSSL shell commands?","<p>I'm trying to create a JSON Web Token (JWT) using command line utilities on MacOS and hitting a snag with the signing portion.</p>

<p>I was greatly inspired by this gist: <a href=""https://gist.github.com/indrayam/dd47bf6eef849a57c07016c0036f5207"" rel=""nofollow noreferrer"">https://gist.github.com/indrayam/dd47bf6eef849a57c07016c0036f5207</a></p>

<p>For my JWT I have
Header:</p>

<pre><code>{""alg"":""HS256"",""typ"":""JWT""}
</code></pre>

<p>Payload:</p>

<pre><code>{""email"":""jordan@example.com""}
</code></pre>

<p>And my hmac secret is:</p>

<pre><code>bigsecretisveryhardtoguessbysneakypeopleright
</code></pre>

<p>Or in base64:</p>

<pre><code>Ymlnc2VjcmV0aXN2ZXJ5aGFyZHRvZ3Vlc3NieXNuZWFreXBlb3BsZXJpZ2h0Cg==
</code></pre>

<p>I was using the following site to validate:
<a href=""https://jwt.io/"" rel=""nofollow noreferrer"">https://jwt.io/</a></p>

<p>I find that if I enter all of that into the site using the base64 version of my secret, it generates the following JWT that successfully verifies against the site I'm testing:</p>

<pre><code>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImpvcmRhbkBleGFtcGxlLmNvbSJ9.C3MVjfmnul8dLNIgiv6Dt3jSefD07Y0QtDrOZ5oYSXo
</code></pre>

<p>In bash I tried this with:</p>

<pre><code>jwt_header=$(echo -n '{""alg"":""HS256"",""typ"":""JWT""}' | base64 | sed s/\+/-/g | sed 's/\//_/g' | sed -E s/=+$//)

payload=$(echo -n '{""email"":""jordan@example.com""}' | base64 | sed s/\+/-/g |sed 's/\//_/g' |  sed -E s/=+$//)

hmac_signature=$(echo -n ""${jwt_header}.${payload}"" | openssl dgst -sha256 -hmac ""${key}"" -binary | openssl base64 -e -A | sed s/\+/-/g | sed 's/\//_/g' | sed -E s/=+$//)

jwt=""${jwt_header}.${payload}.${hmac_signature}""
</code></pre>

<p>which produced the following:</p>

<pre><code>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImpyZWVkQGV4dG9sZS5jb20ifQ.o426f0XDnsUwActVt14Cr3X3IUqPwfv6yaN5nRaZhew
</code></pre>

<p>Which is not accepted as valid by the site I'm posting to.  So I'm unsure what I am doing wrong in the openssl command that is not getting a valid HS256 signature.</p>
","<p>I was able to recreate the JWT from <a href=""https://jwt.io/"" rel=""nofollow noreferrer"">https://jwt.io/</a></p>

<p><strong>In your example, there was a hidden newline on the user secret</strong>.  So in the below, I also add on that newline, purely to recreate the desired output.
Also the email address in your payload was not consistent, so for below I have used <code>jordan@example.com</code>.</p>

<p>I took a slightly different approach to the hmac step.  I converted the user secret to hex bytes and used that as the key (using the <code>hexkey</code> option for the HMAC).  </p>

<pre class=""lang-sh prettyprint-override""><code># Construct the header
jwt_header=$(echo -n '{""alg"":""HS256"",""typ"":""JWT""}' | base64 | sed s/\+/-/g | sed 's/\//_/g' | sed -E s/=+$//)

# ans: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9

# Construct the payload
payload=$(echo -n '{""email"":""jordan@example.com""}' | base64 | sed s/\+/-/g |sed 's/\//_/g' |  sed -E s/=+$//)

# ans: eyJlbWFpbCI6ImpvcmRhbkBleGFtcGxlLmNvbSJ9

# Store the raw user secret (with example of newline at end)
secret=$'bigsecretisveryhardtoguessbysneakypeopleright\n'

# Note, because the secret may have newline, need to reference using form $"""" 
echo -n ""$secret""

# Convert secret to hex (not base64)
hexsecret=$(echo -n ""$secret"" | xxd -p | paste -sd """")

# ans: 62696773656372657469737665727968617264746f67756573736279736e65616b7970656f706c6572696768740a

# For debug, also display secret in base64 (for input into https://jwt.io/)
echo -n ""$secret"" | base64

# ans: Ymlnc2VjcmV0aXN2ZXJ5aGFyZHRvZ3Vlc3NieXNuZWFreXBlb3BsZXJpZ2h0Cg==

# Calculate hmac signature -- note option to pass in the key as hex bytes
hmac_signature=$(echo -n ""${jwt_header}.${payload}"" |  openssl dgst -sha256 -mac HMAC -macopt hexkey:$hexsecret -binary | base64  | sed s/\+/-/g | sed 's/\//_/g' | sed -E s/=+$//)

# Create the full token
jwt=""${jwt_header}.${payload}.${hmac_signature}""

# ans: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImpvcmRhbkBleGFtcGxlLmNvbSJ9.C3MVjfmnul8dLNIgiv6Dt3jSefD07Y0QtDrOZ5oYSXo
</code></pre>
","59003757","78","<linux><bash><openssl><jwt><hmac>","1","2","1","2019-11-26 23:16:25","59003757","0","1","1492265","","2019-11-26 23:16:25","2019-11-22 23:10:04","","2019-11-23 19:29:26","2019-11-23 01:28:21"
"55104505","Why did hmac generator generate hmac hash different from spring web app and JUnit?","<p>I sent a request with same content incl. german umlaut and hash like in JUnit to spring web app. But HMAC encryption works differently both. HMAC encryption can encrypte at JUnit the same hash like the setting hash. The setting hash is encrpted from another server and sent to my spring web app.</p>

<p>Sending request to tomcat and starting hmac validator</p>

<pre><code>allValues [51, 54, 49, 50, 50, 50, 57, 51, 57, 52, 49, 51, 55, 52, 46, 57, 53, 50, 51, 48, 50, 77, 97, 110, 117, 101, 108, 32, 71, 110, 101, 114, 108, 105, 99, 104, 52, 50, 54, 51, 53, 52, 120, 120, 120, 120, 120, 120, 57, 52, 54, 56, 86, 72, 97, 109, 98, 117, 114, 103, 99, 99, 68, 69, 69, 85, 82, 49, 52, 50, 49, 51, 32, 77, 111, 110, 97, 116, 101, 32, 84, 101, 105, 108, 110, 97, 104, 109, 101, 118, 101, 114, 103, -61, -68, 116, 117, 110, 103, 32, 102, -61, -68, 114, 32, 68, 71, 83, 32, 40, 100, 101, 114, 122, 101, 105, 116, 32, 76, 101, 118, 101, 108, 32, 65, 49, 41, 97, 114, 103, 111, 110, 105, 115, 116, 64, 103, 109, 97, 105, 108, 46, 99, 111, 109, 49, 53, 54, 48, 48, 57, 55, 53, 55, 51, 77, 97, 110, 117, 101, 108, 57, 51, 54, 50, 53, 49, 51, 52, 101, 57, 54, 102, 53, 56, 48, 54, 100, 99, 53, 98, 99, 57, 101, 53, 98, 98, 57, 53, 57, 55, 53, 53, 51, 56, 56, 102, 71, 110, 101, 114, 108, 105, 99, 104, 116, 101, 115, 116, 49, 55, 46, 52, 97, 99, 99, 101, 115, 115, 45, 49, 52, 50, 49, 45, 48, 45, 48, 45, 51, 51, 56, 55, 57, 55, 52, 46, 57, 53, 55, 52, 46, 57, 53, 57, 51, 54, 50, 55, 52, 46, 57, 53, 49, 52, 50, 49, 45, 56, 98, 49, 99, 55, 48, 98, 101, 49, 56, 97, 57, 48, 83, 116, 114, 105, 110, 100, 98, 101, 114, 103, 119, 101, 103, 32, 49, 50, 51, 32, 77, 111, 110, 97, 116, 101, 32, 65, 98, 111, 32, 45, 32, 109, 97, 110, 105, 109, 117, 110, 100, 111, 99, 111, 109, 112, 108, 101, 116, 101, 100, 97, 112, 112, 111, 105, 110, 116, 101, 100, 51, 50, 49, 54, 55, 51, 52, 56, 55, 49, 53, 53, 50, 49, 53, 50, 51, 55, 51, 49, 53, 55, 57, 52, 57, 57, 48, 48, 49, 57, 46, 48, 48, 50, 50, 53, 56, 55]
    hmac hash 5dffe6e4b92ff855411a73eea34d74909e25678b1b768dcb8081dd764200f7fefa710beacf26b5d141c362fa5a3ea9ed
    hash      65e2f454df692db7ccb34c49e71349dc351f62ca47eaca2a08ddb6c5baa634d9baa691358c69361dc01d7f73681820ed
</code></pre>

<p>Starting with jUnit hmac validator</p>

<pre><code>allValues [51, 54, 49, 50, 50, 50, 57, 51, 57, 52, 49, 51, 55, 52, 46, 57, 53, 50, 51, 48, 50, 77, 97, 110, 117, 101, 108, 32, 71, 110, 101, 114, 108, 105, 99, 104, 52, 50, 54, 51, 53, 52, 120, 120, 120, 120, 120, 120, 57, 52, 54, 56, 86, 72, 97, 109, 98, 117, 114, 103, 99, 99, 68, 69, 69, 85, 82, 49, 52, 50, 49, 51, 32, 77, 111, 110, 97, 116, 101, 32, 84, 101, 105, 108, 110, 97, 104, 109, 101, 118, 101, 114, 103, -61, -68, 116, 117, 110, 103, 32, 102, -61, -68, 114, 32, 68, 71, 83, 32, 40, 100, 101, 114, 122, 101, 105, 116, 32, 76, 101, 118, 101, 108, 32, 65, 49, 41, 97, 114, 103, 111, 110, 105, 115, 116, 64, 103, 109, 97, 105, 108, 46, 99, 111, 109, 49, 53, 54, 48, 48, 57, 55, 53, 55, 51, 77, 97, 110, 117, 101, 108, 57, 51, 54, 50, 53, 49, 51, 52, 101, 57, 54, 102, 53, 56, 48, 54, 100, 99, 53, 98, 99, 57, 101, 53, 98, 98, 57, 53, 57, 55, 53, 53, 51, 56, 56, 102, 71, 110, 101, 114, 108, 105, 99, 104, 116, 101, 115, 116, 49, 55, 46, 52, 97, 99, 99, 101, 115, 115, 45, 49, 52, 50, 49, 45, 48, 45, 48, 45, 51, 51, 56, 55, 57, 55, 52, 46, 57, 53, 55, 52, 46, 57, 53, 57, 51, 54, 50, 55, 52, 46, 57, 53, 49, 52, 50, 49, 45, 56, 98, 49, 99, 55, 48, 98, 101, 49, 56, 97, 57, 48, 83, 116, 114, 105, 110, 100, 98, 101, 114, 103, 119, 101, 103, 32, 49, 50, 51, 32, 77, 111, 110, 97, 116, 101, 32, 65, 98, 111, 32, 45, 32, 109, 97, 110, 105, 109, 117, 110, 100, 111, 99, 111, 109, 112, 108, 101, 116, 101, 100, 97, 112, 112, 111, 105, 110, 116, 101, 100, 51, 50, 49, 54, 55, 51, 52, 56, 55, 49, 53, 53, 50, 49, 53, 50, 51, 55, 51, 49, 53, 55, 57, 52, 57, 57, 48, 48, 49, 57, 46, 48, 48, 50, 50, 53, 56, 55]
hmac hash 65e2f454df692db7ccb34c49e71349dc351f62ca47eaca2a08ddb6c5baa634d9baa691358c69361dc01d7f73681820ed
hash      65e2f454df692db7ccb34c49e71349dc351f62ca47eaca2a08ddb6c5baa634d9baa691358c69361dc01d7f73681820ed
</code></pre>

<p>Source code:</p>

<pre><code>        @Component
         public class HMACValidator {

        private final SevDeskProperties sevDeskProperties;

        public HMACValidator(SevDeskProperties sevDeskProperties) {
            this.sevDeskProperties = sevDeskProperties;
        }

        public void validateHMAC(TransactionPayOne transactionPayOne, String hash) {

            byte[] key = transactionPayOne.getPortalid()
                    .equals(sevDeskProperties.getAboPortalId()) ?
                    sevDeskProperties.getAboKey().getBytes() :
                    sevDeskProperties.getSingleKey().getBytes();

            String allValues = getAllValues(transactionPayOne);
            logger.debug(""allValues "" + allValues);

            String hmacSha384Encode;
            try {
                logger.debug(""allValues"" + Arrays.toString(allValues.getBytes(""UTF-8"")));
                hmacSha384Encode = HMAC_SHA384_encode(key, allValues);
            } catch (Exception e) {
                throw new IllegalArgumentException(""Could not encode the values"",e);
            }

            logger.debug(""hmac hash "" + hmacSha384Encode);
            logger.debug(""hash        "" + hash);

           if (!hmacSha384Encode.equals(hash)) {
               throw new IllegalArgumentException(""message is not valid "");
            }
        }

        public static String HMAC_SHA384_encode(byte[] key, String message) throws Exception {

            SecretKeySpec keySpec = new SecretKeySpec(
                    key, HmacAlgorithms.HMAC_SHA_384.getName());

            Mac mac = Mac.getInstance(HmacAlgorithms.HMAC_SHA_384.getName());
            mac.init(keySpec);
            byte[] rawHmac = mac.doFinal(message.getBytes(""UTF-8""));

            return Hex.encodeHexString(rawHmac);
        }

// Getting all values without key in json of transaction data
        private String getAllValues(TransactionPayOne transactionPayOne) {
            ObjectMapper objectMapper = new ObjectMapper();
            Map&lt;String, Object&gt; mapJson;
            try {
                mapJson = objectMapper.readValue(transactionPayOne.getJson().getBytes(""UTF-8""), new TypeReference&lt;Map&lt;String, Object&gt;&gt;() {
                });
            } catch (IOException e) {
                e.printStackTrace();
                throw new IllegalArgumentException(""Could not parse json"");
            }
            return mapJson.values().stream().map(value -&gt; {
                if (value instanceof Map) {
                    value = ((Map) value).values().stream().collect(Collectors.joining(""""));
                }
                return (String) value;
            }).collect(Collectors.joining(""""));
        }
    }
</code></pre>
","","","78","<java><spring-boot><junit><hmac>","0","","0","2019-03-11 14:49:02","","2","","","","","2019-03-11 14:49:02","","",""
"57825076","How to verify HMAC in HAProxy","<p>Is it possible to check HMAC validity in HAProxy? Ideally I'd like to set an acl if the HMAC is valid so I can use this in rules.</p>

<p>Our Ubuntu 18.04 build server (running Jenkins) sits behind a firewall with only specific IP ranges white-listed.</p>

<p>We have an HAProxy (1.8) instance receiving all inbound requests and routing to the appropriate backend service.</p>

<p>The problem is SonarCloud have changed their webhooks from a defined set of IP addresses to using HMAC to validate authenticity. This means the webhooks are blocked by the firewall unless we open it to all internet traffic.</p>

<p><a href=""https://sonarcloud.io/documentation/project-administration/webhooks/#securing-your-webhooks"" rel=""nofollow noreferrer"">https://sonarcloud.io/documentation/project-administration/webhooks/#securing-your-webhooks</a></p>

<p>If we can congifure HAProxy to validate the HMAC then we can open the server to all traffic &amp; use HAProxy to validate these requests (as well as other existing IP whitelisted ranges).</p>
","<p>HAProxy doesn't do HMAC natively, but it can be done using  HAProxy's Lua integration.</p>

<p>One approach would be to find a Lua library that can do the flavor of HMAC that you need, and then write an HAProxy converter in Lua to take the appropriate inputs and do the calculation of the digest for comparison.</p>

<p>I implemented something similar, once, using HAProxy 1.6 with Lua 5.x where the client sent a URL signed using HMAC-SHA1, and the proxy successfully checked it for validity.</p>

<p>Unfortunately, I no longer have access to that code, but I wrote <a href=""https://serverfault.com/a/910651/153161"">this HAProxy converter to do utf-8-aware URL-escaping (percent encoding) in Lua</a>... I mention it here because it's a complete, working example of one way to extend HAProxy functionality using Lua, including the Lua code and HAProxy configuration needed to use it, so it might help you work toward a solution.</p>
","57845346","78","<haproxy><sha256><hmac><sonarcloud>","1","1","2","2019-10-09 12:06:11","58303784","0","1","","","","2019-09-06 15:44:29","","","2019-09-08 20:01:19"
"57825076","How to verify HMAC in HAProxy","<p>Is it possible to check HMAC validity in HAProxy? Ideally I'd like to set an acl if the HMAC is valid so I can use this in rules.</p>

<p>Our Ubuntu 18.04 build server (running Jenkins) sits behind a firewall with only specific IP ranges white-listed.</p>

<p>We have an HAProxy (1.8) instance receiving all inbound requests and routing to the appropriate backend service.</p>

<p>The problem is SonarCloud have changed their webhooks from a defined set of IP addresses to using HMAC to validate authenticity. This means the webhooks are blocked by the firewall unless we open it to all internet traffic.</p>

<p><a href=""https://sonarcloud.io/documentation/project-administration/webhooks/#securing-your-webhooks"" rel=""nofollow noreferrer"">https://sonarcloud.io/documentation/project-administration/webhooks/#securing-your-webhooks</a></p>

<p>If we can congifure HAProxy to validate the HMAC then we can open the server to all traffic &amp; use HAProxy to validate these requests (as well as other existing IP whitelisted ranges).</p>
","<p>Thanks to Michael for the pointer to HAProxy/Lua integration. My solution noted here for reference.</p>

<p>Created the following Lua script (hmac_validate.lua):</p>

<pre><code>hmac = require('openssl.hmac')

local function tohex(s)
    return (string.gsub(s, ""."", function (c)
        return string.format(""%.2x"", string.byte(c))
    end))
end -- tohex

function validate_sonar_hmac(txn, hmac_header_key, hmac_secret)
    local payload = txn.req:dup() -- take a copy of the request content
    local body = string.sub(payload,string.find(payload,""\r\n\r\n"")+4) -- strip off the headers
    local signature = txn.sf:req_fhdr(hmac_header_key) -- get the HMAC signature sent on the request

    -- calculate hmac from body &amp; secret
    local sc_hmac = hmac.new(hmac_secret, ""sha256"")
    local calculated_signature = tohex(sc_hmac:final(body))

    local signatures_match = calculated_signature == signature
    if not signatures_match then
        core.Alert(""Sonar Cloud HMAC signature mismatch - received '""..signature..""' but calculated '""..calculated_signature..""'"")
    end

    txn:set_var(""req.sonar_request_valid"", signatures_match)
end;

core.register_action(""validate-sonar-hmac"", {""http-req""}, validate_sonar_hmac, 2)
</code></pre>

<p>HA Proxy config changed to add these lines:</p>

<pre><code>global
    lua-load /etc/haproxy/hmac_validate.lua

frontend
    acl sonarcloud hdr(X-Sonar-Webhook-HMAC-SHA256) -m found
    http-request lua.validate-sonar-hmac X-Sonar-Webhook-HMAC-SHA256 {{ sonarcloud_hmac_secret }} if sonarcloud
    http-request deny if sonarcloud !{ var(req.sonar_request_valid) -m bool }
</code></pre>
","58303784","78","<haproxy><sha256><hmac><sonarcloud>","1","1","2","2019-10-09 12:06:11","58303784","0","1","","","","2019-09-06 15:44:29","","","2019-10-09 12:06:11"
"48666838","Hash message Rails","<p>I have issues linking my Rails app to Paybox (through a French bank). </p>

<p>The technical support says that the problem could come from the hash message i'm sending to them (through a form). But they have no knowledge about Ruby so they can't guarantee anything. </p>

<p>Maybe some of you will find something wrong?</p>

<p>Here is the method:</p>

<pre><code>def paiement
    @commande = Commande.find_by(code: params[:id])

    @confirmation_url = ENV['PBX_EFFECTUE'].gsub('CODE_COMMANDE', @commande.code)
    @annulation_url = ENV['PBX_ANNULE'].gsub('CODE_COMMANDE', @commande.code)
    @refus_url = ENV['PBX_REFUSE'].gsub('CODE_COMMANDE', @commande.code)

    @current_time = Time.now.strftime('%FT%T%:z')

    msg = {
      PBX_SITE: ""#{ENV['PBX_SITE']}"",
      PBX_RANG: ""#{ENV['PBX_RANG']}"",
      PBX_IDENTIFIANT: ""#{ENV['PBX_IDENTIFIANT']}"",
      PBX_TOTAL: ""#{@commande.total_price_centimes}"",
      PBX_DEVISE: ""978"",
      PBX_CMD: ""#{@commande.code}"",
      PBX_PORTEUR: ""#{current_user.email}"",
      PBX_REPONDRE_A: ""#{ENV['PBX_REPONDRE_A']}"",
      PBX_RETOUR: ""#{ENV['PBX_RETOUR']}"",
      PBX_EFFECTUE: ""#{@confirmation_url}"",
      PBX_ANNULE: ""#{@annulation_url}"",
      PBX_REFUSE: ""#{@refus_url}"",
      PBX_HASH: ""SHA512"",
      PBX_TIME: ""#{@current_time}""
    }

    key = ENV['CLE_HMAC']
    binKey = [key].pack('H*')

    digest = OpenSSL::Digest.new('sha512')
    @signature = OpenSSL::HMAC.hexdigest(digest, binKey, msg.keys.map{|k,v| ""#{k}=#{v}""}.join('&amp;')).upcase
    #binding.pry
  end
</code></pre>

<p>The form:</p>

<pre><code>&lt;form method=""POST"" action=""&lt;%= ENV['CREDIT_AGRICOLE_URL'] %&gt;"" id=""paiement-form""&gt;
  &lt;input type=""hidden"" name=""PBX_SITE"" value=""&lt;%= ENV['PBX_SITE'] %&gt;""&gt;
  &lt;input type=""hidden"" name=""PBX_RANG"" value=""&lt;%= ENV['PBX_RANG'] %&gt;""&gt;
  &lt;input type=""hidden"" name=""PBX_IDENTIFIANT"" value=""&lt;%= ENV['PBX_IDENTIFIANT'] %&gt;""&gt;
  &lt;input type=""hidden"" name=""PBX_TOTAL"" value=""&lt;%= @commande.total_price_centimes %&gt;""&gt;
  &lt;input type=""hidden"" name=""PBX_DEVISE"" value=""978""&gt;
  &lt;input type=""hidden"" name=""PBX_CMD"" value=""&lt;%= @commande.code %&gt;""&gt;
  &lt;input type=""hidden"" name=""PBX_PORTEUR"" value=""&lt;%= ENV['PBX_PORTEUR'] %&gt;""&gt;
  &lt;input type=""hidden"" name=""PBX_REPONDRE_A"" value=""&lt;%= ENV['PBX_REPONDRE_A'] %&gt;""&gt;
  &lt;input type=""hidden"" name=""PBX_RETOUR"" value=""&lt;%= ENV['PBX_RETOUR'] %&gt;""&gt;
  &lt;input type=""hidden"" name=""PBX_EFFECTUE"" value=""&lt;%= @confirmation_url %&gt;""&gt;
  &lt;input type=""hidden"" name=""PBX_ANNULE"" value=""&lt;%= @annulation_url %&gt;""&gt;
  &lt;input type=""hidden"" name=""PBX_REFUSE"" value=""&lt;%= @refus_url %&gt;""&gt;
  &lt;input type=""hidden"" name=""PBX_HASH"" value=""SHA512""&gt;
  &lt;input type=""hidden"" name=""PBX_TIME"" value=""&lt;%= @current_time %&gt;""&gt;
  &lt;input type=""hidden"" name=""PBX_HMAC"" value=""&lt;%= @signature %&gt;""&gt;
  &lt;input type=""submit"" value=""Envoyer""&gt;
&lt;/form&gt;
</code></pre>

<p>Where the <code>paiement</code> action is triggered:</p>

<pre><code>&lt;div class=""cmd-actions""&gt;
    &lt;%= form_for @commande, {url: commande_path(@commande.code)} do |f| %&gt;
      &lt;div class=""recap-commande-container""&gt;
        &lt;div class=""etape""&gt;
          &lt;div&gt;3&lt;/div&gt;
          &lt;h1&gt;Récapitulatif et paiement de votre commande&lt;/h1&gt;
        &lt;/div&gt;
        &lt;%= render partial: 'line_items_table', locals: {recap_commande: @commande} %&gt;
      &lt;/div&gt;
      &lt;div id=""secured-paiement""&gt;
        &lt;div&gt;
          &lt;h3&gt;Choisissez votre mode de paiement :&lt;/h3&gt;
        &lt;/div&gt;
        &lt;div class=""secured-paiement-logo""&gt;
          &lt;div class=""paiement-row""&gt;
            &lt;div class=""input-radio""&gt;
              &lt;%= radio_button_tag(""commande[methode_paiement]"", 'carte_bancaire', {onchange: 'methode(1)', data: {a: ""carte_bancaire""}, id: 'carte_bancaire'}) %&gt;
            &lt;/div&gt;
            &lt;div class=""input-img""&gt;
              &lt;%= image_tag('logo/ca-e-transactions', style: 'width: 170px;height: 40px') %&gt;
              &lt;%= image_tag('logo/mastercard', style: 'width: 50px;height: 40px') %&gt;
              &lt;%= image_tag('logo/visa', style: 'width: 50px;height: 40px') %&gt;
              &lt;%= image_tag('logo/cb', style: 'width: 50px;height: 40px') %&gt;
            &lt;/div&gt;
          &lt;/div&gt;
          &lt;div class=""paiement-row"" style=""margin-top: 20px;""&gt;
            &lt;div class=""input-radio""&gt;
              &lt;%= radio_button_tag(""commande[methode_paiement]"", 'le_pot_commun', {onchange: 'methode(2)', data: {a: ""le_pot_commun""}, id: 'le_pot_commun'}) %&gt;
            &lt;/div&gt;
            &lt;div class=""input-img""&gt;
              &lt;%= image_tag('logo/pot-commun') %&gt;
            &lt;/div&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
      &lt;div id=""proceed-actions""&gt;
        &lt;div id=""cgv""&gt;
          &lt;%= check_box_tag ""cgv"" %&gt;
          &lt;label&gt;J'accepte les &lt;%= link_to ""conditions générales de vente"", conditions_generales_de_vente_path, style: 'color:black', target: 'blank' %&gt;&lt;/label&gt;
        &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=""commander-link"" id=""paiement-cmd-btn""&gt;
        &lt;%= f.submit ""Payer ma commande"" %&gt;
      &lt;/div&gt;
    &lt;% end %&gt;
  &lt;/div&gt;
</code></pre>

<p>The form is supposed to redirect to <em><a href=""https://preprod-tpeweb.paybox.com/cgi/MYchoix_pagepaiement.cgi"" rel=""nofollow noreferrer"">https://preprod-tpeweb.paybox.com/cgi/MYchoix_pagepaiement.cgi</a></em>, and this is what it does. But on that same page, i have the following error message: ""Problème d'identification du commerce. Accès refusé !"" ('Authentification issue. Access denied !').</p>

<p>This issue is related to this one: <a href=""https://stackoverflow.com/questions/48427354/ruby-hmac-signing-issue"">Ruby HMAC signing issue</a></p>

<p>Any ideas?</p>
","<p>Usually with HMAC signatures the keys are sorted alphabetically first prior to be signed. If you are iterating over a Hash key/value pairs then the iteration order is largely non-deterministic (or should at least be treated as such).</p>

<p>Try sorting your keys first like:</p>

<pre><code>msg.keys.sort.map{|k| ""#{k}=#{msg[k]}""}
</code></pre>
","48667469","76","<ruby-on-rails><ruby><hmac><ruby-hash>","0","0","3","2018-02-15 21:22:50","","2","","5914341","","2018-02-07 15:23:46","2018-02-07 14:57:14","","2018-02-07 16:43:58","2018-02-07 15:27:54"
"48666838","Hash message Rails","<p>I have issues linking my Rails app to Paybox (through a French bank). </p>

<p>The technical support says that the problem could come from the hash message i'm sending to them (through a form). But they have no knowledge about Ruby so they can't guarantee anything. </p>

<p>Maybe some of you will find something wrong?</p>

<p>Here is the method:</p>

<pre><code>def paiement
    @commande = Commande.find_by(code: params[:id])

    @confirmation_url = ENV['PBX_EFFECTUE'].gsub('CODE_COMMANDE', @commande.code)
    @annulation_url = ENV['PBX_ANNULE'].gsub('CODE_COMMANDE', @commande.code)
    @refus_url = ENV['PBX_REFUSE'].gsub('CODE_COMMANDE', @commande.code)

    @current_time = Time.now.strftime('%FT%T%:z')

    msg = {
      PBX_SITE: ""#{ENV['PBX_SITE']}"",
      PBX_RANG: ""#{ENV['PBX_RANG']}"",
      PBX_IDENTIFIANT: ""#{ENV['PBX_IDENTIFIANT']}"",
      PBX_TOTAL: ""#{@commande.total_price_centimes}"",
      PBX_DEVISE: ""978"",
      PBX_CMD: ""#{@commande.code}"",
      PBX_PORTEUR: ""#{current_user.email}"",
      PBX_REPONDRE_A: ""#{ENV['PBX_REPONDRE_A']}"",
      PBX_RETOUR: ""#{ENV['PBX_RETOUR']}"",
      PBX_EFFECTUE: ""#{@confirmation_url}"",
      PBX_ANNULE: ""#{@annulation_url}"",
      PBX_REFUSE: ""#{@refus_url}"",
      PBX_HASH: ""SHA512"",
      PBX_TIME: ""#{@current_time}""
    }

    key = ENV['CLE_HMAC']
    binKey = [key].pack('H*')

    digest = OpenSSL::Digest.new('sha512')
    @signature = OpenSSL::HMAC.hexdigest(digest, binKey, msg.keys.map{|k,v| ""#{k}=#{v}""}.join('&amp;')).upcase
    #binding.pry
  end
</code></pre>

<p>The form:</p>

<pre><code>&lt;form method=""POST"" action=""&lt;%= ENV['CREDIT_AGRICOLE_URL'] %&gt;"" id=""paiement-form""&gt;
  &lt;input type=""hidden"" name=""PBX_SITE"" value=""&lt;%= ENV['PBX_SITE'] %&gt;""&gt;
  &lt;input type=""hidden"" name=""PBX_RANG"" value=""&lt;%= ENV['PBX_RANG'] %&gt;""&gt;
  &lt;input type=""hidden"" name=""PBX_IDENTIFIANT"" value=""&lt;%= ENV['PBX_IDENTIFIANT'] %&gt;""&gt;
  &lt;input type=""hidden"" name=""PBX_TOTAL"" value=""&lt;%= @commande.total_price_centimes %&gt;""&gt;
  &lt;input type=""hidden"" name=""PBX_DEVISE"" value=""978""&gt;
  &lt;input type=""hidden"" name=""PBX_CMD"" value=""&lt;%= @commande.code %&gt;""&gt;
  &lt;input type=""hidden"" name=""PBX_PORTEUR"" value=""&lt;%= ENV['PBX_PORTEUR'] %&gt;""&gt;
  &lt;input type=""hidden"" name=""PBX_REPONDRE_A"" value=""&lt;%= ENV['PBX_REPONDRE_A'] %&gt;""&gt;
  &lt;input type=""hidden"" name=""PBX_RETOUR"" value=""&lt;%= ENV['PBX_RETOUR'] %&gt;""&gt;
  &lt;input type=""hidden"" name=""PBX_EFFECTUE"" value=""&lt;%= @confirmation_url %&gt;""&gt;
  &lt;input type=""hidden"" name=""PBX_ANNULE"" value=""&lt;%= @annulation_url %&gt;""&gt;
  &lt;input type=""hidden"" name=""PBX_REFUSE"" value=""&lt;%= @refus_url %&gt;""&gt;
  &lt;input type=""hidden"" name=""PBX_HASH"" value=""SHA512""&gt;
  &lt;input type=""hidden"" name=""PBX_TIME"" value=""&lt;%= @current_time %&gt;""&gt;
  &lt;input type=""hidden"" name=""PBX_HMAC"" value=""&lt;%= @signature %&gt;""&gt;
  &lt;input type=""submit"" value=""Envoyer""&gt;
&lt;/form&gt;
</code></pre>

<p>Where the <code>paiement</code> action is triggered:</p>

<pre><code>&lt;div class=""cmd-actions""&gt;
    &lt;%= form_for @commande, {url: commande_path(@commande.code)} do |f| %&gt;
      &lt;div class=""recap-commande-container""&gt;
        &lt;div class=""etape""&gt;
          &lt;div&gt;3&lt;/div&gt;
          &lt;h1&gt;Récapitulatif et paiement de votre commande&lt;/h1&gt;
        &lt;/div&gt;
        &lt;%= render partial: 'line_items_table', locals: {recap_commande: @commande} %&gt;
      &lt;/div&gt;
      &lt;div id=""secured-paiement""&gt;
        &lt;div&gt;
          &lt;h3&gt;Choisissez votre mode de paiement :&lt;/h3&gt;
        &lt;/div&gt;
        &lt;div class=""secured-paiement-logo""&gt;
          &lt;div class=""paiement-row""&gt;
            &lt;div class=""input-radio""&gt;
              &lt;%= radio_button_tag(""commande[methode_paiement]"", 'carte_bancaire', {onchange: 'methode(1)', data: {a: ""carte_bancaire""}, id: 'carte_bancaire'}) %&gt;
            &lt;/div&gt;
            &lt;div class=""input-img""&gt;
              &lt;%= image_tag('logo/ca-e-transactions', style: 'width: 170px;height: 40px') %&gt;
              &lt;%= image_tag('logo/mastercard', style: 'width: 50px;height: 40px') %&gt;
              &lt;%= image_tag('logo/visa', style: 'width: 50px;height: 40px') %&gt;
              &lt;%= image_tag('logo/cb', style: 'width: 50px;height: 40px') %&gt;
            &lt;/div&gt;
          &lt;/div&gt;
          &lt;div class=""paiement-row"" style=""margin-top: 20px;""&gt;
            &lt;div class=""input-radio""&gt;
              &lt;%= radio_button_tag(""commande[methode_paiement]"", 'le_pot_commun', {onchange: 'methode(2)', data: {a: ""le_pot_commun""}, id: 'le_pot_commun'}) %&gt;
            &lt;/div&gt;
            &lt;div class=""input-img""&gt;
              &lt;%= image_tag('logo/pot-commun') %&gt;
            &lt;/div&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
      &lt;div id=""proceed-actions""&gt;
        &lt;div id=""cgv""&gt;
          &lt;%= check_box_tag ""cgv"" %&gt;
          &lt;label&gt;J'accepte les &lt;%= link_to ""conditions générales de vente"", conditions_generales_de_vente_path, style: 'color:black', target: 'blank' %&gt;&lt;/label&gt;
        &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=""commander-link"" id=""paiement-cmd-btn""&gt;
        &lt;%= f.submit ""Payer ma commande"" %&gt;
      &lt;/div&gt;
    &lt;% end %&gt;
  &lt;/div&gt;
</code></pre>

<p>The form is supposed to redirect to <em><a href=""https://preprod-tpeweb.paybox.com/cgi/MYchoix_pagepaiement.cgi"" rel=""nofollow noreferrer"">https://preprod-tpeweb.paybox.com/cgi/MYchoix_pagepaiement.cgi</a></em>, and this is what it does. But on that same page, i have the following error message: ""Problème d'identification du commerce. Accès refusé !"" ('Authentification issue. Access denied !').</p>

<p>This issue is related to this one: <a href=""https://stackoverflow.com/questions/48427354/ruby-hmac-signing-issue"">Ruby HMAC signing issue</a></p>

<p>Any ideas?</p>
","<p>It seems you made a typo in collecting the data from your hash. You currently use:</p>

<pre><code>msg.keys.map { |k,v| ""#{k}=#{v}"" }.join('&amp;')
</code></pre>

<p>but by calling <em>#keys</em> on the hash you'll get an array with only keys.</p>

<p>I guess you meant to type</p>

<pre><code>msg.map { |k,v| ""#{k}=#{v}"" }.join('&amp;')
</code></pre>

<p>otherwise you'll lose the values and <em>v</em> is always <code>nil</code>.</p>
","48668146","76","<ruby-on-rails><ruby><hmac><ruby-hash>","0","0","3","2018-02-15 21:22:50","","2","","5914341","","2018-02-07 15:23:46","2018-02-07 14:57:14","","","2018-02-07 16:00:30"
"48666838","Hash message Rails","<p>I have issues linking my Rails app to Paybox (through a French bank). </p>

<p>The technical support says that the problem could come from the hash message i'm sending to them (through a form). But they have no knowledge about Ruby so they can't guarantee anything. </p>

<p>Maybe some of you will find something wrong?</p>

<p>Here is the method:</p>

<pre><code>def paiement
    @commande = Commande.find_by(code: params[:id])

    @confirmation_url = ENV['PBX_EFFECTUE'].gsub('CODE_COMMANDE', @commande.code)
    @annulation_url = ENV['PBX_ANNULE'].gsub('CODE_COMMANDE', @commande.code)
    @refus_url = ENV['PBX_REFUSE'].gsub('CODE_COMMANDE', @commande.code)

    @current_time = Time.now.strftime('%FT%T%:z')

    msg = {
      PBX_SITE: ""#{ENV['PBX_SITE']}"",
      PBX_RANG: ""#{ENV['PBX_RANG']}"",
      PBX_IDENTIFIANT: ""#{ENV['PBX_IDENTIFIANT']}"",
      PBX_TOTAL: ""#{@commande.total_price_centimes}"",
      PBX_DEVISE: ""978"",
      PBX_CMD: ""#{@commande.code}"",
      PBX_PORTEUR: ""#{current_user.email}"",
      PBX_REPONDRE_A: ""#{ENV['PBX_REPONDRE_A']}"",
      PBX_RETOUR: ""#{ENV['PBX_RETOUR']}"",
      PBX_EFFECTUE: ""#{@confirmation_url}"",
      PBX_ANNULE: ""#{@annulation_url}"",
      PBX_REFUSE: ""#{@refus_url}"",
      PBX_HASH: ""SHA512"",
      PBX_TIME: ""#{@current_time}""
    }

    key = ENV['CLE_HMAC']
    binKey = [key].pack('H*')

    digest = OpenSSL::Digest.new('sha512')
    @signature = OpenSSL::HMAC.hexdigest(digest, binKey, msg.keys.map{|k,v| ""#{k}=#{v}""}.join('&amp;')).upcase
    #binding.pry
  end
</code></pre>

<p>The form:</p>

<pre><code>&lt;form method=""POST"" action=""&lt;%= ENV['CREDIT_AGRICOLE_URL'] %&gt;"" id=""paiement-form""&gt;
  &lt;input type=""hidden"" name=""PBX_SITE"" value=""&lt;%= ENV['PBX_SITE'] %&gt;""&gt;
  &lt;input type=""hidden"" name=""PBX_RANG"" value=""&lt;%= ENV['PBX_RANG'] %&gt;""&gt;
  &lt;input type=""hidden"" name=""PBX_IDENTIFIANT"" value=""&lt;%= ENV['PBX_IDENTIFIANT'] %&gt;""&gt;
  &lt;input type=""hidden"" name=""PBX_TOTAL"" value=""&lt;%= @commande.total_price_centimes %&gt;""&gt;
  &lt;input type=""hidden"" name=""PBX_DEVISE"" value=""978""&gt;
  &lt;input type=""hidden"" name=""PBX_CMD"" value=""&lt;%= @commande.code %&gt;""&gt;
  &lt;input type=""hidden"" name=""PBX_PORTEUR"" value=""&lt;%= ENV['PBX_PORTEUR'] %&gt;""&gt;
  &lt;input type=""hidden"" name=""PBX_REPONDRE_A"" value=""&lt;%= ENV['PBX_REPONDRE_A'] %&gt;""&gt;
  &lt;input type=""hidden"" name=""PBX_RETOUR"" value=""&lt;%= ENV['PBX_RETOUR'] %&gt;""&gt;
  &lt;input type=""hidden"" name=""PBX_EFFECTUE"" value=""&lt;%= @confirmation_url %&gt;""&gt;
  &lt;input type=""hidden"" name=""PBX_ANNULE"" value=""&lt;%= @annulation_url %&gt;""&gt;
  &lt;input type=""hidden"" name=""PBX_REFUSE"" value=""&lt;%= @refus_url %&gt;""&gt;
  &lt;input type=""hidden"" name=""PBX_HASH"" value=""SHA512""&gt;
  &lt;input type=""hidden"" name=""PBX_TIME"" value=""&lt;%= @current_time %&gt;""&gt;
  &lt;input type=""hidden"" name=""PBX_HMAC"" value=""&lt;%= @signature %&gt;""&gt;
  &lt;input type=""submit"" value=""Envoyer""&gt;
&lt;/form&gt;
</code></pre>

<p>Where the <code>paiement</code> action is triggered:</p>

<pre><code>&lt;div class=""cmd-actions""&gt;
    &lt;%= form_for @commande, {url: commande_path(@commande.code)} do |f| %&gt;
      &lt;div class=""recap-commande-container""&gt;
        &lt;div class=""etape""&gt;
          &lt;div&gt;3&lt;/div&gt;
          &lt;h1&gt;Récapitulatif et paiement de votre commande&lt;/h1&gt;
        &lt;/div&gt;
        &lt;%= render partial: 'line_items_table', locals: {recap_commande: @commande} %&gt;
      &lt;/div&gt;
      &lt;div id=""secured-paiement""&gt;
        &lt;div&gt;
          &lt;h3&gt;Choisissez votre mode de paiement :&lt;/h3&gt;
        &lt;/div&gt;
        &lt;div class=""secured-paiement-logo""&gt;
          &lt;div class=""paiement-row""&gt;
            &lt;div class=""input-radio""&gt;
              &lt;%= radio_button_tag(""commande[methode_paiement]"", 'carte_bancaire', {onchange: 'methode(1)', data: {a: ""carte_bancaire""}, id: 'carte_bancaire'}) %&gt;
            &lt;/div&gt;
            &lt;div class=""input-img""&gt;
              &lt;%= image_tag('logo/ca-e-transactions', style: 'width: 170px;height: 40px') %&gt;
              &lt;%= image_tag('logo/mastercard', style: 'width: 50px;height: 40px') %&gt;
              &lt;%= image_tag('logo/visa', style: 'width: 50px;height: 40px') %&gt;
              &lt;%= image_tag('logo/cb', style: 'width: 50px;height: 40px') %&gt;
            &lt;/div&gt;
          &lt;/div&gt;
          &lt;div class=""paiement-row"" style=""margin-top: 20px;""&gt;
            &lt;div class=""input-radio""&gt;
              &lt;%= radio_button_tag(""commande[methode_paiement]"", 'le_pot_commun', {onchange: 'methode(2)', data: {a: ""le_pot_commun""}, id: 'le_pot_commun'}) %&gt;
            &lt;/div&gt;
            &lt;div class=""input-img""&gt;
              &lt;%= image_tag('logo/pot-commun') %&gt;
            &lt;/div&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
      &lt;div id=""proceed-actions""&gt;
        &lt;div id=""cgv""&gt;
          &lt;%= check_box_tag ""cgv"" %&gt;
          &lt;label&gt;J'accepte les &lt;%= link_to ""conditions générales de vente"", conditions_generales_de_vente_path, style: 'color:black', target: 'blank' %&gt;&lt;/label&gt;
        &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=""commander-link"" id=""paiement-cmd-btn""&gt;
        &lt;%= f.submit ""Payer ma commande"" %&gt;
      &lt;/div&gt;
    &lt;% end %&gt;
  &lt;/div&gt;
</code></pre>

<p>The form is supposed to redirect to <em><a href=""https://preprod-tpeweb.paybox.com/cgi/MYchoix_pagepaiement.cgi"" rel=""nofollow noreferrer"">https://preprod-tpeweb.paybox.com/cgi/MYchoix_pagepaiement.cgi</a></em>, and this is what it does. But on that same page, i have the following error message: ""Problème d'identification du commerce. Accès refusé !"" ('Authentification issue. Access denied !').</p>

<p>This issue is related to this one: <a href=""https://stackoverflow.com/questions/48427354/ruby-hmac-signing-issue"">Ruby HMAC signing issue</a></p>

<p>Any ideas?</p>
","<p>For the date I'm using</p>

<pre><code> @date_time = Time.now.iso8601
</code></pre>

<p>To create Hmac:</p>

<pre><code>bin_key = Array(keyTest).pack 'H*'
@hmac = OpenSSL::HMAC.hexdigest(""SHA512"", bin_key, data).upcase
</code></pre>

<p>Also your key needs to be activated after being generated.</p>
","48816334","76","<ruby-on-rails><ruby><hmac><ruby-hash>","0","0","3","2018-02-15 21:22:50","","2","","5914341","","2018-02-07 15:23:46","2018-02-07 14:57:14","","2018-02-15 21:22:50","2018-02-15 21:10:15"
"55462130","Python: how to compare hashlib lib and hmac lib message digests","<p>I searched around and couldn´t find an answer for this. I noticed I can generate message digests using, let´s say <code>blake2b</code> algorithm using <code>hashlib</code> library or <code>hmac</code> library, which uses the <code>digestmod</code> indicated by <code>hashlib</code>. So:</p>

<pre><code>plainMsg = ""this is a plaintext message""
hashlib_hashed = hashlib.blake2b(key=b'super secret key')
hashlib_hashed.update(plainMsg.encode())
hmac_hashed = hmac.new(b'super secret key', digestmod=hashlib.blake2b)
hmac_hashed.update(plainMsg.encode())

print(hashlib_hashed.hexdigest())
print(hmac_hashed.hexdigest())
</code></pre>

<p>In my mind they should generate the same message digests as I´m using the same algorithm, same key and the same plaintext. But they generate two different digests:</p>

<pre><code>ec0d0ab13d7e7f3b62d742aa92078a4a14346ee6ee352e27c8814e4bf6361556fdc3d301e100b5a2c90c5596c4b2bb72c887c6b6aa92fb41752f6b52105ce13b
b632045e745550e5b9da6d411c013c978cb8120847260eb8fda9c8885368a5eaba80cd74ad95a51b1a4bde1f47cccb5a2e4591e9935126f673479c7474c2be97
</code></pre>

<p>I initially though it would have to do with salt, as I didn´t use one with <code>hashlib.blake2b()</code>, so I guess it´s empty since <code>salt=b''</code>. But using <code>hmac</code> I didn´t find how to set up a salt. So, can anyone explain?</p>
","<p>The HMAC algorithm is more than just ""hash key followed by message""; the key is padded to match the algorithm's block size, each byte is then xor-ed with a fixed ""ipad"" (0x36), the hash is computed from that value followed by the text is computed. Then the original padded key is xor-ed with a fixed ""opad"" (0x5C) and the hash is again computed from that new value followed by the hash from the previous step.</p>

<p>Point is, it's not as straightforward as you think it is. You can look at the contents of <a href=""https://github.com/python/cpython/blob/3.7/Lib/hmac.py#L26"" rel=""nofollow noreferrer"">the <code>hmac.HMAC</code> class</a> to see the additional rigmarole Python does to follow the <a href=""https://tools.ietf.org/html/rfc2104.html"" rel=""nofollow noreferrer"">HMAC RFC</a>.</p>
","55462319","76","<python><hmac><digest><hashlib>","-1","1","2","2019-04-01 19:55:01","","0","","","","","2019-04-01 19:20:57","","","2019-04-01 19:33:24"
"55462130","Python: how to compare hashlib lib and hmac lib message digests","<p>I searched around and couldn´t find an answer for this. I noticed I can generate message digests using, let´s say <code>blake2b</code> algorithm using <code>hashlib</code> library or <code>hmac</code> library, which uses the <code>digestmod</code> indicated by <code>hashlib</code>. So:</p>

<pre><code>plainMsg = ""this is a plaintext message""
hashlib_hashed = hashlib.blake2b(key=b'super secret key')
hashlib_hashed.update(plainMsg.encode())
hmac_hashed = hmac.new(b'super secret key', digestmod=hashlib.blake2b)
hmac_hashed.update(plainMsg.encode())

print(hashlib_hashed.hexdigest())
print(hmac_hashed.hexdigest())
</code></pre>

<p>In my mind they should generate the same message digests as I´m using the same algorithm, same key and the same plaintext. But they generate two different digests:</p>

<pre><code>ec0d0ab13d7e7f3b62d742aa92078a4a14346ee6ee352e27c8814e4bf6361556fdc3d301e100b5a2c90c5596c4b2bb72c887c6b6aa92fb41752f6b52105ce13b
b632045e745550e5b9da6d411c013c978cb8120847260eb8fda9c8885368a5eaba80cd74ad95a51b1a4bde1f47cccb5a2e4591e9935126f673479c7474c2be97
</code></pre>

<p>I initially though it would have to do with salt, as I didn´t use one with <code>hashlib.blake2b()</code>, so I guess it´s empty since <code>salt=b''</code>. But using <code>hmac</code> I didn´t find how to set up a salt. So, can anyone explain?</p>
","<p>You are using two <em>different</em> algorithms to create a <a href=""https://en.wikipedia.org/wiki/Message_authentication_code"" rel=""nofollow noreferrer""><em>Message Authentication Code</em></a>, or MAC.</p>

<p>When you are using the <code>hmac</code> module, you are creating a <em>hashed</em> MAC, or <a href=""https://en.wikipedia.org/wiki/HMAC"" rel=""nofollow noreferrer"">HMAC</a>. Here, the key is used twice (with a different XOR mask each time) to prepend a value to the data, and a hash function (provided by the <code>hashlib</code> library) is used to process the input data a block at a time to 'compress' the data first into in inner value, then an outer value after prepending the second key, in a two-step process. This makes the algorithm very flexible as any block hash can be adapted for this technique.</p>

<p>BLAKE2, with a key, can also be used to create a MAC, but it is the hash function <em>itself</em> that then uses that key to produce a 'secret' hash output, one that can only be verified with the same key, so producing a secure signature too. It does this by making the key the first block for the iterative hashing operation.</p>

<p>But Blake2 <em>without</em> a key, is just another hash function, like SHA256 and others, and when you use it in an HMAC, the different approach will produce a different result. The two are not compatible, because the two algorithms use their key very differently.</p>

<p>Quoting from the <a href=""https://tools.ietf.org/html/rfc7693#section-1"" rel=""nofollow noreferrer"">RFC 7693 – <em>BLAKE2 Crypto Hash and MAC</em></a>:</p>

<blockquote>
  <p>BLAKE2 does not require
     a special ""HMAC"" (Hashed Message Authentication Code) construction
     for keyed message authentication as it has a built-in keying
     mechanism.</p>
</blockquote>

<p>and from the <a href=""https://docs.python.org/3/library/hashlib.html#blake2"" rel=""nofollow noreferrer"">BLAKE2 section of the <code>hashlib</code> documentation</a>:</p>

<blockquote>
  <p>BLAKE2 supports keyed mode (a faster and simpler replacement for HMAC), [...]</p>
</blockquote>

<p>The <code>salt</code> argument to the <code>hashlib.blake2b()</code> function is a different feature of the BLAKE2 hashing algorithm, where otherwise you'd just prepend the salt with the hashed plaintext. A salt 'randomises' the output so that it is highly unlikely to produce the same output for the same input message twice (making it impossible for a 3rd party to detect repeated messages).</p>
","55462363","76","<python><hmac><digest><hashlib>","-1","0","2","2019-04-01 19:55:01","","0","","","","","2019-04-01 19:20:57","","2019-04-01 19:55:01","2019-04-01 19:36:14"
"56409305","Nodejs different HMAC signature from OpenSSL","<p>I've been struggling with creating a correct HMAC signature in Node.</p>

<h2>Use case</h2>

<p>I'm currently working a Jointspace API client for Node to control Philips smart tv's. But to get this working I need to sign a string for a pairing request.</p>

<h2>Current situation</h2>

<p>My nodejs code looks like this:</p>

<pre><code>const crypto = require('crypto');

let secret = Buffer.from('ZmVay1EQVFOaZhwQ4Kv81ypLAZNczV9sG4KkseXWn1NEk6cXmPKO/MCa9sryslvLCFMnNe4Z4CPXzToowvhHvA==', 'base64');
let text = '12345';
let algorithm = 'sha1';
let hmac = crypto.createHmac(algorithm, secret);
hmac.write(text);
hmac.end();

console.log(hmac.read('binary').toString('base64'));
</code></pre>

<p>When I run it, it results to this:</p>

<pre><code>~ $ node test.js
DURLMkx7YdrIlWdUKo3iNDC3cp0=
</code></pre>

<h2>Expected</h2>

<p>When I do the exact same thing with the <code>openssl</code> command via the command line, I get a different result. (The correct result)</p>

<pre><code>~ $ echo -n ""ZmVay1EQVFOaZhwQ4Kv81ypLAZNczV9sG4KkseXWn1NEk6cXmPKO/MCa9sryslvLCFMnNe4Z4CPXzToowvhHvA=="" | base64 -d | openssl dgst -sha1 -hmac ""12345"" -binary | base64
GvbRLlBSY8r/jPqUGox8zZHxOew=
</code></pre>

<h2>References</h2>

<p>There is <a href=""https://github.com/nodejs/node/issues/5499"" rel=""nofollow noreferrer"">an issue on the node Github page</a> which addresses an issue of a difference between Node and openssl. In that issue they basically say that crypto in node is just a wrapper for the C++ openssl library. And in order for it to properly work you need to provide the secret as a Buffer instead of a string because of conversion issues.</p>

<p>E.g.</p>

<pre><code>crypto.createHmac('sha1', new Buffer('secret_key', 'utf8'));
</code></pre>

<p>But this does not resolve my issue.</p>

<h2>Differences in output</h2>

<pre><code>~ $ echo ""DURLMkx7YdrIlWdUKo3iNDC3cp0="" | base64 -d | hexdump -C
00000000  0d 44 4b 32 4c 7b 61 da  c8 95 67 54 2a 8d e2 34  |.DK2L{a...gT*..4|
00000010  30 b7 72 9d                                       |0.r.|
00000014
~ $ echo ""GvbRLlBSY8r/jPqUGox8zZHxOew="" | base64 -d | hexdump -C
00000000  1a f6 d1 2e 50 52 63 ca  ff 8c fa 94 1a 8c 7c cd  |....PRc.......|.|
00000010  91 f1 39 ec                                       |..9.|
00000014
</code></pre>
","<p>In your command you're using <code>12345</code> as the HMAC key but in your code you're using it as data! so here's an update on the code</p>

<pre><code>const crypto = require('crypto');

let secret = 'ZmVay1EQVFOaZhwQ4Kv81ypLAZNczV9sG4KkseXWn1NEk6cXmPKO/MCa9sryslvLCFMnNe4Z4CPXzToowvhHvA=='
let key = '12345';
let algorithm = 'sha1';
let hmac = crypto.createHmac(algorithm, key);
hmac.write(secret);
hmac.end();

console.log(hmac.read('binary').toString('base64'));
</code></pre>

<p>And here's the command</p>

<pre><code>echo -n ""ZmVay1EQVFOaZhwQ4Kv81ypLAZNczV9sG4KkseXWn1NEk6cXmPKO/MCa9sryslvLCFMnNe4Z4CPXzToowvhHvA=="" | openssl dgst -sha1 -hmac ""12345"" -binary | base64
</code></pre>

<p>They both return the same hash.</p>
","56409524","76","<node.js><openssl><hmac><digest>","0","1","1","2019-06-01 18:48:39","56409524","0","","952824","","2019-06-01 18:43:17","2019-06-01 18:19:04","","","2019-06-01 18:48:39"
"58541034","WebRTC ICE-Stun message-integrity attribute","<p>What do I use for the HMAC-SHA1 key when verifying the MESSAGE-INTEGRITY attribute of STUN Binding Requests from Chrome? (chrome is in the ICE-CONTROLLING role as the SDP offer is from an ICE-LITE peer)</p>

<p><a href=""https://tools.ietf.org/html/rfc5245"" rel=""nofollow noreferrer"">RFC-5245</a> states: </p>

<blockquote>
  <p>To compute the message integrity for the check, the agent uses the
     remote username fragment and password learned from the SDP from its
     peer.  The local username fragment is known directly by the agent for
     its own candidate.</p>
</blockquote>

<p>But it does not state how these are concatenated by the agent to form the HMAC SHA1 key</p>

<p>I have tried different combinations of ice-username:ice-password to form the key, but none seem to be able to generate the same hash as the message integrity attribute in the Binding request from chrome.</p>

<p>Does anyone know how the HMAC key is formed?</p>
","<p>Requests for you will be signed with your local ice-pwd and the responses must be signed with it (as described <a href=""https://tools.ietf.org/html/rfc8445#section-7.2.2"" rel=""nofollow noreferrer"">ħere</a>).</p>

<p>See <a href=""https://tools.ietf.org/html/rfc5389#section-10.1.2"" rel=""nofollow noreferrer"">RFC 5389</a> on how to compute the hash.</p>
","58541832","74","<google-chrome><webrtc><hmac><stun><hmacsha1>","0","1","1","2019-10-24 12:52:46","58541832","0","","","","","2019-10-24 12:05:04","","","2019-10-24 12:52:46"
"49197833","Translate code from JS to CPP","<p>i'm a bit experienced in CPP and totaly new in JS. Have a task in translating code from JS to CPP, i tried something but not clear about what i am doing; hereafter my js code. </p>

<pre><code>body: json object

xyz: string (suck as: ALgalgw7agw)

const payload = new Buffer(JSON.stringify(body))
    .toString('base64')

const signature = crypto
  .createHmac('sha384', xyz)
  .update(payload)
  .digest('hex')
</code></pre>

<p>1) what is the meaning of this code segment?</p>

<p>2) how can i implement it in cpp?</p>

<p>Thanks so much for your time,</p>
","<p>You are talking about NodeJS, in this case instances of the Buffer class are similar to arrays of integers but correspond to fixed-sized, raw memory allocations. The size of the Buffer is established when it is created and cannot be resized. After that you are transforming it to a Base64 String.</p>

<pre><code>const buf = Buffer.from('hello world', 'ascii');
// Prints: aGVsbG8gd29ybGQ=
console.log(buf.toString('base64'));
</code></pre>

<p>After that you are creating a hash for the payload, using ""xyz"" variable which is the key to decipher the payload, and then digesting it to a hex. So in the end:</p>

<pre><code>signature = /* hex sha384-with-key encrypted payload */
</code></pre>

<p>If you want to translate this JS code to C++ you'd need to use some kind of crypto library (such as OpenSSL) and for the Buffer I think there are built-in functions. </p>

<p>I suggest you reading <a href=""https://nodejs.org/api/buffer.html"" rel=""nofollow noreferrer"">this</a> and <a href=""https://nodejs.org/api/crypto.html"" rel=""nofollow noreferrer"">this</a> to know more about crypto and Buffer classes/functions on NodeJS</p>
","49198046","73","<javascript><c++><json><hmac>","-3","0","1","2018-03-09 16:23:41","49198046","2","","4342498","","2018-03-09 16:15:11","2018-03-09 16:12:56","","","2018-03-09 16:23:41"
"57005146","HMAC256 from C# to Javascript returns different results","<p>I want to create a HMAC256 key from a string with a HMAC key based on my C# project in Javascript. however, each project has different results and can't seem to find a way to make the results identical.</p>

<p>C# PROJECT</p>

<pre><code>private string CalculateHMAC(string hmacKey, string signingstring) {
  byte[] key = PackH(hmacKey) //returns 32 bit array;
  byte[] data = Encoding.UTF8.GetBytes(signingstring);

  try {
    using(HMACSHA256 hmac = new HMACSHA256(key)) {
      // Compute the hmac on input data bytes
      byte[] rawHmac = hmac.ComputeHash(data);

      // Base64-encode the hmac
      return Convert.ToBase64String(rawHmac);
    }
  } catch (Exception e) {
    throw new Exception(""Failed to generate HMAC : "" + e.Message);
  }
}
</code></pre>

<p>JAVASCRIPT CODE</p>

<pre class=""lang-js prettyprint-override""><code>var hash = CryptoJS.HmacSHA256(byteString, hmacKeyinString);
var msg = hash.toString(CryptoJS.enc.Base64);
</code></pre>



<p>Thank you in advance.</p>

<p>Using CryptoJS in my javascript project</p>
","<p>fixed with this line of code</p>

<pre><code>        var wordsKey = CryptoJS.enc.Hex.parse('yourkey');

        var hash = CryptoJS.HmacSHA256(convertString, wordsKey);
        var hashInBase64 = CryptoJS.enc.Base64.stringify(hash);
</code></pre>
","57036000","72","<javascript><c#><html><hash><hmac>","0","0","1","2019-07-16 08:40:26","","13","","4051471","","2019-07-12 10:34:05","2019-07-12 10:29:14","","2019-07-16 08:40:26","2019-07-15 08:32:55"
"42148025","Converting Node.js HMAC to C++","<p>Ive been working on a project, and as part of it I need to convert the Node.js code </p>

<pre><code>var hash = crypto.createHmac('sha512', key).update(text).digest('hex');
</code></pre>

<p>to C++. I've decided to use Crypto++, leading to the following code:</p>

<pre><code>//Creating the key from an integer instead of a string or byte array
char bytes[sizeof key];
std::copy(static_cast&lt;const char*&gt;(static_cast&lt;const void*&gt;(&amp;key)),
    static_cast&lt;const char*&gt;(static_cast&lt;const void*&gt;(&amp;key)) + sizeof key,
    bytes);
SecByteBlock key(bytes, sizeof(bytes));

//Create HMAC using server seed as key and client seed as message
HMAC&lt; SHA512 &gt; hmac(key, key.size());
string plain = ""HMAC Test"";
string mac, encoded;

StringSource ss2(text, true, new HashFilter(hmac, new StringSink(mac)) /* HashFilter*/);
</code></pre>

<p>Are these two code blocks equivalent? I'm much more familiar with JS so I'm not certain the C++ code is entirely correct in function.</p>
","","","72","<c++><node.js><hmac><crypto++>","1","","0","2017-02-09 22:24:22","","2","","","","","2017-02-09 22:24:22","","",""
"40685684","What is reason of time difference in same hashing algorithms?","<p>i have read this article in Codeproject:</p>

<p><strong>Salted-Password-Hashing-Doing-it-Right.</strong></p>

<p>and i understand that the best hash algorithm for asp.net webforms is <strong>PBKDF2-HMAC-SHA512</strong>. and then this github implementation:</p>

<p><strong><a href=""https://github.com/defuse/password-hashing"" rel=""nofollow noreferrer"">My implementations of PBKDF2 in PHP, C#, Java, and Ruby.</a></strong></p>

<p>it's based on <strong>PBKDF2-HMAC-SHA1</strong>.</p>

<p>i googled to find something that help me to make a hash based on <strong>PBKDF2-HMAC-SHA512</strong>.</p>

<p>and i've found this library on github:</p>

<p><strong><a href=""https://github.com/therealmagicmike/PBKDF2.NET"" rel=""nofollow noreferrer"">therealmagicmike/PBKDF2.NET</a></strong>.</p>

<p>in this library i can define my hash algorithm like <strong>HMACSHA1</strong>, <strong>HMACSHA256</strong>, <strong>HMACSHA384</strong> or <strong>HMACSHA512</strong>.</p>

<p>and as you know <strong>HMACSHA1</strong> is faster than <strong>HMACSHA512</strong>. and it's not good in security reasons.</p>

<p>But i've found something that i don't know it's true or not! i've implemented both algorithms in same page and understand that adriancs's algorithm takes longer time than the mike's. and it's not logical as for adriancs's article.</p>

<p>So, i want to know which algorithm is slowest and also which is better?</p>

<p>any help will be appreciated.</p>

<p>Thanks a lot.</p>
","<p>Sorry to find this so late. I'm the author of PBKDF2.NET. The speed difference is due to the equality comparison. The library by Defuse implements a slow-compare function, where I chose to leave any custom comparisons up to the consumer. My reasoning is that I didn't want to create a library with additional non-essential utility functions but rather to provide a proper implementation of the algorithm. Whether or not a particular application requires a slow compare really depends on the application so I excluded this.</p>
","55911702","72","<hash><hmac><password-encryption><pbkdf2>","0","0","1","2019-05-05 23:30:35","55911702","8","","","user6311045","2019-05-05 23:30:35","2016-11-18 20:46:56","","","2019-04-29 22:41:23"
"55996683","HMAC Binary Digest Node vs Ruby","<p>I am trying to implement a Node API using Ruby documentation (ugh). The issue specifically is around verifying a secret, which is put through an HMAC digest and then base64 encoded.</p>

<p>I can't seem to get the two to equate. Here are the same snippets in Node &amp; Ruby:</p>

<p><em>Note</em>: The below can also be viewed online via repl.it:</p>

<ul>
<li>Ruby (<a href=""https://repl.it/repls/SarcasticSpottedSymbol"" rel=""nofollow noreferrer"">https://repl.it/repls/SarcasticSpottedSymbol</a>)</li>
<li>Node (<a href=""https://repl.it/repls/AncientQuarrelsomeWearable"" rel=""nofollow noreferrer"">https://repl.it/repls/AncientQuarrelsomeWearable</a>)</li>
</ul>

<h2>Node</h2>

<pre><code>const crypto = require('crypto');

let text = 'example';
let key  = '123';

let h = crypto.createHmac('sha256', key).update(text).digest('binary');
Buffer.from(h).toString('base64');
# =&gt; 'acKNVMOwSUUowqdZw7HCnMKOwofCqcO5wp51wqXCiBvCkmfDrjkmwrzDtizCmS3ChMK6'
</code></pre>

<h2>Ruby</h2>

<pre><code>require 'openssl'
require 'base64'

text = 'example'
key  = '123'

h = OpenSSL::HMAC.digest(OpenSSL::Digest.new('sha256'), key, text)
Base64.strict_encode64(h)
# =&gt; 'aY1U8ElFKKdZ8ZyOh6n5nnWliBuSZ+45Jrz2LJkthLo='
</code></pre>

<p>Switching both over to hex works, e.g.</p>

<p><em>Node</em></p>

<pre><code>crypto.createHmac('sha256', key).update(text).digest('hex')
</code></pre>

<p><em>Ruby</em></p>

<pre><code>OpenSSL::HMAC.hexdigest(OpenSSL::Digest.new('sha256'), key, text)
</code></pre>

<p>Unfortunately it isn't up to me to switch to hex - the web service uses the ruby code to sign.</p>

<p>Looking up the ruby docs for <a href=""https://ruby-doc.org/stdlib-2.4.0/libdoc/openssl/rdoc/OpenSSL/HMAC.html"" rel=""nofollow noreferrer""><code>OpenSSL::HMAC.digest</code></a> states:</p>

<blockquote>
  <p>Returns the authentication code as a <em>binary string</em>.</p>
</blockquote>

<p>Just outputting the result from the HMAC, I can't tell whether this is a difference or just a rendering issue:</p>

<p><em>Node</em></p>

<pre><code>crypto.createHmac('sha256', key).update(text).digest('binary');
# =&gt; 'iTðIE(§Yñ©ùu¥\u001bgî9&amp;¼ö,-º'
</code></pre>

<p><em>Ruby</em></p>

<pre><code>OpenSSL::HMAC.digest(OpenSSL::Digest.new('sha256'), key, text)
# =&gt; ""i\x8DT\xF0IE(\xA7Y\xF1\x9C\x8E\x87\xA9\xF9\x9Eu\xA5\x88\e\x92g\xEE9&amp;\xBC\xF6,\x99-\x84\xBA""
</code></pre>

<p>How can I get these two to equate?</p>

<p>Thank you!</p>
","<p>By not inputting any specific encoding to Node's digest method, the raw unicode buffer is output - matching Ruby's.</p>

<p>This is the end result:</p>

<pre><code>crypto = require('crypto');

text = 'example';
key  = '123';

h = crypto.createHmac('sha256', key).update(text).digest();
Buffer.from(h).toString('base64');
</code></pre>

<p>Who would've thought - you could just pass nothing into the method... </p>
","55997021","71","<node.js><ruby><encoding><hmac>","0","0","2","2019-05-05 22:46:05","","0","","","","","2019-05-05 21:45:05","","2019-05-05 22:43:35","2019-05-05 22:39:58"
"55996683","HMAC Binary Digest Node vs Ruby","<p>I am trying to implement a Node API using Ruby documentation (ugh). The issue specifically is around verifying a secret, which is put through an HMAC digest and then base64 encoded.</p>

<p>I can't seem to get the two to equate. Here are the same snippets in Node &amp; Ruby:</p>

<p><em>Note</em>: The below can also be viewed online via repl.it:</p>

<ul>
<li>Ruby (<a href=""https://repl.it/repls/SarcasticSpottedSymbol"" rel=""nofollow noreferrer"">https://repl.it/repls/SarcasticSpottedSymbol</a>)</li>
<li>Node (<a href=""https://repl.it/repls/AncientQuarrelsomeWearable"" rel=""nofollow noreferrer"">https://repl.it/repls/AncientQuarrelsomeWearable</a>)</li>
</ul>

<h2>Node</h2>

<pre><code>const crypto = require('crypto');

let text = 'example';
let key  = '123';

let h = crypto.createHmac('sha256', key).update(text).digest('binary');
Buffer.from(h).toString('base64');
# =&gt; 'acKNVMOwSUUowqdZw7HCnMKOwofCqcO5wp51wqXCiBvCkmfDrjkmwrzDtizCmS3ChMK6'
</code></pre>

<h2>Ruby</h2>

<pre><code>require 'openssl'
require 'base64'

text = 'example'
key  = '123'

h = OpenSSL::HMAC.digest(OpenSSL::Digest.new('sha256'), key, text)
Base64.strict_encode64(h)
# =&gt; 'aY1U8ElFKKdZ8ZyOh6n5nnWliBuSZ+45Jrz2LJkthLo='
</code></pre>

<p>Switching both over to hex works, e.g.</p>

<p><em>Node</em></p>

<pre><code>crypto.createHmac('sha256', key).update(text).digest('hex')
</code></pre>

<p><em>Ruby</em></p>

<pre><code>OpenSSL::HMAC.hexdigest(OpenSSL::Digest.new('sha256'), key, text)
</code></pre>

<p>Unfortunately it isn't up to me to switch to hex - the web service uses the ruby code to sign.</p>

<p>Looking up the ruby docs for <a href=""https://ruby-doc.org/stdlib-2.4.0/libdoc/openssl/rdoc/OpenSSL/HMAC.html"" rel=""nofollow noreferrer""><code>OpenSSL::HMAC.digest</code></a> states:</p>

<blockquote>
  <p>Returns the authentication code as a <em>binary string</em>.</p>
</blockquote>

<p>Just outputting the result from the HMAC, I can't tell whether this is a difference or just a rendering issue:</p>

<p><em>Node</em></p>

<pre><code>crypto.createHmac('sha256', key).update(text).digest('binary');
# =&gt; 'iTðIE(§Yñ©ùu¥\u001bgî9&amp;¼ö,-º'
</code></pre>

<p><em>Ruby</em></p>

<pre><code>OpenSSL::HMAC.digest(OpenSSL::Digest.new('sha256'), key, text)
# =&gt; ""i\x8DT\xF0IE(\xA7Y\xF1\x9C\x8E\x87\xA9\xF9\x9Eu\xA5\x88\e\x92g\xEE9&amp;\xBC\xF6,\x99-\x84\xBA""
</code></pre>

<p>How can I get these two to equate?</p>

<p>Thank you!</p>
","<p>To get Ruby to output Base64:</p>

<pre><code>require 'openssl'
require 'base64'

text = 'example'
key  = '123'

Base64.encode64(OpenSSL::HMAC.digest(OpenSSL::Digest.new('sha256'), key, text))
# ""aY1U8ElFKKdZ8ZyOh6n5nnWliBuSZ+45Jrz2LJkthLo=\n""
</code></pre>

<p>You can delete the <code>\n</code> newlines and trailing padding if you want.</p>
","55997065","71","<node.js><ruby><encoding><hmac>","0","0","2","2019-05-05 22:46:05","","0","","","","","2019-05-05 21:45:05","","","2019-05-05 22:46:05"
"58969850","Convert HMAC-SHA384 function from Java to JavaScript","<p>This is the java function that does the job.</p>

<pre><code> static byte[] HmacSHA384(String data, byte[] key) {
    try {
        mac.init(new SecretKeySpec(key, HMAC_ALGORITHM));
    } catch (InvalidKeyException e) {
        //throw new PWAINUnRecoverableException(""Invalid key exception while mac init"", e);
        throw new RuntimeException(""Invalid key exception while mac init"", e);
    }
    return mac.doFinal(data.getBytes(StandardCharsets.UTF_8));
}
</code></pre>

<p>I've already tried <a href=""https://stackoverflow.com/questions/7480158/how-do-i-use-node-js-crypto-to-create-a-hmac-sha1-hash"">this answer</a> with no luck.</p>

<p>Used <code>crypto-js</code> module also as:</p>

<pre><code>const result = crypto_js.HmacSHA384(key, data).toString();
console.log(result.split('').map(getBytes)); // used this to match byte array from java output. No luck!
</code></pre>

<pre><code>function getBytes(x) {return x.charCodeAt(0);}
</code></pre>

<p>Note that I'm using <code>key</code> as a String in JavaScript code as <code>crypto_js.HmacSHA384</code> accepts String only and not a <code>byte[]</code>. But I've compared my string's <code>byte[]</code> with java code's <code>byte[]</code>.</p>

<p>Output from JS code:</p>

<pre><code>[97,104,69,80,106,49,121,83,100,87,120,56,76,65,101,71,54,52,81,110,104,108,72,55,54,56,112,104,56,109,72,101,68,43,83,70,73,89,54,81,71,53,49,98,48,119,115,117,72,83,112,117,99,110,107,76,113,78,105,73,76,107,120,82]
</code></pre>

<p>Output from Java code:</p>

<pre><code>[-29, 76, -16, -110, -35, -87, 18, -53, -1, -105, -77, -96, -49, -110, 102, -74, -110, 31, -87, 115, 102, -43, 101, -89, -82, -8, 96, -99, -89, 103, -128, 104, -121, -107, -98, 18, -18, 85, 97, -121, 30, 91, -42, -11, -6, -58, -7, 113]
</code></pre>

<p>Both takes same input.</p>

<p>Any help will be appreciated. Thanks!</p>
","<p>In JavaScript it's not so easy to output raw bytes. See the answer <a href=""https://stackoverflow.com/a/29433028/7873775"">https://stackoverflow.com/a/29433028/7873775</a> for the details.</p>

<p>But the byte arrays will still be different in Java and JavaScript because in JavaScript the <code>Uint8Array</code> represents an array of 8-bit <strong>unsigned integers</strong> while in Java <code>byte</code> range is from -128 to 127.</p>

<p>So <code>Uint8Array</code> <code>[132, 179]</code> in Java <code>byte[]</code> is <code>[-124, -77]</code>.</p>

<p>To output the HMAC value in JavaScript you need to encode it in either Hex or Base64.</p>

<p>Here is Java code using <a href=""https://commons.apache.org/proper/commons-codec/"" rel=""nofollow noreferrer"">commons-codec</a> library:</p>

<pre><code>byte[] key = ""Secret Passphrase"".getBytes(StandardCharsets.UTF_8);
String valueToDigest = ""Message"";
byte[] hmac = new HmacUtils(HMAC_SHA_384, key).hmac(valueToDigest);
System.out.println(asList(hmac));
System.out.println(Hex.encodeHexString(hmac));
System.out.println(Base64.encodeBase64String(hmac));
</code></pre>

<p>The result:</p>

<ul>
<li>Hex: <code>84b318cc0232a370c1f8b8746afcb575fc2debc680122c7422fd425638896d0dcf9e905b8cd9c1d7aed8d5439a2a2328</code></li>
<li>Base64: <code>hLMYzAIyo3DB+Lh0avy1dfwt68aAEix0Iv1CVjiJbQ3PnpBbjNnB167Y1UOaKiMo</code></li>
</ul>

<p>Here is code with <a href=""https://github.com/brix/crypto-js"" rel=""nofollow noreferrer"">CryptoJS</a> library:</p>

<pre><code>const CryptoJS = require(""crypto-js"");
const hash = CryptoJS.HmacSHA384(""Message"", ""Secret Passphrase"");
console.log(hash.toString(CryptoJS.enc.Hex));
console.log(hash.toString(CryptoJS.enc.Base64));
</code></pre>

<p>And the result is <strong>identical</strong>:</p>

<ul>
<li>Hex: <code>84b318cc0232a370c1f8b8746afcb575fc2debc680122c7422fd425638896d0dcf9e905b8cd9c1d7aed8d5439a2a2328</code></li>
<li>Base64: <code>hLMYzAIyo3DB+Lh0avy1dfwt68aAEix0Iv1CVjiJbQ3PnpBbjNnB167Y1UOaKiMo</code></li>
</ul>
","58972144","71","<javascript><java><node.js><hmac><cryptojs>","1","3","1","2019-11-21 10:08:10","","2","","","","","2019-11-21 07:53:52","","2019-11-21 10:08:10","2019-11-21 10:01:47"
"30424405","Is there a specific difference in the one-time-password algorithm when using sha512 to using sha1","<p>I am writing a pam module, that does authentication with one time passwords.
I started writing it with sha512 as algorithm for the hmac and ran into a problem. I also did it with sha1, which works.
The code is at: <a href=""https://github.com/Ongy/pam_totp"" rel=""nofollow"">https://github.com/Ongy/pam_totp</a></p>

<p>I tested the hmac with sha512, as far as I can tell that is correct, so the error should be in the <code>get_truncate</code> function, which does work with sha1, but not with sha512.</p>

<pre><code>static int get_truncate(const uint8_t * hash, size_t len, char * buffer,
        size_t maxlen)
{
    uint32_t value;
    uint8_t offset;
    offset = hash[len-1] &amp; 0x0F;
    value = *((uint32_t *) (hash+offset));
    value = be32toh(value) &amp; 0x7FFFFFFF;
    value %= 100000000;

    return snprintf(buffer, maxlen, ""%08d"", value);
}
</code></pre>

<p>which is called in </p>

<pre><code>static int get_totp_sha512(const uint8_t * hashdata, size_t len, uint64_t time,
            char * dst, size_t maxlen)
{
    uint8_t buffer[64];
    uint64_t counter = htobe64(time);

    memset(buffer, 0, sizeof(buffer));

    calculate_hmac_sha512(hashdata, len, (uint8_t *) &amp;counter,
                     sizeof(counter), buffer, sizeof(buffer));

    return get_truncate(buffer, sizeof(buffer), dst, maxlen);
}
</code></pre>

<p>Most of the relevant code should be in src/main.c.</p>

<p>The rfcs relevent are: <a href=""https://tools.ietf.org/html/rfc6238"" rel=""nofollow"">6238</a> and <a href=""https://tools.ietf.org/html/rfc4226"" rel=""nofollow"">4226</a>. (The second one describes the general algorithm, the first one also allows other hashes than sha1)</p>
","<p>Ok so the thing I had to fix was my testcase, I used the test vectors given in <a href=""https://tools.ietf.org/html/rfc6238#appendix-B"" rel=""nofollow"">https://tools.ietf.org/html/rfc6238#appendix-B</a>. What I had to change:</p>

<p>The key is not actually <code>""12345678901234567890""</code> for sha512 but <code>""1234567890123456789012345678901234567890123456789012345678901234""</code>.</p>
","30474870","71","<c><sha><hmac><pam><one-time-password>","0","0","1","2015-05-27 06:35:33","30474870","0","","","","","2015-05-24 14:07:04","","","2015-05-27 06:35:33"
"46457612","Sharing a JJWT Signature Between Web Services","<p>I've successfully set up JJWT to be used in the authentication process across a series of web services. The problem is that they're created in one web service, but authenticated across multiple services. How can I successfully and safely use the signature while also assuring that all my web services use the same signature to validate incoming JWT?</p>

<pre><code>// We need a signing key, so we'll create one just for this example. Usually
// the key would be read from your application configuration instead.
Key key = MacProvider.generateKey();

String compactJws = Jwts.builder()
  .setSubject(""Joe"")
  .signWith(SignatureAlgorithm.HS512, key)
  .compact();
</code></pre>

<p>I know that I can use a plain old string to <code>.signWith(Algorithm,String)</code> however I've been made aware that using a standard Java <code>String</code> (literally) isn't secure enough. I was using something akin to:</p>

<pre><code>String compactJws = Jwts.builder()
  .setSubject(""Joe"")
  .signWith(SignatureAlgorithm.HS512, ""shared complex passphrase"")
  .compact();
</code></pre>
","<p>According to <a href=""https://tools.ietf.org/html/rfc7518#section-3.2"" rel=""nofollow noreferrer"">RFC 7518</a> - JSON Web Algorithms (JWA):</p>

<blockquote>
  <p><strong>A key of the same size as the hash output</strong> (for instance, 256 bits for
  ""HS256"") or larger MUST be used with this algorithm.  (This
  requirement is based on Section 5.3.4 (Security Effect of the HMAC
  Key) of NIST SP 800-117 (sic) [<a href=""http://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-107r1.pdf"" rel=""nofollow noreferrer"">NIST.800-107</a>], which states that the
  effective security strength is the minimum of the security strength
  of the key and two times the size of the internal hash value.)</p>
</blockquote>

<p>You must use a key of at least 512 bits with HS512. </p>

<p>Keys needs to be chosen at random. You can generate the key with <code>MacProvider.generateKey();</code> or other random generator and distribute it to your servers (for example encoded in base64)</p>

<p>An alternative is using a RSA key pair. You use the private key to sign the token and the public key to verify. The public key can be safely published and used by all services </p>

<p>See also <a href=""https://security.stackexchange.com/questions/95972/what-are-requirements-for-hmac-secret-key"">https://security.stackexchange.com/questions/95972/what-are-requirements-for-hmac-secret-key</a></p>
","46482674","71","<java><jwt><hmac><jjwt>","0","1","1","2017-09-29 09:02:30","","0","","6371459","","2017-09-29 09:02:30","2017-09-27 21:37:25","","","2017-09-29 06:06:04"
"56724919","App failure on Docker container: what to make out of this Wildfly logs?","<p>I am trying to run my app using Docker. I created a Dockerfile, built an image and then run a container with my app. </p>

<p>However, when I request for a data to be send, I got an error (403) - wrong hash, meaning access is denied beacuse authentication process failed (I use Hmac-SHA1 algorithm). The conection between my app and data provider is established correctly (code 200), I was just not allowed data access.</p>

<p>If I run app without Docker (I run Wildfly locally and deploy war artifact manually) everything works great - however when I compare both hashes used (Docker &amp; locally) they are indeed different. Both requests are identical of course.</p>

<p>I will be grateful for any directions.    </p>

<pre><code>Dockerfile:

    FROM jboss/wildfly
    COPY target/invoices.war /opt/jboss/wildfly/standalone/deployments/
    EXPOSE 8080 9990

Docker commands I use:
    docker build -t invoices:v1 .
    docker run -p 8080:8080 &lt;imageID&gt;

 Wildfly logs (Docker container):
    14:10:00,334 ERROR [io.undertow.request] (default task-1) UT005023: Exception handling request to /invoicesByDateView: org.json.JSONException: JSONObject[""Wynik""] not found.
            at deployment.invoices.war//org.json.JSONObject.get(JSONObject.java:471)
            at deployment.invoices.war//org.json.JSONObject.getJSONArray(JSONObject.java:618)
            at deployment.invoices.war//fileReaders.JsonParser.getList(JsonParser.java:30)
            at deployment.invoices.war//fileReaders.JsonParser$Proxy$_$$_WeldClientProxy.getList(Unknown Source)
            at deployment.invoices.war//servlets.InvoicesByDateViewServlet.doPost(InvoicesByDateViewServlet.java:98)
            at javax.servlet.api@1.0.0.Final//javax.servlet.http.HttpServlet.service(HttpServlet.java:706)
            at javax.servlet.api@1.0.0.Final//javax.servlet.http.HttpServlet.service(HttpServlet.java:791)
            at io.undertow.servlet@2.0.21.Final//io.undertow.servlet.handlers.ServletHandler.handleRequest(ServletHandler.java:74)
            at io.undertow.servlet@2.0.21.Final//io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:129)
            at io.opentracing.contrib.opentracing-jaxrs2//io.opentracing.contrib.jaxrs2.server.SpanFinishingFilter.doFilter(SpanFinishingFilter.java:55)
            at io.undertow.servlet@2.0.21.Final//io.undertow.servlet.core.ManagedFilter.doFilter(ManagedFilter.java:61)
            at io.undertow.servlet@2.0.21.Final//io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:131)
            at io.undertow.servlet@2.0.21.Final//io.undertow.servlet.handlers.FilterHandler.handleRequest(FilterHandler.java:84)
            at io.undertow.servlet@2.0.21.Final//io.undertow.servlet.handlers.security.ServletSecurityRoleHandler.handleRequest(ServletSecurityRoleHandler.java:62)
            at io.undertow.servlet@2.0.21.Final//io.undertow.servlet.handlers.ServletChain$1.handleRequest(ServletChain.java:68)
            at io.undertow.servlet@2.0.21.Final//io.undertow.servlet.handlers.ServletDispatchingHandler.handleRequest(ServletDispatchingHandler.java:36)
            at org.wildfly.extension.undertow@17.0.0.Final//org.wildfly.extension.undertow.security.SecurityContextAssociationHandler.handleRequest(SecurityContextAssociationHandler.java:78)
            at io.undertow.core@2.0.21.Final//io.undertow.server.handlers.PredicateHandler.handleRequest(PredicateHandler.java:43)
            at io.undertow.servlet@2.0.21.Final//io.undertow.servlet.handlers.security.SSLInformationAssociationHandler.handleRequest(SSLInformationAssociationHandler.java:132)
            at io.undertow.servlet@2.0.21.Final//io.undertow.servlet.handlers.security.ServletAuthenticationCallHandler.handleRequest(ServletAuthenticationCallHandler.java:57)
            at io.undertow.core@2.0.21.Final//io.undertow.server.handlers.PredicateHandler.handleRequest(PredicateHandler.java:43)
            at io.undertow.core@2.0.21.Final//io.undertow.security.handlers.AbstractConfidentialityHandler.handleRequest(AbstractConfidentialityHandler.java:46)
            at io.undertow.servlet@2.0.21.Final//io.undertow.servlet.handlers.security.ServletConfidentialityConstraintHandler.handleRequest(ServletConfidentialityConstraintHandler.java:64)
            at io.undertow.core@2.0.21.Final//io.undertow.security.handlers.AuthenticationMechanismsHandler.handleRequest(AuthenticationMechanismsHandler.java:60)
            at io.undertow.servlet@2.0.21.Final//io.undertow.servlet.handlers.security.CachedAuthenticatedSessionHandler.handleRequest(CachedAuthenticatedSessionHandler.java:77)
            at io.undertow.core@2.0.21.Final//io.undertow.security.handlers.NotificationReceiverHandler.handleRequest(NotificationReceiverHandler.java:50)
            at io.undertow.core@2.0.21.Final//io.undertow.security.handlers.AbstractSecurityContextAssociationHandler.handleRequest(AbstractSecurityContextAssociationHandler.java:43)
            at io.undertow.core@2.0.21.Final//io.undertow.server.handlers.PredicateHandler.handleRequest(PredicateHandler.java:43)
            at org.wildfly.extension.undertow@17.0.0.Final//org.wildfly.extension.undertow.security.jacc.JACCContextIdHandler.handleRequest(JACCContextIdHandler.java:61)
            at io.undertow.core@2.0.21.Final//io.undertow.server.handlers.PredicateHandler.handleRequest(PredicateHandler.java:43)
            at org.wildfly.extension.undertow@17.0.0.Final//org.wildfly.extension.undertow.deployment.GlobalRequestControllerHandler.handleRequest(GlobalRequestControllerHandler.java:68)
            at io.undertow.core@2.0.21.Final//io.undertow.server.handlers.PredicateHandler.handleRequest(PredicateHandler.java:43)
            at io.undertow.servlet@2.0.21.Final//io.undertow.servlet.handlers.ServletInitialHandler.handleFirstRequest(ServletInitialHandler.java:292)
            at io.undertow.servlet@2.0.21.Final//io.undertow.servlet.handlers.ServletInitialHandler.access$100(ServletInitialHandler.java:81)
            at io.undertow.servlet@2.0.21.Final//io.undertow.servlet.handlers.ServletInitialHandler$2.call(ServletInitialHandler.java:138)
            at io.undertow.servlet@2.0.21.Final//io.undertow.servlet.handlers.ServletInitialHandler$2.call(ServletInitialHandler.java:135)
            at io.undertow.servlet@2.0.21.Final//io.undertow.servlet.core.ServletRequestContextThreadSetupAction$1.call(ServletRequestContextThreadSetupAction.java:48)
            at io.undertow.servlet@2.0.21.Final//io.undertow.servlet.core.ContextClassLoaderSetupAction$1.call(ContextClassLoaderSetupAction.java:43)
            at org.wildfly.extension.undertow@17.0.0.Final//org.wildfly.extension.undertow.security.SecurityContextThreadSetupAction.lambda$create$0(SecurityContextThreadSetupAction.java:105)
            at org.wildfly.extension.undertow@17.0.0.Final//org.wildfly.extension.undertow.deployment.UndertowDeploymentInfoService$UndertowThreadSetupAction.lambda$create$0(UndertowDeploymentInfoService.java:1502)
            at org.wildfly.extension.undertow@17.0.0.Final//org.wildfly.extension.undertow.deployment.UndertowDeploymentInfoService$UndertowThreadSetupAction.lambda$create$0(UndertowDeploymentInfoService.java:1502)
            at org.wildfly.extension.undertow@17.0.0.Final//org.wildfly.extension.undertow.deployment.UndertowDeploymentInfoService$UndertowThreadSetupAction.lambda$create$0(UndertowDeploymentInfoService.java:1502)
            at org.wildfly.extension.undertow@17.0.0.Final//org.wildfly.extension.undertow.deployment.UndertowDeploymentInfoService$UndertowThreadSetupAction.lambda$create$0(UndertowDeploymentInfoService.java:1502)
            at io.undertow.servlet@2.0.21.Final//io.undertow.servlet.handlers.ServletInitialHandler.dispatchRequest(ServletInitialHandler.java:272)
            at io.undertow.servlet@2.0.21.Final//io.undertow.servlet.handlers.ServletInitialHandler.access$000(ServletInitialHandler.java:81)
            at io.undertow.servlet@2.0.21.Final//io.undertow.servlet.handlers.ServletInitialHandler$1.handleRequest(ServletInitialHandler.java:104)
            at io.undertow.core@2.0.21.Final//io.undertow.server.Connectors.executeRootHandler(Connectors.java:364)
            at io.undertow.core@2.0.21.Final//io.undertow.server.HttpServerExchange$1.run(HttpServerExchange.java:830)
            at org.jboss.threads@2.3.3.Final//org.jboss.threads.ContextClassLoaderSavingRunnable.run(ContextClassLoaderSavingRunnable.java:35)
            at org.jboss.threads@2.3.3.Final//org.jboss.threads.EnhancedQueueExecutor.safeRun(EnhancedQueueExecutor.java:1982)
            at org.jboss.threads@2.3.3.Final//org.jboss.threads.EnhancedQueueExecutor$ThreadBody.doRunTask(EnhancedQueueExecutor.java:1486)
            at org.jboss.threads@2.3.3.Final//org.jboss.threads.EnhancedQueueExecutor$ThreadBody.run(EnhancedQueueExecutor.java:1377)
            at java.base/java.lang.Thread.run(Thread.java:834)
</code></pre>
","","","70","<java><docker><hash><wildfly><hmac>","1","","0","2019-06-23 20:13:41","","6","","11084701","","2019-06-23 20:13:41","2019-06-23 14:39:03","","",""
"57930520","GET Request from an Azure AppService back to itself returns a 502 Bad Gateway error","<p>I have an Azure AppService/Website that when it receives a request, part of servicing it involves making another GET request back to itself. This is part of an HMAC workflow. When I run it on localhost it works fine with no errors. There is something about the Azure environment that is causing the error. The website is not publicly available unfortunately.</p>

<pre><code>using (HttpClient httpClient = new HttpClient())
{
   ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12 | SecurityProtocolType.Tls11 | SecurityProtocolType.Tls;

   apiResponse = await httpClient.GetAsync(apiBaseAddress + ""api/Survey/GetApiKey/"" + appId);
   entity = await apiResponse.Content.ReadAsAsync&lt;ClientApiRegistrationEntity&gt;();
}
</code></pre>

<p>The URL being passed to GetAsync() is correct. The URL has a https scheme in Azure; locally it is just http. If I copy/paste the URL into a browser on my machine the request goes through. If I make the request on the Kudu debug console I get the 502. I have confirmed that the DNS is resolving correctly in the AppService. For what it is worth, the invoke-webrequest call in Kudu returns a web page with the title: ""502 - Web server received an invalid response while acting as a gateway or proxy server."".</p>

<p>Any ideas? Suggestions?</p>
","<p>Just to highlight, the standard/native Azure Web Apps run in a secure environment called a sandbox. Each app runs inside its own sandbox, isolating its execution from other instances on the same machine as well as providing an additional degree of security and privacy which would otherwise not be available. </p>

<p>The only way an application can be accessed via the internet is through the already-exposed HTTP (80) and HTTPS (443) TCP ports; applications may not listen on other ports for packets arriving from the internet.
However, applications may create a socket which can listen for connections from within the sandbox. For example, two processes within the same app may communicate with one another via TCP sockets; connection attempts incoming from outside the sandbox, albeit they be on the same machine, will fail.
Using a custom Windows container in App Service lets you make OS changes that your app needs, so it's easy to migrate on-premises app that requires custom OS and software configuration. See <a href=""https://github.com/projectkudu/kudu/wiki/Azure-Web-App-sandbox#local-address-requests"" rel=""nofollow noreferrer"">sandbox page</a>.</p>

<p>Based on your requirement, you may checkout these document to start-off:</p>

<p><a href=""https://docs.microsoft.com/en-us/azure/app-service/containers/quickstart-docker"" rel=""nofollow noreferrer"">Run a custom Linux container in Azure App Service</a> &amp; <a href=""https://docs.microsoft.com/en-us/azure/app-service/app-service-web-get-started-windows-container"" rel=""nofollow noreferrer"">Run a custom Windows container in Azure (Preview)</a></p>

<p>502 bad gateway errors won't be visible in the IIS logs as they’re returned by the frontend servers,  which forwards the requests to the worker hosting the app and there are many reasons why the frontend can return this error, but typically, 502 errors are caused by the application level issues, among them:</p>

<p>•   requests taking a long time</p>

<p>•   application using high memory/CPU</p>

<p>•   application crashing due to an exception</p>

<p>You may always follow the document Troubleshoot HTTP errors of ""502 bad gateway"" and ""503 service unavailable (<a href=""https://docs.microsoft.com/en-us/azure/app-service/troubleshoot-http-502-http-503"" rel=""nofollow noreferrer"">https://docs.microsoft.com/en-us/azure/app-service/troubleshoot-http-502-http-503</a>)"" in Azure App Service for identifying the issue. </p>
","57973580","70","<c#><azure><hmac><kudu>","0","0","2","2019-09-18 21:22:43","","0","","","","","2019-09-13 21:25:07","","","2019-09-17 11:48:42"
"57930520","GET Request from an Azure AppService back to itself returns a 502 Bad Gateway error","<p>I have an Azure AppService/Website that when it receives a request, part of servicing it involves making another GET request back to itself. This is part of an HMAC workflow. When I run it on localhost it works fine with no errors. There is something about the Azure environment that is causing the error. The website is not publicly available unfortunately.</p>

<pre><code>using (HttpClient httpClient = new HttpClient())
{
   ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12 | SecurityProtocolType.Tls11 | SecurityProtocolType.Tls;

   apiResponse = await httpClient.GetAsync(apiBaseAddress + ""api/Survey/GetApiKey/"" + appId);
   entity = await apiResponse.Content.ReadAsAsync&lt;ClientApiRegistrationEntity&gt;();
}
</code></pre>

<p>The URL being passed to GetAsync() is correct. The URL has a https scheme in Azure; locally it is just http. If I copy/paste the URL into a browser on my machine the request goes through. If I make the request on the Kudu debug console I get the 502. I have confirmed that the DNS is resolving correctly in the AppService. For what it is worth, the invoke-webrequest call in Kudu returns a web page with the title: ""502 - Web server received an invalid response while acting as a gateway or proxy server."".</p>

<p>Any ideas? Suggestions?</p>
","<p>I stumbled on this fix. I was comparing application gateways between dev and prod and I noticed an inbound port rule called ""DenyAllInbound"" sitting on port 4096. I pulled that out and everything started working again. I'm not sure how that rule got there in the first place. It looks like a 502 is a generic ""something is wrong"" message from Azure.</p>

<p>FWIW, I found the ""DenyAllInbound"" rule by using the ""Connection troubleshoot"" link under Monitoring for the application gateway.</p>
","58000885","70","<c#><azure><hmac><kudu>","0","0","2","2019-09-18 21:22:43","","0","","","","","2019-09-13 21:25:07","","","2019-09-18 21:22:43"
"59121485","pho.to API Request Failing in Swift","<p>Im currently trying to work with the <a href=""http://developers.pho.to/documentation/sending-requests"" rel=""nofollow noreferrer"">pho.to</a> API in my iOS application. I am experimenting with making simple requests according to the documentation, however I cannot seem to get the request to go through successfully. Inside my API client file, I have this code:</p>

<pre><code>let dataStr = """"""
            &lt;image_process_call&gt;
                &lt;image_url&gt;http://developers.pho.to/img/girl.jpg&lt;/image_url&gt;
                &lt;methods_list&gt;
                    &lt;method order=""1""&gt;
                        &lt;name&gt;desaturation&lt;/name&gt;
                    &lt;/method&gt;
                    &lt;method order=""2""&gt;
                        &lt;name&gt;caricature&lt;/name&gt;
                        &lt;params&gt;type=1;crop_portrait=true&lt;/params&gt;
                    &lt;/method&gt;
                &lt;/methods_list&gt;
                &lt;thumb1_size&gt;100&lt;/thumb1_size&gt;
            &lt;/image_process_call&gt;
            """"""

let encodedStr = dataStr.replacingOccurrences(of: ""\n"", with: """").replacingOccurrences(of: "" "", with: """")

let signData = encodedStr.hmac(key: key)

let urlStr = ""https://opeapi.ws.pho.to/addtask/?app_id=\(appId)&amp;key=\(key)&amp;sign_data=\(signData)&amp;data=\(encodedStr.addingPercentEncoding(withAllowedCharacters: .urlHostAllowed)!))""
</code></pre>

<p>The HMAC encoding is being done according to <a href=""https://stackoverflow.com/questions/26970807/implementing-hmac-and-sha1-encryption-in-swift"">this</a> Stack Overflow post. Unfortunately when making a request to this URL using URLSession I get this response:</p>

<pre><code>&lt;?xml version=\""1.0\""?&gt;\n&lt;image_process_response&gt;&lt;status&gt;SecurityError&lt;/status&gt;&lt;err_code&gt;614&lt;/err_code&gt;&lt;description&gt;Error in POST parameters: one or more parameters (DATA , SIGN_DATA or APP_ID) are empty&lt;/description&gt;&lt;/image_process_response&gt;
</code></pre>

<p>I feel like my issue is more related to actually forming the request rather than something specific to the API itself. I know my code is a little messy, however I was hoping that somebody could point me in the right direction in terms of making a request like this. Thanks!</p>
","<p>As per their documentation you can see that data sent over from POST requests are in body (In cURL calls -d specifies the body of the request)</p>

<p>You are sending params/data in query, which the pho.to API doesn't accept, hence the error.</p>

<p>Here's a sample on how you can do:</p>

<pre><code>let defaultSessionConfiguration = URLSessionConfiguration.default
let defaultSession = URLSession(configuration: defaultSessionConfiguration)

// Setup the request with URL
let url = URL(string: ""https://opeapi.ws.pho.to/addtask"")!
var urlRequest = URLRequest(url: url)

// Convert POST string parameters to data using UTF8 Encoding
let postData = yourXMLString.data(using: .utf8)

// Set the httpMethod and assign httpBody
urlRequest.httpMethod = ""POST""
urlRequest.httpBody = postData

// Create dataTask
let dataTask = defaultSession.dataTask(with: urlRequest) { (data, response, error) in
    // Handle your response here
}

// Fire the request
dataTask.resume()
</code></pre>
","59534748","70","<swift><xml><post><nsurlsession><hmac>","0","2","1","2019-12-30 17:38:59","59534748","2","","","","","2019-12-01 00:17:18","","","2019-12-30 17:38:59"
"21408047","php HP cloud Creating Signatures for FormPOST python to php translation","<p>I am currently trying out the HP cloud object storage API but all their examples are in Python and I'm working in PHP.
It's saying my signature is invalid, if anyone can help see where I'm going wrong, I've attached the python example <a href=""https://docs.hpcloud.com/api/object-storage/#formpost"" rel=""nofollow"">https://docs.hpcloud.com/api/object-storage/#formpost</a> as well as my attempt in PHP.</p>

<pre><code>import hmac
from hashlib import sha1
from time import time

path = '/v1/12345678912345/container/object_prefix'
redirect = 'https://myserver.com/some-page'
max_file_size = 104857600
max_file_count = 10
expires = int(time() + 600)
tenant_id = '12345678912345'
access_key_id = 'GP54NNRN2TKBVWH449AG'
secret_key = 'EHLzysK9S1QRWkwvVpVHsGZyM715OH4S2kJ'
hmac_body = '%s\n%s\n%s\n%s\n%s' % (path, redirect,
max_file_size, max_file_count, expires)
signature = tenant_id + ':' + access_key_id + ':' + hmac.new(secret_key, hmac_body, sha1).hexdigest()
</code></pre>

<p>And this is my attempt...</p>

<pre><code>&lt;?php
$expires = time()+600;
$hmac_body = 'https://region-a.geo-1.objects.hpcloudsvc.com/v1/xxx/'.'http://www.test.com/test.php'.'41943040'.'1'.$expires;
$signature = 'tenant_id:access_key:'.hash_hmac(sha1,$hmac_body,'secret_key', FALSE);
?&gt;
&lt;form action=""&lt;?php echo 'https://region-a.geo-1.objects.hpcloudsvc.com/v1/xxx/';?&gt;"" method=""POST"" enctype=""multipart/form-data""&gt;
 &lt;input type=""hidden"" name=""redirect"" value=""http://www.test.com/test.php"" /&gt;
&lt;input type=""hidden"" name=""max_file_size"" value=""41943040"" /&gt;
&lt;input type=""hidden"" name=""max_file_count"" value=""1"" /&gt;
&lt;input type=""hidden"" name=""expires"" value=""&lt;?php echo $expires;?&gt;"" /&gt;
&lt;input type=""hidden"" name=""signature"" value=""&lt;?php echo $signature;?&gt;"" /&gt;
&lt;input type=""file"" name=""testupload"" /&gt;
&lt;input type=""submit"" /&gt;
&lt;/form&gt;
</code></pre>

<p>If anyone could provide a translation from python to PHP for the hmac_body and the signature I'm sure that would help greatly.</p>
","<p>You forgot the newlines:</p>

<pre><code>mac_body = '%s\n%s\n%s\n%s\n%s' % (path, redirect,
              ^^--^^--^^--^^-- newlines

$hmac_body = 'https://blahblah/xxx/'.'http://blahblah/test.php'.'41943040'.'1'.$expires;
                                    ^--here                    ^--here   etc....
</code></pre>
","21408181","70","<php><python><hmac>","0","0","1","2014-01-28 14:23:45","21408181","0","","","","","2014-01-28 14:18:20","","","2014-01-28 14:23:45"
"17317506","BigInteger HMAC conversion anomalie","<p>I've a key:</p>

<pre><code>byte: 0011100101010111000101111100101101100010100010111001010010000000
</code></pre>

<p>a message:</p>

<pre><code>byte: 10110001
</code></pre>

<p>hmac output in hex:</p>

<pre><code>HMAC-SHA256:    ca3871e40207fc0cd66558e4e4fa2817d283da605c15e4c941ff7945ad4be29f
</code></pre>

<p>So if I create a new BigInteger (test) like:</p>

<pre><code>BigInteger test = new BigInteger(hmac);
</code></pre>

<p>And if I want to get the hex value back like:</p>

<pre><code>System.out.println(""\noutput: "" + test.toString(16));
</code></pre>

<p>I get this:</p>

<pre><code>output: -35c78e1bfdf803f3299aa71b1b05d7e82d7c259fa3ea1b36be0086ba52b41d61
</code></pre>

<p>Where is the problem? Or how can I calculate the hmac-sha256 from the message and use the BigIntegers from beginnning.</p>

<p>key, message and hmac are byte arrays.</p>

<p>If I try to convert byte ""11010100"" into BigInteger, it converts to negative ""-101100""
Why BigInteger converts it negative? First bit is a sign bit, how can you disable sign bit?</p>
","<p>There's a BigInteger constructor for setting the sign and magnitude separately, rather than the default of expecting a 2s-complement bitstring. See <a href=""http://docs.oracle.com/javase/7/docs/api/java/math/BigInteger.html#BigInteger%28int,%20byte%5b%5d%29"" rel=""nofollow"">here</a>.</p>

<p>Example:</p>

<pre><code>Bmsg[i] = new BigInteger(1, msg[i]);
</code></pre>
","17318303","70","<java><hex><biginteger><hmac>","0","1","1","2013-07-22 14:27:05","17318303","6","","502381","","2013-07-22 14:27:05","2013-06-26 10:23:57","","","2013-06-26 11:02:24"
"2689905","Get original query from Django","<p>I would like to get the original query (in the exact same format as sent) from Django.</p>

<p>Currently, django sends me a query dict object, wherein if I do querydict.urlencode(), I get the query back, but in a different format from what is sent, since dictionary mangles the positions.</p>

<p>For GET, we can use, request.get_full_path().</p>

<p>I have not found a mechanism for POST.</p>

<p>I require it since I am doing a HMAC, and for HMAC, the exact positioning of fields are important.</p>

<p>Regards</p>

<p>K</p>
","<p>Sorry, this is solved.</p>

<p>We can use raw_post_data for that. Forgot about that. </p>
","2689953","70","<django><hmac>","2","0","1","2010-04-22 10:24:07","2689953","0","","","","","2010-04-22 10:16:38","","","2010-04-22 10:24:07"
"53713787","rock Paper Scissors HMAC(SHA-3 or SHA-2) encryption","<p>I have a game( rock Paper Scissors).
How to encrypt the answer of the computer using HMAC (SHA-2 or SHA-3) and at the end of the game compare with the answer of the user?</p>

<pre class=""lang-py prettyprint-override""><code>import random
import hmac
import hashlib
import base64

options = {""r"": ""rock"", ""p"": ""paper"", ""s"": ""scissors""}

while True:
    user = input('Choose r for rock, p for paper, s for scissors or q to quit: ')
    user = user.lower()

    if user == 'q':
        break
    if user not in options.keys():
        continue

    choice = random.choice(list(options.keys()))
    print('Computer picked:', options[choice])

    if choice == user:
        print('You tie against the computer\n')
    elif (user, choice) in ((""r"", ""s""), (""p"", ""r""), (""s"", ""p"")):
        print('You win against the computer\n')
    else:
        print('You lose against the computer\n')
</code></pre>
","","","69","<python><hmac><sha2><sha-3>","0","","0","2019-04-29 18:04:02","","7","","5889131","","2019-04-29 17:59:30","2018-12-10 21:18:47","","",""
"37653685","Generate random HMAC key, initialization vector in C","<p>How could I generate the keys randomly in C? Is there any useful library for that?</p>
","","","67","<c><key><hmac>","0","","0","2016-06-06 09:40:39","","2","","2173917","","2016-06-06 09:40:39","2016-06-06 09:18:15","","",""
"56054314","Jwt not working after converting Asp.Net Core 1 to Core 2","<p>There is a sample code for <strong>Jwt-Rsa-Hmac authentication</strong> on <a href=""https://piotrgankiewicz.com/2017/07/24/jwt-rsa-hmac-asp-net-core/"" rel=""nofollow noreferrer"">this</a> web site with <a href=""https://github.com/spetz/jwt-hmac-rsa-aspnet-core-sample"" rel=""nofollow noreferrer"">this</a> repo.<br>
I have been trying to convert it from Asp.Net Core 1 to Asp.Net Core 2.<br>
I created a new Asp.Net Cor 2.1 project and after searching the changes it needed, I came up with <a href=""https://github.com/a-molaei/RSA_Core2"" rel=""nofollow noreferrer"">this</a> code.<br>
It does create the token, but when using the token I always get <code>401</code> (unauthorized).<br>
It's been a few days and no success...<br>
I will be grateful if anyone could help me with this.<br>
This is my startup class:  </p>

<pre><code> public class Startup
    {
        public Startup(IHostingEnvironment env)
        {
            var builder = new ConfigurationBuilder()
                .SetBasePath(env.ContentRootPath)
                .AddJsonFile(""appsettings.json"", optional: false, reloadOnChange: true)
                .AddJsonFile($""appsettings.{env.EnvironmentName}.json"", optional: true)
                .AddEnvironmentVariables();
            Configuration = builder.Build();
        }
        public IConfigurationRoot Configuration { get; }

        public void ConfigureServices(IServiceCollection services)
        {
            services.Configure&lt;JwtSettings&gt;(Configuration.GetSection(""jwt""));
            var x = services.AddSingleton&lt;IJwtHandler, JwtHandler&gt;();

            var sp = services.BuildServiceProvider();
            var jwtHandler = sp.GetService&lt;IJwtHandler&gt;();
            services.AddAuthentication(options =&gt;
            {
                options.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;
                options.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;
            }).AddJwtBearer(options =&gt;
            {
                options.TokenValidationParameters = jwtHandler.Parameters;
            });
            services.AddMvc();

        }
        public void Configure(IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory loggerFactory)
        {
            app.UseDeveloperExceptionPage();
            loggerFactory.AddConsole(Configuration.GetSection(""Logging""));
            loggerFactory.AddDebug();
            app.UseAuthentication();
            app.UseMvc();
        }    
</code></pre>

<p>And the rest of the sample code is in <a href=""https://github.com/a-molaei/RSA_Core2"" rel=""nofollow noreferrer"">this</a> repo.  </p>

<p>Links I have already studies:<br>
<a href=""https://stackoverflow.com/questions/45824690/token-authentication-stopped-working-after-migration-from-asp-net-core-1-to-asp"">Token Authentication stopped working after migration from ASP.NET Core 1 to ASP.NET Core 2</a></p>
","<p>I used this setting in .netcore2.1 and work for me:</p>

<pre><code>services.AddAuthentication(options =&gt;
            {
                options.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;
                options.DefaultSignInScheme = JwtBearerDefaults.AuthenticationScheme;
                options.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;
            }).AddJwtBearer(cfg =&gt;
            {
                cfg.SaveToken = true;
                cfg.TokenValidationParameters = new TokenValidationParameters
                {
                    ValidIssuer = Configuration[""BearerTokens:Issuer""],
                    ValidAudience = Configuration[""BearerTokens:Audience""],
                    IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(Configuration[""BearerTokens:Key""])),

                    ValidateIssuer = true,
                    ValidateAudience = true,
                    ValidateLifetime = true,
                    ValidateIssuerSigningKey = true,
                };

            });
</code></pre>
","56054468","66","<c#><asp.net-core><jwt><rsa><hmac>","3","0","2","2019-05-09 08:00:32","56054787","0","","","","","2019-05-09 07:31:25","","","2019-05-09 07:41:29"
"56054314","Jwt not working after converting Asp.Net Core 1 to Core 2","<p>There is a sample code for <strong>Jwt-Rsa-Hmac authentication</strong> on <a href=""https://piotrgankiewicz.com/2017/07/24/jwt-rsa-hmac-asp-net-core/"" rel=""nofollow noreferrer"">this</a> web site with <a href=""https://github.com/spetz/jwt-hmac-rsa-aspnet-core-sample"" rel=""nofollow noreferrer"">this</a> repo.<br>
I have been trying to convert it from Asp.Net Core 1 to Asp.Net Core 2.<br>
I created a new Asp.Net Cor 2.1 project and after searching the changes it needed, I came up with <a href=""https://github.com/a-molaei/RSA_Core2"" rel=""nofollow noreferrer"">this</a> code.<br>
It does create the token, but when using the token I always get <code>401</code> (unauthorized).<br>
It's been a few days and no success...<br>
I will be grateful if anyone could help me with this.<br>
This is my startup class:  </p>

<pre><code> public class Startup
    {
        public Startup(IHostingEnvironment env)
        {
            var builder = new ConfigurationBuilder()
                .SetBasePath(env.ContentRootPath)
                .AddJsonFile(""appsettings.json"", optional: false, reloadOnChange: true)
                .AddJsonFile($""appsettings.{env.EnvironmentName}.json"", optional: true)
                .AddEnvironmentVariables();
            Configuration = builder.Build();
        }
        public IConfigurationRoot Configuration { get; }

        public void ConfigureServices(IServiceCollection services)
        {
            services.Configure&lt;JwtSettings&gt;(Configuration.GetSection(""jwt""));
            var x = services.AddSingleton&lt;IJwtHandler, JwtHandler&gt;();

            var sp = services.BuildServiceProvider();
            var jwtHandler = sp.GetService&lt;IJwtHandler&gt;();
            services.AddAuthentication(options =&gt;
            {
                options.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;
                options.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;
            }).AddJwtBearer(options =&gt;
            {
                options.TokenValidationParameters = jwtHandler.Parameters;
            });
            services.AddMvc();

        }
        public void Configure(IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory loggerFactory)
        {
            app.UseDeveloperExceptionPage();
            loggerFactory.AddConsole(Configuration.GetSection(""Logging""));
            loggerFactory.AddDebug();
            app.UseAuthentication();
            app.UseMvc();
        }    
</code></pre>

<p>And the rest of the sample code is in <a href=""https://github.com/a-molaei/RSA_Core2"" rel=""nofollow noreferrer"">this</a> repo.  </p>

<p>Links I have already studies:<br>
<a href=""https://stackoverflow.com/questions/45824690/token-authentication-stopped-working-after-migration-from-asp-net-core-1-to-asp"">Token Authentication stopped working after migration from ASP.NET Core 1 to ASP.NET Core 2</a></p>
","<p>The problem in your sample repository is, that you are creating new <code>JwtBearerOptions</code> <a href=""https://github.com/a-molaei/RSA_Core2/blob/4f8321a7e890a1c1f29c4258b0d4ef5ceb0a3db7/RSA_Core2/Startup.cs#L63"" rel=""nofollow noreferrer"">here</a>.</p>

<p>I changed it to this and it works just fine</p>

<pre><code>services.AddAuthentication(o =&gt;
{
    o.DefaultScheme = JwtBearerDefaults.AuthenticationScheme;
    o.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;
    o.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;
}).AddJwtBearer(o =&gt;
{

    o.IncludeErrorDetails = true;
    o.RequireHttpsMetadata = false;
    o.TokenValidationParameters = jwtHandler.Parameters;
    o.Events = new JwtBearerEvents()
    {
        OnAuthenticationFailed = c =&gt;
        {
            c.NoResult();

            c.Response.StatusCode = 401;
            c.Response.ContentType = ""text/plain"";

            return c.Response.WriteAsync(c.Exception.ToString());
        }

    };
});
</code></pre>

<p>I have sent you a <a href=""https://github.com/a-molaei/RSA_Core2/pull/1"" rel=""nofollow noreferrer"">pull-request</a>.</p>
","56054787","66","<c#><asp.net-core><jwt><rsa><hmac>","3","3","2","2019-05-09 08:00:32","56054787","0","","","","","2019-05-09 07:31:25","","","2019-05-09 08:00:32"
"53625425","django-otp: should I increment the counter when generating hotp token?","<p>I use django-otp to generate hotp,
I not yet found the docs to properly generate hotp token</p>

<p>so I read from the <code>verify_token</code> method in <code>HOTPDevice</code> model class, found out how to verify the token </p>

<pre><code>if hotp(key, counter, self.digits) == token:
    verified = True
    self.counter = counter + 1
    self.save()
</code></pre>

<p>from the above I know that I can create the token using <code>hotp</code> function.</p>

<p>So then I use hotp function to generate the token, but I notice it repeatedly returns the same token when it's not confirmed. So should I increment the <code>counter</code> too when generating it?</p>

<p>source: <a href=""https://bitbucket.org/psagers/django-otp/src/2e5e1a3813258d9fb99c6f572b9451ad4967b533/django-otp/django_otp/plugins/otp_hotp/models.py?at=default&amp;fileviewer=file-view-default"" rel=""nofollow noreferrer"">HOTPDevice source from django-otp</a></p>
","<p>So I found quote from <a href=""https://tools.ietf.org/html/rfc4226#section-7.2"" rel=""nofollow noreferrer"">RFC 4226 - HOTP</a>, </p>

<blockquote>
  <p>The HOTP client (hardware or software token) increments its counter
     and then calculates the next HOTP value HOTP client</p>
</blockquote>

<p>So I should increment the <code>counter</code> first, save it to the object, and then returns the generated token </p>
","53643780","66","<python><security><token><hmac>","0","1","1","2018-12-06 02:34:59","53643780","0","","4728165","","2018-12-05 10:03:02","2018-12-05 04:58:49","","","2018-12-06 02:34:59"
"52640053","secure HMAC authorization with changing signature","<p>I have a Rails app that provides a JSON API that is consumed by a python script. Security is important and I've been using HMAC to do it. the rails app and the python script both know the secret key and the signature that they encrypt with it is the URL and the body of the request.</p>

<p>My problem is that the signature of the request doesn't change each time. If it was intercepted then an attacker could send the exact same request with the same digest and I think it would authenticate, een though the attacker doesn't know the secret key.</p>

<p>So I think I need to have something like a timestamp of the request included in the signature - the problem is I don't know how to get at that in python and ruby.</p>

<p>This is my python code:</p>

<pre><code>import hmac
import hashlib
import requests

fetch_path = url_base + '/phone_messages/pending'
fetch_body = '{}'
fetch_signature = fetch_path + ':' + fetch_body
fetch_hmac = hmac.new(api_key.encode('utf-8'), fetch_signature.encode('utf-8'), haslib.sha1).hexdigest()
</code></pre>

<p>and this is my ruby code:</p>

<pre><code>signature = ""#{request.url}:#{request.body.to_json.to_s}""
hmac_digest = OpenSSL::HMAC.hexdigest('sha1', secret_key, signature)
</code></pre>
","<blockquote>
  <p><strong>Question</strong>: I need to have something like a timestamp of the request included in the signature</p>
</blockquote>

<p>For example:</p>

<pre><code>import hmac, hashlib, datetime

api_key = 'this is a key'
fetch_path = 'http://phone_messages/pending'
fetch_body = '{}'
fetch_data = fetch_path + ':' + fetch_body


for n in range(3):
    fetch_signature = fetch_data + str(datetime.datetime.now().timestamp() )
    fetch_hmac = hmac.new(api_key.encode('utf-8'), fetch_signature.encode('utf-8'), hashlib.sha1).hexdigest()
    print(""{}:{} {}"".format(n, fetch_signature, fetch_hmac))
</code></pre>

<blockquote>
  <p><strong>Output</strong>:</p>

<pre><code>0:http://phone_messages/pending:{}1538660666.768066 cfa49feaeaf0cdc5ec8bcf1057446c425863e83a
1:http://phone_messages/pending:{}1538660666.768358 27d0a5a9f33345babf0c824f45837d3b8863741e
2:http://phone_messages/pending:{}1538660666.768458 67298ad0e9eb8bb629fce4454f092b74ba8d6c66
</code></pre>
</blockquote>

<p>I recommended, to discus <strong>Security</strong> at <a href=""https://security.stackexchange.com/search?q=auth+spoof#"">security.stackexchange.com</a>.<br>
As a starting point, read: <a href=""https://security.stackexchange.com/questions/56716/what-is-a-auth-key-in-the-security-of-the-computers"">what-is-a-auth-key-in-the-security-of-the-computers</a></p>
","52648464","65","<python><ruby-on-rails><http><python-requests><hmac>","0","0","2","2018-10-11 15:59:06","52764362","2","","2871922","","2018-10-04 06:53:27","2018-10-04 06:07:04","","","2018-10-04 13:50:38"
"52640053","secure HMAC authorization with changing signature","<p>I have a Rails app that provides a JSON API that is consumed by a python script. Security is important and I've been using HMAC to do it. the rails app and the python script both know the secret key and the signature that they encrypt with it is the URL and the body of the request.</p>

<p>My problem is that the signature of the request doesn't change each time. If it was intercepted then an attacker could send the exact same request with the same digest and I think it would authenticate, een though the attacker doesn't know the secret key.</p>

<p>So I think I need to have something like a timestamp of the request included in the signature - the problem is I don't know how to get at that in python and ruby.</p>

<p>This is my python code:</p>

<pre><code>import hmac
import hashlib
import requests

fetch_path = url_base + '/phone_messages/pending'
fetch_body = '{}'
fetch_signature = fetch_path + ':' + fetch_body
fetch_hmac = hmac.new(api_key.encode('utf-8'), fetch_signature.encode('utf-8'), haslib.sha1).hexdigest()
</code></pre>

<p>and this is my ruby code:</p>

<pre><code>signature = ""#{request.url}:#{request.body.to_json.to_s}""
hmac_digest = OpenSSL::HMAC.hexdigest('sha1', secret_key, signature)
</code></pre>
","<p>I resolved this by putting the timestamp (seconds since epoch) in the body of the post request, or parameter of the get request. I simply used the timestamp as the signature for encoding, which means the HMAC hash is different for every request that comes in a different second.</p>

<p>Then to prevent an attacker just using a previously seen timestamp I verified on the server that the timestamp is not more than 5 seconds before the current.</p>

<p>An attacker with a really fast turn around of intercepting a communication and sending an attack could still get through, but I couldn't drop the timeout below 5 seconds because it's already getting some requests timing out.</p>

<p>Since the whole thing is done under SSL I think it should be secure enough.</p>
","52764362","65","<python><ruby-on-rails><http><python-requests><hmac>","0","0","2","2018-10-11 15:59:06","52764362","2","","2871922","","2018-10-04 06:53:27","2018-10-04 06:07:04","","","2018-10-11 15:59:06"
"39206070","Encoding in JavaScript","<p>I'm very new in programming with Javascript and stuck in encoding my data.</p>

<p>I have done this as per need in my Android App, but could not able to do the same in JavaScript for my web portal.</p>

<p>The code which I'm using in Android App: </p>

<pre><code> public void encryptdata(byte[] data) {
    Encrypter encrypter = new Encrypter(); 
    HashGenerator hashGenerator = new HashGenerator();
    try {
        byte[] e = encrypter.generateSessionKey();
        byte[] encryptedData = encrypter.encryptUsingSessionKey(e, data);
        byte[] hmac = hashGenerator.generateSha256Hash(data);
        byte[] encryptedHmacBytes = encrypter.encryptUsingSessionKey(e, hmac);
        this.encodedSessionKey = encodeBase64(e);
        this.encodedHmac = encodeBase64(encryptedHmacBytes);
        this.encodedData = encodeBase64(encryptedData);
        } catch (Exception var6) {
        var6.printStackTrace();
        throw new RuntimeException(var6);
    }
}
</code></pre>

<p>Encrypter.java</p>

<pre><code>class Encrypter {
private static final String JCE_PROVIDER = ""BC"";
private static final int SYMMETRIC_KEY_SIZE = 256;

Encrypter() {
}

public byte[] generateSessionKey() throws NoSuchAlgorithmException, NoSuchProviderException {
    KeyGenerator kgen = KeyGenerator.getInstance(""AES"", ""BC"");
    kgen.init(256);
    SecretKey key = kgen.generateKey();
    byte[] symmKey = key.getEncoded();
    return symmKey;
}

public byte[] encryptUsingSessionKey(byte[] skey, byte[] data) throws InvalidCipherTextException {
    PaddedBufferedBlockCipher cipher = new PaddedBufferedBlockCipher(new AESEngine(), new PKCS7Padding());
    cipher.init(true, new KeyParameter(skey));
    int outputSize = cipher.getOutputSize(data.length);
    byte[] tempOP = new byte[outputSize];
    int processLen = cipher.processBytes(data, 0, data.length, tempOP, 0);
    int outputLen = cipher.doFinal(tempOP, processLen);
    byte[] result = new byte[processLen + outputLen];
    System.arraycopy(tempOP, 0, result, 0, result.length);
    return result;
}

static {
    Security.addProvider(new BouncyCastleProvider());
}
}
</code></pre>

<p>HashGenerator.java </p>

<pre><code>class HashGenerator {
public HashGenerator() {
}

public byte[] generateSha256Hash(byte[] message) {
    String var2 = ""SHA-256"";
    String var3 = ""BC"";
    byte[] var4 = null;

    try {
        MessageDigest var7 = MessageDigest.getInstance(var2, var3);
        var7.reset();
        var4 = var7.digest(message);
    } catch (Exception var6) {
        var6.printStackTrace();
    }

    return var4;
}
}
</code></pre>

<p>These piece of code encoding the data and giving me HMAC as per my need, but I am not able to do same with JavaScript.</p>

<p>Can anyone give any reference or code on for JavaScript client.</p>

<p>Any help will be appreciated.</p>
","<p>Thanks for down-voting the question, may be a not great question, but here I done it myself</p>

<pre><code>this.doEncryption = function (data) {
var key = btoa(this.generateRandomString());
var Encryptionkey = CryptoJS.enc.Base64.parse(key);
var encryptedPid = CryptoJS.AES.encrypt(data,Encryptionkey,{ mode: CryptoJS.mode.ECB, padding: CryptoJS.pad.Pkcs7});
var sha256 = CryptoJS.SHA256(data);
var encryptedHmac = CryptoJS.AES.encrypt(sha256,Encryptionkey,{ mode: CryptoJS.mode.ECB, padding: CryptoJS.pad.Pkcs7});
return {
    encryptionKey : key,
    encryptedPid : encryptedPid.toString(),
    encryptedHmac : encryptedHmac.toString()
};
</code></pre>
","39447208","65","<javascript><android><encoding><aes><hmac>","-4","0","1","2016-09-12 09:28:36","39447208","2","3","6334037","","2016-08-29 13:31:40","2016-08-29 12:13:27","","","2016-09-12 09:28:36"
"58756605","CryptoJS encrypt HMACSha256 different than Java","<p>I'm trying to convert this code of CryptoJS to Kotlin:</p>

<pre class=""lang-js prettyprint-override""><code>const hash = CryptoJS.HmacSHA256(message, key); 
const signature = CryptoJS.enc.Hex.stringify(hash);
</code></pre>

<p>That's the kotlin code equivalent to above snippet:</p>

<pre><code>private fun generateSignature(key: String, payload: String): String {
    val algorithm = ""HmacSHA256""

    return Mac.getInstance(algorithm)
        .apply { init(SecretKeySpec(key.toByteArray(), algorithm)) }
        .run { doFinal(payload.toByteArray()) }
        .let { HexUtils.toHexString(it) }
}
</code></pre>

<p>But it is not working at all. They generate different results. CryptoJS generates an array of bytes that has 8 positions, the Java code generates an array of bytes that has 32 positions.</p>

<p>I don't know what Im doing wrong. I need to make my Kotlin code work exactly as the javascript one.</p>

<p>Update: I can't change the Javascript way. I have to do the exactly same thing in Kotlin</p>

<p>Update2: Here is a test where the JS code and the Kotlin code generates different results.</p>

<p>Input:</p>

<pre><code>key = 's21fk4vb-5415-46c7-aade-303dcf432bb4'
message = 'POST,/wallets/3323461f96-bdf3-4e03-bc93-7da1fb27aee7/withdraw/,1573148023809,{""amount"":""1.0"",""bank"":{""bank"":""789"",""agency"":""456"",""account"":""12378"",""accountDigit"":""6"",""name"":""joao"",""taxId"":""33206913098"",""holderType"":""personal""}}'
</code></pre>

<p>Results with JS code:</p>

<pre class=""lang-js prettyprint-override""><code>Result of encrypt in bytes:
{sigBytes: 32, words: [8]}
sigBytes: 32
words: [8]
0: 2102759135
1: -196086391
2: -2099697915
3: -1620551271
4: 2463524
5: 1757965357
6: -1039993965
7: -1798822705

Bytes to Hex:
7d558edff44ff58982d927059f6859990025972468c86c2dc202f39394c824cf
</code></pre>

<p>Results with Kotlin code:</p>

<pre><code>Result of encrypt in bytes:
{byte[32]@1126} 
 0 = 82
 1 = -110
 2 = -100
 3 = -128
 4 = -63
 5 = 22
 6 = -103
 7 = -31
 8 = 83
 9 = -125
 10 = -72
 11 = 109
 12 = -91
 13 = -69
 14 = 54
 15 = -41
 16 = 27
 17 = -107
 18 = -60
 19 = -110
 20 = -57
 21 = -29
 22 = -20
 23 = -32
 24 = -66
 25 = 88
 26 = 87
 27 = -50
 28 = -47
 29 = -18
 30 = -96
 31 = 25

Bytes to Hex:
52929c80c11699e15383b86da5bb36d71b95c492c7e3ece0be5857ced1eea019
</code></pre>
","<p>No SHA-256 hash can have only 8 byte positions. The output, as the name suggests, should be 256 bits or 32 bytes. What I suspect to happen is that the input of <code>stringify</code> is already presumed to be bytes, while CryptoJS functions return a <code>WordArray</code> of 32 bit words. As 8 * 32 = 256 this seems reasonable.</p>

<p>So I presume you can simply fix this by using a function on the <code>WordArray</code> instead, for instance <code>hash.toString('hex')</code>.</p>
","58757380","64","<java><kotlin><encryption><hmac><cryptojs>","0","1","1","2019-11-08 18:41:38","","3","","11857568","","2019-11-08 18:41:38","2019-11-07 20:40:10","","","2019-11-07 21:48:11"
"25670638","Node: API authentication of 3rd party apps","<p>I am building an API for a mobile APP. However, I want to also be able to allow other apps to use the API. If someone wants access to my API, they would request an clientKey and clientSecret that would be associated to that company (the one who is using the api). If someone makes a request to my API, given the clientKey I'd know which company is making the request and with the secret I could use HMAC signing to check authenticity. If a request is valid, then I will know which company is making the request and therefore can check if the request is valid for that company (a company would only be able to manage its own resources for example). </p>

<p>I am using node + mongoose + passport (for regular app users login). </p>

<p>Questions:</p>

<p>1) Does this seem like a good approach?
2) Are there any security flaws in this scheme?
3) Does anyone know a good stable node module that does this?
4) Any other thoughts are welcome</p>

<p>Long days and pleasant nights</p>
","","","64","<node.js><api><authentication><hmac>","1","","0","2014-09-04 16:30:11","","2","1","","","","2014-09-04 16:30:11","","",""
"48593698","generating the HMAC different java C # to the same inputs","<p><strong>Java function</strong></p>

<pre><code> private static byte[] getHmac(String login, String password, byte[] key) throws NoSuchAlgorithmException, InvalidKeyException {
    // byte[] Login = login.getBytes(StandardCharsets.US_ASCII);//OK
    byte[] pwdBytes = (login + password).getBytes(StandardCharsets.US_ASCII);//OK

    //MD5
    MessageDigest md = MessageDigest.getInstance(""md5"");
    md.update(pwdBytes);
    byte[] pwdbytes_md5 = md.digest();//OK

    //HMAC
    Mac mac = Mac.getInstance(""HmacMD5"");
    SecretKey sk = new SecretKeySpec(key, mac.getAlgorithm());
    mac.init(sk);
    mac.update(pwdbytes_md5);

    return mac.doFinal();
}
</code></pre>

<p><strong>C# Function</strong></p>

<pre><code>public byte[] GetHash(string login, string password, byte[] key)
    {

        byte[] pwdBytes = Encoding.ASCII.GetBytes(login + password);


        MD5 md = MD5.Create();
        byte[] pwdbytes_md5 = md.ComputeHash(pwdBytes);
        Hash = new HMACMD5(pwdbytes_md5).ComputeHash(key);

        return Hash;
    }
</code></pre>

<p>Inputs:</p>

<p>login =    happy<br>
password = 89631139<br>
key = [0x04,0x00,0x00,0x50,0x00,0x00,0x00,0x00,0x6b,0x2e,0x8e,0x6b,0x3c,0xb7,0x02,0x06]  </p>

<p>outputs (var value in debug) c#    </p>

<p>key      = 0x04,0x00,0x00,0x50,0x00,0x00,0x00,0x00,0x6b,0x2e,0x8e,0x6b,0x3c,0xb7,0x02,0x06 = ok
md5  = 0x5a,0x6a,0x0b,0xef,0xff,0x83,0x2f,0x61,0x5e,0x16,0xc7,0x3d,0x5a,0x6e,0xde,0x65 = ok
Login    = 0x68,0x61,0x70,0x70,0x79 = ok<br>
pwdBytes = 0x68,0x61,0x70,0x70,0x79,0x38,0x39,0x36,0x33,0x31,0x31,0x33,0x39 = ok<br>
Hash     = 0x6a,0xcd,0xad,0x49,0x8d,0x54,0xfe,0xf1,0xca,0x4e,0x74,0xd8,0x52,0x46,0x09,0x6a = ok</p>

<p>these are the expected outputs for the variables as well as the return of the function,
but in the function written in java all the outputs are, except the return of the function that in the case is the hash, that of C # is correct, but I can not in any way return the same value in java.</p>

<p>in java always returns this value> A3 DE F0 6C 9D 53 87 4A 18 23 FD 2C F6 E4 15 0D<br>
However the desired value for the return of the function must be what is returned by the function in C #    </p>

<p>Does anyone know a correct way to implement the function of c # in java, I have already searched and everything that was website and had no solution, thank you.  </p>
","<p>The error is in the C# code. The key and the data are switched. If you do the same in Java you get the same result as in C#:</p>

<pre><code>    private static byte[] getHmac(final String data, final byte[] key)
        throws NoSuchAlgorithmException, InvalidKeyException {
    // byte[] Login = login.getBytes(StandardCharsets.US_ASCII);//OK
    final byte[] pwdBytes = data.getBytes(StandardCharsets.US_ASCII);// OK

    // MD5
    final MessageDigest md = MessageDigest.getInstance(""md5"");
    md.update(pwdBytes);
    final byte[] pwdbytes_md5 = md.digest();// OK

    // HMAC
    final Mac mac = Mac.getInstance(""HmacMD5"");
    final SecretKey sk = new SecretKeySpec(pwdbytes_md5, mac.getAlgorithm());
    mac.init(sk);
    mac.update(key);

    return mac.doFinal();
}
</code></pre>
","48594333","62","<java><c#><hash><md5><hmac>","1","0","1","2018-02-03 05:43:06","48594333","0","","","","","2018-02-03 03:37:53","","","2018-02-03 05:43:06"
"35975437","is this hashing / verification class safe enough?","<p>I know this kind of question has been asked here <em>more than many</em> times, but under every question there is recommendation to ask these things to someone who knows what they are doing. (so we can learn what we are doing as well)</p>

<p>Also I couldn't find enough satisfying examples with updated php functions..</p>

<p>So here is my hashing class which I am developing for an open-source project. I have 4 steps</p>

<ol>
<li>base64 encode the password, for safer encryption format</li>
<li>merge password with a server-side key using sha256</li>
<li>merge, merged password and pepper, with random key which will be stored in database (called cholesterol, for preventing mix-ups, since as main hash salt I am using password_hash default random salt)</li>
<li>hash the result with password_hash, default blowfish, with 16 cost</li>
</ol>

<p>The parts I am not sure about are <strong>key lengths</strong>, <strong>should I use another base64 encode in order to prevent raw bytes problem with sha256</strong> and is the resulting hash has right format for direct insert to mysql.</p>

<p>Also how secure the class usage itself.</p>

<p>Here is the class:</p>

<pre><code>&lt;?php
namespace shotwn\lazywork;

/**
* add manual here
* pepper is a static server-side key, generated with hash_hmac sha256 and random keys
*
* cholesterol is a random, 22digit?(need more?) database stored key which has been used as salt with
* hash_hmac sha256
*
* main structure is
* password_hash(hash_hmac(sha256, hash_hmac(sha256, base64_encode(password), pepper),cholesterol))
*
*/

class PasswordKitchen {
  private static $password_pepper;

  function __construct() {
       try {
         self::$password_pepper = include ""/../.nope/biber.key"";
       } catch (Exception $e) {
         throw new Exception(""No pepper key"");
       }
   }

  private function season(string $password, string $cholesterol = null) {
    //use site-wide password pepper
    $password_safe = base64_encode ($password);
    if(isset($cholesterol) &amp;&amp; $cholesterol != null) {
      $password_cholesterol = $cholesterol;
    } else {
      $password_cholesterol = substr(base64_encode(openssl_random_pseudo_bytes(17)),0,22);; //will be user-based mysql recorded
      $password_cholesterol = str_replace(""+"",""."",$password_cholesterol);
    }

    $password_with_pepper = hash_hmac(""sha256"",$password_safe,self::$password_pepper);
    $password_with_pepper_and_cholesterol = hash_hmac(""sha256"",$password_with_pepper,$password_cholesterol);

    $seasonedPassword = (array) [
      ""password_w_PaC"" =&gt; $password_with_pepper_and_cholesterol,
      ""password_cholesterol"" =&gt; $password_cholesterol,
    ];

    return $seasonedPassword;
  }

  public function hash(string $password, $cost = 16) {
    $options = [
        'cost' =&gt; $cost, //change for admin accounts
    ];

    $seasoning = $this-&gt;season($password);
    $seasoned_password = $seasoning[""password_w_PaC""];
    $password_cholesterol = $seasoning[""password_cholesterol""];

    $passwordHash = password_hash($seasoned_password, PASSWORD_DEFAULT);

    return (array) [
      ""hash"" =&gt; $passwordHash,
      ""cholesterol"" =&gt; $password_cholesterol,
    ];
  }

  public function validate(string $password, string $cholesterol, string $hash) {
    $seasonThePassword = $this-&gt;season($password, $cholesterol);
    return password_verify($seasonThePassword[""password_w_PaC""], $hash);
  }
}
</code></pre>
","<p>This is what password_hash() already does:</p>

<ul>
<li>It generates a safe salt</li>
<li>and calculates a BCrypt hash with a cost
factor of currently 10.</li>
</ul>

<p>So there is no need to take extra steps to safely store your passwords. Especially the generation of the random salt (cholesterol) is already done by the function. The cost factor you pass to your function is never used.</p>

<p>So i would recommend to just use the password_hash() directly:</p>

<pre><code>// Hash a new password for storing in the database.
// The function automatically generates a cryptographically safe salt.
$hashToStoreInDb = password_hash($password, PASSWORD_DEFAULT);

// Check if the hash of the entered login password, matches the stored hash.
// The salt and the cost factor will be extracted from $existingHashFromDb.
$isPasswordCorrect = password_verify($password, $existingHashFromDb);
</code></pre>

<p>If you want a higher cost factor you can pass it in the options, be aware that increasing the cost factor by one, will double the calculation time, 16 seems to be an unnecessary high factor.</p>

<p>If you want to include a server side secret, there is a better way as to add it as a pepper. Instead encrypt the resulting hash. Further explanations you can find at the end of my tutorial about <a href=""http://www.martinstoeckli.ch/hash/en/index.php"" rel=""nofollow"">safely storing passwords</a>.</p>
","35975800","62","<php><hash><static><hmac><password-hash>","0","2","1","2016-03-13 20:59:37","35975800","2","","","","","2016-03-13 20:31:25","","","2016-03-13 20:59:37"
"36722409","Is HMAC frequently implemented wrong?","<p>Some REST services I've encountered required that I download an API key or some kind of shared secret, and simply pass this in with the headers.</p>

<p>But when trying to describe this design pattern in a Google search, all I get is ""HMAC"" which appears to be more sophisticated; HMAC is designed to never send the shared secret directly to the server, and involves hashing the secret key with other data.</p>

<p>So what am I looking at? Is there a name for it?</p>
","<p>You are correct, using an API key in the way you describe is not HMAC.  It is often referred to as ""API Key Authentication"" or some similar name.  API key authentication is simply a password that is passed, usually as a header, along with every request.</p>

<p>This is only secure when paired with HTTPS, so that anyone watching the traffic can't simply read out the API key.</p>
","36726233","61","<rest><security><authentication><hmac>","0","0","1","2016-04-19 18:09:31","36726233","1","","","","","2016-04-19 15:08:56","","","2016-04-19 18:09:31"
"41767387","What can be the flaws/cons of using custom encryption into a JWS? (EDIT: is a JWS a valid MAC?)","<p>so I am working on a software that will have to eventually communicate with one or more servers. I am experimenting on implementing Json Web Tokens for specific parts of this communication (basically not for authentification, they will be access tokens mostly).</p>

<p>For some reasons, I would want to include sensitive data as a part of the payload (not highly sensitive, more like infos that are better not be shown for privacy reasons, but not critical for the application integrity).</p>

<p>After reading the JWE specs, and considering the available time i have to do this, i would like to spare the task of building a proper JWE for the moment, and just use a custom function to encrypt the payload before creating the JWS. A proper JWE would be then delayed until next version of the software.</p>

<p>Is it totally to be avoided? Can i use this as a temporary solution? Or is it rather a sign of bad desing of my communication ways?</p>

<p><strong>EDIT - I preferred editing this topic, as the new question is closely related to the first one, but a bit more precise and specific:</strong></p>

<p>I went on with proper security specifications and tests with it. Now that i came up with what seems to be a good encryption solution, and read quite a lot more on the subject, it seems that the approach I started to work with would be valid: it is stated in many places that encryption does not cover the content integrity, so that the message must go through a MAC (after encryption).</p>

<p>_So, let's take the initial question in the inverse order: now that i have a properly encrypted message, and then need to MAC it, is a JWS built with the HMAC algorithm a valid MAC? Or is it just language abuse to call it a HMAC JWS?</p>
","","","60","<security><jwt><hmac><jwe>","0","","0","2017-01-24 13:39:06","","5","","7393478","","2017-01-24 13:39:06","2017-01-20 15:41:40","","",""
"56789525","Same codes on PHP and Ruby give a different result","<p>I'm trying to implement a signature calculating using the sample written on PHP. But these codes return a different result.</p>

<p>PHP sample:</p>

<pre><code>base64_encode(hash_hmac('sha384', $message, trim($key), true))
</code></pre>

<p>Ruby code: </p>

<pre><code>hmac_hash = OpenSSL::HMAC.hexdigest(""SHA384"", key, message)
signature = Base64.encode64(hmac_hash)
</code></pre>

<p>Here is the message variable is JSON.</p>
","<p><code>OpenSSL::HMAC.hexdigest</code> in Ruby outputs a hex string, and that's what you base64 encode. In your PHP code, the <code>true</code> parameter to <code>hash_hmac</code> makes it output raw binary data. Without that, it would be hex, which I think would result in the same as the Ruby one.</p>

<p>So you either need to remove the <code>true</code> param in PHP code, in order to encode the hex representation in PHP, or use <code>OpenSSL::HMAC.digest</code> in Ruby, in order to encode the raw binary data in Ruby.</p>

<p>Also you have <code>trim()</code> on the key in PHP but no <code>.strip</code> in Ruby, but I don't think that's the problem.</p>
","56789898","60","<php><ruby><security><encoding><hmac>","1","2","1","2019-06-28 08:41:23","56789898","4","","","","","2019-06-27 10:58:30","","2019-06-28 08:41:23","2019-06-27 11:19:24"
"46796997","What is the equivalent of hashing Java code into C#?","<p>I have a strange problem in getting equivalent hash code from C# code translated into Java. I don't know, what MessageDigest update method do. It should only update the contents of digest and should compute hash after calling digest. </p>

<p>Same thing I am doing in C# with SHAManaged512.ComputeHash(content). But I am not getting same hash code. </p>

<p><strong>Following is the Java code.</strong></p>

<pre><code>public static String hash(String body, String secret) {
    try {
        MessageDigest md = MessageDigest.getInstance(""SHA-512"");
        md.update(body.getBytes(""UTF-8""));

        byte[] bytes = md.digest(secret.getBytes(""UTF-8"")); 

        StringBuilder sb = new StringBuilder();
        for (int i = 0; i &lt; bytes.length; i++) {
            sb.append(Integer.toString((bytes[i] &amp; 0xff) + 0x100, 16).substring(1));
        }

        return sb.toString();
    } catch (Exception e) {
        throw new RuntimeException();
    }
}
</code></pre>

<p><strong>Following is C# Code</strong></p>

<pre><code>private byte[] ComputeContentHash(string contentBody)
{               
        using (var shaM = new SHA512Managed())       
        {
            var content = string.Concat(contentBody, Options.SecretKey);

            var hashedValue = shaM.ComputeHash(ToJsonStream(content));
            return hashedValue;
        }
}

public static Stream ToJsonStream(object obj)
{
   return new MemoryStream(Encoding.Unicode.GetBytes(obj.ToString()));
}
</code></pre>
","<p><code>Encoding.Unicode</code> (which you are using in the C# <code>ToJsonStream</code> method) is not UTF8. It's UTF16. See <a href=""https://msdn.microsoft.com/en-us/library/system.text.encoding.unicode(v=vs.110).aspx"" rel=""nofollow noreferrer"">MSDN</a>. (Also keep in mind that UTF16 can be little or big endian.) You're looking for <code>Encoding.UTF8</code>.</p>

<p>First thing to do is check if the byte array you're hashing is the same.</p>
","46797125","59","<java><c#><hash><hmac><sha512>","0","-1","2","2017-10-18 09:24:50","","0","3","","","","2017-10-17 18:36:59","","2017-10-17 20:11:52","2017-10-17 18:44:42"
"46796997","What is the equivalent of hashing Java code into C#?","<p>I have a strange problem in getting equivalent hash code from C# code translated into Java. I don't know, what MessageDigest update method do. It should only update the contents of digest and should compute hash after calling digest. </p>

<p>Same thing I am doing in C# with SHAManaged512.ComputeHash(content). But I am not getting same hash code. </p>

<p><strong>Following is the Java code.</strong></p>

<pre><code>public static String hash(String body, String secret) {
    try {
        MessageDigest md = MessageDigest.getInstance(""SHA-512"");
        md.update(body.getBytes(""UTF-8""));

        byte[] bytes = md.digest(secret.getBytes(""UTF-8"")); 

        StringBuilder sb = new StringBuilder();
        for (int i = 0; i &lt; bytes.length; i++) {
            sb.append(Integer.toString((bytes[i] &amp; 0xff) + 0x100, 16).substring(1));
        }

        return sb.toString();
    } catch (Exception e) {
        throw new RuntimeException();
    }
}
</code></pre>

<p><strong>Following is C# Code</strong></p>

<pre><code>private byte[] ComputeContentHash(string contentBody)
{               
        using (var shaM = new SHA512Managed())       
        {
            var content = string.Concat(contentBody, Options.SecretKey);

            var hashedValue = shaM.ComputeHash(ToJsonStream(content));
            return hashedValue;
        }
}

public static Stream ToJsonStream(object obj)
{
   return new MemoryStream(Encoding.Unicode.GetBytes(obj.ToString()));
}
</code></pre>
","<p>The solution was to put first Secret Key and concate it with pay load data.</p>
","46806835","59","<java><c#><hash><hmac><sha512>","0","0","2","2017-10-18 09:24:50","","0","3","","","","2017-10-17 18:36:59","","","2017-10-18 09:24:50"
"52656652","Hmac with SHa256 Or SHa256 with key appended in the input string? Which is more secure?","<p>Which is a more secure way, Hashing using <code>SHa256</code> and appending key in the input string, Or use that key and compute Hmac with SHA256? Or any other other hashing technique which uses a key.</p>
","<p>Hmac is more secure.</p>

<p>What you are proposing is called ""Suffix-MAC"" in <a href=""https://github.com/crypto101/crypto101.github.io/raw/master/Crypto101.pdf"" rel=""nofollow noreferrer"">Crypto101</a> page 135.  The problem with Suffix-MAC is a collision in the hash function can be used to create existential forgeries.  That is, if h(m1) = h(m2), and if I know suffix-mac(m1), then I also know suffix-mac(m2).</p>

<p>Bellare proved that <a href=""https://cseweb.ucsd.edu/~mihir/papers/hmac-new.pdf"" rel=""nofollow noreferrer"">HMAC is more robust</a> because you don't need collision resistance of the hash function for it to be secure.  This is why HMAC-SHA1 is still considered okay even though SHA1 is not considered okay.</p>
","52679205","59","<hash><sha256><hmac>","1","2","1","2018-10-06 12:42:20","52679205","0","1","4062630","","2018-10-05 09:54:44","2018-10-05 00:10:13","","","2018-10-06 12:42:20"
"57949643","Hmac.digest returning AN_ERROR_OCCURRED_WHILE_DECRYPT_PASSWORDGUID","<p>I am trying to create a function which generates an OAuth signature using suitescript 2.0. However, I am encountering a ""AN_ERROR_OCCURRED_WHILE_DECRYPT_PASSWORDGUID - An error occurred while decrypting a credential."" error when I use the hmac.digest function. Any ideas where I went wrong?</p>

<pre><code>var generateOAuthSignature = function(params) {
    require(['N/crypto', 'N/encode'], function(crypto, encode) {
        var timestamp = Math.round((new Date()).getTime() / 1000.0);
        var nonce = encode.convert({
            string: timestamp + """",
            inputEncoding: encode.Encoding.UTF_8,
            outputEncoding: encode.Encoding.BASE_64
        });

        var oauth_headers = {
            oauth_version: ""1.0"",
            oauth_nonce: nonce,
            oauth_signature_method: params.signature_method,
            oauth_consumer_key: params.consumer_key,
            oauth_token: params.token,
            oauth_timestamp: timestamp
        };

        log.debug('oauth_headers', oauth_headers)

        var url_params = params.rest_url.split(""?"")[1].split(""&amp;"");
        var signature_params = {};

        for (key in oauth_headers) {
            signature_params[key] = key + ""="" + oauth_headers[key];
        }

        for (key in url_params) {
            var temp = url_params[key].split(""="");
            signature_params[temp[0]] = url_params[key];
        }

        var signature_string = """";
        var sortedkeys = Object.keys(signature_params).sort();

        for (var i = 0; i &lt; sortedkeys.length; i++) {
            signature_string += (i == 0 ? """" : ""&amp;"") + signature_params[sortedkeys[i]];
        }

        var base_string = params.method + ""&amp;"" + encodeURIComponent(params.rest_url.split(""?"")[0]) + ""&amp;"" + encodeURIComponent(signature_string);
        var composite_key_guid = encodeURIComponent(params.consumer_secret) + ""&amp;"" + encodeURIComponent(params.token_secret);

        log.debug('composite_key_guid', composite_key_guid);
        log.debug(""crypto.createSecretKey({guid: composite_key, encoding: encode.Encoding.UTF_8})"", JSON.stringify(crypto.createSecretKey({ guid: composite_key_guid, encoding: encode.Encoding.UTF_8 })));

        var secret_key = crypto.createSecretKey({
            guid: composite_key_guid, encoding: encode.Encoding.UTF_8
        });

        log.debug('secret_key', secret_key);

        var hmac = crypto.createHmac({
            algorithm: crypto.HashAlg.SHA256,
            key: secret_key
        });

        hmac.update({
            input: base_string,
            inputEncoding: encode.Encoding.UTF_8
        });

        // error occuring here 
        oauth_signature = hmac.digest({
            outputEncoding: encode.Encoding.BASE_64
        });

        //more code below...
    });
}
</code></pre>
","","","59","<javascript><netsuite><hmac><cryptojs><suitescript>","0","","0","2019-09-16 02:16:37","","2","","","","","2019-09-16 02:16:37","","",""
"57430935","Calculate HMAC in Google BigQuery SQL","<p>How do I calculate an HMAC in Google BigQuery?</p>

<p>BigQuery includes a number of crypto related functions, such as hash functions and encryption functions, but a HMAC function (that calculates a signature) is missing.</p>
","<p>The BigQuery developers apparently forgot to add HMAC functions, but fortunately that can be built on what is available. HMAC is defined as</p>

<pre><code>HMAC(Key, Message) = H((Key xor opad) concat H((Key xor ipad) concat Message))
</code></pre>

<p>where <code>H</code> is a hash function and
<code>Key</code>, <code>ipad</code> and <code>opad</code> are all byte strings of the same length as the blocksize of the hash function.</p>

<p>BigQuery provides all the necessary building blocks to implement this in custom functions. The following code implements HMAC_SHA1, but you can change it to use a different hash function by replacing the hash function and updating the block size.</p>

<pre><code>-- HMAC(K, M) = H((K xor opad) concat H((K xor ipad) concat M))
-- K, opad and ipad are all the same size as the hash function's block size
-- ipad = 0x36 repeated to fill the block size
-- opad = 0x5c repeated to fill the block size
-- If K is smaller than the block size, it must be padded with 0x00s

-- This implementation gives the same result as the online HMAC generator at https://www.freeformatter.com/hmac-generator.html


create temp function blocksize() as (64); -- the block size of the hash function, 64 in the case of SHA1
create temp function ipad() as (repeat(b""\x36"", blocksize()));
create temp function opad() as (repeat(b""\x5c"", blocksize()));

create temp function pad(key BYTES) as (
  concat(key, repeat(b""\x00"", blocksize() - byte_length(key)))
);

create temp function hash_if_needed(key BYTES) as (
  if(byte_length(key) &gt; blocksize(), sha1(key), key)
);

-- size of key == block size
create temp function hmac_sha1_core(key BYTES, message BYTES) as (
  sha1(concat(
    key ^ opad(),
    sha1(concat(key ^ ipad(), message))
  ))
);

-- key must not be larger than the block size
create temp function hmac_sha1_bytes(key BYTES, message BYTES) as (
  hmac_sha1_core(pad(key), message)
);

create temp function hmac_sha1(key STRING, message STRING) as (
  hmac_sha1_bytes(hash_if_needed(cast(key as BYTES)), cast(message as BYTES))
);
</code></pre>

<p>To verify, try <code>select to_hex(hmac_sha1(""my secret key"", ""hello world""))</code> and compare it to the hmac generated on <a href=""https://www.freeformatter.com/hmac-generator.html"" rel=""nofollow noreferrer"">https://www.freeformatter.com/hmac-generator.html</a></p>
","57430936","58","<sql><google-bigquery><hmac>","1","4","1","2019-08-14 13:16:26","","0","","","","","2019-08-09 13:18:41","","2019-08-14 13:16:26","2019-08-09 13:18:41"
"37585646","IoT Hub - modify complex token creation (via MQTT)","<p>as per my heading I would really like to look into doing this, let me explain why.</p>

<p>History : I have successfully done a full host and client and its working 100% on via .NET. The big but is that our clients in the field are running on a microcontroller (not a microprocessor) that has poor encryption libraries (embedded C, in particular PIC). Our firmware engineer guy is currently battling to get the HMAC part of the SAS token generation to work. The other pieces of the hub is possible (MQTT, TLS, URL encoding, EPOCH etc) but the HMAC SHA256 is a struggle. </p>

<p>I am aware of the protocol gateway offered where you can replace the gateway’s authentication provider. Does anyone have any sample code/guide that I can follow. The dev guide offered by Microsoft seems limited or maybe im just being silly and missing the plot.</p>

<p>Thanks so much for any help! </p>
","<p>Light bulb moment ;) So we going to keep our TCP channel open and will get the unit to help auth over this channel. I will ACK back the key (will encrypt that in a much simpler way ;)) </p>
","37724922","58","<azure><mqtt><sha256><hmac><azure-iot-hub>","1","1","1","2016-06-09 11:38:29","37724922","0","","","","","2016-06-02 07:45:33","","","2016-06-09 11:38:29"
"59070030","Validating HMACSHA256 in C#","<p>I'm pretty new to asp.net/c# and i'm trying to recreate the password validation in C#. I have this hash stored in the database:
<code>U2zdbUmZXCeOLs0OuS9bhg==7hQ60TTq0ZiT/z+eu4bdzpmBcp5uYa70ZDxQPncEG0c=</code></p>

<p>The password for this hash is 1234567. This works because I can login with this password in the webapplication.</p>

<p>So if I understand correctly. The hash consists of a base64 encoded salt <code>U2zdbUmZXCeOLs0OuS9bhg==</code> and a password hashed with this salt: <code>7hQ60TTq0ZiT/z+eu4bdzpmBcp5uYa70ZDxQPncEG0c=</code></p>

<p>But if I use this example I found on the internet. I don't get the same hash result. I already tried playing with the encoding (resulting in different hashes), but no luck. hashAlgorithmType is set to HMACSHA256 in the web.config. What am I doing wrong?</p>

<pre><code>using System;
using System.Security.Cryptography;
using System.Text;

public class Program
{
    public static void Main()
    {

        var base64Salt = ""U2zdbUmZXCeOLs0OuS9bhg=="";  
        var base64Hash = ""7hQ60TTq0ZiT/z+eu4bdzpmBcp5uYa70ZDxQPncEG0c="";
        // Decode the base64 salt to get the salt byte array
        var saltBytes = Convert.FromBase64String(base64Salt);

        // Provide the user's plain password
        var plaintextPassword = ""1234567"";

        // Salt the plaintext password, prepend to user's provided password, and then hash
        try
        {
            var hmac256 = new HMACSHA256(saltBytes);
            var hash = Convert.ToBase64String(hmac256.ComputeHash(Encoding.UTF8.GetBytes(plaintextPassword)));   
            Console.WriteLine(base64Salt+hash);
            if (hash == base64Hash)
            {
                Console.WriteLine(""Success! Both hashes match!"");
            }
            else
            {
                Console.WriteLine(""Passwords do not match."");
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(""Error!"", e.Message);
        }
    }
}
</code></pre>
","<p>You need to <em>know the right key</em> used and <em>how is the password concatenated with the salt</em>.</p>

<p>Normally, the salt bytes are concatenated with the password bytes, like this:</p>

<pre><code>var password = ""1234567"";
var passwordBytes = Encoding.UTF8.GetBytes(password);

var salt = ""U2zdbUmZXCeOLs0OuS9bhg=="";
var saltBytes = Convert.FromBase64String(salt);

var passwordBytesAndSaltBytes = new byte[passwordBytes.Length + saltBytes.Length];

for (int i = 0; i &lt; passwordBytes.Length; i++)
{
    passwordBytesAndSaltBytes[i] = passwordBytes[i];
}

for (int i = 0; i &lt; saltBytes.Length; i++)
{
    passwordBytesAndSaltBytes[passwordBytes.Length + i] = saltBytes[i];
}
</code></pre>

<p>but we don't know what were the rules used.</p>

<p>And the secret is well, kept secret, like this:</p>

<pre><code>var secret = ""this must be hidden"";
var secretBytes = Encoding.UTF8.GetBytes(secret);

var hmac256 = new HMACSHA256(secretBytes);
var hash = Convert.ToBase64String(hmac256.ComputeHash(passwordBytesAndSaltBytes) );
</code></pre>

<p>Without seeing the code, unfortunately, I don't think you will be able to replicate it.</p>
","59080580","58","<c#><asp.net><security><hash><hmac>","0","0","2","2019-11-28 13:09:37","59089349","0","","6003586","","2019-11-27 16:47:17","2019-11-27 12:15:34","","","2019-11-28 01:32:45"
"59070030","Validating HMACSHA256 in C#","<p>I'm pretty new to asp.net/c# and i'm trying to recreate the password validation in C#. I have this hash stored in the database:
<code>U2zdbUmZXCeOLs0OuS9bhg==7hQ60TTq0ZiT/z+eu4bdzpmBcp5uYa70ZDxQPncEG0c=</code></p>

<p>The password for this hash is 1234567. This works because I can login with this password in the webapplication.</p>

<p>So if I understand correctly. The hash consists of a base64 encoded salt <code>U2zdbUmZXCeOLs0OuS9bhg==</code> and a password hashed with this salt: <code>7hQ60TTq0ZiT/z+eu4bdzpmBcp5uYa70ZDxQPncEG0c=</code></p>

<p>But if I use this example I found on the internet. I don't get the same hash result. I already tried playing with the encoding (resulting in different hashes), but no luck. hashAlgorithmType is set to HMACSHA256 in the web.config. What am I doing wrong?</p>

<pre><code>using System;
using System.Security.Cryptography;
using System.Text;

public class Program
{
    public static void Main()
    {

        var base64Salt = ""U2zdbUmZXCeOLs0OuS9bhg=="";  
        var base64Hash = ""7hQ60TTq0ZiT/z+eu4bdzpmBcp5uYa70ZDxQPncEG0c="";
        // Decode the base64 salt to get the salt byte array
        var saltBytes = Convert.FromBase64String(base64Salt);

        // Provide the user's plain password
        var plaintextPassword = ""1234567"";

        // Salt the plaintext password, prepend to user's provided password, and then hash
        try
        {
            var hmac256 = new HMACSHA256(saltBytes);
            var hash = Convert.ToBase64String(hmac256.ComputeHash(Encoding.UTF8.GetBytes(plaintextPassword)));   
            Console.WriteLine(base64Salt+hash);
            if (hash == base64Hash)
            {
                Console.WriteLine(""Success! Both hashes match!"");
            }
            else
            {
                Console.WriteLine(""Passwords do not match."");
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(""Error!"", e.Message);
        }
    }
}
</code></pre>
","<p>Finally got it to work! I found the answer in the source code of Umbraco (I'm using Umbraco as CMS). I thought it was using the default membershipprovider but it wasn't... Also worth mentioning that the salt was to short for the required key-length, so it was extended.</p>

<p>From the source code I made a working example:</p>

<pre class=""lang-cs prettyprint-override""><code>using System;
using System.Security.Cryptography;
using System.Text;

public class Program
{
    public static void Main()
    {
        var bytes = Encoding.Unicode.GetBytes(""1234567"");
        var saltBytes = Convert.FromBase64String(""U2zdbUmZXCeOLs0OuS9bhg=="");
        byte[] inArray;
        var hashAlgorithm = HashAlgorithm.Create(""HMACSHA256"");
        var algorithm = hashAlgorithm as KeyedHashAlgorithm;
                    var keyedHashAlgorithm = algorithm;
                    if (keyedHashAlgorithm.Key.Length == saltBytes.Length)
                    {
                        //if the salt bytes is the required key length for the algorithm, use it as-is
                        keyedHashAlgorithm.Key = saltBytes;
                        Console.WriteLine(""length is ok"");
                    }
                    else if (keyedHashAlgorithm.Key.Length &lt; saltBytes.Length)
                    {
                        //if the salt bytes is too long for the required key length for the algorithm, reduce it
                        var numArray2 = new byte[keyedHashAlgorithm.Key.Length];
                        Buffer.BlockCopy(saltBytes, 0, numArray2, 0, numArray2.Length);
                        keyedHashAlgorithm.Key = numArray2;
                        Console.WriteLine(""salt byte too long"");
                    }
                    else
                    {
                        //if the salt bytes is too short for the required key length for the algorithm, extend it
                        Console.WriteLine(""salt byte to short"");
                        var numArray2 = new byte[keyedHashAlgorithm.Key.Length];
                        var dstOffset = 0;
                        while (dstOffset &lt; numArray2.Length)
                        {
                            var count = Math.Min(saltBytes.Length, numArray2.Length - dstOffset);
                            Buffer.BlockCopy(saltBytes, 0, numArray2, dstOffset, count);
                            dstOffset += count;
                        }
                        keyedHashAlgorithm.Key = numArray2;
                    }
                    inArray = keyedHashAlgorithm.ComputeHash(bytes);

        var hash = Convert.ToBase64String(inArray);
        Console.WriteLine(hash);        
        var base64Hash = ""7hQ60TTq0ZiT/z+eu4bdzpmBcp5uYa70ZDxQPncEG0c="";

            if (hash == base64Hash)
            {
                Console.WriteLine(""Success! Both hashes match!"");
            }
            else
            {
                Console.WriteLine(""Passwords do not match."");
            }
    }
}
</code></pre>
","59089349","58","<c#><asp.net><security><hash><hmac>","0","0","2","2019-11-28 13:09:37","59089349","0","","6003586","","2019-11-27 16:47:17","2019-11-27 12:15:34","","2019-11-28 13:09:37","2019-11-28 12:52:18"
"58384610","How to reproduce an SHA256-based HMAC from R in Python 3","<p>I am trying to reproduce salted <code>sha256</code> output from R code in Python:</p>

<pre class=""lang-r prettyprint-override""><code>library(openssl)
res = sha256(""test@gmail.com"", key = ""111"")  
res
# [1] ""172f052058445afd9fe3afce05bfec573b5bb4c659bfd4cfc69a59d1597a0031""
</code></pre>

<pre class=""lang-py prettyprint-override""><code>import hashlib, binascii
dk = hashlib.pbkdf2_hmac(='sha256', b'test@gmail.com', b'111', 0)
binascii.hexlify(dk)
# b'494c86307ffb9e9e31c4ec8782af6498e91272c011a316c242d9164d765be257'
</code></pre>

<p>How can I make output in python match R?</p>
","<p>I can't quite reproduce your issue. The following keys match</p>

<p>In R:</p>

<pre><code>library(openssl)
sha256(""test@gmail.com"")
#[1] ""87924606b4131a8aceeeae8868531fbb9712aaa07a5d3a756b26ce0f5d6ca674""
</code></pre>

<p>In Python3:</p>

<pre><code>import hashlib
print(hashlib.sha256(b""test@gmail.com"").hexdigest())
#87924606b4131a8aceeeae8868531fbb9712aaa07a5d3a756b26ce0f5d6ca674
</code></pre>

<hr>

<h2>Update in response to your comment</h2>

<p>The first thing to notice is that in R <code>sha256</code> with a non-<code>NULL</code> <code>key</code> argument will calculate the <a href=""https://en.wikipedia.org/wiki/HMAC"" rel=""nofollow noreferrer"">hash-based message authentication code (HMAC)</a>. From <code>?sha256</code>:</p>

<blockquote>
  <p>All hash functions either calculate a hash-digest for ‘key ==
       NULL’ or HMAC (hashed message authentication code) when ‘key’ is
       not ‘NULL’.</p>
</blockquote>

<p>So if you want to use a key you will need to compare the resulting HMAC in R with the SHA2556-based HMAC in Python.</p>

<p>In R:</p>

<pre><code>library(openssl)
sha256(""test@gmail.com"", key = ""111"")
#[1] ""172f052058445afd9fe3afce05bfec573b5bb4c659bfd4cfc69a59d1597a0031""
</code></pre>

<p>In Python 3:</p>

<pre><code>import hmac
import hashlib
print(hmac.new(b""111"", b""test@gmail.com"", hashlib.sha256).hexdigest())
#172f052058445afd9fe3afce05bfec573b5bb4c659bfd4cfc69a59d1597a0031
</code></pre>
","58385388","58","<python><r><sha256><hmac><salt>","1","2","1","2019-10-16 16:33:05","58385388","1","","599911","","2019-10-16 16:33:05","2019-10-14 22:05:13","","2019-10-15 09:45:42","2019-10-14 23:48:52"
"33979148","HMAC on Mountain lion OSX 10.8.3 EXC_CRASH","<p>Looking for a bit of help using OpenSSL's HMAC function. Currently this function is failing on the HMAC call. ONLY for OSX. Both linux and windows os's are working okay.</p>



<pre class=""lang-c++ prettyprint-override""><code>QString tradingDialog::HMAC_SHA512_SIGNER(QString UrlToSign, QString Secret){

    QString retval = """";

    QByteArray byteArray = UrlToSign.toUtf8();
    const char* URL = byteArray.constData();

    QByteArray byteArrayB = Secret.toUtf8();
    const char* Secretkey = byteArrayB.constData();

    const EVP_MD *md = EVP_sha512();
    unsigned char* digest = NULL;

    // Be careful of the length of string with the choosen hash engine. SHA1 produces a 20-byte hash value which rendered as 40 characters.
    // Change the length accordingly with your choosen hash engine
    char mdString[129] = { 0 };

    // Using sha512 hash engine here.
    digest = HMAC(md, Secretkey, strlen( Secretkey), (unsigned char*) URL, strlen( URL), NULL, NULL);

    for(int i = 0; i &lt; 64; i++){
        sprintf(&amp;mdString[i*2], ""%02x"", (unsigned int)digest[i]);
    }
    retval = mdString;
    return retval;
}
</code></pre>


","<p>You don't say what the problem is on osx, but it looks like you're not nul terminating <code>mdString</code>, so try changing it to</p>

<pre><code>char mdString[129] = { 0 };
</code></pre>

<p>The crashlog you linked to shows that your app is aborting because the stack has been corrupted (I assume this happens on exit).</p>

<p>I would say the final <code>sprintf</code> is causing this, as it is adding a nul byte after the end of your <code>mdString</code> array. Try the above modification and see if that helps. </p>

<p>This ought to crash on all platforms, but I guess you got ""lucky"".</p>
","33989740","57","<c++><macos><openssl><hmac>","2","2","1","2015-11-30 06:30:37","33989740","5","","3758428","","2015-11-30 06:30:37","2015-11-29 03:35:42","","2015-11-30 05:16:54","2015-11-30 00:16:20"
"56864448","HMAC-SHA512 hash missing from Authorize.Net AIM response","<p>I was caught off guard by <a href=""https://support.authorize.net/s/article/MD5-Hash-End-of-Life-Signature-Key-Replacement"" rel=""nofollow noreferrer"">Authorize.Net's recent retirement of the md5 hash</a> to authenticate their responses to AIM transactions. I'm trying to fix some legacy code to keep our legacy site limping along until we can get the rebuilt site out -- IT WILL NOT RUN the latest Authorize.Net PHP SDK so please do not suggest that in response to this question.</p>

<p>In trying to fix this legacy code, I cannot get the test transactions (or even some test transactions run using live/production credentials) to supply the HMAC-SHA512 hash promised in the <a href=""https://www.authorize.net/content/dam/authorize/documents/AIM_guide.pdf"" rel=""nofollow noreferrer"">Aim Guide</a> in the section titled <strong>""Authenticating the Response.""</strong></p>

<p>Here's a sample raw response from an AIM transaction:</p>

<p><code>""1""|""1""|""1""|""This transaction has been approved.""|""52R4QE""|""Y""|""40034138508""|""2019-07-0269072""|""Purchase Description Blah Blah Blah""|""99.95""|""CC""|""auth_capture""|""3""|""Joe""|""Test""|""n&amp;#47;a""|""123 Main St.""|""Los Angeles""|""CA""|""90026""|""US""|""""|""""|""joe.test@example.com""|""""|""""|""""|""""|""""|""""|""""|""""|""""|""""|""""|""""|""""|""""|""P""|""2""|""""|""""|""""|""""|""""|""""|""""|""""|""""|""""|""XXXX1111""|""Visa""|""""|""""|""""|""""|""""|""""|""""|""""|""""|""""|""""|""""|""""|""""|""""|""""|""""</code></p>

<p>According to the AIM Guide:</p>

<blockquote>
  <p>""The last field in the response contains the HMAC-SHA512 hash that Authorize.Net generated for the transaction, which can be used to authenticate the response. To use it, construct an HMAC-SHA512 hash...""</p>
</blockquote>

<p>This does not appear to be the case at all. Is this HMAC only present for certain types of transacations? Is it not provided by the sandbox gateway? What's the deal? Where is the HMAC-SHA512 hash?</p>

<p>Here is a PHP script which illustrates my problem:</p>

<pre class=""lang-php prettyprint-override""><code>&lt;?php
$now = time();
// AUTOMATICALLY GENERATE AN INVOICE NUMBER
$invoice_number = date('Y', $now) . ""-"" . date('m', $now) . ""-"" . date('d', $now) . rand(0,100000);

// Authorize.net credentials
$api_login_id = ""&lt;YOUR API-LOGIN-ID-HERE&gt;"";
$transaction_key = ""&lt;YOUR TRANSACTION KEY HERE&gt;"";

$authnet_values = array(
//  ""x_test_request""        =&gt; ""TRUE"",
    ""x_login""           =&gt; $api_login_id,
    ""x_version""         =&gt; ""3.1"",
    ""x_delim_char""          =&gt; ""|"",
    ""x_encap_char""          =&gt; ""\"""",
    ""x_delim_data""          =&gt; ""TRUE"",
    ""x_url""             =&gt; ""FALSE"",
    ""x_type""            =&gt; ""AUTH_CAPTURE"",
    ""x_method""          =&gt; ""CC"",
    ""x_tran_key""            =&gt; $transaction_key,
    ""x_relay_response""      =&gt; ""FALSE"",
    ""x_card_num""            =&gt; ""4111111111111111"",
    ""x_exp_date""            =&gt; ""01-2020"",
    ""x_description""         =&gt; ""TEST TRANSACTION "" . uniqid(),
    ""x_amount""          =&gt; 12.34,
    ""x_currency_code""       =&gt; ""USD"",

    ""x_cust_id""         =&gt; 1234,
    ""x_first_name""          =&gt; ""Joe"",
    ""x_last_name""           =&gt; ""Test"",
    ""x_company""         =&gt; """",
    ""x_address""         =&gt; ""123 Main St."",
    ""x_city""            =&gt; ""Springfield"",
    ""x_state""           =&gt; ""MO"",
    ""x_zip""             =&gt; ""12345"",
    ""x_email""           =&gt; ""Joe.Text@example.com"",
    ""x_invoice_num""         =&gt; uniqid(),
);

$fields = """";
foreach( $authnet_values as $key =&gt; $value ) $fields .= ""$key="" . urlencode( $value ) . ""&amp;"";


// ========== !!! DO THE TRANSACTION !!! ==========
// URL of gateway for cURL to post to
$url = ""https://test.authorize.net/gateway/transact.dll"";
//$url = ""https://secure.authorize.net/gateway/transact.dll"";
$ch = curl_init($url)
    or die(""Couldn't establish connection to payment gateway, code 1"");

// set to 0 to eliminate header info from response
curl_setopt($ch, CURLOPT_HEADER, 0)
    or die(""Couldn't establish connection to payment gateway, code 2"");

// Returns response data instead of printing it out directly
curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1)
    or die(""Couldn't establish connection to payment gateway, code 3"");

// use HTTP POST to send form data
curl_setopt($ch, CURLOPT_POST, TRUE)
    or die(""Couldn't establish connection to payment gateway, code 4a"");

// supply POST data
curl_setopt($ch, CURLOPT_POSTFIELDS, rtrim( $fields, ""&amp; "" ))
    or die(""Couldn't establish connection to payment gateway, code 4b"");

// Optionally use an old cert bundle or we face ssl authentication problems
//curl_setopt($ch, CURLOPT_CAINFO, '/var/www/ca-bundle/old-ca-bundle.pem')
//  or die(""Could not  establish connection to payment gateway, code 5"");

$resp = curl_exec($ch); //execute post and get results
echo ""=== RAW ===\n"";
print_r($resp);
echo ""=== END RAW ===\n"";

$curl_info = curl_getinfo($ch);

$curl_info[""curl_error""] = curl_error($ch);
$curl_info[""curl_errno""] = curl_errno($ch);
echo ""=== CURL_INFO ===\n"";
print_r($curl_info);
echo ""=== END CURL_INFO ===\n"";

curl_close ($ch);

$parsed = str_getcsv($resp, '|');
echo ""=== PARSED ===\n"";
print_r($parsed);
echo ""=== END PARSED ===\n"";

</code></pre>
","<p>Your code works for me:</p>

<pre><code>C:\php\php.exe C:\Users\jconde\.PhpStorm2019.1\config\scratches\scratch.php
=== RAW ===
""1""|""1""|""1""|""This transaction has been approved.""|""9FUGIS""|""Y""|""40034159620""|""5d1c987e8d88e""|""TEST TRANSACTION 5d1c987e8d4a6""|""12.34""|""CC""|""auth_capture""|""1234""|""Joe""|""Test""|""""|""123 Main St.""|""Springfield""|""MO""|""12345""|""""|""""|""""|""Joe.Text@example.com""|""""|""""|""""|""""|""""|""""|""""|""""|""""|""""|""""|""""|""""|""""|""P""|""2""|""""|""""|""""|""""|""""|""""|""""|""""|""""|""""|""XXXX1111""|""Visa""|""""|""""|""""|""""|""""|""""|""""|""""|""""|""""|""""|""""|""""|""""|""""|""""|""FALSE""|""194894850DF855D0B801F3691203A98CB2EC6C5C1F71E06917FA699065412664DCD7BC35FE2918937BBAB8DCB460DA9E8741799E455CB1D7CCA6BEFEBA71DCC2""=== END RAW ===
=== CURL_INFO ===
Array
(
    [url] =&gt; https://test.authorize.net/gateway/transact.dll
    [content_type] =&gt; text/html
    [http_code] =&gt; 200
    [header_size] =&gt; 228
    [request_size] =&gt; 636
    [filetime] =&gt; -1
    [ssl_verify_result] =&gt; 20
    [redirect_count] =&gt; 0
    [total_time] =&gt; 0.375
    [namelookup_time] =&gt; 0.063
    [connect_time] =&gt; 0.078
    [pretransfer_time] =&gt; 0.11
    [size_upload] =&gt; 488
    [size_download] =&gt; 535
    [speed_download] =&gt; 1426
    [speed_upload] =&gt; 1301
    [download_content_length] =&gt; 535
    [upload_content_length] =&gt; 488
    [starttransfer_time] =&gt; 0.375
    [redirect_time] =&gt; 0
    [redirect_url] =&gt; 
    [primary_ip] =&gt; 23.219.20.24
    [certinfo] =&gt; Array
        (
        )

    [primary_port] =&gt; 443
    [local_ip] =&gt; 10.21.50.28
    [local_port] =&gt; 57726
    [curl_error] =&gt; 
    [curl_errno] =&gt; 0
)
=== END CURL_INFO ===
=== PARSED ===
Array
(
    [0] =&gt; 1
    [1] =&gt; 1
    [2] =&gt; 1
    [3] =&gt; This transaction has been approved.
    [4] =&gt; 9FUGIS
    [5] =&gt; Y
    [6] =&gt; 40034159620
    [7] =&gt; 5d1c987e8d88e
    [8] =&gt; TEST TRANSACTION 5d1c987e8d4a6
    [9] =&gt; 12.34
    [10] =&gt; CC
    [11] =&gt; auth_capture
    [12] =&gt; 1234
    [13] =&gt; Joe
    [14] =&gt; Test
    [15] =&gt; 
    [16] =&gt; 123 Main St.
    [17] =&gt; Springfield
    [18] =&gt; MO
    [19] =&gt; 12345
    [20] =&gt; 
    [21] =&gt; 
    [22] =&gt; 
    [23] =&gt; Joe.Text@example.com
    [24] =&gt; 
    [25] =&gt; 
    [26] =&gt; 
    [27] =&gt; 
    [28] =&gt; 
    [29] =&gt; 
    [30] =&gt; 
    [31] =&gt; 
    [32] =&gt; 
    [33] =&gt; 
    [34] =&gt; 
    [35] =&gt; 
    [36] =&gt; 
    [37] =&gt; 
    [38] =&gt; P
    [39] =&gt; 2
    [40] =&gt; 
    [41] =&gt; 
    [42] =&gt; 
    [43] =&gt; 
    [44] =&gt; 
    [45] =&gt; 
    [46] =&gt; 
    [47] =&gt; 
    [48] =&gt; 
    [49] =&gt; 
    [50] =&gt; XXXX1111
    [51] =&gt; Visa
    [52] =&gt; 
    [53] =&gt; 
    [54] =&gt; 
    [55] =&gt; 
    [56] =&gt; 
    [57] =&gt; 
    [58] =&gt; 
    [59] =&gt; 
    [60] =&gt; 
    [61] =&gt; 
    [62] =&gt; 
    [63] =&gt; 
    [64] =&gt; 
    [65] =&gt; 
    [66] =&gt; 
    [67] =&gt; 
    [68] =&gt; FALSE
    [69] =&gt; 194894850DF855D0B801F3691203A98CB2EC6C5C1F71E06917FA699065412664DCD7BC35FE2918937BBAB8DCB460DA9E8741799E455CB1D7CCA6BEFEBA71DCC2
)
=== END PARSED ===

Process finished with exit code 0
</code></pre>

<p>Make sure you have generated a signature key. Without one a hash will not be calculated for you as the signature key is required to generate it).</p>
","56869679","57","<php><authorize.net><hmac><php-curl>","1","1","1","2019-07-05 23:43:33","56869679","3","","250259","","2019-07-03 18:57:22","2019-07-03 06:50:45","","2019-07-05 23:43:33","2019-07-03 11:59:43"
"46675101","Get single unicode string from digest::hmac","<p>How can I get a single unicode string as the signature below (instead of a character vector (which seems to contain pieces of unicode strings)?</p>

<p>For example</p>

<pre><code>  library(digest)

  raw_key = 'QQrawkeyrawkeyrawkeyrawkey4='
  key = RCurl::base64Decode(raw_key)
  url_test = 'example_url'
  signature &lt;- digest::hmac(key, url_test, algo = ""sha1"", raw = T)
</code></pre>

<p>Returns the character vector</p>

<p>64 d9 cb 13 d3 f9 5c 0a 4c 1d 47 d2 d5 9d ab 24 25 3f f3 20</p>

<p>But I want it to return the single string
'd\xd9\xcb\x13\xd3\xf9\\nL\x1dG\xd2\xd5\x9d\xab$%?\xf3 '</p>

<p><strong>Background:</strong></p>

<p>I am trying to make the R code work the same as the python code below (I am not very experienced with python).</p>

<pre><code>     raw_key = 'QQrawkeyrawkeyrawkeyrawkey4='
     key = base64.urlsafe_b64decode(raw_key)
     url_test = 'example_url'
     hmac.new(key, url_test.encode(), hashlib.sha1).digest()
</code></pre>

<p>Additional context is that I need to string to create the signature for a call to the google distance matrix API using a premium account.</p>
","<p><code>digest::hmac(.., raw=TRUE)</code> isn't actually returning a character vector, it's returning a ""raw"" vector in R. To convert this to a string, use</p>

<pre><code>rawToChar(signature)
</code></pre>
","46675396","57","<python><r><hmac><digest>","0","1","1","2017-10-10 20:25:37","46675396","1","","","","","2017-10-10 20:07:13","","","2017-10-10 20:25:37"
"51614419","HMAC Encoding in R vs Python","<p>I am trying to create a token for an API call in R.  I have example code and output in Python, but I am unable to replicate in R.  I know little to nothing about encoding, decoding, etc.  Hoping someone can shed some light on what I can do to make these outputs match.  Here is a toy example.</p>

<p>R Code:</p>

<pre><code>library(RCurl)
library(digest)

api_key = ""abcdefghijklmnopqrstuvwxyz123456789==""
decoded_api_key = base64Decode(api_key)
hmac_binary = hmac(decoded_api_key, ""MySpecialString"", ""sha512"")
hmac_encoded = base64Encode(digest(hmac_binary))
print(as.character(hmac_encoded))
# ZmZjZDBlMjkyNzg3NDNmYWM1ZDcyNjVkNmY4ZmM1OGQ=
</code></pre>

<p>Python:</p>

<pre><code>import hmac
import hashlib
import base64

api_key = ""abcdefghijklmnopqrstuvwxyz123456789==""
decoded_api_key = base64.b64decode(api_key)
hmac_binary = hmac.new(decoded_api_key, ""MySpecialString"", hashlib.sha512)
hmac_encoded = base64.b64encode(hmac_binary.digest())
print(hmac_encoded)
# MduxNfXVkwcOtCpBWJEl96S43boYVYTtHb4waR21ARCMo6iokKuxbwEJMTkuytbrCOxvBqKCYiaZiV/AyHTEcw==
</code></pre>

<p>The answers I obtain are given at the end of the code blocks. Clearly they don't match.  I'd like someone to help me change my R code to match the Python output.</p>

<p>Thanks in advance.</p>
","<p>The <code>digest()</code> function in R doesn't do the same thing as the <code>.digest()</code> method in python. It doesn't extract the value, it computes a new digest for whatever you pass in. Also the <code>hmac</code> function will by default return a string with the bytes in it, but you want to base64 encode the actual bytes so you need to make sure to request the raw values. Finally, a base64 string should have a multiple of 4 characters in the string. The extra padding seems to return a different value. So this should give the same value as the python code</p>

<pre><code>api_key = ""abcdefghijklmnopqrstuvwxyz123456789=""
decoded_api_key = base64Decode(api_key)
hmac_binary = hmac(decoded_api_key, ""MySpecialString"", ""sha512"", raw=TRUE)
hmac_encoded = base64Encode(hmac_binary)
print(as.character(hmac_encoded))
# [1] ""MduxNfXVkwcOtCpBWJEl96S43boYVYTtHb4waR21ARCMo6iokKuxbwEJMTkuytbrCOxvBqKCYiaZiV/AyHTEcw==""
</code></pre>
","51615297","56","<python><r><hmac>","1","2","1","2018-07-31 14:05:28","51615297","0","","","","","2018-07-31 13:22:16","","","2018-07-31 14:05:28"
"49145096","Whether the return value of HMAC is free-able or not","<p>I used below message authentication code in my C++ project:</p>

<pre><code>unsigned char *digest = HMAC(EVP_sha1(), privateKey.c_str(), strlen(privateKey.c_str()), (unsigned char*)publickey, strlen(publickey), NULL, &amp;mdLength);
</code></pre>

<p>I didn't find whether the return value (digest) is free-able or not in HMAC API definition. Would please tell me, can I free it after use?</p>
","","","56","<c++><hmac>","1","","0","2018-03-07 06:00:59","","2","","817643","","2018-03-07 06:00:59","2018-03-07 05:58:00","","",""
"58440446","Compute HMAC_SHA256 in JavaScript?","<p>I want to compute the SHA256 based HMAC for some <code>key</code> and a <code>message</code> in front-end using JavaScript. It's easily done in Python like so:</p>

<pre class=""lang-py prettyprint-override""><code>import hmac
h = hmac.new(b'key', b'message', 'sha256')
print(h.hexdigest())
</code></pre>

<p>I searched and found something in NodeJS but can't do the same thing in front-end (I mean in browser of the user), which I guess I need to bundle the required library and do the stuff but could not figure out how.</p>
","<p><code>npm i js-sha256</code> <a href=""https://www.npmjs.com/package/js-sha256"" rel=""nofollow noreferrer"">[link]</a></p>

<p>will install it on the domain of your choice, in <code>node_modules/</code> and you can link it from there.</p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>console.log(sha256.hmac('key', 'message'));</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;script src=""https://cdnjs.cloudflare.com/ajax/libs/js-sha256/0.9.0/sha256.min.js""&gt;&lt;/script&gt;</code></pre>
</div>
</div>
</p>
","58440607","55","<javascript><hash><frontend><sha256><hmac>","3","3","1","2019-10-17 21:06:11","58440607","4","","","","","2019-10-17 20:41:01","2019-10-17 21:05:38","2019-10-17 21:06:11","2019-10-17 20:53:53"
"48415666","jsSHA HMAC-512 value not match as Node.js HMAC","<p>When using Node.js crypto module</p>

<pre><code>const crypto = require('crypto');
    HMACseed = crypto.createHmac('sha512', 'a55e3e55ff89d1cfeab1c85ac4dc7517d8d3228bb41a7d86de9cdf5587126de7').update('02de498327ba9544ba3b5c3d855a56a6761737a399d099b46b2a1d69491ca64ae400000001').digest('hex');
    console.log(HMACseed)
</code></pre>

<p>result</p>

<blockquote>
  <p>08b87c15c5cc62ebcdb8cf5bf6a61cd168387fcc59db119e19ecd8deb67380dda98dd5faf7409face6ebcb187929176636f593dadbe7d7aa44a1ed59bbe0dff6</p>
</blockquote>

<p>But using <a href=""https://caligatio.github.io/jsSHA/"" rel=""nofollow noreferrer"">https://caligatio.github.io/jsSHA/</a></p>

<p>result</p>

<blockquote>
  <p>6b1312b3706844b11dd50012dd31be8d77f2f7cd9ec0624f730ee24bc4246084cbcaf10f63610cca1b4cc86e8b32a29b6c495a3b8bd28de4d3fd0b98df483530</p>
</blockquote>

<pre><code>key = 'a55e3e55ff89d1cfeab1c85ac4dc7517d8d3228bb41a7d86de9cdf5587126de7'
data = '02de498327ba9544ba3b5c3d855a56a6761737a399d099b46b2a1d69491ca64ae400000001'
</code></pre>

<p>I wonder why the jsSHA will result different value of HMAC-256.</p>
","<p>You need to using hex as input or it will regard it as text input.</p>

<pre><code>HMACseed = crypto.createHmac('sha512', Buffer.from('a55e3e55ff89d1cfeab1c85ac4dc7517d8d3228bb41a7d86de9cdf5587126de7', 'hex')).update(Buffer.from('02de498327ba9544ba3b5c3d855a56a6761737a399d099b46b2a1d69491ca64ae400000001','hex')).digest('hex');
console.log(HMACseed)
</code></pre>
","48415803","55","<node.js><hmac>","1","2","1","2018-01-24 06:55:19","48415803","3","","6438491","","2018-01-24 06:55:19","2018-01-24 05:54:46","","","2018-01-24 06:06:11"
"59381316","Spring WebClient: Automatically compute HMAC signature for body and pass it as header","<p>In my Spring Boot application, I was using <code>RestTemplate</code> to call a WS for which the body HMAC signature should be provided as HTTP header. To do this I was using a <code>ClientHttpRequestInterceptor</code>. Basically, I did:</p>

<pre><code>@Override
public ClientHttpResponse intercept(HttpRequest request, byte[] body, ClientHttpRequestExecution execution) throws IOException {
    try {
        String hmac = Hmac.calculateRFC2104HMAC(body, key);
        request.getHeaders().add(""X-Hub-Signature"", ""sha1="" + hmac);
        return execution.execute(request, body);
    }
    catch (NoSuchAlgorithmException | InvalidKeyException e) {
        throw new IOException(e);
    }
}
</code></pre>

<p>Now I want to use <code>WebClient</code> for a better integration in my reactive application. But I'm lost in this new reactive API. How can I achieve this using <code>ExchangeFilterFunction</code> or <code>BodyInserter</code>? The difficulty is to retrieve the body, to perform the signature computation and to update the request consequently.</p>

<p>Thank you for your support.</p>
","","","55","<java><spring><hmac><spring-webclient>","1","","0","2019-12-28 16:34:39","","0","","4226631","","2019-12-17 20:16:06","2019-12-17 20:00:28","","",""
"50067931","hmac authentication in vcl","<p>I am trying to authenticate URL using hamc. I can do the following to verify.My question is how do I parse the URL to extract only part of the URL excluding the hmac parameter. I tried using local variables in vcl but it threw an error. 
Any suggestions on how to extract the hmac value and URL query parameters as shown below.</p>

<pre><code>http://localhost/zzz/?q1=xxx&amp;q2=yyy&amp;hmac=hash

if (digest.hmac_md5(""key"", ""q1=xxx&amp;q2=yyy"") != ""value"")
      {
          return (synth(401, digest.hmac_md5(""key"", ""http://localhost/zzz/?q1=xxx&amp;q2=yyy"")));
      }
</code></pre>

<p>Thanks</p>
","<p>You'll want to use the <code>[querystring][1]</code> vmod. As far as I know it does not come pre-packaged, so you will need to build it but it should do exactly what you need. </p>

<p>With that you can define regexes/static values to match querystring arguments, and then filter those out or in. </p>
","50237380","54","<url><varnish><hmac><varnish-vcl>","0","0","2","2018-05-11 07:23:50","","0","","","","","2018-04-27 18:02:49","","","2018-05-08 15:34:12"
"50067931","hmac authentication in vcl","<p>I am trying to authenticate URL using hamc. I can do the following to verify.My question is how do I parse the URL to extract only part of the URL excluding the hmac parameter. I tried using local variables in vcl but it threw an error. 
Any suggestions on how to extract the hmac value and URL query parameters as shown below.</p>

<pre><code>http://localhost/zzz/?q1=xxx&amp;q2=yyy&amp;hmac=hash

if (digest.hmac_md5(""key"", ""q1=xxx&amp;q2=yyy"") != ""value"")
      {
          return (synth(401, digest.hmac_md5(""key"", ""http://localhost/zzz/?q1=xxx&amp;q2=yyy"")));
      }
</code></pre>

<p>Thanks</p>
","<p>there is no need for a external plugin in that case you can just strip out the <code>hmac=XXX</code> query string parameter, from <code>req.url</code>  and store the result in a new variable <code>req.http.url_without_hmac</code>  and <code>req.http.hmac</code> to the <code>digest.hmac_md5</code></p>

<p>see a sample test case:</p>

<pre><code>varnishtest ""Strip query parameter""

server s1 {
       rxreq
       txresp
       rxreq
       txresp

} -start

varnish v1 -vcl+backend {
    import std;

    sub vcl_recv {
      # Strip out HMAC parameter

    # get only the query string, ignore uri
    set req.http.qs = regsuball(req.url, "".*\?(.*?)$"", ""?\1"");

    # strip hmac= from the qs
    set req.http.url_without_hmac = regsuball(req.http.qs,""\?hmac=[^&amp;]+$"",""""); # strips when QS = ""?hmac=AAA""
    set req.http.url_without_hmac = regsuball(req.http.url_without_hmac,""\?hmac=[^&amp;]+&amp;"",""?""); # strips when QS = ""?hmac=AAA&amp;foo=bar""
    set req.http.url_without_hmac = regsuball(req.http.url_without_hmac,""&amp;hmac=[^&amp;]+"",""""); # strips when QS = ""?foo=bar&amp;hmac=AAA"" or QS = ""?foo=bar&amp;hmac=AAA&amp;bar=baz""

    # remove the leading ? from the url_without_hmac
    set req.http.url_without_hmac = regsuball(req.http.url_without_hmac,""^\?(.*)$"", ""\1"");

    # extract the hmac= value from the req.http.qs
    set req.http.hmac = regsuball(req.http.qs, "".*[?&amp;]hmac=([^&amp;]*).*"", ""\1"");
    # NOW USE req.http.url_without_hmac for your digest validation and req.http.hmac as the value


    }

    sub vcl_deliver {
        set resp.http.url_without_hmac = req.http.url_without_hmac;
        set resp.http.hmac = req.http.hmac;
    }
} -start

client c1 {
    txreq  -url ""/1?a=1&amp;hmac=2&amp;b=1""
    rxresp
    expect resp.http.url_without_hmac ==  ""a=1&amp;b=1""
    expect resp.http.hmac ==   ""2""


} -run


client c2 {
    txreq  -url ""/1?hmac=hello&amp;a=1&amp;b=1""
    rxresp
    expect resp.http.url_without_hmac ==  ""a=1&amp;b=1""
    expect resp.http.hmac ==  ""hello""


} -run
</code></pre>
","50287113","54","<url><varnish><hmac><varnish-vcl>","0","0","2","2018-05-11 07:23:50","","0","","","","","2018-04-27 18:02:49","","","2018-05-11 07:23:50"
"23086073","HTTP Request Authentication with HMAC standard","<p>I was looking for a rfc or some other standard to find out the HMAC signature of a HTTP Request, specially to POST/PUT where body is not empty, I only have found the generic RFC (<a href=""http://www.ietf.org/rfc/rfc2104.txt"" rel=""nofollow"">http://www.ietf.org/rfc/rfc2104.txt</a>) but not specifying the case of an HTTP.
We had a look to how other (AWS, Facebook, Twitter) have done it, but each of them have their own solutions, does anybody know the more official standard for that?</p>

<p>Thanks in advance</p>
","","","53","<md5><hmac>","2","","0","2014-04-15 14:04:40","","0","","","","","2014-04-15 14:04:40","","",""
"45833254","Recreating java hmac function in php","<p><strong>This is the have code which i am currently looking into</strong></p>

<pre><code>package com.security;
import java.util.Map;
import javax.xml.bind.DatatypeConverter;
import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.Iterator;

public class Signature {
    private static final String HMAC_SHA256 = ""HmacSHA256"";
    private static final String SECRET_KEY = ""LF8np6Lk0PvQ8yQvOnsqvC5WOnRbLOEadpZOAYd22QNdXnSKI08VXfo6Kl0yV5wx"";

    public static String sign(Map&lt;String,String&gt; params) throws InvalidKeyException, NoSuchAlgorithmException, UnsupportedEncodingException {
        return sign(buildDataToSign(params), SECRET_KEY).trim();
    }

    private static String sign(String data, String secretKey) throws InvalidKeyException, NoSuchAlgorithmException, UnsupportedEncodingException {
        SecretKeySpec secretKeySpec = new SecretKeySpec(secretKey.getBytes(), HMAC_SHA256);
        Mac mac = Mac.getInstance(HMAC_SHA256);
        mac.init(secretKeySpec);
        byte[] rawHmac = mac.doFinal(data.getBytes(""UTF-8""));
        return DatatypeConverter.printBase64Binary(rawHmac).replace(""\n"", """").trim();
    }

    private static String buildDataToSign(Map&lt;String,String&gt; params) {
        String[] signedFieldNames = String.valueOf(params.get(""signed_fields"")).split("","");
        ArrayList&lt;String&gt; dataToSign = new ArrayList&lt;String&gt;();
        for (String signedFieldName : signedFieldNames) {
            dataToSign.add(signedFieldName + ""="" + String.valueOf(params.get(signedFieldName)).trim());
        }
        return commaSeparate(dataToSign);
    }

    private static String commaSeparate(ArrayList&lt;String&gt; dataToSign) {
        StringBuilder csv = new StringBuilder();
        for (Iterator&lt;String&gt; it = dataToSign.iterator(); it.hasNext(); ) {
            csv.append(it.next());
            if (it.hasNext()) {
                csv.append("","");
            }
        }
        return csv.toString();
    }
}
</code></pre>

<p>Here i understand that <code>hmac</code> ashing mechanism is being used and it generates <code>base64</code> like string in the end.</p>

<p>I am planning to recreate the code in php which suppose to deliver the same output, can someone please explain what's actually happening here.</p>

<p>Thanks in advance.</p>

<p>At the end the above code generates a random string like:</p>

<blockquote>
  <p>gPRbQMzGGu4ShTwS1NzhzObRWLuGuxvKJuVpSpOaFZk=</p>
</blockquote>
","","","53","<java><php><hash><hmac>","1","","0","2017-08-23 08:04:16","","5","3","1336348","","2017-08-23 08:04:16","2017-08-23 07:26:57","","",""
"50872487","AWS hmac encryption discrepencies","<p>I am facing a very strange issue and have spent 3+ days on it. I am going through AWS's signing request version 4 documentation and am investigating their HMAC signing process.</p>

<p>I am using node-forge to calculate an HMAC-sha256 based upon a given string and key, using this AWS doc: <a href=""https://docs.aws.amazon.com/general/latest/gr/signature-v4-examples.html"" rel=""nofollow noreferrer"">https://docs.aws.amazon.com/general/latest/gr/signature-v4-examples.html</a></p>

<p>These are the exact same strings as the documentation encoded as the documentation says to UTF-8:</p>

<pre><code>const hash_type = 'sha256';
const hmac = forge.hmac.create();
const key = forge.util.encodeUtf8('c4afb1cc5771d871763a393e44b703571b55cc28424d1a5e86da6ed3c154a4b9');
const string = forge.util.encodeUtf8('AWS4-HMAC-SHA256\n' +
  '20150830T123600Z\n' +
  '20150830/us-east-1/iam/aws4_request\n' +
  'f536975d06c0309214f805bb90ccff089219ecd68b2577efef23edd43b7e1a59');
hmac.start('sha256', key);
hmac.update(string);
console.log('SIGNATURE: ' +  hmac.digest().toHex());
</code></pre>

<p>My function, along with every single HMAC calculator I use online give the caluclated hash as <code>fe52b221b5173b501c9863cec59554224072ca34c1c827ec5fb8a257f97637b1</code></p>

<p>Even the AWS Code provided by them for both javascript and python derived the same values and calculates the same hash as I received. </p>

<p>However, according to the documentation in their doc's, it should be:
<code>5d672d79c15b13162d9279b0855cfba6789a8edb4c82c400e06b5924a6f2b5d7</code></p>

<p>I have tried over 10+ calculators that all return the same value I received until I found 1 online calculator, only 1, that calculates the same as amazon at <a href=""https://cryptii.com/hmac"" rel=""nofollow noreferrer"">https://cryptii.com/hmac</a></p>

<p>I know HMAC is a mathematical function that is absolute, the same input will give the same output, which means that the input is different or that it is transformed along the way in a way that is abstracted from me.</p>

<p>Any tips?</p>
","","","53","<amazon-web-services><encryption><sha256><hmac>","1","","0","2018-06-15 09:16:05","","2","","","","","2018-06-15 09:16:05","","",""
"42896681","hashing 160 bit to a fixed number of integer?","<p>i want to hash an output of keyed-hash message authentication code (HMAC) to a fixed number of integer (10-12 digits) what is the best Node JS </p>
","<p>probably <a href=""https://www.npmjs.com/package/bcrypt"" rel=""nofollow noreferrer""><strong><em><code>bcrypt</code></em></strong></a> is what you are looking for.  </p>

<p>You should be able to hash it like:  </p>

<pre><code>var bcrypt = require('bcrypt');
const saltRounds = 10;
const myPlaintextPassword = 's0/\/\P4$$w0rD';
const someOtherPlaintextPassword = 'not_bacon';
</code></pre>

<p>Another one is <a href=""https://www.npmjs.com/package/bcrypt-nodejs"" rel=""nofollow noreferrer"">bcrypt-nodejs</a> and you might do something like this:  </p>

<h3>Synchronous</h3>

<pre><code>var hash = bcrypt.hashSync(""bacon"");

bcrypt.compareSync(""bacon"", hash); // true
bcrypt.compareSync(""veggies"", hash); // false
</code></pre>

<h3>Asynchronous</h3>

<pre><code>bcrypt.hash(""bacon"", null, null, function(err, hash) {
    // Store hash in your password DB.
});
</code></pre>

<p><sub><strong><em>Example code taken from the provided source.</em></strong></sub></p>
","42896788","53","<javascript><node.js><hash><hmac>","0","0","1","2017-03-20 06:02:10","","0","","","","","2017-03-20 05:55:00","","","2017-03-20 06:02:10"
"57918493","How to Validate a Xero webhook payload with HMACSHA256 python 3","<p>Based on the instructions here (<a href=""https://developer.xero.com/documentation/webhooks/configuring-your-server"" rel=""nofollow noreferrer"">https://developer.xero.com/documentation/webhooks/configuring-your-server</a>) for setting up and validating the intent to receive for the Xero webhook.</p>

<p>The computed signature should match the signature in the header for a correctly signed payload.</p>

<p>But, using python 3, the computed signature doesn't match the signature in the header in any way at all. Xero would send numerous requests to the subscribing webhook url for both correctly and incorrect. In my log, all those requests returned as 401. So, below is my test code which also proved to not match. I don't know what is missing or I what did wrong.
Don't worry about the key been show here, i have generated another key but this was the key assigned to me to use for hashing at this point.
based on their instruction, running this code should make the signature match one of the headers. But not even close at all.</p>

<pre><code>XERO_KEY = 
""lyXWmXrha5MqWWzMzuX8q7aREr/sCWyhN8qVgrW09OzaqJvzd1PYsDAmm7Au+oeR5AhlpHYalba81hrSTBeKAw==""

def create_sha256_signature(key, message):
    message = bytes(message, 'utf-8')
    return base64.b64encode(hmac.new(key.encode(), message, 
                 digestmod=hashlib.sha256).digest()).decode()

# first request header (possibly the incorrect one)
header = ""onoTrUNvGHG6dnaBv+JBJxFod/Vp0m0Dd/B6atdoKpM=""

# second request header (possibly the correct one)
header = ""onoTrUNvGHG6dnaBv+JBJxFodKVp0m0Dd/B6atdoKpM=""
payload = {
    'events':[],
    'firstEventSequence':0,
    'lastEventSequence':0,
    'entropy':
    'YSXCMKAQBJOEMGUZEPFZ'
}
payload = json.dumps(payload, separators=("","", "":"")).strip()
signature = create_sha256_signature(XERO_KEY, str(payload))
if hmac.compare_digest(header, signature):
     print(True)
     return 200
else:
     print(False)
     return 401
</code></pre>
","<p>The problem was because when I was receiving the request payload, I was using</p>

<pre><code># flask request
request.get_json()
</code></pre>

<p>this will automatically parse my request data into a json format, hence the reason why the calculated signature never matched</p>

<p>So, what I did was change the way I receive the request payload:</p>

<pre><code>request.get_data()
</code></pre>

<p>This will get the raw data. </p>
","57968152","52","<webhooks><python-3.7><sha256><hmac><xero-api>","0","0","1","2019-09-17 06:00:46","","0","","","","","2019-09-13 06:41:17","","","2019-09-17 06:00:46"
"40152358","Get hashed value from HMAC SHA256 in Swift","<p>I have been trying to find out a native hashing for <strong>HMAC</strong> with <strong>SHA256</strong>, for a specific values message and here it is :</p>

<pre><code>extension String {

    func hmac(algorithm: CryptoAlgorithm, key: String) -&gt; String {
        let str = self.cString(using: String.Encoding.utf8)
        let strLen = Int(self.lengthOfBytes(using: String.Encoding.utf8))
        let digestLen = Int(CC_SHA256_DIGEST_LENGTH)
        let result = UnsafeMutablePointer&lt;CUnsignedChar&gt;.allocate(capacity: digestLen)
        let keyStr = key.cString(using: String.Encoding.utf8)
        let keyLen = Int(key.lengthOfBytes(using: String.Encoding.utf8))

        CCHmac(CCHmacAlgorithm(kCCHmacAlgSHA256), keyStr!, keyLen, str!, strLen, result)

        let digest = stringFromResult(result: result, length: digestLen)

        result.deallocate(capacity: digestLen)

        return digest
    }


    private func stringFromResult(result: UnsafeMutablePointer&lt;CUnsignedChar&gt;, length: Int) -&gt; String {
        let hash = NSMutableString()
        for i in 0..&lt;length {
            hash.appendFormat(""%02x"", result[i])
        }
        return String(hash)
    }

}
</code></pre>

<p>Now Looking at this situation i do the hashing but how can i make a reverse function to get the hashed value using the secret key ? I don't want to use any external library only </p>

<p><code>#import &lt;CommonCrypto/CommonHMAC.h&gt;</code>.</p>
","","","52","<ios><swift><hmac>","0","","0","2016-10-20 11:27:16","","4","","5035060","","2016-10-20 11:27:16","2016-10-20 10:51:48","2016-10-20 11:05:27","",""
"45581884","HMAC API exposed via public site?","<p>What steps can I take to prevent unauthorised access to our API (if indeed any are required)?</p>

<p><strong>Background</strong></p>

<p>The diagram below illustrates a microsite we're implementing, and an HMAC API we're providing (for several purposes) which returns commercially sensitive data to authenticated consumers.  The arrows represent intended (green) and unintended (red) communication.</p>

<p><a href=""https://i.stack.imgur.com/lCxBJ.jpg"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/lCxBJ.jpg"" alt=""component diagram""></a></p>

<p>The HMAC API is intended for address autocompletion.  There is no login for the microsite.  The page has an address input.  To enable autocomplete the page makes an AJAX GET call to the controller after each keystroke.  For each AJAX GET call, the controller constructs the HMAC and makes a request to the HMAC API.</p>

<p><strong>The problem</strong></p>

<p>I can't see anything currently preventing consumption of the AJAX GET method.</p>

<p><strong>Considerations</strong></p>

<p>I've <a href=""https://stackoverflow.com/questions/35473856/asp-net-mvc-csrf-on-a-get-request"">read</a> that AnitForgeryTokens aren't useful on GET methods, but that you can get around this by turning it into a POST.  That sounds a bit ugly, but since this is only a microsite (i.e. we're throwing it away after a month or so) I'm quite prepared to put up with ugly security.</p>

<p>Seven years on from that, is that still the best way?</p>
","<blockquote>
  <p>prevent unauthorised access to a method on an unauthenticated controller</p>
</blockquote>

<p>If you don't have any authentication and authorization (<em>""unauthenticated controller""</em>) then there can be no such thing as an unauthorized access: i.e. every access is allowed. And, what does not exist cannot be prevented.</p>

<p>If you could defined what unauthorized access means in your use case you might be able to add some authorization which prevents it.</p>
","45604595","52","<asp.net-mvc><hmac><antiforgerytoken>","-1","2","1","2017-08-10 04:38:16","45604595","3","","","","","2017-08-09 04:50:06","","","2017-08-10 04:38:16"
"45048872","In PBKDF2 is INT (i) signed?","<p>Page 11 of RFC 2898 states that for U_1 = PRF (P, S || INT (i)), INT (i) is a four-octet encoding of the integer i, most significant octet first.</p>

<p>Does that mean that i is a signed value and if so what happens on overflow?</p>
","<p>Nothing says that it would be signed.  The fact that <code>dkLen</code> is capped at <code>(2^32 - 1) * hLen</code> suggests that it's an unsigned integer, and that it cannot roll over from <code>0xFFFFFFFF</code> (2^32 - 1) to <code>0x00000000</code>.</p>

<p>Of course, PBKDF2(MD5) wouldn't hit 2^31 until you've asked for 34,359,738,368 bytes.  That's an awful lot of bytes.</p>

<ul>
<li>SHA-1: 42,949,672,960</li>
<li>SHA-2-256 / SHA-3-256: 68,719,476,736</li>
<li>SHA-2-384 / SHA-3-384: 103,079,215,104</li>
<li>SHA-2-512 / SHA-3-512: 137,438,953,472</li>
</ul>

<p>Since the .NET implementation (in Rfc2898DeriveBytes) is an iterative stream it could be polled for 32GB via a (long) series of calls.  Most platforms expose PBKDF2 as a one-shot, so you'd need to give them a memory range of 32GB (or more) to identify if they had an error that far out.  So even if most platforms get the sign bit wrong... it doesn't really matter.</p>

<p>PBKDF2 is a KDF (key derivation function), so used for deriving keys.  AES-256 is 32 bytes, or 48 if you use the same PBKDF2 to generate an IV (which you really shouldn't).  Generating a private key for the ECC curve with a <a href=""http://primes.utm.edu/top20/page.php?id=27"" rel=""nofollow noreferrer"">34,093 digit prime</a> is (if I did my math right) 14,157 bytes.  Well below the 32GB mark.</p>
","45061527","51","<security><sha><hmac><integer-overflow><pbkdf2>","0","1","2","2017-07-12 15:36:15","","0","","","","","2017-07-12 05:09:40","","","2017-07-12 15:10:05"
"45048872","In PBKDF2 is INT (i) signed?","<p>Page 11 of RFC 2898 states that for U_1 = PRF (P, S || INT (i)), INT (i) is a four-octet encoding of the integer i, most significant octet first.</p>

<p>Does that mean that i is a signed value and if so what happens on overflow?</p>
","<p><code>i</code> ranges from 1 to <code>l = CEIL (dkLen / hLen)</code>, and <code>dkLen</code> and <code>hLen</code> are positive integers. Therefore, <code>i</code> is strictly positive.</p>

<p>You can, however, store <code>i</code> in a signed, 32-bit integer type without any special handling. If <code>i</code> rolls over (increments from <code>0x7FFFFFFF</code> to <code>0xF0000000</code>), it will continue to be encoded correctly, and continue to increment correctly. With two's complement encoding, bitwise results for addition, subtraction, and multiplication are the same as long as all values are treated as either signed or unsigned.</p>
","45062102","51","<security><sha><hmac><integer-overflow><pbkdf2>","0","0","2","2017-07-12 15:36:15","","0","","","","","2017-07-12 05:09:40","","","2017-07-12 15:36:15"
"21813012","Is it necessary to use single hash function for signature generation and HMAC?","<p>I am trying to figure out if we need to use single hash function across all the places in a ssh session. i.e - signature generation/verification and HMAC calculation/validation. Is it possible to use two different hash function for signature and HMAC ? I am planning to implement SHA-256 for signature generation/verification in an embedded system. But I am concerned that if I use SHA-256 for HMAC also then there will be much impact on performance considering the lesser CPU capacity of the embedded system. I am new to cryptography so I am not much aware of these stuffs. It will be great if you could please help.</p>
","","","51","<hash><signature><hmac><sha256>","1","","0","2014-02-16 15:12:53","","0","","","","","2014-02-16 15:12:53","","",""
"18292549","How to build string that needs to be hashed - API Authentication with HMAC","<p>What is the best way to combine all GET parameters and values together to form a string that needs to be hashed?? </p>
","<p>I don't know if there's a best way but there are plenty of existing uses of this in the wild. Check out <a href=""https://dev.twitter.com/docs/auth/creating-signature"" rel=""nofollow"">OAuth 1.0a</a> and <a href=""https://payswarm.com/specs/ED/http-signatures/2013-05-04/"" rel=""nofollow"">HTTP Signatures</a> for some examples.</p>
","18302903","50","<api><authentication><hash><hmac>","1","0","1","2013-08-18 19:29:59","","0","","","","","2013-08-17 19:27:31","","","2013-08-18 19:29:59"
"50984888","return hmac key in javascript","<p>From my api provider i have a code thats suposed to generate a hmac key.</p>

<pre><code>&lt;html&gt;
&lt;head&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;p id=""demo""&gt;&lt;/p&gt;
&lt;script&gt;var BuckarooHmac = (function () {
    var self = {};

    function getEncodedContent(content) {
        if (content) {
            var md5 = CryptoJS.MD5(content);
            var base64 = CryptoJS.enc.Base64.stringify(md5);
            return base64;
        }

        return content;
    }

    function getHash(websiteKey, secretKey, httpMethod, nonce, timeStamp, requestUri, content) {
        var encodedContent = getEncodedContent(content);

        var rawData = websiteKey + httpMethod + requestUri + timeStamp + nonce + encodedContent;
        var hash = CryptoJS.HmacSHA256(rawData, secretKey);
        var hashInBase64 = CryptoJS.enc.Base64.stringify(hash);

        return hashInBase64;
    }

    function getTimeStamp() {
        return Math.floor((new Date).getTime() / 1000);
    }

    function getNonce() {
        var text = """";
        var possible = ""ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"";
        for (var i = 0; i &lt; 16; i++) {
            text += possible.charAt(Math.floor(Math.random() * possible.length));
        }
        return text;
    }

    self.GetAuthHeader = function (requestUri, websiteKey, secretKey, content, httpMethod) {
        var nonce = getNonce();
        var timeStamp = getTimeStamp();
        content = content ? content : """";
        var url = encodeURIComponent(requestUri).toLowerCase();
        return ""hmac "" + websiteKey + "":"" + getHash(websiteKey, secretKey, httpMethod, nonce, timeStamp, url, content) + "":"" + nonce + "":"" + timeStamp;
    }
    return self;
     document.getElementById(""demo"").innerHTML = self.GetAuthHeader();
}());

&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p>I'm not used to javascript. I'm trying to figure out how to print the generated key on my screen. I tried this :</p>

<pre><code>document.getElementById(""demo"").innerHTML = self.GetAuthHeader();
</code></pre>

<p>I know i must be doing this wrong. I just need a push in the right direction now. Anyone that could help me ? </p>
","<p>You’re trying to perform an action <em>after</em> the function’s return statement.  That code will never be reached because the function has returned.</p>

<p>Instead, do it before:</p>

<pre><code>document.getElementById(""demo"").innerHTML = self.GetAuthHeader();
return self;
</code></pre>

<p>Or, even better, if this code is provided by a vendor then you probably shouldn’t edit it.  Updates would remove your edits, and vendor support would be compromised.  Instead, perform your action outside the code entirely:</p>

<pre><code>var BuckarooHmac = (function () {
    // vendor code
}());

document.getElementById(""demo"").innerHTML = BuckarooHmac.GetAuthHeader();
</code></pre>
","50985999","50","<javascript><hmac>","0","1","1","2018-06-22 11:15:28","50985999","6","","8043614","","2018-06-22 10:25:59","2018-06-22 09:28:53","","2018-06-22 11:15:28","2018-06-22 10:31:45"
"56690865","HMAC Authorisation for JavaScript (Vue) Application - where to store the private key?","<p>I am implementing HMAC Authorisation for a Single-Page Vue App. The basic workflow is as follows:</p>

<ol>
<li>User sends a request with username &amp; password</li>
<li>Server checks the credentials, and on successful login returns the public key &amp; private key</li>
<li>For any further requests, client generates an HMAC using the request URI, data and the private key. The server generates a hash using the same data to see if they match.</li>
</ol>

<p>My question is what is the most secure way to store the private key for the client? <code>localStorage</code> seems to be unsafe, and the Secure HTTPS-Only Cookies would work, but the JS has to have access to it to generate the HMAC for each request? What would be the best workaround in this situation?</p>
","","","50","<javascript><vue.js><hmac>","0","","0","2019-06-20 17:10:25","","6","","","","","2019-06-20 17:10:25","","",""
"58479458","How to solve HMAC Validation Failed in Shopify App?","<p>I followed exactly the code from the shopify docs (<a href=""https://help.shopify.com/en/api/tutorials/build-a-shopify-app-with-node-and-express#the-callback-route"" rel=""nofollow noreferrer"">Shopify app with Node and Express</a>) for integrating app with express but it seems that I still hitting HMAC Validation Failed.</p>

<pre><code>const map = Object.assign({}, req.query);
            delete map['signature'];
            delete map['hmac'];
            const message = querystring.stringify(map);
            const providedHmac = Buffer.from(hmac, 'utf-8');
            const generatedHash = Buffer.from(
                crypto
                    .createHmac('sha256',this.configService.get('SHOPIFY_API_SECRET'))
                    .update(message)
                    .digest('hex'),
                'utf-8'
            );
            let hashEquals = false;
            // timingSafeEqual will prevent any timing attacks. Arguments must be buffers
            try {
                hashEquals = crypto.timingSafeEqual(generatedHash, providedHmac)
            // timingSafeEqual will return an error if the input buffers are not the same length.
            } catch (e) {
                hashEquals = false;
            };

            if (!hashEquals) {
                return res.status(400).send('HMAC validation failed');
            }
</code></pre>

<p>I""m expecting the code above to work and do not return the error.</p>
","","","50","<node.js><express><shopify><hmac><shopify-app>","1","","0","2019-10-21 05:26:24","","0","","8673456","","2019-10-21 05:26:24","2019-10-21 03:31:03","","",""
"58191951","Use HMAC with OData Connected Service","<p>So we want to use a webapi that is build in ASP.net and uses OData as protocol. I did some homework and saw that Microsoft has a very good documenten <code>OData Connected Service</code>. The only thing I can't find is that the webapi we want to use has a HMAC for security. I cannot find an example where the <code>OData Connected Service</code> is used with HMAC. Could someone explain if and how HMAC is possible with the <code>OData Connected Service</code>?</p>
","<p>Probably the answer depends on the specific implementation of the HMAC on the server side.</p>

<p>If server receives all the data included in the request along with the <strong>Authorization</strong> header and extracts the values (<em>APP Id</em>, <em>Signature</em>, <em>Nonce</em> and <em>Request Time stamp</em>) from the <strong>Authorization</strong> header, then client should:</p>

<ul>
<li><p>Build a string by combining all the data that will be sent, this string contains the following parameters (<em>APP Id</em>, <em>HTTP method</em>, <em>request URI</em>, <em>request time stamp</em>, <em>nonce</em>, and <em>Base 64 string representation of the request pay load</em>). </p></li>
<li><p>The signature will be sent in the <strong>Authorization</strong> header using a custom scheme such as ”amx”. The data in the Authorization header will contain the <em>APP Id</em>, <em>request time stamp</em>, and <em>nonce</em> separated by colon ‘:’. The format for the Authorization header will be like: <strong>[Authorization: amx APPId:Signature:Nonce:Timestamp]</strong>.</p></li>
<li><p>Client send the request as usual along with the generated data in the <strong>Authorization</strong> header (just use <a href=""https://docs.microsoft.com/en-us/odata/client/using-hooks"" rel=""nofollow noreferrer"">client hooks</a> or <a href=""https://docs.microsoft.com/ru-ru/odata/client/using-httpclient"" rel=""nofollow noreferrer"">httpclient</a>).</p></li>
</ul>

<p>Example (after generating client code):</p>

<pre class=""lang-cs prettyprint-override""><code>private string APPId = ""65d3a4f0-0239-404c-8394-21b94ff50604"";
private string APIKey = ""WLUEWeL3so2hdHhHM5ZYnvzsOUBzSGH4+T3EgrQ91KI="";

public async Task&lt;IEnumerable&lt;string&gt;&gt; TestODataHMAC()
{
    // add there your OData Uri
    var container = new DefaultContainer(new Uri(""https://services.odata.org/V4/(S(qc322lduoxrqt13nhydbdcvx))/TripPinServiceRW/"")); 
    container.Configurations.RequestPipeline.OnMessageCreating = (args) =&gt;
    {
        var request = new HttpWebRequestMessage(args);

        // Get the Request URI
        string requestUri = HttpUtility.UrlEncode(request.Url.AbsoluteUri.ToLower());

        // Calculate UNIX time
        var epochStart = new DateTime(1970, 01, 01, 0, 0, 0, 0, DateTimeKind.Utc);
        var timeSpan = DateTime.UtcNow - epochStart;
        var requestTimeStamp = Convert.ToUInt64(timeSpan.TotalSeconds).ToString();

        // Create the random nonce for each request
        var nonce = Guid.NewGuid().ToString();

        // Creating the raw signature string by combinging
        // APPId, request Http Method, request Uri, request TimeStamp, nonce
        var signatureRawData = string.Format(""{0}{1}{2}{3}{4}"", APPId, request.Method, requestUri, requestTimeStamp, nonce);

        // Converting the APIKey into byte array
        var secretKeyByteArray = Convert.FromBase64String(APIKey);

        // Converting the signatureRawData into byte array
        var signature = Encoding.UTF8.GetBytes(signatureRawData);

        // Generate the hmac signature and set it in the Authorization header
        using (HMACSHA256 hmac = new HMACSHA256(secretKeyByteArray))
        {
            var signatureBytes = hmac.ComputeHash(signature);
            var requestSignatureBase64String = Convert.ToBase64String(signatureBytes);

            //Setting the values in the Authorization header using custom scheme (hmacauth)
            request.SetHeader(""Authorization"", string.Format(""hmacauth {0}:{1}:{2}:{3}"", APPId, requestSignatureBase64String, nonce, requestTimeStamp));
        }

        return request;
    };

    // add there your OData method call 
    var nquery = container.People.Where(p =&gt; p.Gender == PersonGender.Female).Take(10) as DataServiceQuery&lt;Person&gt;;
    var response = await nquery?.ExecuteAsync();
    return (response as QueryOperationResponse&lt;Person&gt;).Select(p =&gt; p.FirstName).ToArray();
}
</code></pre>
","58372904","49","<wpf><oauth><odata><hmac><odata-connected-service>","0","1","1","2019-10-14 08:35:29","","0","","4847008","","2019-10-03 07:58:29","2019-10-01 20:37:43","","","2019-10-14 08:35:29"
"56599332","Converting hex to ByteString in Swift","<p>We are trying to connect to <a href=""http://periodic.is/api"" rel=""nofollow noreferrer"">Periodic's API</a> using Swift 5. In order to do that, part of the process is encoding a concatenated string in HMAC SHA-256. In our code, we accomplish this by the following code:</p>

<pre><code>let hmac = premac.digest(.sha256, key: ""API KEY"")
</code></pre>

<p>Which is using the <a href=""https://github.com/jernejstrasner/SwiftCrypto"" rel=""nofollow noreferrer"">SwiftCrypto</a> library to accomplish this. According to Periodic's CTO, we are getting close but the issue is that this function's output is giving us a HEX version when we really need the bytestring level. </p>

<p>We are unsure how to proceed. </p>
","","","49","<swift><sha256><hmac>","1","","0","2019-06-14 14:08:03","","1","","","","","2019-06-14 13:35:39","","",""
"51062245","AIX Openssl dgst hmac result differ","<p>After a long search and tries, i m asking your help.</p>

<p>I'm trying to figure out why there is a different result between AIX environnement and other Linux environnement (CentOS for me) on executing the below command from a shell:</p>

<pre><code>echo -n 37f3173afe3d73698a0d21e88f92gg38ABCDEFGINGRTSA221987327123test1529947146 | openssl dgst -sha1 -hmac 17fd3326gg375316228d18b55600848f
</code></pre>

<p>the result on a Centos 6 which is the attempted one is </p>

<blockquote>
  <p>7f3bc86e4193c8809de24ba66821c724f85bb1e8</p>
</blockquote>

<p>the result on AIX 7.1 is </p>

<blockquote>
  <p>463eb074f3de44cb1b863153df74e7eb9c1d3b56</p>
</blockquote>

<p>i don't know if it's relevant but if i remove ""-n"" from the echo on both environnements, the result is matching but obviously both false.</p>

<p>What did i miss?</p>

<p>Please, help me to figure it out this headache situation.</p>
","<p>Sadly, <code>echo</code> isn't standardized, or rather it's standardized form is <code>printf</code>:</p>

<pre><code>ksh@aix$ printf '%s' 37f3173afe3d73698a0d21e88f92gg38ABCDEFGINGRTSA221987327123test1529947146 |
         openssl dgst -sha1 -hmac 17fd3326gg375316228d18b55600848f

(stdin)= 7f3bc86e4193c8809de24ba66821c724f85bb1e8
</code></pre>
","51066266","48","<linux><openssl><sha1><aix><hmac>","-1","1","1","2018-06-27 15:13:29","51066266","1","","","","","2018-06-27 11:58:39","","","2018-06-27 15:13:29"
"55359013","2-step authentication and authorization","<p>Our current RESTFul api has a 2-step process of authenticating and authorizing a Request:</p>

<p>1) We use JwT bearer token authentication (integrated with Identityserver 3) and we have implemented custom authorization using the database. All this over Https.</p>

<p>2) Next, we also have an IP address check, where we check the IP address of the incoming request and match it against a list of whitelisted IP addresses that we maintain.</p>

<p>Now, we are trying to get rid of the IP address way of doing the second level check and replace it with another way.</p>

<p>MY question is: Is HMAC a good candidate for that second level check? I am kind of hesitating as we already have the  token authentication in place and so, was not sure if HMAC way of second level check will add any value to this, as a second level check. Also, was not sure how we can send both a token as well as a HMAC string as part of an Authentication header. </p>

<p>Can you also please let me know what are some of the good substitutes for IP address validation,  as a second level check when we build a RESTful web api.</p>

<p>Thanks in advance!</p>

<p>-Ramp</p>
","","","47","<authentication><asp.net-web-api2><authorization><identityserver3><hmac>","0","","0","2019-03-26 14:00:01","","5","","","","","2019-03-26 14:00:01","","",""
"58489662","Authenticating API Request outside of Postman using Python","<p>I am using an API for a portfolio management software and have been provided some documentation on how to implement it through Postman. The results come clean through Postman, but when I try to replicate the script through Python, I am unable to authenticate. I am not well versed in any other language besides Python and I am no API expert (especially when it comes to authentication). I was hoping that someone might be able to look through this code and see if anything seems incorrect with respect to creating a unique signature. Or, if anyone has had experience with creating an HMAC signature using the python requests structure.</p>

<pre><code>import requests
import uuid
import time
import hmac
import base64
import hashlib
import math

url = ""url""

payload = ""{\n\t\""firm\"": \""XXXXXXXX\"",\n\t\""id\"": \""#######\"",\n\t\""data\"": {\n\t\t\""tracking_preference\"": 2\n\t} \n}\n""

apikey = 'apikey'

uuid = str(uuid.uuid4())
ts = math.floor(time.time())
timestamp = str(ts)

signature = timestamp+uuid

#signature_bytes = signature.encode('UTF8')
#secret_bytes = base64.standard_b64decode(apikey)

signature_bytes = bytes(signature, 'UTF8')
secret_bytes = bytes(apikey, 'UTF8')

signature_hash = hmac.new(secret_bytes, signature_bytes, hashlib.sha256).digest()
hmac = base64.b64encode(signature_hash).decode()


headers = {
    'X-SL-UUID': uuid,
    'X-SL-Timestamp': timestamp,
    'X-SL-HMAC': hmac,
    'Content-Type': ""application/json"",
    'User-Agent': ""PostmanRuntime/7.18.0"",
    'Accept': ""*/*"",
    'Cache-Control': ""no-cache"",
    'Postman-Token': ""unique token"",
    'Host': ""xxxxxx-xxx.smartleaf.com"",
    'Accept-Encoding': ""gzip, deflate"",
    'Content-Length': ""89"",
    'Connection': ""keep-alive"",
    'cache-control': ""no-cache""
    }

response = requests.request(""POST"", url, data=payload, headers=headers)

print(response.text)
</code></pre>

<p>Anything with ""XXX"" or ""###"" is information I have blurred out. Thanks in advance!</p>

<p>Here is the pre-request script on Postman using JS:</p>

<pre><code>var apikey = '##########';

var uuidlib = require('uuid');
var uuid = uuidlib.v4();

var timestamp = Math.floor(Date.now() / 1000).toString();

var hash = CryptoJS.HmacSHA256(timestamp.concat(uuid), apikey);

postman.setEnvironmentVariable('timestamp', timestamp);
postman.setEnvironmentVariable('uuid', uuid);
postman.setEnvironmentVariable('hmac', hash);
</code></pre>
","<p>directly translating that Javascript code results in:</p>

<pre><code>import hmac
import hashlib
import time
import uuid
import requests

apikey = b'##########'
url = 'https://xxxxxx-xxx.smartleaf.com/'
payload = {'firm': 'XXXXXXXX', 'id': '#######', 'data': {'tracking_preference': 2}}

reqid = str(uuid.uuid4())
reqts = str(int(time.time()))

key = hmac.new(apikey, f'{reqts}{reqid}'.encode('ascii'), hashlib.sha256).hexdigest()

headers = {
    'X-SL-UUID': reqid,
    'X-SL-Timestamp': reqts,
    'X-SL-HMAC': key,
}

response = requests.post(url, json=payload, headers=headers)
</code></pre>

<p>the main this is you were encoding the digest in base64 rather than hexadecimal</p>

<p>obviously I can't test this, but hopefully it's about right</p>
","58494234","46","<python><api><python-requests><postman><hmac>","0","1","1","2019-10-21 21:15:53","58494234","8","","9905201","","2019-10-21 16:43:29","2019-10-21 15:37:52","","","2019-10-21 21:15:53"
"26070685","Order of args to an HMAC?","<p>If I send the following response more than once to an untrusted party:</p>

<pre><code>{c, v, HMAC(c + v)}
</code></pre>

<p>where c is the same value from response to response.<br />
where v varies from response to response.<br />
where + is a concatenation.</p>

<p>Does having the constant as the start of the HMAC input ""weaken"" the HMAC?</p>

<p>Is it safer to compute the HMAC with the varying argument first:</p>

<pre><code>{c, v, HMAC(v + c)}
</code></pre>

<p>or perhaps doesn't matter?</p>
","<p>It doesn't matter. HMAC is designed specifically to address prefix attacks, among others.</p>
","26070726","46","<encryption><hmac><trusted-vs-untrusted>","0","0","1","2014-09-27 02:36:09","26070726","1","","","","","2014-09-27 02:28:54","","","2014-09-27 02:36:09"
"30770906","I forgot my AmazonAWS secret key, but I have a couple HMAC signed requests. How can I","<p>The signing function is as follows, </p>

<pre><code>$sig = base64_encode(hash_hmac('sha256', ""{$method}\n{$server}\n{$uri}\n{$query_string}"", MY_PRIVATE_KEY, true));
$signature = str_replace(""%7E"", ""~"", rawurlencode($sig));
</code></pre>

<p>How can I deduce MY_PRIVATE_KEY, when I have all these parts<br>
<code>{$method}\n{$server}\n{$uri}\n{$query_string}</code> and <code>$signature</code>, if possible at all?</p>
","<p>You can't.*</p>

<p><code>*</code> except with massive pools of servers to run a cracking operation. As <a href=""http://www.quora.com/How-long-does-it-take-to-brute-force-a-SHA-256-password-with-a-Mac-Pro-and-how-long-with-a-MacBook-Pro-theoretically"" rel=""nofollow"">this quora answer states when talking about SHA256</a>, ""If this is the case, your MacBook Pro will have dissipated into nothingness as part of the heat death of the universe before it finishes cracking that password"".</p>
","30771425","46","<php><amazon-web-services><hmac><hmacsha1>","-1","3","1","2015-06-11 04:25:50","30771425","2","1","1415724","","2015-06-11 03:16:43","2015-06-11 03:11:29","","2015-06-11 04:25:50","2015-06-11 04:10:24"
"31760965","How to correctly convert TAG value to the right format so that to Verify HMAC?","<p>I'm working on HMAC generation and verifying to check data integrity. I can correctly generate the MAC value but when sending it through socket to another program for verification, I faced with formatting mismatch. I appreciate your support. Thanks.</p>

<pre><code>unsigned char* MAC(unsigned char* key,unsigned char* message)  
{
    unsigned char* result;
    unsigned int result_len = 32;  
    int i;

    result = (unsigned char*) malloc(sizeof(char) * result_len);
    result = HMAC(EVP_sha256 (), key , strlen (key), message , strlen(message) , NULL, NULL);

return result;
} 

int verifyMAC(unsigned char* key,unsigned char* message, unsigned char* receivedTag)
{
printf(""\n\n ==================== MAC Verification ==================\n\n"");
    unsigned char* newHash; // newly generated hash value
    unsigned int newHash_len = 32;  
    int  i,flag=0;

    newHash = (unsigned char*) malloc(sizeof(char) * newHash_len);
newHash = HMAC(EVP_sha256 (), key , strlen (key), message , strlen(message) , NULL, NULL);

for (i=0; i!=newHash_len; i++)
    {
            if (receivedTag[i]!=newHash[i])
            {
                    printf(""DATA MISMATCH: Found %02X instead of %02X at index %d!\n"", newHash[i], receivedTag[i], i);
                    break;
            }
    }
    if (i==newHash_len)
    {
            printf(""MAC verified!\n"");
    flag = 1;
    } 

return flag;
}

int main(int argc, char *argv[])
{

unsigned char* key = ""1234567890"";
unsigned char* message = (unsigned char*) ""hello world"";
  ....
}
</code></pre>

<p>Console result:<br>
Hashed data:  E4  5F  60  72  61  7C  CE  5E  06  A9  5B  E4  81  C4  33  51  02  3D  99  23  35  99  EA  C9  FD  AF  FC  95  81  42  62  9A </p>

<p>==================== MAC Verification ==================</p>

<p>DATA MISMATCH: Found E4 instead of 65 at index 0!
ERROR: data is modified</p>
","<p>I thought this problem was somewhat interesting so I went through the trouble to recreate the scenario. Maybe this is not even right. But a simple case of what I thought the problem is:</p>

<pre><code>void main(int argc, char *argv[])
{
    //the original hash
    unsigned char newHash[] = {0xE4, 0x5F, 0x60, 0x72, 0x61, 0x7C, 0xCE, 0x5E, 0x06, 0xA9, 0x5B, 0xE4, 0x81, 0xC4, 0x33, 0x51, 
        0x02, 0x3D, 0x99, 0x23, 0x35, 0x99, 0xEA, 0xC9, 0xFD, 0xAF, 0xFC, 0x95, 0x81, 0x42, 0x62, 0x9A};
    //what I think is recieved from the socket
    unsigned char* receivedTag = ""e45f6072617cce5e06a95be481c43351023d99233599eac9fdaffc958142629a"";

    for (int i=0; i!=32; i++)
    {
            if (receivedTag[i]!=newHash[i])
            {
                    printf(""DATA MISMATCH: Found %02X instead of %02X at index %d!\n"", newHash[i], receivedTag[i], i);
                    break;
            }
    }
    return;
}
</code></pre>

<p>and the output was</p>

<pre><code>DATA MISMATCH: Found E4 instead of 65 at index 0!
</code></pre>

<p>So, I thought the solution would be to just convert the Hex array to string just like it was received from the socket.</p>

<p>Maybe this is not the most elegant of ways to do things. But a solution None the less.</p>

<pre><code>char* hexStringToCharString(unsigned char hash[], int length);
void main(int argc, char *argv[])
{
    //the original hash
    unsigned char newHash[] = {0xE4, 0x5F, 0x60, 0x72, 0x61, 0x7C, 0xCE, 0x5E, 0x06, 0xA9, 0x5B, 0xE4, 0x81, 0xC4, 0x33, 0x51, 
        0x02, 0x3D, 0x99, 0x23, 0x35, 0x99, 0xEA, 0xC9, 0xFD, 0xAF, 0xFC, 0x95, 0x81, 0x42, 0x62, 0x9A};
    //what I think is recieved from the socket
    unsigned char* receivedTag = ""e45f6072617cce5e06a95be481c43351023d99233599eac9fdaffc958142629a"";

    char *newString = hexStringToCharString(newHash, 32);

    for (int i=0; i!=strlen(newString); i++)
    {
            if (receivedTag[i]!=newString[i])
            {
                    printf(""DATA MISMATCH: Found %02X instead of %02X at index %d!\n"", newHash[i], receivedTag[i], i);
                    break;
            }
    }
    free(newString);

    printf(""Yay\n"");
    return;
}

char* hexStringToCharString(unsigned char hash[], int length){

    char temp[3];
    //need length*2 characters which is 64 plus one for null!
    char *theString = (char *)malloc(sizeof(char)*((length*2)+1));
    strcpy(theString, """");
    for(int i=0;i&lt;length;i++){
        sprintf(temp, ""%02x"", hash[i]);
        strcat(theString, temp);
    }
    return theString;

}
</code></pre>

<p>The output in this case</p>

<pre><code>Yay
</code></pre>

<p>So, Maybe this is entirely wrong. But if you find this solution needs editing then comment below.</p>
","31774012","45","<c><hex><hmac><sha256><hmacsha1>","0","1","1","2015-08-02 16:29:06","31774012","2","","","","","2015-08-01 10:45:04","","","2015-08-02 16:29:06"
"51805741","AWS Signature Version 2 Example not reproducible","<p>Like the guy in this question (<a href=""https://stackoverflow.com/questions/41683711/aws-signature-version-2-cant-reproduce-signature-from-example"">AWS Signature Version 2 - can&#39;t reproduce signature from example</a>) I can't run the example of AWS Signature Version 2 (<a href=""https://docs.aws.amazon.com/general/latest/gr/signature-version-2.html"" rel=""nofollow noreferrer"">https://docs.aws.amazon.com/general/latest/gr/signature-version-2.html</a>).</p>

<p>We have the string:</p>

<pre><code>GET\nelasticmapreduce.amazonaws.com\n/\nAWSAccessKeyId=AKIAIOSFODNN7EXAMPLE&amp;Action=DescribeJobFlows&amp;SignatureMethod=HmacSHA256&amp;SignatureVersion=2&amp;Timestamp=2011-10-03T15%3A19%3A30&amp;Version=2009-03-31
</code></pre>

<p>and the sample secret key</p>

<pre><code>wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY
</code></pre>

<p>To be independent of any programming language, lets take an online tool for the hash, which is calculated with HmacSHA256: <a href=""https://www.liavaag.org/English/SHA-Generator/HMAC/"" rel=""nofollow noreferrer"">https://www.liavaag.org/English/SHA-Generator/HMAC/</a></p>

<p>But I get the following hash value:</p>

<pre><code>xgbYI2xegVYMVTvnhoqc8/opbN0v/5Pn+8i9usAQAjk=
</code></pre>

<p>which is sadly not the expected value (not URL-encoded here):</p>

<pre><code>i91nKc4PWAt0JJIdXwz9HxZCJDdiy6cf/Mj6vPxyYIs=
</code></pre>

<p>What did I do wrong? Why is my calculation of the hash value not correct? Is the initial string correct? If you manage to get the right result with the online tool, please let me know how it was done.</p>
","<p><strong>TLDR: It's the newlines</strong></p>

<p>Although some tools and programming languages, particularly those based on C or originating on Unix where C was heavily used, treat <code>\n</code> as a notation or representation for newline, that webpage does not. If I enter the string from your Q in the webpage's 'text' mode, it computes the HMAC of a value containing a backslash and a lowercase letter 'en', not a newline as required by the AWS spec.</p>

<p>If I enter the correct input (containing newlines) in hex as</p>

<pre><code>4745540a656c61737469636d61707265647563652e616d617a6f6e6177732e636f6d0a2f0a4157534163636573734b657949643d414b4941494f53464f444e4e374558414d504c4526416374696f6e3d44657363726962654a6f62466c6f7773265369676e61747572654d6574686f643d486d6163534841323536265369676e617475726556657273696f6e3d322654696d657374616d703d323031312d31302d3033543135253341313925334133302656657273696f6e3d323030392d30332d3331
</code></pre>

<p>or in base64 as </p>

<pre><code>R0VUCmVsYXN0aWNtYXByZWR1Y2UuYW1hem9uYXdzLmNvbQovCkFXU0FjY2Vzc0tleUlkPUFLSUFJT1NGT0ROTjdFWEFNUExFJkFjdGlvbj1EZXNjcmliZUpvYkZsb3dzJlNpZ25hdHVyZU1ldGhvZD1IbWFjU0hBMjU2JlNpZ25hdHVyZVZlcnNpb249MiZUaW1lc3RhbXA9MjAxMS0xMC0wM1QxNSUzQTE5JTNBMzAmVmVyc2lvbj0yMDA5LTAzLTMx
</code></pre>

<p>then I get the correct result (and you should too). </p>
","51806879","45","<amazon-web-services><hmac>","0","3","1","2018-08-12 07:57:25","51806879","0","","","","","2018-08-12 04:40:29","","","2018-08-12 07:57:25"
"43818000","How rewrite CCHmac in iOS Swift 3 from Objective C?","<p>I want to convert this code from Objective C to Swift 3 :</p>

<pre><code>const char *cKey  = [keyStr cStringUsingEncoding:NSISOLatin1StringEncoding];
const char *cData = [mixStr cStringUsingEncoding:NSASCIIStringEncoding];
unsigned char cHMAC[CC_SHA256_DIGEST_LENGTH];
CCHmac(kCCHmacAlgSHA256, cKey, strlen(cKey), cData, strlen(cData), cHMAC);
NSMutableString *mac = [NSMutableString string];
for (int i=0; i&lt;sizeof cHMAC; i++){
    [mac appendFormat:@""%02hhx"", cHMAC[i]];
}  
</code></pre>

<p>So i write this but output in Objective C has 64 count and in my Swift code has 44 count.Therefor i think my swift code is wrong:  </p>

<pre><code>let cKey = encryptedStrKEYDataString.cString(using: String.Encoding.isoLatin1)
let cData = mix.cString(using: String.Encoding.isoLatin1)
let algorithm = CCHmacAlgorithm(kCCHmacAlgSHA256)
let size = Int(CC_SHA256_DIGEST_LENGTH)
var result = [CUnsignedChar](repeating: 0, count: size )
CCHmac(algorithm, cKey!, Int(strlen(cKey!)), cData!, Int(strlen(cData!)), &amp;result)
let hmacData:NSData = NSData(bytes: result, length: size)
let hmacBase64 = hmacData.base64EncodedString(options: [.lineLength64Characters])
</code></pre>
","","","45","<ios><objective-c><swift><sha256><hmac>","0","","0","2017-05-06 08:06:27","","5","","3319132","","2017-05-06 08:06:27","2017-05-06 07:40:10","2017-05-06 07:50:40","",""
"24615602","Is there any reason not to just generate a random authentication token?","<p>I'm developing a web application, and I'm trying to wrap my head around the best authentication system to use.  Basically, I want the client to send my server a username and password, and I want the server to respond by giving the client a token that can be used in lieu of a password from that point forward.</p>

<p>I've looked into this a little and a recommendation I keep seeing is to use an HMAC with a secret key known only to the server.  I see the benefit of this method, but it still seems to me that this isn't ideal, since as far as I am able to tell it cannot be expired.  </p>

<p>I can add extra security by adding the ip address to the string used for creating/verifying the hmac, I believe, but I'm still not sure if this is the best way.</p>

<p>Is there any reason not to just have my authentication token simply be generated with something like openssl_random_pseudo_bytes() and stored in my database along with an ip address and username?  Then I can just send the user that and verify it against what's in the database.  It also allows me to easily expire or log out the user.</p>
","<p>If you have a secret key known only to the server it can be expired any time you want?  Just change the secret key (keeping a history for expiration tracking purposes) and all the old tokens should be invalidated.</p>

<p>If that is the rotue you go, I suggest using a different secret for each user, this allows you to revoke specific user tokens at will.</p>
","24615635","45","<php><authentication><hmac>","0","0","1","2014-07-07 16:43:37","","1","","","","","2014-07-07 16:41:26","","","2014-07-07 16:43:37"
"58647844","DocuSign: How to receive the signature in the header?","<p>I'm trying to enable HMAC in DocuSing. I did follow this <a href=""https://developers.docusign.com/esign-rest-api/guides/connect-hmac#setting-up-hmac-security-with-your-app"" rel=""nofollow noreferrer"">tutorial</a>, which seams to be updated since the UI in the admin changed, and the documentation does not reflect reality anymore. This is what I have done to enable HMAC:</p>

<ol>
<li>Log-In</li>
<li>Click on my avatar </li>
<li>Click <code>Go To Admin</code></li>
<li>Scrolled down to the section <code>INTEGRATIONS</code> in the left side of the menu</li>
<li>Clicked <code>Connect</code></li>
<li>Clicked <code>Add Configuration</code>

<ol>
<li>I named the configuration</li>
<li>Added the URL to my endpoint</li>
<li>In the <code>Integration and Security Settings</code> I selected <code>Include HMAC Signature - Recommended - Use a hash to verify message authenticity.</code></li>
</ol></li>
<li>Clicked the <code>Save</code> button</li>
</ol>

<p>To receive Webhook messages from DocuSing I'm following this <a href=""https://developers.docusign.com/esign-rest-api/code-examples/webhook-status"" rel=""nofollow noreferrer"">method</a>. But I still don't get the signature in the header. </p>

<p>Since the documentation is outdate I might have missed some crucial setting that is needed to enable the signing off of the Webhook. </p>

<p>I hope someone cane point to my mistake. </p>
","<p>You are using two different things and mixing them.</p>

<p>The first thing you did was a global connect configuration for the entire account.</p>

<p>The second is for a specific envelope, and it overrides the global connect configuration.</p>

<p>You actually don't need to do that part. Once you have a global connect configuration - all envelopes in this account would be impacted and if you added HMAC - it would be applied to that.
Try to remove this code and just send the envelope regularly and see if you get the HMAC header.</p>
","58648947","44","<docusignapi><webhooks><hmac>","0","1","1","2019-10-31 17:59:11","58648947","0","","","","","2019-10-31 16:43:12","","","2019-10-31 17:59:11"
"57789059","How to post a hmac signed request using python and requests?","<p>I'm trying to follow some instructions which don't quite make sense to my python head. </p>

<p>I'm trying to send a POST request for a cryptocurrency API called 3commas:
<a href=""https://github.com/3commas-io/3commas-official-api-docs"" rel=""nofollow noreferrer"">https://github.com/3commas-io/3commas-official-api-docs</a></p>

<p>They also sent me a document at this pastebin:
<a href=""https://pastebin.com/zFTfwFRG"" rel=""nofollow noreferrer"">https://pastebin.com/zFTfwFRG</a></p>

<pre><code>def send_to_threecomma(signal):
    three_comma_signal = {'marketplace_item_id': '100',
                          'pair': 'BTC_ETH',
                          'exchange': 'binance',
                          'direction': 'long',
                          'data_param': time.time(),
                          }
    request = requests.Request('POST', 'https://3commas.io/signals/v1/publish_bot_signal',
                               data=three_comma_signal)
    prepped = request.prepare()
    sign = hmac.new(
        b'A STRING OF MY SECRET API KEY',
        prepped.body.encode('utf-8'),
        hashlib.sha512)

    prepped.body += '&amp;sign={}'.format(sign.hexdigest())

    with requests.Session() as session:
        response = session.send(prepped)
</code></pre>

<p>I'm not quite sure how to put the 'sign' back into the request body once I've made the signature, nor am I sure of the exact format of the string which the hmac should check against?</p>
","","","43","<python><python-requests><hmac><hashlib>","0","","0","2019-09-04 13:04:42","","0","","","","","2019-09-04 13:04:42","","",""
"59439745","syntax for generating a HMAC-SHA256 Hash in Rust","<p>I have an api that requires me to provide a HMAC-SHA256 hash of some variables.</p>

<p>I have the method for javascript and trying to replicate it in Rust:</p>

<pre><code>signature = HMAC-SHA256(client_id + current_time, secret).toUpperCase()
</code></pre>

<p>I've been trying to use HMAC and SHA2 crates to do this (<a href=""https://docs.rs/hmac/0.3.1/hmac/"" rel=""nofollow noreferrer"">https://docs.rs/hmac/0.3.1/hmac/</a>) but having trouble. Would anyone have any tips on syntax I should use to replicate and create a 'signature' hash in rust?</p>

<p>Here's the <a href=""https://gist.github.com/e9c731ed38a3262bd89dd198a0daa732"" rel=""nofollow noreferrer"">gist</a> for what I've tried.
And here's the <a href=""https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=da973ed89fe994afe01f69559f6ce436"" rel=""nofollow noreferrer"">playground</a> link.</p>

<p>I'm getting a 'missmatched' types error and it is telling me that result traits where not satisfied.
I've included comments and what process I for my logic in the playground link.</p>

<p>thankyou all.</p>
","","","42","<hash><rust><hmac><sha2>","-2","","0","2019-12-21 20:51:03","","3","","","","","2019-12-21 20:51:03","","",""
"59568754","HMAC-SHA256 in Java produces different output than JavaScript","<p>I've been trying to port some NodeJS code to Java in order to make HMAC signed requests to an API. I've been able to simplify the code to a point were encoding is clearly affecting the output.</p>

<p>Here's my code in JavaScript:</p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>var APIKey = ""secret"";
var secretByteArray = CryptoJS.enc.Base64.parse(APIKey);
var hash = CryptoJS.HmacSHA256(""Message"", secretByteArray);
var hashInBase64 = CryptoJS.enc.Base64.stringify(hash);
//alert(hashInBase64);
document.write(hashInBase64);</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;script src=""https://cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.9-1/enc-base64.min.js""&gt;&lt;/script&gt;
&lt;script src=""https://cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.9-1/hmac-sha256.min.js""&gt;&lt;/script&gt;
&lt;script src=""https://cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.9-1/crypto-js.min.js""&gt;&lt;/script&gt;</code></pre>
</div>
</div>
</p>

<p>Here's the Java Code:</p>

<pre><code>try {
        String secret = ""secret"";
        String message = ""Message"";

        byte[] secretByteArray = Base64.getEncoder().encode(secret.getBytes());

        //byte[] secretByteArray = Base64.encodeBase64(secret.getBytes(""utf-8""), true);

        Mac sha256_HMAC = Mac.getInstance(""HmacSHA256"");
        SecretKeySpec secret_key = new SecretKeySpec(secretByteArray, ""HmacSHA256"");
        sha256_HMAC.init(secret_key);

        String hash = Base64.getEncoder().encodeToString(sha256_HMAC.doFinal(message.getBytes()));
        System.out.println(hash);
    }
    catch (Exception e){
        System.out.println(""Error"");
    }
</code></pre>

<p>If I don't encode to base64 the ""secret"" I get the same output, but I'd like to get the same result with encoded strings. I suspect the encoded byte arrays have padding or sign differences.</p>
","<p>Your Java code uses <code>Base64.getEncoder().encode</code> to convert <em>to</em> Base64.</p>

<p>Your JavaScript code uses <code>CryptoJS.enc.Base64.parse</code> to convert <em>from</em> Base64.</p>

<p>You need to make those match.</p>
","59568788","42","<java><sha256><hmac>","0","4","1","2020-01-02 19:14:04","59568788","0","","","","","2020-01-02 19:10:51","","","2020-01-02 19:14:04"
"58958325","Is is safe to include the key as part of the data string of a hash_hmac() PHP function?","<p>I need to generate an authentication token to be included in a HTTP GET request to target a remote host for which I have a very limited number of options in terms of authentication.</p>

<p>I need the user to land on that page being automatically authenticated. He/she will have to perform a very specific operation, not to use the whole site.</p>

<p>My idea would be to use the PHP's <code>hash_hmac()</code> function the following way:</p>

<pre><code>hash_hmac(""sha512"", $email . $glue . $secret_token . $glue . $_REQUEST[""mt""], $secret_token);
</code></pre>

<p>for I have very few fields my system is sharing with that remote host: they are $email and the $secret_token.</p>

<p>Can it be counterproductive or dangerous to throw in the $secret_token into the data string?</p>
","<p>So, the HMAC works with a couple of pieces of information.  You have a shared secret, I presume <code>$secret_token</code> in your example, that must remain secret and the message payload that is public.  There is usually a timestamp included in both the message as well as appended to the hash that is used for expiration purposes.  For example:  <code>$epoch_time . ""."" . hash_hmac(""sha512"", $epoch_time . $message, $secret_token);</code>  The idea is that the message can be checked based on a Unix timestamp to see if it exceeded the delivery window. </p>

<blockquote>
  <p>Can it be counterproductive or dangerous to throw in the $secret_token into the data string?</p>
</blockquote>

<p>In short, yes. It is not explicitly dangerous, but there is no point to adding a bunch of user supplied (or secret) entropy to the message as hmac is designed for this message to remain public.  The idea behind the hmac is to verify that the message is correct; I.E. authorized, not tampered with and optionally of certain age.</p>

<p>Example for authentication between to systems:</p>

<pre><code>POST /api/1.0/resource/action HTTP/1.1
HOST: api.local
Content-Type: application/json
Authorization: hmac 1574268077.b8e7ae12510bdfb1812e463a7f086122cf37e4f7

{
  ""some"": ""payload""
}
</code></pre>

<p>On the receiving server, you would check the authorization header.  The first part (1574268077) tells you how old the message <em>should be</em> in seconds. The second part (b8e7ae12510bdfb1812e463a7f086122cf37e4f7) is the hash of the payload and the timestamp.  In this case, you would verify the request by using a <code>$message</code> value of <code>$epoch_time . 
'{""some"":""payload""}'</code>.  Checking the time is simple, <code>if (time() - $epoch_time &gt; 5 * 60) { throw new Exception(""Message expired"") }</code>.  The reason we check the timestamp is to avoid replaying the message by a would-be attacker.  Smaller the window, the harder it is to abuse. I would personally keep a running list of used, but not yet expired tokens in a list somewhere until they expire to be extra sure they cannot be used twice.  Either Redis or Memcached would be good choices to store such a list as expiration can be handled for you by the cache.  A quick note about GET/HEAD and other endpoints that do not accept a request body. The message for these requests is probably the relative uri including query parameters.</p>
","58959120","42","<php><security><hash><hmac>","0","1","1","2019-11-22 09:26:54","58959120","2","1","15908","","2019-11-22 09:26:54","2019-11-20 15:48:00","","2019-11-20 21:10:00","2019-11-20 16:30:24"
"55488814","Error NoSuchAlgorithmException while running-hmac","<p>I was trying hmac in Java and as a newbie, I am not able to solve the error</p>

<p>Error after running in NetBeans :</p>

<blockquote>
  <p>Key:MTzkWlyhZxfLMv84wgr+i+pFNI0=</p>
  
  <p>Exception in thread ""main"" java.lang.RuntimeException: Uncompilable source code </p>
  
  <p>-unreported exception java.security.NoSuchAlgorithmException; must be caught </p>
  
  <p>or declared to be thrown</p>
  
  <p>at hmac.HMAC.main(HMAC.java:27)</p>
  
  <p>Java Result: 1</p>
</blockquote>

<p>My code</p>

<pre><code>package HMAC;
import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;
import java.security.SecureRandom;
import sun.misc.*;

/**
 *
 * @author Best
 */
public class HMAC {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        SecureRandom random = new SecureRandom();
        byte[] keyBytes = new byte[20];
        random.nextBytes(keyBytes);
        SecretKeySpec key = new SecretKeySpec(keyBytes, ""HMACSHA1"");
        System.out.println(""Key:""+new BASE64Encoder().encode(key.getEncoded()));
        Mac mac = Mac.getInstance(""HmacSHA1"");
        mac.init(key);
        mac.update(""hello"".getBytes(""UTF8""));
        byte[] result = mac.doFinal();
        System.out.println(""MAC: ""+new BASE64Encoder().encode(result));

    }

}
</code></pre>

<p>Thank u</p>
","<p>You need to catch <code>NoSuchAlgorithmException</code>. Most of the IDEs point it out directly. Just add <code>try</code> and  <code>catch</code> the exception <code>NoSuchAlgorithmException</code>. This would work fine.</p>
","55489343","41","<java><netbeans-8><hmac>","0","0","1","2019-04-03 07:41:20","","0","","11060039","","2019-04-03 07:41:20","2019-04-03 06:51:39","","","2019-04-03 07:25:50"
"58138220","How do I convert this JS signature generator function into Ruby?","<p>I'am trying to integrate the <a href=""https://marketplace.zoom.us/docs/sdk/native-sdks/Web-Client-SDK/api-reference"" rel=""nofollow noreferrer"">Zoom</a> SDK into my application and I am having trouble figuring out how to convert their example code for generating the signature into ruby.</p>

<p>Example Code -</p>

<pre class=""lang-js prettyprint-override""><code>const base64JS = require('js-base64');
const hmacSha256 = require('crypto-js/hmac-sha256');
const encBase64 = require('crypto-js/enc-base64');

function generateSignature(data) {
    let signature = '';
    const ts = new Date().getTime();
    const msg = base64JS.Base64.encode(data.apiKey + data.meetingNumber + ts + data.role);
    const hash = hmacSha256(msg, data.apiSecret);
    signature = base64JS.Base64.encodeURI(`${data.apiKey}.${data.meetingNumber}.${ts}.${data.role}.${encBase64.stringify(hash)}`);
    return signature;
}

const data = {apiKey: """" ,
apiSecret: """",
meetingNumber: 888,
role: 0}

console.log(generateSignature(data));
</code></pre>

<p>How would the <code>generateSignature</code> function look like in ruby? </p>

<p>I've tried a few times but the outputted signature differed when I tried writing this in Ruby. I suspect that I'am encoding and decoding improperly.</p>

<p>This is the javascript code above that I modified slightly to cross reference</p>

<pre class=""lang-js prettyprint-override""><code>const base64JS = require('js-base64');
const hmacSha256 = require('crypto-js/hmac-sha256');
const encBase64 = require('crypto-js/enc-base64');

function generateSignature(data) {
  let signature = '';
  const ts = ""1569600658561""
  const msg = base64JS.Base64.encode(data.apiKey + data.meetingNumber + ts + data.role);

  console.log(msg); // This matches the ruby

  const hash = hmacSha256(msg, data.apiSecret);
  signature = base64JS.Base64.encodeURI(`${data.apiKey}.${data.meetingNumber}.${ts}.${data.role}.${encBase64.stringify(hash)}`);
  return signature;
}

data = {
  apiKey: 'api_key',
  apiSecret: 'secret',
  meetingNumber: '1000',
  role: '0'
}


console.log(generateSignature(data));
</code></pre>

<p>This is my attempt in ruby</p>

<pre><code>class ZoomSignatureGenerator

  def self.generate
    data = {
      api_key: 'api_key',
      api_secret: 'secret',
      meeting_number: '1000',
      role: '0'
    }

    ts = ""1569600658561""
    msg = Base64.encode64(data[:api_key] + data[:meeting_number] + ts + data[:role]);
    puts(msg)
    hash = OpenSSL::HMAC.hexdigest(OpenSSL::Digest.new('sha256'), data[:api_secret], msg)
    signature = Base64.urlsafe_encode64(""#{data[:api_key]}.#{data[:meeting_number]}.#{ts}.#{data[:role]}.#{Base64.encode64(hash)}"");
    return signature
  end
end

</code></pre>

<p>I expected them to be the same output. But they end up being different.</p>

<p>Hope someone can help me :)</p>
","","","41","<javascript><ruby><sha256><hmac>","0","","0","2019-09-27 17:52:08","","1","","3982562","","2019-09-27 17:52:08","2019-09-27 16:17:42","","",""
"35562739","Distinguishing start of digitally signed message digest","<p>Since I just created this crude test using the functions from IETF RFC 4634, I don't know for certain whether I've used them correctly for HMAC-SHA-384-192, so I'll start with that code here:</p>

<pre><code>#include &lt;stdint.h&gt;
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;
#include &lt;ctype.h&gt;
#include ""sha.h""

int main(int argc, char *argv[]) {
        HMACContext hmac;
        const unsigned char *keyarr = ""0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef"";
        int err = hmacReset(&amp;hmac, SHA384, keyarr, 48);
        if (err != shaSuccess) {
                printf(""err 1\n"");
                exit(1);
        }
        const uint8_t testarray[65] = {'I',' ','a','m',' ','n','o','t',' ','a',' ','c','r','o','o','k','!'};
        const unsigned char *prfkey = ""abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789"";
        memcpy((void *)testarray + 17, (void *)prfkey, 48);
        const int testlen = 65;
        err = hmacInput(&amp;hmac, testarray, testlen);
        if (err != shaSuccess) {
                printf(""err 2\n"");
                exit(1);
        }
        uint8_t Message_Digest[USHAMaxHashSize];
        err = hmacResult(&amp;hmac, Message_Digest);
        if (err != shaSuccess) {
                printf(""err 3\n"");
                exit(1);
        }
        int i;
        for(i = 0; i &lt; 24; i++) printf("" %02X"", Message_Digest[i]);
        putchar('\n');
}
</code></pre>

<p>If I've done everything right (other than selecting good keys) so far, I would ordinarily have a 24-byte (i.e., 192-bit) digest, but if I digitally sign the digest prior to appending it, my experience is that the signature block isn't a predictable length.  I'm sure I could come up with any number of ways to identify the end of the message portion, but I don't want to make this a hack.  What is the accepted way of doing this?  (The signature will use ECDSA.)</p>

<p>I should also mention that this will be a multicast message using UDP inside ESP, since that puts constraints on message economy.  (That's also the main reason for the problem--keeping it binary.  The other is the practice of appending, rather than prefixing it with a byte count in front of it.)</p>
","","","41","<digital-signature><hmac><digest><ecdsa>","0","","0","2016-02-22 21:05:39","","8","","1879439","","2016-02-22 21:05:39","2016-02-22 20:02:18","","",""
"49874523","python implementation of mac's doFinal method","<p>I am implementing hmac signature generation in python from some java code which is already written and working. </p>

<p>I tried some hmac generation methods available online for python, but they did not work, and so I am trying to implement the Java logic in Python. </p>

<p>I have almost completed the task, but there is one step at which I am stuck: the doFinal method of mac in java, which processes an input byte array and produces an output byte array after processing it. I have tried a lot of things, but am unable to reproduce the output of java's doFinal method in python. Can anyone please explain how I can implement this method in Python? Or any links providing help for this? Any help would be greatly appreciated. Thanks</p>
","","","41","<java><python><hmac>","0","","0","2018-04-17 09:29:45","","2","","","","","2018-04-17 09:29:45","","",""
"50499785","HMAC-SHA2-224 Lua implementation not giving correct output","<p>I have an issue with an HMAC implementation I am trying to write in Lua. The underlying has function I am testing with is SHA2-224. Look at the code below, assuming a correct SHA2-224 implementation:</p>

<pre><code>        local print = print
        local byte = string.byte
        local char = string.char
        local concat = table.concat

        local function toBytes(str)
            local tmp = {}
            for i = 1, string.len(str) do
                tmp[i] = byte(str, i)
            end
            return tmp
        end

        local function toString(bArray)
            local tmp = {}
            for i = 1, #bArray do
                tmp[i] = char(bArray[i])
            end
            tmp = concat(tmp)
            return tmp
        end

        -- ignore hFun for now
        local hash = function(hFun, key, message)

            local hasher = require 'sha224'
            local blockSize = hasher.blockSize()
            local outputSize = hasher.outputSize()

            -- if the length of the key is longer than the block size, we hash it first
            -- to shorten it
            -- if its too large, we pad it with 0s until its as big as the block size
            if #key &gt; blockSize then
                key = hasher.hash(key)
            elseif #key &lt; blockSize then
                key = key .. string.rep(""\0"", (blockSize - #key))
            end

            local keyBytes = toBytes(key)
            assert(#keyBytes == blockSize)

            local opad = {}
            local ipad = {}

            for i = 1, 64 do
                opad[i] = keyBytes[i] ~ 0x5c
                ipad[i] = keyBytes[i] ~ 0x36
            end

            opad = toString(opad)
            ipad = toString(ipad)

            local inner = hasher.hash(ipad .. message)

            return hasher.hash(opad .. inner)

        end
        return {hash = hash}
    end
</code></pre>

<p>Testing with a test vector from NIST, this code produces the following output (w/ some debug code that is not included above):</p>

<p>For key: ""Jefe"", message: ""what do ya want for nothing?"":</p>

<pre><code>OPAD 1: 74 XOR 92 --&gt; 22
IPAD 1: 74 XOR 54 --&gt; 124
OPAD 2: 101 XOR 92 --&gt; 57
IPAD 2: 101 XOR 54 --&gt; 83
OPAD 3: 102 XOR 92 --&gt; 58
IPAD 3: 102 XOR 54 --&gt; 80
OPAD 4: 101 XOR 92 --&gt; 57
IPAD 4: 101 XOR 54 --&gt; 83
OPAD 5: 0 XOR 92 --&gt; 92
IPAD 5: 0 XOR 54 --&gt; 54
OPAD 6: 0 XOR 92 --&gt; 92
IPAD 6: 0 XOR 54 --&gt; 54
OPAD 7: 0 XOR 92 --&gt; 92
IPAD 7: 0 XOR 54 --&gt; 54
OPAD 8: 0 XOR 92 --&gt; 92
IPAD 8: 0 XOR 54 --&gt; 54
OPAD 9: 0 XOR 92 --&gt; 92
IPAD 9: 0 XOR 54 --&gt; 54
OPAD 10: 0 XOR 92 --&gt; 92
IPAD 10: 0 XOR 54 --&gt; 54
OPAD 11: 0 XOR 92 --&gt; 92
IPAD 11: 0 XOR 54 --&gt; 54
OPAD 12: 0 XOR 92 --&gt; 92
IPAD 12: 0 XOR 54 --&gt; 54
OPAD 13: 0 XOR 92 --&gt; 92
IPAD 13: 0 XOR 54 --&gt; 54
OPAD 14: 0 XOR 92 --&gt; 92
IPAD 14: 0 XOR 54 --&gt; 54
OPAD 15: 0 XOR 92 --&gt; 92
IPAD 15: 0 XOR 54 --&gt; 54
OPAD 16: 0 XOR 92 --&gt; 92
IPAD 16: 0 XOR 54 --&gt; 54
OPAD 17: 0 XOR 92 --&gt; 92
IPAD 17: 0 XOR 54 --&gt; 54
OPAD 18: 0 XOR 92 --&gt; 92
IPAD 18: 0 XOR 54 --&gt; 54
OPAD 19: 0 XOR 92 --&gt; 92
IPAD 19: 0 XOR 54 --&gt; 54
OPAD 20: 0 XOR 92 --&gt; 92
IPAD 20: 0 XOR 54 --&gt; 54
OPAD 21: 0 XOR 92 --&gt; 92
IPAD 21: 0 XOR 54 --&gt; 54
OPAD 22: 0 XOR 92 --&gt; 92
IPAD 22: 0 XOR 54 --&gt; 54
OPAD 23: 0 XOR 92 --&gt; 92
IPAD 23: 0 XOR 54 --&gt; 54
OPAD 24: 0 XOR 92 --&gt; 92
IPAD 24: 0 XOR 54 --&gt; 54
OPAD 25: 0 XOR 92 --&gt; 92
IPAD 25: 0 XOR 54 --&gt; 54
OPAD 26: 0 XOR 92 --&gt; 92
IPAD 26: 0 XOR 54 --&gt; 54
OPAD 27: 0 XOR 92 --&gt; 92
IPAD 27: 0 XOR 54 --&gt; 54
OPAD 28: 0 XOR 92 --&gt; 92
IPAD 28: 0 XOR 54 --&gt; 54
OPAD 29: 0 XOR 92 --&gt; 92
IPAD 29: 0 XOR 54 --&gt; 54
OPAD 30: 0 XOR 92 --&gt; 92
IPAD 30: 0 XOR 54 --&gt; 54
OPAD 31: 0 XOR 92 --&gt; 92
IPAD 31: 0 XOR 54 --&gt; 54
OPAD 32: 0 XOR 92 --&gt; 92
IPAD 32: 0 XOR 54 --&gt; 54
OPAD 33: 0 XOR 92 --&gt; 92
IPAD 33: 0 XOR 54 --&gt; 54
OPAD 34: 0 XOR 92 --&gt; 92
IPAD 34: 0 XOR 54 --&gt; 54
OPAD 35: 0 XOR 92 --&gt; 92
IPAD 35: 0 XOR 54 --&gt; 54
OPAD 36: 0 XOR 92 --&gt; 92
IPAD 36: 0 XOR 54 --&gt; 54
OPAD 37: 0 XOR 92 --&gt; 92
IPAD 37: 0 XOR 54 --&gt; 54
OPAD 38: 0 XOR 92 --&gt; 92
IPAD 38: 0 XOR 54 --&gt; 54
OPAD 39: 0 XOR 92 --&gt; 92
IPAD 39: 0 XOR 54 --&gt; 54
OPAD 40: 0 XOR 92 --&gt; 92
IPAD 40: 0 XOR 54 --&gt; 54
OPAD 41: 0 XOR 92 --&gt; 92
IPAD 41: 0 XOR 54 --&gt; 54
OPAD 42: 0 XOR 92 --&gt; 92
IPAD 42: 0 XOR 54 --&gt; 54
OPAD 43: 0 XOR 92 --&gt; 92
IPAD 43: 0 XOR 54 --&gt; 54
OPAD 44: 0 XOR 92 --&gt; 92
IPAD 44: 0 XOR 54 --&gt; 54
OPAD 45: 0 XOR 92 --&gt; 92
IPAD 45: 0 XOR 54 --&gt; 54
OPAD 46: 0 XOR 92 --&gt; 92
IPAD 46: 0 XOR 54 --&gt; 54
OPAD 47: 0 XOR 92 --&gt; 92
IPAD 47: 0 XOR 54 --&gt; 54
OPAD 48: 0 XOR 92 --&gt; 92
IPAD 48: 0 XOR 54 --&gt; 54
OPAD 49: 0 XOR 92 --&gt; 92
IPAD 49: 0 XOR 54 --&gt; 54
OPAD 50: 0 XOR 92 --&gt; 92
IPAD 50: 0 XOR 54 --&gt; 54
OPAD 51: 0 XOR 92 --&gt; 92
IPAD 51: 0 XOR 54 --&gt; 54
OPAD 52: 0 XOR 92 --&gt; 92
IPAD 52: 0 XOR 54 --&gt; 54
OPAD 53: 0 XOR 92 --&gt; 92
IPAD 53: 0 XOR 54 --&gt; 54
OPAD 54: 0 XOR 92 --&gt; 92
IPAD 54: 0 XOR 54 --&gt; 54
OPAD 55: 0 XOR 92 --&gt; 92
IPAD 55: 0 XOR 54 --&gt; 54
OPAD 56: 0 XOR 92 --&gt; 92
IPAD 56: 0 XOR 54 --&gt; 54
OPAD 57: 0 XOR 92 --&gt; 92
IPAD 57: 0 XOR 54 --&gt; 54
OPAD 58: 0 XOR 92 --&gt; 92
IPAD 58: 0 XOR 54 --&gt; 54
OPAD 59: 0 XOR 92 --&gt; 92
IPAD 59: 0 XOR 54 --&gt; 54
OPAD 60: 0 XOR 92 --&gt; 92
IPAD 60: 0 XOR 54 --&gt; 54
OPAD 61: 0 XOR 92 --&gt; 92
IPAD 61: 0 XOR 54 --&gt; 54
OPAD 62: 0 XOR 92 --&gt; 92
IPAD 62: 0 XOR 54 --&gt; 54
OPAD 63: 0 XOR 92 --&gt; 92
IPAD 63: 0 XOR 54 --&gt; 54
OPAD 64: 0 XOR 92 --&gt; 92
IPAD 64: 0 XOR 54 --&gt; 54
OPAD: 9:9\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
IPAD: |SPS666666666666666666666666666666666666666666666666666666666666
INNER HASH:  9:9\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\what do ya want for nothing? ----&gt; 9d7a0c2abbbd5d81645ba9aff01a112bb1d1ec878072e2953110cc71
FINAL HASH INPUT: 9:9\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\9d7a0c2abbbd5d81645ba9aff01a112bb1d1ec878072e2953110cc71
FINAL RESULT: 770df99ad235e32bc5e2aacfbbfdedddeac7628a5882920863e920ee
EXPECTED RESULT: a30e01098bc6dbbf45690f3a7e9e6d0f8bbea2a39e6148008fd05e44
</code></pre>

<p>I am pretty sure that I am not doing anything wrong when it comes to the padding as well as the creation of the opad and ipad tables. Perhaps my string to int conversions are off. Perhaps its a weird quirk with Lua 5.3 that I don't know about. I don't know what I am missing here. It could be very obvious, but I am not seeing it at the moment. Thanks in advance for your assistance.</p>

<p>I should add that this implementation is needed for a lua sandbox in which I cannot use other libraries.</p>
","","","40","<lua><hmac><sha>","1","","0","2018-05-24 01:57:59","","1","","9821157","","2018-05-24 01:57:59","2018-05-24 01:51:40","","",""
"14350022","Integrity of http using browser","<p>How is it possible to check the integrity of http messages in a way browser can do ?
Actually Digest authentication with ""qop=auth-int"" would work (because the md5 is also over the body) but unfortunately this is not supported by common webservers (like apache).
Is there a way ?</p>
","","","39","<http><browser><hmac><digest-authentication><integrity>","0","","0","2013-01-16 01:24:02","","5","","","","","2013-01-16 01:24:02","","",""
"54581205","ruby and javascript hmac signatures do not match giving same values","<p>i am trying to conect my backend in ruby on rails with and end point and it asks for hmac signature of every request. they gave me an .html with some javascript that returns in the explorer console their value of hmac given a key and a payload, but when i do the equivalent code in ruby on rails it gives me a diferent value given the same parameters. next i am pasting the html AND my code in ruby, i need my ruby code to give the javascript answer.</p>

<p>i have tried changing the encoding of the inputs o my code to ascii, iso8859-1, and utf-8.
i have comprared my hmac answer to answers given by multiple hmac generator in the internet and they give my answer exepto for 1 page whitch gives the javascript answer.
this is the one that gives de javascript answer: <a href=""https://www.liavaag.org/English/SHA-Generator/HMAC/"" rel=""nofollow noreferrer"">https://www.liavaag.org/English/SHA-Generator/HMAC/</a></p>

<p>this is the javascreipt from the third party</p>

<pre><code>function toHex (message) {
 var str = '', c;
 for (var i = 0; i &lt; message.length; i++) {
  c = message.charCodeAt(i);
  str += c.toString(16) ;
 }
 return str;
}

function sign(originalMessage, key){
 var message =toHex(originalMessage);
 var signature, hmac;    
 hmac = new sjcl.misc.hmac(sjcl.codec.hex.toBits(key), 
sjcl.hash.sha256);
 signature =sjcl.codec.hex.fromBits(hmac.encrypt(sjcl.codec.hex.toBits(message)));
  return signature;
}
</code></pre>

<p>this is my code:
    def toHex(message)
      str = ''
      caracter = 0
      cont = 0
      while(cont &lt; message.length) do
        caracter = message[cont].ord
        str = str + caracter.to_s(16)
        cont = cont + 1
      end
      return str
    end</p>

<pre><code>def sign(original_message, key)
  #byebug
  message = toHex(original_message)
  signature = ''
  signature = OpenSSL::HMAC.hexdigest(""SHA256"", key, message)
  return signature
end
</code></pre>
","","","39","<javascript><ruby><openssl><sha256><hmac>","0","","0","2019-06-06 16:08:01","","3","","","","","2019-02-07 19:49:38","","",""
"58761105","Issue creating a HMAC-SHA1 hash in Python","<p>I'm having issues generating a signature (in a HMAC-SHA1 hash format), I keep getting a TypeError.</p>

<p>I'm using the following code to generate the signature:</p>

<pre><code>from hashlib import sha1
import hmac
import binascii
def getUrl(request):
    devId = 2
    key = '7car2d2b-7527-14e1-8975-06cf1059afe0'
    request = request + ('&amp;' if ('?' in request) else '?')
    raw = request+'devid={0}'.format(devId)
    hashed = hmac.new(key, raw, sha1)
    signature = hashed.hexdigest()
    return 'http://api.domain.com'+raw+'&amp;signature={1}'.format(devId, signature)
print(getUrl('/v2/healthcheck'))
</code></pre>

<p>The error I keep getting is:</p>

<pre><code>Traceback (most recent call last):
  File ""C:\Users\...\Documents\serviceinfo\sig.py"", line 12, in &lt;module&gt;
    print(getUrl('/v2/healthcheck'))
  File ""C:\Users\...\Documents\serviceinfo\sig.py"", line 9, in getUrl
    hashed = hmac.new(key, raw, sha1)
  File ""C:\Users\...\AppData\Local\Programs\Python\Python37-32\lib\hmac.py"", line 153, in new
    return HMAC(key, msg, digestmod)
  File ""C:\Users\...\AppData\Local\Programs\Python\Python37-32\lib\hmac.py"", line 49, in __init__
    raise TypeError(""key: expected bytes or bytearray, but got %r"" % type(key).__name__)
TypeError: key: expected bytes or bytearray, but got 'str'
[Finished in 0.1s with exit code 1]
</code></pre>

<p>Is anyone able to point me in the right direction? Thanks in advance!</p>
","<p>your <a href=""https://docs.python.org/3/library/hmac.html#hmac.new"" rel=""nofollow noreferrer"">key value</a> must be a byte array of bytes.
to convert a string object to a <a href=""https://docs.python.org/3/library/functions.html#func-bytes"" rel=""nofollow noreferrer"">bytes</a> using following code </p>

<pre><code>key=bytes(str('7car2d2b-7527-14e1-8975-06cf1059afe0'),'utf8')
</code></pre>

<p>and then give the key to hamc.new object</p>

<p><strong>Or</strong> </p>

<p>you can use <a href=""https://docs.python.org/3/library/functions.html#func-bytearray"" rel=""nofollow noreferrer"">bytearray</a> function instead of bytes</p>

<pre><code>key=bytearray(str('7car2d2b-7527-14e1-8975-06cf1059afe0'), 'utf-8')
</code></pre>

<p>and then give the key to hamc.new object</p>
","58761211","38","<python-3.x><hmac><hmacsha1>","1","2","1","2019-11-09 05:20:37","58761211","0","","","","","2019-11-08 05:49:03","","2019-11-09 05:20:37","2019-11-08 06:00:54"
"58492938","Encrypt files using gpg and hmac-sha2-256","<p>I wrote a script to encrypt a file using gpg, in a .bat script which takes in a filename passed from a powershell script. This is my .bat file (the important parts anyway):</p>

<pre><code>gpg --batch --yes --passphrase ""C:\users\me\Desktop\testkey.txt"" --gen-key 
""C:\users\me\Desktop\SetEncryptionSettings.txt""

gpg --batch --yes -r myuser--output %OutputParam% --encrypt %1
</code></pre>

<p>where SetEncryptionSettings.txt looks like this:</p>

<pre><code>Key-Type: default
Subkey-Type: default
Name-Real: myuser
Name-Comment: nocomment
Name-Email: me@gmail.com
Expire-Date: 0
</code></pre>

<p>And this works.  I can decrypt the file myself.  However, I sent my file to someone else who appears to be using a different decryption algorithm...he says I should use hmac-sha2-256.</p>

<p>I understand the encryption options in a .bat file to provide these four options:</p>

<pre><code>(1) RSA and RSA (default)
(2) DSA and Elgamal
(3) DSA (sign only)
(4) RSA (sign only)
</code></pre>

<p>which can be seen here, for example:</p>

<p><a href=""https://yanhan.github.io/posts/2017-09-27-how-to-use-gpg-to-encrypt-stuff.html"" rel=""nofollow noreferrer"">https://yanhan.github.io/posts/2017-09-27-how-to-use-gpg-to-encrypt-stuff.html</a></p>

<p>So I thought that my code was using RSA since that's the default...and that since there are no options here for hmac-sha2-256, I'm going to have to change everything now. Can I make this work using a similar setup to what I have now, without downloading any additional programs?</p>
","","","38","<batch-file><encryption><hmac>","0","","0","2019-10-21 19:26:12","","6","","","","","2019-10-21 19:26:12","","",""
"39763496","How to get an analogous of the (C) function PKCS5_PBKDF2_HMAC in PHP?","<p>I am trying to write similar program as <a href=""https://github.com/jpmens/mosquitto-auth-plug/blob/master/pbkdf2-check.c"" rel=""nofollow"">this</a> but in PHP. It uses the above function, but that function is not available in PHP apparently.</p>

<p>How can I solve this?</p>

<p>I tried to use pbkdf2 function of PHP, but it produces different result than the above function.</p>
","","","38","<php><hmac><pbkdf2>","1","","0","2016-10-02 17:23:37","","1","","1783163","","2016-10-02 17:23:37","2016-09-29 07:00:09","","",""
"31765134","How to correctly convert TAG value to the right format so that to Verify HMAC?","<p>I'm working on HMAC generation and verifying to check data integrity. I can correctly generate the MAC value but when sending it through socket to another program for verification, I faced with formatting mismatch. I appreciate your support. Thanks.</p>

<pre><code>unsigned char* MAC(unsigned char* key,unsigned char* message)  
{
    unsigned char* result;
    unsigned int result_len = 32;  
    int i;        
    result = (unsigned char*) malloc(sizeof(char) * result_len);
    result = HMAC(EVP_sha256 (), key , strlen (key), message , strlen(message) , NULL, NULL);   
    return result;
} 

int verifyMAC(unsigned char* key,unsigned char* message, unsigned char* receivedTag)
{
    printf(""\n\n ==================== MAC Verification ==================\n\n"");
    unsigned char* newHash; // newly generated hash value
    unsigned int newHash_len = 32;  
    int  i,flag=0;   
    newHash = (unsigned char*) malloc(sizeof(char) * newHash_len);
newHash = HMAC(EVP_sha256 (), key , strlen (key), message , strlen(message) , NULL, NULL); 
    for (i=0; i!=newHash_len; i++)
    {
            if (receivedTag[i]!=newHash[i])
            {
                printf(""DATA MISMATCH: Found %02X instead of %02X at index %d!\n"", newHash[i], receivedTag[i], i);
                break;
            }
    }
    if (i==newHash_len)
    {
        printf(""MAC verified!\n"");
        flag = 1;
    } 
    return flag;
}

int main(int argc, char *argv[])
{

    unsigned char* key = ""1234567890"";
    unsigned char* message = (unsigned char*) ""hello world"";
    …
}
</code></pre>

<p>Console result:  </p>

<pre><code>Hashed data:  E4  5F  60  72  61  7C  CE  5E  06  A9  5B  E4  81  C4  33  51  02  3D  99  23  35  99  EA  C9  FD  AF  FC  95  81  42  62  9A 


==================== MAC Verification ==================

DATA MISMATCH: Found E4 instead of 65 at index 0!
ERROR: data is modified
</code></pre>
","","","38","<c><hash><hmac>","1","","0","2015-08-01 19:03:21","","8","","2432317","","2015-08-01 19:03:21","2015-08-01 18:17:57","","",""
"50285477","Constructing AWS S4 authentication in python","<p>I'm trying to create S4 signatures as outlined <a href=""https://docs.aws.amazon.com/general/latest/gr/signature-v4-examples.html#signature-v4-examples-python"" rel=""nofollow noreferrer"">here</a> using the python code snippet. The documentation is confusing me so I wanted some clarity on the following</p>

<p>1) The getSignatureKey method is signing 4 inputs, but the output they have shown has an extra kSecret. What is this kSecret?</p>

<p>2) When I run the program, the output I get is like this:</p>

<pre><code>kDate = '\x96\x9f\xbb\x94\xfe\xb5B\xb7\x1e\xdeo\x87\xfeM_\xa2\x9cx\x93B\xb0\xf4\x07GFp\xf0\xc2H\x9e\n\r'
</code></pre>

<p>whereas the output as per the documentation is like this:</p>

<pre><code>kDate    = '969fbb94feb542b71ede6f87fe4d5fa29c789342b0f407474670f0c2489e0a0d'
</code></pre>

<p>Which is the correct format to be used? How to get one from the other?</p>

<p>3) It appears that the output values are also different (if I strip away the \x). Is this a documentation error? </p>

<p>I am using python 2.7</p>
","<p><code>kSecret</code> is the hex-encoded representation of your original aws-access-key-secret.  Some of the other language examples have an intermediate variable for this.</p>

<p>The output shown for the various keys is only shown for convenience:</p>

<blockquote>
  <p>Note that these are hex-encoded representations of the binary data; the key itself and the intermediate values should be in binary format.</p>
</blockquote>

<p>I am not versed in python 2, but it looks like <a href=""https://stackoverflow.com/q/13435922/1695906""><code>binascii.hexlify</code></a> would be a way to accomplish the conversion.  Just remember this conversion is only for the benefit of your eyeballs.  The actual code uses the binary representations of the intermediate keys.</p>
","50290998","37","<python-2.7><amazon-web-services><hmac>","0","1","1","2018-05-11 11:09:19","50290998","0","","","","","2018-05-11 05:21:23","","","2018-05-11 11:09:19"
"58420019","How to convert php hash_hmac to NodeJS","<p>I need to convert a php hash_hmac to node.js. I have found similar questions and answers which I have tried, but I am still receiving 
{ data: '', error: 'HMAC not sent', success: false }</p>

<pre><code>const params = {
method : ""get_issues"",
ts : time.toString(),
field_1_name : ""id"",
field_1_value : 123456,
sort : ""status ASC, created DESC""
}
</code></pre>

<p>php: </p>

<pre><code> $mac = hash_hmac(""sha512"", mac_build_query($params), $PRIVATE_KEY); 
</code></pre>

<p>node.js: </p>

<pre><code>let mac = crypto.createHmac(""sha512"", mac_build_query(params)).update(PRIVATE_KEY).digest().toString('base64') //('base64') //hex
</code></pre>
","<p>IN PHP : </p>

<p><code>hash_hmac ( string $algo , string $data , string $key [, bool $raw_output = FALSE ] ) : string</code> </p>

<p>Example: </p>

<pre><code>hash_hmac($algo,$data,$key) // return hex string 
</code></pre>

<p>In Node : <code>createHmac(algo, key).update(data).digest(encoding)</code></p>

<p>example :</p>

<pre><code> crypto.createHmac('sha512', key).update(data).digest('hex')
</code></pre>

<p><strong>NOTE: Key and data should be a string.</strong></p>

<p>if data is object then convert to string:</p>

<pre><code>let data_json_string = JSON.stringify(data);
</code></pre>

<p>Output: <a href=""https://i.stack.imgur.com/tNYTT.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/tNYTT.png"" alt=""enter image description here""></a></p>
","58420578","37","<php><node.js><hmac><cryptojs>","0","2","1","2019-10-16 20:18:02","","1","","","","","2019-10-16 18:58:18","","2019-10-16 20:18:02","2019-10-16 19:37:30"
"48372022","Retrieve native length of hash from HMACSHA1 and HMACSHA512","<p>I would like to get (programmatically) the native length of the HMAC function from an instance (or static method) of that class. (160 bits for SHA1, 512 for SHA512. AFAIK) Is there a way?</p>

<p>If not, perhaps there's a way to get it from SHA1Managed or SHA1 (and their SHA512 counterparts)?</p>
","<p>A quick search shows the <a href=""https://msdn.microsoft.com/en-us/library/system.security.cryptography.hashalgorithm.hashsize(v=vs.110).aspx"" rel=""nofollow noreferrer""><code>HashAlgorithm.HashSize</code></a> property that those classes implement.</p>
","48373293","36","<c#><.net><sha><hmac><hmacsha1>","0","2","1","2018-01-22 13:36:37","48373293","1","","939213","","2018-01-22 13:36:37","2018-01-21 21:44:26","","","2018-01-22 00:46:17"
"55195473","Shopify HMAC verfication","<p>Processing the string through an HMAC-SHA256 function fails when one of the parameters is an array.</p>

<p><strong>Invalid</strong></p>

<pre><code>ids%5B%5D=1119038996577&amp;locale=en&amp;shop=shopify.myshopify.com&amp;timestamp=1552692625
ids%5B%5D=1119038996577&amp;ids%5B%5D=1119038996578&amp;locale=en&amp;shop=shopify.myshopify.com&amp;timestamp=1552692625
</code></pre>

<p><strong>Valid</strong></p>

<pre><code>id=1119038996577&amp;locale=en&amp;shop=shopify.myshopify.com&amp;timestamp=1552692625
</code></pre>
","","","36","<authentication><shopify><hmac>","0","","0","2019-03-16 09:56:56","","0","","","","","2019-03-16 09:56:56","","",""
"42603422","php vs c++ hmac inconsistent","<p>I am trying to integrate a game engine(c++) and a server(php)</p>

<p>c++</p>

<pre><code>char key[] = ""012345678"";

// The data that we're going to hash using HMAC
char hashStr[] = ""hello world"";

unsigned char* result = HMAC(EVP_sha256(), key, strlen(key) , (unsigned char*)hashStr, strlen(hashStr), NULL, NULL);  
</code></pre>

<p>php</p>

<pre><code>$key = ""012345678"";
$msg = ""hello world"";


$hash = hash_hmac ( 'sha256' , $msg ,  $key , true );

echo(bin2hex($hash));
</code></pre>

<p>The problem is my hashes do not match up and I am not sure what I am doing wrong.</p>
","","","36","<php><c++><hmac>","1","","0","2017-03-05 01:32:25","","0","","","","","2017-03-05 01:32:25","","",""
"57493633","How to pass key in HMAC as HEX Swift iOS","<p>So I have this code to generate for HMAC-SHA1</p>

<pre><code>let key = ""foo"".toSHA1()
let data = ""bar""
var results = [CUnsignedChar](repeating: 0, count: Int(CC_SHA1_DIGEST_LENGTH))

CCHmac(CCHmacAlgorithm(kCCHmacAlgSHA1), key, key.count, data, data.count, &amp;results)

let hmacData:NSData = NSData(bytes: results, length: (Int(CC_SHA1_DIGEST_LENGTH)))

var bytes = [UInt8](repeating: 0, count: hmacData.length)
hmacData.getBytes(&amp;bytes, length: hmacData.length)

var hexString = """"
for byte in bytes {
    hexString += String(format:""%02hhx"", UInt8(byte))
}

print(hexString)
</code></pre>

<p>and this code for converting key string to SHA1</p>

<pre><code>func toSHA1() -&gt; String {
        let data = self.data(using: String.Encoding.utf8)!
        var digest = [UInt8](repeating: 0, count:Int(CC_SHA1_DIGEST_LENGTH))
        data.withUnsafeBytes {
            _ = CC_SHA1($0, CC_LONG(data.count), &amp;digest)
        }
        let hexBytes = digest.map { String(format: ""%02x"", $0) }

        return hexBytes.joined()
    }
</code></pre>

<p>and the result is </p>

<blockquote>
  <p>faa3c04b058d38cecf1243421a596742a6cf1188</p>
</blockquote>

<p>so using this <a href=""https://www.liavaag.org/English/SHA-Generator/HMAC/"" rel=""nofollow noreferrer"">onlineHMAC</a> Generator  outputs the same result. But my desired output should be </p>

<blockquote>
  <p>38b24d28d64f2459d42d1ecd1c9fa375ffeb369f</p>
</blockquote>

<p>and I can achieve this by changing the Key type to <strong>HEX</strong> in the page that I provided.</p>

<p>So my problem now is how do I get the same output in my code? Do I need to convert <strong>key</strong> to hex? </p>
","<p>Fixed it by passing <strong>digest</strong> as key instead of converting it to string.</p>

<p>Here's the updated code</p>

<pre><code>let key = ""foo"".toSHA1()
let data = ""bar""
var results = [CUnsignedChar](repeating: 0, count: Int(CC_SHA1_DIGEST_LENGTH))

CCHmac(CCHmacAlgorithm(kCCHmacAlgSHA1), key, key.count, data, data.count, &amp;results)

let hmacData:NSData = NSData(bytes: results, length: (Int(CC_SHA1_DIGEST_LENGTH)))

var bytes = [UInt8](repeating: 0, count: hmacData.length)
hmacData.getBytes(&amp;bytes, length: hmacData.length)

var hexString = """"
for byte in bytes {
    hexString += String(format:""%02hhx"", UInt8(byte))
}

print(hexString)


func toSHA1() -&gt; [UInt8] {
        let data = self.data(using: String.Encoding.utf8)!
        var digest = [UInt8](repeating: 0, count:Int(CC_SHA1_DIGEST_LENGTH))
        data.withUnsafeBytes {
            _ = CC_SHA1($0, CC_LONG(data.count), &amp;digest)
        }

        return digest
    }
</code></pre>
","57496123","36","<ios><swift><hex><hmac>","0","0","1","2019-08-14 13:53:15","","0","","","","","2019-08-14 11:15:38","","","2019-08-14 13:53:15"
"58478184","Is it possible to output word array in Python similar to CryptoJS.enc.Hex.parse(hash)","<p>Is there a way to convert a hash to a word array in Python as in JS?</p>

<p>In JS with CryptoJS I can use: <code>CryptoJS.enc.Hex.parse(hash)</code> which will output the word array.</p>

<p>I've tried googling it but cannot seem to find how to do that in Python.</p>

<p>Javascript example:</p>

<pre><code>var CryptoJS = require(""crypto-js"");

var hash = ""c8f3ab9777da89748851932d3446b197450bb12fa9b9136ad708734291a6c60c"";

console.log(hash);
</code></pre>

<p>I cannot figure out how to get similar output with hmac and hashlib libraries in Python but I expect the output something like this:</p>

<pre><code>{ words:
   [ -923554921,
     2010810740,
     -2007919827,
     877048215,
     1158394159,
     -1447488662,
     -687312062,
     -1851341300 ],
  sigBytes: 32 }
</code></pre>

<p>Update:
I need to have an output in the exact same format (spacing, indents, new lines) to produce a subsequent hash from the output.</p>
","<p>You can do this in Python but it's not builtin as part of any crypto library that I am aware of.</p>

<p>A simple implementation (requires Python 3):</p>

<pre class=""lang-py prettyprint-override""><code>
hash = ""c8f3ab9777da89748851932d3446b197450bb12fa9b9136ad708734291a6c60c""

# Convert hex-encoded data into a byte array
hash_bytes = bytes.fromhex(hash)

# Split bytes into 4-byte chunks (32-bit integers) and convert
# The integers in your example a big-endian, signed integers
hash_ints = [
    int.from_bytes(hash_bytes[i:i+4], ""big"", signed=True) 
    for i in range(0, len(hash_bytes), 4)
]

# Print result
print({""words"": hash_ints, ""sigBytes"": len(hash_bytes)})
</code></pre>

<p>This will output: <code>{'words': [-923554921, 2010810740, -2007919827, 877048215, 1158394159, -1447488662, -687312062, -1851341300], 'sigBytes': 32}</code></p>

<p>Hope that helps.</p>
","58478318","35","<javascript><python><node.js><hmac><cryptojs>","0","0","1","2019-10-21 01:14:57","58478318","0","","12248608","","2019-10-21 01:14:57","2019-10-20 23:39:35","","2019-10-21 00:11:13","2019-10-21 00:05:47"
"43777806","HMAC a struct with openssl","<p>I wonder if there is a simple way to HMAC a struct with openssl, I was thinking about concatenating all of the struct fields into one buffer, but I'm not sure it is the best/optimal way.</p>

<p>I hope you can help me figure this out,</p>

<p>Thanks. </p>
","<p>HMAC outputs a hash (byte array) from input of another byte array. So - effectively you need to make a byte array (or multiple arrays) from your structure. </p>

<p>The important thing is - your structure should be unique for unique data. What I mean is - having two fields with values ""abc"" ""def"" or ""abcd"" ""ef"". If you just concatenate the values, you will get ""abcdef"" in both cases and it could be possible to authenticate wrong message. A solution could be putting some constant values as field separators.</p>
","43778057","35","<struct><openssl><hmac>","-1","0","1","2017-05-04 08:48:30","","1","","","","","2017-05-04 08:36:21","","","2017-05-04 08:48:30"
"56821343","How to get server datetime in JS?","<p>I am implementing HMAC authorization in my SPA, and I am using current datetime as part of my hash to ensure that tokens can time out. Obviously client's machine can have any datetime set and for this to be correctly checked on the server, it has to match server's date &amp; time. What is the best practice for this?</p>

<p>I can currently think of a few ways that would work:</p>

<ol>
<li>Before every request, send an API request to retrieve current server's date &amp; time (not prefered method as that would essentially double the number of ajax requests).</li>
<li>On page load, send an API request to retrieve current server's date &amp; time, and save the client's date and time as well. For any further ajax requests, compare the current time to client's time and add the same difference to the saved initial server time to essentially get the server time.</li>
<li>Same as #2, but instead of initial API request, embed the datetime in the HTML page itself.</li>
</ol>

<p>Is there any better way that I am not thinking of? Any #2 &amp; #3 caveats (with timezones, DST etc.) that I am missing?</p>

<p>Thanks!</p>
","","","34","<javascript><api><hmac>","1","","0","2019-06-29 22:48:28","","4","","","","","2019-06-29 22:48:28","","",""
"43829906","Virto Commerce Azure Empty Roles list","<p>I am trying to install the store front directly to Azure from github.  One of the required fields on the installation form is Virto Commerce Api Hmac App Id.  I think the generation of this code requires the 'Use Api' role in the user manager.</p>

<p>My problem is that the Available Roles list is empty in my Azure installation of the platform manager.</p>

<p>How do I populate this list with the built in Roles ?</p>
","<p>As it appears you have installed VC platform without sample data.</p>

<p>Because VC storefront interacted with platform only via API you should generate new Hmac security key for <code>frontend</code> user and enter it in <code>Virto Commerce Api Hmac App Id</code> on storefront installation wizard.
For generate new Hmac security key please do follow steps. </p>

<p><strong>Open Configuration-> Security-> Users-> Click on <code>frontend</code> user -> API keys -> Click on Frontend(Hmac)-> Generate</strong></p>

<p><a href=""https://i.stack.imgur.com/rrKvP.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/rrKvP.png"" alt=""enter image description here""></a></p>
","43842110","34","<api><azure><hmac><user-roles><virtocommerce>","1","1","1","2017-05-08 07:32:30","43842110","0","","1222462","","2017-05-07 09:55:19","2017-05-07 09:28:48","","","2017-05-08 07:32:30"
"35613059","iOS API key From Ruby Code","<p>I have this code in Ruby which generates a Digital Signature based on an API KEY and some content, i have try to create some iOS code to replicate this but no success can someone help me out.</p>

<p>Ruby</p>

<pre><code>key = ""ZSyEULZSKlZS/SxjUbKG1cly10gyv68hvOeIYV6QLBM="".unpack('m*').to_s
hmac = HMAC::SHA256.new key
s = ""some\nrandom\data\n""
hmac &lt;&lt; s
ds_coded = [hmac.digest].pack('m*')
</code></pre>

<p>iOS</p>

<pre><code>const char *cKey  = [@""ZSyEULZSKlZS/SxjUbKG1cly10gyv68hvOeIYV6QLBM="" cStringUsingEncoding:NSASCIIStringEncoding];
const char *cData = [@""some\nrandom\data\n"" cStringUsingEncoding:NSASCIIStringEncoding];
unsigned char cHMAC[CC_SHA256_DIGEST_LENGTH];
CCHmac(kCCHmacAlgSHA256, cKey, strlen(cKey),cData , strlen(cData), cHMAC);
NSData *HMAC = [[NSData alloc] initWithBytes:cHMAC length:sizeof(cHMAC)];
NSString *hash = NSString *hash = [HMAC base64EncodedStringWithOptions:0];
</code></pre>

<p>Both digital signature are always different. What can i change in my iOS code to make it the same as the Ruby code.</p>

<p>thanks</p>
","<p>This what at the end worked for me. </p>

<pre><code>NSData *saltData = [[NSData alloc] initWithBase64EncodedString:key options:0];
NSData *paramData = [somdata dataUsingEncoding:NSASCIIStringEncoding];
NSMutableData* hash = [NSMutableData dataWithLength:CC_SHA256_DIGEST_LENGTH ];
CCHmac(kCCHmacAlgSHA256, saltData.bytes, saltData.length, paramData.bytes, paramData.length, hash.mutableBytes);
NSString *base64Hash = [hash base64EncodedStringWithOptions:0];
</code></pre>
","35630679","34","<ios><ruby><digital-signature><sha256><hmac>","0","0","1","2016-02-25 14:53:19","","3","","2199955","","2016-02-24 21:33:52","2016-02-24 21:04:11","","","2016-02-25 14:53:19"
"55607670","Is there a way to add dynamic headers like Authorisation before running sampler?","<p>I am setting up Jmeter for permformance testing. However, my API requires HMAC authentication before hitting the API. I have the JS script for the same. </p>

<pre><code>vars.put('hmacAuthHeader', response);
</code></pre>

<p>And in the Header Manager, I have added a header as:</p>

<pre><code>Authorization: ${hmacAuthHeader}
</code></pre>

<p>After running the sampler, when I check the request headers it is still the same. Also, the hmac generation logic depends on the request I am sending to the server something like this:</p>

<pre><code>if(request['method'] == 'GET') {
    l_content_type  =   '';
} 
</code></pre>

<p>Please suggest a way to achieve this.</p>
","<p>I have the java code for it .
  // If username password is there than
          <code>AuthManager manager = new AuthManager();
            Authorization authorization = new Authorization();
            //  authorization.setURL(""http://url"");
            authorization.setUser(""username"");
            authorization.setPass(""password"");
            manager.addAuth(authorization);
            manager.setName(JMeterUtils.getResString(""auth_manager_title"")); // $NON-NLS-1$
            manager.setProperty(TestElement.TEST_CLASS, AuthManager.class.getName());
            manager.setProperty(TestElement.GUI_CLASS, AuthPanel.class.getName());</code></p>
","55608004","34","<javascript><jmeter><hmac>","1","0","1","2019-04-10 08:27:41","","0","","","","","2019-04-10 08:07:24","","","2019-04-10 08:27:41"
"59376059","HMAC-SHA1 signing without external libraries (eg CryptoJS)","<p>I need to encrypt then base64 encode a string to authenticate with Twitter's OAuth 1.1 API. </p>

<p>The platform I'm designing for provides an HMAC function so that first part is fine. However, when I try to Base64 encode the result, it's encoding the hex representation and not the bytecode version of the HMAC hashed output.</p>

<p>My working example uses CryptoJS but I need to achieve the same result without it, but using <code>btoa</code> gives a different result.</p>

<p><strong>Current working code, using CryptoJS for the HMAC then Base64 encoding:</strong></p>

<pre><code>const encrypted = CryptoJS.HmacSHA1(""message"", ""secret"");
const encoded = CryptoJS.enc.Base64.stringify(encrypted)
console.log(encrypted);
// encrypted = ""0caf649feee4953d87bf903ac1176c45e028df16""
console.log(encoded);
// encoded = DK9kn+7klT2Hv5A6wRdsReAo3xY=
</code></pre>

<p>I've been able to debug by duplicating the code within Python (my preferred language) and can see that the 'encrypted' version is a hexadecimal string, which is why the 'built in' version I've tried doesn't work.</p>

<p>EDIT: Added code for <code>btoa</code>, which gives the wrong output for what I need. Compare with output above for <code>encoded</code>:</p>

<pre><code>console.log(btoa(encrypted));
// btoa_version = ""MGNhZjY0OWZlZWU0OTUzZDg3YmY5MDNhYzExNzZjNDVlMDI4ZGYxNg==""
</code></pre>
","","","33","<javascript><twitter><hmac>","1","","0","2019-12-17 16:10:58","","2","","2034487","","2019-12-17 15:42:00","2019-12-17 14:10:30","","",""
"59420164","How to rewrite this simple C# HMACMD5 authentication code exmple to Ruby?","<p><p>From the code sample below in C#, I am trying to do this in ruby. How would to rewrite this in ruby?<p></p>

<p>Im trying to access https://apimedic.com/</p>

<p>Currently Priaid only provides support for Objective C</p>

<pre><code>    string uri = ""https://authservice.priaid.ch/login"";
    string api_key = ""myapikey"";
    string secret_key = ""mysecretkey"";
    byte[] secretBytes = Encoding.UTF8.GetBytes(secret_key);
    string computedHashString = """";

    using(HMACMD5 hmac = new HMACMD5(secretBytes))
{
    byte[] dataBytes = Encoding.UTF8.GetBytes(uri);
    byte[] computedHash = hmac.ComputeHash(dataBytes);
    computedHashString = Convert.ToBase64String(computedHash);
}

using (WebClient client = new WebClient())
{
    client.Headers[""Authorization""] = string.Concat(""Bearer "", api_key, "":"", computedHashString);
    try
    {
        string responseArray = client.UploadString(uri, ""POST"", """");
        // Deserialize token string
    }
    catch (Exception e)
    {
        // Exception is in e.Message
    }
}
</code></pre>

<p>Here is my ruby code:</p>

<pre><code>uri = ""https://authservice.priaid.ch/login"";
api_key = ""username"";
secret_key = ""secret"";

computed_hash = OpenSSL::HMAC.digest(OpenSSL::Digest::Digest.new('md5'), secret_key, uri)

computedHashString = Base64.encode64(computed_hash)

response = HTTParty.post(uri, {
  headers: {""Bearer"" =&gt; ""#{api_key}:#{computedHashString}""}
})
</code></pre>
","","","33","<c#><ruby><authentication><hmac>","-2","","0","2019-12-20 19:55:20","","2","","12568843","","2019-12-20 18:01:41","2019-12-20 05:16:43","","",""
"52535743","AES decription fails on each 1024th block with 16 wrong bytes","<p>I am trying to implement a reader is going to decrypt data and validate the data <code>HMAC + SHA256</code> at the same time.</p>

<p>Decrypting the complete data as one block and validating it afterward works. </p>

<p>The amount of data can be rather significant, so I don´t want to hold in it in an array.</p>

<p>The reader implementation works for the most part, but <strong>the result of every 1024th AES block is wrong</strong>.</p>

<pre><code>func (r *mediaReader) Read(dst []byte) (n int, err error) {
    if m := len(dst); m%r.cbc.BlockSize() != 0 {
        m = (m / r.cbc.BlockSize()) * r.cbc.BlockSize()
        dst = dst[:m]
    }

    n, err = r.limitedReader.Read(dst)

    r.cbc.CryptBlocks(dst, dst)

    tmp := r.fileLength - int64(n)
    if tmp &lt; 0 || err == io.EOF {
        n += int(tmp)
    }
    r.total += n

    r.fileLength -= int64(n)
    r.hash.Write(dst)
    if r.fileLength &lt;= 0 || err == io.EOF {
        //validate
        mac := make([]byte, 10)
        nn, rr := r.fullReader.Read(mac)

        if rr != nil {
            return n, rr
        }

        if nn != 10 {
            return n, fmt.Errorf(""not enougth data remaining"")
        }

        if !hmac.Equal(mac, r.hash.Sum(nil)) {
            return n, fmt.Errorf(""invalid media hmac\n%v\n%v"", r.hash.Sum(nil)[:10], mac)
        }
        //SUCCESS
        return n, io.EOF
    }

    return n, err
}
</code></pre>

<p>The <code>limitedReader</code> uses the <code>fullReader</code> and ends <strong>10 bytes</strong> before <code>fullReader</code> does. </p>

<p>Snippet of <code>mediaReader</code> creation:</p>

<pre><code>h := hmac.New(sha256.New, macKey)
h.Write(iv)

cbc := cipher.NewCBCDecrypter(block, iv)

media := &amp;io.LimitedReader{R: fullReader, N: length - 10}

return &amp;mediaReader{
    limitedReader: media,
    fullReader:    fullReader,
    hash:          h,
    fileLength:    fileLength,
    cbc:           cbc,
    total:         0,
}
</code></pre>

<blockquote>
  <p>16384-16399; 1 * 1024 * 16 (AES Blocksize); 16 wrong bytes
  32768-32783; 2 * 1024 * 16 (AES Blocksize); 16 wrong bytes
  49152-49167; 3 * 1024 * 16 (AES Blocksize); 16 wrong bytes ...</p>
</blockquote>

<p>Does anyone recognize what I am doing wrong?</p>
","","","32","<arrays><go><encryption><sha256><hmac>","1","","0","2018-09-27 11:17:50","","1","","","","","2018-09-27 11:17:50","","",""
"55329919","Python how to correctly encode a query string parameter that is an list of dicts for hmac sig","<p>How to I properly encode a query string parameter for hmac hashing that contains a list of dicts. Simply encoding the whole parameter dict does not work when sending a signature via a post request. The less escaped characters the better.</p>

<pre class=""lang-py prettyprint-override""><code>import urllib

# this is the 'take_profit_step_orders' inside the dict i'm encoding

example = {""take_profit_step_orders"": [{ ""percent"": 50, ""price"": 130, ""price_method"": ""bid"" }, {""percent"": 50, ""price"": 140, ""price_method"": ""bid"" }]}

print(urllib.parse.urlencode(example))

#take_profit_step_orders=%5B%7B%27percent%27%3A+50%2C+%27price%27%3A+130%2C+%27price_method%27%3A+%27bid%27%7D%2C+%7B%27percent%27%3A+50%2C+%27price%27%3A+140%2C+%27price_method%27%3A+%27bid%27%7D%5D

</code></pre>
","","","32","<python><arrays><encoding><parameters><hmac>","0","","0","2019-03-25 00:28:41","","0","","","","","2019-03-25 00:28:41","","",""
"32650008","HMAC Licensing Example Does Not Make Sense","<p>I am researching licensing solutions for a project of mine, one article has the following text:</p>

<p>""The expiration date is represented as days (not seconds) since 1/1/1970. This way it only takes two bytes to represent the date"" - [<a href=""http://www.drdobbs.com/licensing-using-symmetric-and-asymmetric/184401687?pgno=1][1]"" rel=""nofollow"">http://www.drdobbs.com/licensing-using-symmetric-and-asymmetric/184401687?pgno=1][1]</a> (under the heading ""HMAC Licensing System"" about half way down)</p>

<p>How can this be correct if the days returned are a 32-bit integer, how can this guy fit that info into 2 bytes?</p>
","<p>You can simply truncate a 32 bit integer to 16 bits. An unsigned 16 bit integer has a maximum of 65535, which, if expressing a number of days, is over 179 years.</p>
","32650131","32","<c#><byte><licensing><hmac><bits>","0","2","1","2015-09-18 10:49:03","32650131","0","","","","","2015-09-18 10:42:26","","","2015-09-18 10:49:03"
"56600007","C++ OPEN SSL Library HMAC funtion return value is not same everytime I run?","<p>I am trying HMAC SHA256 hash function from Open SSL Library with C++, However when I print the result hex values I saw that my output differs everytime I run the code. What could be the problem</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;openssl/hmac.h&gt;

int main(){
std::cout &lt;&lt;  ""Generating key for RRC"" &lt;&lt; std::endl;

std::array &lt;char, 32&gt; test = {0x69, 0x01, 0x01,  0x00, 0x01, 0x01, 0x01,  0x00, 0x01, 0x01,
                             0x00, 0x01, 0x01, 0x01,  0x00, 0x01, 0x01, 0x01,  0x00, 0x01,
                             0x00, 0x01, 0x01, 0x01,  0x00, 0x01, 0x01, 0x01,  0x00, 0x01,
                             0x00, 0x01 };

std::array &lt;char, 5&gt; string = = {0x69, 0x03, 0x01,  0x02, 0x01 };

unsigned int lengthResult;

unsigned char result[EVP_MAX_MD_SIZE];

HMAC(EVP_sha256(), (unsigned char*)test.data(), test.size(),
                            (unsigned char*)string.data(), string.size(),
                             result, &amp;lengthResult);

for (auto i:result)
    std::cout  &lt;&lt; i + 0 &lt;&lt;"" "" ;

}
</code></pre>
","<p>HMAC_SHA256 produces a SHA256 sum at the end, which is 32 bytes. EVP_MAX_MD_SIZE is 64 bytes, initialized with random memory garbage. If I compile and run your code, the first 32 bytes are always the same.</p>
","56600590","31","<c++><openssl><hmac>","1","1","1","2019-06-14 14:51:41","56600590","6","","","","","2019-06-14 14:17:29","","","2019-06-14 14:51:41"
"59734702","How to send HMAC header with Rest Assured","<p>I am trying to convert my Postman script into Rest Assured library, but i am having difficulties sending 'content-hmac' as a proper header.</p>

<p>This is my postman script, and everything works fine using 'content-hmac'.</p>

<p><a href=""https://i.stack.imgur.com/ZkJql.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/ZkJql.png"" alt=""enter image description here""></a></p>

<p>But, when i tried the same thing over Rest Assured i got: </p>

<pre><code>""errors"": [
        {
            ""type"": ""FATAL"",
            ""errorCode"": ""LOW_LEVEL"",
            ""message"": ""Low-level web-layer error.""
        }
    ]
</code></pre>

<p>same as sending the wrong HMAC with postman.</p>

<p><a href=""https://i.stack.imgur.com/bBZZg.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/bBZZg.png"" alt=""enter image description here""></a></p>

<p>This is my restAssured script.</p>

<pre><code>public void PringReqParams002(){

Map&lt;String, String&gt; headers = new HashMap&lt;String, String&gt;();
headers.put(""Content-Type"", ""application/json"");
    headers.put(""api-version"", ""1"");
    headers.put(""Accept"", ""application/json"");
    headers.put(""content-hmac"", ""7dea401e45c3b1e71611abb876652a68b16c1e3e2cc8844dd2d7a0f78df322b7"");
    given()
    .auth()
    .preemptive()
    .oauth2(""rJ12q-2NedsDqJ0eL7u"")

    .headers(headers)
    .when()
    .log()
    .all()
    .get(""https://test/account-holders/gFvh1Rlto0dHISe1jCIdnrtlDs9URbi4I95TH-mliaw=/card-payees?skipCardDetails=true&amp;page=0&amp;size=16&amp;total=-1"")
    .then()
    .log()
    .all()
    ;



}
</code></pre>

<p>This is my response:
<a href=""https://i.stack.imgur.com/ukyPR.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/ukyPR.png"" alt=""enter image description here""></a></p>

<p>note: if i copy all the details generated from Rest Assured into postman, everything works fine into postman.</p>

<p>-If i tried the same thing using HttpClient (java) / RestSharp(C#), works perfectly fine.
Any help is appreciated.</p>
","","","30","<rest-assured><hmac>","0","","0","2020-01-16 08:28:48","","0","","5210482","","2020-01-16 08:28:48","2020-01-14 13:25:41","","",""
"53343753","Strange behaviour in php hash_hmac","<p>I am creating a simple api in php.</p>

<pre><code>$signature_string = ""MARCIGETapi/v1/test/636779232000000000FIXXISOFTRGllcyBpc3QgZWluIFRlc3Q=""
$new_sig = hash_hmac(""sha256"",  $signature_string, $api_key, false);
echo $new_sig;
</code></pre>

<blockquote>
  <p>24f305d19cad2e848b3407f64bc21ada0ff1978a2487a23f26aa35f3a1c8204a</p>
</blockquote>

<p><strong>Now explain me this</strong>:</p>

<pre><code>$new_sig = hash_hmac(""sha256"", ""MARCIGETapi/v1/test/636779232000000000FIXXISOFTRGllcyBpc3QgZWluIFRlc3Q="" , $api_key, false);
echo $new_sig;
</code></pre>

<blockquote>
  <p>c1d2347e60a648838fd8a98a41174fc9a4b18371e18261931f3337951b8a6cdf</p>
</blockquote>

<p>The second one is the expected one I was able to generate on the c# client.</p>
","<p>I`ve had the same problems in one of my projects.
Just try:</p>

<pre><code>$new_sig = hash_hmac(""sha256"", trim($signatur_string,"" ""), $api_key);
</code></pre>
","53343936","30","<php><sha256><hmac>","0","0","1","2018-11-16 19:04:56","53343936","4","","","","","2018-11-16 18:49:53","","","2018-11-16 19:04:56"
"59797026","Can't perform HmacSHA256 hashing in Scala.js","<p>I'm trying to implement a method that will calculate &amp; validate the HmacSHA256 signature for <a href=""https://api.slack.com/docs/verifying-requests-from-slack"" rel=""nofollow noreferrer"">verifying a slack request</a>. For... various reasons... I'm using <code>scala.js</code>, and therefore I don't have access to the usual <code>javax.crypto</code> imports. </p>

<p>From slack's documentation on validating a signed request from Slack:</p>

<blockquote>
  <ul>
  <li>With the help of HMAC SHA256 implemented in your favorite programming, hash the above basestring, using the Slack Signing Secret
  as the key.</li>
  <li>Compare this computed signature to the X-Slack-Signature header on the request.</li>
  </ul>
</blockquote>

<p>Well, the first step there is a problem. In scala.js, the <code>javax.crypto</code> package isn't available, so the following won't work:</p>

<pre><code>import javax.crypto.Mac 
import javax.crypto.spec.SecretKeySpec

def asHmacSHA256(key: String, baseString: String): Array[Byte] = {
  val secretKeySpec = new SecretKeySpec(key.getBytes(), ""HmacSHA256"")
  val hmac = Mac.getInstance(""HmacSHA256"")
  hmac.init(secretKeySpec)
  hmac.doFinal(baseString.getBytes())
}
</code></pre>

<p>How can I work around this - is there a good hashing library that works with scala.js, or will I have to pull in some <code>js</code> dependency, or am I going to have to... <em>gulp</em>... roll my own hashing algorithm?</p>
","<p>there is one project that tends to do that (not sure about quality) <a href=""https://github.com/fluencelabs/crypto"" rel=""nofollow noreferrer"">https://github.com/fluencelabs/crypto</a>. Internally it uses CryptoJS (and maybe using it directly will be even simpler or more stable way). But still you can see how it is used in fluencelabs/crypto.</p>
","59799170","30","<scala><slack><hmac><scala.js><scala-java-interop>","2","1","1","2020-01-18 09:25:47","59799170","1","","","","","2020-01-18 02:23:34","","","2020-01-18 09:25:47"
"59792095","OpenSSL::HMAC.hexdigest PHP equivalent won't print the same result as ruby one","<p>This is a ruby code i need to convert to PHP :</p>

<pre><code>print OpenSSL::HMAC.hexdigest(OpenSSL::Digest.new(""sha1""), 'hello', Base64.encode64('bonjour'))
</code></pre>

<p>The output :</p>

<blockquote>
  <p>62ac34e5d28563d6a50272d660805d1f8c791e41</p>
</blockquote>

<p>This is my PHP code :</p>

<pre><code>echo hash_hmac('sha1', base64_encode('bonjour'), 'hello');
</code></pre>

<p>The output :</p>

<blockquote>
  <p>89ebf8bd3d92bf3283aa4c5f24072820258367e4</p>
</blockquote>

<h3>I can't found a way to have <code>62ac34...</code>.</h3>

<p>I tried also :</p>

<pre><code>echo hash_hmac('sha1', 'bonjour', 'hello'); // 1
echo hash_hmac('sha1', 'hello', 'bonjour'); // 2
echo hash_hmac('sha1', base64_encode('hello'), 'bonjour'); // 3
echo hash_hmac('sha1', 'hello', base64_encode('bonjour')); // 4
echo base64_encode(hash_hmac('sha1', 'hello', 'bonjour', TRUE)); //5
</code></pre>

<p>Which is wrong also. The output :</p>

<pre><code>bed443484cc49c41c053a11dd15e44d4f79c524f // 1
16923f8d6e9afd345cf947fc963cad73aa12b76c // 2
8e5989976296c76f0462fe33c6bc2dec48bdcb5a // 3
ca237e79f77e6d9739db45fc5d162da3a4036639 // 4
FpI/jW6a/TRc+Uf8ljytc6oSt2w= // 5
</code></pre>

<p>I'm totally desperate.</p>

<h2>EDIT</h2>

<p>The answer of @Casper doesn't respond completely to my expectation. In case of simple string like <code>bonjour</code> there is no problem. But when I put some more complex string, a json string or a longer string (> 60), problems appear.</p>

<p>First of all, following the <a href=""https://ruby-doc.org/stdlib-2.4.0/libdoc/base64/rdoc/Base64.html"" rel=""nofollow noreferrer"">Base64 Ruby module</a> :</p>

<blockquote>
  <p>encode64(bin)</p>
  
  <blockquote>
    <p>Returns the Base64-encoded version of bin. This method complies with RFC 2045. Line feeds are added to every 60 encoded characters.</p>
  </blockquote>
</blockquote>

<p>So, in order to have the same base64 encoded data in PHP, I need to insert <code>\n</code> every 60 encoded character and also at the end of the string. To do this, PHP provides the <a href=""https://www.php.net/manual/en/function.chunk-split.php"" rel=""nofollow noreferrer"">chunk_split()</a> function. </p>

<h3>Thus, those commands output the same string :</h3>

<pre><code>chunk_split(base64_encode($json), 60, '\n'); // PHP
Base64.encode64(json) # Ruby
</code></pre>

<h3>But it doesn't resolve my problem</h3>

<p>The result is still different between PHP and Ruby : </p>

<p>PHP :</p>

<pre><code>$json = '{""data"":[""bonjour""],""id"":true,""price"":false,""oper"":null}';
$base64 = chunk_split(base64_encode($json), 60, '\n');
$hash = hash_hmac('sha1', $base64, 'bonjour');
</code></pre>

<pre><code>// Ouput from var_dump()
eyJkYXRhIjpbImJvbmpvdXIiXSwiaWQiOnRydWUsInByaWNlIjpmYWxzZSwi\nb3BlciI6bnVsbH0=\n // $base64
fd044c309bea13396ed8df47b5c606d950222ceb // $hash
</code></pre>

<p>Now in Ruby :</p>

<pre><code>json_body = '{""data"":[""bonjour""],""id"":true,""price"":false,""oper"":null}'
encoded_body = Base64.encode64(json_body)
hash = OpenSSL::HMAC.hexdigest(OpenSSL::Digest.new(""sha1""), 'bonjour', encoded_body)
</code></pre>

<pre><code># Ouput from puts var.inspect
eyJkYXRhIjpbImJvbmpvdXIiXSwiaWQiOnRydWUsInByaWNlIjpmYWxzZSwi\nb3BlciI6bnVsbH0=\n # base64
e168f9efe96e9424e22de765c72018c5a3f3437f # hash
</code></pre>

<p>Notice that <code>$base64</code> PHP and <code>base64</code> Ruby variable are the same.</p>

<p>What am I doing wrong ? I don't know Ruby, is <code>puts</code> and <code>.inspect</code> the best way to debug my code ? </p>
","<p>It seems Ruby is adding newlines to the base64 encoded string, while PHP is not.</p>

<p>Ruby:</p>

<pre><code>Base64.encode64('bonjour')
=&gt; ""Ym9uam91cg==\n""
</code></pre>

<p>PHP:</p>

<pre><code>base64_encode('bonjour')
=&gt; ""Ym9uam91cg==""
</code></pre>

<p>So now we know how to fix it in PHP:</p>

<pre><code>hash_hmac('sha1', base64_encode('bonjour') . ""\n"", 'hello');
=&gt; ""62ac34e5d28563d6a50272d660805d1f8c791e41""
</code></pre>

<p>Or fixing it in Ruby:</p>

<pre><code>OpenSSL::HMAC.hexdigest(OpenSSL::Digest.new(""sha1""), 
                        'hello', Base64.encode64('bonjour').chomp)
=&gt; ""89ebf8bd3d92bf3283aa4c5f24072820258367e4""
</code></pre>

<h3>Part 2</h3>

<p>In PHP, as well as in Ruby, <code>'\n'</code> is not the same as <code>""\n""</code>. The first one produces two characters (<code>\</code> followed by <code>n</code>), the second one produces a newline. </p>

<p>So to fix your code you need to use newlines, not slash+n, in your strings:</p>

<pre><code>$base64 = chunk_split(base64_encode($json), 60, ""\n"");
                                                ^^^^
</code></pre>

<p>You could also strip the newlines from the Ruby base64 encoded string with <code>gsub</code>, which means you will not need to use any tricks in your PHP code:</p>

<pre><code>encoded_body = Base64.encode64(json_body).gsub(""\n"", '')
</code></pre>
","59792576","30","<php><ruby><openssl><base64><hmac>","0","1","1","2020-01-18 06:44:54","59792576","1","","12528090","","2020-01-17 23:59:35","2020-01-17 17:19:44","","2020-01-18 06:44:54","2020-01-17 17:53:01"
"58031305","How can I change laravel Hashing to be using Hash_hmac(Sha3-512,'mykey') instead of Bcrypt?","<p>I have a client whose existing database implements sha3-512 using the hmac, and I am building a laravel app that will make use of their existing user data which is on sha3-512 hash. They have existing app already using same service. It means i have to make laravel to use sha3-512 instead of Bcrypt.
Anyone knows how I can achieve this feat?
I have looked and tried suggestion here
<a href=""https://stackoverflow.com/questions/42704782/changing-laravel-5-4-password-encryption-and-table-column-names"">Changing Laravel 5.4 password encryption and table column names</a>
But it did not work.</p>

<p>Thank you guys. </p>
","","","30","<laravel><hash><hmac><laravel-6>","0","","0","2019-09-21 09:18:23","","2","","7528944","","2019-09-21 09:18:23","2019-09-20 15:30:09","","",""
"58492809","HMAC/SHA256 Content Hash Generate","<p>Good afternoon everyone,</p>

<p>I am seeking information on how to properly generate a content hash using HMAC/SHA156 on my Wix.com site which uses Corvid for coding. I am very new to coding and would appreciate any feedback.</p>

<p>Here is my backend code: </p>

<pre><code>import { fetch } from 'wix-fetch';
import {wixData} from 'wix-data';
import * as HMAC from 'public/hmac';
import * as Core from 'public/core';
import * as Base64 from 'public/enc.base64';
import * as SHA256 from 'public/sha256';
import * as jquery from 'public/jquery';
import * as HmacSHA256 from 'public/hmac-sha256';
import * as CryptoJS from 'public/crypto-js';
import wixUsers from 'wix-users-backend';

$w.onReady(function () {

});


export function createLoyalty(customerInfo) {
    function conversion() {
    var secret = ""signature"";
    var string2Sign = body;
    var hash = CryptoJS.HmacSHA256(string2Sign, secret);
    var signature = CryptoJS.enc.Base64.stringify(hash);
    }
            const url = ""https://whisqr.com/api/v1.2/user/customer/"";

            const headers = {
                ""X-Public"": 'xxxxxxxAPI Public Keyxxxxxxx', //
                ""X-Hash"": ""signature"",
                ""Content-Type"": ""application/json"" //the content type
            };
            let body = {
                ""email"": ""email"",
                ""firstname"": ""firstName"",
                ""password"": ""password""
            };

            return fetch(url, {
                ""method"": ""POST"",
                ""timeout"": 0,
                ""headers"": headers,
                ""body"": JSON.stringify(body) //if there is a body
            })

}
</code></pre>

<p>Here is my form page code:</p>

<pre><code>import {wixData} from 'wix-data';
import {fetch} from 'wix-fetch';
import {createLoyalty} from 'backend/Loyalty';
import wixLocation from 'wix-location';

$w.onReady(function () {

});

export function signupbtn_Click(event, $w) {
    let customerInfo = `${$w('#input3').value} ${$w('#input1').value} ${$w('#input4').value}`;
 createLoyalty(customerInfo)
          .then(loyalty =&gt; {
            console.log(""member created"");
            wixLocation.to(""/striking-pursuits/loyalty"")
                    }
     );
}
</code></pre>
","","","30","<hash><sha256><hmac><wixcode>","0","","0","2019-10-30 22:04:47","","1","","12221855","","2019-10-30 22:04:47","2019-10-21 19:15:59","","",""
"33627149","Can file write mode affect HMAC of text written into file?","<p>in an application we have a file with data, which we want to ""protect"" from tampering. By ""protect"" I mean - make it hard for a user to just edit the text file.</p>

<p>Data is stored in JSON format. Before writing to the file, we create JSON string and calculate HMAC. Then both of the information are written to a file. When file is read, we again generate the HMAC of the data and compare it to the stored hash.</p>

<p>It sounds like something trivial and something that should not cause any issues, however we are getting a lot of reports that this check fails. We get them also from our testers, who definitely didn't tamper the file.</p>

<p>I'm wondering if it's possible that reading/writing file could affect the process. Due to some legacy code, the file is read and written in binary mode. I'm wondering if this could affect the process? I'm not going to ""let's change it and see what happens"" before I have a confirmation that this could be the case.</p>

<p>The file is read and stored on the same system all the time, it's not transferred anywhere.</p>

<p>All of the operations are performed using Lua, if that makes any difference.</p>

<p>Thank you
Krystian</p>
","","","30","<file><lua><hmac><sha512>","0","","0","2015-11-10 09:51:53","","3","","","","","2015-11-10 09:51:53","","",""
"40556748","Is my method of generating Initialisation Vector for Cipher Block Chaining secure?","<p>In my message I have header containing unique message ID and timestamp (along with some other data) and payload. I sign whole message using HMAC with first key and MD5 or SHA-256 as hash algorythm. Then i use first 16 bytes of signature as IV for encrypting payload with CBC AES with second key. I attach signature to the message.</p>

<p>Is My IV unpredictable enough?
Is signing a plain payload making my security vulnerable?</p>
","<p>Just create the IV with a cryptographic random (CPRNG) function, use it and pre-pend it to the encrypted data for use in decryption.</p>

<p>The signing is unclear, the entire message except the MAC value should be signed, that is any pre-amble, IV, MAC seed and encrypted message, IOW encrypt and then MAC.</p>
","40557474","30","<security><encryption><aes><hmac>","0","2","1","2016-11-11 22:55:49","","4","","","","","2016-11-11 21:47:17","","","2016-11-11 22:55:49"
"59790455","Python Hmac-SHA256 different output than expected","<p>I had Python scripts that generate a signature to access the shopee API</p>

<p><a href=""https://i.stack.imgur.com/28wzI.png"" rel=""nofollow noreferrer"">screenshot from shopee documentation</a></p>

<pre><code>def verify_push_msg(self):

url = ""https://partner.shopeemobile.com/api/v1/shop/get ""
request_body = '{ ""partner_id"": 844103, ""shopid"": 30207467, ""timestamp"": 1579104428 }'
base_string = url + '|' + request_body

secret_key = &lt;**SECRET KEY HERE**&gt;

cal_auth = hmac.new(secret_key, bytes(base_string, 'latin-1'), hashlib.sha256).hexdigest()

print(cal_auth)
</code></pre>

<p>The output should be </p>

<blockquote>
  <p>f6e26cccdb02d751219711f57e5db7d8d35f55a934244f4b67768dcc7b8ed7c8</p>
</blockquote>

<p>But when I tried running that script I got</p>

<blockquote>
  <p>c31c825412856d29400602655c5cdd3cf47638d7bd897b870988ee27ba7a5c6b</p>
</blockquote>

<p>Whats wrong with my code?</p>

<p>(Sorry for my bad English).</p>
","","","29","<python><python-3.x><hmac>","0","","0","2020-01-17 16:16:27","","6","","5943461","","2020-01-17 16:16:27","2020-01-17 15:37:33","","",""
"28748224","NSData displayed characters to NSString","<p>I am trying to copy some php to Objective-C and have stumbled upon a slight problem.</p>

<p>The php uses the line <code>substr(hash_hmac('sha256', $string, $token), 0, 20)</code> which outputs</p>

<pre><code>ac56093452148b1f18e4
</code></pre>

<p>In Objective-C I use <code>CCHmac</code> like this:</p>

<pre><code>NSData *hmacForKeyAndData(NSString *token, NSString *string)
{
    const char *cKey  = [key cStringUsingEncoding:NSASCIIStringEncoding];
    const char *cData = [data cStringUsingEncoding:NSASCIIStringEncoding];
    unsigned char cHMAC[CC_SHA256_DIGEST_LENGTH];
    CCHmac(kCCHmacAlgSHA256, cKey, strlen(cKey), cData, strlen(cData), cHMAC);
    return [[NSData alloc] initWithBytes:cHMAC length:sizeof(cHMAC)];
}
</code></pre>

<p>which returns <code>NSData</code> which when logged is:</p>

<pre><code>&lt;ac560934 52148b1f 18e4385b cfa4f8cd cebe12c3 99d3281d 9f48c312 d6802449&gt;
</code></pre>

<p>which looks the exact same as what php returns from <code>hash_hmac('sha256', $string, $token)</code></p>

<p>I think you can see my problem here. I have the right output (It just needs trimming to 20 characters), but as <code>NSData</code>. If I convert the <code>NSData</code> to an <code>NSString</code> then I get a load of funny characters. I need to take the <code>NSData</code> <code>&lt;ac560934&gt;</code> and convert it into the string <code>ac560934</code>
Is this even possible? Or should I be using a different approach for the <code>hash_mac</code>?</p>

<p>Thanks</p>
","","","29","<php><objective-c><nsstring><nsdata><hmac>","0","","0","2015-02-26 17:01:56","","2","","1077601","","2015-02-26 17:01:56","2015-02-26 16:55:43","2015-02-26 17:18:10","",""
"44613847","hmac HTTP API request","<p>I am trying to create a iOS app that connects to the api server of a forum. The connection itself works fine, the headers are correct, but my code on how I create a hmac and how I set the signature is incorrect.</p>

<p>Code of the signature string:</p>

<pre><code>NSString *signature = [[[self getHMACSHA256ForData:[[NSString stringWithFormat:@""%li%@"", requestId, contentDigest] dataUsingEncoding:NSUTF8StringEncoding] keyValue:KEY]  base64EncodedStringWithOptions:NSDataBase64EncodingEndLineWithCarriageReturn] stringByReplacingOccurrencesOfString:@""\r\n"" withString:@""""];
</code></pre>

<p>Code of the getHMACSHA256ForData method:</p>

<pre><code>- (NSData *)getHMACSHA256ForData:(NSData *)data keyValue:(NSString *)keyValue
{
    CCHmacContext ctx;
    const char *key = [keyValue UTF8String];
    const char *str = [data bytes];
    unsigned char mac[CC_SHA256_DIGEST_LENGTH];

    CCHmacInit(&amp;ctx, kCCHmacAlgSHA256, key, strlen(key));
    CCHmacUpdate(&amp;ctx, str, [data length]);
    CCHmacFinal(&amp;ctx, mac);

    return [NSData dataWithBytes:mac length:CC_SHA256_DIGEST_LENGTH];
}
</code></pre>

<p>I am trying to do it as the same as the PHP client of the API: <a href=""https://gist.github.com/sevvlor/3419c34adb3ee93e42729208cfa33ef7"" rel=""nofollow noreferrer"">https://gist.github.com/sevvlor/3419c34adb3ee93e42729208cfa33ef7</a></p>

<p>Thanks for any help.</p>
","","","28","<objective-c><api><http><hmac>","0","","0","2017-06-18 10:03:47","","3","","","","","2017-06-18 10:03:47","","",""
"58625737","Decrypting plantext using HMAC of crypto++","<p>I have a problem using HMAC of crypto++ library</p>

<p>I have used this link for making a encrypted message <a href=""https://www.cryptopp.com/wiki/HMAC"" rel=""nofollow noreferrer"">crypto++-HMAC</a> and it works okay </p>

<pre><code>AutoSeededRandomPool prng;
SecByteBlock key(16);
prng.GenerateBlock(key, key.size());
string plain = ""HMAC Test"";
string mac, encoded;
// Pretty print key
encoded.clear();
StringSource ss1(key, key.size(), true,
new HexEncoder(
    new StringSink(encoded)
) // HexEncoder
); // StringSource

cout &lt;&lt; ""key: "" &lt;&lt; encoded &lt;&lt; endl;
cout &lt;&lt; ""plain text: "" &lt;&lt; plain &lt;&lt; endl;

try
{
HMAC&lt; SHA256 &gt; hmac(key, key.size());

StringSource ss2(plain, true, 
    new HashFilter(hmac,
        new StringSink(mac)
    ) // HashFilter      
); // StringSource
}
catch(const CryptoPP::Exception&amp; e)
{
cerr &lt;&lt; e.what() &lt;&lt; endl;
exit(1);
}
// Pretty print
encoded.clear();
StringSource ss3(mac, true,
new HexEncoder(
    new StringSink(encoded)
) // HexEncoder
); // StringSource

cout &lt;&lt; ""hmac: "" &lt;&lt; encoded &lt;&lt; endl;
</code></pre>

<p>now on the other side I want to decrypt this message and get the real plain Text
but I don't get any result yet .I've checked steps of this link <a href=""https://www.cryptopp.com/wiki/HexDecoder"" rel=""nofollow noreferrer"">decode</a> but it didn't help me. I don't know where I should use Key?</p>

<p>please guide me through finding a solution</p>
","<p>I understood that HMAC is not an encryption algorithm, It's an encoding algorithm. </p>

<p>others can see our messages using HMAC but they cannot give us messages which are unverified.</p>

<p>and all of message bytes can be encoded for sending and in receiver part we decode with our key and check authority of messages, encoded section of message has fix size according to hashing function that we use(MD5, SHA1, SHA256)</p>
","58816379","28","<c++><decode><hmac>","0","0","1","2019-11-12 10:10:14","58816379","8","","","","","2019-10-30 12:47:39","","","2019-11-12 10:10:14"
"57278398","How to use HMAC library in Python as shown in this Java example?","<p>I need to build an API in Python. However, <a href=""https://marketplace.api.1worldsync.com/api/"" rel=""nofollow noreferrer"">https://marketplace.api.1worldsync.com/api/</a> only provide a Java code example.</p>

<p>The URL is required to not be encoded before hash, which is not allowed by hmac function.</p>

<p>I have tried to hash it with URL encoded but failed to match the example provided.</p>

<pre><code>msg = '/context/V2/products?app_id=9af172d4&amp;searchType=advancedSearch&amp;query=itemPrimaryId:A00007252147019&amp;access_mdm=computer&amp;TIMESTAMP=2015-10-19T09:58:37Z&amp;geo_loc_access_latd=9.91&amp;geo_loc_access_long=51.51'

base64.b64encode(hmac.new(b'XXXXX', msg=msg.encode(), digestmod=hashlib.sha256).digest()).decode()
</code></pre>

<p><a href=""https://marketplace.api.1worldsync.com/api/doc/1WorldSync_Content1_API_HMAC_Guide_v1.1.pdf"" rel=""nofollow noreferrer"">https://marketplace.api.1worldsync.com/api/doc/1WorldSync_Content1_API_HMAC_Guide_v1.1.pdf</a>
Here is the documentation. The expected outcome is on Page 9.</p>

<p>Thanks in advance!</p>
","","","27","<python><hmac>","0","","0","2019-07-30 19:45:37","","0","","1491895","","2019-07-30 19:45:37","2019-07-30 18:57:26","","",""
"53748442","Secret from Gogs hook (failing to get on python3)","<p>I'm configuring a gogs hook, I have an API that receives this POST from push
e.g. </p>

<p>secret: myS3cr3t</p>

<p>it's supposed that "" Secret will be sent as SHA256 HMAC hex digest of payload via  <code>X-Gogs-Signature</code>  header.""</p>

<p>then in python3 I got it like this:</p>

<p>message is the payload (json body) from the request and the key i set it on env var </p>

<pre><code>import hashlib
import hmac

def get_secret_signature(message, secret):
   signature = hmac.new(bytes(key, 'utf-8'), bytes(message, 'utf-8'), hashlib.sha256).hexdigest()
   return signature 
</code></pre>

<p>but when checking the hook is failing cause the signature sent in X-Gogs-Signature never match with the signature generated on python</p>

<p>even comparing the logic with jenkins gogs plugin:</p>

<pre><code>public static String encode(String data, String key) throws Exception {
        final Charset asciiCs = Charset.forName(""UTF-8"");
        final Mac sha256_HMAC = Mac.getInstance(""HmacSHA256"");
        final SecretKeySpec secret_key = new javax.crypto.spec.SecretKeySpec(asciiCs.encode(key).array(), ""HmacSHA256"");
        sha256_HMAC.init(secret_key);
        return Hex.encodeHexString(sha256_HMAC.doFinal(data.getBytes(""UTF-8"")));
}
</code></pre>

<p>I think it's the same logic in python, obviously shorter in python ;)</p>
","<p>It seems that the variable that had the payload was not escaping some characters, since I'm using the python framework Bottle this is the right way to get the payload:</p>

<pre><code>payload = request._get_body_string()
gogs_signature = request.get_header('X-Gogs-Signature')

signature = get_secret_signature(payload, secret)
.
.
.
if gogs_signature != signature:
   print(""Signature error"")

def get_secret_signature(message, secret):
   signature = hmac.new(bytes(key, 'utf-8'), message, hashlib.sha256).hexdigest()
   return signature
</code></pre>
","53753321","27","<python><python-3.x><sha256><hmac><gogs>","1","0","1","2018-12-13 00:20:38","53753321","0","","","","","2018-12-12 17:34:55","","","2018-12-13 00:20:38"
"58009903","Access violation when using OpenSSL's HMAC","<p>I'm trying to do an HMAC-SHA512 on some data using OpenSSL.  I get an ""<code>Exception thrown at 0x... (libcrypto-1_1-x64.dll) in Program.exe: 0xC0000005: Access violation writing location 0x...</code>"" error when executing the following code:</p>

<pre><code>int main(int argc, char** argv)
{
  uint8_t* data[] = { 0x14, 0xf7, 0xbd, 0x95, 0x57, 0x9a, 0x7e, 0xa1, 0x5c, 0xf7, 0x27, 0x91, 0x0d, 0x61, 0x58, 0x01, 0xa3, 0x12, 0x17, 0x54, 0x0b, 0x2e, 0xb4, 0xc5, 0xb1, 0xeb, 0xab, 0xe0, 0x43, 0x9b, 0x8e, 0x1f, 0x39, 0x7d, 0x85, 0x1a, 0x3a, 0x4b, 0x9c, 0xf4, 0xbf, 0x31, 0x55, 0x72, 0x41, 0xf5, 0xdb, 0xcb, 0xb3, 0xa6, 0xb5, 0xb8, 0x82, 0xe5, 0xef, 0x18, 0x72, 0xa0, 0x59, 0x08, 0x9b, 0xfa, 0x17, 0xa3 };
  uint8_t* key = ""some_rand_pw"";
  uint8_t* result = malloc(64);
  memset(result, 0, 64);
  HMAC(EVP_sha512(), key, 12, data, 64, result, (unsigned int)64); //ERROR
}
</code></pre>

<p>I would use <code>uint8_t* result = HMAC(EVP_sha512(), key, 12, data, 64, NULL, NULL)</code>, but it isn't thread safe, and this will be a multithreaded program.  Anyone have any idea what I did wrong here?</p>

<p>I'm using Visual Studio 2017 with 64-bit OpenSSL pre-built for Windows.</p>
","<p>Your code is wrong. <code>data</code> must be an array of <code>uint8</code>, but you declared it as an array of pointers to <code>uint8</code>.</p>

<p>Furthermore the last parameter of <code>HMAC</code> must be a <em>pointer</em> to <code>unsigned int</code> but you provided an <code>unsigned int</code>, that's the reason for the crash.</p>

<p>Your compiler should have warned you. Compile with <code>-Wall</code>.</p>

<p>Corrected (untested) code:</p>

<pre><code>int main(int argc, char** argv)
{
  uint8_t data[] = { 0x14, 0xf7, 0xbd, 0x95, 0x57, 0x9a, 0x7e, 0xa1, 0x5c, 0xf7, 0x27, 0x91, 0x0d, 0x61, 0x58, 0x01, 0xa3, 0x12, 0x17, 0x54, 0x0b, 0x2e, 0xb4, 0xc5, 0xb1, 0xeb, 0xab, 0xe0, 0x43, 0x9b, 0x8e, 0x1f, 0x39, 0x7d, 0x85, 0x1a, 0x3a, 0x4b, 0x9c, 0xf4, 0xbf, 0x31, 0x55, 0x72, 0x41, 0xf5, 0xdb, 0xcb, 0xb3, 0xa6, 0xb5, 0xb8, 0x82, 0xe5, 0xef, 0x18, 0x72, 0xa0, 0x59, 0x08, 0x9b, 0xfa, 0x17, 0xa3 };
  uint8_t* key = ""some_rand_pw"";
  uint8_t* result = malloc(64);
  unsigned int len;
  memset(result, 0, 64);
  HMAC(EVP_sha512(), key, 12, data, 64, result, &amp;len);
}
</code></pre>

<p>There is still room for improvement though.</p>
","58010063","27","<c><openssl><hmac>","0","0","1","2019-09-19 11:56:37","","0","","","","","2019-09-19 11:23:49","","2019-09-19 11:56:37","2019-09-19 11:32:12"
"57279529","Is it safe to compute an HMAC with an empty message","<p>I have an API where read access is open to anyone, but write (POST, UPDATE, DELETE) requires an authentication header. The header is just an HMAC value, computed from a secret key, along with the body params of the request as the message.</p>

<p>This seems to work well for POST and UPDATE, but I am concerned for DELETE, because there are no body params to use as a message. So, would using an empty message when computing an HMAC value give away the secret key?</p>

<p>Using Sha256 for a message digest algorithm.</p>
","","","26","<authentication><authorization><hmac>","0","","0","2019-07-30 20:25:02","","0","","","","","2019-07-30 20:25:02","","",""
"53933863","HMAC apisign in a requests headers but headers must be str error?","<pre><code>    apikey = '$mykey'
    apisecret = '$mykeysecret'
    nonce = str(int(time.time() * 1000))
    uri = 'https://somewebsite.com/api/v1.5/account/getbalances?apikey='+apikey+'&amp;nonce='+nonce
    sign = hmac.new(b'apisecret', b'uri', hashlib.sha512)
    response = requests.get(uri, headers={'apisign': sign}, timeout=10)
    print(json.dumps(response, sort_keys=True, indent=4))

 """""" The following are the example provided by the website """"""
    # $ch = curl_init($uri);
    # curl_setopt($ch, CURLOPT_HTTPHEADER, array('apisign:'.$sign));
    # $execResult = curl_exec($ch);
    # $obj = json_decode($execResult);
    # url = ""https://somewebsite.com/api/v1.5/account/getbalances?apikey=API_KEY""
</code></pre>

<p>I just can't solve this after 2 hours of research. It now says headers need to be str. But using str{'apisign': sign} it says str object has no item.</p>
","<p>You are passing the dictionary correctly into the headers argument, but error is saying the value of <code>sign</code> is not a string.  <code>sign</code> is a HMAC object and needs to be converted to a string:</p>

<pre><code>&gt;&gt;&gt; print(sign)
&lt;hmac.HMAC object at 0x03337950&gt;
</code></pre>

<p>I would take a look at calling <code>sign.digest()</code> to see if it returns the string you are expecting.  If it is, then you can replace <code>headers={'apisign': sign}</code> with <code>headers={'apisign': sign.digest()}</code>.</p>
","53937422","24","<python><python-requests><hmac>","0","1","1","2018-12-26 21:36:25","53937422","0","","","","","2018-12-26 15:17:14","","","2018-12-26 21:36:25"
"58094306","i need to get the header part to get converted to hmacSha to generate a token","<p>i have a code of php which generates a token based on the header parameter details.what i need is to use C# code to generate a token of hmacSha256</p>

<pre><code>$header = [
'apiKey' =&gt; 'pqrstuv-012345678901234567890123456789ab',
'userEmail' =&gt; 'test@test.com',
'userFirstName' =&gt; 'Raymond',
'userLastName' =&gt; 'Smith',
'userId' =&gt; 123,
'timestamp' =&gt; time()
];
$token = hash_hmac('sha256', http_build_query($header),
'012345678901234567890123456789012345678901234567890123456789abcd');
</code></pre>

<p>here is my php code which generate a token using hash_hmac (sha256, ) function . but how can i generate token of hash_hmac256  in c#</p>
","","","24","<c#><php><hmac>","0","","0","2019-09-25 08:31:13","","5","0","","","","2019-09-25 08:31:13","","",""
"58366008","comparing HMACSHA256 hash in C# for telegram login","<p>i am implementing a telegram login for a website by following the official tutorial <a href=""https://core.telegram.org/widgets/login#checking-authorization"" rel=""nofollow noreferrer"">https://core.telegram.org/widgets/login#checking-authorization</a></p>

<p>while comparing the generated hash with the one received the string is not matching.
What am i missing ?</p>

<pre><code>        {
            string dataCheckString =
                $""auth_date={loginData.AuthDate}\nfirst_name={loginData.FirstName}\nid={loginData.Id}\nphoto_url={loginData.PhotoUrl}\nusername={loginData.Username}"";
            var secretKey = Sha256Hash(""&lt;bot_token&gt;"");

            var myHash = HashHmac(Encoding.UTF8.GetBytes(secretKey), Encoding.UTF8.GetBytes(dataCheckString));

            var myHashStr = Concat(myHash.Select(i =&gt; i.ToString(""x2"")));
            if (myHashStr == loginData.Hash)
            {
                // Data is from telegram
            }


            return NotFound();
        }```


</code></pre>

<pre><code>    private static string Sha256Hash(string value)
    {
        using (SHA256 hash = SHA256.Create())
        {
            return Concat(hash.ComputeHash(Encoding.UTF8.GetBytes(value)).Select(i =&gt; i.ToString(""x2"")));
        }
    }

    private static byte[] HashHmac(byte[] key, byte[] message)
    {
        var hash = new HMACSHA256(key);
        return hash.ComputeHash(message);
    }
</code></pre>

<pre><code>
</code></pre>
","","","24","<c#><telegram><hmac>","0","","0","2019-10-13 17:23:12","","2","","","","","2019-10-13 17:23:12","","",""
"58253746","Can not get the same signature in section 3.3 of rfc7515","<p>In <a href=""https://tools.ietf.org/html/rfc7515#section-3.3"" rel=""nofollow noreferrer"">rfc7515</a>, there is a jws example:</p>

<p>BASE64URL(UTF8(JWS Protected Header)) = <strong>eyJ0eXAiOiJKV1QiLA0KICJhbGciOiJIUzI1NiJ9</strong></p>

<p>BASE64URL(JWS Payload) = <strong>eyJpc3MiOiJqb2UiLA0KICJleHAiOjEzMDA4MTkzODAsDQogImh0dHA6Ly9leGFtcGxlLmNvbS9pc19yb290Ijp0cnVlfQ</strong></p>

<p>Its secret key is a jwk:</p>

<blockquote>
  <p>{""kty"":""oct"",
  ""k"":""<strong>AyM1SysPpbyDfgZld3umj1qzKObwVMkoqQ-EstJQLr_T-1qS0gZH75aKtMN3Yj0iPS4hcgUuTwjAzZr1Z9CAow</strong>""
  }</p>
</blockquote>

<p>Then we need to compute the HMAC of the JWS Signing Input ASCII(BASE64URL(UTF8(JWS Protected Header)) || ’.’ || BASE64URL(JWS Payload)) with the HMAC SHA-256 algorithm using the key specified and base64url-encoding the result.</p>

<p>In the jws example, it gives '<strong>dBjftJeZ4CVP-mB92K27uhbUJU1p1r_wW1gFWFOEjXk</strong>' as the signature, while i get '<strong>ZekyXWlxvuCN9H8cuDrZfaRa3pMJhHpv6QKFdUqXbLc=</strong>'. Is there anything wrong?</p>

<p>Here is my python3 code.</p>

<pre><code>import hashlib
import hmac
import base64

message = bytes('eyJ0eXAiOiJKV1QiLA0KICJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJqb2UiLA0KICJleHAiOjEzMDA4MTkzODAsDQogImh0dHA6Ly9leGFtcGxlLmNvbS9pc19yb290Ijp0cnVlfQ','ascii')

secret = bytes('AyM1SysPpbyDfgZld3umj1qzKObwVMkoqQ-EstJQLr_T-1qS0gZH75aKtMN3Yj0iPS4hcgUuTwjAzZr1Z9CAow','utf-8')

signature = base64.urlsafe_b64encode(hmac.new(secret, message, digestmod=hashlib.sha256).digest())

print(signature)

</code></pre>
","<p>I find it's wrong to sign with bytes of the key directly. I should use base64url_decode(key). Then I get the right signature 'dBjftJeZ4CVP-mB92K27uhbUJU1p1r_wW1gFWFOEjXk='.</p>

<pre><code>import hashlib
import hmac
import base64

message = bytes('eyJ0eXAiOiJKV1QiLA0KICJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJqb2UiLA0KICJleHAiOjEzMDA4MTkzODAsDQogImh0dHA6Ly9leGFtcGxlLmNvbS9pc19yb290Ijp0cnVlfQ','ascii')

secret = base64.urlsafe_b64decode('AyM1SysPpbyDfgZld3umj1qzKObwVMkoqQ-EstJQLr_T-1qS0gZH75aKtMN3Yj0iPS4hcgUuTwjAzZr1Z9CAow==')

signature = base64.urlsafe_b64encode(hmac.new(secret, message, digestmod=hashlib.sha256).digest())

print(signature)
</code></pre>
","58255690","24","<jwt><hmac>","0","0","1","2019-10-06 08:53:03","58255690","0","","","","","2019-10-06 02:13:08","","","2019-10-06 08:53:03"
"58341374","Cannot find body in HttpWebRequestMessage","<p>Currently i'm using the Microsoft OData connected Service to control a WebAPI with HMAC. So far i managed to get the GET methods working. However when i POST a message i need to hash the raw HTTP body and add it to the header. (due to the HMAC signature) </p>

<p>So far i got:</p>

<pre><code>Private WebCon As New Container(New Uri(""http://domain/odata/v1""))

WebCon.Configurations.RequestPipeline.OnMessageCreating = Function(args)
                                                                  Dim request As New HttpWebRequestMessage(args)


                                                                  'Todo hash content if there is any
                                                                  Dim contentMd5Hash As String = """"

                                                                  If args.Method = ""POST"" Then
                                                                      'Todo, retrieve raw (JSON) content from the HttpWebRequestMessage so i can do make a MD5 hash of it.
                                                                  End If

                                                                  'rest of code thath creates the headers.
                                                               End function
</code></pre>
","<p>At the moment, I do not know the right way to do this. Unless to somehow receive the body of the request before the call, and put it into <code>container.Configurations.RequestPipeline.OnMessageCreating</code>:</p>

<pre class=""lang-cs prettyprint-override""><code>[Route(""api/[controller]"")]
[ApiController]
public class ValuesController : ControllerBase
{
    // POST api/values/5
    [HttpPost(""{id}"")]
    public async Task PostAction(int id, [FromBody] string value)
    {
        var container = new DefaultContainer(new Uri(""https://services.odata.org/V4/(S(qc322lduoxrqt13nhydbdcvx))/TripPinServiceRW/""));

        // You need to get request body for HMAC
        var postData = new
        {
            Id = id,
            Value = value
        };
        byte[] requestBody = await new ObjectContent(typeof(object), postData, new JsonMediaTypeFormatter()).ReadAsByteArrayAsync();

        container.Configurations.RequestPipeline.OnMessageCreating = (args) =&gt;
        {
            var request = new HttpWebRequestMessage(args);

            // Get the Request URI
            string requestUri = HttpUtility.UrlEncode(request.Url.AbsoluteUri.ToLower());

            // Calculate UNIX time
            var epochStart = new DateTime(1970, 01, 01, 0, 0, 0, 0, DateTimeKind.Utc);
            var timeSpan = DateTime.UtcNow - epochStart;
            var requestTimeStamp = Convert.ToUInt64(timeSpan.TotalSeconds).ToString();

            // Create the random nonce for each request
            var nonce = Guid.NewGuid().ToString(""N"");

            // Get request body for not GET requests (with Microsoft.AspNetCore.Http.HttpRequest Request.Body)
            var requestContentBase64String = string.Empty;
            if (!request.Method.Equals(""GET"", StringComparison.OrdinalIgnoreCase) &amp;&amp; requestBody != null &amp;&amp; requestBody.Length != 0)
            {
                var md5 = MD5.Create();
                var requestContentHash = md5.ComputeHash(requestBody);
                requestContentBase64String = Convert.ToBase64String(requestContentHash);
            }

            // Creating the raw signature string by combinging
            // APPId, request Http Method, request Uri, request TimeStamp, nonce
            var signatureRawData = string.Format(""{0}{1}{2}{3}{4}{5}"", APPId, request.Method, requestUri, requestTimeStamp, nonce, requestContentBase64String);

            // Converting the APIKey into byte array
            var secretKeyByteArray = Convert.FromBase64String(APIKey);

            // Converting the signatureRawData into byte array
            var signature = Encoding.UTF8.GetBytes(signatureRawData);

            // Generate the hmac signature and set it in the Authorization header
            using (var hmac = new HMACSHA256(secretKeyByteArray))
            {
                var signatureBytes = hmac.ComputeHash(signature);
                var requestSignatureBase64String = Convert.ToBase64String(signatureBytes);

                //Setting the values in the Authorization header using custom scheme (hmacauth)
                request.SetHeader(""Authorization"", string.Format(""hmacauth {0}:{1}:{2}:{3}"", APPId, requestSignatureBase64String, nonce, requestTimeStamp));

                // You can add more haeder you need there
            }

            return request;
        };

        // Call some OData method with postData
        var result = container.CallSomeMethod(postData);

        // Add more business logic there

    }
}
</code></pre>

<p>Can you change server logic to avoid request body in the HMAC authorization header?
Then you can use the HMAC without the request body in the client side.</p>
","58855623","24","<post><hash><odata><hmac><odata-connected-service>","0","0","1","2019-11-14 11:21:09","","0","","","","","2019-10-11 12:33:46","","","2019-11-14 11:21:09"
"56839034","Converting digest + hmacsha256 nodejs code to c#","<p>I am trying to recreate this nodejs code to c#. However, the results dont match up to the expected value. I think because I need to implement a digest function just like in nodejs. But I dont know how digest actually works</p>

<p>==========================================</p>

<h1>Here is a code snippet from nodejs:</h1>

<pre><code>var shaBody = crypto.createHmac('SHA256', base64Key)
    .update(message);

var digestBody = shaBody.digest('base64');
console.log('Base64 Digest HMACSHA256 message: '+ digestBody);
</code></pre>

<p>==========================================</p>

<h1>Here is the c# code:</h1>

<pre><code>byte[] secretkey = new Byte[64];
ASCIIEncoding encoding = new ASCIIEncoding();
string base64String = Convert.ToBase64String(encoding.GetBytes(authKey));
secretkey = Convert.FromBase64String(base64String);

byte[] requestBody = new Byte[64];
requestBody = 
Convert.FromBase64String(Convert.ToBase64String(encoding.GetBytes(body)));

using (HMACSHA256 hmac = new HMACSHA256(secretkey))
{
    byte[] hashValue = hmac.ComputeHash(requestBody);
    var hex = BitConverter.ToString(hashValue).Replace(""-"", 
"""").ToLower();
    string requestSignatureBase64String = 
Convert.ToBase64String(hashValue);

    Console.WriteLine(base64String);
    Console.WriteLine(hex);
    Console.WriteLine(requestSignatureBase64String);
}
</code></pre>
","","","23","<hash><sha256><hmac>","0","","0","2019-07-01 16:17:47","","1","","","","","2019-07-01 16:17:47","","",""
"55232649","Set digest_size when using hmac module","<p>How to set <code>digest_size</code> here?</p>

<pre><code>hmac.new(b'asdf', b'asdfasdf', hashlib.blake2b).hexdigest()
</code></pre>

<p>I've tried this to no effect:</p>

<pre><code>h = hmac.new(b'asdf', b'asdfasdf', hashlib.blake2b)
h.digest_size
64
h.hexdigest()
'ad6ccffb7c84f3f2c39d1426a395bd89d340d00d5f04e2dd02d0467181d2aff961a890cc6beda987ded2c120bf359bf45500fdf6c0d60ce8abe110a8f0696c72'
h.digest_size=16
h.hexdigest()
'ad6ccffb7c84f3f2c39d1426a395bd89d340d00d5f04e2dd02d0467181d2aff961a890cc6beda987ded2c120bf359bf45500fdf6c0d60ce8abe110a8f0696c72'
</code></pre>

<p>In a similar vein to this when used with the <code>hashlib</code> module:</p>

<pre><code>hashlib.blake2b(b""asdfasdf"", digest_size=16).hexdigest()
</code></pre>
","","","23","<python-3.x><hmac><hashlib>","1","","0","2019-03-19 11:08:34","","0","","4698922","","2019-03-19 11:08:34","2019-03-19 02:07:37","","",""
"21201040","Trouble understanding function comparing password hashes","<p>This method is from Udacity's Web Dev Unit 4. </p>

<pre><code>  def check_secure_val(secure_val): 
        val = secure_val.split('|')[0] 
        if secure_val == make_secure_val(val): 
            return val
</code></pre>

<p>If you intake secure val and get val from the first part of the secure val, and then compare secure val to the hash of the val (which itself came from secure val), wouldn't the equality always be true?</p>

<p>Btw, make secure val is</p>

<pre><code>    def make_secure_val(val):
        return '%s|%s' % (val, hmac.new(secret, val).hexdigest())
</code></pre>
","<p>Figured it out. <code>secure_val</code> doesn't necessarily have the right cookie, just a cookie with the right hash.</p>
","21208968","23","<security><hash><hmac>","0","0","1","2014-01-18 19:42:56","","0","","","","","2014-01-18 06:46:55","","","2014-01-18 19:42:56"
"31962830","To authenticate message coming from gps coordinates","<p>I want to authenticate that particular message or packet is coming from an genuine gps device( ie it is not send as fake packet from an attacker). I use http for server communication in order to minimize the overhead of server. I searched for many message authentication codes but I do not know what to take as parameter for authentication codes relevant to gps device.The need is that authentication with minimum overhead.</p>
","","","22","<encryption><gps><hmac>","1","","0","2015-10-08 10:56:11","","0","","5151126","","2015-10-08 10:56:11","2015-08-12 10:39:48","","",""
"58935410","dotnet core encryption and sql server decryption","<p>I have a requirement to store user specific data in sql tables which will later process using stored proceedures. Is it possible to decrypt the data in stored procedure which are encrypted in .net application using Hmac sha algorithm?</p>
","","","20","<.net><encryption><hmac>","0","","0","2019-11-19 13:39:47","","2","","","","","2019-11-19 13:39:47","","",""
"56135884","What is the correct way to implement HMAC authentication for the Web-API payload?","<p>I want to create <code>HMAC authentication</code> for the API payload. I am using <code>Node.js</code> and <code>crypto</code> for this. Since I am new to <code>Node.js</code> and working on <code>HMAC</code> for the first time, I came up with following. </p>

<p>I want to make sure that this is the correct way to do it. If I can improve this code then I would appreciate the suggestions.</p>

<p><strong>Code:</strong></p>

<pre><code>import * as crypto from ""crypto"";

const ENCRYPTION_KEY = crypto.randomBytes(32); // Must be 256 bytes (32 characters)
const IV_LENGTH = 16; // For AES, this is always 16
const ALGORITHM = ""aes-256-cbc"";
const ENCODING = ""hex"";

function encrypt(text) {
  let iv = crypto.randomBytes(IV_LENGTH);
  let cipher = crypto.createCipheriv(
    ALGORITHM,
    Buffer.from(ENCRYPTION_KEY),
    iv
  );
  let encrypted = cipher.update(text);

  encrypted = Buffer.concat([encrypted, cipher.final()]);

  return iv.toString(ENCODING) + "":"" + encrypted.toString(ENCODING);
}

function decrypt(text) {
  let textParts = text.split("":"");
  let iv = Buffer.from(textParts.shift(), ENCODING);
  let encryptedText = Buffer.from(textParts.join("":""), ENCODING);
  let decipher = crypto.createDecipheriv(
    ALGORITHM,
    Buffer.from(ENCRYPTION_KEY),
    iv
  );
  let decrypted = decipher.update(encryptedText);

  decrypted = Buffer.concat([decrypted, decipher.final()]);

  return decrypted.toString();
}

const sampleJson = {
  data: [
    {
      type: ""articles"",
      id: ""1"",
      attributes: {
        title: ""JSON:API paints my bike shed!"",
        body: ""The shortest article. Ever."",
        created: ""2015-05-22T14:56:29.000Z"",
        updated: ""2015-05-22T14:56:28.000Z""
      },
      relationships: {
        author: {
          data: { id: ""42"", type: ""people"" }
        }
      }
    }
  ],
  included: [
    {
      type: ""people"",
      id: ""42"",
      attributes: {
        name: ""John"",
        age: 80,
        gender: ""male""
      }
    }
  ]
};

var sampleJsonInString = JSON.stringify(sampleJson);

var encrypted = encrypt(sampleJsonInString);
console.log(""Encrypted!! \n"" + encrypted);

var decrypted = decrypt(encrypted);
console.log(""Decrypted!! \n"" + decrypted);
</code></pre>

<p><strong>Output:</strong></p>

<p><em>Encrypted!!</em> </p>

<p><code>80a71c05e7f05f7410f52abcc687f9ce:779ffcc3607d3413695eee8f8bd218f2da864257c08c112d0bc39c601a19e655d14784fe04239cd2d45a80c10c23ea02ffa21d78d9712c09400b6f57caf3cd1eacd1714433531c52a033312d79dc89acba9c941f009653a2313d2981ea75f7818ec21e4fede2e795b078b8e89c7721efb8dbbf4acb72bd960b71fe06d431f417f8a1b5896d9e07cb9606cde06ac03f141dde8724fb070310e8583c096587ce0e97489b91257b3e11a23b9282b3ca17a0b12773dc534c072154708966d10bfaff7d8295dd386e78d725c85949ecaf6ba1939d645462d4f3183d32ab564e3fc05d1002f4fd189e7d6137d5350814395a1333c66f46d2d576a8e2d02b1c727185f47bf984b73d7b8e1a7b4b485bff86408f15c5f50757d4d859ea5af4e6a718a9ded65bc9db54ef30c57d0cb72b54392cb8992c0d729e0d309db01bd3204906d6e7c890b39203d1b0d2e5163dbf6484153fbf3a6adf6ecef8c6e5231ee05b4070df5c684401f899f642584f71a8b6ed4d48</code></p>

<p><em>Decrypted!!</em></p>

<pre><code>{""data"":[{""type"":""articles"",""id"":""1"",""attributes"":{""title"":""JSON:API paints my bike shed!"",""body"":""The shortest article. Ever."",""created"":""2015-05-22T14:56:29.000Z""
,""updated"":""2015-05-22T14:56:28.000Z""},""relationships"":{""author"":{""data"":{""id"":""42
"",""type"":""people""}}}}],""included"":[{""type"":""people"",""id"":""42"",""attributes"":{""name""
:""John"",""age"":80,""gender"":""male""}}]}
</code></pre>
","","","20","<node.js><typescript><hmac>","0","","0","2019-05-14 17:44:34","","0","","","","","2019-05-14 17:44:34","","",""
"58081482","Swift HMAC doesn't match NodeJS HMAC, but only sometimes!","<p>I have discovered a HUGE issue in my code, and I have literally no idea what is causing this. </p>

<p>SO, when I send requests to my server I hash a string thats in the request. This is sometimes user input.</p>

<p>My app is multi language so I have to support all ""ä"" chars etc.</p>

<p>So with the normal english letters/chars numbers etc, this hashing method works like a dream. BUT when the string being hashed and compared contains a ""ä"" or a ""ö"" (Not specifically those, it literally might be that any char not in the Base64 set will cause this) the hash doesn't match!</p>

<p>This is an absolute and complete disaster, and I have not noticed it this far. I have tried basically everything I know to try to fix this, and googling, and I am out of luck so far.</p>

<p>I generate the hash in Swift inputting the string and secretToken into this function and saving the output as a HTTP header: </p>

<pre><code>func hmac(string: String, key: String) -&gt; String {

    var digest = [UInt8](repeating: 0, count: Int(CC_SHA256_DIGEST_LENGTH))

    CCHmac(CCHmacAlgorithm(kCCHmacAlgSHA256), key, key.count, string, string.count, &amp;digest)

    let data = Data(digest)

    return data.map { String(format: ""%02hhx"", $0) }.joined()

}
</code></pre>

<p>How I compare the hash in NodeJS:</p>

<pre><code>if (hashInTheRequest === crypto.createHmac('sha256', secretToken).update(stringToHash).digest('hex')) {
    //Good to go
}
</code></pre>

<p>Thanks in advance!</p>
","<p>This could be due to a composition issue. You mentioned non-latin characters, but didn't specify any concrete examples, where you had problems.</p>

<h1>What is composition?</h1>

<p>Unicode aims to be able to represent any character used by humanity. However, many characters are similar, such as <code>u</code>, <code>ü</code>, <code>û</code> and <code>ū</code>. The original idea was to just assign a code point to every possible combination. As one might imagine, this is not the most effective way to store things. Instead, the ""base"" character is used, and then a combining character is added to it.</p>

<p>Let's look at an example: <code>ü</code></p>

<p><code>ü</code> can be represented as <code>U+00FC</code>, also known as <code>LATIN SMALL LETTER U WITH DIAERESIS</code>.</p>

<p><code>ü</code> can also be represented as <code>U+0075</code> (<code>u</code>), followed by <code>U+0308</code> (<code>◌̈</code>), also known as <code>LATIN SMALL LETTER U</code>, followed by <code>COMBINING DIARESIS</code>.</p>

<h1>Why is this problematic?</h1>

<p>Because hash functions don't know what a string is. All they care about is bytes. As such, a string has to be decoded to a string of bytes. As was shown above, there are multiple different ways to decode a string, which means that two different systems can decode the same logical string to different bytes, thus resulting in different hashes.</p>

<h1>How can I fix this?</h1>

<p>You have to explicitly define how the string will be decoded on both platforms, to ensure that both decode the strings in the exact same manner.</p>
","58081483","20","<hash><ios><hmac><node.js>","0","1","1","2019-09-24 13:31:24","","2","","","","","2019-09-18 10:05:33","","","2019-09-18 11:33:37"
"59010423","API protection - JWT vs HMAC signing vs OAuth","<p>Lets say you are designing a new API. The consumer of your API is a mobile app that periodically sends requests in the background, but you expect other consumers as well, such as web apps or servers.</p>

<p>Now lets consider two schemes:</p>

<p>In scheme number one, you create a login endpoint that accepts your username and password, and in response issues a short-lived JWT.</p>

<p>In scheme number two, the client of the API uses an HMAC signature to sign each request, just like 
<a href=""http://s3.amazonaws.com/doc/s3-developer-guide/RESTAuthentication.html"" rel=""nofollow noreferrer"">Amazon protect their API</a></p>

<p>How would you compare the two? it seems that scheme number two is more computationally intensive for the API client, but in both schemes it all boils down to one secret key/password that you must keep on your device or server. How does it make scheme number two more secure?</p>

<p>Then you have scheme number three which is OAuth2, but does it make sense if there is no third-party involved?</p>

<p>Thanks.</p>
","","","19","<api><oauth-2.0><hmac><websecurity>","0","","0","2019-11-23 17:40:51","","0","","","","","2019-11-23 17:40:51","","",""
"58100295","How to calculating signature with SHA256 and HMAC in PHP","<p>I need to calculate the signature using SHA 256 and HMAC in PHP to verify and match supplied signature in webhook. Below is an example in the documentation of our payment provider, I don't know how to achieve this in PHP.</p>

<pre><code>joined_payload = “event_typeORDER.PAYMENT.RECEIVEDresourceamount10.8200resourcecurrencyEURresourcereference1400012634statecompleted""

signed_payload  = :crypto.hmac(:sha256, secret, joined_payload)
signature = Base.encode16(signed_payload, case: :lower)
</code></pre>

<p>This is what I have tried so far but no success</p>

<pre><code>$original_sign = ""b34dc6cdc08066a34df0e24a6288a45ead05873229e8086b59f30d1a9d3cfdb2"";
$joined_payload = ""event_typeRDER.PAYMENT.CANCELLEDresourceamount5.00currencyEURreference31725statecancelled"";
$signed_payload = hash_hmac('sha256', $joined_payload, CLIENT_SECRET);
$generated_sign1 = base_convert($signed_payload,10,16);
</code></pre>
","","","19","<php><sha256><hmac>","0","","0","2019-09-25 14:05:59","","1","","","","","2019-09-25 14:05:59","","",""
"56840576","Rails ActiveResource and hmac","<p>A coworker and I are attempting to get ActiveResource working with HMAC authentication and it's not been easy so far. By manually setting up the headers we've been able to make it work with some calls. We both feel uncomfortable with this solution anyway--we really do not want to be reinventing the wheel on something as important as our HMAC auth.</p>

<p>We are currently trying to figure out if there's a way in ActiveResource to setup the default connection being used. If this is feasible we can easily setup a Faraday connection using HMAC, and then rest easily knowing that ActiveResource will always use that connection. </p>

<p>We did try the api_auth gem but encountered errors (which I've lost track of). We are going to try it again, but I'm not brimming with hope.</p>

<pre><code>class MyResource &lt; ActiveResource::Base
  with_api_auth(access_id, secret_key)
end
</code></pre>

<p>If anyone has any suggestions on how to deal with this, we'd be extremely grateful. </p>
","","","18","<ruby-on-rails><hmac><activeresource>","0","","0","2019-07-01 18:19:06","","1","","","","","2019-07-01 18:19:06","","",""
"59739499","Shopify Hmac verification fail","<p>I have a problem with my app. I am developing an app in node.js until yesterday everything worked correctly, today it does not let you authenticate ... according to what we find is that the hmac that shopify sends, with which it is built from the store url + timestamp + secret-key. Please help...</p>

<p>This is my code, functional until yesterday</p>

<pre><code>signIn(
        hmac: string,
        shop: string,
        timestamp: string,
        code?: string,
    ): Promise&lt;LoginUserDto&gt; {
        return new Promise(
            (
                resolve: (result: LoginUserDto) =&gt; void,
                reject: (reason: ErrorResult) =&gt; void,
            ): void =&gt; {
                this.userRepository.getUserByEmail(shop).then((user: User) =&gt; {
                    if (!user) {
                        let userDto: CreateUserDto = {
                            shopUrl: shop,
                        };
                        let loginUserDto: LoginUserDto = {
                            newUser: true,
                            redirect: '',
                        };
                        const state = nonce();
                        const redirectUrl = redirectAddress;
                        const installUrl =
                            'https://' +
                            shop +
                            '/admin/oauth/authorize?client_id=' +
                            apiKey +
                            '&amp;scope=' +
                            scopes +
                            '&amp;state=' +
                            state +
                            '&amp;redirect_uri=' +
                            redirectUrl;
                        loginUserDto.redirect = installUrl;
                        resolve(loginUserDto);
                    } else {
                        if (shop &amp;&amp; hmac) {
                            let loginUserDto: LoginUserDto = user;
                            //Validate request is from Shopify
                            let query: any = {
                                shop: shop,
                                timestamp: timestamp,
                            };
                            const map = Object.assign({}, query);
                            const message = querystring.stringify(map);
                            const providedHmac = Buffer.from(hmac, 'utf-8');
                            const generatedHash = Buffer.from(
                                crypto
                                    .createHmac('sha256', apiSecret)
                                    .update(message)
                                    .digest('hex'),
                                'utf-8',
                            );
                            let hashEquals = false;

                            try {
                                hashEquals = crypto.timingSafeEqual(
                                    generatedHash,
                                    providedHmac,
                                );
                            } catch (e) {
                                hashEquals = false;
                            }

                            if (!hashEquals) {
                                console.log('hmac failed');
                                let loginUserDto: LoginUserDto = user;
                                loginUserDto.newUser = false;
                                loginUserDto.hmac = false;
                                loginUserDto.redirect =
                                    'https://' + shop + '/admin';
                                resolve(loginUserDto);
                            } else {
                                let loginUserDto: LoginUserDto = user;
                                loginUserDto.newUser = false;
                                loginUserDto.hmac = true;
                                resolve(loginUserDto);
                            }

                            const accessTokenRequestUrl =
                                'https://' + shop + '/admin/oauth/access_token';
                            const accessTokenPayload = {
                                client_id: apiKey,
                                client_secret: apiSecret,
                                code,
                            };
                        } else {
                            let loginUserDto: LoginUserDto = user;
                            loginUserDto.newUser = false;
                            loginUserDto.hmac = false;
                            loginUserDto.redirect =
                                'https://' + shop + '/admin/apps';
                            resolve(loginUserDto);
                        }
                        resolve(user);
                    }
                }); /*.catch((error) =&gt; {
                reject(new InternalServerErrorResult(ErrorCode.GeneralError, error));
            });*/
            },
        );
    }
</code></pre>
","","","18","<node.js><shopify><hmac>","0","","0","2020-01-14 18:10:19","","0","","","","","2020-01-14 18:10:19","","",""
"58399246","How to disable HMAC Authentication in C# Web API Rest Webservice","<p>I am working on a C# Web API REST webservice that should be used for webhooks calls.</p>

<p>My problem is that when I try to connect to my webservice and call my controller, I always get an error message about ms-signature parameter. The only way to call my controller is to use HMAC authentication in the client side (ie SHA calculations on a secret key and the JSON data to be send to the webservice). It seems thata HMAC authentication is set by default, even if I don't want it.</p>

<p>I added a BasicAuthenticationFilter class for login and password check, and it works, but I still have the error message about ms-signature parameter before I can call my controller.</p>

<p>What should I do to disable HMAC authentication in my REST webservice? Basic Authentication by login and password is enough security for me.</p>
","<p>Apparently, the answer was that if I do not want SHA authentication, I need to use Nu-Get to install AspNet.Webhooks.Receiver.Generic package rather than AspNet.WebHooks.Receiver.Custom package. Some changes must be applied to the code, but I finally get ride of SHA authetification which seems to be set by default in Custom WebHooks receivers.</p>
","58416414","18","<rest><authentication><asp.net-web-api><hmac>","0","0","1","2019-10-16 15:03:48","","1","","472495","","2019-10-15 21:45:14","2019-10-15 16:43:17","","","2019-10-16 15:03:48"
"59796966","How to HMAC-S256 encrypt a string in Node JS","<p>I am pretty new to Node. </p>

<p>I am trying to get the following PHP code </p>

<pre><code>$signature = base64_encode(hash_hmac('sha256', $canonicalString, $secret, true));
$signature = rtrim($signature,""="");
</code></pre>

<p>to work in node . Currently I have the following code implementation in node. </p>

<pre><code>  return crypto.createHmac('sha256', key)
    .update(message)
    .digest('base64');
</code></pre>

<p>Still the service not getting authenticated. </p>

<p>Any help is much appreciated. Been stuck at the same line of code for more than a day.</p>

<p>Thank you</p>
","","","17","<php><node.js><hmac><cryptojs>","0","","0","2020-01-18 02:23:46","","4","","1064767","","2020-01-18 02:23:46","2020-01-18 02:09:17","","",""
"59109475","Unicode-objects must be encoded before hashing in python3","<p>I've been trying to make an app to interact with MKM's API and I've decided to not use the OAuth1 library and make the headers by myself and I'm having problems with the signature that Oauth1 needs. The entire process (for php) can be found <a href=""https://api.cardmarket.com/ws/documentation/API:Auth_OAuthHeader"" rel=""nofollow noreferrer"">here</a>.</p>

<p>This is the code that I have as of right now (I was testing the API by trying to send a single request, just so I could see how it works)</p>

<p>Code:</p>

<pre><code>#!/usr/bin/env python3
import requests
from urllib.parse import quote_plus as rawurlencode
import time
import string
import random
import operator
import uuid
from hashlib import sha1
from hmac import new as hmac


#check this https://stackoverflow.com/questions/27075944/oauth1-0-api-issue-with-python/32510649
def main():


    app_token = ""XXXXXXXXX""
    app_secret = ""XXXXXXXXX""
    access_token = ""XXXXXXXXX""
    access_token_secret = ""XXXXXXXXX""

    signing_key = str(app_secret+'&amp;'+access_token_secret)

    nonce = uuid.uuid4().hex

    url = 'https://api.cardmarket.com/ws/v2.0/account'
    base_url='GET&amp;'+rawurlencode(url)+'&amp;'
    params = 'oauth_consumer_key=XXXXXXXXX&amp;'+ \
    'oauth_nonce='+nonce+'&amp;'+\
    'oauth_signature_method=""HMAC-SHA1&amp;'+\
    'oauth_timestamp='+str(int(time.time()))+'&amp;'+\
    'oauth_token=XXXXXXXXX&amp;'+\
    'oauth_version=1.0'
    base_string = rawurlencode(params)
    string_f = base_url+base_string
    signature = hmac(signing_key.encode('utf-8'), base_string, sha1).digest().encode('base64')[:-1]
    MyHeader = 'OAuth ' + 'realm=""' + url + '"", ' 
    MyHeader += 'oauth_consumer_key' + '=""' + 'XXXXXXXXX' + '"",'
    MyHeader += 'oauth_nonce' + '=""' + nonce + '"",'
    MyHeader += 'oauth_signature_method' + '=""' + 'HMAC-SHA1' + '"",'
    MyHeader += 'oauth_timestamp' + '=""' + str(int(time.time())) + '"",'
    MyHeader += 'oauth_token' + '=""' + 'XXXXXXXXX' + '"",'
    MyHeader += 'oauth_version' + '=""' + '1.0' + '"",'
    MyHeader += 'oauth_signature=""' + signature +'""'

    headers = {'Authorization': MyHeader}


    response = request.get(url,headers=headers)

    print(response.json())
    #print(base_string+""\n\n"")
    #print(""KEY ""+signing_key+""\n\n"")
    #print(""String final ""+string_f+""\n\n"")


if __name__ == ""__main__"":
    main()

</code></pre>

<p>When I use the script, I get the next message:</p>

<pre><code>Traceback (most recent call last):
  File ""origin.py"", line 58, in &lt;module&gt;
    main()
  File ""origin.py"", line 36, in main
    signature = hmac(signing_key.encode('utf-8'), base_string, sha1).digest().encode('base64')[:-1]
  File ""/usr/lib/python3.6/hmac.py"", line 144, in new
    return HMAC(key, msg, digestmod)
  File ""/usr/lib/python3.6/hmac.py"", line 84, in __init__
    self.update(msg)
  File ""/usr/lib/python3.6/hmac.py"", line 93, in update
    self.inner.update(msg)
TypeError: Unicode-objects must be encoded before hashing
</code></pre>

<p>Now, I've been investigating about this and I've tried different methods on the HMAC constructor so it wouldn't fail, I've even separated the constructor and the digest() so I could pinpoint more exactly where the error was. With this said, I've run out of ideas, I've read like 100 different posts about this specific TypeError and I really don't know what to do anymore, It's probably going to be a really stupid thing but I really need your help guys, I'm kinda losing my mind to be honest :D</p>
","<p>You need to encode your <code>base_string</code> as hmac is using bytes, not unicode string:</p>

<pre><code>signature = hmac(signing_key.encode('utf-8'), base_string.encode(), sha1)
</code></pre>
","59109525","15","<python><python-3.x><oauth><typeerror><hmac>","0","0","1","2019-11-29 18:23:05","59109525","0","","","","","2019-11-29 18:17:47","","","2019-11-29 18:23:05"
"52901891","Recommended amount of a time a nonce should be retained?","<p>What is the recommended amount of time a nonce should be retained? Indefinitely? Using a <a href=""https://en.wikipedia.org/wiki/Cryptographic_nonce"" rel=""nofollow noreferrer"">nonce</a> as part of HMAC Authentication and ideally the most secure option is to retain it indefinitely, guaranteeing each web request is unique. Curious if there is any best practice regarding retention?</p>
","","","15","<http><security><authentication><hmac><nonce>","1","","0","2018-10-20 02:21:55","","0","","","","","2018-10-20 02:21:55","","",""
"58330510","createHmac gives wrong hash","<p>I've read many posts here but still struggle to solve my problem. I need to port a simple code from Python to Node.js:</p>

<pre><code>import hmac
import hashlib
a = hashlib.sha256()
a.update('SECRET')
print a.hexdigest()
</code></pre>

<p>the result is 0917b13a9091915d54b6336f45909539cce452b3661b21f386418a257883b30a</p>

<p>It matches the hash I get on <a href=""https://www.xorbin.com/tools/sha256-hash-calculator"" rel=""nofollow noreferrer"">https://www.xorbin.com/tools/sha256-hash-calculator</a></p>

<p>My JS code currently looks like this:</p>

<pre><code>var crypto = require('crypto');
console.log (crypto.createHmac('SHA256', 'SECRET').digest('hex'));
</code></pre>

<p>The result is different: 95ccedba61b3d42254e24e5e651e5141ac06a071479296924e6e25d0e7882859</p>

<p>How do I make them match? Thank you!!!</p>
","","","14","<javascript><sha256><hmac>","0","","0","2019-10-10 20:23:41","","1","","","","","2019-10-10 20:17:26","","",""
"59674326","HMAC Calculation - 1WorldSync API","<p>I am trying to implement a data integration using APIs provided by 1WorldSync. In the documentation provided by 1WorldSync, it shows that in order to use the APIs, a hash code has to be derived based on a url build. </p>

<p>Given:</p>

<p>Sample Url: </p>

<pre><code>/V2/products?app_id=9af172d4&amp;searchType=advancedSearch&amp;query=itemPrimaryId:A00007252147019&amp;access_mdmcomputer&amp;TIMESTAMP=2015-10-19T09:58:37Z&amp;geo_loc_access_latd=9.91&amp;geo_loc_access_long=51.51
</code></pre>

<p>Provided Java Script</p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-html lang-html prettyprint-override""><code>// get an hmac_sha1 key from the raw key bytes
javax.crypto.spec.SecretKeySpec signingKey = new
javax.crypto.spec.SecretKeySpec(key.getBytes(),
""HmacSHA256"");
// get an hmac_sha1 Mac instance and initialize with the signing key
javax.crypto.Mac mac = javax.crypto.Mac.getInstance(""HmacSHA256"");
mac.init(signingKey);
// compute the hmac on input data bytes
byte[] rawHmac = mac.doFinal(data.getBytes());
// base64-encode the hmac
result = org.apache.commons.codec.binary.Base64.encodeBase64String(rawHmac);
result = java.net.URLEncoder.encode(result.trim(),""UTF-8"");
return result;
}</code></pre>
</div>
</div>
</p>

<p>Sample generated hash-code:
g46a7iec6G8lEegcSNYcgiOyFMp0o6YWXyc1sn8YXW0%3D</p>

<p>Link to the HMAC Guide provided by 1WorldSync: <a href=""https://marketplace.api.1worldsync.com/api/doc/1WorldSync_Content1_API_HMAC_Guide_v1.1.pdf"" rel=""nofollow noreferrer"">https://marketplace.api.1worldsync.com/api/doc/1WorldSync_Content1_API_HMAC_Guide_v1.1.pdf</a></p>

<p>I am trying to accomplish this same feat using Python. Please help!</p>
","","","13","<python><hmac>","0","","0","2020-01-10 01:24:38","","0","","463213","","2020-01-10 01:24:38","2020-01-10 01:13:21","","",""
"38814757","Signing IIS Response","<p>I am trying to create a SOAP service where I want every response to be signed using either a HMAC SHA 256 or an RSA Private key.</p>

<p>My original plan was to intercept the response using an HttpModule. I would then read the body and calculate a HMAC SHA 256 hash and add that to a custom response header. That way it would be possible to verify the content of the body using that header hash.</p>

<p>But the only way I can find to actually read the body is through a Filter. When I do that, I can't write new response headers because headers have already been sent.</p>

<p>Am I going about this completely backwards?</p>
","","","13","<iis><soap><hmac><signing>","0","","0","2016-08-07 13:47:46","","2","","","","","2016-08-07 13:47:46","","",""
"55769542","My API call from Python2.7 code works but not from Python3....Getting 'Invalid id/secret key combination' hmac.new","<p>I am trying to make an API call from my Python2.7 code which works, but not from python3.6....My ID/Secret Combination is not being generated correctly and I am getting a 403 response back stating ID/secret is incorrect on Python3.6. I tried every possible combination from Python3.6 but nothing works...</p>

<p><strong><em>Below is the code for both python2.7 and 3.6</em></strong></p>

<pre><code>  ---------Python2.7---------
def generate_auth_string(self, method):
        authstring = ""%s\n%s/%s/%s\n%s\n%s\n"" % (
            self.formatted_date,
            self.service_url.rstrip('/'),  # this is merged with resource and ""method"" below
            self.resource.strip('/'),   # merged
            method.strip('/'),   # call scope (not http verb)
            self.content_type,
            self.method   # HTTP VERB
        )
        hash1 = hmac.new(self.secret, authstring, hashlib.sha1).digest()
        return ""MPA %s:%s"" % (self.key_id, base64.b64encode(hash1))

---------Python3.6---------
    def generate_auth_string(self, method):
        authstring = ""%s\n%s/%s/%s\n%s\n%s\n"" % (
            self.formatted_date,
            self.service_url.rstrip('/'),  # this is merged with resource and ""method"" below
            self.resource.strip('/'),   # merged
            method.strip('/'),   # call scope (not http verb)
            self.content_type,
            self.method   # HTTP VERB
        )
        secret = bytes(self.secret, 'utf-8')
        authstring = bytes(authstring, 'utf-8')
        return ""MPA %s:%s"" % (self.key_id, base64.b64encode(hmac.new(secret, authstring, hashlib.sha1).digest()).decode(""utf-8""))
</code></pre>
","","","12","<python-3.x><hmac>","1","","0","2019-04-20 01:48:32","","0","","11065722","","2019-04-20 01:48:32","2019-04-20 01:43:22","","",""
"57682035","OAuth1.0 HMAC-SHA1 signature consistantly wrong","<p>I am trying to authenticate to a service and can do so using Postman for testing. I can set my code generated timestamps &amp; nonce value in Postman get a signature and successfully complete the request however if I generate the signature myself (tried a few languages) I always get an incorrect/unsuccessful signature. Below is the javascript version as it looks the cleanest </p>

<p>Using: <a href=""http://caligatio.github.com/jsSHA/"" rel=""nofollow noreferrer"">http://caligatio.github.com/jsSHA/</a></p>

<p>Following: <a href=""https://oauth.net/core/1.0a/"" rel=""nofollow noreferrer"">https://oauth.net/core/1.0a/</a></p>

<p>Appendix A.5.1.  Generating Signature Base String</p>

<p>Appendix A.5.2.  Calculating Signature Value</p>

<blockquote>
  <p>Result is correct</p>
</blockquote>

<p>Following 9.2 HMAC-SHA1:</p>

<p>Generating Signature Base String</p>

<p>customer secret is: RmsIsDuxd110pC33</p>

<p>token does not yet exist so, key is: ""RmsIsDuxd110pC33&amp;""</p>

<blockquote>
  <p>Result is incorrect</p>
</blockquote>

<p>Code Below, some values ammended:</p>

<pre><code>  var timestamp = Math.round((new Date()).getTime() / 1000.0);
  var nonce = GetNonce();      

  var request_token_uri=""https:// target_website /oauth/request_token/""
  var queryParams=""oauth_consumer_key=FjFj6a6aRqRqeeB7&amp;oauth_signature_method=HMAC-SHA1&amp;oauth_timestamp=""+timestamp+""&amp;oauth_nonce=""+nonce+""&amp;oauth_version=1.0&amp;oauth_callback=oob""

  var signatureBaseString = ""POST&amp;"" + encodeURIComponent(request_token_uri) + ""&amp;"" + encodeURIComponent(queryParams);
  var secret_signing_key =encodeURIComponent(""RmsIsDuxd110pC33"")+""&amp;"";

  var shaObj = new jsSHA(""SHA-1"", ""TEXT"");
  shaObj.setHMACKey(secret_signing_key, ""TEXT"");
  shaObj.update(signatureBaseString);

  var hmac = shaObj.getHMAC(""B64"");

  //use these values in POSTMAN 'Authorization' tab &amp; Hit ""Preview Request""
  console.log(nonce);
  console.log(timestamp);
  console.log(hmac);

  //POSTMAN generates an oauth_signature which does not match mine.

  queryParams+=""&amp;oauth_signature=""+encodeURIComponent(hmac);
  //  vs
  queryParams+=""&amp;oauth_signature=""+WHATEVER_POSTMAN_GENEREATED_USING_SAME_VALUES

  //Using POSTMANs sig the request is successful. Using mine it is not
</code></pre>

<p>I have additionally repeated this process in python &amp; my python values match my JavaScript output. What is wrong with my signatureBaseString/secret_signing_key ?</p>

<p>I have tried numerous combinations of the query params with no success </p>
","","","11","<oauth><hmac>","0","","0","2019-08-27 20:46:04","","0","","","","","2019-08-27 20:46:04","","",""
"59563878","VBA script: responseMessage:""The HMAC validation failed : Invalid Signature or no matching alias found","<p>I have been exploring REST api call through VBA scripting. I am just making a simple REST API request. I have followed all the steps mentions and correctly
verified each and everything. Below is the detail per item.</p>

<p>API Key :- I have verified my api key its correct.
API Secret :- It is also correct.</p>

<blockquote>
  <p>responseMessage:""The HMAC validation failed : Invalid Signature or no
  matching alias found</p>
</blockquote>

<p>can anyone Please help me on this code.</p>

<pre><code>Public Function Base64_HMACSHA256(ByVal sTextToHash As String, ByVal sSharedSecretKey As String)
    Dim asc As Object, enc As Object
    Dim TextToHash() As Byte
    Dim SharedSecretKey() As Byte
    Set asc = CreateObject(""System.Text.UTF8Encoding"")
    Set enc = CreateObject(""System.Security.Cryptography.HMACSHA256"")

    TextToHash = asc.Getbytes_4(sTextToHash)
    SharedSecretKey = asc.Getbytes_4(sSharedSecretKey)
    enc.Key = SharedSecretKey

    Dim bytes() As Byte
    bytes = enc.ComputeHash_2((TextToHash))
    Base64_HMACSHA256 = EncodeBase64(bytes)
    Set asc = Nothing
    Set enc = Nothing
End Function

Private Function EncodeBase64(ByRef arrData() As Byte) As String

    'Inside the VBE, Go to Tools -&gt; References, then Select Microsoft XML, v6.0
    '(or whatever your latest is. This will give you access to the XML Object Library.)

    Dim objXML As MSXML2.DOMDocument60
    Dim objNode As MSXML2.IXMLDOMElement

    Set objXML = New MSXML2.DOMDocument60

    ' byte array to base64
    Set objNode = objXML.createElement(""b64"")
    objNode.DataType = ""bin.base64""
    objNode.nodeTypedValue = arrData
    EncodeBase64 = objNode.Text

    Set objNode = Nothing
    Set objXML = Nothing

End Function


    Sub Submit()
    Dim sURL As String, sHTML As String, sAllPosts As String
    Dim jsonText As String
    Dim enc As String
    Dim jsonObject As Object
    Dim i As Long
    Dim ws As Worksheet
    Dim oHttp, fsobj, txtobj As Object
    Dim blWSExists As Boolean
    Dim Body, certificate_data, s As String

    Set ws = Worksheets(""sheet1"")
        l = Len(certificate_data)
        Set oHttp = CreateObject(""WinHttp.WinHttpRequest.5.1"")
        Set fsobj = CreateObject(""Scripting.FileSystemObject"")
        sURL = ""url""
        jsonText = ws.Cells(1, 1)
        oHttp.Open ""POST"", sURL, False
        oHttp.setRequestHeader ""Content-Type"", ""application/json""
        oHttp.setRequestHeader ""Accept"", ""application/json""
        enc = Base64_HMACSHA256(""sTextToHash"", ""sSharedSecretKey"")
        oHttp.setRequestHeader ""hmac-signature"", ""enc""
        a = Len(certificate_data)
        oHttp.SetClientCertificate (""certificate name"")
        oHttp.send (jsonText)
        sHTML = oHttp.responseText`enter code here`
        Worksheets(""Sheet1"").Range(""E1"").Value = sHTML
    End Sub
</code></pre>
","","","11","<vba><rest><api><post><hmac>","0","","0","2020-01-02 13:09:28","","0","","5162073","","2020-01-02 13:09:28","2020-01-02 13:05:36","","",""
"47642062","Using hmac 512 for storing files on public s3 bucket","<p>Is it ok to store file names in such a format? Will there be a case when algo returns me the same value for different text inputs?</p>
","","","11","<java><amazon-s3><hmac>","1","","0","2017-12-04 21:13:57","","0","","","","","2017-12-04 21:13:57","","",""
"58747568","Authentication being bypassed when called from a browser","<p>I have implemented hmac authentication in a .NET Core 2.1 website. On my local machine when hmac is turned on when I hit the URL in the browser I get a 401 error. In my testing app if I send no authentication I get a 401 error. If I send the authentication it all works great.</p>

<p>On the server if I hit the website in the browser it works i.e. I don't get a 401, I should. If I call it from my test client I get a 401 unless I send the authentication. </p>

<p>I can't work our why on the server deployment. What could allow a browser not to need authentication but forces a test client to?</p>
","","","6","<authentication><asp.net-core-2.1><hmac>","0","","0","2019-11-07 11:13:32","","0","","","","","2019-11-07 11:13:32","","",""
"58703583","Replicating Python HMAC Encoding to R","<p>I am trying to create a token for an API call in R. I have example code and output in Python, but I am unable to replicate in R. I know little to nothing about encoding, decoding, etc. Hoping someone can shed some light on what I can do to make these outputs match. Here is an example.</p>

<pre><code>    import base64
    import hmac
    import hashlib

    secret_key = 'AAAAAABBB'
    uri = '/keywords'
    method = 'GET'
    timestamp = time.time() * 1000
    message = ""{}.{}.{}"".format(timestamp, method, uri)

    hash = hmac.new(bytes(secret_key, ""utf-8""), bytes(message, ""utf-8""), hashlib.sha256)
    hash.hexdigest()
    signature = base64.b64encode(hash.digest())
</code></pre>

<p>Can anyone please help me with replicating above codes into R?
Thank you.</p>
","","","4","<python><api><hmac>","0","","0","2019-11-05 02:21:44","","0","","","","","2019-11-05 02:21:44","","",""